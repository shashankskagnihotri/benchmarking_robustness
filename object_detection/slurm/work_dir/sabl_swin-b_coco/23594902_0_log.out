submitit INFO (2024-05-14 04:19:44,220) - Starting with JobEnvironment(job_id=23594902, hostname=uc2n482.localdomain, local_rank=0(1), node=0(1), global_rank=0(1))
submitit INFO (2024-05-14 04:19:44,220) - Loading pickle: /pfs/work7/workspace/scratch/ma_ruweber-team_project_fss2024/benchmarking_robustness/object_detection/slurm/work_dir/sabl_swin-b_coco/23594902_submitted.pkl
05/14 04:19:48 - mmengine - INFO - 
------------------------------------------------------------
System environment:
    sys.platform: linux
    Python: 3.10.13 (main, Sep 11 2023, 13:44:35) [GCC 11.2.0]
    CUDA available: True
    MUSA available: False
    numpy_random_seed: 1689266538
    GPU 0: Tesla V100-SXM2-32GB
    CUDA_HOME: /opt/bwhpc/common/devel/cuda/11.8
    NVCC: Cuda compilation tools, release 11.8, V11.8.89
    GCC: gcc (GCC) 8.5.0 20210514 (Red Hat 8.5.0-10)
    PyTorch: 2.1.2
    PyTorch compiling details: PyTorch built with:
  - GCC 9.3
  - C++ Version: 201703
  - Intel(R) oneAPI Math Kernel Library Version 2023.1-Product Build 20230303 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v3.1.1 (Git Hash 64f6bcbcbab628e96f33a62c3e975f8535a7bde4)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - LAPACK is enabled (usually provided by MKL)
  - NNPACK is enabled
  - CPU capability usage: AVX512
  - CUDA Runtime 11.8
  - NVCC architecture flags: -gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_61,code=sm_61;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86;-gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_90,code=sm_90;-gencode;arch=compute_37,code=compute_37
  - CuDNN 8.7
  - Magma 2.6.1
  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.8, CUDNN_VERSION=8.7.0, CXX_COMPILER=/opt/rh/devtoolset-9/root/usr/bin/c++, CXX_FLAGS= -D_GLIBCXX_USE_CXX11_ABI=0 -fabi-version=11 -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -DNDEBUG -DUSE_KINETO -DLIBKINETO_NOROCTRACER -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -O2 -fPIC -Wall -Wextra -Werror=return-type -Werror=non-virtual-dtor -Werror=bool-operation -Wnarrowing -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-unused-parameter -Wno-unused-function -Wno-unused-result -Wno-strict-overflow -Wno-strict-aliasing -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=old-style-cast -Wno-invalid-partial-specialization -Wno-unused-private-field -Wno-aligned-allocation-unavailable -Wno-missing-braces -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Werror=cast-function-type -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_DISABLE_GPU_ASSERTS=ON, TORCH_VERSION=2.1.2, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, USE_ROCM=OFF, 

    TorchVision: 0.16.2
    OpenCV: 4.9.0
    MMEngine: 0.10.3

Runtime environment:
    cudnn_benchmark: False
    dist_cfg: {'backend': 'nccl'}
    mp_cfg: {'mp_start_method': 'fork', 'opencv_num_threads': 0}
    seed: 1689266538
    Distributed launcher: none
    Distributed training: False
    GPU number: 1
------------------------------------------------------------

05/14 04:19:49 - mmengine - INFO - Config:
auto_scale_lr = dict(base_batch_size=16, enable=False)
backend_args = None
data_root = 'data/coco/'
dataset_type = 'CocoDataset'
default_hooks = dict(
    checkpoint=dict(interval=1, type='CheckpointHook'),
    logger=dict(interval=50, type='LoggerHook'),
    param_scheduler=dict(type='ParamSchedulerHook'),
    sampler_seed=dict(type='DistSamplerSeedHook'),
    timer=dict(type='IterTimerHook'),
    visualization=dict(type='DetVisualizationHook'))
default_scope = 'mmdet'
env_cfg = dict(
    cudnn_benchmark=False,
    dist_cfg=dict(backend='nccl'),
    mp_cfg=dict(mp_start_method='fork', opencv_num_threads=0))
launcher = 'none'
load_from = None
log_level = 'INFO'
log_processor = dict(by_epoch=True, type='LogProcessor', window_size=50)
model = dict(
    backbone=dict(
        attn_drop_rate=0.0,
        convert_weights=True,
        depths=[
            2,
            2,
            18,
            2,
            1,
        ],
        drop_path_rate=0.3,
        drop_rate=0.0,
        embed_dims=128,
        init_cfg=dict(
            checkpoint=
            'https://github.com/SwinTransformer/storage/releases/download/v1.0.0/swin_base_patch4_window12_384_22k.pth',
            type='Pretrained'),
        mlp_ratio=4,
        num_heads=[
            4,
            8,
            16,
            32,
            64,
        ],
        out_indices=[
            1,
            2,
            3,
            4,
        ],
        patch_norm=True,
        pretrain_img_size=384,
        qk_scale=None,
        qkv_bias=True,
        strides=[
            4,
            2,
            2,
            2,
            2,
        ],
        type='SwinTransformer',
        window_size=12,
        with_cp=True),
    data_preprocessor=dict(
        bgr_to_rgb=True,
        mean=[
            123.675,
            116.28,
            103.53,
        ],
        pad_size_divisor=32,
        std=[
            58.395,
            57.12,
            57.375,
        ],
        type='DetDataPreprocessor'),
    neck=dict(
        in_channels=[
            256,
            512,
            1024,
            2048,
        ],
        num_outs=5,
        out_channels=256,
        type='FPN'),
    roi_head=dict(
        bbox_head=[
            dict(
                bbox_coder=dict(
                    num_buckets=14,
                    scale_factor=1.7,
                    type='BucketingBBoxCoder'),
                cls_in_channels=256,
                cls_out_channels=1024,
                loss_bbox_cls=dict(
                    loss_weight=1.0, type='CrossEntropyLoss',
                    use_sigmoid=True),
                loss_bbox_reg=dict(
                    beta=0.1, loss_weight=1.0, type='SmoothL1Loss'),
                loss_cls=dict(
                    loss_weight=1.0,
                    type='CrossEntropyLoss',
                    use_sigmoid=False),
                norm_cfg=None,
                num_classes=80,
                num_cls_fcs=1,
                num_reg_fcs=0,
                reg_class_agnostic=True,
                reg_cls_out_channels=256,
                reg_feat_up_ratio=2,
                reg_in_channels=256,
                reg_offset_out_channels=256,
                reg_post_kernel=3,
                reg_post_num=1,
                reg_pre_kernel=3,
                reg_pre_num=2,
                roi_feat_size=7,
                type='SABLHead'),
            dict(
                bbox_coder=dict(
                    num_buckets=14,
                    scale_factor=1.5,
                    type='BucketingBBoxCoder'),
                cls_in_channels=256,
                cls_out_channels=1024,
                loss_bbox_cls=dict(
                    loss_weight=1.0, type='CrossEntropyLoss',
                    use_sigmoid=True),
                loss_bbox_reg=dict(
                    beta=0.1, loss_weight=1.0, type='SmoothL1Loss'),
                loss_cls=dict(
                    loss_weight=1.0,
                    type='CrossEntropyLoss',
                    use_sigmoid=False),
                norm_cfg=None,
                num_classes=80,
                num_cls_fcs=1,
                num_reg_fcs=0,
                reg_class_agnostic=True,
                reg_cls_out_channels=256,
                reg_feat_up_ratio=2,
                reg_in_channels=256,
                reg_offset_out_channels=256,
                reg_post_kernel=3,
                reg_post_num=1,
                reg_pre_kernel=3,
                reg_pre_num=2,
                roi_feat_size=7,
                type='SABLHead'),
            dict(
                bbox_coder=dict(
                    num_buckets=14,
                    scale_factor=1.3,
                    type='BucketingBBoxCoder'),
                cls_in_channels=256,
                cls_out_channels=1024,
                loss_bbox_cls=dict(
                    loss_weight=1.0, type='CrossEntropyLoss',
                    use_sigmoid=True),
                loss_bbox_reg=dict(
                    beta=0.1, loss_weight=1.0, type='SmoothL1Loss'),
                loss_cls=dict(
                    loss_weight=1.0,
                    type='CrossEntropyLoss',
                    use_sigmoid=False),
                norm_cfg=None,
                num_classes=80,
                num_cls_fcs=1,
                num_reg_fcs=0,
                reg_class_agnostic=True,
                reg_cls_out_channels=256,
                reg_feat_up_ratio=2,
                reg_in_channels=256,
                reg_offset_out_channels=256,
                reg_post_kernel=3,
                reg_post_num=1,
                reg_pre_kernel=3,
                reg_pre_num=2,
                roi_feat_size=7,
                type='SABLHead'),
        ],
        bbox_roi_extractor=dict(
            featmap_strides=[
                4,
                8,
                16,
                32,
            ],
            out_channels=256,
            roi_layer=dict(output_size=7, sampling_ratio=0, type='RoIAlign'),
            type='SingleRoIExtractor'),
        num_stages=3,
        stage_loss_weights=[
            1,
            0.5,
            0.25,
        ],
        type='CascadeRoIHead'),
    rpn_head=dict(
        anchor_generator=dict(
            ratios=[
                0.5,
                1.0,
                2.0,
            ],
            scales=[
                8,
            ],
            strides=[
                4,
                8,
                16,
                32,
                64,
            ],
            type='AnchorGenerator'),
        bbox_coder=dict(
            target_means=[
                0.0,
                0.0,
                0.0,
                0.0,
            ],
            target_stds=[
                1.0,
                1.0,
                1.0,
                1.0,
            ],
            type='DeltaXYWHBBoxCoder'),
        feat_channels=256,
        in_channels=256,
        loss_bbox=dict(
            beta=0.1111111111111111, loss_weight=1.0, type='SmoothL1Loss'),
        loss_cls=dict(
            loss_weight=1.0, type='CrossEntropyLoss', use_sigmoid=True),
        type='RPNHead'),
    test_cfg=dict(
        rcnn=dict(
            max_per_img=100,
            nms=dict(iou_threshold=0.5, type='nms'),
            score_thr=0.05),
        rpn=dict(
            max_per_img=1000,
            min_bbox_size=0,
            nms=dict(iou_threshold=0.7, type='nms'),
            nms_pre=1000)),
    train_cfg=dict(
        rcnn=[
            dict(
                assigner=dict(
                    ignore_iof_thr=-1,
                    match_low_quality=False,
                    min_pos_iou=0.5,
                    neg_iou_thr=0.5,
                    pos_iou_thr=0.5,
                    type='MaxIoUAssigner'),
                debug=False,
                pos_weight=-1,
                sampler=dict(
                    add_gt_as_proposals=True,
                    neg_pos_ub=-1,
                    num=512,
                    pos_fraction=0.25,
                    type='RandomSampler')),
            dict(
                assigner=dict(
                    ignore_iof_thr=-1,
                    match_low_quality=False,
                    min_pos_iou=0.6,
                    neg_iou_thr=0.6,
                    pos_iou_thr=0.6,
                    type='MaxIoUAssigner'),
                debug=False,
                pos_weight=-1,
                sampler=dict(
                    add_gt_as_proposals=True,
                    neg_pos_ub=-1,
                    num=512,
                    pos_fraction=0.25,
                    type='RandomSampler')),
            dict(
                assigner=dict(
                    ignore_iof_thr=-1,
                    match_low_quality=False,
                    min_pos_iou=0.7,
                    neg_iou_thr=0.7,
                    pos_iou_thr=0.7,
                    type='MaxIoUAssigner'),
                debug=False,
                pos_weight=-1,
                sampler=dict(
                    add_gt_as_proposals=True,
                    neg_pos_ub=-1,
                    num=512,
                    pos_fraction=0.25,
                    type='RandomSampler')),
        ],
        rpn=dict(
            allowed_border=0,
            assigner=dict(
                ignore_iof_thr=-1,
                match_low_quality=True,
                min_pos_iou=0.3,
                neg_iou_thr=0.3,
                pos_iou_thr=0.7,
                type='MaxIoUAssigner'),
            debug=False,
            pos_weight=-1,
            sampler=dict(
                add_gt_as_proposals=False,
                neg_pos_ub=-1,
                num=256,
                pos_fraction=0.5,
                type='RandomSampler')),
        rpn_proposal=dict(
            max_per_img=2000,
            min_bbox_size=0,
            nms=dict(iou_threshold=0.7, type='nms'),
            nms_pre=2000)),
    type='CascadeRCNN')
optim_wrapper = dict(
    optimizer=dict(lr=0.02, momentum=0.9, type='SGD', weight_decay=0.0001),
    type='OptimWrapper')
param_scheduler = [
    dict(
        begin=0, by_epoch=False, end=500, start_factor=0.001, type='LinearLR'),
    dict(
        begin=0,
        by_epoch=True,
        end=12,
        gamma=0.1,
        milestones=[
            8,
            11,
        ],
        type='MultiStepLR'),
]
resume = False
test_cfg = dict(type='TestLoop')
test_dataloader = dict(
    batch_size=1,
    dataset=dict(
        ann_file='annotations/instances_val2017.json',
        backend_args=None,
        data_prefix=dict(img='val2017/'),
        data_root='data/coco/',
        pipeline=[
            dict(backend_args=None, type='LoadImageFromFile'),
            dict(keep_ratio=True, scale=(
                1333,
                800,
            ), type='Resize'),
            dict(type='LoadAnnotations', with_bbox=True),
            dict(
                meta_keys=(
                    'img_id',
                    'img_path',
                    'ori_shape',
                    'img_shape',
                    'scale_factor',
                ),
                type='PackDetInputs'),
        ],
        test_mode=True,
        type='CocoDataset'),
    drop_last=False,
    num_workers=2,
    persistent_workers=True,
    sampler=dict(shuffle=False, type='DefaultSampler'))
test_evaluator = dict(
    ann_file='data/coco/annotations/instances_val2017.json',
    backend_args=None,
    format_only=False,
    metric='bbox',
    type='CocoMetric')
test_pipeline = [
    dict(backend_args=None, type='LoadImageFromFile'),
    dict(keep_ratio=True, scale=(
        1333,
        800,
    ), type='Resize'),
    dict(type='LoadAnnotations', with_bbox=True),
    dict(
        meta_keys=(
            'img_id',
            'img_path',
            'ori_shape',
            'img_shape',
            'scale_factor',
        ),
        type='PackDetInputs'),
]
train_cfg = dict(max_epochs=12, type='EpochBasedTrainLoop', val_interval=1)
train_dataloader = dict(
    batch_sampler=dict(type='AspectRatioBatchSampler'),
    batch_size=2,
    dataset=dict(
        ann_file='annotations/instances_train2017.json',
        backend_args=None,
        data_prefix=dict(img='train2017/'),
        data_root='data/coco/',
        filter_cfg=dict(filter_empty_gt=True, min_size=32),
        pipeline=[
            dict(backend_args=None, type='LoadImageFromFile'),
            dict(type='LoadAnnotations', with_bbox=True),
            dict(keep_ratio=True, scale=(
                1333,
                800,
            ), type='Resize'),
            dict(prob=0.5, type='RandomFlip'),
            dict(type='PackDetInputs'),
        ],
        type='CocoDataset'),
    num_workers=2,
    persistent_workers=True,
    sampler=dict(shuffle=True, type='DefaultSampler'))
train_pipeline = [
    dict(backend_args=None, type='LoadImageFromFile'),
    dict(type='LoadAnnotations', with_bbox=True),
    dict(keep_ratio=True, scale=(
        1333,
        800,
    ), type='Resize'),
    dict(prob=0.5, type='RandomFlip'),
    dict(type='PackDetInputs'),
]
val_cfg = dict(type='ValLoop')
val_dataloader = dict(
    batch_size=1,
    dataset=dict(
        ann_file='annotations/instances_val2017.json',
        backend_args=None,
        data_prefix=dict(img='val2017/'),
        data_root='data/coco/',
        pipeline=[
            dict(backend_args=None, type='LoadImageFromFile'),
            dict(keep_ratio=True, scale=(
                1333,
                800,
            ), type='Resize'),
            dict(type='LoadAnnotations', with_bbox=True),
            dict(
                meta_keys=(
                    'img_id',
                    'img_path',
                    'ori_shape',
                    'img_shape',
                    'scale_factor',
                ),
                type='PackDetInputs'),
        ],
        test_mode=True,
        type='CocoDataset'),
    drop_last=False,
    num_workers=2,
    persistent_workers=True,
    sampler=dict(shuffle=False, type='DefaultSampler'))
val_evaluator = dict(
    ann_file='data/coco/annotations/instances_val2017.json',
    backend_args=None,
    format_only=False,
    metric='bbox',
    type='CocoMetric')
vis_backends = [
    dict(type='LocalVisBackend'),
]
visualizer = dict(
    name='visualizer',
    type='DetLocalVisualizer',
    vis_backends=[
        dict(type='LocalVisBackend'),
    ])
work_dir = 'slurm/results/sabl_swin-b_coco'

05/14 04:19:51 - mmengine - INFO - Distributed training is not used, all SyncBatchNorm (SyncBN) layers in the model will be automatically reverted to BatchNormXd layers if they are used.
05/14 04:19:51 - mmengine - INFO - Hooks will be executed in the following order:
before_run:
(VERY_HIGH   ) RuntimeInfoHook                    
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
before_train:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_train_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(NORMAL      ) DistSamplerSeedHook                
 -------------------- 
before_train_iter:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_train_iter:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
after_train_epoch:
(NORMAL      ) IterTimerHook                      
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_val:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
before_val_epoch:
(NORMAL      ) IterTimerHook                      
 -------------------- 
before_val_iter:
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_val_iter:
(NORMAL      ) IterTimerHook                      
(NORMAL      ) DetVisualizationHook               
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_val_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
after_val:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
after_train:
(VERY_HIGH   ) RuntimeInfoHook                    
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_test:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
before_test_epoch:
(NORMAL      ) IterTimerHook                      
 -------------------- 
before_test_iter:
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_test_iter:
(NORMAL      ) IterTimerHook                      
(NORMAL      ) DetVisualizationHook               
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_test_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_test:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
after_run:
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
loading annotations into memory...
Done (t=14.72s)
creating index...
index created!
loading annotations into memory...
Done (t=0.53s)
creating index...
index created!
loading annotations into memory...
Done (t=0.54s)
creating index...
index created!
05/14 04:20:21 - mmengine - INFO - Loads checkpoint by http backend from path: https://github.com/SwinTransformer/storage/releases/download/v1.0.0/swin_base_patch4_window12_384_22k.pth
05/14 04:20:22 - mmengine - WARNING - "FileClient" will be deprecated in future. Please use io functions in https://mmengine.readthedocs.io/en/latest/api/fileio.html#file-io
05/14 04:20:22 - mmengine - WARNING - "HardDiskBackend" is the alias of "LocalBackend" and the former will be deprecated in future.
05/14 04:20:22 - mmengine - INFO - Checkpoints will be saved to /pfs/work7/workspace/scratch/ma_ruweber-team_project_fss2024/benchmarking_robustness/object_detection/slurm/results/sabl_swin-b_coco.
05/14 04:21:08 - mmengine - INFO - Epoch(train)  [1][   50/58633]  lr: 1.9820e-03  eta: 7 days, 11:17:32  time: 0.9174  data_time: 0.0213  memory: 4318  loss: 1.9525  loss_rpn_cls: 0.2617  loss_rpn_bbox: 0.0246  s0.loss_cls: 0.7512  s0.acc: 92.8711  s0.loss_bbox_cls: 0.1020  s0.loss_bbox_reg: 0.0979  s1.loss_cls: 0.3918  s1.acc: 95.0195  s1.loss_bbox_cls: 0.0348  s1.loss_bbox_reg: 0.0318  s2.loss_cls: 0.2278  s2.acc: 97.6562  s2.loss_bbox_cls: 0.0158  s2.loss_bbox_reg: 0.0130
05/14 04:21:52 - mmengine - INFO - Epoch(train)  [1][  100/58633]  lr: 3.9840e-03  eta: 7 days, 8:23:14  time: 0.8878  data_time: 0.0038  memory: 4318  loss: 0.9180  loss_rpn_cls: 0.1334  loss_rpn_bbox: 0.0323  s0.loss_cls: 0.2649  s0.acc: 94.3359  s0.loss_bbox_cls: 0.1009  s0.loss_bbox_reg: 0.1043  s1.loss_cls: 0.1157  s1.acc: 96.1914  s1.loss_bbox_cls: 0.0344  s1.loss_bbox_reg: 0.0306  s2.loss_cls: 0.0727  s2.acc: 96.3867  s2.loss_bbox_cls: 0.0158  s2.loss_bbox_reg: 0.0131
05/14 04:22:37 - mmengine - INFO - Epoch(train)  [1][  150/58633]  lr: 5.9860e-03  eta: 7 days, 7:31:04  time: 0.8895  data_time: 0.0036  memory: 4318  loss: 0.8844  loss_rpn_cls: 0.1116  loss_rpn_bbox: 0.0347  s0.loss_cls: 0.2296  s0.acc: 94.3359  s0.loss_bbox_cls: 0.1020  s0.loss_bbox_reg: 0.1119  s1.loss_cls: 0.1341  s1.acc: 96.5820  s1.loss_bbox_cls: 0.0351  s1.loss_bbox_reg: 0.0324  s2.loss_cls: 0.0668  s2.acc: 97.3633  s2.loss_bbox_cls: 0.0144  s2.loss_bbox_reg: 0.0119
05/14 04:23:21 - mmengine - INFO - Epoch(train)  [1][  200/58633]  lr: 7.9880e-03  eta: 7 days, 7:01:01  time: 0.8882  data_time: 0.0037  memory: 4318  loss: 0.9550  loss_rpn_cls: 0.1459  loss_rpn_bbox: 0.0488  s0.loss_cls: 0.2456  s0.acc: 94.1406  s0.loss_bbox_cls: 0.0926  s0.loss_bbox_reg: 0.1011  s1.loss_cls: 0.1483  s1.acc: 96.7773  s1.loss_bbox_cls: 0.0343  s1.loss_bbox_reg: 0.0315  s2.loss_cls: 0.0806  s2.acc: 98.0469  s2.loss_bbox_cls: 0.0143  s2.loss_bbox_reg: 0.0119
05/14 04:24:06 - mmengine - INFO - Epoch(train)  [1][  250/58633]  lr: 9.9900e-03  eta: 7 days, 6:47:37  time: 0.8903  data_time: 0.0036  memory: 4318  loss: 1.0584  loss_rpn_cls: 0.1510  loss_rpn_bbox: 0.0605  s0.loss_cls: 0.3126  s0.acc: 94.9219  s0.loss_bbox_cls: 0.1024  s0.loss_bbox_reg: 0.1113  s1.loss_cls: 0.1314  s1.acc: 96.3867  s1.loss_bbox_cls: 0.0386  s1.loss_bbox_reg: 0.0358  s2.loss_cls: 0.0867  s2.acc: 98.1445  s2.loss_bbox_cls: 0.0152  s2.loss_bbox_reg: 0.0129
05/14 04:24:50 - mmengine - INFO - Epoch(train)  [1][  300/58633]  lr: 1.1992e-02  eta: 7 days, 6:49:59  time: 0.8963  data_time: 0.0037  memory: 4318  loss: 1.1503  loss_rpn_cls: 0.1243  loss_rpn_bbox: 0.0422  s0.loss_cls: 0.4248  s0.acc: 96.7773  s0.loss_bbox_cls: 0.1156  s0.loss_bbox_reg: 0.1294  s1.loss_cls: 0.1254  s1.acc: 97.9492  s1.loss_bbox_cls: 0.0380  s1.loss_bbox_reg: 0.0354  s2.loss_cls: 0.0856  s2.acc: 97.8516  s2.loss_bbox_cls: 0.0160  s2.loss_bbox_reg: 0.0138
05/14 04:25:34 - mmengine - INFO - Epoch(train)  [1][  350/58633]  lr: 1.3994e-02  eta: 7 days, 6:07:27  time: 0.8700  data_time: 0.0037  memory: 4318  loss: nan  loss_rpn_cls: nan  loss_rpn_bbox: nan  s0.loss_cls: nan  s0.acc: 25.0000  s0.loss_bbox_cls: nan  s0.loss_bbox_reg: nan  s1.loss_cls: nan  s1.acc: 25.0000  s1.loss_bbox_cls: nan  s1.loss_bbox_reg: nan  s2.loss_cls: nan  s2.acc: 25.0000  s2.loss_bbox_cls: nan  s2.loss_bbox_reg: nan
05/14 04:26:12 - mmengine - INFO - Epoch(train)  [1][  400/58633]  lr: 1.5996e-02  eta: 7 days, 3:01:19  time: 0.7648  data_time: 0.0039  memory: 4316  loss: nan  loss_rpn_cls: nan  loss_rpn_bbox: nan  s0.loss_cls: nan  s0.acc: 0.0000  s0.loss_bbox_cls: nan  s0.loss_bbox_reg: nan  s1.loss_cls: nan  s1.acc: 0.0000  s1.loss_bbox_cls: nan  s1.loss_bbox_reg: nan  s2.loss_cls: nan  s2.acc: 0.0000  s2.loss_bbox_cls: nan  s2.loss_bbox_reg: nan
05/14 04:26:51 - mmengine - INFO - Epoch(train)  [1][  450/58633]  lr: 1.7998e-02  eta: 7 days, 0:41:20  time: 0.7686  data_time: 0.0037  memory: 4317  loss: nan  loss_rpn_cls: nan  loss_rpn_bbox: nan  s0.loss_cls: nan  s0.acc: 14.2857  s0.loss_bbox_cls: nan  s0.loss_bbox_reg: nan  s1.loss_cls: nan  s1.acc: 14.2857  s1.loss_bbox_cls: nan  s1.loss_bbox_reg: nan  s2.loss_cls: nan  s2.acc: 14.2857  s2.loss_bbox_cls: nan  s2.loss_bbox_reg: nan
05/14 04:27:29 - mmengine - INFO - Epoch(train)  [1][  500/58633]  lr: 2.0000e-02  eta: 6 days, 22:42:13  time: 0.7626  data_time: 0.0040  memory: 4317  loss: nan  loss_rpn_cls: nan  loss_rpn_bbox: nan  s0.loss_cls: nan  s0.acc: 0.0000  s0.loss_bbox_cls: nan  s0.loss_bbox_reg: nan  s1.loss_cls: nan  s1.acc: 0.0000  s1.loss_bbox_cls: nan  s1.loss_bbox_reg: nan  s2.loss_cls: nan  s2.acc: 0.0000  s2.loss_bbox_cls: nan  s2.loss_bbox_reg: nan
submitit WARNING (2024-05-14 04:27:34,097) - Bypassing signal SIGCONT
submitit ERROR (2024-05-14 04:27:34,102) - Submitted job triggered an exception

============================= JOB FEEDBACK =============================

NodeName=uc2n482
Job ID: 23594902
Cluster: uc2
User/Group: ma_ruweber/ma_ma
State: FAILED (exit code 1)
Nodes: 1
Cores per node: 10
CPU Utilized: 00:08:06
CPU Efficiency: 9.64% of 01:24:00 core-walltime
Job Wall-clock time: 00:08:24
Memory Utilized: 4.81 GB
Memory Efficiency: 5.24% of 91.80 GB
