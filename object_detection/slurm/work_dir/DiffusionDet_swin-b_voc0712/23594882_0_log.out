submitit INFO (2024-05-14 03:59:26,110) - Starting with JobEnvironment(job_id=23594882, hostname=uc2n512.localdomain, local_rank=0(1), node=0(1), global_rank=0(1))
submitit INFO (2024-05-14 03:59:26,111) - Loading pickle: /pfs/work7/workspace/scratch/ma_ruweber-team_project_fss2024/benchmarking_robustness/object_detection/slurm/work_dir/DiffusionDet_swin-b_voc0712/23594882_submitted.pkl
05/14 03:59:31 - mmengine - INFO - 
------------------------------------------------------------
System environment:
    sys.platform: linux
    Python: 3.10.13 (main, Sep 11 2023, 13:44:35) [GCC 11.2.0]
    CUDA available: True
    MUSA available: False
    numpy_random_seed: 1849165022
    GPU 0: Tesla V100-SXM2-32GB
    CUDA_HOME: /opt/bwhpc/common/devel/cuda/11.8
    NVCC: Cuda compilation tools, release 11.8, V11.8.89
    GCC: gcc (GCC) 8.5.0 20210514 (Red Hat 8.5.0-10)
    PyTorch: 2.1.2
    PyTorch compiling details: PyTorch built with:
  - GCC 9.3
  - C++ Version: 201703
  - Intel(R) oneAPI Math Kernel Library Version 2023.1-Product Build 20230303 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v3.1.1 (Git Hash 64f6bcbcbab628e96f33a62c3e975f8535a7bde4)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - LAPACK is enabled (usually provided by MKL)
  - NNPACK is enabled
  - CPU capability usage: AVX512
  - CUDA Runtime 11.8
  - NVCC architecture flags: -gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_61,code=sm_61;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86;-gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_90,code=sm_90;-gencode;arch=compute_37,code=compute_37
  - CuDNN 8.7
  - Magma 2.6.1
  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.8, CUDNN_VERSION=8.7.0, CXX_COMPILER=/opt/rh/devtoolset-9/root/usr/bin/c++, CXX_FLAGS= -D_GLIBCXX_USE_CXX11_ABI=0 -fabi-version=11 -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -DNDEBUG -DUSE_KINETO -DLIBKINETO_NOROCTRACER -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -O2 -fPIC -Wall -Wextra -Werror=return-type -Werror=non-virtual-dtor -Werror=bool-operation -Wnarrowing -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-unused-parameter -Wno-unused-function -Wno-unused-result -Wno-strict-overflow -Wno-strict-aliasing -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=old-style-cast -Wno-invalid-partial-specialization -Wno-unused-private-field -Wno-aligned-allocation-unavailable -Wno-missing-braces -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Werror=cast-function-type -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_DISABLE_GPU_ASSERTS=ON, TORCH_VERSION=2.1.2, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, USE_ROCM=OFF, 

    TorchVision: 0.16.2
    OpenCV: 4.9.0
    MMEngine: 0.10.3

Runtime environment:
    cudnn_benchmark: False
    dist_cfg: {'backend': 'nccl'}
    mp_cfg: {'mp_start_method': 'fork', 'opencv_num_threads': 0}
    seed: 1849165022
    Distributed launcher: none
    Distributed training: False
    GPU number: 1
------------------------------------------------------------

05/14 03:59:32 - mmengine - INFO - Config:
auto_scale_lr = dict(base_batch_size=16, enable=False)
backend = 'pillow'
backend_args = None
custom_imports = dict(
    allow_failed_imports=False,
    imports=[
        'projects.DiffusionDet.diffusiondet',
    ])
data_root = 'data/VOCdevkit/'
dataset_type = 'VOCDataset'
default_hooks = dict(
    checkpoint=dict(
        _scope_='mmdet',
        by_epoch=False,
        interval=75000,
        max_keep_ckpts=3,
        type='CheckpointHook'),
    logger=dict(_scope_='mmdet', interval=50, type='LoggerHook'),
    param_scheduler=dict(_scope_='mmdet', type='ParamSchedulerHook'),
    sampler_seed=dict(_scope_='mmdet', type='DistSamplerSeedHook'),
    timer=dict(_scope_='mmdet', type='IterTimerHook'),
    visualization=dict(_scope_='mmdet', type='DetVisualizationHook'))
default_scope = 'mmdet'
env_cfg = dict(
    cudnn_benchmark=False,
    dist_cfg=dict(backend='nccl'),
    mp_cfg=dict(mp_start_method='fork', opencv_num_threads=0))
launcher = 'none'
load_from = None
log_level = 'INFO'
log_processor = dict(
    _scope_='mmdet', by_epoch=False, type='LogProcessor', window_size=50)
model = dict(
    backbone=dict(
        attn_drop_rate=0.0,
        convert_weights=True,
        depths=[
            2,
            2,
            18,
            2,
            1,
        ],
        drop_path_rate=0.3,
        drop_rate=0.0,
        embed_dims=128,
        init_cfg=dict(
            checkpoint=
            'https://github.com/SwinTransformer/storage/releases/download/v1.0.0/swin_base_patch4_window12_384_22k.pth',
            type='Pretrained'),
        mlp_ratio=4,
        num_heads=[
            4,
            8,
            16,
            32,
            64,
        ],
        out_indices=[
            1,
            2,
            3,
            4,
        ],
        patch_norm=True,
        pretrain_img_size=384,
        qk_scale=None,
        qkv_bias=True,
        strides=[
            4,
            2,
            2,
            2,
            2,
        ],
        type='SwinTransformer',
        window_size=12,
        with_cp=True),
    bbox_head=dict(
        criterion=dict(
            assigner=dict(
                candidate_topk=5,
                center_radius=2.5,
                match_costs=[
                    dict(
                        alpha=0.25,
                        eps=1e-08,
                        gamma=2.0,
                        type='FocalLossCost',
                        weight=2.0),
                    dict(box_format='xyxy', type='BBoxL1Cost', weight=5.0),
                    dict(iou_mode='giou', type='IoUCost', weight=2.0),
                ],
                type='DiffusionDetMatcher'),
            loss_bbox=dict(loss_weight=5.0, reduction='sum', type='L1Loss'),
            loss_cls=dict(
                alpha=0.25,
                gamma=2.0,
                loss_weight=2.0,
                reduction='sum',
                type='FocalLoss',
                use_sigmoid=True),
            loss_giou=dict(loss_weight=2.0, reduction='sum', type='GIoULoss'),
            num_classes=80,
            type='DiffusionDetCriterion'),
        ddim_sampling_eta=1.0,
        deep_supervision=True,
        feat_channels=256,
        num_classes=80,
        num_heads=6,
        num_proposals=500,
        prior_prob=0.01,
        roi_extractor=dict(
            featmap_strides=[
                4,
                8,
                16,
                32,
            ],
            out_channels=256,
            roi_layer=dict(output_size=7, sampling_ratio=2, type='RoIAlign'),
            type='SingleRoIExtractor'),
        sampling_timesteps=1,
        single_head=dict(
            act_cfg=dict(inplace=True, type='ReLU'),
            dim_feedforward=2048,
            dropout=0.0,
            dynamic_conv=dict(dynamic_dim=64, dynamic_num=2),
            num_cls_convs=1,
            num_heads=8,
            num_reg_convs=3,
            type='SingleDiffusionDetHead'),
        snr_scale=2.0,
        type='DynamicDiffusionDetHead'),
    data_preprocessor=dict(
        bgr_to_rgb=True,
        mean=[
            123.675,
            116.28,
            103.53,
        ],
        pad_size_divisor=32,
        std=[
            58.395,
            57.12,
            57.375,
        ],
        type='DetDataPreprocessor'),
    neck=dict(
        in_channels=[
            256,
            512,
            1024,
            2048,
        ],
        num_outs=4,
        out_channels=256,
        type='FPN'),
    test_cfg=dict(
        min_bbox_size=0,
        nms=dict(iou_threshold=0.5, type='nms'),
        score_thr=0.5,
        use_nms=True),
    type='DiffusionDet')
optim_wrapper = dict(
    _scope_='mmdet',
    clip_grad=dict(max_norm=1.0, norm_type=2),
    optimizer=dict(lr=2.5e-05, type='AdamW', weight_decay=0.0001),
    type='OptimWrapper')
param_scheduler = [
    dict(
        begin=0, by_epoch=False, end=1000, start_factor=0.01, type='LinearLR'),
    dict(
        begin=0,
        by_epoch=False,
        end=450000,
        gamma=0.1,
        milestones=[
            350000,
            420000,
        ],
        type='MultiStepLR'),
]
resume = False
test_cfg = dict(_scope_='mmdet', type='TestLoop')
test_dataloader = dict(
    batch_size=1,
    dataset=dict(
        ann_file='VOC2007/ImageSets/Main/test.txt',
        backend_args=None,
        data_prefix=dict(sub_data_root='VOC2007/'),
        data_root='data/VOCdevkit/',
        pipeline=[
            dict(backend_args=None, type='LoadImageFromFile'),
            dict(keep_ratio=True, scale=(
                1000,
                600,
            ), type='Resize'),
            dict(type='LoadAnnotations', with_bbox=True),
            dict(
                meta_keys=(
                    'img_id',
                    'img_path',
                    'ori_shape',
                    'img_shape',
                    'scale_factor',
                ),
                type='PackDetInputs'),
        ],
        test_mode=True,
        type='VOCDataset'),
    drop_last=False,
    num_workers=2,
    persistent_workers=True,
    sampler=dict(shuffle=False, type='DefaultSampler'))
test_evaluator = dict(eval_mode='11points', metric='mAP', type='VOCMetric')
test_pipeline = [
    dict(backend_args=None, type='LoadImageFromFile'),
    dict(keep_ratio=True, scale=(
        1000,
        600,
    ), type='Resize'),
    dict(type='LoadAnnotations', with_bbox=True),
    dict(
        meta_keys=(
            'img_id',
            'img_path',
            'ori_shape',
            'img_shape',
            'scale_factor',
        ),
        type='PackDetInputs'),
]
train_cfg = dict(
    max_iters=450000, type='IterBasedTrainLoop', val_interval=75000)
train_dataloader = dict(
    batch_sampler=dict(type='AspectRatioBatchSampler'),
    batch_size=2,
    dataset=dict(
        dataset=dict(
            datasets=[
                dict(
                    ann_file='VOC2007/ImageSets/Main/trainval.txt',
                    backend_args=None,
                    data_prefix=dict(sub_data_root='VOC2007/'),
                    data_root='data/VOCdevkit/',
                    filter_cfg=dict(
                        bbox_min_size=32, filter_empty_gt=True, min_size=32),
                    pipeline=[
                        dict(backend_args=None, type='LoadImageFromFile'),
                        dict(type='LoadAnnotations', with_bbox=True),
                        dict(
                            keep_ratio=True,
                            scale=(
                                1000,
                                600,
                            ),
                            type='Resize'),
                        dict(prob=0.5, type='RandomFlip'),
                        dict(type='PackDetInputs'),
                    ],
                    type='VOCDataset'),
                dict(
                    ann_file='VOC2012/ImageSets/Main/trainval.txt',
                    backend_args=None,
                    data_prefix=dict(sub_data_root='VOC2012/'),
                    data_root='data/VOCdevkit/',
                    filter_cfg=dict(
                        bbox_min_size=32, filter_empty_gt=True, min_size=32),
                    pipeline=[
                        dict(backend_args=None, type='LoadImageFromFile'),
                        dict(type='LoadAnnotations', with_bbox=True),
                        dict(
                            keep_ratio=True,
                            scale=(
                                1000,
                                600,
                            ),
                            type='Resize'),
                        dict(prob=0.5, type='RandomFlip'),
                        dict(type='PackDetInputs'),
                    ],
                    type='VOCDataset'),
            ],
            ignore_keys=[
                'dataset_type',
            ],
            type='ConcatDataset'),
        times=3,
        type='RepeatDataset'),
    num_workers=2,
    persistent_workers=True,
    sampler=dict(shuffle=True, type='DefaultSampler'))
train_pipeline = [
    dict(backend_args=None, type='LoadImageFromFile'),
    dict(type='LoadAnnotations', with_bbox=True),
    dict(keep_ratio=True, scale=(
        1000,
        600,
    ), type='Resize'),
    dict(prob=0.5, type='RandomFlip'),
    dict(type='PackDetInputs'),
]
val_cfg = dict(_scope_='mmdet', type='ValLoop')
val_dataloader = dict(
    batch_size=1,
    dataset=dict(
        ann_file='VOC2007/ImageSets/Main/test.txt',
        backend_args=None,
        data_prefix=dict(sub_data_root='VOC2007/'),
        data_root='data/VOCdevkit/',
        pipeline=[
            dict(backend_args=None, type='LoadImageFromFile'),
            dict(keep_ratio=True, scale=(
                1000,
                600,
            ), type='Resize'),
            dict(type='LoadAnnotations', with_bbox=True),
            dict(
                meta_keys=(
                    'img_id',
                    'img_path',
                    'ori_shape',
                    'img_shape',
                    'scale_factor',
                ),
                type='PackDetInputs'),
        ],
        test_mode=True,
        type='VOCDataset'),
    drop_last=False,
    num_workers=2,
    persistent_workers=True,
    sampler=dict(shuffle=False, type='DefaultSampler'))
val_evaluator = dict(eval_mode='11points', metric='mAP', type='VOCMetric')
vis_backends = [
    dict(_scope_='mmdet', type='LocalVisBackend'),
]
visualizer = dict(
    _scope_='mmdet',
    name='visualizer',
    type='DetLocalVisualizer',
    vis_backends=[
        dict(type='LocalVisBackend'),
    ])
work_dir = 'slurm/results/DiffusionDet_swin-b_voc0712'

05/14 03:59:34 - mmengine - INFO - Distributed training is not used, all SyncBatchNorm (SyncBN) layers in the model will be automatically reverted to BatchNormXd layers if they are used.
05/14 03:59:34 - mmengine - INFO - Hooks will be executed in the following order:
before_run:
(VERY_HIGH   ) RuntimeInfoHook                    
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
before_train:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_train_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(NORMAL      ) DistSamplerSeedHook                
 -------------------- 
before_train_iter:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_train_iter:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
after_train_epoch:
(NORMAL      ) IterTimerHook                      
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_val:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
before_val_epoch:
(NORMAL      ) IterTimerHook                      
 -------------------- 
before_val_iter:
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_val_iter:
(NORMAL      ) IterTimerHook                      
(NORMAL      ) DetVisualizationHook               
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_val_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
after_val:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
after_train:
(VERY_HIGH   ) RuntimeInfoHook                    
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_test:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
before_test_epoch:
(NORMAL      ) IterTimerHook                      
 -------------------- 
before_test_iter:
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_test_iter:
(NORMAL      ) IterTimerHook                      
(NORMAL      ) DetVisualizationHook               
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_test_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_test:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
after_run:
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
05/14 03:59:42 - mmengine - INFO - Loads checkpoint by http backend from path: https://github.com/SwinTransformer/storage/releases/download/v1.0.0/swin_base_patch4_window12_384_22k.pth
05/14 03:59:43 - mmengine - WARNING - "FileClient" will be deprecated in future. Please use io functions in https://mmengine.readthedocs.io/en/latest/api/fileio.html#file-io
05/14 03:59:43 - mmengine - WARNING - "HardDiskBackend" is the alias of "LocalBackend" and the former will be deprecated in future.
05/14 03:59:43 - mmengine - INFO - Checkpoints will be saved to /pfs/work7/workspace/scratch/ma_ruweber-team_project_fss2024/benchmarking_robustness/object_detection/slurm/results/DiffusionDet_swin-b_voc0712.
05/14 04:00:14 - mmengine - INFO - Iter(train) [    50/450000]  lr: 1.4640e-06  eta: 3 days, 6:45:26  time: 0.6301  data_time: 0.0066  memory: 5481  grad_norm: 366489.5113  loss: 80.5122  loss_cls: 2.5795  loss_bbox: 14.3660  loss_giou: 2.0120  s.0.loss_cls: 2.7869  s.0.loss_bbox: 3.7709  s.0.loss_giou: 1.6769  s.1.loss_cls: 2.9084  s.1.loss_bbox: 3.6635  s.1.loss_giou: 1.7647  s.2.loss_cls: 2.9952  s.2.loss_bbox: 4.2852  s.2.loss_giou: 1.4703  s.3.loss_cls: 2.9067  s.3.loss_bbox: 13.1039  s.3.loss_giou: 2.2988  s.4.loss_cls: 2.8560  s.4.loss_bbox: 12.7626  s.4.loss_giou: 2.3047
05/14 04:00:45 - mmengine - INFO - Iter(train) [   100/450000]  lr: 2.7027e-06  eta: 3 days, 5:55:50  time: 0.6170  data_time: 0.0066  memory: 5481  grad_norm: 135861.4148  loss: 46.8403  loss_cls: 2.4666  loss_bbox: 3.7659  loss_giou: 1.5021  s.0.loss_cls: 2.5294  s.0.loss_bbox: 2.5253  s.0.loss_giou: 1.3161  s.1.loss_cls: 2.7181  s.1.loss_bbox: 2.3546  s.1.loss_giou: 1.3550  s.2.loss_cls: 2.6794  s.2.loss_bbox: 3.1400  s.2.loss_giou: 1.3205  s.3.loss_cls: 2.7204  s.3.loss_bbox: 4.5366  s.3.loss_giou: 1.7251  s.4.loss_cls: 2.7512  s.4.loss_bbox: 5.6259  s.4.loss_giou: 1.8079
05/14 04:01:16 - mmengine - INFO - Iter(train) [   150/450000]  lr: 3.9414e-06  eta: 3 days, 5:47:13  time: 0.6203  data_time: 0.0064  memory: 5481  grad_norm: 52696.4985  loss: 33.8010  loss_cls: 2.2678  loss_bbox: 1.8752  loss_giou: 1.2116  s.0.loss_cls: 2.3230  s.0.loss_bbox: 1.5880  s.0.loss_giou: 0.9908  s.1.loss_cls: 2.6394  s.1.loss_bbox: 1.8363  s.1.loss_giou: 1.1332  s.2.loss_cls: 2.6102  s.2.loss_bbox: 2.0946  s.2.loss_giou: 1.1589  s.3.loss_cls: 2.6183  s.3.loss_bbox: 2.2080  s.3.loss_giou: 1.2200  s.4.loss_cls: 2.4721  s.4.loss_bbox: 2.2815  s.4.loss_giou: 1.2721
05/14 04:01:47 - mmengine - INFO - Iter(train) [   200/450000]  lr: 5.1802e-06  eta: 3 days, 5:38:31  time: 0.6181  data_time: 0.0063  memory: 5481  grad_norm: 31665.0530  loss: 30.1074  loss_cls: 2.1691  loss_bbox: 1.7912  loss_giou: 1.1649  s.0.loss_cls: 2.3361  s.0.loss_bbox: 1.3533  s.0.loss_giou: 0.9061  s.1.loss_cls: 2.3354  s.1.loss_bbox: 1.6436  s.1.loss_giou: 1.0036  s.2.loss_cls: 2.4791  s.2.loss_bbox: 1.6669  s.2.loss_giou: 1.0496  s.3.loss_cls: 2.4264  s.3.loss_bbox: 1.6180  s.3.loss_giou: 1.0790  s.4.loss_cls: 2.3064  s.4.loss_bbox: 1.7102  s.4.loss_giou: 1.0684
05/14 04:02:18 - mmengine - INFO - Iter(train) [   250/450000]  lr: 6.4189e-06  eta: 3 days, 5:38:05  time: 0.6215  data_time: 0.0063  memory: 5481  grad_norm: 21753.0577  loss: 28.2321  loss_cls: 2.0692  loss_bbox: 1.6657  loss_giou: 1.0469  s.0.loss_cls: 2.1943  s.0.loss_bbox: 1.3471  s.0.loss_giou: 0.8698  s.1.loss_cls: 2.2295  s.1.loss_bbox: 1.4100  s.1.loss_giou: 0.9114  s.2.loss_cls: 2.2976  s.2.loss_bbox: 1.5732  s.2.loss_giou: 0.9459  s.3.loss_cls: 2.2093  s.3.loss_bbox: 1.6235  s.3.loss_giou: 0.9884  s.4.loss_cls: 2.1970  s.4.loss_bbox: 1.6419  s.4.loss_giou: 1.0114
05/14 04:02:50 - mmengine - INFO - Iter(train) [   300/450000]  lr: 7.6577e-06  eta: 3 days, 5:48:56  time: 0.6305  data_time: 0.0063  memory: 5481  grad_norm: 14292.6014  loss: 27.2741  loss_cls: 1.9832  loss_bbox: 1.6315  loss_giou: 1.0709  s.0.loss_cls: 2.0894  s.0.loss_bbox: 1.3011  s.0.loss_giou: 0.8860  s.1.loss_cls: 2.1403  s.1.loss_bbox: 1.3697  s.1.loss_giou: 0.8998  s.2.loss_cls: 2.2227  s.2.loss_bbox: 1.4177  s.2.loss_giou: 0.9374  s.3.loss_cls: 2.0632  s.3.loss_bbox: 1.4970  s.3.loss_giou: 0.9783  s.4.loss_cls: 2.0764  s.4.loss_bbox: 1.6726  s.4.loss_giou: 1.0367
05/14 04:03:21 - mmengine - INFO - Iter(train) [   350/450000]  lr: 8.8964e-06  eta: 3 days, 5:49:40  time: 0.6241  data_time: 0.0067  memory: 5481  grad_norm: 10284.4891  loss: 29.2025  loss_cls: 2.0752  loss_bbox: 1.9677  loss_giou: 1.1092  s.0.loss_cls: 2.2271  s.0.loss_bbox: 1.4303  s.0.loss_giou: 0.8831  s.1.loss_cls: 2.1126  s.1.loss_bbox: 1.6097  s.1.loss_giou: 0.9444  s.2.loss_cls: 2.2929  s.2.loss_bbox: 1.6472  s.2.loss_giou: 0.9722  s.3.loss_cls: 2.2420  s.3.loss_bbox: 1.7716  s.3.loss_giou: 1.0588  s.4.loss_cls: 2.1000  s.4.loss_bbox: 1.7270  s.4.loss_giou: 1.0316
05/14 04:03:52 - mmengine - INFO - Iter(train) [   400/450000]  lr: 1.0135e-05  eta: 3 days, 5:47:26  time: 0.6213  data_time: 0.0067  memory: 5481  grad_norm: 5199.9968  loss: 27.7379  loss_cls: 1.9372  loss_bbox: 1.8267  loss_giou: 1.0129  s.0.loss_cls: 2.0687  s.0.loss_bbox: 1.3021  s.0.loss_giou: 0.7978  s.1.loss_cls: 2.0298  s.1.loss_bbox: 1.5988  s.1.loss_giou: 0.8669  s.2.loss_cls: 2.1405  s.2.loss_bbox: 1.8254  s.2.loss_giou: 1.0047  s.3.loss_cls: 2.0679  s.3.loss_bbox: 1.6805  s.3.loss_giou: 0.9329  s.4.loss_cls: 1.9814  s.4.loss_bbox: 1.6839  s.4.loss_giou: 0.9797
05/14 04:04:23 - mmengine - INFO - Iter(train) [   450/450000]  lr: 1.1374e-05  eta: 3 days, 5:44:52  time: 0.6204  data_time: 0.0066  memory: 5481  grad_norm: 3533.0534  loss: 30.0974  loss_cls: 1.9402  loss_bbox: 2.4348  loss_giou: 1.2499  s.0.loss_cls: 2.0205  s.0.loss_bbox: 1.5267  s.0.loss_giou: 0.9109  s.1.loss_cls: 1.9646  s.1.loss_bbox: 1.5940  s.1.loss_giou: 0.9745  s.2.loss_cls: 2.0823  s.2.loss_bbox: 1.7728  s.2.loss_giou: 1.0268  s.3.loss_cls: 2.0301  s.3.loss_bbox: 1.8901  s.3.loss_giou: 1.1176  s.4.loss_cls: 2.0982  s.4.loss_bbox: 2.1944  s.4.loss_giou: 1.2690
05/14 04:04:54 - mmengine - INFO - Iter(train) [   500/450000]  lr: 1.2613e-05  eta: 3 days, 5:44:06  time: 0.6223  data_time: 0.0067  memory: 5438  grad_norm: 2033.7146  loss: 27.5479  loss_cls: 1.8303  loss_bbox: 2.1351  loss_giou: 1.1557  s.0.loss_cls: 1.9707  s.0.loss_bbox: 1.3276  s.0.loss_giou: 0.8864  s.1.loss_cls: 1.8446  s.1.loss_bbox: 1.4134  s.1.loss_giou: 0.9577  s.2.loss_cls: 1.9483  s.2.loss_bbox: 1.5195  s.2.loss_giou: 1.0100  s.3.loss_cls: 1.9117  s.3.loss_bbox: 1.6660  s.3.loss_giou: 1.0843  s.4.loss_cls: 1.9205  s.4.loss_bbox: 1.8684  s.4.loss_giou: 1.0976
05/14 04:05:25 - mmengine - INFO - Iter(train) [   550/450000]  lr: 1.3851e-05  eta: 3 days, 5:45:54  time: 0.6260  data_time: 0.0066  memory: 5481  grad_norm: 1362.5659  loss: 26.9210  loss_cls: 1.8510  loss_bbox: 1.8967  loss_giou: 1.1625  s.0.loss_cls: 1.8662  s.0.loss_bbox: 1.2426  s.0.loss_giou: 0.8275  s.1.loss_cls: 1.8705  s.1.loss_bbox: 1.4427  s.1.loss_giou: 0.9314  s.2.loss_cls: 1.9024  s.2.loss_bbox: 1.5098  s.2.loss_giou: 0.9722  s.3.loss_cls: 1.8549  s.3.loss_bbox: 1.7872  s.3.loss_giou: 1.0975  s.4.loss_cls: 1.8369  s.4.loss_bbox: 1.7969  s.4.loss_giou: 1.0720
05/14 04:05:56 - mmengine - INFO - Iter(train) [   600/450000]  lr: 1.5090e-05  eta: 3 days, 5:42:29  time: 0.6182  data_time: 0.0066  memory: 5421  grad_norm: 1125.2403  loss: 27.2202  loss_cls: 1.7751  loss_bbox: 2.0551  loss_giou: 1.2968  s.0.loss_cls: 1.8297  s.0.loss_bbox: 1.3844  s.0.loss_giou: 0.8946  s.1.loss_cls: 1.7279  s.1.loss_bbox: 1.4754  s.1.loss_giou: 0.9636  s.2.loss_cls: 1.8032  s.2.loss_bbox: 1.6091  s.2.loss_giou: 1.0192  s.3.loss_cls: 1.7497  s.3.loss_bbox: 1.7413  s.3.loss_giou: 1.0600  s.4.loss_cls: 1.7628  s.4.loss_bbox: 1.8782  s.4.loss_giou: 1.1940
05/14 04:06:27 - mmengine - INFO - Iter(train) [   650/450000]  lr: 1.6329e-05  eta: 3 days, 5:40:51  time: 0.6206  data_time: 0.0066  memory: 5481  grad_norm: 830.6125  loss: 25.4778  loss_cls: 1.7808  loss_bbox: 1.6176  loss_giou: 1.0777  s.0.loss_cls: 1.8243  s.0.loss_bbox: 1.2087  s.0.loss_giou: 0.8578  s.1.loss_cls: 1.7878  s.1.loss_bbox: 1.2466  s.1.loss_giou: 0.9003  s.2.loss_cls: 1.8366  s.2.loss_bbox: 1.3919  s.2.loss_giou: 0.9437  s.3.loss_cls: 1.8314  s.3.loss_bbox: 1.4827  s.3.loss_giou: 1.0328  s.4.loss_cls: 1.8462  s.4.loss_bbox: 1.6657  s.4.loss_giou: 1.1452
05/14 04:06:58 - mmengine - INFO - Iter(train) [   700/450000]  lr: 1.7568e-05  eta: 3 days, 5:37:45  time: 0.6175  data_time: 0.0066  memory: 5481  grad_norm: 682.4762  loss: 25.7277  loss_cls: 1.8348  loss_bbox: 2.0668  loss_giou: 1.0514  s.0.loss_cls: 1.7427  s.0.loss_bbox: 1.2927  s.0.loss_giou: 0.8663  s.1.loss_cls: 1.7233  s.1.loss_bbox: 1.2922  s.1.loss_giou: 0.8755  s.2.loss_cls: 1.8070  s.2.loss_bbox: 1.4775  s.2.loss_giou: 0.9216  s.3.loss_cls: 1.8028  s.3.loss_bbox: 1.5928  s.3.loss_giou: 0.9728  s.4.loss_cls: 1.7987  s.4.loss_bbox: 1.6398  s.4.loss_giou: 0.9690
submitit WARNING (2024-05-14 04:07:04,524) - Bypassing signal SIGCONT
submitit ERROR (2024-05-14 04:07:04,530) - Submitted job triggered an exception

============================= JOB FEEDBACK =============================

NodeName=uc2n512
Job ID: 23594882
Cluster: uc2
User/Group: ma_ruweber/ma_ma
State: FAILED (exit code 1)
Nodes: 1
Cores per node: 10
CPU Utilized: 00:07:48
CPU Efficiency: 9.57% of 01:21:30 core-walltime
Job Wall-clock time: 00:08:09
Memory Utilized: 1.61 GB
Memory Efficiency: 1.75% of 91.80 GB
