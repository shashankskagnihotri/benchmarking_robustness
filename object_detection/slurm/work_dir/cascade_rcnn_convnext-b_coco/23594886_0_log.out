submitit INFO (2024-05-14 04:05:32,969) - Starting with JobEnvironment(job_id=23594886, hostname=uc2n483.localdomain, local_rank=0(1), node=0(1), global_rank=0(1))
submitit INFO (2024-05-14 04:05:32,970) - Loading pickle: /pfs/work7/workspace/scratch/ma_ruweber-team_project_fss2024/benchmarking_robustness/object_detection/slurm/work_dir/cascade_rcnn_convnext-b_coco/23594886_submitted.pkl
05/14 04:05:37 - mmengine - INFO - 
------------------------------------------------------------
System environment:
    sys.platform: linux
    Python: 3.10.13 (main, Sep 11 2023, 13:44:35) [GCC 11.2.0]
    CUDA available: True
    MUSA available: False
    numpy_random_seed: 452271375
    GPU 0: Tesla V100-SXM2-32GB
    CUDA_HOME: /opt/bwhpc/common/devel/cuda/11.8
    NVCC: Cuda compilation tools, release 11.8, V11.8.89
    GCC: gcc (GCC) 8.5.0 20210514 (Red Hat 8.5.0-10)
    PyTorch: 2.1.2
    PyTorch compiling details: PyTorch built with:
  - GCC 9.3
  - C++ Version: 201703
  - Intel(R) oneAPI Math Kernel Library Version 2023.1-Product Build 20230303 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v3.1.1 (Git Hash 64f6bcbcbab628e96f33a62c3e975f8535a7bde4)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - LAPACK is enabled (usually provided by MKL)
  - NNPACK is enabled
  - CPU capability usage: AVX512
  - CUDA Runtime 11.8
  - NVCC architecture flags: -gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_61,code=sm_61;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86;-gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_90,code=sm_90;-gencode;arch=compute_37,code=compute_37
  - CuDNN 8.7
  - Magma 2.6.1
  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.8, CUDNN_VERSION=8.7.0, CXX_COMPILER=/opt/rh/devtoolset-9/root/usr/bin/c++, CXX_FLAGS= -D_GLIBCXX_USE_CXX11_ABI=0 -fabi-version=11 -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -DNDEBUG -DUSE_KINETO -DLIBKINETO_NOROCTRACER -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -O2 -fPIC -Wall -Wextra -Werror=return-type -Werror=non-virtual-dtor -Werror=bool-operation -Wnarrowing -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-unused-parameter -Wno-unused-function -Wno-unused-result -Wno-strict-overflow -Wno-strict-aliasing -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=old-style-cast -Wno-invalid-partial-specialization -Wno-unused-private-field -Wno-aligned-allocation-unavailable -Wno-missing-braces -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Werror=cast-function-type -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_DISABLE_GPU_ASSERTS=ON, TORCH_VERSION=2.1.2, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, USE_ROCM=OFF, 

    TorchVision: 0.16.2
    OpenCV: 4.9.0
    MMEngine: 0.10.3

Runtime environment:
    cudnn_benchmark: False
    dist_cfg: {'backend': 'nccl'}
    mp_cfg: {'mp_start_method': 'fork', 'opencv_num_threads': 0}
    seed: 452271375
    Distributed launcher: none
    Distributed training: False
    GPU number: 1
------------------------------------------------------------

05/14 04:05:37 - mmengine - INFO - Config:
auto_scale_lr = dict(base_batch_size=16, enable=False)
backend_args = None
data_root = 'data/coco/'
dataset_type = 'CocoDataset'
default_hooks = dict(
    checkpoint=dict(interval=1, type='CheckpointHook'),
    logger=dict(interval=50, type='LoggerHook'),
    param_scheduler=dict(type='ParamSchedulerHook'),
    sampler_seed=dict(type='DistSamplerSeedHook'),
    timer=dict(type='IterTimerHook'),
    visualization=dict(type='DetVisualizationHook'))
default_scope = 'mmdet'
env_cfg = dict(
    cudnn_benchmark=False,
    dist_cfg=dict(backend='nccl'),
    mp_cfg=dict(mp_start_method='fork', opencv_num_threads=0))
launcher = 'none'
load_from = None
log_level = 'INFO'
log_processor = dict(by_epoch=True, type='LogProcessor', window_size=50)
model = dict(
    backbone=dict(
        arch='base',
        drop_path_rate=0.7,
        gap_before_final_norm=False,
        init_cfg=dict(
            checkpoint=
            'https://download.openmmlab.com/mmclassification/v0/convnext/convnext-base_in21k-pre-3rdparty_in1k-384px_20221219-4570f792.pth',
            prefix='backbone.',
            type='Pretrained'),
        layer_scale_init_value=1.0,
        out_indices=[
            1,
            2,
            3,
        ],
        type='mmpretrain.ConvNeXt',
        with_cp=True),
    data_preprocessor=dict(
        bgr_to_rgb=True,
        mean=[
            123.675,
            116.28,
            103.53,
        ],
        pad_size_divisor=32,
        std=[
            58.395,
            57.12,
            57.375,
        ],
        type='DetDataPreprocessor'),
    neck=dict(
        in_channels=[
            256,
            512,
            1024,
        ],
        num_outs=5,
        out_channels=256,
        type='FPN'),
    roi_head=dict(
        bbox_head=[
            dict(
                bbox_coder=dict(
                    target_means=[
                        0.0,
                        0.0,
                        0.0,
                        0.0,
                    ],
                    target_stds=[
                        0.1,
                        0.1,
                        0.2,
                        0.2,
                    ],
                    type='DeltaXYWHBBoxCoder'),
                fc_out_channels=1024,
                in_channels=256,
                loss_bbox=dict(beta=1.0, loss_weight=1.0, type='SmoothL1Loss'),
                loss_cls=dict(
                    loss_weight=1.0,
                    type='CrossEntropyLoss',
                    use_sigmoid=False),
                num_classes=80,
                reg_class_agnostic=True,
                roi_feat_size=7,
                type='Shared2FCBBoxHead'),
            dict(
                bbox_coder=dict(
                    target_means=[
                        0.0,
                        0.0,
                        0.0,
                        0.0,
                    ],
                    target_stds=[
                        0.05,
                        0.05,
                        0.1,
                        0.1,
                    ],
                    type='DeltaXYWHBBoxCoder'),
                fc_out_channels=1024,
                in_channels=256,
                loss_bbox=dict(beta=1.0, loss_weight=1.0, type='SmoothL1Loss'),
                loss_cls=dict(
                    loss_weight=1.0,
                    type='CrossEntropyLoss',
                    use_sigmoid=False),
                num_classes=80,
                reg_class_agnostic=True,
                roi_feat_size=7,
                type='Shared2FCBBoxHead'),
            dict(
                bbox_coder=dict(
                    target_means=[
                        0.0,
                        0.0,
                        0.0,
                        0.0,
                    ],
                    target_stds=[
                        0.033,
                        0.033,
                        0.067,
                        0.067,
                    ],
                    type='DeltaXYWHBBoxCoder'),
                fc_out_channels=1024,
                in_channels=256,
                loss_bbox=dict(beta=1.0, loss_weight=1.0, type='SmoothL1Loss'),
                loss_cls=dict(
                    loss_weight=1.0,
                    type='CrossEntropyLoss',
                    use_sigmoid=False),
                num_classes=80,
                reg_class_agnostic=True,
                roi_feat_size=7,
                type='Shared2FCBBoxHead'),
        ],
        bbox_roi_extractor=dict(
            featmap_strides=[
                4,
                8,
                16,
                32,
            ],
            out_channels=256,
            roi_layer=dict(output_size=7, sampling_ratio=0, type='RoIAlign'),
            type='SingleRoIExtractor'),
        num_stages=3,
        stage_loss_weights=[
            1,
            0.5,
            0.25,
        ],
        type='CascadeRoIHead'),
    rpn_head=dict(
        anchor_generator=dict(
            ratios=[
                0.5,
                1.0,
                2.0,
            ],
            scales=[
                8,
            ],
            strides=[
                4,
                8,
                16,
                32,
                64,
            ],
            type='AnchorGenerator'),
        bbox_coder=dict(
            target_means=[
                0.0,
                0.0,
                0.0,
                0.0,
            ],
            target_stds=[
                1.0,
                1.0,
                1.0,
                1.0,
            ],
            type='DeltaXYWHBBoxCoder'),
        feat_channels=256,
        in_channels=256,
        loss_bbox=dict(
            beta=0.1111111111111111, loss_weight=1.0, type='SmoothL1Loss'),
        loss_cls=dict(
            loss_weight=1.0, type='CrossEntropyLoss', use_sigmoid=True),
        type='RPNHead'),
    test_cfg=dict(
        rcnn=dict(
            max_per_img=100,
            nms=dict(iou_threshold=0.5, type='nms'),
            score_thr=0.05),
        rpn=dict(
            max_per_img=1000,
            min_bbox_size=0,
            nms=dict(iou_threshold=0.7, type='nms'),
            nms_pre=1000)),
    train_cfg=dict(
        rcnn=[
            dict(
                assigner=dict(
                    ignore_iof_thr=-1,
                    match_low_quality=False,
                    min_pos_iou=0.5,
                    neg_iou_thr=0.5,
                    pos_iou_thr=0.5,
                    type='MaxIoUAssigner'),
                debug=False,
                pos_weight=-1,
                sampler=dict(
                    add_gt_as_proposals=True,
                    neg_pos_ub=-1,
                    num=512,
                    pos_fraction=0.25,
                    type='RandomSampler')),
            dict(
                assigner=dict(
                    ignore_iof_thr=-1,
                    match_low_quality=False,
                    min_pos_iou=0.6,
                    neg_iou_thr=0.6,
                    pos_iou_thr=0.6,
                    type='MaxIoUAssigner'),
                debug=False,
                pos_weight=-1,
                sampler=dict(
                    add_gt_as_proposals=True,
                    neg_pos_ub=-1,
                    num=512,
                    pos_fraction=0.25,
                    type='RandomSampler')),
            dict(
                assigner=dict(
                    ignore_iof_thr=-1,
                    match_low_quality=False,
                    min_pos_iou=0.7,
                    neg_iou_thr=0.7,
                    pos_iou_thr=0.7,
                    type='MaxIoUAssigner'),
                debug=False,
                pos_weight=-1,
                sampler=dict(
                    add_gt_as_proposals=True,
                    neg_pos_ub=-1,
                    num=512,
                    pos_fraction=0.25,
                    type='RandomSampler')),
        ],
        rpn=dict(
            allowed_border=0,
            assigner=dict(
                ignore_iof_thr=-1,
                match_low_quality=True,
                min_pos_iou=0.3,
                neg_iou_thr=0.3,
                pos_iou_thr=0.7,
                type='MaxIoUAssigner'),
            debug=False,
            pos_weight=-1,
            sampler=dict(
                add_gt_as_proposals=False,
                neg_pos_ub=-1,
                num=256,
                pos_fraction=0.5,
                type='RandomSampler')),
        rpn_proposal=dict(
            max_per_img=2000,
            min_bbox_size=0,
            nms=dict(iou_threshold=0.7, type='nms'),
            nms_pre=2000)),
    type='CascadeRCNN')
optim_wrapper = dict(
    optimizer=dict(lr=0.02, momentum=0.9, type='SGD', weight_decay=0.0001),
    type='OptimWrapper')
param_scheduler = [
    dict(
        begin=0, by_epoch=False, end=500, start_factor=0.001, type='LinearLR'),
    dict(
        begin=0,
        by_epoch=True,
        end=20,
        gamma=0.1,
        milestones=[
            16,
            19,
        ],
        type='MultiStepLR'),
]
resume = False
test_cfg = dict(type='TestLoop')
test_dataloader = dict(
    batch_size=1,
    dataset=dict(
        ann_file='annotations/instances_val2017.json',
        backend_args=None,
        data_prefix=dict(img='val2017/'),
        data_root='data/coco/',
        pipeline=[
            dict(backend_args=None, type='LoadImageFromFile'),
            dict(keep_ratio=True, scale=(
                1333,
                800,
            ), type='Resize'),
            dict(type='LoadAnnotations', with_bbox=True),
            dict(
                meta_keys=(
                    'img_id',
                    'img_path',
                    'ori_shape',
                    'img_shape',
                    'scale_factor',
                ),
                type='PackDetInputs'),
        ],
        test_mode=True,
        type='CocoDataset'),
    drop_last=False,
    num_workers=2,
    persistent_workers=True,
    sampler=dict(shuffle=False, type='DefaultSampler'))
test_evaluator = dict(
    ann_file='data/coco/annotations/instances_val2017.json',
    backend_args=None,
    format_only=False,
    metric='bbox',
    type='CocoMetric')
test_pipeline = [
    dict(backend_args=None, type='LoadImageFromFile'),
    dict(keep_ratio=True, scale=(
        1333,
        800,
    ), type='Resize'),
    dict(type='LoadAnnotations', with_bbox=True),
    dict(
        meta_keys=(
            'img_id',
            'img_path',
            'ori_shape',
            'img_shape',
            'scale_factor',
        ),
        type='PackDetInputs'),
]
train_cfg = dict(max_epochs=20, type='EpochBasedTrainLoop', val_interval=1)
train_dataloader = dict(
    batch_sampler=dict(type='AspectRatioBatchSampler'),
    batch_size=2,
    dataset=dict(
        ann_file='annotations/instances_train2017.json',
        backend_args=None,
        data_prefix=dict(img='train2017/'),
        data_root='data/coco/',
        filter_cfg=dict(filter_empty_gt=True, min_size=32),
        pipeline=[
            dict(backend_args=None, type='LoadImageFromFile'),
            dict(type='LoadAnnotations', with_bbox=True),
            dict(keep_ratio=True, scale=(
                1333,
                800,
            ), type='Resize'),
            dict(prob=0.5, type='RandomFlip'),
            dict(type='PackDetInputs'),
        ],
        type='CocoDataset'),
    num_workers=2,
    persistent_workers=True,
    sampler=dict(shuffle=True, type='DefaultSampler'))
train_pipeline = [
    dict(backend_args=None, type='LoadImageFromFile'),
    dict(type='LoadAnnotations', with_bbox=True),
    dict(keep_ratio=True, scale=(
        1333,
        800,
    ), type='Resize'),
    dict(prob=0.5, type='RandomFlip'),
    dict(type='PackDetInputs'),
]
val_cfg = dict(type='ValLoop')
val_dataloader = dict(
    batch_size=1,
    dataset=dict(
        ann_file='annotations/instances_val2017.json',
        backend_args=None,
        data_prefix=dict(img='val2017/'),
        data_root='data/coco/',
        pipeline=[
            dict(backend_args=None, type='LoadImageFromFile'),
            dict(keep_ratio=True, scale=(
                1333,
                800,
            ), type='Resize'),
            dict(type='LoadAnnotations', with_bbox=True),
            dict(
                meta_keys=(
                    'img_id',
                    'img_path',
                    'ori_shape',
                    'img_shape',
                    'scale_factor',
                ),
                type='PackDetInputs'),
        ],
        test_mode=True,
        type='CocoDataset'),
    drop_last=False,
    num_workers=2,
    persistent_workers=True,
    sampler=dict(shuffle=False, type='DefaultSampler'))
val_evaluator = dict(
    ann_file='data/coco/annotations/instances_val2017.json',
    backend_args=None,
    format_only=False,
    metric='bbox',
    type='CocoMetric')
vis_backends = [
    dict(type='LocalVisBackend'),
]
visualizer = dict(
    name='visualizer',
    type='DetLocalVisualizer',
    vis_backends=[
        dict(type='LocalVisBackend'),
    ])
work_dir = 'slurm/results/cascade_rcnn_convnext-b_coco'

05/14 04:05:39 - mmengine - INFO - Distributed training is not used, all SyncBatchNorm (SyncBN) layers in the model will be automatically reverted to BatchNormXd layers if they are used.
05/14 04:05:39 - mmengine - INFO - Hooks will be executed in the following order:
before_run:
(VERY_HIGH   ) RuntimeInfoHook                    
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
before_train:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_train_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(NORMAL      ) DistSamplerSeedHook                
 -------------------- 
before_train_iter:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_train_iter:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
after_train_epoch:
(NORMAL      ) IterTimerHook                      
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_val:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
before_val_epoch:
(NORMAL      ) IterTimerHook                      
 -------------------- 
before_val_iter:
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_val_iter:
(NORMAL      ) IterTimerHook                      
(NORMAL      ) DetVisualizationHook               
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_val_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
after_val:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
after_train:
(VERY_HIGH   ) RuntimeInfoHook                    
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_test:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
before_test_epoch:
(NORMAL      ) IterTimerHook                      
 -------------------- 
before_test_iter:
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_test_iter:
(NORMAL      ) IterTimerHook                      
(NORMAL      ) DetVisualizationHook               
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_test_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_test:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
after_run:
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
loading annotations into memory...
Done (t=14.68s)
creating index...
index created!
loading annotations into memory...
Done (t=0.60s)
creating index...
index created!
loading annotations into memory...
Done (t=0.57s)
creating index...
index created!
05/14 04:06:12 - mmengine - INFO - load backbone. in model from: https://download.openmmlab.com/mmclassification/v0/convnext/convnext-base_in21k-pre-3rdparty_in1k-384px_20221219-4570f792.pth
Loads checkpoint by http backend from path: https://download.openmmlab.com/mmclassification/v0/convnext/convnext-base_in21k-pre-3rdparty_in1k-384px_20221219-4570f792.pth
05/14 04:06:12 - mmengine - WARNING - The model and loaded state dict do not match exactly

missing keys in source state_dict: norm1.weight, norm1.bias, norm2.weight, norm2.bias

05/14 04:06:12 - mmengine - WARNING - "FileClient" will be deprecated in future. Please use io functions in https://mmengine.readthedocs.io/en/latest/api/fileio.html#file-io
05/14 04:06:12 - mmengine - WARNING - "HardDiskBackend" is the alias of "LocalBackend" and the former will be deprecated in future.
05/14 04:06:12 - mmengine - INFO - Checkpoints will be saved to /pfs/work7/workspace/scratch/ma_ruweber-team_project_fss2024/benchmarking_robustness/object_detection/slurm/results/cascade_rcnn_convnext-b_coco.
05/14 04:06:46 - mmengine - INFO - Epoch(train)  [1][   50/58633]  lr: 1.9820e-03  eta: 9 days, 1:18:26  time: 0.6672  data_time: 0.0138  memory: 3026  loss: 2.0906  loss_rpn_cls: 0.3358  loss_rpn_bbox: 0.0315  s0.loss_cls: 0.9116  s0.acc: 96.4844  s0.loss_bbox: 0.0465  s1.loss_cls: 0.4783  s1.acc: 98.0469  s1.loss_bbox: 0.0129  s2.loss_cls: 0.2721  s2.acc: 98.6328  s2.loss_bbox: 0.0019
05/14 04:07:19 - mmengine - INFO - Epoch(train)  [1][  100/58633]  lr: 3.9840e-03  eta: 9 days, 0:29:37  time: 0.6622  data_time: 0.0048  memory: 3026  loss: 0.5255  loss_rpn_cls: 0.1238  loss_rpn_bbox: 0.0301  s0.loss_cls: 0.2119  s0.acc: 96.8750  s0.loss_bbox: 0.0390  s1.loss_cls: 0.0743  s1.acc: 97.5586  s1.loss_bbox: 0.0119  s2.loss_cls: 0.0330  s2.acc: 98.3398  s2.loss_bbox: 0.0016
05/14 04:07:51 - mmengine - INFO - Epoch(train)  [1][  150/58633]  lr: 5.9860e-03  eta: 8 days, 23:25:07  time: 0.6549  data_time: 0.0039  memory: 3026  loss: 0.5755  loss_rpn_cls: 0.1279  loss_rpn_bbox: 0.0398  s0.loss_cls: 0.2393  s0.acc: 92.5781  s0.loss_bbox: 0.0491  s1.loss_cls: 0.0744  s1.acc: 95.4102  s1.loss_bbox: 0.0143  s2.loss_cls: 0.0288  s2.acc: 97.4609  s2.loss_bbox: 0.0019
05/14 04:08:24 - mmengine - INFO - Epoch(train)  [1][  200/58633]  lr: 7.9880e-03  eta: 8 days, 23:10:05  time: 0.6584  data_time: 0.0049  memory: 3026  loss: 0.5460  loss_rpn_cls: 0.1288  loss_rpn_bbox: 0.0320  s0.loss_cls: 0.2272  s0.acc: 97.7539  s0.loss_bbox: 0.0438  s1.loss_cls: 0.0723  s1.acc: 97.9492  s1.loss_bbox: 0.0113  s2.loss_cls: 0.0290  s2.acc: 98.0469  s2.loss_bbox: 0.0015
05/14 04:08:57 - mmengine - INFO - Epoch(train)  [1][  250/58633]  lr: 9.9900e-03  eta: 8 days, 23:04:48  time: 0.6595  data_time: 0.0040  memory: 3026  loss: 0.5079  loss_rpn_cls: 0.1012  loss_rpn_bbox: 0.0207  s0.loss_cls: 0.2340  s0.acc: 99.4141  s0.loss_bbox: 0.0471  s1.loss_cls: 0.0651  s1.acc: 99.4141  s1.loss_bbox: 0.0132  s2.loss_cls: 0.0246  s2.acc: 99.4141  s2.loss_bbox: 0.0019
05/14 04:09:30 - mmengine - INFO - Epoch(train)  [1][  300/58633]  lr: 1.1992e-02  eta: 8 days, 22:56:41  time: 0.6581  data_time: 0.0039  memory: 3026  loss: 0.5326  loss_rpn_cls: 0.1094  loss_rpn_bbox: 0.0246  s0.loss_cls: 0.2396  s0.acc: 97.1680  s0.loss_bbox: 0.0481  s1.loss_cls: 0.0692  s1.acc: 97.9492  s1.loss_bbox: 0.0148  s2.loss_cls: 0.0250  s2.acc: 98.2422  s2.loss_bbox: 0.0019
05/14 04:10:03 - mmengine - INFO - Epoch(train)  [1][  350/58633]  lr: 1.3994e-02  eta: 8 days, 22:40:25  time: 0.6544  data_time: 0.0038  memory: 3026  loss: 0.7555  loss_rpn_cls: 0.1401  loss_rpn_bbox: 0.0442  s0.loss_cls: 0.3507  s0.acc: 92.9688  s0.loss_bbox: 0.0619  s1.loss_cls: 0.1007  s1.acc: 95.9961  s1.loss_bbox: 0.0158  s2.loss_cls: 0.0396  s2.acc: 97.3633  s2.loss_bbox: 0.0025
05/14 04:10:36 - mmengine - INFO - Epoch(train)  [1][  400/58633]  lr: 1.5996e-02  eta: 8 days, 22:32:23  time: 0.6562  data_time: 0.0057  memory: 3026  loss: 0.7467  loss_rpn_cls: 0.1100  loss_rpn_bbox: 0.0342  s0.loss_cls: 0.3726  s0.acc: 98.0469  s0.loss_bbox: 0.0629  s1.loss_cls: 0.1056  s1.acc: 98.6328  s1.loss_bbox: 0.0191  s2.loss_cls: 0.0390  s2.acc: 99.3164  s2.loss_bbox: 0.0033
05/14 04:11:09 - mmengine - INFO - Epoch(train)  [1][  450/58633]  lr: 1.7998e-02  eta: 8 days, 22:28:54  time: 0.6575  data_time: 0.0041  memory: 3026  loss: 0.6577  loss_rpn_cls: 0.1038  loss_rpn_bbox: 0.0323  s0.loss_cls: 0.3059  s0.acc: 98.7305  s0.loss_bbox: 0.0535  s1.loss_cls: 0.1012  s1.acc: 99.0234  s1.loss_bbox: 0.0179  s2.loss_cls: 0.0404  s2.acc: 99.2188  s2.loss_bbox: 0.0027
05/14 04:11:41 - mmengine - INFO - Epoch(train)  [1][  500/58633]  lr: 2.0000e-02  eta: 8 days, 22:20:53  time: 0.6549  data_time: 0.0039  memory: 3027  loss: 0.6647  loss_rpn_cls: 0.1295  loss_rpn_bbox: 0.0479  s0.loss_cls: 0.2911  s0.acc: 98.0469  s0.loss_bbox: 0.0513  s1.loss_cls: 0.0930  s1.acc: 99.1211  s1.loss_bbox: 0.0133  s2.loss_cls: 0.0370  s2.acc: 99.3164  s2.loss_bbox: 0.0016
05/14 04:12:14 - mmengine - INFO - Epoch(train)  [1][  550/58633]  lr: 2.0000e-02  eta: 8 days, 22:03:26  time: 0.6488  data_time: 0.0047  memory: 3027  loss: 0.7052  loss_rpn_cls: 0.1600  loss_rpn_bbox: 0.0659  s0.loss_cls: 0.2950  s0.acc: 98.2422  s0.loss_bbox: 0.0489  s1.loss_cls: 0.0854  s1.acc: 98.4375  s1.loss_bbox: 0.0114  s2.loss_cls: 0.0368  s2.acc: 98.7305  s2.loss_bbox: 0.0019
05/14 04:12:46 - mmengine - INFO - Epoch(train)  [1][  600/58633]  lr: 2.0000e-02  eta: 8 days, 21:50:48  time: 0.6500  data_time: 0.0038  memory: 3026  loss: 0.9306  loss_rpn_cls: 0.1343  loss_rpn_bbox: 0.0608  s0.loss_cls: 0.4215  s0.acc: 95.3125  s0.loss_bbox: 0.0560  s1.loss_cls: 0.1650  s1.acc: 96.2891  s1.loss_bbox: 0.0128  s2.loss_cls: 0.0783  s2.acc: 96.8750  s2.loss_bbox: 0.0018
submitit WARNING (2024-05-14 04:13:04,574) - Bypassing signal SIGCONT
submitit ERROR (2024-05-14 04:13:04,578) - Submitted job triggered an exception

============================= JOB FEEDBACK =============================

NodeName=uc2n483
Job ID: 23594886
Cluster: uc2
User/Group: ma_ruweber/ma_ma
State: FAILED (exit code 1)
Nodes: 1
Cores per node: 10
CPU Utilized: 00:07:53
CPU Efficiency: 9.71% of 01:21:10 core-walltime
Job Wall-clock time: 00:08:07
Memory Utilized: 4.68 GB
Memory Efficiency: 5.10% of 91.80 GB
