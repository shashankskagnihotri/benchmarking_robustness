submitit INFO (2024-05-14 03:18:52,943) - Starting with JobEnvironment(job_id=23594848, hostname=uc2n483.localdomain, local_rank=0(1), node=0(1), global_rank=0(1))
submitit INFO (2024-05-14 03:18:52,943) - Loading pickle: /pfs/work7/workspace/scratch/ma_ruweber-team_project_fss2024/benchmarking_robustness/object_detection/slurm/work_dir/DiffusionDet_convnext-b_coco/23594848_submitted.pkl
05/14 03:18:58 - mmengine - INFO - 
------------------------------------------------------------
System environment:
    sys.platform: linux
    Python: 3.10.13 (main, Sep 11 2023, 13:44:35) [GCC 11.2.0]
    CUDA available: True
    MUSA available: False
    numpy_random_seed: 1016430582
    GPU 0: Tesla V100-SXM2-32GB
    CUDA_HOME: /opt/bwhpc/common/devel/cuda/11.8
    NVCC: Cuda compilation tools, release 11.8, V11.8.89
    GCC: gcc (GCC) 8.5.0 20210514 (Red Hat 8.5.0-10)
    PyTorch: 2.1.2
    PyTorch compiling details: PyTorch built with:
  - GCC 9.3
  - C++ Version: 201703
  - Intel(R) oneAPI Math Kernel Library Version 2023.1-Product Build 20230303 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v3.1.1 (Git Hash 64f6bcbcbab628e96f33a62c3e975f8535a7bde4)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - LAPACK is enabled (usually provided by MKL)
  - NNPACK is enabled
  - CPU capability usage: AVX512
  - CUDA Runtime 11.8
  - NVCC architecture flags: -gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_61,code=sm_61;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86;-gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_90,code=sm_90;-gencode;arch=compute_37,code=compute_37
  - CuDNN 8.7
  - Magma 2.6.1
  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.8, CUDNN_VERSION=8.7.0, CXX_COMPILER=/opt/rh/devtoolset-9/root/usr/bin/c++, CXX_FLAGS= -D_GLIBCXX_USE_CXX11_ABI=0 -fabi-version=11 -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -DNDEBUG -DUSE_KINETO -DLIBKINETO_NOROCTRACER -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -O2 -fPIC -Wall -Wextra -Werror=return-type -Werror=non-virtual-dtor -Werror=bool-operation -Wnarrowing -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-unused-parameter -Wno-unused-function -Wno-unused-result -Wno-strict-overflow -Wno-strict-aliasing -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=old-style-cast -Wno-invalid-partial-specialization -Wno-unused-private-field -Wno-aligned-allocation-unavailable -Wno-missing-braces -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Werror=cast-function-type -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_DISABLE_GPU_ASSERTS=ON, TORCH_VERSION=2.1.2, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, USE_ROCM=OFF, 

    TorchVision: 0.16.2
    OpenCV: 4.9.0
    MMEngine: 0.10.3

Runtime environment:
    cudnn_benchmark: False
    dist_cfg: {'backend': 'nccl'}
    mp_cfg: {'mp_start_method': 'fork', 'opencv_num_threads': 0}
    seed: 1016430582
    Distributed launcher: none
    Distributed training: False
    GPU number: 1
------------------------------------------------------------

05/14 03:18:59 - mmengine - INFO - Config:
auto_scale_lr = dict(base_batch_size=16, enable=False)
backend = 'pillow'
backend_args = None
custom_imports = dict(
    allow_failed_imports=False,
    imports=[
        'projects.DiffusionDet.diffusiondet',
    ])
data_root = 'data/coco/'
dataset_type = 'CocoDataset'
default_hooks = dict(
    checkpoint=dict(
        _scope_='mmdet',
        by_epoch=False,
        interval=75000,
        max_keep_ckpts=3,
        type='CheckpointHook'),
    logger=dict(_scope_='mmdet', interval=50, type='LoggerHook'),
    param_scheduler=dict(_scope_='mmdet', type='ParamSchedulerHook'),
    sampler_seed=dict(_scope_='mmdet', type='DistSamplerSeedHook'),
    timer=dict(_scope_='mmdet', type='IterTimerHook'),
    visualization=dict(_scope_='mmdet', type='DetVisualizationHook'))
default_scope = 'mmdet'
env_cfg = dict(
    cudnn_benchmark=False,
    dist_cfg=dict(backend='nccl'),
    mp_cfg=dict(mp_start_method='fork', opencv_num_threads=0))
launcher = 'none'
load_from = None
log_level = 'INFO'
log_processor = dict(
    _scope_='mmdet', by_epoch=False, type='LogProcessor', window_size=50)
model = dict(
    backbone=dict(
        arch='base',
        drop_path_rate=0.7,
        gap_before_final_norm=False,
        init_cfg=dict(
            checkpoint=
            'https://download.openmmlab.com/mmclassification/v0/convnext/convnext-base_in21k-pre-3rdparty_in1k-384px_20221219-4570f792.pth',
            prefix='backbone.',
            type='Pretrained'),
        layer_scale_init_value=1.0,
        out_indices=[
            1,
            2,
            3,
        ],
        type='mmpretrain.ConvNeXt',
        with_cp=True),
    bbox_head=dict(
        criterion=dict(
            assigner=dict(
                candidate_topk=5,
                center_radius=2.5,
                match_costs=[
                    dict(
                        alpha=0.25,
                        eps=1e-08,
                        gamma=2.0,
                        type='FocalLossCost',
                        weight=2.0),
                    dict(box_format='xyxy', type='BBoxL1Cost', weight=5.0),
                    dict(iou_mode='giou', type='IoUCost', weight=2.0),
                ],
                type='DiffusionDetMatcher'),
            loss_bbox=dict(loss_weight=5.0, reduction='sum', type='L1Loss'),
            loss_cls=dict(
                alpha=0.25,
                gamma=2.0,
                loss_weight=2.0,
                reduction='sum',
                type='FocalLoss',
                use_sigmoid=True),
            loss_giou=dict(loss_weight=2.0, reduction='sum', type='GIoULoss'),
            num_classes=80,
            type='DiffusionDetCriterion'),
        ddim_sampling_eta=1.0,
        deep_supervision=True,
        feat_channels=256,
        num_classes=80,
        num_heads=6,
        num_proposals=500,
        prior_prob=0.01,
        roi_extractor=dict(
            featmap_strides=[
                4,
                8,
                16,
                32,
            ],
            out_channels=256,
            roi_layer=dict(output_size=7, sampling_ratio=2, type='RoIAlign'),
            type='SingleRoIExtractor'),
        sampling_timesteps=1,
        single_head=dict(
            act_cfg=dict(inplace=True, type='ReLU'),
            dim_feedforward=2048,
            dropout=0.0,
            dynamic_conv=dict(dynamic_dim=64, dynamic_num=2),
            num_cls_convs=1,
            num_heads=8,
            num_reg_convs=3,
            type='SingleDiffusionDetHead'),
        snr_scale=2.0,
        type='DynamicDiffusionDetHead'),
    data_preprocessor=dict(
        bgr_to_rgb=True,
        mean=[
            123.675,
            116.28,
            103.53,
        ],
        pad_size_divisor=32,
        std=[
            58.395,
            57.12,
            57.375,
        ],
        type='DetDataPreprocessor'),
    neck=dict(
        in_channels=[
            256,
            512,
            1024,
        ],
        num_outs=4,
        out_channels=256,
        type='FPN'),
    test_cfg=dict(
        min_bbox_size=0,
        nms=dict(iou_threshold=0.5, type='nms'),
        score_thr=0.5,
        use_nms=True),
    type='DiffusionDet')
optim_wrapper = dict(
    _scope_='mmdet',
    clip_grad=dict(max_norm=1.0, norm_type=2),
    optimizer=dict(lr=2.5e-05, type='AdamW', weight_decay=0.0001),
    type='OptimWrapper')
param_scheduler = [
    dict(
        begin=0, by_epoch=False, end=1000, start_factor=0.01, type='LinearLR'),
    dict(
        begin=0,
        by_epoch=False,
        end=450000,
        gamma=0.1,
        milestones=[
            350000,
            420000,
        ],
        type='MultiStepLR'),
]
resume = False
test_cfg = dict(_scope_='mmdet', type='TestLoop')
test_dataloader = dict(
    batch_size=1,
    dataset=dict(
        _scope_='mmdet',
        ann_file='annotations/instances_val2017.json',
        backend_args=None,
        data_prefix=dict(img='val2017/'),
        data_root='data/coco/',
        pipeline=[
            dict(
                backend_args=None,
                imdecode_backend='pillow',
                type='LoadImageFromFile'),
            dict(
                backend='pillow',
                keep_ratio=True,
                scale=(
                    1333,
                    800,
                ),
                type='Resize'),
            dict(type='LoadAnnotations', with_bbox=True),
            dict(
                meta_keys=(
                    'img_id',
                    'img_path',
                    'ori_shape',
                    'img_shape',
                    'scale_factor',
                ),
                type='PackDetInputs'),
        ],
        test_mode=True,
        type='CocoDataset'),
    drop_last=False,
    num_workers=2,
    persistent_workers=True,
    sampler=dict(_scope_='mmdet', shuffle=False, type='DefaultSampler'))
test_evaluator = dict(
    _scope_='mmdet',
    ann_file='data/coco/annotations/instances_val2017.json',
    backend_args=None,
    format_only=False,
    metric='bbox',
    type='CocoMetric')
test_pipeline = [
    dict(
        backend_args=None, imdecode_backend='pillow',
        type='LoadImageFromFile'),
    dict(
        backend='pillow', keep_ratio=True, scale=(
            1333,
            800,
        ), type='Resize'),
    dict(type='LoadAnnotations', with_bbox=True),
    dict(
        meta_keys=(
            'img_id',
            'img_path',
            'ori_shape',
            'img_shape',
            'scale_factor',
        ),
        type='PackDetInputs'),
]
train_cfg = dict(
    max_iters=450000, type='IterBasedTrainLoop', val_interval=75000)
train_dataloader = dict(
    batch_sampler=dict(_scope_='mmdet', type='AspectRatioBatchSampler'),
    batch_size=2,
    dataset=dict(
        _scope_='mmdet',
        ann_file='annotations/instances_train2017.json',
        backend_args=None,
        data_prefix=dict(img='train2017/'),
        data_root='data/coco/',
        filter_cfg=dict(filter_empty_gt=False, min_size=1e-05),
        pipeline=[
            dict(
                backend_args=None,
                imdecode_backend='pillow',
                type='LoadImageFromFile'),
            dict(type='LoadAnnotations', with_bbox=True),
            dict(prob=0.5, type='RandomFlip'),
            dict(
                transforms=[
                    [
                        dict(
                            backend='pillow',
                            keep_ratio=True,
                            scales=[
                                (
                                    480,
                                    1333,
                                ),
                                (
                                    512,
                                    1333,
                                ),
                                (
                                    544,
                                    1333,
                                ),
                                (
                                    576,
                                    1333,
                                ),
                                (
                                    608,
                                    1333,
                                ),
                                (
                                    640,
                                    1333,
                                ),
                                (
                                    672,
                                    1333,
                                ),
                                (
                                    704,
                                    1333,
                                ),
                                (
                                    736,
                                    1333,
                                ),
                                (
                                    768,
                                    1333,
                                ),
                                (
                                    800,
                                    1333,
                                ),
                            ],
                            type='RandomChoiceResize'),
                    ],
                    [
                        dict(
                            backend='pillow',
                            keep_ratio=True,
                            scales=[
                                (
                                    400,
                                    1333,
                                ),
                                (
                                    500,
                                    1333,
                                ),
                                (
                                    600,
                                    1333,
                                ),
                            ],
                            type='RandomChoiceResize'),
                        dict(
                            allow_negative_crop=True,
                            crop_size=(
                                384,
                                600,
                            ),
                            crop_type='absolute_range',
                            type='RandomCrop'),
                        dict(
                            backend='pillow',
                            keep_ratio=True,
                            scales=[
                                (
                                    480,
                                    1333,
                                ),
                                (
                                    512,
                                    1333,
                                ),
                                (
                                    544,
                                    1333,
                                ),
                                (
                                    576,
                                    1333,
                                ),
                                (
                                    608,
                                    1333,
                                ),
                                (
                                    640,
                                    1333,
                                ),
                                (
                                    672,
                                    1333,
                                ),
                                (
                                    704,
                                    1333,
                                ),
                                (
                                    736,
                                    1333,
                                ),
                                (
                                    768,
                                    1333,
                                ),
                                (
                                    800,
                                    1333,
                                ),
                            ],
                            type='RandomChoiceResize'),
                    ],
                ],
                type='RandomChoice'),
            dict(type='PackDetInputs'),
        ],
        type='CocoDataset'),
    num_workers=2,
    persistent_workers=True,
    sampler=dict(_scope_='mmdet', shuffle=True, type='InfiniteSampler'))
train_pipeline = [
    dict(
        backend_args=None, imdecode_backend='pillow',
        type='LoadImageFromFile'),
    dict(type='LoadAnnotations', with_bbox=True),
    dict(prob=0.5, type='RandomFlip'),
    dict(
        transforms=[
            [
                dict(
                    backend='pillow',
                    keep_ratio=True,
                    scales=[
                        (
                            480,
                            1333,
                        ),
                        (
                            512,
                            1333,
                        ),
                        (
                            544,
                            1333,
                        ),
                        (
                            576,
                            1333,
                        ),
                        (
                            608,
                            1333,
                        ),
                        (
                            640,
                            1333,
                        ),
                        (
                            672,
                            1333,
                        ),
                        (
                            704,
                            1333,
                        ),
                        (
                            736,
                            1333,
                        ),
                        (
                            768,
                            1333,
                        ),
                        (
                            800,
                            1333,
                        ),
                    ],
                    type='RandomChoiceResize'),
            ],
            [
                dict(
                    backend='pillow',
                    keep_ratio=True,
                    scales=[
                        (
                            400,
                            1333,
                        ),
                        (
                            500,
                            1333,
                        ),
                        (
                            600,
                            1333,
                        ),
                    ],
                    type='RandomChoiceResize'),
                dict(
                    allow_negative_crop=True,
                    crop_size=(
                        384,
                        600,
                    ),
                    crop_type='absolute_range',
                    type='RandomCrop'),
                dict(
                    backend='pillow',
                    keep_ratio=True,
                    scales=[
                        (
                            480,
                            1333,
                        ),
                        (
                            512,
                            1333,
                        ),
                        (
                            544,
                            1333,
                        ),
                        (
                            576,
                            1333,
                        ),
                        (
                            608,
                            1333,
                        ),
                        (
                            640,
                            1333,
                        ),
                        (
                            672,
                            1333,
                        ),
                        (
                            704,
                            1333,
                        ),
                        (
                            736,
                            1333,
                        ),
                        (
                            768,
                            1333,
                        ),
                        (
                            800,
                            1333,
                        ),
                    ],
                    type='RandomChoiceResize'),
            ],
        ],
        type='RandomChoice'),
    dict(type='PackDetInputs'),
]
val_cfg = dict(_scope_='mmdet', type='ValLoop')
val_dataloader = dict(
    batch_size=1,
    dataset=dict(
        _scope_='mmdet',
        ann_file='annotations/instances_val2017.json',
        backend_args=None,
        data_prefix=dict(img='val2017/'),
        data_root='data/coco/',
        pipeline=[
            dict(
                backend_args=None,
                imdecode_backend='pillow',
                type='LoadImageFromFile'),
            dict(
                backend='pillow',
                keep_ratio=True,
                scale=(
                    1333,
                    800,
                ),
                type='Resize'),
            dict(type='LoadAnnotations', with_bbox=True),
            dict(
                meta_keys=(
                    'img_id',
                    'img_path',
                    'ori_shape',
                    'img_shape',
                    'scale_factor',
                ),
                type='PackDetInputs'),
        ],
        test_mode=True,
        type='CocoDataset'),
    drop_last=False,
    num_workers=2,
    persistent_workers=True,
    sampler=dict(_scope_='mmdet', shuffle=False, type='DefaultSampler'))
val_evaluator = dict(
    _scope_='mmdet',
    ann_file='data/coco/annotations/instances_val2017.json',
    backend_args=None,
    format_only=False,
    metric='bbox',
    type='CocoMetric')
vis_backends = [
    dict(_scope_='mmdet', type='LocalVisBackend'),
]
visualizer = dict(
    _scope_='mmdet',
    name='visualizer',
    type='DetLocalVisualizer',
    vis_backends=[
        dict(type='LocalVisBackend'),
    ])
work_dir = 'slurm/results/DiffusionDet_convnext-b_coco'

05/14 03:19:02 - mmengine - INFO - Distributed training is not used, all SyncBatchNorm (SyncBN) layers in the model will be automatically reverted to BatchNormXd layers if they are used.
05/14 03:19:02 - mmengine - INFO - Hooks will be executed in the following order:
before_run:
(VERY_HIGH   ) RuntimeInfoHook                    
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
before_train:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_train_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(NORMAL      ) DistSamplerSeedHook                
 -------------------- 
before_train_iter:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_train_iter:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
after_train_epoch:
(NORMAL      ) IterTimerHook                      
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_val:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
before_val_epoch:
(NORMAL      ) IterTimerHook                      
 -------------------- 
before_val_iter:
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_val_iter:
(NORMAL      ) IterTimerHook                      
(NORMAL      ) DetVisualizationHook               
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_val_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
after_val:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
after_train:
(VERY_HIGH   ) RuntimeInfoHook                    
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_test:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
before_test_epoch:
(NORMAL      ) IterTimerHook                      
 -------------------- 
before_test_iter:
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_test_iter:
(NORMAL      ) IterTimerHook                      
(NORMAL      ) DetVisualizationHook               
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_test_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_test:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
after_run:
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
loading annotations into memory...
Done (t=14.97s)
creating index...
index created!
loading annotations into memory...
Done (t=0.72s)
creating index...
index created!
loading annotations into memory...
Done (t=0.62s)
creating index...
index created!
05/14 03:19:34 - mmengine - INFO - load backbone. in model from: https://download.openmmlab.com/mmclassification/v0/convnext/convnext-base_in21k-pre-3rdparty_in1k-384px_20221219-4570f792.pth
Loads checkpoint by http backend from path: https://download.openmmlab.com/mmclassification/v0/convnext/convnext-base_in21k-pre-3rdparty_in1k-384px_20221219-4570f792.pth
05/14 03:19:35 - mmengine - WARNING - The model and loaded state dict do not match exactly

missing keys in source state_dict: norm1.weight, norm1.bias, norm2.weight, norm2.bias

05/14 03:19:35 - mmengine - WARNING - "FileClient" will be deprecated in future. Please use io functions in https://mmengine.readthedocs.io/en/latest/api/fileio.html#file-io
05/14 03:19:35 - mmengine - WARNING - "HardDiskBackend" is the alias of "LocalBackend" and the former will be deprecated in future.
05/14 03:19:35 - mmengine - INFO - Checkpoints will be saved to /pfs/work7/workspace/scratch/ma_ruweber-team_project_fss2024/benchmarking_robustness/object_detection/slurm/results/DiffusionDet_convnext-b_coco.
05/14 03:20:06 - mmengine - INFO - Iter(train) [    50/450000]  lr: 1.4640e-06  eta: 3 days, 7:30:58  time: 0.6362  data_time: 0.0075  memory: 5286  grad_norm: 65164.3373  loss: 47.9593  loss_cls: 2.6919  loss_bbox: 2.6986  loss_giou: 2.4370  s.0.loss_cls: 2.6864  s.0.loss_bbox: 3.1688  s.0.loss_giou: 1.7882  s.1.loss_cls: 2.4324  s.1.loss_bbox: 4.0602  s.1.loss_giou: 1.9854  s.2.loss_cls: 2.5491  s.2.loss_bbox: 2.7136  s.2.loss_giou: 2.1279  s.3.loss_cls: 2.3341  s.3.loss_bbox: 3.6903  s.3.loss_giou: 2.1859  s.4.loss_cls: 2.9245  s.4.loss_bbox: 3.2852  s.4.loss_giou: 2.1996
05/14 03:20:36 - mmengine - INFO - Iter(train) [   100/450000]  lr: 2.7027e-06  eta: 3 days, 4:50:32  time: 0.5935  data_time: 0.0071  memory: 5275  grad_norm: 50895.2083  loss: 43.7162  loss_cls: 2.4671  loss_bbox: 2.6586  loss_giou: 2.2728  s.0.loss_cls: 2.5577  s.0.loss_bbox: 2.7887  s.0.loss_giou: 1.6694  s.1.loss_cls: 2.3951  s.1.loss_bbox: 3.4722  s.1.loss_giou: 1.8372  s.2.loss_cls: 2.5502  s.2.loss_bbox: 2.4179  s.2.loss_giou: 1.9360  s.3.loss_cls: 2.3781  s.3.loss_bbox: 2.9277  s.3.loss_giou: 1.9529  s.4.loss_cls: 2.7113  s.4.loss_bbox: 2.7116  s.4.loss_giou: 2.0116
05/14 03:21:05 - mmengine - INFO - Iter(train) [   150/450000]  lr: 3.9414e-06  eta: 3 days, 3:23:35  time: 0.5803  data_time: 0.0061  memory: 5266  grad_norm: 43860.3803  loss: 39.8414  loss_cls: 2.3324  loss_bbox: 2.5538  loss_giou: 1.9851  s.0.loss_cls: 2.6002  s.0.loss_bbox: 2.3775  s.0.loss_giou: 1.5342  s.1.loss_cls: 2.3492  s.1.loss_bbox: 2.3516  s.1.loss_giou: 1.6076  s.2.loss_cls: 2.5234  s.2.loss_bbox: 2.1533  s.2.loss_giou: 1.7201  s.3.loss_cls: 2.3518  s.3.loss_bbox: 2.6382  s.3.loss_giou: 1.7246  s.4.loss_cls: 2.6172  s.4.loss_bbox: 2.5817  s.4.loss_giou: 1.8397
05/14 03:21:35 - mmengine - INFO - Iter(train) [   200/450000]  lr: 5.1802e-06  eta: 3 days, 3:02:01  time: 0.5921  data_time: 0.0061  memory: 5360  grad_norm: 25444.5317  loss: 35.7428  loss_cls: 2.1982  loss_bbox: 1.8555  loss_giou: 1.6821  s.0.loss_cls: 2.5619  s.0.loss_bbox: 2.0971  s.0.loss_giou: 1.5311  s.1.loss_cls: 2.3716  s.1.loss_bbox: 2.1429  s.1.loss_giou: 1.5995  s.2.loss_cls: 2.4444  s.2.loss_bbox: 1.8158  s.2.loss_giou: 1.7088  s.3.loss_cls: 2.2028  s.3.loss_bbox: 1.8053  s.3.loss_giou: 1.6885  s.4.loss_cls: 2.4405  s.4.loss_bbox: 1.8538  s.4.loss_giou: 1.7430
05/14 03:22:05 - mmengine - INFO - Iter(train) [   250/450000]  lr: 6.4189e-06  eta: 3 days, 2:56:06  time: 0.5969  data_time: 0.0061  memory: 5275  grad_norm: 16713.2489  loss: 33.6958  loss_cls: 2.1798  loss_bbox: 1.7230  loss_giou: 1.6759  s.0.loss_cls: 2.4594  s.0.loss_bbox: 1.8289  s.0.loss_giou: 1.4802  s.1.loss_cls: 2.3849  s.1.loss_bbox: 1.7368  s.1.loss_giou: 1.5028  s.2.loss_cls: 2.3569  s.2.loss_bbox: 1.6251  s.2.loss_giou: 1.6213  s.3.loss_cls: 2.2060  s.3.loss_bbox: 1.8003  s.3.loss_giou: 1.5194  s.4.loss_cls: 2.2850  s.4.loss_bbox: 1.6835  s.4.loss_giou: 1.6264
05/14 03:22:36 - mmengine - INFO - Iter(train) [   300/450000]  lr: 7.6577e-06  eta: 3 days, 3:36:54  time: 0.6329  data_time: 0.0062  memory: 5343  grad_norm: 6957.2055  loss: 32.0920  loss_cls: 1.9875  loss_bbox: 1.7134  loss_giou: 1.7436  s.0.loss_cls: 2.2891  s.0.loss_bbox: 1.5886  s.0.loss_giou: 1.5419  s.1.loss_cls: 2.1649  s.1.loss_bbox: 1.4346  s.1.loss_giou: 1.5731  s.2.loss_cls: 2.2389  s.2.loss_bbox: 1.4723  s.2.loss_giou: 1.6780  s.3.loss_cls: 2.0297  s.3.loss_bbox: 1.5397  s.3.loss_giou: 1.6853  s.4.loss_cls: 2.0437  s.4.loss_bbox: 1.6362  s.4.loss_giou: 1.7315
05/14 03:23:06 - mmengine - INFO - Iter(train) [   350/450000]  lr: 8.8964e-06  eta: 3 days, 3:33:51  time: 0.6029  data_time: 0.0069  memory: 5312  grad_norm: 4616.6293  loss: 32.4087  loss_cls: 2.0369  loss_bbox: 1.7973  loss_giou: 1.7506  s.0.loss_cls: 2.2310  s.0.loss_bbox: 1.5551  s.0.loss_giou: 1.4642  s.1.loss_cls: 2.2406  s.1.loss_bbox: 1.6289  s.1.loss_giou: 1.5511  s.2.loss_cls: 2.1703  s.2.loss_bbox: 1.6492  s.2.loss_giou: 1.5695  s.3.loss_cls: 2.1087  s.3.loss_bbox: 1.7062  s.3.loss_giou: 1.5897  s.4.loss_cls: 2.0456  s.4.loss_bbox: 1.6904  s.4.loss_giou: 1.6234
05/14 03:23:37 - mmengine - INFO - Iter(train) [   400/450000]  lr: 1.0135e-05  eta: 3 days, 3:32:45  time: 0.6043  data_time: 0.0062  memory: 5386  grad_norm: 3423.3484  loss: 31.5222  loss_cls: 1.9937  loss_bbox: 1.8007  loss_giou: 1.5576  s.0.loss_cls: 2.1340  s.0.loss_bbox: 1.6062  s.0.loss_giou: 1.4200  s.1.loss_cls: 2.1455  s.1.loss_bbox: 1.6561  s.1.loss_giou: 1.4676  s.2.loss_cls: 2.1072  s.2.loss_bbox: 1.6763  s.2.loss_giou: 1.5291  s.3.loss_cls: 1.9894  s.3.loss_bbox: 1.6670  s.3.loss_giou: 1.4841  s.4.loss_cls: 2.0136  s.4.loss_bbox: 1.6590  s.4.loss_giou: 1.6150
05/14 03:24:07 - mmengine - INFO - Iter(train) [   450/450000]  lr: 1.1374e-05  eta: 3 days, 3:27:12  time: 0.5989  data_time: 0.0060  memory: 5318  grad_norm: 2416.3787  loss: 30.6492  loss_cls: 2.0104  loss_bbox: 1.7981  loss_giou: 1.4541  s.0.loss_cls: 2.1215  s.0.loss_bbox: 1.5115  s.0.loss_giou: 1.2958  s.1.loss_cls: 2.0998  s.1.loss_bbox: 1.5389  s.1.loss_giou: 1.3555  s.2.loss_cls: 2.0780  s.2.loss_bbox: 1.5971  s.2.loss_giou: 1.3760  s.3.loss_cls: 2.0705  s.3.loss_bbox: 1.6462  s.3.loss_giou: 1.4377  s.4.loss_cls: 2.0386  s.4.loss_bbox: 1.7568  s.4.loss_giou: 1.4627
05/14 03:24:37 - mmengine - INFO - Iter(train) [   500/450000]  lr: 1.2613e-05  eta: 3 days, 3:31:37  time: 0.6108  data_time: 0.0063  memory: 5320  grad_norm: 1922.2273  loss: 30.7260  loss_cls: 1.9626  loss_bbox: 1.6540  loss_giou: 1.5516  s.0.loss_cls: 2.0682  s.0.loss_bbox: 1.4693  s.0.loss_giou: 1.2764  s.1.loss_cls: 2.0871  s.1.loss_bbox: 1.6108  s.1.loss_giou: 1.3768  s.2.loss_cls: 2.0885  s.2.loss_bbox: 1.6788  s.2.loss_giou: 1.4417  s.3.loss_cls: 2.0414  s.3.loss_bbox: 1.6005  s.3.loss_giou: 1.4422  s.4.loss_cls: 2.0006  s.4.loss_bbox: 1.7917  s.4.loss_giou: 1.5838
05/14 03:25:06 - mmengine - INFO - Iter(train) [   550/450000]  lr: 1.3851e-05  eta: 3 days, 3:11:49  time: 0.5766  data_time: 0.0061  memory: 5219  grad_norm: 1291.3336  loss: 30.8954  loss_cls: 1.9958  loss_bbox: 1.7569  loss_giou: 1.7011  s.0.loss_cls: 2.0376  s.0.loss_bbox: 1.4184  s.0.loss_giou: 1.3167  s.1.loss_cls: 1.9740  s.1.loss_bbox: 1.5686  s.1.loss_giou: 1.3978  s.2.loss_cls: 2.0113  s.2.loss_bbox: 1.5834  s.2.loss_giou: 1.4953  s.3.loss_cls: 2.0303  s.3.loss_bbox: 1.6760  s.3.loss_giou: 1.5503  s.4.loss_cls: 2.0226  s.4.loss_bbox: 1.7361  s.4.loss_giou: 1.6233
05/14 03:25:36 - mmengine - INFO - Iter(train) [   600/450000]  lr: 1.5090e-05  eta: 3 days, 3:05:49  time: 0.5935  data_time: 0.0062  memory: 5275  grad_norm: 736.6321  loss: 29.7844  loss_cls: 1.8770  loss_bbox: 1.6872  loss_giou: 1.8318  s.0.loss_cls: 1.9679  s.0.loss_bbox: 1.3526  s.0.loss_giou: 1.3979  s.1.loss_cls: 1.9101  s.1.loss_bbox: 1.3151  s.1.loss_giou: 1.4551  s.2.loss_cls: 1.9294  s.2.loss_bbox: 1.4418  s.2.loss_giou: 1.5543  s.3.loss_cls: 1.9006  s.3.loss_bbox: 1.4353  s.3.loss_giou: 1.5906  s.4.loss_cls: 1.8711  s.4.loss_bbox: 1.5585  s.4.loss_giou: 1.7079
05/14 03:26:05 - mmengine - INFO - Iter(train) [   650/450000]  lr: 1.6329e-05  eta: 3 days, 2:56:40  time: 0.5866  data_time: 0.0061  memory: 5275  grad_norm: 739.3922  loss: 31.2167  loss_cls: 1.9735  loss_bbox: 2.0575  loss_giou: 1.7368  s.0.loss_cls: 2.0120  s.0.loss_bbox: 1.4243  s.0.loss_giou: 1.3187  s.1.loss_cls: 2.0381  s.1.loss_bbox: 1.4104  s.1.loss_giou: 1.3406  s.2.loss_cls: 1.9903  s.2.loss_bbox: 1.4758  s.2.loss_giou: 1.4187  s.3.loss_cls: 1.9759  s.3.loss_bbox: 1.7778  s.3.loss_giou: 1.5419  s.4.loss_cls: 1.9339  s.4.loss_bbox: 2.1114  s.4.loss_giou: 1.6789
submitit WARNING (2024-05-14 03:26:34,376) - Bypassing signal SIGCONT
submitit ERROR (2024-05-14 03:26:34,381) - Submitted job triggered an exception

============================= JOB FEEDBACK =============================

NodeName=uc2n483
Job ID: 23594848
Cluster: uc2
User/Group: ma_ruweber/ma_ma
State: FAILED (exit code 1)
Nodes: 1
Cores per node: 10
CPU Utilized: 00:08:32
CPU Efficiency: 10.32% of 01:22:40 core-walltime
Job Wall-clock time: 00:08:16
Memory Utilized: 5.57 GB
Memory Efficiency: 6.06% of 91.80 GB
