submitit INFO (2024-05-13 21:52:24,264) - Starting with JobEnvironment(job_id=23594831, hostname=uc2n512.localdomain, local_rank=0(1), node=0(1), global_rank=0(1))
submitit INFO (2024-05-13 21:52:24,264) - Loading pickle: /pfs/work7/workspace/scratch/ma_ruweber-team_project_fss2024/benchmarking_robustness/object_detection/slurm/work_dir/cascade_rcnn_swin-b_voc0712/23594831_submitted.pkl
05/13 21:52:29 - mmengine - INFO - 
------------------------------------------------------------
System environment:
    sys.platform: linux
    Python: 3.10.13 (main, Sep 11 2023, 13:44:35) [GCC 11.2.0]
    CUDA available: True
    MUSA available: False
    numpy_random_seed: 1222862370
    GPU 0: Tesla V100-SXM2-32GB
    CUDA_HOME: /opt/bwhpc/common/devel/cuda/11.8
    NVCC: Cuda compilation tools, release 11.8, V11.8.89
    GCC: gcc (GCC) 8.5.0 20210514 (Red Hat 8.5.0-10)
    PyTorch: 2.1.2
    PyTorch compiling details: PyTorch built with:
  - GCC 9.3
  - C++ Version: 201703
  - Intel(R) oneAPI Math Kernel Library Version 2023.1-Product Build 20230303 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v3.1.1 (Git Hash 64f6bcbcbab628e96f33a62c3e975f8535a7bde4)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - LAPACK is enabled (usually provided by MKL)
  - NNPACK is enabled
  - CPU capability usage: AVX512
  - CUDA Runtime 11.8
  - NVCC architecture flags: -gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_61,code=sm_61;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86;-gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_90,code=sm_90;-gencode;arch=compute_37,code=compute_37
  - CuDNN 8.7
  - Magma 2.6.1
  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.8, CUDNN_VERSION=8.7.0, CXX_COMPILER=/opt/rh/devtoolset-9/root/usr/bin/c++, CXX_FLAGS= -D_GLIBCXX_USE_CXX11_ABI=0 -fabi-version=11 -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -DNDEBUG -DUSE_KINETO -DLIBKINETO_NOROCTRACER -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -O2 -fPIC -Wall -Wextra -Werror=return-type -Werror=non-virtual-dtor -Werror=bool-operation -Wnarrowing -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-unused-parameter -Wno-unused-function -Wno-unused-result -Wno-strict-overflow -Wno-strict-aliasing -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=old-style-cast -Wno-invalid-partial-specialization -Wno-unused-private-field -Wno-aligned-allocation-unavailable -Wno-missing-braces -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Werror=cast-function-type -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_DISABLE_GPU_ASSERTS=ON, TORCH_VERSION=2.1.2, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, USE_ROCM=OFF, 

    TorchVision: 0.16.2
    OpenCV: 4.9.0
    MMEngine: 0.10.3

Runtime environment:
    cudnn_benchmark: False
    dist_cfg: {'backend': 'nccl'}
    mp_cfg: {'mp_start_method': 'fork', 'opencv_num_threads': 0}
    seed: 1222862370
    Distributed launcher: none
    Distributed training: False
    GPU number: 1
------------------------------------------------------------

05/13 21:52:29 - mmengine - INFO - Config:
auto_scale_lr = dict(base_batch_size=16, enable=False)
backend_args = None
data_root = 'data/VOCdevkit/'
dataset_type = 'VOCDataset'
default_hooks = dict(
    checkpoint=dict(interval=1, type='CheckpointHook'),
    logger=dict(interval=50, type='LoggerHook'),
    param_scheduler=dict(type='ParamSchedulerHook'),
    sampler_seed=dict(type='DistSamplerSeedHook'),
    timer=dict(type='IterTimerHook'),
    visualization=dict(type='DetVisualizationHook'))
default_scope = 'mmdet'
env_cfg = dict(
    cudnn_benchmark=False,
    dist_cfg=dict(backend='nccl'),
    mp_cfg=dict(mp_start_method='fork', opencv_num_threads=0))
launcher = 'none'
load_from = None
log_level = 'INFO'
log_processor = dict(by_epoch=True, type='LogProcessor', window_size=50)
model = dict(
    backbone=dict(
        attn_drop_rate=0.0,
        convert_weights=True,
        depths=[
            2,
            2,
            18,
            2,
            1,
        ],
        drop_path_rate=0.3,
        drop_rate=0.0,
        embed_dims=128,
        init_cfg=dict(
            checkpoint=
            'https://github.com/SwinTransformer/storage/releases/download/v1.0.0/swin_base_patch4_window12_384_22k.pth',
            type='Pretrained'),
        mlp_ratio=4,
        num_heads=[
            4,
            8,
            16,
            32,
            64,
        ],
        out_indices=[
            1,
            2,
            3,
            4,
        ],
        patch_norm=True,
        pretrain_img_size=384,
        qk_scale=None,
        qkv_bias=True,
        strides=[
            4,
            2,
            2,
            2,
            2,
        ],
        type='SwinTransformer',
        window_size=12,
        with_cp=True),
    data_preprocessor=dict(
        bgr_to_rgb=True,
        mean=[
            123.675,
            116.28,
            103.53,
        ],
        pad_size_divisor=32,
        std=[
            58.395,
            57.12,
            57.375,
        ],
        type='DetDataPreprocessor'),
    neck=dict(
        in_channels=[
            256,
            512,
            1024,
            2048,
        ],
        num_outs=5,
        out_channels=256,
        type='FPN'),
    roi_head=dict(
        bbox_head=[
            dict(
                bbox_coder=dict(
                    target_means=[
                        0.0,
                        0.0,
                        0.0,
                        0.0,
                    ],
                    target_stds=[
                        0.1,
                        0.1,
                        0.2,
                        0.2,
                    ],
                    type='DeltaXYWHBBoxCoder'),
                fc_out_channels=1024,
                in_channels=256,
                loss_bbox=dict(beta=1.0, loss_weight=1.0, type='SmoothL1Loss'),
                loss_cls=dict(
                    loss_weight=1.0,
                    type='CrossEntropyLoss',
                    use_sigmoid=False),
                num_classes=80,
                reg_class_agnostic=True,
                roi_feat_size=7,
                type='Shared2FCBBoxHead'),
            dict(
                bbox_coder=dict(
                    target_means=[
                        0.0,
                        0.0,
                        0.0,
                        0.0,
                    ],
                    target_stds=[
                        0.05,
                        0.05,
                        0.1,
                        0.1,
                    ],
                    type='DeltaXYWHBBoxCoder'),
                fc_out_channels=1024,
                in_channels=256,
                loss_bbox=dict(beta=1.0, loss_weight=1.0, type='SmoothL1Loss'),
                loss_cls=dict(
                    loss_weight=1.0,
                    type='CrossEntropyLoss',
                    use_sigmoid=False),
                num_classes=80,
                reg_class_agnostic=True,
                roi_feat_size=7,
                type='Shared2FCBBoxHead'),
            dict(
                bbox_coder=dict(
                    target_means=[
                        0.0,
                        0.0,
                        0.0,
                        0.0,
                    ],
                    target_stds=[
                        0.033,
                        0.033,
                        0.067,
                        0.067,
                    ],
                    type='DeltaXYWHBBoxCoder'),
                fc_out_channels=1024,
                in_channels=256,
                loss_bbox=dict(beta=1.0, loss_weight=1.0, type='SmoothL1Loss'),
                loss_cls=dict(
                    loss_weight=1.0,
                    type='CrossEntropyLoss',
                    use_sigmoid=False),
                num_classes=80,
                reg_class_agnostic=True,
                roi_feat_size=7,
                type='Shared2FCBBoxHead'),
        ],
        bbox_roi_extractor=dict(
            featmap_strides=[
                4,
                8,
                16,
                32,
            ],
            out_channels=256,
            roi_layer=dict(output_size=7, sampling_ratio=0, type='RoIAlign'),
            type='SingleRoIExtractor'),
        num_stages=3,
        stage_loss_weights=[
            1,
            0.5,
            0.25,
        ],
        type='CascadeRoIHead'),
    rpn_head=dict(
        anchor_generator=dict(
            ratios=[
                0.5,
                1.0,
                2.0,
            ],
            scales=[
                8,
            ],
            strides=[
                4,
                8,
                16,
                32,
                64,
            ],
            type='AnchorGenerator'),
        bbox_coder=dict(
            target_means=[
                0.0,
                0.0,
                0.0,
                0.0,
            ],
            target_stds=[
                1.0,
                1.0,
                1.0,
                1.0,
            ],
            type='DeltaXYWHBBoxCoder'),
        feat_channels=256,
        in_channels=256,
        loss_bbox=dict(
            beta=0.1111111111111111, loss_weight=1.0, type='SmoothL1Loss'),
        loss_cls=dict(
            loss_weight=1.0, type='CrossEntropyLoss', use_sigmoid=True),
        type='RPNHead'),
    test_cfg=dict(
        rcnn=dict(
            max_per_img=100,
            nms=dict(iou_threshold=0.5, type='nms'),
            score_thr=0.05),
        rpn=dict(
            max_per_img=1000,
            min_bbox_size=0,
            nms=dict(iou_threshold=0.7, type='nms'),
            nms_pre=1000)),
    train_cfg=dict(
        rcnn=[
            dict(
                assigner=dict(
                    ignore_iof_thr=-1,
                    match_low_quality=False,
                    min_pos_iou=0.5,
                    neg_iou_thr=0.5,
                    pos_iou_thr=0.5,
                    type='MaxIoUAssigner'),
                debug=False,
                pos_weight=-1,
                sampler=dict(
                    add_gt_as_proposals=True,
                    neg_pos_ub=-1,
                    num=512,
                    pos_fraction=0.25,
                    type='RandomSampler')),
            dict(
                assigner=dict(
                    ignore_iof_thr=-1,
                    match_low_quality=False,
                    min_pos_iou=0.6,
                    neg_iou_thr=0.6,
                    pos_iou_thr=0.6,
                    type='MaxIoUAssigner'),
                debug=False,
                pos_weight=-1,
                sampler=dict(
                    add_gt_as_proposals=True,
                    neg_pos_ub=-1,
                    num=512,
                    pos_fraction=0.25,
                    type='RandomSampler')),
            dict(
                assigner=dict(
                    ignore_iof_thr=-1,
                    match_low_quality=False,
                    min_pos_iou=0.7,
                    neg_iou_thr=0.7,
                    pos_iou_thr=0.7,
                    type='MaxIoUAssigner'),
                debug=False,
                pos_weight=-1,
                sampler=dict(
                    add_gt_as_proposals=True,
                    neg_pos_ub=-1,
                    num=512,
                    pos_fraction=0.25,
                    type='RandomSampler')),
        ],
        rpn=dict(
            allowed_border=0,
            assigner=dict(
                ignore_iof_thr=-1,
                match_low_quality=True,
                min_pos_iou=0.3,
                neg_iou_thr=0.3,
                pos_iou_thr=0.7,
                type='MaxIoUAssigner'),
            debug=False,
            pos_weight=-1,
            sampler=dict(
                add_gt_as_proposals=False,
                neg_pos_ub=-1,
                num=256,
                pos_fraction=0.5,
                type='RandomSampler')),
        rpn_proposal=dict(
            max_per_img=2000,
            min_bbox_size=0,
            nms=dict(iou_threshold=0.7, type='nms'),
            nms_pre=2000)),
    type='CascadeRCNN')
optim_wrapper = dict(
    optimizer=dict(lr=0.02, momentum=0.9, type='SGD', weight_decay=0.0001),
    type='OptimWrapper')
param_scheduler = [
    dict(
        begin=0, by_epoch=False, end=500, start_factor=0.001, type='LinearLR'),
    dict(
        begin=0,
        by_epoch=True,
        end=20,
        gamma=0.1,
        milestones=[
            16,
            19,
        ],
        type='MultiStepLR'),
]
resume = False
test_cfg = dict(type='TestLoop')
test_dataloader = dict(
    batch_size=1,
    dataset=dict(
        ann_file='VOC2007/ImageSets/Main/test.txt',
        backend_args=None,
        data_prefix=dict(sub_data_root='VOC2007/'),
        data_root='data/VOCdevkit/',
        pipeline=[
            dict(backend_args=None, type='LoadImageFromFile'),
            dict(keep_ratio=True, scale=(
                1000,
                600,
            ), type='Resize'),
            dict(type='LoadAnnotations', with_bbox=True),
            dict(
                meta_keys=(
                    'img_id',
                    'img_path',
                    'ori_shape',
                    'img_shape',
                    'scale_factor',
                ),
                type='PackDetInputs'),
        ],
        test_mode=True,
        type='VOCDataset'),
    drop_last=False,
    num_workers=2,
    persistent_workers=True,
    sampler=dict(shuffle=False, type='DefaultSampler'))
test_evaluator = dict(eval_mode='11points', metric='mAP', type='VOCMetric')
test_pipeline = [
    dict(backend_args=None, type='LoadImageFromFile'),
    dict(keep_ratio=True, scale=(
        1000,
        600,
    ), type='Resize'),
    dict(type='LoadAnnotations', with_bbox=True),
    dict(
        meta_keys=(
            'img_id',
            'img_path',
            'ori_shape',
            'img_shape',
            'scale_factor',
        ),
        type='PackDetInputs'),
]
train_cfg = dict(max_epochs=20, type='EpochBasedTrainLoop', val_interval=1)
train_dataloader = dict(
    batch_sampler=dict(type='AspectRatioBatchSampler'),
    batch_size=2,
    dataset=dict(
        dataset=dict(
            datasets=[
                dict(
                    ann_file='VOC2007/ImageSets/Main/trainval.txt',
                    backend_args=None,
                    data_prefix=dict(sub_data_root='VOC2007/'),
                    data_root='data/VOCdevkit/',
                    filter_cfg=dict(
                        bbox_min_size=32, filter_empty_gt=True, min_size=32),
                    pipeline=[
                        dict(backend_args=None, type='LoadImageFromFile'),
                        dict(type='LoadAnnotations', with_bbox=True),
                        dict(
                            keep_ratio=True,
                            scale=(
                                1000,
                                600,
                            ),
                            type='Resize'),
                        dict(prob=0.5, type='RandomFlip'),
                        dict(type='PackDetInputs'),
                    ],
                    type='VOCDataset'),
                dict(
                    ann_file='VOC2012/ImageSets/Main/trainval.txt',
                    backend_args=None,
                    data_prefix=dict(sub_data_root='VOC2012/'),
                    data_root='data/VOCdevkit/',
                    filter_cfg=dict(
                        bbox_min_size=32, filter_empty_gt=True, min_size=32),
                    pipeline=[
                        dict(backend_args=None, type='LoadImageFromFile'),
                        dict(type='LoadAnnotations', with_bbox=True),
                        dict(
                            keep_ratio=True,
                            scale=(
                                1000,
                                600,
                            ),
                            type='Resize'),
                        dict(prob=0.5, type='RandomFlip'),
                        dict(type='PackDetInputs'),
                    ],
                    type='VOCDataset'),
            ],
            ignore_keys=[
                'dataset_type',
            ],
            type='ConcatDataset'),
        times=3,
        type='RepeatDataset'),
    num_workers=2,
    persistent_workers=True,
    sampler=dict(shuffle=True, type='DefaultSampler'))
train_pipeline = [
    dict(backend_args=None, type='LoadImageFromFile'),
    dict(type='LoadAnnotations', with_bbox=True),
    dict(keep_ratio=True, scale=(
        1000,
        600,
    ), type='Resize'),
    dict(prob=0.5, type='RandomFlip'),
    dict(type='PackDetInputs'),
]
val_cfg = dict(type='ValLoop')
val_dataloader = dict(
    batch_size=1,
    dataset=dict(
        ann_file='VOC2007/ImageSets/Main/test.txt',
        backend_args=None,
        data_prefix=dict(sub_data_root='VOC2007/'),
        data_root='data/VOCdevkit/',
        pipeline=[
            dict(backend_args=None, type='LoadImageFromFile'),
            dict(keep_ratio=True, scale=(
                1000,
                600,
            ), type='Resize'),
            dict(type='LoadAnnotations', with_bbox=True),
            dict(
                meta_keys=(
                    'img_id',
                    'img_path',
                    'ori_shape',
                    'img_shape',
                    'scale_factor',
                ),
                type='PackDetInputs'),
        ],
        test_mode=True,
        type='VOCDataset'),
    drop_last=False,
    num_workers=2,
    persistent_workers=True,
    sampler=dict(shuffle=False, type='DefaultSampler'))
val_evaluator = dict(eval_mode='11points', metric='mAP', type='VOCMetric')
vis_backends = [
    dict(type='LocalVisBackend'),
]
visualizer = dict(
    name='visualizer',
    type='DetLocalVisualizer',
    vis_backends=[
        dict(type='LocalVisBackend'),
    ])
work_dir = 'slurm/results/cascade_rcnn_swin-b_voc0712'

05/13 21:52:32 - mmengine - INFO - Distributed training is not used, all SyncBatchNorm (SyncBN) layers in the model will be automatically reverted to BatchNormXd layers if they are used.
05/13 21:52:32 - mmengine - INFO - Hooks will be executed in the following order:
before_run:
(VERY_HIGH   ) RuntimeInfoHook                    
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
before_train:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_train_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(NORMAL      ) DistSamplerSeedHook                
 -------------------- 
before_train_iter:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_train_iter:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
after_train_epoch:
(NORMAL      ) IterTimerHook                      
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_val:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
before_val_epoch:
(NORMAL      ) IterTimerHook                      
 -------------------- 
before_val_iter:
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_val_iter:
(NORMAL      ) IterTimerHook                      
(NORMAL      ) DetVisualizationHook               
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_val_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
after_val:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
after_train:
(VERY_HIGH   ) RuntimeInfoHook                    
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_test:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
before_test_epoch:
(NORMAL      ) IterTimerHook                      
 -------------------- 
before_test_iter:
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_test_iter:
(NORMAL      ) IterTimerHook                      
(NORMAL      ) DetVisualizationHook               
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_test_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_test:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
after_run:
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
05/13 21:52:44 - mmengine - INFO - Loads checkpoint by http backend from path: https://github.com/SwinTransformer/storage/releases/download/v1.0.0/swin_base_patch4_window12_384_22k.pth
05/13 21:52:46 - mmengine - WARNING - "FileClient" will be deprecated in future. Please use io functions in https://mmengine.readthedocs.io/en/latest/api/fileio.html#file-io
05/13 21:52:46 - mmengine - WARNING - "HardDiskBackend" is the alias of "LocalBackend" and the former will be deprecated in future.
05/13 21:52:46 - mmengine - INFO - Checkpoints will be saved to /pfs/work7/workspace/scratch/ma_ruweber-team_project_fss2024/benchmarking_robustness/object_detection/slurm/results/cascade_rcnn_swin-b_voc0712.
05/13 21:53:13 - mmengine - INFO - Epoch(train)  [1][   50/24827]  lr: 1.9820e-03  eta: 3 days, 2:06:01  time: 0.5373  data_time: 0.0102  memory: 3467  loss: 1.5215  loss_rpn_cls: 0.1974  loss_rpn_bbox: 0.0047  s0.loss_cls: 0.7680  s0.acc: 99.4141  s0.loss_bbox: 0.0210  s1.loss_cls: 0.3359  s1.acc: 99.6094  s1.loss_bbox: 0.0082  s2.loss_cls: 0.1848  s2.acc: 99.8047  s2.loss_bbox: 0.0017
05/13 21:53:39 - mmengine - INFO - Epoch(train)  [1][  100/24827]  lr: 3.9840e-03  eta: 3 days, 0:54:14  time: 0.5201  data_time: 0.0032  memory: 3465  loss: 0.3833  loss_rpn_cls: 0.0221  loss_rpn_bbox: 0.0049  s0.loss_cls: 0.1960  s0.acc: 99.7070  s0.loss_bbox: 0.0335  s1.loss_cls: 0.0822  s1.acc: 99.7070  s1.loss_bbox: 0.0107  s2.loss_cls: 0.0325  s2.acc: 99.7070  s2.loss_bbox: 0.0014
05/13 21:54:05 - mmengine - INFO - Epoch(train)  [1][  150/24827]  lr: 5.9860e-03  eta: 3 days, 0:13:11  time: 0.5139  data_time: 0.0031  memory: 3466  loss: 0.2514  loss_rpn_cls: 0.0248  loss_rpn_bbox: 0.0058  s0.loss_cls: 0.1212  s0.acc: 99.4141  s0.loss_bbox: 0.0332  s1.loss_cls: 0.0386  s1.acc: 99.5117  s1.loss_bbox: 0.0126  s2.loss_cls: 0.0133  s2.acc: 99.5117  s2.loss_bbox: 0.0020
05/13 21:54:31 - mmengine - INFO - Epoch(train)  [1][  200/24827]  lr: 7.9880e-03  eta: 3 days, 0:04:18  time: 0.5197  data_time: 0.0032  memory: 3466  loss: 0.2575  loss_rpn_cls: 0.0239  loss_rpn_bbox: 0.0057  s0.loss_cls: 0.1233  s0.acc: 95.6055  s0.loss_bbox: 0.0381  s1.loss_cls: 0.0365  s1.acc: 97.7539  s1.loss_bbox: 0.0146  s2.loss_cls: 0.0126  s2.acc: 99.0234  s2.loss_bbox: 0.0027
05/13 21:54:57 - mmengine - INFO - Epoch(train)  [1][  250/24827]  lr: 9.9900e-03  eta: 2 days, 23:56:51  time: 0.5185  data_time: 0.0030  memory: 3466  loss: 0.1838  loss_rpn_cls: 0.0191  loss_rpn_bbox: 0.0059  s0.loss_cls: 0.0833  s0.acc: 97.8516  s0.loss_bbox: 0.0291  s1.loss_cls: 0.0254  s1.acc: 98.1445  s1.loss_bbox: 0.0094  s2.loss_cls: 0.0097  s2.acc: 99.3164  s2.loss_bbox: 0.0020
05/13 21:55:23 - mmengine - INFO - Epoch(train)  [1][  300/24827]  lr: 1.1992e-02  eta: 2 days, 23:50:32  time: 0.5176  data_time: 0.0034  memory: 3467  loss: 0.2847  loss_rpn_cls: 0.0193  loss_rpn_bbox: 0.0056  s0.loss_cls: 0.1362  s0.acc: 98.0469  s0.loss_bbox: 0.0328  s1.loss_cls: 0.0526  s1.acc: 99.0234  s1.loss_bbox: 0.0141  s2.loss_cls: 0.0216  s2.acc: 99.4141  s2.loss_bbox: 0.0025
05/13 21:55:49 - mmengine - INFO - Epoch(train)  [1][  350/24827]  lr: 1.3994e-02  eta: 2 days, 23:54:16  time: 0.5247  data_time: 0.0032  memory: 3466  loss: 0.3926  loss_rpn_cls: 0.0230  loss_rpn_bbox: 0.0066  s0.loss_cls: 0.1951  s0.acc: 99.6094  s0.loss_bbox: 0.0305  s1.loss_cls: 0.0830  s1.acc: 99.2188  s1.loss_bbox: 0.0146  s2.loss_cls: 0.0366  s2.acc: 99.2188  s2.loss_bbox: 0.0031
05/13 21:56:15 - mmengine - INFO - Epoch(train)  [1][  400/24827]  lr: 1.5996e-02  eta: 2 days, 23:57:04  time: 0.5248  data_time: 0.0030  memory: 3465  loss: 0.4055  loss_rpn_cls: 0.0183  loss_rpn_bbox: 0.0070  s0.loss_cls: 0.2047  s0.acc: 98.0469  s0.loss_bbox: 0.0462  s1.loss_cls: 0.0776  s1.acc: 98.8281  s1.loss_bbox: 0.0166  s2.loss_cls: 0.0324  s2.acc: 99.1211  s2.loss_bbox: 0.0027
05/13 21:56:41 - mmengine - INFO - Epoch(train)  [1][  450/24827]  lr: 1.7998e-02  eta: 2 days, 23:56:08  time: 0.5215  data_time: 0.0032  memory: 3467  loss: 0.2506  loss_rpn_cls: 0.0189  loss_rpn_bbox: 0.0045  s0.loss_cls: 0.1192  s0.acc: 96.5820  s0.loss_bbox: 0.0315  s1.loss_cls: 0.0436  s1.acc: 98.2422  s1.loss_bbox: 0.0120  s2.loss_cls: 0.0181  s2.acc: 98.5352  s2.loss_bbox: 0.0028
05/13 21:57:08 - mmengine - INFO - Epoch(train)  [1][  500/24827]  lr: 2.0000e-02  eta: 2 days, 23:59:35  time: 0.5267  data_time: 0.0031  memory: 3465  loss: 0.2708  loss_rpn_cls: 0.0302  loss_rpn_bbox: 0.0101  s0.loss_cls: 0.1280  s0.acc: 96.8750  s0.loss_bbox: 0.0372  s1.loss_cls: 0.0361  s1.acc: 98.7305  s1.loss_bbox: 0.0139  s2.loss_cls: 0.0128  s2.acc: 99.2188  s2.loss_bbox: 0.0025
05/13 21:57:34 - mmengine - INFO - Epoch(train)  [1][  550/24827]  lr: 2.0000e-02  eta: 2 days, 23:58:37  time: 0.5218  data_time: 0.0033  memory: 3467  loss: 0.3653  loss_rpn_cls: 0.0186  loss_rpn_bbox: 0.0055  s0.loss_cls: 0.1818  s0.acc: 98.0469  s0.loss_bbox: 0.0361  s1.loss_cls: 0.0751  s1.acc: 98.8281  s1.loss_bbox: 0.0114  s2.loss_cls: 0.0348  s2.acc: 99.5117  s2.loss_bbox: 0.0020
05/13 21:58:00 - mmengine - INFO - Epoch(train)  [1][  600/24827]  lr: 2.0000e-02  eta: 2 days, 23:55:23  time: 0.5184  data_time: 0.0032  memory: 3467  loss: 0.6719  loss_rpn_cls: 0.0418  loss_rpn_bbox: 0.0166  s0.loss_cls: 0.2700  s0.acc: 97.8516  s0.loss_bbox: 0.0353  s1.loss_cls: 0.1900  s1.acc: 98.4375  s1.loss_bbox: 0.0121  s2.loss_cls: 0.1037  s2.acc: 98.8281  s2.loss_bbox: 0.0024
05/13 21:58:26 - mmengine - INFO - Epoch(train)  [1][  650/24827]  lr: 2.0000e-02  eta: 2 days, 23:57:43  time: 0.5264  data_time: 0.0031  memory: 3465  loss: 0.3920  loss_rpn_cls: 0.0202  loss_rpn_bbox: 0.0071  s0.loss_cls: 0.1111  s0.acc: 99.0234  s0.loss_bbox: 0.0311  s1.loss_cls: 0.1179  s1.acc: 99.7070  s1.loss_bbox: 0.0128  s2.loss_cls: 0.0891  s2.acc: 99.8047  s2.loss_bbox: 0.0026
05/13 21:58:52 - mmengine - INFO - Epoch(train)  [1][  700/24827]  lr: 2.0000e-02  eta: 2 days, 23:55:06  time: 0.5187  data_time: 0.0030  memory: 3468  loss: 0.2612  loss_rpn_cls: 0.0218  loss_rpn_bbox: 0.0084  s0.loss_cls: 0.1077  s0.acc: 99.3164  s0.loss_bbox: 0.0305  s1.loss_cls: 0.0400  s1.acc: 99.6094  s1.loss_bbox: 0.0115  s2.loss_cls: 0.0392  s2.acc: 99.6094  s2.loss_bbox: 0.0022
05/13 21:59:18 - mmengine - INFO - Epoch(train)  [1][  750/24827]  lr: 2.0000e-02  eta: 2 days, 23:53:00  time: 0.5191  data_time: 0.0029  memory: 3465  loss: 0.2323  loss_rpn_cls: 0.0208  loss_rpn_bbox: 0.0058  s0.loss_cls: 0.1049  s0.acc: 99.6094  s0.loss_bbox: 0.0353  s1.loss_cls: 0.0327  s1.acc: 99.7070  s1.loss_bbox: 0.0143  s2.loss_cls: 0.0155  s2.acc: 99.8047  s2.loss_bbox: 0.0031
05/13 21:59:44 - mmengine - INFO - Epoch(train)  [1][  800/24827]  lr: 2.0000e-02  eta: 2 days, 23:50:19  time: 0.5176  data_time: 0.0032  memory: 3467  loss: 0.2309  loss_rpn_cls: 0.0206  loss_rpn_bbox: 0.0068  s0.loss_cls: 0.0966  s0.acc: 99.6094  s0.loss_bbox: 0.0293  s1.loss_cls: 0.0350  s1.acc: 99.6094  s1.loss_bbox: 0.0142  s2.loss_cls: 0.0251  s2.acc: 99.7070  s2.loss_bbox: 0.0033
submitit WARNING (2024-05-13 22:00:05,832) - Bypassing signal SIGCONT
submitit ERROR (2024-05-13 22:00:05,838) - Submitted job triggered an exception

============================= JOB FEEDBACK =============================

NodeName=uc2n512
Job ID: 23594831
Cluster: uc2
User/Group: ma_ruweber/ma_ma
State: FAILED (exit code 1)
Nodes: 1
Cores per node: 10
CPU Utilized: 00:07:51
CPU Efficiency: 9.57% of 01:22:00 core-walltime
Job Wall-clock time: 00:08:12
Memory Utilized: 1.76 GB
Memory Efficiency: 1.92% of 91.80 GB
