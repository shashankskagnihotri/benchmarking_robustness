submitit INFO (2024-05-14 03:45:16,049) - Starting with JobEnvironment(job_id=23594866, hostname=uc2n482.localdomain, local_rank=0(1), node=0(1), global_rank=0(1))
submitit INFO (2024-05-14 03:45:16,050) - Loading pickle: /pfs/work7/workspace/scratch/ma_ruweber-team_project_fss2024/benchmarking_robustness/object_detection/slurm/work_dir/grid_rcnn_r101_voc0712/23594866_submitted.pkl
05/14 03:45:20 - mmengine - INFO - 
------------------------------------------------------------
System environment:
    sys.platform: linux
    Python: 3.10.13 (main, Sep 11 2023, 13:44:35) [GCC 11.2.0]
    CUDA available: True
    MUSA available: False
    numpy_random_seed: 1534090138
    GPU 0: Tesla V100-SXM2-32GB
    CUDA_HOME: /opt/bwhpc/common/devel/cuda/11.8
    NVCC: Cuda compilation tools, release 11.8, V11.8.89
    GCC: gcc (GCC) 8.5.0 20210514 (Red Hat 8.5.0-10)
    PyTorch: 2.1.2
    PyTorch compiling details: PyTorch built with:
  - GCC 9.3
  - C++ Version: 201703
  - Intel(R) oneAPI Math Kernel Library Version 2023.1-Product Build 20230303 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v3.1.1 (Git Hash 64f6bcbcbab628e96f33a62c3e975f8535a7bde4)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - LAPACK is enabled (usually provided by MKL)
  - NNPACK is enabled
  - CPU capability usage: AVX512
  - CUDA Runtime 11.8
  - NVCC architecture flags: -gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_61,code=sm_61;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86;-gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_90,code=sm_90;-gencode;arch=compute_37,code=compute_37
  - CuDNN 8.7
  - Magma 2.6.1
  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.8, CUDNN_VERSION=8.7.0, CXX_COMPILER=/opt/rh/devtoolset-9/root/usr/bin/c++, CXX_FLAGS= -D_GLIBCXX_USE_CXX11_ABI=0 -fabi-version=11 -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -DNDEBUG -DUSE_KINETO -DLIBKINETO_NOROCTRACER -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -O2 -fPIC -Wall -Wextra -Werror=return-type -Werror=non-virtual-dtor -Werror=bool-operation -Wnarrowing -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-unused-parameter -Wno-unused-function -Wno-unused-result -Wno-strict-overflow -Wno-strict-aliasing -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=old-style-cast -Wno-invalid-partial-specialization -Wno-unused-private-field -Wno-aligned-allocation-unavailable -Wno-missing-braces -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Werror=cast-function-type -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_DISABLE_GPU_ASSERTS=ON, TORCH_VERSION=2.1.2, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, USE_ROCM=OFF, 

    TorchVision: 0.16.2
    OpenCV: 4.9.0
    MMEngine: 0.10.3

Runtime environment:
    cudnn_benchmark: False
    dist_cfg: {'backend': 'nccl'}
    mp_cfg: {'mp_start_method': 'fork', 'opencv_num_threads': 0}
    seed: 1534090138
    Distributed launcher: none
    Distributed training: False
    GPU number: 1
------------------------------------------------------------

05/14 03:45:21 - mmengine - INFO - Config:
auto_scale_lr = dict(base_batch_size=16, enable=False)
backend_args = None
data_root = 'data/VOCdevkit/'
dataset_type = 'VOCDataset'
default_hooks = dict(
    checkpoint=dict(interval=1, type='CheckpointHook'),
    logger=dict(interval=50, type='LoggerHook'),
    param_scheduler=dict(type='ParamSchedulerHook'),
    sampler_seed=dict(type='DistSamplerSeedHook'),
    timer=dict(type='IterTimerHook'),
    visualization=dict(type='DetVisualizationHook'))
default_scope = 'mmdet'
env_cfg = dict(
    cudnn_benchmark=False,
    dist_cfg=dict(backend='nccl'),
    mp_cfg=dict(mp_start_method='fork', opencv_num_threads=0))
launcher = 'none'
load_from = None
log_level = 'INFO'
log_processor = dict(by_epoch=True, type='LogProcessor', window_size=50)
max_epochs = 25
model = dict(
    backbone=dict(
        depth=101,
        frozen_stages=1,
        init_cfg=dict(checkpoint='torchvision://resnet101', type='Pretrained'),
        norm_cfg=dict(requires_grad=True, type='BN'),
        norm_eval=True,
        num_stages=4,
        out_indices=[
            0,
            1,
            2,
            3,
        ],
        style='pytorch',
        type='ResNet'),
    data_preprocessor=dict(
        bgr_to_rgb=True,
        mean=[
            123.675,
            116.28,
            103.53,
        ],
        pad_size_divisor=32,
        std=[
            58.395,
            57.12,
            57.375,
        ],
        type='DetDataPreprocessor'),
    neck=dict(
        in_channels=[
            256,
            512,
            1024,
            2048,
        ],
        num_outs=5,
        out_channels=256,
        type='FPN'),
    roi_head=dict(
        bbox_head=dict(
            bbox_coder=dict(
                target_means=[
                    0.0,
                    0.0,
                    0.0,
                    0.0,
                ],
                target_stds=[
                    0.1,
                    0.1,
                    0.2,
                    0.2,
                ],
                type='DeltaXYWHBBoxCoder'),
            fc_out_channels=1024,
            in_channels=256,
            num_classes=80,
            reg_class_agnostic=False,
            roi_feat_size=7,
            type='Shared2FCBBoxHead',
            with_reg=False),
        bbox_roi_extractor=dict(
            featmap_strides=[
                4,
                8,
                16,
                32,
            ],
            out_channels=256,
            roi_layer=dict(output_size=7, sampling_ratio=0, type='RoIAlign'),
            type='SingleRoIExtractor'),
        grid_head=dict(
            grid_points=9,
            in_channels=256,
            loss_grid=dict(
                loss_weight=15, type='CrossEntropyLoss', use_sigmoid=True),
            norm_cfg=dict(num_groups=36, type='GN'),
            num_convs=8,
            point_feat_channels=64,
            type='GridHead'),
        grid_roi_extractor=dict(
            featmap_strides=[
                4,
                8,
                16,
                32,
            ],
            out_channels=256,
            roi_layer=dict(output_size=14, sampling_ratio=0, type='RoIAlign'),
            type='SingleRoIExtractor'),
        type='GridRoIHead'),
    rpn_head=dict(
        anchor_generator=dict(
            ratios=[
                0.5,
                1.0,
                2.0,
            ],
            scales=[
                8,
            ],
            strides=[
                4,
                8,
                16,
                32,
                64,
            ],
            type='AnchorGenerator'),
        bbox_coder=dict(
            target_means=[
                0.0,
                0.0,
                0.0,
                0.0,
            ],
            target_stds=[
                1.0,
                1.0,
                1.0,
                1.0,
            ],
            type='DeltaXYWHBBoxCoder'),
        feat_channels=256,
        in_channels=256,
        loss_bbox=dict(
            beta=0.1111111111111111, loss_weight=1.0, type='SmoothL1Loss'),
        loss_cls=dict(
            loss_weight=1.0, type='CrossEntropyLoss', use_sigmoid=True),
        type='RPNHead'),
    test_cfg=dict(
        rcnn=dict(
            max_per_img=100,
            nms=dict(iou_threshold=0.3, type='nms'),
            score_thr=0.03),
        rpn=dict(
            max_per_img=1000,
            min_bbox_size=0,
            nms=dict(iou_threshold=0.7, type='nms'),
            nms_pre=1000)),
    train_cfg=dict(
        rcnn=dict(
            assigner=dict(
                ignore_iof_thr=-1,
                min_pos_iou=0.5,
                neg_iou_thr=0.5,
                pos_iou_thr=0.5,
                type='MaxIoUAssigner'),
            debug=False,
            max_num_grid=192,
            pos_radius=1,
            pos_weight=-1,
            sampler=dict(
                add_gt_as_proposals=True,
                neg_pos_ub=-1,
                num=512,
                pos_fraction=0.25,
                type='RandomSampler')),
        rpn=dict(
            allowed_border=0,
            assigner=dict(
                ignore_iof_thr=-1,
                min_pos_iou=0.3,
                neg_iou_thr=0.3,
                pos_iou_thr=0.7,
                type='MaxIoUAssigner'),
            debug=False,
            pos_weight=-1,
            sampler=dict(
                add_gt_as_proposals=False,
                neg_pos_ub=-1,
                num=256,
                pos_fraction=0.5,
                type='RandomSampler')),
        rpn_proposal=dict(
            max_per_img=2000,
            min_bbox_size=0,
            nms=dict(iou_threshold=0.7, type='nms'),
            nms_pre=2000)),
    type='GridRCNN')
optim_wrapper = dict(
    optimizer=dict(lr=0.02, momentum=0.9, type='SGD', weight_decay=0.0001),
    type='OptimWrapper')
param_scheduler = [
    dict(
        begin=0,
        by_epoch=False,
        end=3665,
        start_factor=0.0125,
        type='LinearLR'),
    dict(
        begin=0,
        by_epoch=True,
        end=25,
        gamma=0.1,
        milestones=[
            17,
            23,
        ],
        type='MultiStepLR'),
]
resume = False
test_cfg = dict(type='TestLoop')
test_dataloader = dict(
    batch_size=1,
    dataset=dict(
        ann_file='VOC2007/ImageSets/Main/test.txt',
        backend_args=None,
        data_prefix=dict(sub_data_root='VOC2007/'),
        data_root='data/VOCdevkit/',
        pipeline=[
            dict(backend_args=None, type='LoadImageFromFile'),
            dict(keep_ratio=True, scale=(
                1000,
                600,
            ), type='Resize'),
            dict(type='LoadAnnotations', with_bbox=True),
            dict(
                meta_keys=(
                    'img_id',
                    'img_path',
                    'ori_shape',
                    'img_shape',
                    'scale_factor',
                ),
                type='PackDetInputs'),
        ],
        test_mode=True,
        type='VOCDataset'),
    drop_last=False,
    num_workers=2,
    persistent_workers=True,
    sampler=dict(shuffle=False, type='DefaultSampler'))
test_evaluator = dict(eval_mode='11points', metric='mAP', type='VOCMetric')
test_pipeline = [
    dict(backend_args=None, type='LoadImageFromFile'),
    dict(keep_ratio=True, scale=(
        1000,
        600,
    ), type='Resize'),
    dict(type='LoadAnnotations', with_bbox=True),
    dict(
        meta_keys=(
            'img_id',
            'img_path',
            'ori_shape',
            'img_shape',
            'scale_factor',
        ),
        type='PackDetInputs'),
]
train_cfg = dict(max_epochs=25, type='EpochBasedTrainLoop', val_interval=1)
train_dataloader = dict(
    batch_sampler=dict(type='AspectRatioBatchSampler'),
    batch_size=2,
    dataset=dict(
        dataset=dict(
            datasets=[
                dict(
                    ann_file='VOC2007/ImageSets/Main/trainval.txt',
                    backend_args=None,
                    data_prefix=dict(sub_data_root='VOC2007/'),
                    data_root='data/VOCdevkit/',
                    filter_cfg=dict(
                        bbox_min_size=32, filter_empty_gt=True, min_size=32),
                    pipeline=[
                        dict(backend_args=None, type='LoadImageFromFile'),
                        dict(type='LoadAnnotations', with_bbox=True),
                        dict(
                            keep_ratio=True,
                            scale=(
                                1000,
                                600,
                            ),
                            type='Resize'),
                        dict(prob=0.5, type='RandomFlip'),
                        dict(type='PackDetInputs'),
                    ],
                    type='VOCDataset'),
                dict(
                    ann_file='VOC2012/ImageSets/Main/trainval.txt',
                    backend_args=None,
                    data_prefix=dict(sub_data_root='VOC2012/'),
                    data_root='data/VOCdevkit/',
                    filter_cfg=dict(
                        bbox_min_size=32, filter_empty_gt=True, min_size=32),
                    pipeline=[
                        dict(backend_args=None, type='LoadImageFromFile'),
                        dict(type='LoadAnnotations', with_bbox=True),
                        dict(
                            keep_ratio=True,
                            scale=(
                                1000,
                                600,
                            ),
                            type='Resize'),
                        dict(prob=0.5, type='RandomFlip'),
                        dict(type='PackDetInputs'),
                    ],
                    type='VOCDataset'),
            ],
            ignore_keys=[
                'dataset_type',
            ],
            type='ConcatDataset'),
        times=3,
        type='RepeatDataset'),
    num_workers=2,
    persistent_workers=True,
    sampler=dict(shuffle=True, type='DefaultSampler'))
train_pipeline = [
    dict(backend_args=None, type='LoadImageFromFile'),
    dict(type='LoadAnnotations', with_bbox=True),
    dict(keep_ratio=True, scale=(
        1000,
        600,
    ), type='Resize'),
    dict(prob=0.5, type='RandomFlip'),
    dict(type='PackDetInputs'),
]
val_cfg = dict(type='ValLoop')
val_dataloader = dict(
    batch_size=1,
    dataset=dict(
        ann_file='VOC2007/ImageSets/Main/test.txt',
        backend_args=None,
        data_prefix=dict(sub_data_root='VOC2007/'),
        data_root='data/VOCdevkit/',
        pipeline=[
            dict(backend_args=None, type='LoadImageFromFile'),
            dict(keep_ratio=True, scale=(
                1000,
                600,
            ), type='Resize'),
            dict(type='LoadAnnotations', with_bbox=True),
            dict(
                meta_keys=(
                    'img_id',
                    'img_path',
                    'ori_shape',
                    'img_shape',
                    'scale_factor',
                ),
                type='PackDetInputs'),
        ],
        test_mode=True,
        type='VOCDataset'),
    drop_last=False,
    num_workers=2,
    persistent_workers=True,
    sampler=dict(shuffle=False, type='DefaultSampler'))
val_evaluator = dict(eval_mode='11points', metric='mAP', type='VOCMetric')
vis_backends = [
    dict(type='LocalVisBackend'),
]
visualizer = dict(
    name='visualizer',
    type='DetLocalVisualizer',
    vis_backends=[
        dict(type='LocalVisBackend'),
    ])
work_dir = 'slurm/results/grid_rcnn_r101_voc0712'

05/14 03:45:23 - mmengine - INFO - Distributed training is not used, all SyncBatchNorm (SyncBN) layers in the model will be automatically reverted to BatchNormXd layers if they are used.
05/14 03:45:23 - mmengine - INFO - Hooks will be executed in the following order:
before_run:
(VERY_HIGH   ) RuntimeInfoHook                    
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
before_train:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_train_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(NORMAL      ) DistSamplerSeedHook                
 -------------------- 
before_train_iter:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_train_iter:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
after_train_epoch:
(NORMAL      ) IterTimerHook                      
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_val:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
before_val_epoch:
(NORMAL      ) IterTimerHook                      
 -------------------- 
before_val_iter:
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_val_iter:
(NORMAL      ) IterTimerHook                      
(NORMAL      ) DetVisualizationHook               
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_val_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
after_val:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
after_train:
(VERY_HIGH   ) RuntimeInfoHook                    
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_test:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
before_test_epoch:
(NORMAL      ) IterTimerHook                      
 -------------------- 
before_test_iter:
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_test_iter:
(NORMAL      ) IterTimerHook                      
(NORMAL      ) DetVisualizationHook               
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_test_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_test:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
after_run:
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
05/14 03:45:31 - mmengine - INFO - load model from: torchvision://resnet101
05/14 03:45:31 - mmengine - INFO - Loads checkpoint by torchvision backend from path: torchvision://resnet101
05/14 03:45:31 - mmengine - WARNING - The model and loaded state dict do not match exactly

unexpected key in source state_dict: fc.weight, fc.bias

05/14 03:45:31 - mmengine - WARNING - "FileClient" will be deprecated in future. Please use io functions in https://mmengine.readthedocs.io/en/latest/api/fileio.html#file-io
05/14 03:45:31 - mmengine - WARNING - "HardDiskBackend" is the alias of "LocalBackend" and the former will be deprecated in future.
05/14 03:45:31 - mmengine - INFO - Checkpoints will be saved to /pfs/work7/workspace/scratch/ma_ruweber-team_project_fss2024/benchmarking_robustness/object_detection/slurm/results/grid_rcnn_r101_voc0712.
05/14 03:45:44 - mmengine - INFO - Epoch(train)  [1][   50/24827]  lr: 5.1412e-04  eta: 1 day, 19:39:32  time: 0.2532  data_time: 0.0086  memory: 3712  loss: 2.5206  loss_rpn_cls: 0.3845  loss_rpn_bbox: 0.0160  loss_cls: 0.9811  acc: 98.2422  loss_grid: 1.1389
05/14 03:45:57 - mmengine - INFO - Epoch(train)  [1][  100/24827]  lr: 7.8364e-04  eta: 1 day, 19:26:37  time: 0.2508  data_time: 0.0032  memory: 3713  loss: 1.4882  loss_rpn_cls: 0.0618  loss_rpn_bbox: 0.0115  loss_cls: 0.2763  acc: 98.0469  loss_grid: 1.1387
05/14 03:46:10 - mmengine - INFO - Epoch(train)  [1][  150/24827]  lr: 1.0532e-03  eta: 1 day, 20:19:31  time: 0.2674  data_time: 0.0033  memory: 3712  loss: 1.4712  loss_rpn_cls: 0.0449  loss_rpn_bbox: 0.0123  loss_cls: 0.2842  acc: 97.6562  loss_grid: 1.1298
05/14 03:46:24 - mmengine - INFO - Epoch(train)  [1][  200/24827]  lr: 1.3227e-03  eta: 1 day, 21:09:39  time: 0.2766  data_time: 0.0031  memory: 3712  loss: 1.4319  loss_rpn_cls: 0.0437  loss_rpn_bbox: 0.0140  loss_cls: 0.2636  acc: 98.6328  loss_grid: 1.1106
05/14 03:46:37 - mmengine - INFO - Epoch(train)  [1][  250/24827]  lr: 1.5922e-03  eta: 1 day, 21:16:26  time: 0.2654  data_time: 0.0030  memory: 3712  loss: 1.3721  loss_rpn_cls: 0.0347  loss_rpn_bbox: 0.0104  loss_cls: 0.2347  acc: 92.4805  loss_grid: 1.0922
05/14 03:46:51 - mmengine - INFO - Epoch(train)  [1][  300/24827]  lr: 1.8617e-03  eta: 1 day, 21:39:36  time: 0.2763  data_time: 0.0030  memory: 3937  loss: 1.3696  loss_rpn_cls: 0.0341  loss_rpn_bbox: 0.0132  loss_cls: 0.2597  acc: 91.7969  loss_grid: 1.0625
05/14 03:47:05 - mmengine - INFO - Epoch(train)  [1][  350/24827]  lr: 2.1312e-03  eta: 1 day, 21:59:56  time: 0.2789  data_time: 0.0031  memory: 3905  loss: 1.3785  loss_rpn_cls: 0.0401  loss_rpn_bbox: 0.0161  loss_cls: 0.2784  acc: 95.0195  loss_grid: 1.0440
05/14 03:47:20 - mmengine - INFO - Epoch(train)  [1][  400/24827]  lr: 2.4007e-03  eta: 1 day, 22:35:41  time: 0.2948  data_time: 0.0036  memory: 3937  loss: 1.3837  loss_rpn_cls: 0.0420  loss_rpn_bbox: 0.0180  loss_cls: 0.2923  acc: 92.9688  loss_grid: 1.0313
05/14 03:47:34 - mmengine - INFO - Epoch(train)  [1][  450/24827]  lr: 2.6702e-03  eta: 1 day, 23:04:41  time: 0.2959  data_time: 0.0031  memory: 4066  loss: 1.3341  loss_rpn_cls: 0.0366  loss_rpn_bbox: 0.0152  loss_cls: 0.2601  acc: 96.8750  loss_grid: 1.0221
05/14 03:47:48 - mmengine - INFO - Epoch(train)  [1][  500/24827]  lr: 2.9398e-03  eta: 1 day, 23:05:35  time: 0.2743  data_time: 0.0036  memory: 3905  loss: 1.2901  loss_rpn_cls: 0.0310  loss_rpn_bbox: 0.0105  loss_cls: 0.2388  acc: 97.2656  loss_grid: 1.0098
05/14 03:48:02 - mmengine - INFO - Epoch(train)  [1][  550/24827]  lr: 3.2093e-03  eta: 1 day, 23:15:43  time: 0.2844  data_time: 0.0030  memory: 3806  loss: 1.3016  loss_rpn_cls: 0.0275  loss_rpn_bbox: 0.0128  loss_cls: 0.2594  acc: 91.7969  loss_grid: 1.0019
05/14 03:48:17 - mmengine - INFO - Epoch(train)  [1][  600/24827]  lr: 3.4788e-03  eta: 1 day, 23:25:43  time: 0.2862  data_time: 0.0031  memory: 3931  loss: 1.2562  loss_rpn_cls: 0.0281  loss_rpn_bbox: 0.0148  loss_cls: 0.2278  acc: 97.1680  loss_grid: 0.9855
05/14 03:48:31 - mmengine - INFO - Epoch(train)  [1][  650/24827]  lr: 3.7483e-03  eta: 1 day, 23:43:43  time: 0.2983  data_time: 0.0031  memory: 4200  loss: 1.3452  loss_rpn_cls: 0.0363  loss_rpn_bbox: 0.0148  loss_cls: 0.3032  acc: 86.3281  loss_grid: 0.9910
05/14 03:48:45 - mmengine - INFO - Epoch(train)  [1][  700/24827]  lr: 4.0178e-03  eta: 1 day, 23:38:39  time: 0.2706  data_time: 0.0030  memory: 3781  loss: 1.2364  loss_rpn_cls: 0.0222  loss_rpn_bbox: 0.0110  loss_cls: 0.2232  acc: 93.9453  loss_grid: 0.9800
05/14 03:48:59 - mmengine - INFO - Epoch(train)  [1][  750/24827]  lr: 4.2873e-03  eta: 1 day, 23:46:11  time: 0.2879  data_time: 0.0030  memory: 3839  loss: 1.2624  loss_rpn_cls: 0.0270  loss_rpn_bbox: 0.0111  loss_cls: 0.2419  acc: 98.1445  loss_grid: 0.9824
05/14 03:49:13 - mmengine - INFO - Epoch(train)  [1][  800/24827]  lr: 4.5568e-03  eta: 1 day, 23:44:32  time: 0.2752  data_time: 0.0030  memory: 3901  loss: 1.2248  loss_rpn_cls: 0.0274  loss_rpn_bbox: 0.0097  loss_cls: 0.2216  acc: 95.2148  loss_grid: 0.9662
05/14 03:49:27 - mmengine - INFO - Epoch(train)  [1][  850/24827]  lr: 4.8264e-03  eta: 1 day, 23:49:40  time: 0.2861  data_time: 0.0041  memory: 3917  loss: 1.2363  loss_rpn_cls: 0.0289  loss_rpn_bbox: 0.0131  loss_cls: 0.2230  acc: 88.7695  loss_grid: 0.9714
05/14 03:49:41 - mmengine - INFO - Epoch(train)  [1][  900/24827]  lr: 5.0959e-03  eta: 1 day, 23:49:13  time: 0.2774  data_time: 0.0031  memory: 3991  loss: 1.2749  loss_rpn_cls: 0.0393  loss_rpn_bbox: 0.0122  loss_cls: 0.2611  acc: 93.5547  loss_grid: 0.9623
05/14 03:49:56 - mmengine - INFO - Epoch(train)  [1][  950/24827]  lr: 5.3654e-03  eta: 1 day, 23:53:02  time: 0.2852  data_time: 0.0030  memory: 3866  loss: 1.2552  loss_rpn_cls: 0.0285  loss_rpn_bbox: 0.0138  loss_cls: 0.2603  acc: 86.8164  loss_grid: 0.9527
05/14 03:50:10 - mmengine - INFO - Exp name: grid_rcnn_r101_voc0712_20240514_034519
05/14 03:50:10 - mmengine - INFO - Epoch(train)  [1][ 1000/24827]  lr: 5.6349e-03  eta: 1 day, 23:54:36  time: 0.2817  data_time: 0.0030  memory: 3996  loss: 1.2951  loss_rpn_cls: 0.0271  loss_rpn_bbox: 0.0112  loss_cls: 0.2866  acc: 96.6797  loss_grid: 0.9703
05/14 03:50:24 - mmengine - INFO - Epoch(train)  [1][ 1050/24827]  lr: 5.9044e-03  eta: 1 day, 23:56:46  time: 0.2832  data_time: 0.0031  memory: 3739  loss: 1.2295  loss_rpn_cls: 0.0237  loss_rpn_bbox: 0.0110  loss_cls: 0.2420  acc: 88.3789  loss_grid: 0.9527
05/14 03:50:38 - mmengine - INFO - Epoch(train)  [1][ 1100/24827]  lr: 6.1739e-03  eta: 1 day, 23:58:35  time: 0.2829  data_time: 0.0031  memory: 3859  loss: 1.2588  loss_rpn_cls: 0.0301  loss_rpn_bbox: 0.0109  loss_cls: 0.2662  acc: 86.6211  loss_grid: 0.9516
05/14 03:50:52 - mmengine - INFO - Epoch(train)  [1][ 1150/24827]  lr: 6.4434e-03  eta: 2 days, 0:00:27  time: 0.2834  data_time: 0.0030  memory: 4064  loss: 1.2015  loss_rpn_cls: 0.0249  loss_rpn_bbox: 0.0140  loss_cls: 0.2226  acc: 94.2383  loss_grid: 0.9400
05/14 03:51:07 - mmengine - INFO - Epoch(train)  [1][ 1200/24827]  lr: 6.7130e-03  eta: 2 days, 0:06:13  time: 0.2929  data_time: 0.0032  memory: 4310  loss: 1.2153  loss_rpn_cls: 0.0240  loss_rpn_bbox: 0.0108  loss_cls: 0.2438  acc: 95.7031  loss_grid: 0.9368
05/14 03:51:22 - mmengine - INFO - Epoch(train)  [1][ 1250/24827]  lr: 6.9825e-03  eta: 2 days, 0:17:35  time: 0.3077  data_time: 0.0031  memory: 3948  loss: 1.2365  loss_rpn_cls: 0.0290  loss_rpn_bbox: 0.0140  loss_cls: 0.2564  acc: 96.5820  loss_grid: 0.9371
05/14 03:51:37 - mmengine - INFO - Epoch(train)  [1][ 1300/24827]  lr: 7.2520e-03  eta: 2 days, 0:23:44  time: 0.2967  data_time: 0.0030  memory: 4313  loss: 1.2212  loss_rpn_cls: 0.0263  loss_rpn_bbox: 0.0107  loss_cls: 0.2532  acc: 95.6055  loss_grid: 0.9311
05/14 03:51:51 - mmengine - INFO - Epoch(train)  [1][ 1350/24827]  lr: 7.5215e-03  eta: 2 days, 0:26:26  time: 0.2890  data_time: 0.0029  memory: 4049  loss: 1.2088  loss_rpn_cls: 0.0252  loss_rpn_bbox: 0.0117  loss_cls: 0.2369  acc: 91.3086  loss_grid: 0.9351
05/14 03:52:06 - mmengine - INFO - Epoch(train)  [1][ 1400/24827]  lr: 7.7910e-03  eta: 2 days, 0:29:04  time: 0.2894  data_time: 0.0030  memory: 4079  loss: 1.1863  loss_rpn_cls: 0.0258  loss_rpn_bbox: 0.0117  loss_cls: 0.2172  acc: 95.4102  loss_grid: 0.9316
05/14 03:52:21 - mmengine - INFO - Epoch(train)  [1][ 1450/24827]  lr: 8.0605e-03  eta: 2 days, 0:35:01  time: 0.2992  data_time: 0.0030  memory: 4067  loss: 1.1875  loss_rpn_cls: 0.0207  loss_rpn_bbox: 0.0092  loss_cls: 0.2406  acc: 98.0469  loss_grid: 0.9169
05/14 03:52:35 - mmengine - INFO - Epoch(train)  [1][ 1500/24827]  lr: 8.3300e-03  eta: 2 days, 0:33:17  time: 0.2781  data_time: 0.0030  memory: 4099  loss: 1.1568  loss_rpn_cls: 0.0243  loss_rpn_bbox: 0.0118  loss_cls: 0.2114  acc: 94.1406  loss_grid: 0.9093
05/14 03:52:50 - mmengine - INFO - Epoch(train)  [1][ 1550/24827]  lr: 8.5995e-03  eta: 2 days, 0:39:16  time: 0.3010  data_time: 0.0033  memory: 4040  loss: 1.2330  loss_rpn_cls: 0.0287  loss_rpn_bbox: 0.0134  loss_cls: 0.2645  acc: 96.0938  loss_grid: 0.9265
submitit WARNING (2024-05-14 03:53:04,442) - Bypassing signal SIGCONT
submitit ERROR (2024-05-14 03:53:04,445) - Submitted job triggered an exception

============================= JOB FEEDBACK =============================

NodeName=uc2n482
Job ID: 23594866
Cluster: uc2
User/Group: ma_ruweber/ma_ma
State: FAILED (exit code 1)
Nodes: 1
Cores per node: 10
CPU Utilized: 00:08:10
CPU Efficiency: 9.80% of 01:23:20 core-walltime
Job Wall-clock time: 00:08:20
Memory Utilized: 1.68 GB
Memory Efficiency: 1.83% of 91.80 GB
