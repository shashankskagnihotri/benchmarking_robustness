submitit INFO (2024-05-14 04:27:47,961) - Starting with JobEnvironment(job_id=23594909, hostname=uc2n483.localdomain, local_rank=0(1), node=0(1), global_rank=0(1))
submitit INFO (2024-05-14 04:27:47,961) - Loading pickle: /pfs/work7/workspace/scratch/ma_ruweber-team_project_fss2024/benchmarking_robustness/object_detection/slurm/work_dir/Detic_convnext-b_voc0712/23594909_submitted.pkl
05/14 04:27:53 - mmengine - INFO - 
------------------------------------------------------------
System environment:
    sys.platform: linux
    Python: 3.10.13 (main, Sep 11 2023, 13:44:35) [GCC 11.2.0]
    CUDA available: True
    MUSA available: False
    numpy_random_seed: 620889148
    GPU 0: Tesla V100-SXM2-32GB
    CUDA_HOME: /opt/bwhpc/common/devel/cuda/11.8
    NVCC: Cuda compilation tools, release 11.8, V11.8.89
    GCC: gcc (GCC) 8.5.0 20210514 (Red Hat 8.5.0-10)
    PyTorch: 2.1.2
    PyTorch compiling details: PyTorch built with:
  - GCC 9.3
  - C++ Version: 201703
  - Intel(R) oneAPI Math Kernel Library Version 2023.1-Product Build 20230303 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v3.1.1 (Git Hash 64f6bcbcbab628e96f33a62c3e975f8535a7bde4)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - LAPACK is enabled (usually provided by MKL)
  - NNPACK is enabled
  - CPU capability usage: AVX512
  - CUDA Runtime 11.8
  - NVCC architecture flags: -gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_61,code=sm_61;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86;-gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_90,code=sm_90;-gencode;arch=compute_37,code=compute_37
  - CuDNN 8.7
  - Magma 2.6.1
  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.8, CUDNN_VERSION=8.7.0, CXX_COMPILER=/opt/rh/devtoolset-9/root/usr/bin/c++, CXX_FLAGS= -D_GLIBCXX_USE_CXX11_ABI=0 -fabi-version=11 -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -DNDEBUG -DUSE_KINETO -DLIBKINETO_NOROCTRACER -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -O2 -fPIC -Wall -Wextra -Werror=return-type -Werror=non-virtual-dtor -Werror=bool-operation -Wnarrowing -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-unused-parameter -Wno-unused-function -Wno-unused-result -Wno-strict-overflow -Wno-strict-aliasing -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=old-style-cast -Wno-invalid-partial-specialization -Wno-unused-private-field -Wno-aligned-allocation-unavailable -Wno-missing-braces -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Werror=cast-function-type -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_DISABLE_GPU_ASSERTS=ON, TORCH_VERSION=2.1.2, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, USE_ROCM=OFF, 

    TorchVision: 0.16.2
    OpenCV: 4.9.0
    MMEngine: 0.10.3

Runtime environment:
    cudnn_benchmark: False
    dist_cfg: {'backend': 'nccl'}
    mp_cfg: {'mp_start_method': 'fork', 'opencv_num_threads': 0}
    seed: 620889148
    Distributed launcher: none
    Distributed training: False
    GPU number: 1
------------------------------------------------------------

05/14 04:27:53 - mmengine - INFO - Config:
auto_scale_lr = dict(base_batch_size=64)
backend = 'pillow'
backend_args = None
batch_augments = [
    dict(size=(
        1024,
        1024,
    ), type='BatchFixedSizePad'),
]
cls_layer = dict(
    norm_temperature=50.0,
    norm_weight=True,
    type='ZeroShotClassifier',
    use_bias=0.0,
    zs_weight_dim=512,
    zs_weight_path='rand')
custom_imports = dict(
    allow_failed_imports=False, imports=[
        'projects.Detic.detic',
    ])
data_root = 'data/VOCdevkit/'
dataset_type = 'VOCDataset'
default_hooks = dict(
    checkpoint=dict(
        _scope_='mmdet', interval=1, max_keep_ckpts=2, type='CheckpointHook'),
    logger=dict(_scope_='mmdet', interval=50, type='LoggerHook'),
    param_scheduler=dict(_scope_='mmdet', type='ParamSchedulerHook'),
    sampler_seed=dict(_scope_='mmdet', type='DistSamplerSeedHook'),
    timer=dict(_scope_='mmdet', type='IterTimerHook'),
    visualization=dict(_scope_='mmdet', type='DetVisualizationHook'))
default_scope = 'mmdet'
env_cfg = dict(
    cudnn_benchmark=False,
    dist_cfg=dict(backend='nccl'),
    mp_cfg=dict(mp_start_method='fork', opencv_num_threads=0))
image_size = (
    1024,
    1024,
)
launcher = 'none'
load_from = None
log_level = 'INFO'
log_processor = dict(
    _scope_='mmdet', by_epoch=True, type='LogProcessor', window_size=50)
max_epochs = 25
model = dict(
    backbone=dict(
        arch='base',
        drop_path_rate=0.7,
        gap_before_final_norm=False,
        init_cfg=dict(
            checkpoint=
            'https://download.openmmlab.com/mmclassification/v0/convnext/convnext-base_in21k-pre-3rdparty_in1k-384px_20221219-4570f792.pth',
            prefix='backbone.',
            type='Pretrained'),
        layer_scale_init_value=1.0,
        out_indices=[
            1,
            2,
            3,
        ],
        type='mmpretrain.ConvNeXt',
        with_cp=True),
    data_preprocessor=dict(
        batch_augments=[
            dict(size=(
                1024,
                1024,
            ), type='BatchFixedSizePad'),
        ],
        bgr_to_rgb=True,
        mean=[
            123.675,
            116.28,
            103.53,
        ],
        pad_size_divisor=32,
        std=[
            58.395,
            57.12,
            57.375,
        ],
        type='DetDataPreprocessor'),
    neck=dict(
        add_extra_convs='on_output',
        in_channels=[
            256,
            512,
            1024,
        ],
        init_cfg=dict(layer='Conv2d', type='Caffe2Xavier'),
        num_outs=5,
        out_channels=256,
        relu_before_extra_convs=True,
        start_level=0,
        type='FPN'),
    roi_head=dict(
        bbox_head=[
            dict(
                bbox_coder=dict(
                    target_means=[
                        0.0,
                        0.0,
                        0.0,
                        0.0,
                    ],
                    target_stds=[
                        0.1,
                        0.1,
                        0.2,
                        0.2,
                    ],
                    type='DeltaXYWHBBoxCoder'),
                cls_predictor_cfg=dict(
                    norm_temperature=50.0,
                    norm_weight=True,
                    type='ZeroShotClassifier',
                    use_bias=0.0,
                    zs_weight_dim=512,
                    zs_weight_path='rand'),
                fc_out_channels=1024,
                in_channels=256,
                loss_bbox=dict(beta=1.0, loss_weight=1.0, type='SmoothL1Loss'),
                loss_cls=dict(
                    loss_weight=1.0, type='CrossEntropyLoss',
                    use_sigmoid=True),
                num_classes=22047,
                reg_class_agnostic=True,
                reg_predictor_cfg=[
                    dict(in_features=1024, out_features=1024, type='Linear'),
                    dict(inplace=True, type='ReLU'),
                    dict(in_features=1024, out_features=4, type='Linear'),
                ],
                roi_feat_size=7,
                type='DeticBBoxHead'),
            dict(
                bbox_coder=dict(
                    target_means=[
                        0.0,
                        0.0,
                        0.0,
                        0.0,
                    ],
                    target_stds=[
                        0.05,
                        0.05,
                        0.1,
                        0.1,
                    ],
                    type='DeltaXYWHBBoxCoder'),
                cls_predictor_cfg=dict(
                    norm_temperature=50.0,
                    norm_weight=True,
                    type='ZeroShotClassifier',
                    use_bias=0.0,
                    zs_weight_dim=512,
                    zs_weight_path='rand'),
                fc_out_channels=1024,
                in_channels=256,
                loss_bbox=dict(beta=1.0, loss_weight=1.0, type='SmoothL1Loss'),
                loss_cls=dict(
                    loss_weight=1.0, type='CrossEntropyLoss',
                    use_sigmoid=True),
                num_classes=22047,
                reg_class_agnostic=True,
                reg_predictor_cfg=[
                    dict(in_features=1024, out_features=1024, type='Linear'),
                    dict(inplace=True, type='ReLU'),
                    dict(in_features=1024, out_features=4, type='Linear'),
                ],
                roi_feat_size=7,
                type='DeticBBoxHead'),
            dict(
                bbox_coder=dict(
                    target_means=[
                        0.0,
                        0.0,
                        0.0,
                        0.0,
                    ],
                    target_stds=[
                        0.033,
                        0.033,
                        0.067,
                        0.067,
                    ],
                    type='DeltaXYWHBBoxCoder'),
                cls_predictor_cfg=dict(
                    norm_temperature=50.0,
                    norm_weight=True,
                    type='ZeroShotClassifier',
                    use_bias=0.0,
                    zs_weight_dim=512,
                    zs_weight_path='rand'),
                fc_out_channels=1024,
                in_channels=256,
                loss_bbox=dict(beta=1.0, loss_weight=1.0, type='SmoothL1Loss'),
                loss_cls=dict(
                    loss_weight=1.0, type='CrossEntropyLoss',
                    use_sigmoid=True),
                num_classes=22047,
                reg_class_agnostic=True,
                reg_predictor_cfg=[
                    dict(in_features=1024, out_features=1024, type='Linear'),
                    dict(inplace=True, type='ReLU'),
                    dict(in_features=1024, out_features=4, type='Linear'),
                ],
                roi_feat_size=7,
                type='DeticBBoxHead'),
        ],
        bbox_roi_extractor=dict(
            featmap_strides=[
                8,
                16,
                32,
            ],
            finest_scale=112,
            out_channels=256,
            roi_layer=dict(
                output_size=7,
                sampling_ratio=0,
                type='RoIAlign',
                use_torchvision=True),
            type='SingleRoIExtractor'),
        mask_head=dict(
            class_agnostic=True,
            conv_out_channels=256,
            in_channels=256,
            loss_mask=dict(
                loss_weight=1.0, type='CrossEntropyLoss', use_mask=True),
            num_classes=22047,
            num_convs=4,
            type='FCNMaskHead'),
        mask_roi_extractor=dict(
            featmap_strides=[
                8,
                16,
                32,
            ],
            finest_scale=112,
            out_channels=256,
            roi_layer=dict(output_size=14, sampling_ratio=0, type='RoIAlign'),
            type='SingleRoIExtractor'),
        num_stages=3,
        stage_loss_weights=[
            1,
            0.5,
            0.25,
        ],
        type='DeticRoIHead'),
    rpn_head=dict(
        conv_bias=True,
        feat_channels=256,
        in_channels=256,
        loss_bbox=dict(loss_weight=2.0, type='GIoULoss'),
        loss_cls=dict(
            loss_weight=1.0,
            neg_weight=0.75,
            pos_weight=0.25,
            type='GaussianFocalLoss'),
        norm_cfg=dict(num_groups=32, requires_grad=True, type='GN'),
        num_classes=1,
        stacked_convs=4,
        strides=[
            8,
            16,
            32,
            64,
            128,
        ],
        type='CenterNetRPNHead'),
    test_cfg=dict(
        rcnn=dict(
            mask_thr_binary=0.5,
            max_per_img=300,
            nms=dict(iou_threshold=0.5, type='nms'),
            score_thr=0.02),
        rpn=dict(
            max_per_img=256,
            min_bbox_size=0,
            nms=dict(iou_threshold=0.9, type='nms'),
            nms_pre=1000,
            score_thr=0.0001)),
    train_cfg=dict(
        rcnn=[
            dict(
                assigner=dict(
                    ignore_iof_thr=-1,
                    match_low_quality=False,
                    min_pos_iou=0.6,
                    neg_iou_thr=0.6,
                    pos_iou_thr=0.6,
                    type='MaxIoUAssigner'),
                debug=False,
                mask_size=28,
                pos_weight=-1,
                sampler=dict(
                    add_gt_as_proposals=True,
                    neg_pos_ub=-1,
                    num=512,
                    pos_fraction=0.25,
                    type='RandomSampler')),
            dict(
                assigner=dict(
                    ignore_iof_thr=-1,
                    match_low_quality=False,
                    min_pos_iou=0.7,
                    neg_iou_thr=0.7,
                    pos_iou_thr=0.7,
                    type='MaxIoUAssigner'),
                debug=False,
                mask_size=28,
                pos_weight=-1,
                sampler=dict(
                    add_gt_as_proposals=True,
                    neg_pos_ub=-1,
                    num=512,
                    pos_fraction=0.25,
                    type='RandomSampler')),
            dict(
                assigner=dict(
                    ignore_iof_thr=-1,
                    match_low_quality=False,
                    min_pos_iou=0.8,
                    neg_iou_thr=0.8,
                    pos_iou_thr=0.8,
                    type='MaxIoUAssigner'),
                debug=False,
                mask_size=28,
                pos_weight=-1,
                sampler=dict(
                    add_gt_as_proposals=True,
                    neg_pos_ub=-1,
                    num=512,
                    pos_fraction=0.25,
                    type='RandomSampler')),
        ],
        rpn=dict(
            allowed_border=0,
            assigner=dict(
                ignore_iof_thr=-1,
                match_low_quality=True,
                min_pos_iou=0.3,
                neg_iou_thr=0.3,
                pos_iou_thr=0.7,
                type='MaxIoUAssigner'),
            debug=False,
            pos_weight=-1,
            sampler=dict(
                add_gt_as_proposals=False,
                neg_pos_ub=-1,
                num=256,
                pos_fraction=0.5,
                type='RandomSampler')),
        rpn_proposal=dict(
            max_per_img=2000,
            min_bbox_size=0,
            nms=dict(iou_threshold=0.7, type='nms'),
            nms_pre=2000)),
    type='CascadeRCNN')
num_classes = 22047
optim_wrapper = dict(
    _scope_='mmdet',
    optimizer=dict(lr=0.04, momentum=0.9, type='SGD', weight_decay=4e-05),
    paramwise_cfg=dict(norm_decay_mult=0.0),
    type='AmpOptimWrapper')
param_scheduler = [
    dict(
        begin=0,
        by_epoch=False,
        end=4000,
        start_factor=0.00025,
        type='LinearLR'),
    dict(
        begin=0,
        by_epoch=True,
        end=25,
        gamma=0.1,
        milestones=[
            22,
            24,
        ],
        type='MultiStepLR'),
]
reg_layer = [
    dict(in_features=1024, out_features=1024, type='Linear'),
    dict(inplace=True, type='ReLU'),
    dict(in_features=1024, out_features=4, type='Linear'),
]
resume = False
test_cfg = dict(_scope_='mmdet', type='TestLoop')
test_dataloader = dict(
    batch_size=1,
    dataset=dict(
        ann_file='VOC2007/ImageSets/Main/test.txt',
        backend_args=None,
        data_prefix=dict(sub_data_root='VOC2007/'),
        data_root='data/VOCdevkit/',
        pipeline=[
            dict(backend_args=None, type='LoadImageFromFile'),
            dict(keep_ratio=True, scale=(
                1000,
                600,
            ), type='Resize'),
            dict(type='LoadAnnotations', with_bbox=True),
            dict(
                meta_keys=(
                    'img_id',
                    'img_path',
                    'ori_shape',
                    'img_shape',
                    'scale_factor',
                ),
                type='PackDetInputs'),
        ],
        test_mode=True,
        type='VOCDataset'),
    drop_last=False,
    num_workers=2,
    persistent_workers=True,
    sampler=dict(shuffle=False, type='DefaultSampler'))
test_evaluator = dict(eval_mode='11points', metric='mAP', type='VOCMetric')
test_pipeline = [
    dict(backend_args=None, type='LoadImageFromFile'),
    dict(keep_ratio=True, scale=(
        1000,
        600,
    ), type='Resize'),
    dict(type='LoadAnnotations', with_bbox=True),
    dict(
        meta_keys=(
            'img_id',
            'img_path',
            'ori_shape',
            'img_shape',
            'scale_factor',
        ),
        type='PackDetInputs'),
]
train_cfg = dict(
    _scope_='mmdet', max_epochs=25, type='EpochBasedTrainLoop', val_interval=5)
train_dataloader = dict(
    batch_sampler=dict(type='AspectRatioBatchSampler'),
    batch_size=2,
    dataset=dict(
        dataset=dict(
            datasets=[
                dict(
                    ann_file='VOC2007/ImageSets/Main/trainval.txt',
                    backend_args=None,
                    data_prefix=dict(sub_data_root='VOC2007/'),
                    data_root='data/VOCdevkit/',
                    filter_cfg=dict(
                        bbox_min_size=32, filter_empty_gt=True, min_size=32),
                    pipeline=[
                        dict(backend_args=None, type='LoadImageFromFile'),
                        dict(type='LoadAnnotations', with_bbox=True),
                        dict(
                            keep_ratio=True,
                            scale=(
                                1000,
                                600,
                            ),
                            type='Resize'),
                        dict(prob=0.5, type='RandomFlip'),
                        dict(type='PackDetInputs'),
                    ],
                    type='VOCDataset'),
                dict(
                    ann_file='VOC2012/ImageSets/Main/trainval.txt',
                    backend_args=None,
                    data_prefix=dict(sub_data_root='VOC2012/'),
                    data_root='data/VOCdevkit/',
                    filter_cfg=dict(
                        bbox_min_size=32, filter_empty_gt=True, min_size=32),
                    pipeline=[
                        dict(backend_args=None, type='LoadImageFromFile'),
                        dict(type='LoadAnnotations', with_bbox=True),
                        dict(
                            keep_ratio=True,
                            scale=(
                                1000,
                                600,
                            ),
                            type='Resize'),
                        dict(prob=0.5, type='RandomFlip'),
                        dict(type='PackDetInputs'),
                    ],
                    type='VOCDataset'),
            ],
            ignore_keys=[
                'dataset_type',
            ],
            type='ConcatDataset'),
        times=3,
        type='RepeatDataset'),
    num_workers=2,
    persistent_workers=True,
    sampler=dict(shuffle=True, type='DefaultSampler'))
train_pipeline = [
    dict(backend_args=None, type='LoadImageFromFile'),
    dict(type='LoadAnnotations', with_bbox=True),
    dict(keep_ratio=True, scale=(
        1000,
        600,
    ), type='Resize'),
    dict(prob=0.5, type='RandomFlip'),
    dict(type='PackDetInputs'),
]
val_cfg = dict(_scope_='mmdet', type='ValLoop')
val_dataloader = dict(
    batch_size=1,
    dataset=dict(
        ann_file='VOC2007/ImageSets/Main/test.txt',
        backend_args=None,
        data_prefix=dict(sub_data_root='VOC2007/'),
        data_root='data/VOCdevkit/',
        pipeline=[
            dict(backend_args=None, type='LoadImageFromFile'),
            dict(keep_ratio=True, scale=(
                1000,
                600,
            ), type='Resize'),
            dict(type='LoadAnnotations', with_bbox=True),
            dict(
                meta_keys=(
                    'img_id',
                    'img_path',
                    'ori_shape',
                    'img_shape',
                    'scale_factor',
                ),
                type='PackDetInputs'),
        ],
        test_mode=True,
        type='VOCDataset'),
    drop_last=False,
    num_workers=2,
    persistent_workers=True,
    sampler=dict(shuffle=False, type='DefaultSampler'))
val_evaluator = dict(eval_mode='11points', metric='mAP', type='VOCMetric')
vis_backends = [
    dict(_scope_='mmdet', type='LocalVisBackend'),
]
visualizer = dict(
    _scope_='mmdet',
    name='visualizer',
    type='DetLocalVisualizer',
    vis_backends=[
        dict(type='LocalVisBackend'),
    ])
work_dir = 'slurm/results/Detic_convnext-b_voc0712'

05/14 04:27:57 - mmengine - INFO - Distributed training is not used, all SyncBatchNorm (SyncBN) layers in the model will be automatically reverted to BatchNormXd layers if they are used.
05/14 04:27:57 - mmengine - INFO - Hooks will be executed in the following order:
before_run:
(VERY_HIGH   ) RuntimeInfoHook                    
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
before_train:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_train_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(NORMAL      ) DistSamplerSeedHook                
 -------------------- 
before_train_iter:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_train_iter:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
after_train_epoch:
(NORMAL      ) IterTimerHook                      
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_val:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
before_val_epoch:
(NORMAL      ) IterTimerHook                      
 -------------------- 
before_val_iter:
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_val_iter:
(NORMAL      ) IterTimerHook                      
(NORMAL      ) DetVisualizationHook               
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_val_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
after_val:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
after_train:
(VERY_HIGH   ) RuntimeInfoHook                    
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_test:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
before_test_epoch:
(NORMAL      ) IterTimerHook                      
 -------------------- 
before_test_iter:
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_test_iter:
(NORMAL      ) IterTimerHook                      
(NORMAL      ) DetVisualizationHook               
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_test_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_test:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
after_run:
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
05/14 04:28:03 - mmengine - INFO - paramwise_options -- backbone.downsample_layers.0.1.weight:weight_decay=0.0
05/14 04:28:03 - mmengine - INFO - paramwise_options -- backbone.downsample_layers.0.1.bias:weight_decay=0.0
05/14 04:28:03 - mmengine - INFO - paramwise_options -- backbone.downsample_layers.1.0.weight:weight_decay=0.0
05/14 04:28:03 - mmengine - INFO - paramwise_options -- backbone.downsample_layers.1.0.bias:weight_decay=0.0
05/14 04:28:03 - mmengine - INFO - paramwise_options -- backbone.downsample_layers.2.0.weight:weight_decay=0.0
05/14 04:28:03 - mmengine - INFO - paramwise_options -- backbone.downsample_layers.2.0.bias:weight_decay=0.0
05/14 04:28:03 - mmengine - INFO - paramwise_options -- backbone.downsample_layers.3.0.weight:weight_decay=0.0
05/14 04:28:03 - mmengine - INFO - paramwise_options -- backbone.downsample_layers.3.0.bias:weight_decay=0.0
05/14 04:28:03 - mmengine - INFO - paramwise_options -- backbone.stages.0.0.norm.weight:weight_decay=0.0
05/14 04:28:03 - mmengine - INFO - paramwise_options -- backbone.stages.0.0.norm.bias:weight_decay=0.0
05/14 04:28:03 - mmengine - INFO - paramwise_options -- backbone.stages.0.1.norm.weight:weight_decay=0.0
05/14 04:28:03 - mmengine - INFO - paramwise_options -- backbone.stages.0.1.norm.bias:weight_decay=0.0
05/14 04:28:03 - mmengine - INFO - paramwise_options -- backbone.stages.0.2.norm.weight:weight_decay=0.0
05/14 04:28:03 - mmengine - INFO - paramwise_options -- backbone.stages.0.2.norm.bias:weight_decay=0.0
05/14 04:28:03 - mmengine - INFO - paramwise_options -- backbone.stages.1.0.norm.weight:weight_decay=0.0
05/14 04:28:03 - mmengine - INFO - paramwise_options -- backbone.stages.1.0.norm.bias:weight_decay=0.0
05/14 04:28:03 - mmengine - INFO - paramwise_options -- backbone.stages.1.1.norm.weight:weight_decay=0.0
05/14 04:28:03 - mmengine - INFO - paramwise_options -- backbone.stages.1.1.norm.bias:weight_decay=0.0
05/14 04:28:03 - mmengine - INFO - paramwise_options -- backbone.stages.1.2.norm.weight:weight_decay=0.0
05/14 04:28:03 - mmengine - INFO - paramwise_options -- backbone.stages.1.2.norm.bias:weight_decay=0.0
05/14 04:28:03 - mmengine - INFO - paramwise_options -- backbone.stages.2.0.norm.weight:weight_decay=0.0
05/14 04:28:03 - mmengine - INFO - paramwise_options -- backbone.stages.2.0.norm.bias:weight_decay=0.0
05/14 04:28:03 - mmengine - INFO - paramwise_options -- backbone.stages.2.1.norm.weight:weight_decay=0.0
05/14 04:28:03 - mmengine - INFO - paramwise_options -- backbone.stages.2.1.norm.bias:weight_decay=0.0
05/14 04:28:03 - mmengine - INFO - paramwise_options -- backbone.stages.2.2.norm.weight:weight_decay=0.0
05/14 04:28:03 - mmengine - INFO - paramwise_options -- backbone.stages.2.2.norm.bias:weight_decay=0.0
05/14 04:28:03 - mmengine - INFO - paramwise_options -- backbone.stages.2.3.norm.weight:weight_decay=0.0
05/14 04:28:03 - mmengine - INFO - paramwise_options -- backbone.stages.2.3.norm.bias:weight_decay=0.0
05/14 04:28:03 - mmengine - INFO - paramwise_options -- backbone.stages.2.4.norm.weight:weight_decay=0.0
05/14 04:28:03 - mmengine - INFO - paramwise_options -- backbone.stages.2.4.norm.bias:weight_decay=0.0
05/14 04:28:03 - mmengine - INFO - paramwise_options -- backbone.stages.2.5.norm.weight:weight_decay=0.0
05/14 04:28:03 - mmengine - INFO - paramwise_options -- backbone.stages.2.5.norm.bias:weight_decay=0.0
05/14 04:28:03 - mmengine - INFO - paramwise_options -- backbone.stages.2.6.norm.weight:weight_decay=0.0
05/14 04:28:03 - mmengine - INFO - paramwise_options -- backbone.stages.2.6.norm.bias:weight_decay=0.0
05/14 04:28:03 - mmengine - INFO - paramwise_options -- backbone.stages.2.7.norm.weight:weight_decay=0.0
05/14 04:28:03 - mmengine - INFO - paramwise_options -- backbone.stages.2.7.norm.bias:weight_decay=0.0
05/14 04:28:03 - mmengine - INFO - paramwise_options -- backbone.stages.2.8.norm.weight:weight_decay=0.0
05/14 04:28:03 - mmengine - INFO - paramwise_options -- backbone.stages.2.8.norm.bias:weight_decay=0.0
05/14 04:28:03 - mmengine - INFO - paramwise_options -- backbone.stages.2.9.norm.weight:weight_decay=0.0
05/14 04:28:03 - mmengine - INFO - paramwise_options -- backbone.stages.2.9.norm.bias:weight_decay=0.0
05/14 04:28:03 - mmengine - INFO - paramwise_options -- backbone.stages.2.10.norm.weight:weight_decay=0.0
05/14 04:28:03 - mmengine - INFO - paramwise_options -- backbone.stages.2.10.norm.bias:weight_decay=0.0
05/14 04:28:03 - mmengine - INFO - paramwise_options -- backbone.stages.2.11.norm.weight:weight_decay=0.0
05/14 04:28:03 - mmengine - INFO - paramwise_options -- backbone.stages.2.11.norm.bias:weight_decay=0.0
05/14 04:28:03 - mmengine - INFO - paramwise_options -- backbone.stages.2.12.norm.weight:weight_decay=0.0
05/14 04:28:03 - mmengine - INFO - paramwise_options -- backbone.stages.2.12.norm.bias:weight_decay=0.0
05/14 04:28:03 - mmengine - INFO - paramwise_options -- backbone.stages.2.13.norm.weight:weight_decay=0.0
05/14 04:28:03 - mmengine - INFO - paramwise_options -- backbone.stages.2.13.norm.bias:weight_decay=0.0
05/14 04:28:03 - mmengine - INFO - paramwise_options -- backbone.stages.2.14.norm.weight:weight_decay=0.0
05/14 04:28:03 - mmengine - INFO - paramwise_options -- backbone.stages.2.14.norm.bias:weight_decay=0.0
05/14 04:28:03 - mmengine - INFO - paramwise_options -- backbone.stages.2.15.norm.weight:weight_decay=0.0
05/14 04:28:03 - mmengine - INFO - paramwise_options -- backbone.stages.2.15.norm.bias:weight_decay=0.0
05/14 04:28:03 - mmengine - INFO - paramwise_options -- backbone.stages.2.16.norm.weight:weight_decay=0.0
05/14 04:28:03 - mmengine - INFO - paramwise_options -- backbone.stages.2.16.norm.bias:weight_decay=0.0
05/14 04:28:03 - mmengine - INFO - paramwise_options -- backbone.stages.2.17.norm.weight:weight_decay=0.0
05/14 04:28:03 - mmengine - INFO - paramwise_options -- backbone.stages.2.17.norm.bias:weight_decay=0.0
05/14 04:28:03 - mmengine - INFO - paramwise_options -- backbone.stages.2.18.norm.weight:weight_decay=0.0
05/14 04:28:03 - mmengine - INFO - paramwise_options -- backbone.stages.2.18.norm.bias:weight_decay=0.0
05/14 04:28:03 - mmengine - INFO - paramwise_options -- backbone.stages.2.19.norm.weight:weight_decay=0.0
05/14 04:28:03 - mmengine - INFO - paramwise_options -- backbone.stages.2.19.norm.bias:weight_decay=0.0
05/14 04:28:03 - mmengine - INFO - paramwise_options -- backbone.stages.2.20.norm.weight:weight_decay=0.0
05/14 04:28:03 - mmengine - INFO - paramwise_options -- backbone.stages.2.20.norm.bias:weight_decay=0.0
05/14 04:28:03 - mmengine - INFO - paramwise_options -- backbone.stages.2.21.norm.weight:weight_decay=0.0
05/14 04:28:03 - mmengine - INFO - paramwise_options -- backbone.stages.2.21.norm.bias:weight_decay=0.0
05/14 04:28:03 - mmengine - INFO - paramwise_options -- backbone.stages.2.22.norm.weight:weight_decay=0.0
05/14 04:28:03 - mmengine - INFO - paramwise_options -- backbone.stages.2.22.norm.bias:weight_decay=0.0
05/14 04:28:03 - mmengine - INFO - paramwise_options -- backbone.stages.2.23.norm.weight:weight_decay=0.0
05/14 04:28:03 - mmengine - INFO - paramwise_options -- backbone.stages.2.23.norm.bias:weight_decay=0.0
05/14 04:28:03 - mmengine - INFO - paramwise_options -- backbone.stages.2.24.norm.weight:weight_decay=0.0
05/14 04:28:03 - mmengine - INFO - paramwise_options -- backbone.stages.2.24.norm.bias:weight_decay=0.0
05/14 04:28:03 - mmengine - INFO - paramwise_options -- backbone.stages.2.25.norm.weight:weight_decay=0.0
05/14 04:28:03 - mmengine - INFO - paramwise_options -- backbone.stages.2.25.norm.bias:weight_decay=0.0
05/14 04:28:03 - mmengine - INFO - paramwise_options -- backbone.stages.2.26.norm.weight:weight_decay=0.0
05/14 04:28:03 - mmengine - INFO - paramwise_options -- backbone.stages.2.26.norm.bias:weight_decay=0.0
05/14 04:28:03 - mmengine - INFO - paramwise_options -- backbone.stages.3.0.norm.weight:weight_decay=0.0
05/14 04:28:03 - mmengine - INFO - paramwise_options -- backbone.stages.3.0.norm.bias:weight_decay=0.0
05/14 04:28:03 - mmengine - INFO - paramwise_options -- backbone.stages.3.1.norm.weight:weight_decay=0.0
05/14 04:28:03 - mmengine - INFO - paramwise_options -- backbone.stages.3.1.norm.bias:weight_decay=0.0
05/14 04:28:03 - mmengine - INFO - paramwise_options -- backbone.stages.3.2.norm.weight:weight_decay=0.0
05/14 04:28:03 - mmengine - INFO - paramwise_options -- backbone.stages.3.2.norm.bias:weight_decay=0.0
05/14 04:28:03 - mmengine - INFO - paramwise_options -- backbone.norm1.weight:weight_decay=0.0
05/14 04:28:03 - mmengine - INFO - paramwise_options -- backbone.norm1.bias:weight_decay=0.0
05/14 04:28:03 - mmengine - INFO - paramwise_options -- backbone.norm2.weight:weight_decay=0.0
05/14 04:28:03 - mmengine - INFO - paramwise_options -- backbone.norm2.bias:weight_decay=0.0
05/14 04:28:03 - mmengine - INFO - paramwise_options -- backbone.norm3.weight:weight_decay=0.0
05/14 04:28:03 - mmengine - INFO - paramwise_options -- backbone.norm3.bias:weight_decay=0.0
05/14 04:28:03 - mmengine - INFO - paramwise_options -- rpn_head.reg_convs.0.gn.weight:weight_decay=0.0
05/14 04:28:03 - mmengine - INFO - paramwise_options -- rpn_head.reg_convs.0.gn.bias:weight_decay=0.0
05/14 04:28:03 - mmengine - INFO - paramwise_options -- rpn_head.reg_convs.1.gn.weight:weight_decay=0.0
05/14 04:28:03 - mmengine - INFO - paramwise_options -- rpn_head.reg_convs.1.gn.bias:weight_decay=0.0
05/14 04:28:03 - mmengine - INFO - paramwise_options -- rpn_head.reg_convs.2.gn.weight:weight_decay=0.0
05/14 04:28:03 - mmengine - INFO - paramwise_options -- rpn_head.reg_convs.2.gn.bias:weight_decay=0.0
05/14 04:28:03 - mmengine - INFO - paramwise_options -- rpn_head.reg_convs.3.gn.weight:weight_decay=0.0
05/14 04:28:03 - mmengine - INFO - paramwise_options -- rpn_head.reg_convs.3.gn.bias:weight_decay=0.0
05/14 04:28:05 - mmengine - INFO - load backbone. in model from: https://download.openmmlab.com/mmclassification/v0/convnext/convnext-base_in21k-pre-3rdparty_in1k-384px_20221219-4570f792.pth
Loads checkpoint by http backend from path: https://download.openmmlab.com/mmclassification/v0/convnext/convnext-base_in21k-pre-3rdparty_in1k-384px_20221219-4570f792.pth
05/14 04:28:05 - mmengine - WARNING - The model and loaded state dict do not match exactly

missing keys in source state_dict: norm1.weight, norm1.bias, norm2.weight, norm2.bias

05/14 04:28:05 - mmengine - WARNING - "FileClient" will be deprecated in future. Please use io functions in https://mmengine.readthedocs.io/en/latest/api/fileio.html#file-io
05/14 04:28:05 - mmengine - WARNING - "HardDiskBackend" is the alias of "LocalBackend" and the former will be deprecated in future.
05/14 04:28:05 - mmengine - INFO - Checkpoints will be saved to /pfs/work7/workspace/scratch/ma_ruweber-team_project_fss2024/benchmarking_robustness/object_detection/slurm/results/Detic_convnext-b_voc0712.
submitit ERROR (2024-05-14 04:28:06,898) - Submitted job triggered an exception

============================= JOB FEEDBACK =============================

NodeName=uc2n483
Job ID: 23594909
Cluster: uc2
User/Group: ma_ruweber/ma_ma
State: FAILED (exit code 1)
Nodes: 1
Cores per node: 10
CPU Utilized: 00:00:19
CPU Efficiency: 3.73% of 00:08:30 core-walltime
Job Wall-clock time: 00:00:51
Memory Utilized: 1.10 GB
Memory Efficiency: 1.20% of 91.80 GB
