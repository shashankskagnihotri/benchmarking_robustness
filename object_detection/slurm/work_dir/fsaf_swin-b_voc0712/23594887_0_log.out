submitit INFO (2024-05-14 04:07:34,949) - Starting with JobEnvironment(job_id=23594887, hostname=uc2n482.localdomain, local_rank=0(1), node=0(1), global_rank=0(1))
submitit INFO (2024-05-14 04:07:34,949) - Loading pickle: /pfs/work7/workspace/scratch/ma_ruweber-team_project_fss2024/benchmarking_robustness/object_detection/slurm/work_dir/fsaf_swin-b_voc0712/23594887_submitted.pkl
05/14 04:07:39 - mmengine - INFO - 
------------------------------------------------------------
System environment:
    sys.platform: linux
    Python: 3.10.13 (main, Sep 11 2023, 13:44:35) [GCC 11.2.0]
    CUDA available: True
    MUSA available: False
    numpy_random_seed: 521818651
    GPU 0: Tesla V100-SXM2-32GB
    CUDA_HOME: /opt/bwhpc/common/devel/cuda/11.8
    NVCC: Cuda compilation tools, release 11.8, V11.8.89
    GCC: gcc (GCC) 8.5.0 20210514 (Red Hat 8.5.0-10)
    PyTorch: 2.1.2
    PyTorch compiling details: PyTorch built with:
  - GCC 9.3
  - C++ Version: 201703
  - Intel(R) oneAPI Math Kernel Library Version 2023.1-Product Build 20230303 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v3.1.1 (Git Hash 64f6bcbcbab628e96f33a62c3e975f8535a7bde4)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - LAPACK is enabled (usually provided by MKL)
  - NNPACK is enabled
  - CPU capability usage: AVX512
  - CUDA Runtime 11.8
  - NVCC architecture flags: -gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_61,code=sm_61;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86;-gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_90,code=sm_90;-gencode;arch=compute_37,code=compute_37
  - CuDNN 8.7
  - Magma 2.6.1
  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.8, CUDNN_VERSION=8.7.0, CXX_COMPILER=/opt/rh/devtoolset-9/root/usr/bin/c++, CXX_FLAGS= -D_GLIBCXX_USE_CXX11_ABI=0 -fabi-version=11 -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -DNDEBUG -DUSE_KINETO -DLIBKINETO_NOROCTRACER -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -O2 -fPIC -Wall -Wextra -Werror=return-type -Werror=non-virtual-dtor -Werror=bool-operation -Wnarrowing -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-unused-parameter -Wno-unused-function -Wno-unused-result -Wno-strict-overflow -Wno-strict-aliasing -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=old-style-cast -Wno-invalid-partial-specialization -Wno-unused-private-field -Wno-aligned-allocation-unavailable -Wno-missing-braces -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Werror=cast-function-type -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_DISABLE_GPU_ASSERTS=ON, TORCH_VERSION=2.1.2, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, USE_ROCM=OFF, 

    TorchVision: 0.16.2
    OpenCV: 4.9.0
    MMEngine: 0.10.3

Runtime environment:
    cudnn_benchmark: False
    dist_cfg: {'backend': 'nccl'}
    mp_cfg: {'mp_start_method': 'fork', 'opencv_num_threads': 0}
    seed: 521818651
    Distributed launcher: none
    Distributed training: False
    GPU number: 1
------------------------------------------------------------

05/14 04:07:40 - mmengine - INFO - Config:
auto_scale_lr = dict(base_batch_size=16, enable=False)
backend_args = None
data_root = 'data/VOCdevkit/'
dataset_type = 'VOCDataset'
default_hooks = dict(
    checkpoint=dict(interval=1, type='CheckpointHook'),
    logger=dict(interval=50, type='LoggerHook'),
    param_scheduler=dict(type='ParamSchedulerHook'),
    sampler_seed=dict(type='DistSamplerSeedHook'),
    timer=dict(type='IterTimerHook'),
    visualization=dict(type='DetVisualizationHook'))
default_scope = 'mmdet'
env_cfg = dict(
    cudnn_benchmark=False,
    dist_cfg=dict(backend='nccl'),
    mp_cfg=dict(mp_start_method='fork', opencv_num_threads=0))
img_scales = [
    (
        1333,
        800,
    ),
    (
        666,
        400,
    ),
    (
        2000,
        1200,
    ),
]
launcher = 'none'
load_from = None
log_level = 'INFO'
log_processor = dict(by_epoch=True, type='LogProcessor', window_size=50)
model = dict(
    backbone=dict(
        attn_drop_rate=0.0,
        convert_weights=True,
        depths=[
            2,
            2,
            18,
            2,
            1,
        ],
        drop_path_rate=0.3,
        drop_rate=0.0,
        embed_dims=128,
        init_cfg=dict(
            checkpoint=
            'https://github.com/SwinTransformer/storage/releases/download/v1.0.0/swin_base_patch4_window12_384_22k.pth',
            type='Pretrained'),
        mlp_ratio=4,
        num_heads=[
            4,
            8,
            16,
            32,
            64,
        ],
        out_indices=[
            1,
            2,
            3,
            4,
        ],
        patch_norm=True,
        pretrain_img_size=384,
        qk_scale=None,
        qkv_bias=True,
        strides=[
            4,
            2,
            2,
            2,
            2,
        ],
        type='SwinTransformer',
        window_size=12,
        with_cp=True),
    bbox_head=dict(
        anchor_generator=dict(
            octave_base_scale=1,
            ratios=[
                1.0,
            ],
            scales_per_octave=1,
            strides=[
                8,
                16,
                32,
                64,
                128,
            ],
            type='AnchorGenerator'),
        bbox_coder=dict(normalizer=4.0, type='TBLRBBoxCoder'),
        feat_channels=256,
        in_channels=256,
        loss_bbox=dict(
            eps=1e-06, loss_weight=1.0, reduction='none', type='IoULoss'),
        loss_cls=dict(
            alpha=0.25,
            gamma=2.0,
            loss_weight=1.0,
            reduction='none',
            type='FocalLoss',
            use_sigmoid=True),
        num_classes=80,
        reg_decoded_bbox=True,
        stacked_convs=4,
        type='FSAFHead'),
    data_preprocessor=dict(
        bgr_to_rgb=True,
        mean=[
            123.675,
            116.28,
            103.53,
        ],
        pad_size_divisor=32,
        std=[
            58.395,
            57.12,
            57.375,
        ],
        type='DetDataPreprocessor'),
    neck=dict(
        add_extra_convs='on_input',
        in_channels=[
            256,
            512,
            1024,
            2048,
        ],
        num_outs=5,
        out_channels=256,
        start_level=1,
        type='FPN'),
    test_cfg=dict(
        max_per_img=100,
        min_bbox_size=0,
        nms=dict(iou_threshold=0.5, type='nms'),
        nms_pre=1000,
        score_thr=0.05),
    train_cfg=dict(
        allowed_border=-1,
        assigner=dict(
            min_pos_iof=0.01,
            neg_scale=0.2,
            pos_scale=0.2,
            type='CenterRegionAssigner'),
        debug=False,
        pos_weight=-1,
        sampler=dict(type='PseudoSampler')),
    type='FSAF')
optim_wrapper = dict(
    clip_grad=dict(max_norm=10, norm_type=2),
    optimizer=dict(lr=0.01, momentum=0.9, type='SGD', weight_decay=0.0001),
    type='OptimWrapper')
param_scheduler = [
    dict(
        begin=0, by_epoch=False, end=500, start_factor=0.001, type='LinearLR'),
    dict(
        begin=0,
        by_epoch=True,
        end=12,
        gamma=0.1,
        milestones=[
            8,
            11,
        ],
        type='MultiStepLR'),
]
resume = False
test_cfg = dict(type='TestLoop')
test_dataloader = dict(
    batch_size=1,
    dataset=dict(
        ann_file='VOC2007/ImageSets/Main/test.txt',
        backend_args=None,
        data_prefix=dict(sub_data_root='VOC2007/'),
        data_root='data/VOCdevkit/',
        pipeline=[
            dict(backend_args=None, type='LoadImageFromFile'),
            dict(keep_ratio=True, scale=(
                1000,
                600,
            ), type='Resize'),
            dict(type='LoadAnnotations', with_bbox=True),
            dict(
                meta_keys=(
                    'img_id',
                    'img_path',
                    'ori_shape',
                    'img_shape',
                    'scale_factor',
                ),
                type='PackDetInputs'),
        ],
        test_mode=True,
        type='VOCDataset'),
    drop_last=False,
    num_workers=2,
    persistent_workers=True,
    sampler=dict(shuffle=False, type='DefaultSampler'))
test_evaluator = dict(eval_mode='11points', metric='mAP', type='VOCMetric')
test_pipeline = [
    dict(backend_args=None, type='LoadImageFromFile'),
    dict(keep_ratio=True, scale=(
        1000,
        600,
    ), type='Resize'),
    dict(type='LoadAnnotations', with_bbox=True),
    dict(
        meta_keys=(
            'img_id',
            'img_path',
            'ori_shape',
            'img_shape',
            'scale_factor',
        ),
        type='PackDetInputs'),
]
train_cfg = dict(max_epochs=12, type='EpochBasedTrainLoop', val_interval=1)
train_dataloader = dict(
    batch_sampler=dict(type='AspectRatioBatchSampler'),
    batch_size=2,
    dataset=dict(
        dataset=dict(
            datasets=[
                dict(
                    ann_file='VOC2007/ImageSets/Main/trainval.txt',
                    backend_args=None,
                    data_prefix=dict(sub_data_root='VOC2007/'),
                    data_root='data/VOCdevkit/',
                    filter_cfg=dict(
                        bbox_min_size=32, filter_empty_gt=True, min_size=32),
                    pipeline=[
                        dict(backend_args=None, type='LoadImageFromFile'),
                        dict(type='LoadAnnotations', with_bbox=True),
                        dict(
                            keep_ratio=True,
                            scale=(
                                1000,
                                600,
                            ),
                            type='Resize'),
                        dict(prob=0.5, type='RandomFlip'),
                        dict(type='PackDetInputs'),
                    ],
                    type='VOCDataset'),
                dict(
                    ann_file='VOC2012/ImageSets/Main/trainval.txt',
                    backend_args=None,
                    data_prefix=dict(sub_data_root='VOC2012/'),
                    data_root='data/VOCdevkit/',
                    filter_cfg=dict(
                        bbox_min_size=32, filter_empty_gt=True, min_size=32),
                    pipeline=[
                        dict(backend_args=None, type='LoadImageFromFile'),
                        dict(type='LoadAnnotations', with_bbox=True),
                        dict(
                            keep_ratio=True,
                            scale=(
                                1000,
                                600,
                            ),
                            type='Resize'),
                        dict(prob=0.5, type='RandomFlip'),
                        dict(type='PackDetInputs'),
                    ],
                    type='VOCDataset'),
            ],
            ignore_keys=[
                'dataset_type',
            ],
            type='ConcatDataset'),
        times=3,
        type='RepeatDataset'),
    num_workers=2,
    persistent_workers=True,
    sampler=dict(shuffle=True, type='DefaultSampler'))
train_pipeline = [
    dict(backend_args=None, type='LoadImageFromFile'),
    dict(type='LoadAnnotations', with_bbox=True),
    dict(keep_ratio=True, scale=(
        1000,
        600,
    ), type='Resize'),
    dict(prob=0.5, type='RandomFlip'),
    dict(type='PackDetInputs'),
]
tta_model = dict(
    tta_cfg=dict(max_per_img=100, nms=dict(iou_threshold=0.5, type='nms')),
    type='DetTTAModel')
tta_pipeline = [
    dict(backend_args=None, type='LoadImageFromFile'),
    dict(
        transforms=[
            [
                dict(keep_ratio=True, scale=(
                    1333,
                    800,
                ), type='Resize'),
                dict(keep_ratio=True, scale=(
                    666,
                    400,
                ), type='Resize'),
                dict(keep_ratio=True, scale=(
                    2000,
                    1200,
                ), type='Resize'),
            ],
            [
                dict(prob=1.0, type='RandomFlip'),
                dict(prob=0.0, type='RandomFlip'),
            ],
            [
                dict(type='LoadAnnotations', with_bbox=True),
            ],
            [
                dict(
                    meta_keys=(
                        'img_id',
                        'img_path',
                        'ori_shape',
                        'img_shape',
                        'scale_factor',
                        'flip',
                        'flip_direction',
                    ),
                    type='PackDetInputs'),
            ],
        ],
        type='TestTimeAug'),
]
val_cfg = dict(type='ValLoop')
val_dataloader = dict(
    batch_size=1,
    dataset=dict(
        ann_file='VOC2007/ImageSets/Main/test.txt',
        backend_args=None,
        data_prefix=dict(sub_data_root='VOC2007/'),
        data_root='data/VOCdevkit/',
        pipeline=[
            dict(backend_args=None, type='LoadImageFromFile'),
            dict(keep_ratio=True, scale=(
                1000,
                600,
            ), type='Resize'),
            dict(type='LoadAnnotations', with_bbox=True),
            dict(
                meta_keys=(
                    'img_id',
                    'img_path',
                    'ori_shape',
                    'img_shape',
                    'scale_factor',
                ),
                type='PackDetInputs'),
        ],
        test_mode=True,
        type='VOCDataset'),
    drop_last=False,
    num_workers=2,
    persistent_workers=True,
    sampler=dict(shuffle=False, type='DefaultSampler'))
val_evaluator = dict(eval_mode='11points', metric='mAP', type='VOCMetric')
vis_backends = [
    dict(type='LocalVisBackend'),
]
visualizer = dict(
    name='visualizer',
    type='DetLocalVisualizer',
    vis_backends=[
        dict(type='LocalVisBackend'),
    ])
work_dir = 'slurm/results/fsaf_swin-b_voc0712'

05/14 04:07:42 - mmengine - INFO - Distributed training is not used, all SyncBatchNorm (SyncBN) layers in the model will be automatically reverted to BatchNormXd layers if they are used.
05/14 04:07:42 - mmengine - INFO - Hooks will be executed in the following order:
before_run:
(VERY_HIGH   ) RuntimeInfoHook                    
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
before_train:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_train_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(NORMAL      ) DistSamplerSeedHook                
 -------------------- 
before_train_iter:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_train_iter:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
after_train_epoch:
(NORMAL      ) IterTimerHook                      
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_val:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
before_val_epoch:
(NORMAL      ) IterTimerHook                      
 -------------------- 
before_val_iter:
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_val_iter:
(NORMAL      ) IterTimerHook                      
(NORMAL      ) DetVisualizationHook               
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_val_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
after_val:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
after_train:
(VERY_HIGH   ) RuntimeInfoHook                    
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_test:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
before_test_epoch:
(NORMAL      ) IterTimerHook                      
 -------------------- 
before_test_iter:
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_test_iter:
(NORMAL      ) IterTimerHook                      
(NORMAL      ) DetVisualizationHook               
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_test_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_test:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
after_run:
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
05/14 04:07:51 - mmengine - INFO - Loads checkpoint by http backend from path: https://github.com/SwinTransformer/storage/releases/download/v1.0.0/swin_base_patch4_window12_384_22k.pth
05/14 04:07:51 - mmengine - WARNING - "FileClient" will be deprecated in future. Please use io functions in https://mmengine.readthedocs.io/en/latest/api/fileio.html#file-io
05/14 04:07:51 - mmengine - WARNING - "HardDiskBackend" is the alias of "LocalBackend" and the former will be deprecated in future.
05/14 04:07:51 - mmengine - INFO - Checkpoints will be saved to /pfs/work7/workspace/scratch/ma_ruweber-team_project_fss2024/benchmarking_robustness/object_detection/slurm/results/fsaf_swin-b_voc0712.
05/14 04:08:16 - mmengine - INFO - Epoch(train)  [1][   50/24827]  lr: 9.9098e-04  eta: 1 day, 16:55:03  time: 0.4945  data_time: 0.0089  memory: 3083  grad_norm: 3.3921  loss: 2.0625  loss_cls: 1.1581  loss_bbox: 0.9044  num_pos: 0.0000  pos_recall: 0.0000
05/14 04:08:40 - mmengine - INFO - Epoch(train)  [1][  100/24827]  lr: 1.9920e-03  eta: 1 day, 16:02:21  time: 0.4734  data_time: 0.0030  memory: 3083  grad_norm: 5.1491  loss: 1.7151  loss_cls: 1.1249  loss_bbox: 0.5902  num_pos: 20.0000  pos_recall: 100.0000
05/14 04:09:03 - mmengine - INFO - Epoch(train)  [1][  150/24827]  lr: 2.9930e-03  eta: 1 day, 15:41:46  time: 0.4718  data_time: 0.0029  memory: 3081  grad_norm: 9.2953  loss: 1.7954  loss_cls: 1.1359  loss_bbox: 0.6595  num_pos: 1.0000  pos_recall: 0.0000
05/14 04:09:27 - mmengine - INFO - Epoch(train)  [1][  200/24827]  lr: 3.9940e-03  eta: 1 day, 15:29:47  time: 0.4706  data_time: 0.0034  memory: 3081  grad_norm: 7.0567  loss: 1.8686  loss_cls: 1.0316  loss_bbox: 0.8370  num_pos: 3.5000  pos_recall: 0.0000
05/14 04:09:51 - mmengine - INFO - Epoch(train)  [1][  250/24827]  lr: 4.9950e-03  eta: 1 day, 15:33:35  time: 0.4818  data_time: 0.0031  memory: 3083  grad_norm: 3.6216  loss: 1.5304  loss_cls: 0.8616  loss_bbox: 0.6688  num_pos: 2.0000  pos_recall: 50.0000
05/14 04:10:15 - mmengine - INFO - Epoch(train)  [1][  300/24827]  lr: 5.9960e-03  eta: 1 day, 15:31:51  time: 0.4768  data_time: 0.0029  memory: 3082  grad_norm: 8.0187  loss: 1.5326  loss_cls: 0.8681  loss_bbox: 0.6646  num_pos: 0.0000  pos_recall: 0.0000
05/14 04:10:39 - mmengine - INFO - Epoch(train)  [1][  350/24827]  lr: 6.9970e-03  eta: 1 day, 15:32:02  time: 0.4790  data_time: 0.0029  memory: 3083  grad_norm: 5.1896  loss: 1.7378  loss_cls: 0.9953  loss_bbox: 0.7424  num_pos: 2.0000  pos_recall: 0.0000
05/14 04:11:02 - mmengine - INFO - Epoch(train)  [1][  400/24827]  lr: 7.9980e-03  eta: 1 day, 15:28:21  time: 0.4730  data_time: 0.0029  memory: 3081  grad_norm: 5.3403  loss: 1.3447  loss_cls: 0.7793  loss_bbox: 0.5654  num_pos: 1.5000  pos_recall: 0.0000
05/14 04:11:26 - mmengine - INFO - Epoch(train)  [1][  450/24827]  lr: 8.9990e-03  eta: 1 day, 15:22:46  time: 0.4682  data_time: 0.0029  memory: 3038  grad_norm: 5.8029  loss: 1.3911  loss_cls: 0.7905  loss_bbox: 0.6007  num_pos: 1.0000  pos_recall: 0.0000
05/14 04:11:50 - mmengine - INFO - Epoch(train)  [1][  500/24827]  lr: 1.0000e-02  eta: 1 day, 15:27:40  time: 0.4873  data_time: 0.0029  memory: 3083  grad_norm: 9.8935  loss: 1.4473  loss_cls: 0.8351  loss_bbox: 0.6122  num_pos: 0.0000  pos_recall: 0.0000
05/14 04:12:14 - mmengine - INFO - Epoch(train)  [1][  550/24827]  lr: 1.0000e-02  eta: 1 day, 15:23:39  time: 0.4696  data_time: 0.0029  memory: 3083  grad_norm: 12.3789  loss: 1.5505  loss_cls: 0.9381  loss_bbox: 0.6124  num_pos: 4.5000  pos_recall: 0.0000
05/14 04:12:37 - mmengine - INFO - Epoch(train)  [1][  600/24827]  lr: 1.0000e-02  eta: 1 day, 15:19:57  time: 0.4689  data_time: 0.0029  memory: 3081  grad_norm: 166.2193  loss: 1.8265  loss_cls: 1.2170  loss_bbox: 0.6095  num_pos: 1.5000  pos_recall: 33.3333
05/14 04:13:00 - mmengine - INFO - Epoch(train)  [1][  650/24827]  lr: 1.0000e-02  eta: 1 day, 15:16:04  time: 0.4671  data_time: 0.0028  memory: 3083  grad_norm: 7.1928  loss: 1.2445  loss_cls: 0.6697  loss_bbox: 0.5748  num_pos: 0.0000  pos_recall: 0.0000
05/14 04:13:24 - mmengine - INFO - Epoch(train)  [1][  700/24827]  lr: 1.0000e-02  eta: 1 day, 15:14:23  time: 0.4719  data_time: 0.0029  memory: 3083  grad_norm: 7.0000  loss: 1.4197  loss_cls: 0.7448  loss_bbox: 0.6749  num_pos: 4.5000  pos_recall: 44.4444
05/14 04:13:48 - mmengine - INFO - Epoch(train)  [1][  750/24827]  lr: 1.0000e-02  eta: 1 day, 15:12:52  time: 0.4719  data_time: 0.0029  memory: 3083  grad_norm: 4.6948  loss: 1.5027  loss_cls: 0.7164  loss_bbox: 0.7863  num_pos: 3.0000  pos_recall: 16.6667
05/14 04:14:11 - mmengine - INFO - Epoch(train)  [1][  800/24827]  lr: 1.0000e-02  eta: 1 day, 15:12:03  time: 0.4737  data_time: 0.0029  memory: 3081  grad_norm: 5.7502  loss: 1.2648  loss_cls: 0.5831  loss_bbox: 0.6817  num_pos: 0.5000  pos_recall: 0.0000
05/14 04:14:35 - mmengine - INFO - Epoch(train)  [1][  850/24827]  lr: 1.0000e-02  eta: 1 day, 15:11:06  time: 0.4731  data_time: 0.0029  memory: 3083  grad_norm: 7.4972  loss: 2.0117  loss_cls: 0.7157  loss_bbox: 1.2960  num_pos: 1.5000  pos_recall: 33.3333
05/14 04:14:59 - mmengine - INFO - Epoch(train)  [1][  900/24827]  lr: 1.0000e-02  eta: 1 day, 15:10:03  time: 0.4725  data_time: 0.0030  memory: 3081  grad_norm: 13.9768  loss: 1.8362  loss_cls: 0.6926  loss_bbox: 1.1435  num_pos: 1.5000  pos_recall: 0.0000
submitit WARNING (2024-05-14 04:15:04,582) - Bypassing signal SIGCONT
submitit ERROR (2024-05-14 04:15:04,600) - Submitted job triggered an exception

============================= JOB FEEDBACK =============================

NodeName=uc2n482
Job ID: 23594887
Cluster: uc2
User/Group: ma_ruweber/ma_ma
State: FAILED (exit code 1)
Nodes: 1
Cores per node: 10
CPU Utilized: 00:07:42
CPU Efficiency: 9.57% of 01:20:30 core-walltime
Job Wall-clock time: 00:08:03
Memory Utilized: 1.67 GB
Memory Efficiency: 1.82% of 91.80 GB
