submitit INFO (2024-05-14 04:19:42,942) - Starting with JobEnvironment(job_id=23594905, hostname=uc2n512.localdomain, local_rank=0(1), node=0(1), global_rank=0(1))
submitit INFO (2024-05-14 04:19:42,943) - Loading pickle: /pfs/work7/workspace/scratch/ma_ruweber-team_project_fss2024/benchmarking_robustness/object_detection/slurm/work_dir/sabl_r101_voc0712/23594905_submitted.pkl
05/14 04:19:47 - mmengine - INFO - 
------------------------------------------------------------
System environment:
    sys.platform: linux
    Python: 3.10.13 (main, Sep 11 2023, 13:44:35) [GCC 11.2.0]
    CUDA available: True
    MUSA available: False
    numpy_random_seed: 1091711063
    GPU 0: Tesla V100-SXM2-32GB
    CUDA_HOME: /opt/bwhpc/common/devel/cuda/11.8
    NVCC: Cuda compilation tools, release 11.8, V11.8.89
    GCC: gcc (GCC) 8.5.0 20210514 (Red Hat 8.5.0-10)
    PyTorch: 2.1.2
    PyTorch compiling details: PyTorch built with:
  - GCC 9.3
  - C++ Version: 201703
  - Intel(R) oneAPI Math Kernel Library Version 2023.1-Product Build 20230303 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v3.1.1 (Git Hash 64f6bcbcbab628e96f33a62c3e975f8535a7bde4)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - LAPACK is enabled (usually provided by MKL)
  - NNPACK is enabled
  - CPU capability usage: AVX512
  - CUDA Runtime 11.8
  - NVCC architecture flags: -gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_61,code=sm_61;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86;-gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_90,code=sm_90;-gencode;arch=compute_37,code=compute_37
  - CuDNN 8.7
  - Magma 2.6.1
  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.8, CUDNN_VERSION=8.7.0, CXX_COMPILER=/opt/rh/devtoolset-9/root/usr/bin/c++, CXX_FLAGS= -D_GLIBCXX_USE_CXX11_ABI=0 -fabi-version=11 -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -DNDEBUG -DUSE_KINETO -DLIBKINETO_NOROCTRACER -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -O2 -fPIC -Wall -Wextra -Werror=return-type -Werror=non-virtual-dtor -Werror=bool-operation -Wnarrowing -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-unused-parameter -Wno-unused-function -Wno-unused-result -Wno-strict-overflow -Wno-strict-aliasing -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=old-style-cast -Wno-invalid-partial-specialization -Wno-unused-private-field -Wno-aligned-allocation-unavailable -Wno-missing-braces -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Werror=cast-function-type -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_DISABLE_GPU_ASSERTS=ON, TORCH_VERSION=2.1.2, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, USE_ROCM=OFF, 

    TorchVision: 0.16.2
    OpenCV: 4.9.0
    MMEngine: 0.10.3

Runtime environment:
    cudnn_benchmark: False
    dist_cfg: {'backend': 'nccl'}
    mp_cfg: {'mp_start_method': 'fork', 'opencv_num_threads': 0}
    seed: 1091711063
    Distributed launcher: none
    Distributed training: False
    GPU number: 1
------------------------------------------------------------

05/14 04:19:47 - mmengine - INFO - Config:
auto_scale_lr = dict(base_batch_size=16, enable=False)
backend_args = None
data_root = 'data/VOCdevkit/'
dataset_type = 'VOCDataset'
default_hooks = dict(
    checkpoint=dict(interval=1, type='CheckpointHook'),
    logger=dict(interval=50, type='LoggerHook'),
    param_scheduler=dict(type='ParamSchedulerHook'),
    sampler_seed=dict(type='DistSamplerSeedHook'),
    timer=dict(type='IterTimerHook'),
    visualization=dict(type='DetVisualizationHook'))
default_scope = 'mmdet'
env_cfg = dict(
    cudnn_benchmark=False,
    dist_cfg=dict(backend='nccl'),
    mp_cfg=dict(mp_start_method='fork', opencv_num_threads=0))
launcher = 'none'
load_from = None
log_level = 'INFO'
log_processor = dict(by_epoch=True, type='LogProcessor', window_size=50)
model = dict(
    backbone=dict(
        depth=101,
        frozen_stages=1,
        init_cfg=dict(checkpoint='torchvision://resnet101', type='Pretrained'),
        norm_cfg=dict(requires_grad=True, type='BN'),
        norm_eval=True,
        num_stages=4,
        out_indices=[
            0,
            1,
            2,
            3,
        ],
        style='pytorch',
        type='ResNet'),
    data_preprocessor=dict(
        bgr_to_rgb=True,
        mean=[
            123.675,
            116.28,
            103.53,
        ],
        pad_size_divisor=32,
        std=[
            58.395,
            57.12,
            57.375,
        ],
        type='DetDataPreprocessor'),
    neck=dict(
        in_channels=[
            256,
            512,
            1024,
            2048,
        ],
        num_outs=5,
        out_channels=256,
        type='FPN'),
    roi_head=dict(
        bbox_head=[
            dict(
                bbox_coder=dict(
                    num_buckets=14,
                    scale_factor=1.7,
                    type='BucketingBBoxCoder'),
                cls_in_channels=256,
                cls_out_channels=1024,
                loss_bbox_cls=dict(
                    loss_weight=1.0, type='CrossEntropyLoss',
                    use_sigmoid=True),
                loss_bbox_reg=dict(
                    beta=0.1, loss_weight=1.0, type='SmoothL1Loss'),
                loss_cls=dict(
                    loss_weight=1.0,
                    type='CrossEntropyLoss',
                    use_sigmoid=False),
                norm_cfg=None,
                num_classes=80,
                num_cls_fcs=1,
                num_reg_fcs=0,
                reg_class_agnostic=True,
                reg_cls_out_channels=256,
                reg_feat_up_ratio=2,
                reg_in_channels=256,
                reg_offset_out_channels=256,
                reg_post_kernel=3,
                reg_post_num=1,
                reg_pre_kernel=3,
                reg_pre_num=2,
                roi_feat_size=7,
                type='SABLHead'),
            dict(
                bbox_coder=dict(
                    num_buckets=14,
                    scale_factor=1.5,
                    type='BucketingBBoxCoder'),
                cls_in_channels=256,
                cls_out_channels=1024,
                loss_bbox_cls=dict(
                    loss_weight=1.0, type='CrossEntropyLoss',
                    use_sigmoid=True),
                loss_bbox_reg=dict(
                    beta=0.1, loss_weight=1.0, type='SmoothL1Loss'),
                loss_cls=dict(
                    loss_weight=1.0,
                    type='CrossEntropyLoss',
                    use_sigmoid=False),
                norm_cfg=None,
                num_classes=80,
                num_cls_fcs=1,
                num_reg_fcs=0,
                reg_class_agnostic=True,
                reg_cls_out_channels=256,
                reg_feat_up_ratio=2,
                reg_in_channels=256,
                reg_offset_out_channels=256,
                reg_post_kernel=3,
                reg_post_num=1,
                reg_pre_kernel=3,
                reg_pre_num=2,
                roi_feat_size=7,
                type='SABLHead'),
            dict(
                bbox_coder=dict(
                    num_buckets=14,
                    scale_factor=1.3,
                    type='BucketingBBoxCoder'),
                cls_in_channels=256,
                cls_out_channels=1024,
                loss_bbox_cls=dict(
                    loss_weight=1.0, type='CrossEntropyLoss',
                    use_sigmoid=True),
                loss_bbox_reg=dict(
                    beta=0.1, loss_weight=1.0, type='SmoothL1Loss'),
                loss_cls=dict(
                    loss_weight=1.0,
                    type='CrossEntropyLoss',
                    use_sigmoid=False),
                norm_cfg=None,
                num_classes=80,
                num_cls_fcs=1,
                num_reg_fcs=0,
                reg_class_agnostic=True,
                reg_cls_out_channels=256,
                reg_feat_up_ratio=2,
                reg_in_channels=256,
                reg_offset_out_channels=256,
                reg_post_kernel=3,
                reg_post_num=1,
                reg_pre_kernel=3,
                reg_pre_num=2,
                roi_feat_size=7,
                type='SABLHead'),
        ],
        bbox_roi_extractor=dict(
            featmap_strides=[
                4,
                8,
                16,
                32,
            ],
            out_channels=256,
            roi_layer=dict(output_size=7, sampling_ratio=0, type='RoIAlign'),
            type='SingleRoIExtractor'),
        num_stages=3,
        stage_loss_weights=[
            1,
            0.5,
            0.25,
        ],
        type='CascadeRoIHead'),
    rpn_head=dict(
        anchor_generator=dict(
            ratios=[
                0.5,
                1.0,
                2.0,
            ],
            scales=[
                8,
            ],
            strides=[
                4,
                8,
                16,
                32,
                64,
            ],
            type='AnchorGenerator'),
        bbox_coder=dict(
            target_means=[
                0.0,
                0.0,
                0.0,
                0.0,
            ],
            target_stds=[
                1.0,
                1.0,
                1.0,
                1.0,
            ],
            type='DeltaXYWHBBoxCoder'),
        feat_channels=256,
        in_channels=256,
        loss_bbox=dict(
            beta=0.1111111111111111, loss_weight=1.0, type='SmoothL1Loss'),
        loss_cls=dict(
            loss_weight=1.0, type='CrossEntropyLoss', use_sigmoid=True),
        type='RPNHead'),
    test_cfg=dict(
        rcnn=dict(
            max_per_img=100,
            nms=dict(iou_threshold=0.5, type='nms'),
            score_thr=0.05),
        rpn=dict(
            max_per_img=1000,
            min_bbox_size=0,
            nms=dict(iou_threshold=0.7, type='nms'),
            nms_pre=1000)),
    train_cfg=dict(
        rcnn=[
            dict(
                assigner=dict(
                    ignore_iof_thr=-1,
                    match_low_quality=False,
                    min_pos_iou=0.5,
                    neg_iou_thr=0.5,
                    pos_iou_thr=0.5,
                    type='MaxIoUAssigner'),
                debug=False,
                pos_weight=-1,
                sampler=dict(
                    add_gt_as_proposals=True,
                    neg_pos_ub=-1,
                    num=512,
                    pos_fraction=0.25,
                    type='RandomSampler')),
            dict(
                assigner=dict(
                    ignore_iof_thr=-1,
                    match_low_quality=False,
                    min_pos_iou=0.6,
                    neg_iou_thr=0.6,
                    pos_iou_thr=0.6,
                    type='MaxIoUAssigner'),
                debug=False,
                pos_weight=-1,
                sampler=dict(
                    add_gt_as_proposals=True,
                    neg_pos_ub=-1,
                    num=512,
                    pos_fraction=0.25,
                    type='RandomSampler')),
            dict(
                assigner=dict(
                    ignore_iof_thr=-1,
                    match_low_quality=False,
                    min_pos_iou=0.7,
                    neg_iou_thr=0.7,
                    pos_iou_thr=0.7,
                    type='MaxIoUAssigner'),
                debug=False,
                pos_weight=-1,
                sampler=dict(
                    add_gt_as_proposals=True,
                    neg_pos_ub=-1,
                    num=512,
                    pos_fraction=0.25,
                    type='RandomSampler')),
        ],
        rpn=dict(
            allowed_border=0,
            assigner=dict(
                ignore_iof_thr=-1,
                match_low_quality=True,
                min_pos_iou=0.3,
                neg_iou_thr=0.3,
                pos_iou_thr=0.7,
                type='MaxIoUAssigner'),
            debug=False,
            pos_weight=-1,
            sampler=dict(
                add_gt_as_proposals=False,
                neg_pos_ub=-1,
                num=256,
                pos_fraction=0.5,
                type='RandomSampler')),
        rpn_proposal=dict(
            max_per_img=2000,
            min_bbox_size=0,
            nms=dict(iou_threshold=0.7, type='nms'),
            nms_pre=2000)),
    type='CascadeRCNN')
optim_wrapper = dict(
    optimizer=dict(lr=0.02, momentum=0.9, type='SGD', weight_decay=0.0001),
    type='OptimWrapper')
param_scheduler = [
    dict(
        begin=0, by_epoch=False, end=500, start_factor=0.001, type='LinearLR'),
    dict(
        begin=0,
        by_epoch=True,
        end=12,
        gamma=0.1,
        milestones=[
            8,
            11,
        ],
        type='MultiStepLR'),
]
resume = False
test_cfg = dict(type='TestLoop')
test_dataloader = dict(
    batch_size=1,
    dataset=dict(
        ann_file='VOC2007/ImageSets/Main/test.txt',
        backend_args=None,
        data_prefix=dict(sub_data_root='VOC2007/'),
        data_root='data/VOCdevkit/',
        pipeline=[
            dict(backend_args=None, type='LoadImageFromFile'),
            dict(keep_ratio=True, scale=(
                1000,
                600,
            ), type='Resize'),
            dict(type='LoadAnnotations', with_bbox=True),
            dict(
                meta_keys=(
                    'img_id',
                    'img_path',
                    'ori_shape',
                    'img_shape',
                    'scale_factor',
                ),
                type='PackDetInputs'),
        ],
        test_mode=True,
        type='VOCDataset'),
    drop_last=False,
    num_workers=2,
    persistent_workers=True,
    sampler=dict(shuffle=False, type='DefaultSampler'))
test_evaluator = dict(eval_mode='11points', metric='mAP', type='VOCMetric')
test_pipeline = [
    dict(backend_args=None, type='LoadImageFromFile'),
    dict(keep_ratio=True, scale=(
        1000,
        600,
    ), type='Resize'),
    dict(type='LoadAnnotations', with_bbox=True),
    dict(
        meta_keys=(
            'img_id',
            'img_path',
            'ori_shape',
            'img_shape',
            'scale_factor',
        ),
        type='PackDetInputs'),
]
train_cfg = dict(max_epochs=12, type='EpochBasedTrainLoop', val_interval=1)
train_dataloader = dict(
    batch_sampler=dict(type='AspectRatioBatchSampler'),
    batch_size=2,
    dataset=dict(
        dataset=dict(
            datasets=[
                dict(
                    ann_file='VOC2007/ImageSets/Main/trainval.txt',
                    backend_args=None,
                    data_prefix=dict(sub_data_root='VOC2007/'),
                    data_root='data/VOCdevkit/',
                    filter_cfg=dict(
                        bbox_min_size=32, filter_empty_gt=True, min_size=32),
                    pipeline=[
                        dict(backend_args=None, type='LoadImageFromFile'),
                        dict(type='LoadAnnotations', with_bbox=True),
                        dict(
                            keep_ratio=True,
                            scale=(
                                1000,
                                600,
                            ),
                            type='Resize'),
                        dict(prob=0.5, type='RandomFlip'),
                        dict(type='PackDetInputs'),
                    ],
                    type='VOCDataset'),
                dict(
                    ann_file='VOC2012/ImageSets/Main/trainval.txt',
                    backend_args=None,
                    data_prefix=dict(sub_data_root='VOC2012/'),
                    data_root='data/VOCdevkit/',
                    filter_cfg=dict(
                        bbox_min_size=32, filter_empty_gt=True, min_size=32),
                    pipeline=[
                        dict(backend_args=None, type='LoadImageFromFile'),
                        dict(type='LoadAnnotations', with_bbox=True),
                        dict(
                            keep_ratio=True,
                            scale=(
                                1000,
                                600,
                            ),
                            type='Resize'),
                        dict(prob=0.5, type='RandomFlip'),
                        dict(type='PackDetInputs'),
                    ],
                    type='VOCDataset'),
            ],
            ignore_keys=[
                'dataset_type',
            ],
            type='ConcatDataset'),
        times=3,
        type='RepeatDataset'),
    num_workers=2,
    persistent_workers=True,
    sampler=dict(shuffle=True, type='DefaultSampler'))
train_pipeline = [
    dict(backend_args=None, type='LoadImageFromFile'),
    dict(type='LoadAnnotations', with_bbox=True),
    dict(keep_ratio=True, scale=(
        1000,
        600,
    ), type='Resize'),
    dict(prob=0.5, type='RandomFlip'),
    dict(type='PackDetInputs'),
]
val_cfg = dict(type='ValLoop')
val_dataloader = dict(
    batch_size=1,
    dataset=dict(
        ann_file='VOC2007/ImageSets/Main/test.txt',
        backend_args=None,
        data_prefix=dict(sub_data_root='VOC2007/'),
        data_root='data/VOCdevkit/',
        pipeline=[
            dict(backend_args=None, type='LoadImageFromFile'),
            dict(keep_ratio=True, scale=(
                1000,
                600,
            ), type='Resize'),
            dict(type='LoadAnnotations', with_bbox=True),
            dict(
                meta_keys=(
                    'img_id',
                    'img_path',
                    'ori_shape',
                    'img_shape',
                    'scale_factor',
                ),
                type='PackDetInputs'),
        ],
        test_mode=True,
        type='VOCDataset'),
    drop_last=False,
    num_workers=2,
    persistent_workers=True,
    sampler=dict(shuffle=False, type='DefaultSampler'))
val_evaluator = dict(eval_mode='11points', metric='mAP', type='VOCMetric')
vis_backends = [
    dict(type='LocalVisBackend'),
]
visualizer = dict(
    name='visualizer',
    type='DetLocalVisualizer',
    vis_backends=[
        dict(type='LocalVisBackend'),
    ])
work_dir = 'slurm/results/sabl_r101_voc0712'

05/14 04:19:49 - mmengine - INFO - Distributed training is not used, all SyncBatchNorm (SyncBN) layers in the model will be automatically reverted to BatchNormXd layers if they are used.
05/14 04:19:49 - mmengine - INFO - Hooks will be executed in the following order:
before_run:
(VERY_HIGH   ) RuntimeInfoHook                    
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
before_train:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_train_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(NORMAL      ) DistSamplerSeedHook                
 -------------------- 
before_train_iter:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_train_iter:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
after_train_epoch:
(NORMAL      ) IterTimerHook                      
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_val:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
before_val_epoch:
(NORMAL      ) IterTimerHook                      
 -------------------- 
before_val_iter:
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_val_iter:
(NORMAL      ) IterTimerHook                      
(NORMAL      ) DetVisualizationHook               
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_val_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
after_val:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
after_train:
(VERY_HIGH   ) RuntimeInfoHook                    
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_test:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
before_test_epoch:
(NORMAL      ) IterTimerHook                      
 -------------------- 
before_test_iter:
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_test_iter:
(NORMAL      ) IterTimerHook                      
(NORMAL      ) DetVisualizationHook               
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_test_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_test:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
after_run:
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
05/14 04:19:57 - mmengine - INFO - load model from: torchvision://resnet101
05/14 04:19:57 - mmengine - INFO - Loads checkpoint by torchvision backend from path: torchvision://resnet101
05/14 04:19:57 - mmengine - WARNING - The model and loaded state dict do not match exactly

unexpected key in source state_dict: fc.weight, fc.bias

05/14 04:19:57 - mmengine - WARNING - "FileClient" will be deprecated in future. Please use io functions in https://mmengine.readthedocs.io/en/latest/api/fileio.html#file-io
05/14 04:19:57 - mmengine - WARNING - "HardDiskBackend" is the alias of "LocalBackend" and the former will be deprecated in future.
05/14 04:19:57 - mmengine - INFO - Checkpoints will be saved to /pfs/work7/workspace/scratch/ma_ruweber-team_project_fss2024/benchmarking_robustness/object_detection/slurm/results/sabl_r101_voc0712.
05/14 04:20:13 - mmengine - INFO - Epoch(train)  [1][   50/24827]  lr: 1.9820e-03  eta: 1 day, 2:08:27  time: 0.3159  data_time: 0.0078  memory: 4215  loss: 2.3571  loss_rpn_cls: 0.3024  loss_rpn_bbox: 0.0141  s0.loss_cls: 1.0092  s0.acc: 96.0938  s0.loss_bbox_cls: 0.0998  s0.loss_bbox_reg: 0.1071  s1.loss_cls: 0.5082  s1.acc: 98.0469  s1.loss_bbox_cls: 0.0259  s1.loss_bbox_reg: 0.0247  s2.loss_cls: 0.2505  s2.acc: 99.5117  s2.loss_bbox_cls: 0.0082  s2.loss_bbox_reg: 0.0068
05/14 04:20:28 - mmengine - INFO - Epoch(train)  [1][  100/24827]  lr: 3.9840e-03  eta: 1 day, 1:43:43  time: 0.3061  data_time: 0.0040  memory: 4214  loss: 0.7741  loss_rpn_cls: 0.0405  loss_rpn_bbox: 0.0113  s0.loss_cls: 0.2546  s0.acc: 92.0898  s0.loss_bbox_cls: 0.1052  s0.loss_bbox_reg: 0.1363  s1.loss_cls: 0.0926  s1.acc: 95.7031  s1.loss_bbox_cls: 0.0346  s1.loss_bbox_reg: 0.0404  s2.loss_cls: 0.0336  s2.acc: 98.2422  s2.loss_bbox_cls: 0.0134  s2.loss_bbox_reg: 0.0117
05/14 04:20:44 - mmengine - INFO - Epoch(train)  [1][  150/24827]  lr: 5.9860e-03  eta: 1 day, 1:32:10  time: 0.3042  data_time: 0.0037  memory: 4214  loss: 0.7871  loss_rpn_cls: 0.0372  loss_rpn_bbox: 0.0119  s0.loss_cls: 0.2652  s0.acc: 93.8477  s0.loss_bbox_cls: 0.1142  s0.loss_bbox_reg: 0.1443  s1.loss_cls: 0.0874  s1.acc: 97.0703  s1.loss_bbox_cls: 0.0344  s1.loss_bbox_reg: 0.0391  s2.loss_cls: 0.0321  s2.acc: 98.8281  s2.loss_bbox_cls: 0.0106  s2.loss_bbox_reg: 0.0107
05/14 04:20:59 - mmengine - INFO - Epoch(train)  [1][  200/24827]  lr: 7.9880e-03  eta: 1 day, 1:28:31  time: 0.3060  data_time: 0.0036  memory: 4218  loss: 0.7822  loss_rpn_cls: 0.0335  loss_rpn_bbox: 0.0107  s0.loss_cls: 0.2501  s0.acc: 96.7773  s0.loss_bbox_cls: 0.1183  s0.loss_bbox_reg: 0.1497  s1.loss_cls: 0.0882  s1.acc: 97.5586  s1.loss_bbox_cls: 0.0363  s1.loss_bbox_reg: 0.0407  s2.loss_cls: 0.0329  s2.acc: 97.7539  s2.loss_bbox_cls: 0.0103  s2.loss_bbox_reg: 0.0115
05/14 04:21:14 - mmengine - INFO - Epoch(train)  [1][  250/24827]  lr: 9.9900e-03  eta: 1 day, 1:23:46  time: 0.3035  data_time: 0.0035  memory: 4218  loss: 0.7552  loss_rpn_cls: 0.0271  loss_rpn_bbox: 0.0087  s0.loss_cls: 0.2497  s0.acc: 94.9219  s0.loss_bbox_cls: 0.1101  s0.loss_bbox_reg: 0.1409  s1.loss_cls: 0.0888  s1.acc: 97.7539  s1.loss_bbox_cls: 0.0363  s1.loss_bbox_reg: 0.0399  s2.loss_cls: 0.0324  s2.acc: 98.4375  s2.loss_bbox_cls: 0.0102  s2.loss_bbox_reg: 0.0112
05/14 04:21:30 - mmengine - INFO - Epoch(train)  [1][  300/24827]  lr: 1.1992e-02  eta: 1 day, 1:26:55  time: 0.3113  data_time: 0.0036  memory: 4215  loss: 0.7640  loss_rpn_cls: 0.0374  loss_rpn_bbox: 0.0103  s0.loss_cls: 0.2781  s0.acc: 95.8008  s0.loss_bbox_cls: 0.1179  s0.loss_bbox_reg: 0.1488  s1.loss_cls: 0.0739  s1.acc: 97.8516  s1.loss_bbox_cls: 0.0289  s1.loss_bbox_reg: 0.0317  s2.loss_cls: 0.0228  s2.acc: 98.8281  s2.loss_bbox_cls: 0.0070  s2.loss_bbox_reg: 0.0072
05/14 04:21:45 - mmengine - INFO - Epoch(train)  [1][  350/24827]  lr: 1.3994e-02  eta: 1 day, 1:24:52  time: 0.3053  data_time: 0.0040  memory: 4215  loss: 0.7662  loss_rpn_cls: 0.0347  loss_rpn_bbox: 0.0097  s0.loss_cls: 0.2914  s0.acc: 91.5039  s0.loss_bbox_cls: 0.1137  s0.loss_bbox_reg: 0.1504  s1.loss_cls: 0.0703  s1.acc: 95.9961  s1.loss_bbox_cls: 0.0269  s1.loss_bbox_reg: 0.0308  s2.loss_cls: 0.0228  s2.acc: 97.9492  s2.loss_bbox_cls: 0.0074  s2.loss_bbox_reg: 0.0081
05/14 04:22:00 - mmengine - INFO - Epoch(train)  [1][  400/24827]  lr: 1.5996e-02  eta: 1 day, 1:23:37  time: 0.3059  data_time: 0.0037  memory: 4215  loss: 0.8615  loss_rpn_cls: 0.0471  loss_rpn_bbox: 0.0114  s0.loss_cls: 0.3463  s0.acc: 92.8711  s0.loss_bbox_cls: 0.1170  s0.loss_bbox_reg: 0.1579  s1.loss_cls: 0.0783  s1.acc: 96.7773  s1.loss_bbox_cls: 0.0274  s1.loss_bbox_reg: 0.0309  s2.loss_cls: 0.0280  s2.acc: 97.8516  s2.loss_bbox_cls: 0.0082  s2.loss_bbox_reg: 0.0091
05/14 04:22:15 - mmengine - INFO - Epoch(train)  [1][  450/24827]  lr: 1.7998e-02  eta: 1 day, 1:20:43  time: 0.3024  data_time: 0.0035  memory: 4063  loss: 0.7836  loss_rpn_cls: 0.0400  loss_rpn_bbox: 0.0118  s0.loss_cls: 0.3067  s0.acc: 88.7695  s0.loss_bbox_cls: 0.1073  s0.loss_bbox_reg: 0.1467  s1.loss_cls: 0.0725  s1.acc: 94.6289  s1.loss_bbox_cls: 0.0257  s1.loss_bbox_reg: 0.0283  s2.loss_cls: 0.0270  s2.acc: 96.4844  s2.loss_bbox_cls: 0.0085  s2.loss_bbox_reg: 0.0092
05/14 04:22:30 - mmengine - INFO - Epoch(train)  [1][  500/24827]  lr: 2.0000e-02  eta: 1 day, 1:16:45  time: 0.2993  data_time: 0.0034  memory: 4218  loss: 0.8382  loss_rpn_cls: 0.0343  loss_rpn_bbox: 0.0119  s0.loss_cls: 0.3319  s0.acc: 96.5820  s0.loss_bbox_cls: 0.1171  s0.loss_bbox_reg: 0.1630  s1.loss_cls: 0.0811  s1.acc: 99.3164  s1.loss_bbox_cls: 0.0273  s1.loss_bbox_reg: 0.0312  s2.loss_cls: 0.0257  s2.acc: 99.7070  s2.loss_bbox_cls: 0.0069  s2.loss_bbox_reg: 0.0076
05/14 04:22:45 - mmengine - INFO - Epoch(train)  [1][  550/24827]  lr: 2.0000e-02  eta: 1 day, 1:14:19  time: 0.3012  data_time: 0.0038  memory: 4067  loss: 0.8231  loss_rpn_cls: 0.0378  loss_rpn_bbox: 0.0127  s0.loss_cls: 0.3446  s0.acc: 94.2383  s0.loss_bbox_cls: 0.1095  s0.loss_bbox_reg: 0.1502  s1.loss_cls: 0.0763  s1.acc: 97.5586  s1.loss_bbox_cls: 0.0253  s1.loss_bbox_reg: 0.0290  s2.loss_cls: 0.0237  s2.acc: 98.8281  s2.loss_bbox_cls: 0.0065  s2.loss_bbox_reg: 0.0074
05/14 04:23:00 - mmengine - INFO - Epoch(train)  [1][  600/24827]  lr: 2.0000e-02  eta: 1 day, 1:12:08  time: 0.3009  data_time: 0.0034  memory: 4214  loss: 0.7810  loss_rpn_cls: 0.0445  loss_rpn_bbox: 0.0135  s0.loss_cls: 0.2952  s0.acc: 97.9492  s0.loss_bbox_cls: 0.1115  s0.loss_bbox_reg: 0.1537  s1.loss_cls: 0.0712  s1.acc: 98.5352  s1.loss_bbox_cls: 0.0263  s1.loss_bbox_reg: 0.0300  s2.loss_cls: 0.0219  s2.acc: 99.1211  s2.loss_bbox_cls: 0.0063  s2.loss_bbox_reg: 0.0069
05/14 04:23:15 - mmengine - INFO - Epoch(train)  [1][  650/24827]  lr: 2.0000e-02  eta: 1 day, 1:09:38  time: 0.2992  data_time: 0.0034  memory: 4218  loss: 0.7660  loss_rpn_cls: 0.0408  loss_rpn_bbox: 0.0122  s0.loss_cls: 0.3024  s0.acc: 95.2148  s0.loss_bbox_cls: 0.1079  s0.loss_bbox_reg: 0.1476  s1.loss_cls: 0.0733  s1.acc: 96.7773  s1.loss_bbox_cls: 0.0243  s1.loss_bbox_reg: 0.0288  s2.loss_cls: 0.0191  s2.acc: 98.9258  s2.loss_bbox_cls: 0.0047  s2.loss_bbox_reg: 0.0049
05/14 04:23:30 - mmengine - INFO - Epoch(train)  [1][  700/24827]  lr: 2.0000e-02  eta: 1 day, 1:09:00  time: 0.3036  data_time: 0.0035  memory: 4218  loss: 0.8007  loss_rpn_cls: 0.0488  loss_rpn_bbox: 0.0170  s0.loss_cls: 0.3159  s0.acc: 96.8750  s0.loss_bbox_cls: 0.1052  s0.loss_bbox_reg: 0.1458  s1.loss_cls: 0.0803  s1.acc: 98.9258  s1.loss_bbox_cls: 0.0254  s1.loss_bbox_reg: 0.0299  s2.loss_cls: 0.0219  s2.acc: 99.2188  s2.loss_bbox_cls: 0.0052  s2.loss_bbox_reg: 0.0054
05/14 04:23:46 - mmengine - INFO - Epoch(train)  [1][  750/24827]  lr: 2.0000e-02  eta: 1 day, 1:07:59  time: 0.3023  data_time: 0.0035  memory: 4218  loss: 0.8276  loss_rpn_cls: 0.0429  loss_rpn_bbox: 0.0130  s0.loss_cls: 0.3447  s0.acc: 94.3359  s0.loss_bbox_cls: 0.1100  s0.loss_bbox_reg: 0.1529  s1.loss_cls: 0.0798  s1.acc: 97.6562  s1.loss_bbox_cls: 0.0245  s1.loss_bbox_reg: 0.0297  s2.loss_cls: 0.0202  s2.acc: 98.9258  s2.loss_bbox_cls: 0.0051  s2.loss_bbox_reg: 0.0049
05/14 04:24:01 - mmengine - INFO - Epoch(train)  [1][  800/24827]  lr: 2.0000e-02  eta: 1 day, 1:06:56  time: 0.3019  data_time: 0.0036  memory: 4218  loss: 0.8219  loss_rpn_cls: 0.0417  loss_rpn_bbox: 0.0116  s0.loss_cls: 0.3278  s0.acc: 89.6484  s0.loss_bbox_cls: 0.1162  s0.loss_bbox_reg: 0.1612  s1.loss_cls: 0.0767  s1.acc: 95.5078  s1.loss_bbox_cls: 0.0250  s1.loss_bbox_reg: 0.0311  s2.loss_cls: 0.0200  s2.acc: 98.2422  s2.loss_bbox_cls: 0.0053  s2.loss_bbox_reg: 0.0056
05/14 04:24:16 - mmengine - INFO - Epoch(train)  [1][  850/24827]  lr: 2.0000e-02  eta: 1 day, 1:06:24  time: 0.3033  data_time: 0.0035  memory: 4214  loss: 0.7161  loss_rpn_cls: 0.0330  loss_rpn_bbox: 0.0120  s0.loss_cls: 0.2683  s0.acc: 95.0195  s0.loss_bbox_cls: 0.1031  s0.loss_bbox_reg: 0.1444  s1.loss_cls: 0.0711  s1.acc: 98.1445  s1.loss_bbox_cls: 0.0240  s1.loss_bbox_reg: 0.0317  s2.loss_cls: 0.0181  s2.acc: 98.9258  s2.loss_bbox_cls: 0.0050  s2.loss_bbox_reg: 0.0055
05/14 04:24:31 - mmengine - INFO - Epoch(train)  [1][  900/24827]  lr: 2.0000e-02  eta: 1 day, 1:04:52  time: 0.2996  data_time: 0.0035  memory: 4214  loss: 0.7682  loss_rpn_cls: 0.0347  loss_rpn_bbox: 0.0103  s0.loss_cls: 0.2833  s0.acc: 97.2656  s0.loss_bbox_cls: 0.1068  s0.loss_bbox_reg: 0.1554  s1.loss_cls: 0.0805  s1.acc: 98.4375  s1.loss_bbox_cls: 0.0269  s1.loss_bbox_reg: 0.0366  s2.loss_cls: 0.0209  s2.acc: 99.2188  s2.loss_bbox_cls: 0.0059  s2.loss_bbox_reg: 0.0069
05/14 04:24:46 - mmengine - INFO - Epoch(train)  [1][  950/24827]  lr: 2.0000e-02  eta: 1 day, 1:03:51  time: 0.3010  data_time: 0.0039  memory: 4217  loss: 0.7376  loss_rpn_cls: 0.0311  loss_rpn_bbox: 0.0151  s0.loss_cls: 0.2687  s0.acc: 92.5781  s0.loss_bbox_cls: 0.1001  s0.loss_bbox_reg: 0.1460  s1.loss_cls: 0.0796  s1.acc: 96.6797  s1.loss_bbox_cls: 0.0262  s1.loss_bbox_reg: 0.0364  s2.loss_cls: 0.0213  s2.acc: 98.4375  s2.loss_bbox_cls: 0.0059  s2.loss_bbox_reg: 0.0072
05/14 04:25:01 - mmengine - INFO - Exp name: sabl_r101_voc0712_20240514_041946
05/14 04:25:01 - mmengine - INFO - Epoch(train)  [1][ 1000/24827]  lr: 2.0000e-02  eta: 1 day, 1:02:36  time: 0.2998  data_time: 0.0035  memory: 4215  loss: 0.6333  loss_rpn_cls: 0.0240  loss_rpn_bbox: 0.0114  s0.loss_cls: 0.2230  s0.acc: 96.5820  s0.loss_bbox_cls: 0.0872  s0.loss_bbox_reg: 0.1274  s1.loss_cls: 0.0709  s1.acc: 98.2422  s1.loss_bbox_cls: 0.0238  s1.loss_bbox_reg: 0.0338  s2.loss_cls: 0.0192  s2.acc: 98.8281  s2.loss_bbox_cls: 0.0057  s2.loss_bbox_reg: 0.0069
05/14 04:25:16 - mmengine - INFO - Epoch(train)  [1][ 1050/24827]  lr: 2.0000e-02  eta: 1 day, 1:01:22  time: 0.2995  data_time: 0.0035  memory: 4215  loss: 0.8217  loss_rpn_cls: 0.0389  loss_rpn_bbox: 0.0134  s0.loss_cls: 0.2961  s0.acc: 97.0703  s0.loss_bbox_cls: 0.1129  s0.loss_bbox_reg: 0.1626  s1.loss_cls: 0.0879  s1.acc: 97.6562  s1.loss_bbox_cls: 0.0290  s1.loss_bbox_reg: 0.0415  s2.loss_cls: 0.0242  s2.acc: 99.0234  s2.loss_bbox_cls: 0.0069  s2.loss_bbox_reg: 0.0084
05/14 04:25:31 - mmengine - INFO - Epoch(train)  [1][ 1100/24827]  lr: 2.0000e-02  eta: 1 day, 0:59:55  time: 0.2981  data_time: 0.0034  memory: 4217  loss: 0.8020  loss_rpn_cls: 0.0256  loss_rpn_bbox: 0.0107  s0.loss_cls: 0.2733  s0.acc: 94.9219  s0.loss_bbox_cls: 0.1030  s0.loss_bbox_reg: 0.1533  s1.loss_cls: 0.1008  s1.acc: 96.1914  s1.loss_bbox_cls: 0.0339  s1.loss_bbox_reg: 0.0505  s2.loss_cls: 0.0298  s2.acc: 98.7305  s2.loss_bbox_cls: 0.0093  s2.loss_bbox_reg: 0.0120
05/14 04:25:46 - mmengine - INFO - Epoch(train)  [1][ 1150/24827]  lr: 2.0000e-02  eta: 1 day, 0:59:37  time: 0.3030  data_time: 0.0035  memory: 4215  loss: 0.8125  loss_rpn_cls: 0.0393  loss_rpn_bbox: 0.0140  s0.loss_cls: 0.2720  s0.acc: 92.8711  s0.loss_bbox_cls: 0.1034  s0.loss_bbox_reg: 0.1527  s1.loss_cls: 0.0993  s1.acc: 96.1914  s1.loss_bbox_cls: 0.0334  s1.loss_bbox_reg: 0.0496  s2.loss_cls: 0.0289  s2.acc: 98.2422  s2.loss_bbox_cls: 0.0088  s2.loss_bbox_reg: 0.0111
05/14 04:26:01 - mmengine - INFO - Epoch(train)  [1][ 1200/24827]  lr: 2.0000e-02  eta: 1 day, 0:59:19  time: 0.3030  data_time: 0.0035  memory: 4215  loss: 0.7330  loss_rpn_cls: 0.0243  loss_rpn_bbox: 0.0085  s0.loss_cls: 0.2593  s0.acc: 95.9961  s0.loss_bbox_cls: 0.0935  s0.loss_bbox_reg: 0.1383  s1.loss_cls: 0.0924  s1.acc: 97.1680  s1.loss_bbox_cls: 0.0288  s1.loss_bbox_reg: 0.0428  s2.loss_cls: 0.0277  s2.acc: 99.1211  s2.loss_bbox_cls: 0.0076  s2.loss_bbox_reg: 0.0098
05/14 04:26:16 - mmengine - INFO - Epoch(train)  [1][ 1250/24827]  lr: 2.0000e-02  eta: 1 day, 0:58:54  time: 0.3023  data_time: 0.0035  memory: 4215  loss: 0.6617  loss_rpn_cls: 0.0286  loss_rpn_bbox: 0.0102  s0.loss_cls: 0.2258  s0.acc: 97.1680  s0.loss_bbox_cls: 0.0844  s0.loss_bbox_reg: 0.1256  s1.loss_cls: 0.0818  s1.acc: 96.9727  s1.loss_bbox_cls: 0.0256  s1.loss_bbox_reg: 0.0389  s2.loss_cls: 0.0248  s2.acc: 98.9258  s2.loss_bbox_cls: 0.0070  s2.loss_bbox_reg: 0.0089
05/14 04:26:31 - mmengine - INFO - Epoch(train)  [1][ 1300/24827]  lr: 2.0000e-02  eta: 1 day, 0:58:04  time: 0.3001  data_time: 0.0035  memory: 4214  loss: 0.7779  loss_rpn_cls: 0.0264  loss_rpn_bbox: 0.0114  s0.loss_cls: 0.2670  s0.acc: 92.5781  s0.loss_bbox_cls: 0.0965  s0.loss_bbox_reg: 0.1457  s1.loss_cls: 0.0983  s1.acc: 94.6289  s1.loss_bbox_cls: 0.0319  s1.loss_bbox_reg: 0.0503  s2.loss_cls: 0.0293  s2.acc: 97.2656  s2.loss_bbox_cls: 0.0091  s2.loss_bbox_reg: 0.0118
05/14 04:26:46 - mmengine - INFO - Epoch(train)  [1][ 1350/24827]  lr: 2.0000e-02  eta: 1 day, 0:56:54  time: 0.2980  data_time: 0.0036  memory: 4215  loss: 0.8357  loss_rpn_cls: 0.0295  loss_rpn_bbox: 0.0108  s0.loss_cls: 0.2852  s0.acc: 97.3633  s0.loss_bbox_cls: 0.1046  s0.loss_bbox_reg: 0.1591  s1.loss_cls: 0.1030  s1.acc: 97.3633  s1.loss_bbox_cls: 0.0355  s1.loss_bbox_reg: 0.0548  s2.loss_cls: 0.0310  s2.acc: 98.5352  s2.loss_bbox_cls: 0.0097  s2.loss_bbox_reg: 0.0125
05/14 04:27:01 - mmengine - INFO - Epoch(train)  [1][ 1400/24827]  lr: 2.0000e-02  eta: 1 day, 0:56:31  time: 0.3021  data_time: 0.0035  memory: 4214  loss: 0.8315  loss_rpn_cls: 0.0401  loss_rpn_bbox: 0.0118  s0.loss_cls: 0.2632  s0.acc: 96.6797  s0.loss_bbox_cls: 0.1020  s0.loss_bbox_reg: 0.1553  s1.loss_cls: 0.1048  s1.acc: 96.7773  s1.loss_bbox_cls: 0.0372  s1.loss_bbox_reg: 0.0579  s2.loss_cls: 0.0332  s2.acc: 98.4375  s2.loss_bbox_cls: 0.0113  s2.loss_bbox_reg: 0.0149
05/14 04:27:16 - mmengine - INFO - Epoch(train)  [1][ 1450/24827]  lr: 2.0000e-02  eta: 1 day, 0:56:31  time: 0.3043  data_time: 0.0034  memory: 4218  loss: 0.7637  loss_rpn_cls: 0.0219  loss_rpn_bbox: 0.0122  s0.loss_cls: 0.2362  s0.acc: 96.9727  s0.loss_bbox_cls: 0.0931  s0.loss_bbox_reg: 0.1437  s1.loss_cls: 0.1073  s1.acc: 97.3633  s1.loss_bbox_cls: 0.0352  s1.loss_bbox_reg: 0.0551  s2.loss_cls: 0.0344  s2.acc: 98.9258  s2.loss_bbox_cls: 0.0106  s2.loss_bbox_reg: 0.0140
05/14 04:27:31 - mmengine - INFO - Epoch(train)  [1][ 1500/24827]  lr: 2.0000e-02  eta: 1 day, 0:56:00  time: 0.3013  data_time: 0.0034  memory: 4214  loss: 0.7659  loss_rpn_cls: 0.0299  loss_rpn_bbox: 0.0116  s0.loss_cls: 0.2531  s0.acc: 95.2148  s0.loss_bbox_cls: 0.0924  s0.loss_bbox_reg: 0.1407  s1.loss_cls: 0.0992  s1.acc: 96.0938  s1.loss_bbox_cls: 0.0337  s1.loss_bbox_reg: 0.0519  s2.loss_cls: 0.0306  s2.acc: 98.2422  s2.loss_bbox_cls: 0.0097  s2.loss_bbox_reg: 0.0131
submitit WARNING (2024-05-14 04:27:34,044) - Bypassing signal SIGCONT
submitit ERROR (2024-05-14 04:27:34,114) - Submitted job triggered an exception

============================= JOB FEEDBACK =============================

NodeName=uc2n512
Job ID: 23594905
Cluster: uc2
User/Group: ma_ruweber/ma_ma
State: FAILED (exit code 1)
Nodes: 1
Cores per node: 10
CPU Utilized: 00:08:18
CPU Efficiency: 9.88% of 01:24:00 core-walltime
Job Wall-clock time: 00:08:24
Memory Utilized: 1.60 GB
Memory Efficiency: 1.74% of 91.80 GB
