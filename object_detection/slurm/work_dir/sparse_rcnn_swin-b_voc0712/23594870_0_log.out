submitit INFO (2024-05-14 03:49:20,884) - Starting with JobEnvironment(job_id=23594870, hostname=uc2n512.localdomain, local_rank=0(1), node=0(1), global_rank=0(1))
submitit INFO (2024-05-14 03:49:20,885) - Loading pickle: /pfs/work7/workspace/scratch/ma_ruweber-team_project_fss2024/benchmarking_robustness/object_detection/slurm/work_dir/sparse_rcnn_swin-b_voc0712/23594870_submitted.pkl
05/14 03:49:25 - mmengine - INFO - 
------------------------------------------------------------
System environment:
    sys.platform: linux
    Python: 3.10.13 (main, Sep 11 2023, 13:44:35) [GCC 11.2.0]
    CUDA available: True
    MUSA available: False
    numpy_random_seed: 124418620
    GPU 0: Tesla V100-SXM2-32GB
    CUDA_HOME: /opt/bwhpc/common/devel/cuda/11.8
    NVCC: Cuda compilation tools, release 11.8, V11.8.89
    GCC: gcc (GCC) 8.5.0 20210514 (Red Hat 8.5.0-10)
    PyTorch: 2.1.2
    PyTorch compiling details: PyTorch built with:
  - GCC 9.3
  - C++ Version: 201703
  - Intel(R) oneAPI Math Kernel Library Version 2023.1-Product Build 20230303 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v3.1.1 (Git Hash 64f6bcbcbab628e96f33a62c3e975f8535a7bde4)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - LAPACK is enabled (usually provided by MKL)
  - NNPACK is enabled
  - CPU capability usage: AVX512
  - CUDA Runtime 11.8
  - NVCC architecture flags: -gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_61,code=sm_61;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86;-gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_90,code=sm_90;-gencode;arch=compute_37,code=compute_37
  - CuDNN 8.7
  - Magma 2.6.1
  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.8, CUDNN_VERSION=8.7.0, CXX_COMPILER=/opt/rh/devtoolset-9/root/usr/bin/c++, CXX_FLAGS= -D_GLIBCXX_USE_CXX11_ABI=0 -fabi-version=11 -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -DNDEBUG -DUSE_KINETO -DLIBKINETO_NOROCTRACER -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -O2 -fPIC -Wall -Wextra -Werror=return-type -Werror=non-virtual-dtor -Werror=bool-operation -Wnarrowing -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-unused-parameter -Wno-unused-function -Wno-unused-result -Wno-strict-overflow -Wno-strict-aliasing -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=old-style-cast -Wno-invalid-partial-specialization -Wno-unused-private-field -Wno-aligned-allocation-unavailable -Wno-missing-braces -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Werror=cast-function-type -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_DISABLE_GPU_ASSERTS=ON, TORCH_VERSION=2.1.2, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, USE_ROCM=OFF, 

    TorchVision: 0.16.2
    OpenCV: 4.9.0
    MMEngine: 0.10.3

Runtime environment:
    cudnn_benchmark: False
    dist_cfg: {'backend': 'nccl'}
    mp_cfg: {'mp_start_method': 'fork', 'opencv_num_threads': 0}
    seed: 124418620
    Distributed launcher: none
    Distributed training: False
    GPU number: 1
------------------------------------------------------------

05/14 03:49:26 - mmengine - INFO - Config:
auto_scale_lr = dict(base_batch_size=16, enable=False)
backend_args = None
data_root = 'data/VOCdevkit/'
dataset_type = 'VOCDataset'
default_hooks = dict(
    checkpoint=dict(interval=1, type='CheckpointHook'),
    logger=dict(interval=50, type='LoggerHook'),
    param_scheduler=dict(type='ParamSchedulerHook'),
    sampler_seed=dict(type='DistSamplerSeedHook'),
    timer=dict(type='IterTimerHook'),
    visualization=dict(type='DetVisualizationHook'))
default_scope = 'mmdet'
env_cfg = dict(
    cudnn_benchmark=False,
    dist_cfg=dict(backend='nccl'),
    mp_cfg=dict(mp_start_method='fork', opencv_num_threads=0))
launcher = 'none'
load_from = None
log_level = 'INFO'
log_processor = dict(by_epoch=True, type='LogProcessor', window_size=50)
max_epochs = 36
model = dict(
    backbone=dict(
        attn_drop_rate=0.0,
        convert_weights=True,
        depths=[
            2,
            2,
            18,
            2,
            1,
        ],
        drop_path_rate=0.3,
        drop_rate=0.0,
        embed_dims=128,
        init_cfg=dict(
            checkpoint=
            'https://github.com/SwinTransformer/storage/releases/download/v1.0.0/swin_base_patch4_window12_384_22k.pth',
            type='Pretrained'),
        mlp_ratio=4,
        num_heads=[
            4,
            8,
            16,
            32,
            64,
        ],
        out_indices=[
            1,
            2,
            3,
            4,
        ],
        patch_norm=True,
        pretrain_img_size=384,
        qk_scale=None,
        qkv_bias=True,
        strides=[
            4,
            2,
            2,
            2,
            2,
        ],
        type='SwinTransformer',
        window_size=12,
        with_cp=True),
    data_preprocessor=dict(
        bgr_to_rgb=True,
        mean=[
            123.675,
            116.28,
            103.53,
        ],
        pad_size_divisor=32,
        std=[
            58.395,
            57.12,
            57.375,
        ],
        type='DetDataPreprocessor'),
    neck=dict(
        add_extra_convs='on_input',
        in_channels=[
            256,
            512,
            1024,
            2048,
        ],
        num_outs=4,
        out_channels=256,
        start_level=0,
        type='FPN'),
    roi_head=dict(
        bbox_head=[
            dict(
                bbox_coder=dict(
                    clip_border=False,
                    target_means=[
                        0.0,
                        0.0,
                        0.0,
                        0.0,
                    ],
                    target_stds=[
                        0.5,
                        0.5,
                        1.0,
                        1.0,
                    ],
                    type='DeltaXYWHBBoxCoder'),
                dropout=0.0,
                dynamic_conv_cfg=dict(
                    act_cfg=dict(inplace=True, type='ReLU'),
                    feat_channels=64,
                    in_channels=256,
                    input_feat_shape=7,
                    norm_cfg=dict(type='LN'),
                    out_channels=256,
                    type='DynamicConv'),
                feedforward_channels=2048,
                ffn_act_cfg=dict(inplace=True, type='ReLU'),
                in_channels=256,
                loss_bbox=dict(loss_weight=5.0, type='L1Loss'),
                loss_cls=dict(
                    alpha=0.25,
                    gamma=2.0,
                    loss_weight=2.0,
                    type='FocalLoss',
                    use_sigmoid=True),
                loss_iou=dict(loss_weight=2.0, type='GIoULoss'),
                num_classes=80,
                num_cls_fcs=1,
                num_ffn_fcs=2,
                num_heads=8,
                num_reg_fcs=3,
                type='DIIHead'),
            dict(
                bbox_coder=dict(
                    clip_border=False,
                    target_means=[
                        0.0,
                        0.0,
                        0.0,
                        0.0,
                    ],
                    target_stds=[
                        0.5,
                        0.5,
                        1.0,
                        1.0,
                    ],
                    type='DeltaXYWHBBoxCoder'),
                dropout=0.0,
                dynamic_conv_cfg=dict(
                    act_cfg=dict(inplace=True, type='ReLU'),
                    feat_channels=64,
                    in_channels=256,
                    input_feat_shape=7,
                    norm_cfg=dict(type='LN'),
                    out_channels=256,
                    type='DynamicConv'),
                feedforward_channels=2048,
                ffn_act_cfg=dict(inplace=True, type='ReLU'),
                in_channels=256,
                loss_bbox=dict(loss_weight=5.0, type='L1Loss'),
                loss_cls=dict(
                    alpha=0.25,
                    gamma=2.0,
                    loss_weight=2.0,
                    type='FocalLoss',
                    use_sigmoid=True),
                loss_iou=dict(loss_weight=2.0, type='GIoULoss'),
                num_classes=80,
                num_cls_fcs=1,
                num_ffn_fcs=2,
                num_heads=8,
                num_reg_fcs=3,
                type='DIIHead'),
            dict(
                bbox_coder=dict(
                    clip_border=False,
                    target_means=[
                        0.0,
                        0.0,
                        0.0,
                        0.0,
                    ],
                    target_stds=[
                        0.5,
                        0.5,
                        1.0,
                        1.0,
                    ],
                    type='DeltaXYWHBBoxCoder'),
                dropout=0.0,
                dynamic_conv_cfg=dict(
                    act_cfg=dict(inplace=True, type='ReLU'),
                    feat_channels=64,
                    in_channels=256,
                    input_feat_shape=7,
                    norm_cfg=dict(type='LN'),
                    out_channels=256,
                    type='DynamicConv'),
                feedforward_channels=2048,
                ffn_act_cfg=dict(inplace=True, type='ReLU'),
                in_channels=256,
                loss_bbox=dict(loss_weight=5.0, type='L1Loss'),
                loss_cls=dict(
                    alpha=0.25,
                    gamma=2.0,
                    loss_weight=2.0,
                    type='FocalLoss',
                    use_sigmoid=True),
                loss_iou=dict(loss_weight=2.0, type='GIoULoss'),
                num_classes=80,
                num_cls_fcs=1,
                num_ffn_fcs=2,
                num_heads=8,
                num_reg_fcs=3,
                type='DIIHead'),
            dict(
                bbox_coder=dict(
                    clip_border=False,
                    target_means=[
                        0.0,
                        0.0,
                        0.0,
                        0.0,
                    ],
                    target_stds=[
                        0.5,
                        0.5,
                        1.0,
                        1.0,
                    ],
                    type='DeltaXYWHBBoxCoder'),
                dropout=0.0,
                dynamic_conv_cfg=dict(
                    act_cfg=dict(inplace=True, type='ReLU'),
                    feat_channels=64,
                    in_channels=256,
                    input_feat_shape=7,
                    norm_cfg=dict(type='LN'),
                    out_channels=256,
                    type='DynamicConv'),
                feedforward_channels=2048,
                ffn_act_cfg=dict(inplace=True, type='ReLU'),
                in_channels=256,
                loss_bbox=dict(loss_weight=5.0, type='L1Loss'),
                loss_cls=dict(
                    alpha=0.25,
                    gamma=2.0,
                    loss_weight=2.0,
                    type='FocalLoss',
                    use_sigmoid=True),
                loss_iou=dict(loss_weight=2.0, type='GIoULoss'),
                num_classes=80,
                num_cls_fcs=1,
                num_ffn_fcs=2,
                num_heads=8,
                num_reg_fcs=3,
                type='DIIHead'),
            dict(
                bbox_coder=dict(
                    clip_border=False,
                    target_means=[
                        0.0,
                        0.0,
                        0.0,
                        0.0,
                    ],
                    target_stds=[
                        0.5,
                        0.5,
                        1.0,
                        1.0,
                    ],
                    type='DeltaXYWHBBoxCoder'),
                dropout=0.0,
                dynamic_conv_cfg=dict(
                    act_cfg=dict(inplace=True, type='ReLU'),
                    feat_channels=64,
                    in_channels=256,
                    input_feat_shape=7,
                    norm_cfg=dict(type='LN'),
                    out_channels=256,
                    type='DynamicConv'),
                feedforward_channels=2048,
                ffn_act_cfg=dict(inplace=True, type='ReLU'),
                in_channels=256,
                loss_bbox=dict(loss_weight=5.0, type='L1Loss'),
                loss_cls=dict(
                    alpha=0.25,
                    gamma=2.0,
                    loss_weight=2.0,
                    type='FocalLoss',
                    use_sigmoid=True),
                loss_iou=dict(loss_weight=2.0, type='GIoULoss'),
                num_classes=80,
                num_cls_fcs=1,
                num_ffn_fcs=2,
                num_heads=8,
                num_reg_fcs=3,
                type='DIIHead'),
            dict(
                bbox_coder=dict(
                    clip_border=False,
                    target_means=[
                        0.0,
                        0.0,
                        0.0,
                        0.0,
                    ],
                    target_stds=[
                        0.5,
                        0.5,
                        1.0,
                        1.0,
                    ],
                    type='DeltaXYWHBBoxCoder'),
                dropout=0.0,
                dynamic_conv_cfg=dict(
                    act_cfg=dict(inplace=True, type='ReLU'),
                    feat_channels=64,
                    in_channels=256,
                    input_feat_shape=7,
                    norm_cfg=dict(type='LN'),
                    out_channels=256,
                    type='DynamicConv'),
                feedforward_channels=2048,
                ffn_act_cfg=dict(inplace=True, type='ReLU'),
                in_channels=256,
                loss_bbox=dict(loss_weight=5.0, type='L1Loss'),
                loss_cls=dict(
                    alpha=0.25,
                    gamma=2.0,
                    loss_weight=2.0,
                    type='FocalLoss',
                    use_sigmoid=True),
                loss_iou=dict(loss_weight=2.0, type='GIoULoss'),
                num_classes=80,
                num_cls_fcs=1,
                num_ffn_fcs=2,
                num_heads=8,
                num_reg_fcs=3,
                type='DIIHead'),
        ],
        bbox_roi_extractor=dict(
            featmap_strides=[
                4,
                8,
                16,
                32,
            ],
            out_channels=256,
            roi_layer=dict(output_size=7, sampling_ratio=2, type='RoIAlign'),
            type='SingleRoIExtractor'),
        num_stages=6,
        proposal_feature_channel=256,
        stage_loss_weights=[
            1,
            1,
            1,
            1,
            1,
            1,
        ],
        type='SparseRoIHead'),
    rpn_head=dict(
        num_proposals=300,
        proposal_feature_channel=256,
        type='EmbeddingRPNHead'),
    test_cfg=dict(rcnn=dict(max_per_img=300), rpn=None),
    train_cfg=dict(
        rcnn=[
            dict(
                assigner=dict(
                    match_costs=[
                        dict(type='FocalLossCost', weight=2.0),
                        dict(box_format='xyxy', type='BBoxL1Cost', weight=5.0),
                        dict(iou_mode='giou', type='IoUCost', weight=2.0),
                    ],
                    type='HungarianAssigner'),
                pos_weight=1,
                sampler=dict(type='PseudoSampler')),
            dict(
                assigner=dict(
                    match_costs=[
                        dict(type='FocalLossCost', weight=2.0),
                        dict(box_format='xyxy', type='BBoxL1Cost', weight=5.0),
                        dict(iou_mode='giou', type='IoUCost', weight=2.0),
                    ],
                    type='HungarianAssigner'),
                pos_weight=1,
                sampler=dict(type='PseudoSampler')),
            dict(
                assigner=dict(
                    match_costs=[
                        dict(type='FocalLossCost', weight=2.0),
                        dict(box_format='xyxy', type='BBoxL1Cost', weight=5.0),
                        dict(iou_mode='giou', type='IoUCost', weight=2.0),
                    ],
                    type='HungarianAssigner'),
                pos_weight=1,
                sampler=dict(type='PseudoSampler')),
            dict(
                assigner=dict(
                    match_costs=[
                        dict(type='FocalLossCost', weight=2.0),
                        dict(box_format='xyxy', type='BBoxL1Cost', weight=5.0),
                        dict(iou_mode='giou', type='IoUCost', weight=2.0),
                    ],
                    type='HungarianAssigner'),
                pos_weight=1,
                sampler=dict(type='PseudoSampler')),
            dict(
                assigner=dict(
                    match_costs=[
                        dict(type='FocalLossCost', weight=2.0),
                        dict(box_format='xyxy', type='BBoxL1Cost', weight=5.0),
                        dict(iou_mode='giou', type='IoUCost', weight=2.0),
                    ],
                    type='HungarianAssigner'),
                pos_weight=1,
                sampler=dict(type='PseudoSampler')),
            dict(
                assigner=dict(
                    match_costs=[
                        dict(type='FocalLossCost', weight=2.0),
                        dict(box_format='xyxy', type='BBoxL1Cost', weight=5.0),
                        dict(iou_mode='giou', type='IoUCost', weight=2.0),
                    ],
                    type='HungarianAssigner'),
                pos_weight=1,
                sampler=dict(type='PseudoSampler')),
        ],
        rpn=None),
    type='SparseRCNN')
num_proposals = 300
num_stages = 6
optim_wrapper = dict(
    clip_grad=dict(max_norm=1, norm_type=2),
    optimizer=dict(lr=2.5e-05, type='AdamW', weight_decay=0.0001),
    type='OptimWrapper')
param_scheduler = [
    dict(
        begin=0, by_epoch=False, end=500, start_factor=0.001, type='LinearLR'),
    dict(
        begin=0,
        by_epoch=True,
        end=36,
        gamma=0.1,
        milestones=[
            27,
            33,
        ],
        type='MultiStepLR'),
]
resume = False
test_cfg = dict(type='TestLoop')
test_dataloader = dict(
    batch_size=1,
    dataset=dict(
        ann_file='VOC2007/ImageSets/Main/test.txt',
        backend_args=None,
        data_prefix=dict(sub_data_root='VOC2007/'),
        data_root='data/VOCdevkit/',
        pipeline=[
            dict(backend_args=None, type='LoadImageFromFile'),
            dict(keep_ratio=True, scale=(
                1000,
                600,
            ), type='Resize'),
            dict(type='LoadAnnotations', with_bbox=True),
            dict(
                meta_keys=(
                    'img_id',
                    'img_path',
                    'ori_shape',
                    'img_shape',
                    'scale_factor',
                ),
                type='PackDetInputs'),
        ],
        test_mode=True,
        type='VOCDataset'),
    drop_last=False,
    num_workers=2,
    persistent_workers=True,
    sampler=dict(shuffle=False, type='DefaultSampler'))
test_evaluator = dict(eval_mode='11points', metric='mAP', type='VOCMetric')
test_pipeline = [
    dict(backend_args=None, type='LoadImageFromFile'),
    dict(keep_ratio=True, scale=(
        1000,
        600,
    ), type='Resize'),
    dict(type='LoadAnnotations', with_bbox=True),
    dict(
        meta_keys=(
            'img_id',
            'img_path',
            'ori_shape',
            'img_shape',
            'scale_factor',
        ),
        type='PackDetInputs'),
]
train_cfg = dict(max_epochs=36, type='EpochBasedTrainLoop', val_interval=1)
train_dataloader = dict(
    batch_sampler=dict(type='AspectRatioBatchSampler'),
    batch_size=2,
    dataset=dict(
        dataset=dict(
            datasets=[
                dict(
                    ann_file='VOC2007/ImageSets/Main/trainval.txt',
                    backend_args=None,
                    data_prefix=dict(sub_data_root='VOC2007/'),
                    data_root='data/VOCdevkit/',
                    filter_cfg=dict(
                        bbox_min_size=32, filter_empty_gt=True, min_size=32),
                    pipeline=[
                        dict(backend_args=None, type='LoadImageFromFile'),
                        dict(type='LoadAnnotations', with_bbox=True),
                        dict(
                            keep_ratio=True,
                            scale=(
                                1000,
                                600,
                            ),
                            type='Resize'),
                        dict(prob=0.5, type='RandomFlip'),
                        dict(type='PackDetInputs'),
                    ],
                    type='VOCDataset'),
                dict(
                    ann_file='VOC2012/ImageSets/Main/trainval.txt',
                    backend_args=None,
                    data_prefix=dict(sub_data_root='VOC2012/'),
                    data_root='data/VOCdevkit/',
                    filter_cfg=dict(
                        bbox_min_size=32, filter_empty_gt=True, min_size=32),
                    pipeline=[
                        dict(backend_args=None, type='LoadImageFromFile'),
                        dict(type='LoadAnnotations', with_bbox=True),
                        dict(
                            keep_ratio=True,
                            scale=(
                                1000,
                                600,
                            ),
                            type='Resize'),
                        dict(prob=0.5, type='RandomFlip'),
                        dict(type='PackDetInputs'),
                    ],
                    type='VOCDataset'),
            ],
            ignore_keys=[
                'dataset_type',
            ],
            type='ConcatDataset'),
        times=3,
        type='RepeatDataset'),
    num_workers=2,
    persistent_workers=True,
    sampler=dict(shuffle=True, type='DefaultSampler'))
train_pipeline = [
    dict(backend_args=None, type='LoadImageFromFile'),
    dict(type='LoadAnnotations', with_bbox=True),
    dict(keep_ratio=True, scale=(
        1000,
        600,
    ), type='Resize'),
    dict(prob=0.5, type='RandomFlip'),
    dict(type='PackDetInputs'),
]
val_cfg = dict(type='ValLoop')
val_dataloader = dict(
    batch_size=1,
    dataset=dict(
        ann_file='VOC2007/ImageSets/Main/test.txt',
        backend_args=None,
        data_prefix=dict(sub_data_root='VOC2007/'),
        data_root='data/VOCdevkit/',
        pipeline=[
            dict(backend_args=None, type='LoadImageFromFile'),
            dict(keep_ratio=True, scale=(
                1000,
                600,
            ), type='Resize'),
            dict(type='LoadAnnotations', with_bbox=True),
            dict(
                meta_keys=(
                    'img_id',
                    'img_path',
                    'ori_shape',
                    'img_shape',
                    'scale_factor',
                ),
                type='PackDetInputs'),
        ],
        test_mode=True,
        type='VOCDataset'),
    drop_last=False,
    num_workers=2,
    persistent_workers=True,
    sampler=dict(shuffle=False, type='DefaultSampler'))
val_evaluator = dict(eval_mode='11points', metric='mAP', type='VOCMetric')
vis_backends = [
    dict(type='LocalVisBackend'),
]
visualizer = dict(
    name='visualizer',
    type='DetLocalVisualizer',
    vis_backends=[
        dict(type='LocalVisBackend'),
    ])
work_dir = 'slurm/results/sparse_rcnn_swin-b_voc0712'

05/14 03:49:29 - mmengine - INFO - Distributed training is not used, all SyncBatchNorm (SyncBN) layers in the model will be automatically reverted to BatchNormXd layers if they are used.
05/14 03:49:29 - mmengine - INFO - Hooks will be executed in the following order:
before_run:
(VERY_HIGH   ) RuntimeInfoHook                    
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
before_train:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_train_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(NORMAL      ) DistSamplerSeedHook                
 -------------------- 
before_train_iter:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_train_iter:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
after_train_epoch:
(NORMAL      ) IterTimerHook                      
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_val:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
before_val_epoch:
(NORMAL      ) IterTimerHook                      
 -------------------- 
before_val_iter:
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_val_iter:
(NORMAL      ) IterTimerHook                      
(NORMAL      ) DetVisualizationHook               
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_val_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
after_val:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
after_train:
(VERY_HIGH   ) RuntimeInfoHook                    
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_test:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
before_test_epoch:
(NORMAL      ) IterTimerHook                      
 -------------------- 
before_test_iter:
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_test_iter:
(NORMAL      ) IterTimerHook                      
(NORMAL      ) DetVisualizationHook               
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_test_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_test:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
after_run:
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
05/14 03:49:38 - mmengine - INFO - Loads checkpoint by http backend from path: https://github.com/SwinTransformer/storage/releases/download/v1.0.0/swin_base_patch4_window12_384_22k.pth
05/14 03:49:39 - mmengine - WARNING - "FileClient" will be deprecated in future. Please use io functions in https://mmengine.readthedocs.io/en/latest/api/fileio.html#file-io
05/14 03:49:39 - mmengine - WARNING - "HardDiskBackend" is the alias of "LocalBackend" and the former will be deprecated in future.
05/14 03:49:39 - mmengine - INFO - Checkpoints will be saved to /pfs/work7/workspace/scratch/ma_ruweber-team_project_fss2024/benchmarking_robustness/object_detection/slurm/results/sparse_rcnn_swin-b_voc0712.
05/14 03:50:08 - mmengine - INFO - Epoch(train)  [1][   50/24827]  lr: 2.4775e-06  eta: 6 days, 2:25:22  time: 0.5898  data_time: 0.0107  memory: 4764  grad_norm: 92810.1668  loss: 41.1820  s0.loss_cls: 2.2799  s0.pos_acc: 0.0000  s0.loss_bbox: 2.3981  s0.loss_iou: 1.2691  s1.loss_cls: 2.3622  s1.pos_acc: 0.0000  s1.loss_bbox: 3.0672  s1.loss_iou: 1.4331  s2.loss_cls: 2.6659  s2.pos_acc: 0.0000  s2.loss_bbox: 2.5495  s2.loss_iou: 1.4298  s3.loss_cls: 3.1282  s3.pos_acc: 0.0000  s3.loss_bbox: 2.5213  s3.loss_iou: 1.5020  s4.loss_cls: 2.8892  s4.pos_acc: 0.0000  s4.loss_bbox: 2.6753  s4.loss_iou: 1.5145  s5.loss_cls: 2.7342  s5.pos_acc: 0.0000  s5.loss_bbox: 3.0701  s5.loss_iou: 1.6924
05/14 03:50:37 - mmengine - INFO - Epoch(train)  [1][  100/24827]  lr: 4.9800e-06  eta: 6 days, 0:47:55  time: 0.5768  data_time: 0.0038  memory: 4764  grad_norm: 70563.8208  loss: 37.7011  s0.loss_cls: 2.2976  s0.pos_acc: 50.0000  s0.loss_bbox: 2.2291  s0.loss_iou: 1.2629  s1.loss_cls: 2.3544  s1.pos_acc: 25.0000  s1.loss_bbox: 2.6355  s1.loss_iou: 1.3189  s2.loss_cls: 2.5557  s2.pos_acc: 0.0000  s2.loss_bbox: 2.1823  s2.loss_iou: 1.3313  s3.loss_cls: 2.9500  s3.pos_acc: 0.0000  s3.loss_bbox: 2.2052  s3.loss_iou: 1.4465  s4.loss_cls: 2.6532  s4.pos_acc: 0.0000  s4.loss_bbox: 2.2965  s4.loss_iou: 1.4521  s5.loss_cls: 2.5963  s5.pos_acc: 0.0000  s5.loss_bbox: 2.4202  s5.loss_iou: 1.5132
05/14 03:51:06 - mmengine - INFO - Epoch(train)  [1][  150/24827]  lr: 7.4825e-06  eta: 6 days, 0:31:34  time: 0.5801  data_time: 0.0039  memory: 4764  grad_norm: 45594.2900  loss: 33.6004  s0.loss_cls: 2.2940  s0.pos_acc: 0.0000  s0.loss_bbox: 1.9462  s0.loss_iou: 1.1954  s1.loss_cls: 2.3645  s1.pos_acc: 33.3333  s1.loss_bbox: 1.8313  s1.loss_iou: 1.1749  s2.loss_cls: 2.4178  s2.pos_acc: 33.3333  s2.loss_bbox: 1.7694  s2.loss_iou: 1.2575  s3.loss_cls: 2.6624  s3.pos_acc: 0.0000  s3.loss_bbox: 2.0265  s3.loss_iou: 1.4427  s4.loss_cls: 2.3441  s4.pos_acc: 33.3333  s4.loss_bbox: 1.9648  s4.loss_iou: 1.3636  s5.loss_cls: 2.3139  s5.pos_acc: 33.3333  s5.loss_bbox: 1.8948  s5.loss_iou: 1.3367
05/14 03:51:35 - mmengine - INFO - Epoch(train)  [1][  200/24827]  lr: 9.9850e-06  eta: 6 days, 0:29:51  time: 0.5819  data_time: 0.0038  memory: 4764  grad_norm: 23461.3013  loss: 31.6383  s0.loss_cls: 2.2831  s0.pos_acc: 0.0000  s0.loss_bbox: 1.5398  s0.loss_iou: 1.0023  s1.loss_cls: 2.2218  s1.pos_acc: 25.0000  s1.loss_bbox: 1.6411  s1.loss_iou: 1.0320  s2.loss_cls: 2.3221  s2.pos_acc: 0.0000  s2.loss_bbox: 1.8335  s2.loss_iou: 1.1684  s3.loss_cls: 2.5519  s3.pos_acc: 0.0000  s3.loss_bbox: 1.9782  s3.loss_iou: 1.2571  s4.loss_cls: 2.2451  s4.pos_acc: 0.0000  s4.loss_bbox: 1.8041  s4.loss_iou: 1.1582  s5.loss_cls: 2.2570  s5.pos_acc: 0.0000  s5.loss_bbox: 2.1189  s5.loss_iou: 1.2238
05/14 03:52:04 - mmengine - INFO - Epoch(train)  [1][  250/24827]  lr: 1.2487e-05  eta: 6 days, 0:20:41  time: 0.5792  data_time: 0.0038  memory: 4764  grad_norm: 11740.7288  loss: 29.8815  s0.loss_cls: 2.1556  s0.pos_acc: 0.0000  s0.loss_bbox: 1.5311  s0.loss_iou: 1.0784  s1.loss_cls: 2.1109  s1.pos_acc: 0.0000  s1.loss_bbox: 1.5037  s1.loss_iou: 1.0966  s2.loss_cls: 2.2090  s2.pos_acc: 0.0000  s2.loss_bbox: 1.5654  s2.loss_iou: 1.1554  s3.loss_cls: 2.3840  s3.pos_acc: 0.0000  s3.loss_bbox: 1.6124  s3.loss_iou: 1.1976  s4.loss_cls: 2.1474  s4.pos_acc: 0.0000  s4.loss_bbox: 1.6980  s4.loss_iou: 1.2194  s5.loss_cls: 2.2199  s5.pos_acc: 0.0000  s5.loss_bbox: 1.7696  s5.loss_iou: 1.2272
05/14 03:52:33 - mmengine - INFO - Epoch(train)  [1][  300/24827]  lr: 1.4990e-05  eta: 6 days, 0:05:22  time: 0.5756  data_time: 0.0037  memory: 4726  grad_norm: 8663.1616  loss: 30.0300  s0.loss_cls: 2.0096  s0.pos_acc: 0.0000  s0.loss_bbox: 1.5874  s0.loss_iou: 1.0564  s1.loss_cls: 2.0633  s1.pos_acc: 0.0000  s1.loss_bbox: 1.5737  s1.loss_iou: 1.0760  s2.loss_cls: 2.1272  s2.pos_acc: 50.0000  s2.loss_bbox: 1.6457  s2.loss_iou: 1.0848  s3.loss_cls: 2.1595  s3.pos_acc: 50.0000  s3.loss_bbox: 1.7881  s3.loss_iou: 1.1529  s4.loss_cls: 1.9458  s4.pos_acc: 50.0000  s4.loss_bbox: 2.0170  s4.loss_iou: 1.2325  s5.loss_cls: 1.9994  s5.pos_acc: 50.0000  s5.loss_bbox: 2.1896  s5.loss_iou: 1.3209
05/14 03:53:02 - mmengine - INFO - Epoch(train)  [1][  350/24827]  lr: 1.7492e-05  eta: 6 days, 0:06:30  time: 0.5813  data_time: 0.0039  memory: 4764  grad_norm: 3443.9000  loss: 28.8643  s0.loss_cls: 2.0444  s0.pos_acc: 0.0000  s0.loss_bbox: 1.5028  s0.loss_iou: 1.0391  s1.loss_cls: 2.0027  s1.pos_acc: 0.0000  s1.loss_bbox: 1.5651  s1.loss_iou: 1.0936  s2.loss_cls: 1.9804  s2.pos_acc: 0.0000  s2.loss_bbox: 1.5932  s2.loss_iou: 1.0741  s3.loss_cls: 2.0200  s3.pos_acc: 0.0000  s3.loss_bbox: 1.6390  s3.loss_iou: 1.0743  s4.loss_cls: 1.9479  s4.pos_acc: 0.0000  s4.loss_bbox: 1.7399  s4.loss_iou: 1.1550  s5.loss_cls: 1.9313  s5.pos_acc: 0.0000  s5.loss_bbox: 2.0975  s5.loss_iou: 1.3640
05/14 03:53:31 - mmengine - INFO - Epoch(train)  [1][  400/24827]  lr: 1.9995e-05  eta: 5 days, 23:52:54  time: 0.5736  data_time: 0.0039  memory: 4764  grad_norm: 3154.6519  loss: 32.0642  s0.loss_cls: 2.1070  s0.pos_acc: 0.0000  s0.loss_bbox: 1.9976  s0.loss_iou: 1.1624  s1.loss_cls: 1.9590  s1.pos_acc: 0.0000  s1.loss_bbox: 1.6897  s1.loss_iou: 1.0871  s2.loss_cls: 2.0190  s2.pos_acc: 0.0000  s2.loss_bbox: 1.7013  s2.loss_iou: 1.0914  s3.loss_cls: 2.0085  s3.pos_acc: 33.3333  s3.loss_bbox: 2.1509  s3.loss_iou: 1.2978  s4.loss_cls: 1.9712  s4.pos_acc: 33.3333  s4.loss_bbox: 2.4133  s4.loss_iou: 1.3589  s5.loss_cls: 2.0304  s5.pos_acc: 0.0000  s5.loss_bbox: 2.5756  s5.loss_iou: 1.4432
05/14 03:53:59 - mmengine - INFO - Epoch(train)  [1][  450/24827]  lr: 2.2497e-05  eta: 5 days, 23:44:34  time: 0.5751  data_time: 0.0037  memory: 4764  grad_norm: 2096.4272  loss: 29.0330  s0.loss_cls: 1.9806  s0.pos_acc: 75.0000  s0.loss_bbox: 1.5997  s0.loss_iou: 1.1259  s1.loss_cls: 1.9209  s1.pos_acc: 50.0000  s1.loss_bbox: 1.3891  s1.loss_iou: 1.0612  s2.loss_cls: 1.8919  s2.pos_acc: 50.0000  s2.loss_bbox: 1.5190  s2.loss_iou: 1.1326  s3.loss_cls: 1.8665  s3.pos_acc: 50.0000  s3.loss_bbox: 1.7612  s3.loss_iou: 1.2371  s4.loss_cls: 1.8509  s4.pos_acc: 50.0000  s4.loss_bbox: 1.9485  s4.loss_iou: 1.3068  s5.loss_cls: 1.9084  s5.pos_acc: 50.0000  s5.loss_bbox: 2.1302  s5.loss_iou: 1.4025
05/14 03:54:29 - mmengine - INFO - Epoch(train)  [1][  500/24827]  lr: 2.5000e-05  eta: 5 days, 23:48:55  time: 0.5825  data_time: 0.0037  memory: 4764  grad_norm: 1401.7175  loss: 30.0056  s0.loss_cls: 1.9699  s0.pos_acc: 0.0000  s0.loss_bbox: 1.7024  s0.loss_iou: 1.0755  s1.loss_cls: 1.9278  s1.pos_acc: 0.0000  s1.loss_bbox: 1.5824  s1.loss_iou: 1.0332  s2.loss_cls: 1.9417  s2.pos_acc: 0.0000  s2.loss_bbox: 1.6759  s2.loss_iou: 1.0936  s3.loss_cls: 1.9102  s3.pos_acc: 0.0000  s3.loss_bbox: 1.9024  s3.loss_iou: 1.1558  s4.loss_cls: 1.8815  s4.pos_acc: 0.0000  s4.loss_bbox: 2.3462  s4.loss_iou: 1.4315  s5.loss_cls: 1.8880  s5.pos_acc: 0.0000  s5.loss_bbox: 2.1665  s5.loss_iou: 1.3210
05/14 03:54:57 - mmengine - INFO - Epoch(train)  [1][  550/24827]  lr: 2.5000e-05  eta: 5 days, 23:47:03  time: 0.5786  data_time: 0.0036  memory: 4764  grad_norm: 829.9165  loss: 28.5146  s0.loss_cls: 1.8478  s0.pos_acc: 85.7143  s0.loss_bbox: 1.6267  s0.loss_iou: 1.0530  s1.loss_cls: 1.7730  s1.pos_acc: 71.4286  s1.loss_bbox: 1.6413  s1.loss_iou: 1.0643  s2.loss_cls: 1.7360  s2.pos_acc: 85.7143  s2.loss_bbox: 1.5251  s2.loss_iou: 1.0130  s3.loss_cls: 1.7530  s3.pos_acc: 71.4286  s3.loss_bbox: 1.9094  s3.loss_iou: 1.1383  s4.loss_cls: 1.7551  s4.pos_acc: 0.0000  s4.loss_bbox: 2.0349  s4.loss_iou: 1.2228  s5.loss_cls: 1.7830  s5.pos_acc: 85.7143  s5.loss_bbox: 2.3174  s5.loss_iou: 1.3204
05/14 03:55:27 - mmengine - INFO - Epoch(train)  [1][  600/24827]  lr: 2.5000e-05  eta: 5 days, 23:53:13  time: 0.5849  data_time: 0.0040  memory: 4764  grad_norm: 19125403.6296  loss: 554035.6559  s0.loss_cls: 92562.3964  s0.pos_acc: 0.0000  s0.loss_bbox: 1.5111  s0.loss_iou: 0.9968  s1.loss_cls: 97649.8253  s1.pos_acc: 20.0000  s1.loss_bbox: 1.6301  s1.loss_iou: 1.0719  s2.loss_cls: 77154.1635  s2.pos_acc: 20.0000  s2.loss_bbox: 1.7872  s2.loss_iou: 1.1381  s3.loss_cls: 118157.9335  s3.pos_acc: 20.0000  s3.loss_bbox: 2.1078  s3.loss_iou: 1.2129  s4.loss_cls: 85629.3079  s4.pos_acc: 20.0000  s4.loss_bbox: 2.1003  s4.loss_iou: 1.3184  s5.loss_cls: 82863.1645  s5.pos_acc: 0.0000  s5.loss_bbox: 2.4512  s5.loss_iou: 1.5388
05/14 03:55:55 - mmengine - INFO - Epoch(train)  [1][  650/24827]  lr: 2.5000e-05  eta: 5 days, 23:48:11  time: 0.5760  data_time: 0.0039  memory: 4764  grad_norm: 567.3354  loss: 26.5611  s0.loss_cls: 1.8185  s0.pos_acc: 40.0000  s0.loss_bbox: 1.5045  s0.loss_iou: 1.0619  s1.loss_cls: 1.8321  s1.pos_acc: 60.0000  s1.loss_bbox: 1.3576  s1.loss_iou: 0.9893  s2.loss_cls: 1.8035  s2.pos_acc: 20.0000  s2.loss_bbox: 1.6182  s2.loss_iou: 1.1395  s3.loss_cls: 1.8525  s3.pos_acc: 0.0000  s3.loss_bbox: 1.3989  s3.loss_iou: 1.0245  s4.loss_cls: 1.7918  s4.pos_acc: 40.0000  s4.loss_bbox: 1.5089  s4.loss_iou: 1.0730  s5.loss_cls: 1.8368  s5.pos_acc: 20.0000  s5.loss_bbox: 1.7630  s5.loss_iou: 1.1868
05/14 03:56:24 - mmengine - INFO - Epoch(train)  [1][  700/24827]  lr: 2.5000e-05  eta: 5 days, 23:45:01  time: 0.5771  data_time: 0.0035  memory: 4764  grad_norm: 567.2710  loss: 26.8398  s0.loss_cls: 1.8855  s0.pos_acc: 20.0000  s0.loss_bbox: 1.2878  s0.loss_iou: 0.9554  s1.loss_cls: 1.8187  s1.pos_acc: 20.0000  s1.loss_bbox: 1.3785  s1.loss_iou: 1.0319  s2.loss_cls: 1.7836  s2.pos_acc: 20.0000  s2.loss_bbox: 1.4813  s2.loss_iou: 1.1082  s3.loss_cls: 1.8039  s3.pos_acc: 20.0000  s3.loss_bbox: 1.6781  s3.loss_iou: 1.1840  s4.loss_cls: 1.7574  s4.pos_acc: 20.0000  s4.loss_bbox: 1.6673  s4.loss_iou: 1.1752  s5.loss_cls: 1.7966  s5.pos_acc: 20.0000  s5.loss_bbox: 1.8130  s5.loss_iou: 1.2333
05/14 03:56:53 - mmengine - INFO - Epoch(train)  [1][  750/24827]  lr: 2.5000e-05  eta: 5 days, 23:34:20  time: 0.5692  data_time: 0.0036  memory: 4764  grad_norm: 536.7034  loss: 25.5706  s0.loss_cls: 1.8540  s0.pos_acc: 0.0000  s0.loss_bbox: 1.3467  s0.loss_iou: 0.9323  s1.loss_cls: 1.8547  s1.pos_acc: 0.0000  s1.loss_bbox: 1.3554  s1.loss_iou: 0.9583  s2.loss_cls: 1.7974  s2.pos_acc: 0.0000  s2.loss_bbox: 1.3853  s2.loss_iou: 0.9726  s3.loss_cls: 1.8173  s3.pos_acc: 0.0000  s3.loss_bbox: 1.4831  s3.loss_iou: 1.0139  s4.loss_cls: 1.8342  s4.pos_acc: 0.0000  s4.loss_bbox: 1.5447  s4.loss_iou: 1.0413  s5.loss_cls: 1.8303  s5.pos_acc: 0.0000  s5.loss_bbox: 1.5134  s5.loss_iou: 1.0356
submitit WARNING (2024-05-14 03:57:04,664) - Bypassing signal SIGCONT
submitit ERROR (2024-05-14 03:57:04,671) - Submitted job triggered an exception

============================= JOB FEEDBACK =============================

NodeName=uc2n512
Job ID: 23594870
Cluster: uc2
User/Group: ma_ruweber/ma_ma
State: FAILED (exit code 1)
Nodes: 1
Cores per node: 10
CPU Utilized: 00:07:55
CPU Efficiency: 9.56% of 01:22:50 core-walltime
Job Wall-clock time: 00:08:17
Memory Utilized: 1.87 GB
Memory Efficiency: 2.04% of 91.80 GB
