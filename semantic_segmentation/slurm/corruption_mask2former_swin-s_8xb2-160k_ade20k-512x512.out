Started at Sat Sep 21 01:00:48 CEST 2024
Processing corruption type: gaussian_noise
09/21 01:00:57 - mmengine - INFO - 
------------------------------------------------------------
System environment:
    sys.platform: linux
    Python: 3.10.13 | packaged by conda-forge | (main, Dec 23 2023, 15:36:39) [GCC 12.3.0]
    CUDA available: True
    MUSA available: False
    numpy_random_seed: 1457984759
    GPU 0: Tesla V100-SXM2-32GB
    CUDA_HOME: /opt/bwhpc/common/devel/cuda/11.7
    NVCC: Cuda compilation tools, release 11.7, V11.7.99
    GCC: gcc (GCC) 8.5.0 20210514 (Red Hat 8.5.0-18)
    PyTorch: 1.13.1
    PyTorch compiling details: PyTorch built with:
  - GCC 9.3
  - C++ Version: 201402
  - Intel(R) oneAPI Math Kernel Library Version 2023.1-Product Build 20230303 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v2.6.0 (Git Hash 52b5f107dd9cf10910aaa19cb47f3abf9b349815)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - LAPACK is enabled (usually provided by MKL)
  - NNPACK is enabled
  - CPU capability usage: AVX2
  - CUDA Runtime 11.7
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_61,code=sm_61;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86;-gencode;arch=compute_37,code=compute_37
  - CuDNN 8.5
  - Magma 2.6.1
  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.7, CUDNN_VERSION=8.5.0, CXX_COMPILER=/opt/rh/devtoolset-9/root/usr/bin/c++, CXX_FLAGS= -fabi-version=11 -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -DEDGE_PROFILER_USE_KINETO -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Werror=non-virtual-dtor -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wunused-local-typedefs -Wno-unused-parameter -Wno-unused-function -Wno-unused-result -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Werror=cast-function-type -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.13.1, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, USE_ROCM=OFF, 

    TorchVision: 0.14.1
    OpenCV: 3.4.18
    MMEngine: 0.10.4

Runtime environment:
    cudnn_benchmark: True
    mp_cfg: {'mp_start_method': 'fork', 'opencv_num_threads': 0}
    dist_cfg: {'backend': 'nccl'}
    seed: 1457984759
    Distributed launcher: none
    Distributed training: False
    GPU number: 1
------------------------------------------------------------

09/21 01:00:58 - mmengine - INFO - Config:
auto_scale_lr = dict(base_batch_size=16, enable=False)
backbone_embed_multi = dict(decay_mult=0.0, lr_mult=0.1)
backbone_norm_multi = dict(decay_mult=0.0, lr_mult=0.1)
crop_size = (
    512,
    512,
)
custom_imports = dict(allow_failed_imports=False, imports='mmdet.models')
custom_keys = dict({
    'absolute_pos_embed':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone':
    dict(decay_mult=1.0, lr_mult=0.1),
    'backbone.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.patch_embed.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.0.blocks.0.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.0.blocks.1.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.0.downsample.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.1.blocks.0.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.1.blocks.1.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.1.downsample.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.0.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.1.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.10.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.11.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.12.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.13.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.14.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.15.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.16.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.17.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.2.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.3.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.4.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.5.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.6.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.7.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.8.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.9.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.downsample.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.3.blocks.0.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.3.blocks.1.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'level_embed':
    dict(decay_mult=0.0, lr_mult=1.0),
    'query_embed':
    dict(decay_mult=0.0, lr_mult=1.0),
    'query_feat':
    dict(decay_mult=0.0, lr_mult=1.0),
    'relative_position_bias_table':
    dict(decay_mult=0.0, lr_mult=0.1)
})
data_root = 'data/ade/ADEChallengeData2016'
dataset_type = 'ADE20KDataset'
default_hooks = dict(
    checkpoint=dict(
        by_epoch=False, interval=5000, save_best='mIoU',
        type='CheckpointHook'),
    logger=dict(interval=50, log_metric_by_epoch=False, type='LoggerHook'),
    param_scheduler=dict(type='ParamSchedulerHook'),
    sampler_seed=dict(type='DistSamplerSeedHook'),
    timer=dict(type='IterTimerHook'),
    visualization=dict(type='SegVisualizationHook'))
default_scope = 'mmseg'
depths = [
    2,
    2,
    18,
    2,
]
embed_multi = dict(decay_mult=0.0, lr_mult=1.0)
env_cfg = dict(
    cudnn_benchmark=True,
    dist_cfg=dict(backend='nccl'),
    mp_cfg=dict(mp_start_method='fork', opencv_num_threads=0))
img_ratios = [
    0.5,
    0.75,
    1.0,
    1.25,
    1.5,
    1.75,
]
launcher = 'none'
load_from = '../checkpoint_files/ade20k/mask2former/mask2former_swin-s_8xb2-160k_ade20k-512x512_20221204_143905-e715144e.pth'
log_level = 'INFO'
log_processor = dict(by_epoch=False)
model = dict(
    backbone=dict(
        attn_drop_rate=0.0,
        depths=[
            2,
            2,
            18,
            2,
        ],
        drop_path_rate=0.3,
        drop_rate=0.0,
        embed_dims=96,
        frozen_stages=-1,
        init_cfg=dict(
            checkpoint=
            'https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/swin/swin_small_patch4_window7_224_20220317-7ba6d6dd.pth',
            type='Pretrained'),
        mlp_ratio=4,
        num_heads=[
            3,
            6,
            12,
            24,
        ],
        out_indices=(
            0,
            1,
            2,
            3,
        ),
        patch_norm=True,
        qk_scale=None,
        qkv_bias=True,
        type='SwinTransformer',
        window_size=7,
        with_cp=False),
    data_preprocessor=dict(
        bgr_to_rgb=True,
        corruption='gaussian_noise',
        mean=[
            123.675,
            116.28,
            103.53,
        ],
        pad_val=0,
        seg_pad_val=255,
        size=(
            512,
            512,
        ),
        std=[
            58.395,
            57.12,
            57.375,
        ],
        test_cfg=dict(size_divisor=32),
        type='SegDataPreProcessor'),
    decode_head=dict(
        align_corners=False,
        enforce_decoder_input_project=False,
        feat_channels=256,
        in_channels=[
            96,
            192,
            384,
            768,
        ],
        loss_cls=dict(
            class_weight=[
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                0.1,
            ],
            loss_weight=2.0,
            reduction='mean',
            type='mmdet.CrossEntropyLoss',
            use_sigmoid=False),
        loss_dice=dict(
            activate=True,
            eps=1.0,
            loss_weight=5.0,
            naive_dice=True,
            reduction='mean',
            type='mmdet.DiceLoss',
            use_sigmoid=True),
        loss_mask=dict(
            loss_weight=5.0,
            reduction='mean',
            type='mmdet.CrossEntropyLoss',
            use_sigmoid=True),
        num_classes=150,
        num_queries=100,
        num_transformer_feat_level=3,
        out_channels=256,
        pixel_decoder=dict(
            act_cfg=dict(type='ReLU'),
            encoder=dict(
                init_cfg=None,
                layer_cfg=dict(
                    ffn_cfg=dict(
                        act_cfg=dict(inplace=True, type='ReLU'),
                        embed_dims=256,
                        feedforward_channels=1024,
                        ffn_drop=0.0,
                        num_fcs=2),
                    self_attn_cfg=dict(
                        batch_first=True,
                        dropout=0.0,
                        embed_dims=256,
                        im2col_step=64,
                        init_cfg=None,
                        norm_cfg=None,
                        num_heads=8,
                        num_levels=3,
                        num_points=4)),
                num_layers=6),
            init_cfg=None,
            norm_cfg=dict(num_groups=32, type='GN'),
            num_outs=3,
            positional_encoding=dict(normalize=True, num_feats=128),
            type='mmdet.MSDeformAttnPixelDecoder'),
        positional_encoding=dict(normalize=True, num_feats=128),
        strides=[
            4,
            8,
            16,
            32,
        ],
        train_cfg=dict(
            assigner=dict(
                match_costs=[
                    dict(type='mmdet.ClassificationCost', weight=2.0),
                    dict(
                        type='mmdet.CrossEntropyLossCost',
                        use_sigmoid=True,
                        weight=5.0),
                    dict(
                        eps=1.0,
                        pred_act=True,
                        type='mmdet.DiceCost',
                        weight=5.0),
                ],
                type='mmdet.HungarianAssigner'),
            importance_sample_ratio=0.75,
            num_points=12544,
            oversample_ratio=3.0,
            sampler=dict(type='mmdet.MaskPseudoSampler')),
        transformer_decoder=dict(
            init_cfg=None,
            layer_cfg=dict(
                cross_attn_cfg=dict(
                    attn_drop=0.0,
                    batch_first=True,
                    dropout_layer=None,
                    embed_dims=256,
                    num_heads=8,
                    proj_drop=0.0),
                ffn_cfg=dict(
                    act_cfg=dict(inplace=True, type='ReLU'),
                    add_identity=True,
                    dropout_layer=None,
                    embed_dims=256,
                    feedforward_channels=2048,
                    ffn_drop=0.0,
                    num_fcs=2),
                self_attn_cfg=dict(
                    attn_drop=0.0,
                    batch_first=True,
                    dropout_layer=None,
                    embed_dims=256,
                    num_heads=8,
                    proj_drop=0.0)),
            num_layers=9,
            return_intermediate=True),
        type='Mask2FormerHead'),
    test_cfg=dict(mode='whole'),
    train_cfg=dict(),
    type='EncoderDecoder')
num_classes = 150
optim_wrapper = dict(
    clip_grad=dict(max_norm=0.01, norm_type=2),
    optimizer=dict(
        betas=(
            0.9,
            0.999,
        ),
        eps=1e-08,
        lr=0.0001,
        type='AdamW',
        weight_decay=0.05),
    paramwise_cfg=dict(
        custom_keys=dict({
            'absolute_pos_embed':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone':
            dict(decay_mult=1.0, lr_mult=0.1),
            'backbone.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.patch_embed.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.0.blocks.0.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.0.blocks.1.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.0.downsample.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.1.blocks.0.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.1.blocks.1.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.1.downsample.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.0.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.1.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.10.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.11.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.12.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.13.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.14.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.15.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.16.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.17.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.2.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.3.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.4.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.5.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.6.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.7.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.8.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.9.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.downsample.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.3.blocks.0.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.3.blocks.1.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'level_embed':
            dict(decay_mult=0.0, lr_mult=1.0),
            'query_embed':
            dict(decay_mult=0.0, lr_mult=1.0),
            'query_feat':
            dict(decay_mult=0.0, lr_mult=1.0),
            'relative_position_bias_table':
            dict(decay_mult=0.0, lr_mult=0.1)
        }),
        norm_decay_mult=0.0),
    type='OptimWrapper')
optimizer = dict(
    betas=(
        0.9,
        0.999,
    ),
    eps=1e-08,
    lr=0.0001,
    type='AdamW',
    weight_decay=0.05)
param_scheduler = [
    dict(
        begin=0,
        by_epoch=False,
        end=160000,
        eta_min=0,
        power=0.9,
        type='PolyLR'),
]
pretrained = 'https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/swin/swin_small_patch4_window7_224_20220317-7ba6d6dd.pth'
resume = False
test_cfg = dict(type='TestLoop')
test_dataloader = dict(
    batch_size=1,
    dataset=dict(
        data_prefix=dict(
            img_path='images/validation',
            seg_map_path='annotations/validation'),
        data_root='data/ade/ADEChallengeData2016',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(keep_ratio=True, scale=(
                2048,
                512,
            ), type='Resize'),
            dict(reduce_zero_label=True, type='LoadAnnotations'),
            dict(type='PackSegInputs'),
        ],
        type='ADE20KDataset'),
    num_workers=4,
    persistent_workers=True,
    sampler=dict(shuffle=False, type='DefaultSampler'))
test_evaluator = dict(
    iou_metrics=[
        'mIoU',
    ], type='IoUMetric')
test_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(keep_ratio=True, scale=(
        2048,
        512,
    ), type='Resize'),
    dict(reduce_zero_label=True, type='LoadAnnotations'),
    dict(type='PackSegInputs'),
]
train_cfg = dict(
    max_iters=160000, type='IterBasedTrainLoop', val_interval=5000)
train_dataloader = dict(
    batch_size=2,
    dataset=dict(
        data_prefix=dict(
            img_path='images/training', seg_map_path='annotations/training'),
        data_root='data/ade/ADEChallengeData2016',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(reduce_zero_label=True, type='LoadAnnotations'),
            dict(
                max_size=2048,
                resize_type='ResizeShortestEdge',
                scales=[
                    256,
                    307,
                    358,
                    409,
                    460,
                    512,
                    563,
                    614,
                    665,
                    716,
                    768,
                    819,
                    870,
                    921,
                    972,
                    1024,
                ],
                type='RandomChoiceResize'),
            dict(
                cat_max_ratio=0.75, crop_size=(
                    512,
                    512,
                ), type='RandomCrop'),
            dict(prob=0.5, type='RandomFlip'),
            dict(type='PhotoMetricDistortion'),
            dict(type='PackSegInputs'),
        ],
        type='ADE20KDataset'),
    num_workers=4,
    persistent_workers=True,
    sampler=dict(shuffle=True, type='InfiniteSampler'))
train_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(reduce_zero_label=True, type='LoadAnnotations'),
    dict(
        max_size=2048,
        resize_type='ResizeShortestEdge',
        scales=[
            256,
            307,
            358,
            409,
            460,
            512,
            563,
            614,
            665,
            716,
            768,
            819,
            870,
            921,
            972,
            1024,
        ],
        type='RandomChoiceResize'),
    dict(cat_max_ratio=0.75, crop_size=(
        512,
        512,
    ), type='RandomCrop'),
    dict(prob=0.5, type='RandomFlip'),
    dict(type='PhotoMetricDistortion'),
    dict(type='PackSegInputs'),
]
tta_model = dict(type='SegTTAModel')
tta_pipeline = [
    dict(backend_args=None, type='LoadImageFromFile'),
    dict(
        transforms=[
            [
                dict(keep_ratio=True, scale_factor=0.5, type='Resize'),
                dict(keep_ratio=True, scale_factor=0.75, type='Resize'),
                dict(keep_ratio=True, scale_factor=1.0, type='Resize'),
                dict(keep_ratio=True, scale_factor=1.25, type='Resize'),
                dict(keep_ratio=True, scale_factor=1.5, type='Resize'),
                dict(keep_ratio=True, scale_factor=1.75, type='Resize'),
            ],
            [
                dict(direction='horizontal', prob=0.0, type='RandomFlip'),
                dict(direction='horizontal', prob=1.0, type='RandomFlip'),
            ],
            [
                dict(type='LoadAnnotations'),
            ],
            [
                dict(type='PackSegInputs'),
            ],
        ],
        type='TestTimeAug'),
]
val_cfg = dict(type='ValLoop')
val_dataloader = dict(
    batch_size=1,
    dataset=dict(
        data_prefix=dict(
            img_path='images/validation',
            seg_map_path='annotations/validation'),
        data_root='data/ade/ADEChallengeData2016',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(keep_ratio=True, scale=(
                2048,
                512,
            ), type='Resize'),
            dict(reduce_zero_label=True, type='LoadAnnotations'),
            dict(type='PackSegInputs'),
        ],
        type='ADE20KDataset'),
    num_workers=4,
    persistent_workers=True,
    sampler=dict(shuffle=False, type='DefaultSampler'))
val_evaluator = dict(
    iou_metrics=[
        'mIoU',
    ], type='IoUMetric')
vis_backends = [
    dict(type='LocalVisBackend'),
]
visualizer = dict(
    name='visualizer',
    type='SegLocalVisualizer',
    vis_backends=[
        dict(type='LocalVisBackend'),
    ])
work_dir = '../corruptions/work_dirs/ade20k/mask2former/mask2former_swin-s_8xb2-160k_ade20k-512x512/gaussian_noise'

09/21 01:01:02 - mmengine - INFO - Distributed training is not used, all SyncBatchNorm (SyncBN) layers in the model will be automatically reverted to BatchNormXd layers if they are used.
09/21 01:01:02 - mmengine - INFO - Hooks will be executed in the following order:
before_run:
(VERY_HIGH   ) RuntimeInfoHook                    
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
before_train:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_train_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(NORMAL      ) DistSamplerSeedHook                
 -------------------- 
before_train_iter:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_train_iter:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(NORMAL      ) SegVisualizationHook               
(BELOW_NORMAL) LoggerHook                         
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
after_train_epoch:
(NORMAL      ) IterTimerHook                      
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_val:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
before_val_epoch:
(NORMAL      ) IterTimerHook                      
 -------------------- 
before_val_iter:
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_val_iter:
(NORMAL      ) IterTimerHook                      
(NORMAL      ) SegVisualizationHook               
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_val_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
after_val:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
after_train:
(VERY_HIGH   ) RuntimeInfoHook                    
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_test:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
before_test_epoch:
(NORMAL      ) IterTimerHook                      
 -------------------- 
before_test_iter:
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_test_iter:
(NORMAL      ) IterTimerHook                      
(NORMAL      ) SegVisualizationHook               
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_test_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_test:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
after_run:
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
09/21 01:01:03 - mmengine - WARNING - The prefix is not set in metric class IoUMetric.
Loads checkpoint by local backend from path: ../checkpoint_files/ade20k/mask2former/mask2former_swin-s_8xb2-160k_ade20k-512x512_20221204_143905-e715144e.pth
09/21 01:01:05 - mmengine - INFO - Load checkpoint from ../checkpoint_files/ade20k/mask2former/mask2former_swin-s_8xb2-160k_ade20k-512x512_20221204_143905-e715144e.pth
09/21 01:01:30 - mmengine - INFO - Iter(test) [  50/2000]    eta: 0:15:51  time: 0.2817  data_time: 0.0015  memory: 12814  
09/21 01:01:38 - mmengine - INFO - Iter(test) [ 100/2000]    eta: 0:10:18  time: 0.1943  data_time: 0.0016  memory: 12795  
09/21 01:01:44 - mmengine - INFO - Iter(test) [ 150/2000]    eta: 0:07:51  time: 0.1091  data_time: 0.0015  memory: 935  
09/21 01:01:51 - mmengine - INFO - Iter(test) [ 200/2000]    eta: 0:06:50  time: 0.1088  data_time: 0.0015  memory: 12835  
09/21 01:01:58 - mmengine - INFO - Iter(test) [ 250/2000]    eta: 0:06:10  time: 0.1163  data_time: 0.0014  memory: 12838  
09/21 01:02:05 - mmengine - INFO - Iter(test) [ 300/2000]    eta: 0:05:35  time: 0.1094  data_time: 0.0015  memory: 12803  
09/21 01:02:12 - mmengine - INFO - Iter(test) [ 350/2000]    eta: 0:05:11  time: 0.1098  data_time: 0.0014  memory: 12810  
09/21 01:02:18 - mmengine - INFO - Iter(test) [ 400/2000]    eta: 0:04:50  time: 0.1166  data_time: 0.0014  memory: 12775  
09/21 01:02:23 - mmengine - INFO - Iter(test) [ 450/2000]    eta: 0:04:28  time: 0.1006  data_time: 0.0014  memory: 975  
09/21 01:02:29 - mmengine - INFO - Iter(test) [ 500/2000]    eta: 0:04:09  time: 0.1073  data_time: 0.0014  memory: 935  
09/21 01:02:34 - mmengine - INFO - Iter(test) [ 550/2000]    eta: 0:03:54  time: 0.1191  data_time: 0.0015  memory: 1042  
09/21 01:02:40 - mmengine - INFO - Iter(test) [ 600/2000]    eta: 0:03:41  time: 0.1210  data_time: 0.0016  memory: 1040  
09/21 01:02:46 - mmengine - INFO - Iter(test) [ 650/2000]    eta: 0:03:29  time: 0.1927  data_time: 0.0013  memory: 12816  
09/21 01:02:53 - mmengine - INFO - Iter(test) [ 700/2000]    eta: 0:03:19  time: 0.1178  data_time: 0.0016  memory: 12806  
09/21 01:02:59 - mmengine - INFO - Iter(test) [ 750/2000]    eta: 0:03:08  time: 0.1161  data_time: 0.0015  memory: 1096  
09/21 01:03:04 - mmengine - INFO - Iter(test) [ 800/2000]    eta: 0:02:58  time: 0.1055  data_time: 0.0016  memory: 935  
09/21 01:03:09 - mmengine - INFO - Iter(test) [ 850/2000]    eta: 0:02:47  time: 0.1068  data_time: 0.0016  memory: 908  
09/21 01:03:15 - mmengine - INFO - Iter(test) [ 900/2000]    eta: 0:02:38  time: 0.1108  data_time: 0.0014  memory: 987  
09/21 01:03:21 - mmengine - INFO - Iter(test) [ 950/2000]    eta: 0:02:29  time: 0.1166  data_time: 0.0015  memory: 1015  
09/21 01:03:26 - mmengine - INFO - Iter(test) [1000/2000]    eta: 0:02:20  time: 0.1021  data_time: 0.0014  memory: 1015  
09/21 01:03:32 - mmengine - INFO - Iter(test) [1050/2000]    eta: 0:02:12  time: 0.1196  data_time: 0.0014  memory: 12819  
09/21 01:03:38 - mmengine - INFO - Iter(test) [1100/2000]    eta: 0:02:04  time: 0.1130  data_time: 0.0015  memory: 1012  
09/21 01:03:44 - mmengine - INFO - Iter(test) [1150/2000]    eta: 0:01:56  time: 0.1038  data_time: 0.0014  memory: 985  
09/21 01:03:49 - mmengine - INFO - Iter(test) [1200/2000]    eta: 0:01:48  time: 0.1040  data_time: 0.0014  memory: 1921  
09/21 01:03:55 - mmengine - INFO - Iter(test) [1250/2000]    eta: 0:01:41  time: 0.1130  data_time: 0.0014  memory: 12797  
09/21 01:04:01 - mmengine - INFO - Iter(test) [1300/2000]    eta: 0:01:34  time: 0.1165  data_time: 0.0014  memory: 935  
09/21 01:04:06 - mmengine - INFO - Iter(test) [1350/2000]    eta: 0:01:26  time: 0.1005  data_time: 0.0014  memory: 935  
09/21 01:04:11 - mmengine - INFO - Iter(test) [1400/2000]    eta: 0:01:19  time: 0.1123  data_time: 0.0014  memory: 1012  
09/21 01:04:17 - mmengine - INFO - Iter(test) [1450/2000]    eta: 0:01:12  time: 0.1192  data_time: 0.0014  memory: 1015  
09/21 01:04:23 - mmengine - INFO - Iter(test) [1500/2000]    eta: 0:01:05  time: 0.1007  data_time: 0.0014  memory: 933  
09/21 01:04:28 - mmengine - INFO - Iter(test) [1550/2000]    eta: 0:00:58  time: 0.1075  data_time: 0.0014  memory: 1015  
09/21 01:04:33 - mmengine - INFO - Iter(test) [1600/2000]    eta: 0:00:51  time: 0.1175  data_time: 0.0015  memory: 908  
09/21 01:04:40 - mmengine - INFO - Iter(test) [1650/2000]    eta: 0:00:45  time: 0.1136  data_time: 0.0014  memory: 12807  
09/21 01:04:46 - mmengine - INFO - Iter(test) [1700/2000]    eta: 0:00:38  time: 0.1062  data_time: 0.0016  memory: 1012  
09/21 01:04:51 - mmengine - INFO - Iter(test) [1750/2000]    eta: 0:00:32  time: 0.1052  data_time: 0.0014  memory: 1039  
09/21 01:04:57 - mmengine - INFO - Iter(test) [1800/2000]    eta: 0:00:25  time: 0.1187  data_time: 0.0016  memory: 935  
09/21 01:05:02 - mmengine - INFO - Iter(test) [1850/2000]    eta: 0:00:19  time: 0.1052  data_time: 0.0015  memory: 854  
09/21 01:05:07 - mmengine - INFO - Iter(test) [1900/2000]    eta: 0:00:12  time: 0.1030  data_time: 0.0014  memory: 1068  
09/21 01:05:13 - mmengine - INFO - Iter(test) [1950/2000]    eta: 0:00:06  time: 0.1105  data_time: 0.0014  memory: 1306  
09/21 01:05:18 - mmengine - INFO - Iter(test) [2000/2000]    eta: 0:00:00  time: 0.1085  data_time: 0.0013  memory: 1094  
09/21 01:05:19 - mmengine - INFO - per class results:
09/21 01:05:19 - mmengine - INFO - 
+---------------------+-------+-------+
|        Class        |  IoU  |  Acc  |
+---------------------+-------+-------+
|         wall        | 74.96 | 86.42 |
|       building      | 81.53 | 91.07 |
|         sky         | 92.98 | 96.23 |
|        floor        | 78.23 | 88.39 |
|         tree        |  72.8 | 88.98 |
|       ceiling       | 80.17 | 89.17 |
|         road        | 81.02 | 89.87 |
|         bed         | 87.59 | 94.65 |
|      windowpane     | 57.67 | 78.89 |
|        grass        | 65.49 | 81.06 |
|       cabinet       | 54.12 | 69.83 |
|       sidewalk      | 58.25 | 68.85 |
|        person       | 80.55 | 88.33 |
|        earth        | 30.64 | 48.22 |
|         door        | 42.25 | 55.58 |
|        table        | 58.81 | 74.26 |
|       mountain      | 57.91 | 70.62 |
|        plant        | 48.71 |  60.3 |
|       curtain       | 65.53 | 78.53 |
|        chair        | 56.69 | 68.78 |
|         car         | 83.56 | 91.77 |
|        water        | 52.87 | 64.32 |
|       painting      | 70.74 | 81.89 |
|         sofa        | 58.91 | 70.09 |
|        shelf        | 36.98 | 53.61 |
|        house        | 52.17 |  76.7 |
|         sea         | 53.61 | 86.24 |
|        mirror       | 61.24 | 72.69 |
|         rug         | 46.54 | 53.21 |
|        field        | 28.11 | 52.84 |
|       armchair      | 40.62 |  69.4 |
|         seat        | 60.83 | 81.69 |
|        fence        | 42.24 | 57.73 |
|         desk        | 44.74 | 70.22 |
|         rock        | 46.23 |  77.2 |
|       wardrobe      | 49.77 | 65.52 |
|         lamp        | 63.46 | 75.85 |
|       bathtub       | 74.11 |  85.0 |
|       railing       | 32.53 | 48.85 |
|       cushion       | 54.65 | 67.06 |
|         base        |  25.2 | 42.56 |
|         box         | 20.38 | 25.27 |
|        column       | 42.61 | 55.11 |
|      signboard      | 36.11 | 47.97 |
|   chest of drawers  |  33.1 | 57.63 |
|       counter       | 19.29 | 28.04 |
|         sand        | 29.12 | 47.52 |
|         sink        | 75.73 | 81.13 |
|      skyscraper     | 43.49 | 57.24 |
|      fireplace      | 73.25 | 88.86 |
|     refrigerator    | 75.14 | 87.21 |
|      grandstand     | 40.62 | 78.41 |
|         path        | 30.68 | 48.31 |
|        stairs       | 22.55 | 25.79 |
|        runway       | 63.08 | 74.52 |
|         case        | 38.76 | 48.29 |
|      pool table     | 90.46 | 95.45 |
|        pillow       | 51.49 | 60.92 |
|     screen door     | 48.73 | 52.94 |
|       stairway      | 33.44 | 49.93 |
|        river        |  13.1 |  20.2 |
|        bridge       | 37.24 | 43.66 |
|       bookcase      | 32.83 | 60.47 |
|        blind        | 33.34 | 36.46 |
|     coffee table    | 62.42 | 82.15 |
|        toilet       | 84.85 | 87.69 |
|        flower       | 37.42 | 54.71 |
|         book        | 51.99 | 68.11 |
|         hill        | 15.38 |  25.1 |
|        bench        | 43.47 | 54.35 |
|      countertop     | 58.71 | 73.32 |
|        stove        | 70.43 | 84.01 |
|         palm        | 51.45 |  69.6 |
|    kitchen island   | 39.09 | 78.54 |
|       computer      | 56.03 | 62.68 |
|     swivel chair    | 42.37 | 54.35 |
|         boat        | 73.05 | 84.71 |
|         bar         | 35.04 | 50.12 |
|    arcade machine   | 30.63 | 33.28 |
|        hovel        | 39.29 | 48.95 |
|         bus         | 76.25 | 89.74 |
|        towel        | 61.77 | 72.31 |
|        light        | 56.44 | 67.44 |
|        truck        | 35.69 | 48.03 |
|        tower        | 43.46 | 61.32 |
|      chandelier     | 67.35 | 79.48 |
|        awning       |  25.7 | 37.63 |
|     streetlight     | 29.45 | 41.11 |
|        booth        | 48.56 | 56.87 |
| television receiver | 63.22 | 74.03 |
|       airplane      |  55.5 | 66.32 |
|      dirt track     |  2.35 |  4.42 |
|       apparel       | 34.25 |  45.3 |
|         pole        | 26.34 | 43.79 |
|         land        |  3.96 |  6.13 |
|      bannister      | 13.37 | 18.84 |
|      escalator      |  21.7 | 24.25 |
|       ottoman       | 35.18 | 56.26 |
|        bottle       | 17.83 | 21.54 |
|        buffet       | 28.13 | 30.21 |
|        poster       | 20.01 | 37.63 |
|        stage        | 12.88 | 19.43 |
|         van         | 44.97 |  68.3 |
|         ship        |  6.65 |  6.71 |
|       fountain      | 44.39 | 47.08 |
|    conveyer belt    | 57.31 | 64.37 |
|        canopy       | 23.19 | 33.62 |
|        washer       | 62.02 | 66.58 |
|      plaything      | 25.03 | 34.48 |
|    swimming pool    | 31.93 | 60.62 |
|        stool        | 43.01 | 55.06 |
|        barrel       | 41.01 | 42.93 |
|        basket       | 32.35 | 36.14 |
|      waterfall      | 39.25 | 50.12 |
|         tent        | 75.39 | 98.19 |
|         bag         | 14.44 | 16.82 |
|       minibike      | 71.02 | 83.83 |
|        cradle       | 76.66 | 95.35 |
|         oven        | 10.34 | 28.97 |
|         ball        | 39.97 | 63.44 |
|         food        | 59.39 |  85.8 |
|         step        | 14.78 | 19.94 |
|         tank        | 49.11 | 51.38 |
|      trade name     | 28.04 | 34.38 |
|      microwave      | 41.11 | 44.44 |
|         pot         | 45.11 | 52.41 |
|        animal       | 68.09 |  71.6 |
|       bicycle       | 59.39 | 78.28 |
|         lake        |  7.46 |  9.16 |
|      dishwasher     | 58.85 |  65.9 |
|        screen       | 77.77 |  89.5 |
|       blanket       |  7.34 |  9.51 |
|      sculpture      | 40.87 | 60.47 |
|         hood        | 60.39 | 64.79 |
|        sconce       | 41.92 | 52.06 |
|         vase        | 39.59 | 57.12 |
|    traffic light    | 30.04 | 47.67 |
|         tray        | 13.38 | 18.85 |
|        ashcan       | 34.31 | 53.74 |
|         fan         | 59.96 | 72.65 |
|         pier        | 12.42 | 15.38 |
|      crt screen     |  4.98 | 12.09 |
|        plate        | 55.86 | 72.14 |
|       monitor       |  2.41 |  2.84 |
|    bulletin board   | 35.61 | 46.78 |
|        shower       |  7.29 |  82.9 |
|       radiator      | 49.89 | 66.48 |
|        glass        | 15.22 | 16.49 |
|        clock        | 30.74 | 40.68 |
|         flag        | 33.45 | 38.04 |
+---------------------+-------+-------+
09/21 01:05:19 - mmengine - INFO - Iter(test) [2000/2000]    aAcc: 80.9100  mIoU: 45.2300  mAcc: 57.8900  data_time: 0.0017  time: 0.1264
Finished processing corruption type: gaussian_noise
Processing corruption type: shot_noise
09/21 01:05:23 - mmengine - INFO - 
------------------------------------------------------------
System environment:
    sys.platform: linux
    Python: 3.10.13 | packaged by conda-forge | (main, Dec 23 2023, 15:36:39) [GCC 12.3.0]
    CUDA available: True
    MUSA available: False
    numpy_random_seed: 1401968735
    GPU 0: Tesla V100-SXM2-32GB
    CUDA_HOME: /opt/bwhpc/common/devel/cuda/11.7
    NVCC: Cuda compilation tools, release 11.7, V11.7.99
    GCC: gcc (GCC) 8.5.0 20210514 (Red Hat 8.5.0-18)
    PyTorch: 1.13.1
    PyTorch compiling details: PyTorch built with:
  - GCC 9.3
  - C++ Version: 201402
  - Intel(R) oneAPI Math Kernel Library Version 2023.1-Product Build 20230303 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v2.6.0 (Git Hash 52b5f107dd9cf10910aaa19cb47f3abf9b349815)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - LAPACK is enabled (usually provided by MKL)
  - NNPACK is enabled
  - CPU capability usage: AVX2
  - CUDA Runtime 11.7
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_61,code=sm_61;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86;-gencode;arch=compute_37,code=compute_37
  - CuDNN 8.5
  - Magma 2.6.1
  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.7, CUDNN_VERSION=8.5.0, CXX_COMPILER=/opt/rh/devtoolset-9/root/usr/bin/c++, CXX_FLAGS= -fabi-version=11 -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -DEDGE_PROFILER_USE_KINETO -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Werror=non-virtual-dtor -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wunused-local-typedefs -Wno-unused-parameter -Wno-unused-function -Wno-unused-result -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Werror=cast-function-type -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.13.1, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, USE_ROCM=OFF, 

    TorchVision: 0.14.1
    OpenCV: 3.4.18
    MMEngine: 0.10.4

Runtime environment:
    cudnn_benchmark: True
    mp_cfg: {'mp_start_method': 'fork', 'opencv_num_threads': 0}
    dist_cfg: {'backend': 'nccl'}
    seed: 1401968735
    Distributed launcher: none
    Distributed training: False
    GPU number: 1
------------------------------------------------------------

09/21 01:05:24 - mmengine - INFO - Config:
auto_scale_lr = dict(base_batch_size=16, enable=False)
backbone_embed_multi = dict(decay_mult=0.0, lr_mult=0.1)
backbone_norm_multi = dict(decay_mult=0.0, lr_mult=0.1)
crop_size = (
    512,
    512,
)
custom_imports = dict(allow_failed_imports=False, imports='mmdet.models')
custom_keys = dict({
    'absolute_pos_embed':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone':
    dict(decay_mult=1.0, lr_mult=0.1),
    'backbone.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.patch_embed.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.0.blocks.0.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.0.blocks.1.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.0.downsample.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.1.blocks.0.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.1.blocks.1.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.1.downsample.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.0.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.1.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.10.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.11.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.12.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.13.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.14.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.15.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.16.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.17.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.2.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.3.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.4.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.5.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.6.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.7.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.8.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.9.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.downsample.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.3.blocks.0.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.3.blocks.1.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'level_embed':
    dict(decay_mult=0.0, lr_mult=1.0),
    'query_embed':
    dict(decay_mult=0.0, lr_mult=1.0),
    'query_feat':
    dict(decay_mult=0.0, lr_mult=1.0),
    'relative_position_bias_table':
    dict(decay_mult=0.0, lr_mult=0.1)
})
data_root = 'data/ade/ADEChallengeData2016'
dataset_type = 'ADE20KDataset'
default_hooks = dict(
    checkpoint=dict(
        by_epoch=False, interval=5000, save_best='mIoU',
        type='CheckpointHook'),
    logger=dict(interval=50, log_metric_by_epoch=False, type='LoggerHook'),
    param_scheduler=dict(type='ParamSchedulerHook'),
    sampler_seed=dict(type='DistSamplerSeedHook'),
    timer=dict(type='IterTimerHook'),
    visualization=dict(type='SegVisualizationHook'))
default_scope = 'mmseg'
depths = [
    2,
    2,
    18,
    2,
]
embed_multi = dict(decay_mult=0.0, lr_mult=1.0)
env_cfg = dict(
    cudnn_benchmark=True,
    dist_cfg=dict(backend='nccl'),
    mp_cfg=dict(mp_start_method='fork', opencv_num_threads=0))
img_ratios = [
    0.5,
    0.75,
    1.0,
    1.25,
    1.5,
    1.75,
]
launcher = 'none'
load_from = '../checkpoint_files/ade20k/mask2former/mask2former_swin-s_8xb2-160k_ade20k-512x512_20221204_143905-e715144e.pth'
log_level = 'INFO'
log_processor = dict(by_epoch=False)
model = dict(
    backbone=dict(
        attn_drop_rate=0.0,
        depths=[
            2,
            2,
            18,
            2,
        ],
        drop_path_rate=0.3,
        drop_rate=0.0,
        embed_dims=96,
        frozen_stages=-1,
        init_cfg=dict(
            checkpoint=
            'https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/swin/swin_small_patch4_window7_224_20220317-7ba6d6dd.pth',
            type='Pretrained'),
        mlp_ratio=4,
        num_heads=[
            3,
            6,
            12,
            24,
        ],
        out_indices=(
            0,
            1,
            2,
            3,
        ),
        patch_norm=True,
        qk_scale=None,
        qkv_bias=True,
        type='SwinTransformer',
        window_size=7,
        with_cp=False),
    data_preprocessor=dict(
        bgr_to_rgb=True,
        corruption='shot_noise',
        mean=[
            123.675,
            116.28,
            103.53,
        ],
        pad_val=0,
        seg_pad_val=255,
        size=(
            512,
            512,
        ),
        std=[
            58.395,
            57.12,
            57.375,
        ],
        test_cfg=dict(size_divisor=32),
        type='SegDataPreProcessor'),
    decode_head=dict(
        align_corners=False,
        enforce_decoder_input_project=False,
        feat_channels=256,
        in_channels=[
            96,
            192,
            384,
            768,
        ],
        loss_cls=dict(
            class_weight=[
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                0.1,
            ],
            loss_weight=2.0,
            reduction='mean',
            type='mmdet.CrossEntropyLoss',
            use_sigmoid=False),
        loss_dice=dict(
            activate=True,
            eps=1.0,
            loss_weight=5.0,
            naive_dice=True,
            reduction='mean',
            type='mmdet.DiceLoss',
            use_sigmoid=True),
        loss_mask=dict(
            loss_weight=5.0,
            reduction='mean',
            type='mmdet.CrossEntropyLoss',
            use_sigmoid=True),
        num_classes=150,
        num_queries=100,
        num_transformer_feat_level=3,
        out_channels=256,
        pixel_decoder=dict(
            act_cfg=dict(type='ReLU'),
            encoder=dict(
                init_cfg=None,
                layer_cfg=dict(
                    ffn_cfg=dict(
                        act_cfg=dict(inplace=True, type='ReLU'),
                        embed_dims=256,
                        feedforward_channels=1024,
                        ffn_drop=0.0,
                        num_fcs=2),
                    self_attn_cfg=dict(
                        batch_first=True,
                        dropout=0.0,
                        embed_dims=256,
                        im2col_step=64,
                        init_cfg=None,
                        norm_cfg=None,
                        num_heads=8,
                        num_levels=3,
                        num_points=4)),
                num_layers=6),
            init_cfg=None,
            norm_cfg=dict(num_groups=32, type='GN'),
            num_outs=3,
            positional_encoding=dict(normalize=True, num_feats=128),
            type='mmdet.MSDeformAttnPixelDecoder'),
        positional_encoding=dict(normalize=True, num_feats=128),
        strides=[
            4,
            8,
            16,
            32,
        ],
        train_cfg=dict(
            assigner=dict(
                match_costs=[
                    dict(type='mmdet.ClassificationCost', weight=2.0),
                    dict(
                        type='mmdet.CrossEntropyLossCost',
                        use_sigmoid=True,
                        weight=5.0),
                    dict(
                        eps=1.0,
                        pred_act=True,
                        type='mmdet.DiceCost',
                        weight=5.0),
                ],
                type='mmdet.HungarianAssigner'),
            importance_sample_ratio=0.75,
            num_points=12544,
            oversample_ratio=3.0,
            sampler=dict(type='mmdet.MaskPseudoSampler')),
        transformer_decoder=dict(
            init_cfg=None,
            layer_cfg=dict(
                cross_attn_cfg=dict(
                    attn_drop=0.0,
                    batch_first=True,
                    dropout_layer=None,
                    embed_dims=256,
                    num_heads=8,
                    proj_drop=0.0),
                ffn_cfg=dict(
                    act_cfg=dict(inplace=True, type='ReLU'),
                    add_identity=True,
                    dropout_layer=None,
                    embed_dims=256,
                    feedforward_channels=2048,
                    ffn_drop=0.0,
                    num_fcs=2),
                self_attn_cfg=dict(
                    attn_drop=0.0,
                    batch_first=True,
                    dropout_layer=None,
                    embed_dims=256,
                    num_heads=8,
                    proj_drop=0.0)),
            num_layers=9,
            return_intermediate=True),
        type='Mask2FormerHead'),
    test_cfg=dict(mode='whole'),
    train_cfg=dict(),
    type='EncoderDecoder')
num_classes = 150
optim_wrapper = dict(
    clip_grad=dict(max_norm=0.01, norm_type=2),
    optimizer=dict(
        betas=(
            0.9,
            0.999,
        ),
        eps=1e-08,
        lr=0.0001,
        type='AdamW',
        weight_decay=0.05),
    paramwise_cfg=dict(
        custom_keys=dict({
            'absolute_pos_embed':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone':
            dict(decay_mult=1.0, lr_mult=0.1),
            'backbone.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.patch_embed.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.0.blocks.0.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.0.blocks.1.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.0.downsample.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.1.blocks.0.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.1.blocks.1.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.1.downsample.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.0.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.1.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.10.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.11.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.12.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.13.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.14.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.15.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.16.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.17.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.2.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.3.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.4.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.5.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.6.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.7.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.8.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.9.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.downsample.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.3.blocks.0.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.3.blocks.1.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'level_embed':
            dict(decay_mult=0.0, lr_mult=1.0),
            'query_embed':
            dict(decay_mult=0.0, lr_mult=1.0),
            'query_feat':
            dict(decay_mult=0.0, lr_mult=1.0),
            'relative_position_bias_table':
            dict(decay_mult=0.0, lr_mult=0.1)
        }),
        norm_decay_mult=0.0),
    type='OptimWrapper')
optimizer = dict(
    betas=(
        0.9,
        0.999,
    ),
    eps=1e-08,
    lr=0.0001,
    type='AdamW',
    weight_decay=0.05)
param_scheduler = [
    dict(
        begin=0,
        by_epoch=False,
        end=160000,
        eta_min=0,
        power=0.9,
        type='PolyLR'),
]
pretrained = 'https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/swin/swin_small_patch4_window7_224_20220317-7ba6d6dd.pth'
resume = False
test_cfg = dict(type='TestLoop')
test_dataloader = dict(
    batch_size=1,
    dataset=dict(
        data_prefix=dict(
            img_path='images/validation',
            seg_map_path='annotations/validation'),
        data_root='data/ade/ADEChallengeData2016',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(keep_ratio=True, scale=(
                2048,
                512,
            ), type='Resize'),
            dict(reduce_zero_label=True, type='LoadAnnotations'),
            dict(type='PackSegInputs'),
        ],
        type='ADE20KDataset'),
    num_workers=4,
    persistent_workers=True,
    sampler=dict(shuffle=False, type='DefaultSampler'))
test_evaluator = dict(
    iou_metrics=[
        'mIoU',
    ], type='IoUMetric')
test_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(keep_ratio=True, scale=(
        2048,
        512,
    ), type='Resize'),
    dict(reduce_zero_label=True, type='LoadAnnotations'),
    dict(type='PackSegInputs'),
]
train_cfg = dict(
    max_iters=160000, type='IterBasedTrainLoop', val_interval=5000)
train_dataloader = dict(
    batch_size=2,
    dataset=dict(
        data_prefix=dict(
            img_path='images/training', seg_map_path='annotations/training'),
        data_root='data/ade/ADEChallengeData2016',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(reduce_zero_label=True, type='LoadAnnotations'),
            dict(
                max_size=2048,
                resize_type='ResizeShortestEdge',
                scales=[
                    256,
                    307,
                    358,
                    409,
                    460,
                    512,
                    563,
                    614,
                    665,
                    716,
                    768,
                    819,
                    870,
                    921,
                    972,
                    1024,
                ],
                type='RandomChoiceResize'),
            dict(
                cat_max_ratio=0.75, crop_size=(
                    512,
                    512,
                ), type='RandomCrop'),
            dict(prob=0.5, type='RandomFlip'),
            dict(type='PhotoMetricDistortion'),
            dict(type='PackSegInputs'),
        ],
        type='ADE20KDataset'),
    num_workers=4,
    persistent_workers=True,
    sampler=dict(shuffle=True, type='InfiniteSampler'))
train_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(reduce_zero_label=True, type='LoadAnnotations'),
    dict(
        max_size=2048,
        resize_type='ResizeShortestEdge',
        scales=[
            256,
            307,
            358,
            409,
            460,
            512,
            563,
            614,
            665,
            716,
            768,
            819,
            870,
            921,
            972,
            1024,
        ],
        type='RandomChoiceResize'),
    dict(cat_max_ratio=0.75, crop_size=(
        512,
        512,
    ), type='RandomCrop'),
    dict(prob=0.5, type='RandomFlip'),
    dict(type='PhotoMetricDistortion'),
    dict(type='PackSegInputs'),
]
tta_model = dict(type='SegTTAModel')
tta_pipeline = [
    dict(backend_args=None, type='LoadImageFromFile'),
    dict(
        transforms=[
            [
                dict(keep_ratio=True, scale_factor=0.5, type='Resize'),
                dict(keep_ratio=True, scale_factor=0.75, type='Resize'),
                dict(keep_ratio=True, scale_factor=1.0, type='Resize'),
                dict(keep_ratio=True, scale_factor=1.25, type='Resize'),
                dict(keep_ratio=True, scale_factor=1.5, type='Resize'),
                dict(keep_ratio=True, scale_factor=1.75, type='Resize'),
            ],
            [
                dict(direction='horizontal', prob=0.0, type='RandomFlip'),
                dict(direction='horizontal', prob=1.0, type='RandomFlip'),
            ],
            [
                dict(type='LoadAnnotations'),
            ],
            [
                dict(type='PackSegInputs'),
            ],
        ],
        type='TestTimeAug'),
]
val_cfg = dict(type='ValLoop')
val_dataloader = dict(
    batch_size=1,
    dataset=dict(
        data_prefix=dict(
            img_path='images/validation',
            seg_map_path='annotations/validation'),
        data_root='data/ade/ADEChallengeData2016',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(keep_ratio=True, scale=(
                2048,
                512,
            ), type='Resize'),
            dict(reduce_zero_label=True, type='LoadAnnotations'),
            dict(type='PackSegInputs'),
        ],
        type='ADE20KDataset'),
    num_workers=4,
    persistent_workers=True,
    sampler=dict(shuffle=False, type='DefaultSampler'))
val_evaluator = dict(
    iou_metrics=[
        'mIoU',
    ], type='IoUMetric')
vis_backends = [
    dict(type='LocalVisBackend'),
]
visualizer = dict(
    name='visualizer',
    type='SegLocalVisualizer',
    vis_backends=[
        dict(type='LocalVisBackend'),
    ])
work_dir = '../corruptions/work_dirs/ade20k/mask2former/mask2former_swin-s_8xb2-160k_ade20k-512x512/shot_noise'

09/21 01:05:27 - mmengine - INFO - Distributed training is not used, all SyncBatchNorm (SyncBN) layers in the model will be automatically reverted to BatchNormXd layers if they are used.
09/21 01:05:27 - mmengine - INFO - Hooks will be executed in the following order:
before_run:
(VERY_HIGH   ) RuntimeInfoHook                    
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
before_train:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_train_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(NORMAL      ) DistSamplerSeedHook                
 -------------------- 
before_train_iter:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_train_iter:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(NORMAL      ) SegVisualizationHook               
(BELOW_NORMAL) LoggerHook                         
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
after_train_epoch:
(NORMAL      ) IterTimerHook                      
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_val:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
before_val_epoch:
(NORMAL      ) IterTimerHook                      
 -------------------- 
before_val_iter:
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_val_iter:
(NORMAL      ) IterTimerHook                      
(NORMAL      ) SegVisualizationHook               
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_val_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
after_val:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
after_train:
(VERY_HIGH   ) RuntimeInfoHook                    
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_test:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
before_test_epoch:
(NORMAL      ) IterTimerHook                      
 -------------------- 
before_test_iter:
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_test_iter:
(NORMAL      ) IterTimerHook                      
(NORMAL      ) SegVisualizationHook               
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_test_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_test:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
after_run:
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
09/21 01:05:27 - mmengine - WARNING - The prefix is not set in metric class IoUMetric.
Loads checkpoint by local backend from path: ../checkpoint_files/ade20k/mask2former/mask2former_swin-s_8xb2-160k_ade20k-512x512_20221204_143905-e715144e.pth
09/21 01:05:28 - mmengine - INFO - Load checkpoint from ../checkpoint_files/ade20k/mask2former/mask2former_swin-s_8xb2-160k_ade20k-512x512_20221204_143905-e715144e.pth
09/21 01:05:51 - mmengine - INFO - Iter(test) [  50/2000]    eta: 0:14:28  time: 0.3576  data_time: 0.0016  memory: 12814  
09/21 01:06:03 - mmengine - INFO - Iter(test) [ 100/2000]    eta: 0:10:49  time: 0.2676  data_time: 0.0016  memory: 12795  
09/21 01:06:12 - mmengine - INFO - Iter(test) [ 150/2000]    eta: 0:08:57  time: 0.1974  data_time: 0.0016  memory: 935  
09/21 01:06:24 - mmengine - INFO - Iter(test) [ 200/2000]    eta: 0:08:17  time: 0.1854  data_time: 0.0015  memory: 12835  
09/21 01:06:34 - mmengine - INFO - Iter(test) [ 250/2000]    eta: 0:07:41  time: 0.1923  data_time: 0.0015  memory: 12838  
09/21 01:06:44 - mmengine - INFO - Iter(test) [ 300/2000]    eta: 0:07:10  time: 0.1847  data_time: 0.0016  memory: 12803  
09/21 01:06:55 - mmengine - INFO - Iter(test) [ 350/2000]    eta: 0:06:48  time: 0.1893  data_time: 0.0015  memory: 12810  
09/21 01:07:06 - mmengine - INFO - Iter(test) [ 400/2000]    eta: 0:06:28  time: 0.1872  data_time: 0.0014  memory: 12775  
09/21 01:07:14 - mmengine - INFO - Iter(test) [ 450/2000]    eta: 0:06:04  time: 0.1867  data_time: 0.0015  memory: 975  
09/21 01:07:24 - mmengine - INFO - Iter(test) [ 500/2000]    eta: 0:05:46  time: 0.1772  data_time: 0.0014  memory: 935  
09/21 01:07:34 - mmengine - INFO - Iter(test) [ 550/2000]    eta: 0:05:30  time: 0.2031  data_time: 0.0015  memory: 1042  
09/21 01:07:43 - mmengine - INFO - Iter(test) [ 600/2000]    eta: 0:05:14  time: 0.1960  data_time: 0.0015  memory: 1040  
09/21 01:07:54 - mmengine - INFO - Iter(test) [ 650/2000]    eta: 0:05:01  time: 0.2812  data_time: 0.0013  memory: 12816  
09/21 01:08:04 - mmengine - INFO - Iter(test) [ 700/2000]    eta: 0:04:49  time: 0.1952  data_time: 0.0015  memory: 12806  
09/21 01:08:14 - mmengine - INFO - Iter(test) [ 750/2000]    eta: 0:04:35  time: 0.1738  data_time: 0.0014  memory: 1096  
09/21 01:08:23 - mmengine - INFO - Iter(test) [ 800/2000]    eta: 0:04:21  time: 0.1888  data_time: 0.0016  memory: 935  
09/21 01:08:32 - mmengine - INFO - Iter(test) [ 850/2000]    eta: 0:04:08  time: 0.1936  data_time: 0.0016  memory: 908  
09/21 01:08:41 - mmengine - INFO - Iter(test) [ 900/2000]    eta: 0:03:55  time: 0.1789  data_time: 0.0014  memory: 987  
09/21 01:08:51 - mmengine - INFO - Iter(test) [ 950/2000]    eta: 0:03:43  time: 0.1918  data_time: 0.0015  memory: 1015  
09/21 01:09:00 - mmengine - INFO - Iter(test) [1000/2000]    eta: 0:03:31  time: 0.1905  data_time: 0.0015  memory: 1015  
09/21 01:09:12 - mmengine - INFO - Iter(test) [1050/2000]    eta: 0:03:21  time: 0.2100  data_time: 0.0015  memory: 12819  
09/21 01:09:21 - mmengine - INFO - Iter(test) [1100/2000]    eta: 0:03:10  time: 0.2052  data_time: 0.0015  memory: 1012  
09/21 01:09:31 - mmengine - INFO - Iter(test) [1150/2000]    eta: 0:02:59  time: 0.1967  data_time: 0.0015  memory: 985  
09/21 01:09:41 - mmengine - INFO - Iter(test) [1200/2000]    eta: 0:02:48  time: 0.1971  data_time: 0.0015  memory: 1921  
09/21 01:09:52 - mmengine - INFO - Iter(test) [1250/2000]    eta: 0:02:37  time: 0.1966  data_time: 0.0014  memory: 12797  
09/21 01:10:01 - mmengine - INFO - Iter(test) [1300/2000]    eta: 0:02:26  time: 0.1929  data_time: 0.0015  memory: 935  
09/21 01:10:10 - mmengine - INFO - Iter(test) [1350/2000]    eta: 0:02:15  time: 0.1711  data_time: 0.0014  memory: 935  
09/21 01:10:20 - mmengine - INFO - Iter(test) [1400/2000]    eta: 0:02:05  time: 0.2127  data_time: 0.0015  memory: 1012  
09/21 01:10:30 - mmengine - INFO - Iter(test) [1450/2000]    eta: 0:01:54  time: 0.2044  data_time: 0.0015  memory: 1015  
09/21 01:10:39 - mmengine - INFO - Iter(test) [1500/2000]    eta: 0:01:43  time: 0.1698  data_time: 0.0014  memory: 933  
09/21 01:10:49 - mmengine - INFO - Iter(test) [1550/2000]    eta: 0:01:33  time: 0.2072  data_time: 0.0015  memory: 1015  
09/21 01:10:59 - mmengine - INFO - Iter(test) [1600/2000]    eta: 0:01:22  time: 0.1819  data_time: 0.0015  memory: 908  
09/21 01:11:09 - mmengine - INFO - Iter(test) [1650/2000]    eta: 0:01:12  time: 0.1905  data_time: 0.0014  memory: 12807  
09/21 01:11:19 - mmengine - INFO - Iter(test) [1700/2000]    eta: 0:01:01  time: 0.2060  data_time: 0.0016  memory: 1012  
09/21 01:11:29 - mmengine - INFO - Iter(test) [1750/2000]    eta: 0:00:51  time: 0.2072  data_time: 0.0014  memory: 1039  
09/21 01:11:39 - mmengine - INFO - Iter(test) [1800/2000]    eta: 0:00:41  time: 0.2095  data_time: 0.0016  memory: 935  
09/21 01:11:49 - mmengine - INFO - Iter(test) [1850/2000]    eta: 0:00:30  time: 0.1842  data_time: 0.0016  memory: 854  
09/21 01:11:58 - mmengine - INFO - Iter(test) [1900/2000]    eta: 0:00:20  time: 0.1982  data_time: 0.0015  memory: 1068  
09/21 01:12:07 - mmengine - INFO - Iter(test) [1950/2000]    eta: 0:00:10  time: 0.1801  data_time: 0.0014  memory: 1306  
09/21 01:12:17 - mmengine - INFO - Iter(test) [2000/2000]    eta: 0:00:00  time: 0.1866  data_time: 0.0014  memory: 1094  
09/21 01:12:17 - mmengine - INFO - per class results:
09/21 01:12:17 - mmengine - INFO - 
+---------------------+-------+-------+
|        Class        |  IoU  |  Acc  |
+---------------------+-------+-------+
|         wall        | 74.23 | 85.96 |
|       building      | 81.58 | 90.57 |
|         sky         | 93.21 | 96.15 |
|        floor        | 78.87 | 88.85 |
|         tree        | 73.47 | 89.11 |
|       ceiling       | 79.99 | 89.28 |
|         road        | 81.64 | 91.04 |
|         bed         | 87.81 | 94.54 |
|      windowpane     | 58.44 | 78.76 |
|        grass        | 68.66 | 81.56 |
|       cabinet       | 56.22 | 70.97 |
|       sidewalk      | 57.95 | 66.38 |
|        person       | 80.81 | 88.96 |
|        earth        | 31.96 | 53.06 |
|         door        | 40.47 | 53.68 |
|        table        | 61.03 | 75.42 |
|       mountain      | 55.55 | 69.51 |
|        plant        | 48.23 | 60.64 |
|       curtain       |  61.7 | 73.09 |
|        chair        | 55.75 |  69.2 |
|         car         | 83.57 |  92.2 |
|        water        | 50.91 | 64.92 |
|       painting      | 68.16 | 82.09 |
|         sofa        | 61.62 | 72.59 |
|        shelf        |  39.2 | 57.29 |
|        house        | 48.36 | 74.87 |
|         sea         | 50.95 |  76.5 |
|        mirror       | 58.54 | 72.07 |
|         rug         | 46.77 | 53.67 |
|        field        | 32.46 | 60.73 |
|       armchair      | 43.41 | 72.11 |
|         seat        | 59.65 | 80.66 |
|        fence        | 44.33 | 64.53 |
|         desk        | 45.53 |  68.7 |
|         rock        | 43.59 | 71.84 |
|       wardrobe      | 44.19 | 63.62 |
|         lamp        | 62.43 | 74.27 |
|       bathtub       | 69.66 | 84.21 |
|       railing       | 34.34 |  49.0 |
|       cushion       | 54.93 | 69.24 |
|         base        | 24.99 | 40.54 |
|         box         | 18.45 | 25.39 |
|        column       | 38.89 | 52.03 |
|      signboard      | 35.95 | 47.82 |
|   chest of drawers  | 35.02 | 57.43 |
|       counter       | 24.79 | 35.12 |
|         sand        | 34.24 | 48.58 |
|         sink        | 72.44 | 78.64 |
|      skyscraper     | 45.77 | 59.86 |
|      fireplace      | 61.41 | 76.06 |
|     refrigerator    | 67.58 | 78.86 |
|      grandstand     | 38.62 | 72.99 |
|         path        | 27.32 | 41.68 |
|        stairs       | 18.43 | 24.64 |
|        runway       |  58.5 | 61.09 |
|         case        | 40.14 |  45.6 |
|      pool table     | 92.57 | 95.74 |
|        pillow       | 54.13 | 61.74 |
|     screen door     | 48.62 | 50.94 |
|       stairway      | 29.16 | 50.42 |
|        river        | 16.09 | 28.17 |
|        bridge       | 37.77 | 42.82 |
|       bookcase      | 28.99 | 54.21 |
|        blind        | 34.92 | 37.96 |
|     coffee table    | 62.41 | 81.19 |
|        toilet       | 83.85 | 86.98 |
|        flower       | 33.77 | 51.97 |
|         book        | 50.45 | 67.65 |
|         hill        | 14.09 | 27.08 |
|        bench        | 40.54 | 50.59 |
|      countertop     | 56.81 | 70.13 |
|        stove        | 69.88 | 79.18 |
|         palm        | 49.69 | 67.57 |
|    kitchen island   | 34.41 | 79.71 |
|       computer      | 52.06 | 58.17 |
|     swivel chair    | 45.46 |  65.9 |
|         boat        | 74.46 | 86.92 |
|         bar         | 58.17 | 72.99 |
|    arcade machine   | 31.57 | 34.91 |
|        hovel        |  36.4 | 48.25 |
|         bus         | 85.38 | 89.89 |
|        towel        |  54.8 | 65.39 |
|        light        | 51.79 | 63.26 |
|        truck        | 42.12 | 52.08 |
|        tower        | 31.52 | 39.31 |
|      chandelier     | 65.23 | 78.91 |
|        awning       | 26.23 |  37.7 |
|     streetlight     | 29.53 | 43.08 |
|        booth        | 60.91 | 70.72 |
| television receiver | 70.32 | 81.52 |
|       airplane      |  55.4 | 65.62 |
|      dirt track     |  0.91 |  3.89 |
|       apparel       | 29.81 | 40.61 |
|         pole        | 22.76 | 38.28 |
|         land        |  6.49 |  9.78 |
|      bannister      | 19.33 | 28.76 |
|      escalator      | 18.45 | 18.92 |
|       ottoman       | 39.68 | 56.24 |
|        bottle       | 19.95 | 24.07 |
|        buffet       | 42.23 | 52.88 |
|        poster       |  26.0 |  34.6 |
|        stage        |  9.88 | 19.27 |
|         van         | 44.77 |  67.4 |
|         ship        |  6.9  |  6.96 |
|       fountain      | 36.14 | 37.36 |
|    conveyer belt    | 53.73 | 68.93 |
|        canopy       | 24.87 |  36.7 |
|        washer       | 65.21 | 69.64 |
|      plaything      |  13.8 | 20.82 |
|    swimming pool    | 32.36 | 61.18 |
|        stool        | 43.33 | 54.74 |
|        barrel       | 50.29 | 51.14 |
|        basket       | 38.14 | 43.88 |
|      waterfall      | 40.35 | 46.41 |
|         tent        |  76.7 | 97.99 |
|         bag         | 12.77 | 14.49 |
|       minibike      | 67.83 | 77.65 |
|        cradle       | 76.14 | 94.53 |
|         oven        | 20.08 | 49.91 |
|         ball        | 39.11 | 67.56 |
|         food        | 56.78 | 82.62 |
|         step        |  9.81 | 13.22 |
|         tank        | 44.88 | 51.02 |
|      trade name     | 26.94 | 32.34 |
|      microwave      | 41.52 | 44.73 |
|         pot         | 47.22 | 56.11 |
|        animal       | 63.58 |  66.8 |
|       bicycle       | 54.23 | 75.92 |
|         lake        |  8.53 |  9.32 |
|      dishwasher     | 55.93 | 67.51 |
|        screen       | 77.68 | 89.17 |
|       blanket       |  8.11 |  10.4 |
|      sculpture      |  35.6 | 59.69 |
|         hood        | 59.95 | 63.41 |
|        sconce       | 42.96 | 52.69 |
|         vase        |  40.1 | 58.96 |
|    traffic light    | 30.28 | 50.24 |
|         tray        | 14.56 | 21.54 |
|        ashcan       | 32.86 | 52.13 |
|         fan         | 58.11 | 72.78 |
|         pier        | 15.14 | 16.59 |
|      crt screen     |  4.37 | 10.99 |
|        plate        | 56.49 |  70.4 |
|       monitor       |  4.52 |  5.97 |
|    bulletin board   | 42.81 | 53.42 |
|        shower       |  7.78 | 84.76 |
|       radiator      | 45.12 | 59.31 |
|        glass        | 15.51 | 16.97 |
|        clock        | 30.62 | 40.92 |
|         flag        | 35.23 | 38.73 |
+---------------------+-------+-------+
09/21 01:12:17 - mmengine - INFO - Iter(test) [2000/2000]    aAcc: 80.8200  mIoU: 45.1200  mAcc: 57.8700  data_time: 0.0017  time: 0.2041
Finished processing corruption type: shot_noise
Processing corruption type: impulse_noise
09/21 01:12:33 - mmengine - INFO - 
------------------------------------------------------------
System environment:
    sys.platform: linux
    Python: 3.10.13 | packaged by conda-forge | (main, Dec 23 2023, 15:36:39) [GCC 12.3.0]
    CUDA available: True
    MUSA available: False
    numpy_random_seed: 2120201137
    GPU 0: Tesla V100-SXM2-32GB
    CUDA_HOME: /opt/bwhpc/common/devel/cuda/11.7
    NVCC: Cuda compilation tools, release 11.7, V11.7.99
    GCC: gcc (GCC) 8.5.0 20210514 (Red Hat 8.5.0-18)
    PyTorch: 1.13.1
    PyTorch compiling details: PyTorch built with:
  - GCC 9.3
  - C++ Version: 201402
  - Intel(R) oneAPI Math Kernel Library Version 2023.1-Product Build 20230303 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v2.6.0 (Git Hash 52b5f107dd9cf10910aaa19cb47f3abf9b349815)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - LAPACK is enabled (usually provided by MKL)
  - NNPACK is enabled
  - CPU capability usage: AVX2
  - CUDA Runtime 11.7
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_61,code=sm_61;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86;-gencode;arch=compute_37,code=compute_37
  - CuDNN 8.5
  - Magma 2.6.1
  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.7, CUDNN_VERSION=8.5.0, CXX_COMPILER=/opt/rh/devtoolset-9/root/usr/bin/c++, CXX_FLAGS= -fabi-version=11 -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -DEDGE_PROFILER_USE_KINETO -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Werror=non-virtual-dtor -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wunused-local-typedefs -Wno-unused-parameter -Wno-unused-function -Wno-unused-result -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Werror=cast-function-type -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.13.1, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, USE_ROCM=OFF, 

    TorchVision: 0.14.1
    OpenCV: 3.4.18
    MMEngine: 0.10.4

Runtime environment:
    cudnn_benchmark: True
    mp_cfg: {'mp_start_method': 'fork', 'opencv_num_threads': 0}
    dist_cfg: {'backend': 'nccl'}
    seed: 2120201137
    Distributed launcher: none
    Distributed training: False
    GPU number: 1
------------------------------------------------------------

09/21 01:12:34 - mmengine - INFO - Config:
auto_scale_lr = dict(base_batch_size=16, enable=False)
backbone_embed_multi = dict(decay_mult=0.0, lr_mult=0.1)
backbone_norm_multi = dict(decay_mult=0.0, lr_mult=0.1)
crop_size = (
    512,
    512,
)
custom_imports = dict(allow_failed_imports=False, imports='mmdet.models')
custom_keys = dict({
    'absolute_pos_embed':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone':
    dict(decay_mult=1.0, lr_mult=0.1),
    'backbone.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.patch_embed.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.0.blocks.0.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.0.blocks.1.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.0.downsample.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.1.blocks.0.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.1.blocks.1.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.1.downsample.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.0.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.1.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.10.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.11.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.12.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.13.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.14.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.15.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.16.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.17.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.2.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.3.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.4.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.5.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.6.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.7.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.8.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.9.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.downsample.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.3.blocks.0.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.3.blocks.1.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'level_embed':
    dict(decay_mult=0.0, lr_mult=1.0),
    'query_embed':
    dict(decay_mult=0.0, lr_mult=1.0),
    'query_feat':
    dict(decay_mult=0.0, lr_mult=1.0),
    'relative_position_bias_table':
    dict(decay_mult=0.0, lr_mult=0.1)
})
data_root = 'data/ade/ADEChallengeData2016'
dataset_type = 'ADE20KDataset'
default_hooks = dict(
    checkpoint=dict(
        by_epoch=False, interval=5000, save_best='mIoU',
        type='CheckpointHook'),
    logger=dict(interval=50, log_metric_by_epoch=False, type='LoggerHook'),
    param_scheduler=dict(type='ParamSchedulerHook'),
    sampler_seed=dict(type='DistSamplerSeedHook'),
    timer=dict(type='IterTimerHook'),
    visualization=dict(type='SegVisualizationHook'))
default_scope = 'mmseg'
depths = [
    2,
    2,
    18,
    2,
]
embed_multi = dict(decay_mult=0.0, lr_mult=1.0)
env_cfg = dict(
    cudnn_benchmark=True,
    dist_cfg=dict(backend='nccl'),
    mp_cfg=dict(mp_start_method='fork', opencv_num_threads=0))
img_ratios = [
    0.5,
    0.75,
    1.0,
    1.25,
    1.5,
    1.75,
]
launcher = 'none'
load_from = '../checkpoint_files/ade20k/mask2former/mask2former_swin-s_8xb2-160k_ade20k-512x512_20221204_143905-e715144e.pth'
log_level = 'INFO'
log_processor = dict(by_epoch=False)
model = dict(
    backbone=dict(
        attn_drop_rate=0.0,
        depths=[
            2,
            2,
            18,
            2,
        ],
        drop_path_rate=0.3,
        drop_rate=0.0,
        embed_dims=96,
        frozen_stages=-1,
        init_cfg=dict(
            checkpoint=
            'https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/swin/swin_small_patch4_window7_224_20220317-7ba6d6dd.pth',
            type='Pretrained'),
        mlp_ratio=4,
        num_heads=[
            3,
            6,
            12,
            24,
        ],
        out_indices=(
            0,
            1,
            2,
            3,
        ),
        patch_norm=True,
        qk_scale=None,
        qkv_bias=True,
        type='SwinTransformer',
        window_size=7,
        with_cp=False),
    data_preprocessor=dict(
        bgr_to_rgb=True,
        corruption='impulse_noise',
        mean=[
            123.675,
            116.28,
            103.53,
        ],
        pad_val=0,
        seg_pad_val=255,
        size=(
            512,
            512,
        ),
        std=[
            58.395,
            57.12,
            57.375,
        ],
        test_cfg=dict(size_divisor=32),
        type='SegDataPreProcessor'),
    decode_head=dict(
        align_corners=False,
        enforce_decoder_input_project=False,
        feat_channels=256,
        in_channels=[
            96,
            192,
            384,
            768,
        ],
        loss_cls=dict(
            class_weight=[
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                0.1,
            ],
            loss_weight=2.0,
            reduction='mean',
            type='mmdet.CrossEntropyLoss',
            use_sigmoid=False),
        loss_dice=dict(
            activate=True,
            eps=1.0,
            loss_weight=5.0,
            naive_dice=True,
            reduction='mean',
            type='mmdet.DiceLoss',
            use_sigmoid=True),
        loss_mask=dict(
            loss_weight=5.0,
            reduction='mean',
            type='mmdet.CrossEntropyLoss',
            use_sigmoid=True),
        num_classes=150,
        num_queries=100,
        num_transformer_feat_level=3,
        out_channels=256,
        pixel_decoder=dict(
            act_cfg=dict(type='ReLU'),
            encoder=dict(
                init_cfg=None,
                layer_cfg=dict(
                    ffn_cfg=dict(
                        act_cfg=dict(inplace=True, type='ReLU'),
                        embed_dims=256,
                        feedforward_channels=1024,
                        ffn_drop=0.0,
                        num_fcs=2),
                    self_attn_cfg=dict(
                        batch_first=True,
                        dropout=0.0,
                        embed_dims=256,
                        im2col_step=64,
                        init_cfg=None,
                        norm_cfg=None,
                        num_heads=8,
                        num_levels=3,
                        num_points=4)),
                num_layers=6),
            init_cfg=None,
            norm_cfg=dict(num_groups=32, type='GN'),
            num_outs=3,
            positional_encoding=dict(normalize=True, num_feats=128),
            type='mmdet.MSDeformAttnPixelDecoder'),
        positional_encoding=dict(normalize=True, num_feats=128),
        strides=[
            4,
            8,
            16,
            32,
        ],
        train_cfg=dict(
            assigner=dict(
                match_costs=[
                    dict(type='mmdet.ClassificationCost', weight=2.0),
                    dict(
                        type='mmdet.CrossEntropyLossCost',
                        use_sigmoid=True,
                        weight=5.0),
                    dict(
                        eps=1.0,
                        pred_act=True,
                        type='mmdet.DiceCost',
                        weight=5.0),
                ],
                type='mmdet.HungarianAssigner'),
            importance_sample_ratio=0.75,
            num_points=12544,
            oversample_ratio=3.0,
            sampler=dict(type='mmdet.MaskPseudoSampler')),
        transformer_decoder=dict(
            init_cfg=None,
            layer_cfg=dict(
                cross_attn_cfg=dict(
                    attn_drop=0.0,
                    batch_first=True,
                    dropout_layer=None,
                    embed_dims=256,
                    num_heads=8,
                    proj_drop=0.0),
                ffn_cfg=dict(
                    act_cfg=dict(inplace=True, type='ReLU'),
                    add_identity=True,
                    dropout_layer=None,
                    embed_dims=256,
                    feedforward_channels=2048,
                    ffn_drop=0.0,
                    num_fcs=2),
                self_attn_cfg=dict(
                    attn_drop=0.0,
                    batch_first=True,
                    dropout_layer=None,
                    embed_dims=256,
                    num_heads=8,
                    proj_drop=0.0)),
            num_layers=9,
            return_intermediate=True),
        type='Mask2FormerHead'),
    test_cfg=dict(mode='whole'),
    train_cfg=dict(),
    type='EncoderDecoder')
num_classes = 150
optim_wrapper = dict(
    clip_grad=dict(max_norm=0.01, norm_type=2),
    optimizer=dict(
        betas=(
            0.9,
            0.999,
        ),
        eps=1e-08,
        lr=0.0001,
        type='AdamW',
        weight_decay=0.05),
    paramwise_cfg=dict(
        custom_keys=dict({
            'absolute_pos_embed':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone':
            dict(decay_mult=1.0, lr_mult=0.1),
            'backbone.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.patch_embed.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.0.blocks.0.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.0.blocks.1.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.0.downsample.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.1.blocks.0.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.1.blocks.1.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.1.downsample.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.0.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.1.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.10.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.11.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.12.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.13.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.14.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.15.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.16.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.17.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.2.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.3.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.4.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.5.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.6.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.7.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.8.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.9.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.downsample.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.3.blocks.0.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.3.blocks.1.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'level_embed':
            dict(decay_mult=0.0, lr_mult=1.0),
            'query_embed':
            dict(decay_mult=0.0, lr_mult=1.0),
            'query_feat':
            dict(decay_mult=0.0, lr_mult=1.0),
            'relative_position_bias_table':
            dict(decay_mult=0.0, lr_mult=0.1)
        }),
        norm_decay_mult=0.0),
    type='OptimWrapper')
optimizer = dict(
    betas=(
        0.9,
        0.999,
    ),
    eps=1e-08,
    lr=0.0001,
    type='AdamW',
    weight_decay=0.05)
param_scheduler = [
    dict(
        begin=0,
        by_epoch=False,
        end=160000,
        eta_min=0,
        power=0.9,
        type='PolyLR'),
]
pretrained = 'https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/swin/swin_small_patch4_window7_224_20220317-7ba6d6dd.pth'
resume = False
test_cfg = dict(type='TestLoop')
test_dataloader = dict(
    batch_size=1,
    dataset=dict(
        data_prefix=dict(
            img_path='images/validation',
            seg_map_path='annotations/validation'),
        data_root='data/ade/ADEChallengeData2016',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(keep_ratio=True, scale=(
                2048,
                512,
            ), type='Resize'),
            dict(reduce_zero_label=True, type='LoadAnnotations'),
            dict(type='PackSegInputs'),
        ],
        type='ADE20KDataset'),
    num_workers=4,
    persistent_workers=True,
    sampler=dict(shuffle=False, type='DefaultSampler'))
test_evaluator = dict(
    iou_metrics=[
        'mIoU',
    ], type='IoUMetric')
test_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(keep_ratio=True, scale=(
        2048,
        512,
    ), type='Resize'),
    dict(reduce_zero_label=True, type='LoadAnnotations'),
    dict(type='PackSegInputs'),
]
train_cfg = dict(
    max_iters=160000, type='IterBasedTrainLoop', val_interval=5000)
train_dataloader = dict(
    batch_size=2,
    dataset=dict(
        data_prefix=dict(
            img_path='images/training', seg_map_path='annotations/training'),
        data_root='data/ade/ADEChallengeData2016',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(reduce_zero_label=True, type='LoadAnnotations'),
            dict(
                max_size=2048,
                resize_type='ResizeShortestEdge',
                scales=[
                    256,
                    307,
                    358,
                    409,
                    460,
                    512,
                    563,
                    614,
                    665,
                    716,
                    768,
                    819,
                    870,
                    921,
                    972,
                    1024,
                ],
                type='RandomChoiceResize'),
            dict(
                cat_max_ratio=0.75, crop_size=(
                    512,
                    512,
                ), type='RandomCrop'),
            dict(prob=0.5, type='RandomFlip'),
            dict(type='PhotoMetricDistortion'),
            dict(type='PackSegInputs'),
        ],
        type='ADE20KDataset'),
    num_workers=4,
    persistent_workers=True,
    sampler=dict(shuffle=True, type='InfiniteSampler'))
train_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(reduce_zero_label=True, type='LoadAnnotations'),
    dict(
        max_size=2048,
        resize_type='ResizeShortestEdge',
        scales=[
            256,
            307,
            358,
            409,
            460,
            512,
            563,
            614,
            665,
            716,
            768,
            819,
            870,
            921,
            972,
            1024,
        ],
        type='RandomChoiceResize'),
    dict(cat_max_ratio=0.75, crop_size=(
        512,
        512,
    ), type='RandomCrop'),
    dict(prob=0.5, type='RandomFlip'),
    dict(type='PhotoMetricDistortion'),
    dict(type='PackSegInputs'),
]
tta_model = dict(type='SegTTAModel')
tta_pipeline = [
    dict(backend_args=None, type='LoadImageFromFile'),
    dict(
        transforms=[
            [
                dict(keep_ratio=True, scale_factor=0.5, type='Resize'),
                dict(keep_ratio=True, scale_factor=0.75, type='Resize'),
                dict(keep_ratio=True, scale_factor=1.0, type='Resize'),
                dict(keep_ratio=True, scale_factor=1.25, type='Resize'),
                dict(keep_ratio=True, scale_factor=1.5, type='Resize'),
                dict(keep_ratio=True, scale_factor=1.75, type='Resize'),
            ],
            [
                dict(direction='horizontal', prob=0.0, type='RandomFlip'),
                dict(direction='horizontal', prob=1.0, type='RandomFlip'),
            ],
            [
                dict(type='LoadAnnotations'),
            ],
            [
                dict(type='PackSegInputs'),
            ],
        ],
        type='TestTimeAug'),
]
val_cfg = dict(type='ValLoop')
val_dataloader = dict(
    batch_size=1,
    dataset=dict(
        data_prefix=dict(
            img_path='images/validation',
            seg_map_path='annotations/validation'),
        data_root='data/ade/ADEChallengeData2016',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(keep_ratio=True, scale=(
                2048,
                512,
            ), type='Resize'),
            dict(reduce_zero_label=True, type='LoadAnnotations'),
            dict(type='PackSegInputs'),
        ],
        type='ADE20KDataset'),
    num_workers=4,
    persistent_workers=True,
    sampler=dict(shuffle=False, type='DefaultSampler'))
val_evaluator = dict(
    iou_metrics=[
        'mIoU',
    ], type='IoUMetric')
vis_backends = [
    dict(type='LocalVisBackend'),
]
visualizer = dict(
    name='visualizer',
    type='SegLocalVisualizer',
    vis_backends=[
        dict(type='LocalVisBackend'),
    ])
work_dir = '../corruptions/work_dirs/ade20k/mask2former/mask2former_swin-s_8xb2-160k_ade20k-512x512/impulse_noise'

09/21 01:12:39 - mmengine - INFO - Distributed training is not used, all SyncBatchNorm (SyncBN) layers in the model will be automatically reverted to BatchNormXd layers if they are used.
09/21 01:12:39 - mmengine - INFO - Hooks will be executed in the following order:
before_run:
(VERY_HIGH   ) RuntimeInfoHook                    
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
before_train:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_train_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(NORMAL      ) DistSamplerSeedHook                
 -------------------- 
before_train_iter:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_train_iter:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(NORMAL      ) SegVisualizationHook               
(BELOW_NORMAL) LoggerHook                         
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
after_train_epoch:
(NORMAL      ) IterTimerHook                      
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_val:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
before_val_epoch:
(NORMAL      ) IterTimerHook                      
 -------------------- 
before_val_iter:
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_val_iter:
(NORMAL      ) IterTimerHook                      
(NORMAL      ) SegVisualizationHook               
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_val_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
after_val:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
after_train:
(VERY_HIGH   ) RuntimeInfoHook                    
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_test:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
before_test_epoch:
(NORMAL      ) IterTimerHook                      
 -------------------- 
before_test_iter:
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_test_iter:
(NORMAL      ) IterTimerHook                      
(NORMAL      ) SegVisualizationHook               
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_test_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_test:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
after_run:
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
09/21 01:12:39 - mmengine - WARNING - The prefix is not set in metric class IoUMetric.
Loads checkpoint by local backend from path: ../checkpoint_files/ade20k/mask2former/mask2former_swin-s_8xb2-160k_ade20k-512x512_20221204_143905-e715144e.pth
09/21 01:12:41 - mmengine - INFO - Load checkpoint from ../checkpoint_files/ade20k/mask2former/mask2former_swin-s_8xb2-160k_ade20k-512x512_20221204_143905-e715144e.pth
09/21 01:12:59 - mmengine - INFO - Iter(test) [  50/2000]    eta: 0:12:00  time: 0.2700  data_time: 0.0016  memory: 12814  
09/21 01:13:06 - mmengine - INFO - Iter(test) [ 100/2000]    eta: 0:08:11  time: 0.1709  data_time: 0.0016  memory: 12795  
09/21 01:13:11 - mmengine - INFO - Iter(test) [ 150/2000]    eta: 0:06:18  time: 0.0990  data_time: 0.0015  memory: 935  
09/21 01:13:19 - mmengine - INFO - Iter(test) [ 200/2000]    eta: 0:05:43  time: 0.1034  data_time: 0.0015  memory: 12835  
09/21 01:13:25 - mmengine - INFO - Iter(test) [ 250/2000]    eta: 0:05:14  time: 0.1036  data_time: 0.0014  memory: 12838  
09/21 01:13:31 - mmengine - INFO - Iter(test) [ 300/2000]    eta: 0:04:47  time: 0.1028  data_time: 0.0016  memory: 12803  
09/21 01:13:38 - mmengine - INFO - Iter(test) [ 350/2000]    eta: 0:04:30  time: 0.1046  data_time: 0.0015  memory: 12810  
09/21 01:13:43 - mmengine - INFO - Iter(test) [ 400/2000]    eta: 0:04:11  time: 0.0902  data_time: 0.0014  memory: 12775  
09/21 01:13:48 - mmengine - INFO - Iter(test) [ 450/2000]    eta: 0:03:51  time: 0.0881  data_time: 0.0020  memory: 975  
09/21 01:13:52 - mmengine - INFO - Iter(test) [ 500/2000]    eta: 0:03:35  time: 0.1012  data_time: 0.0014  memory: 935  
09/21 01:13:58 - mmengine - INFO - Iter(test) [ 550/2000]    eta: 0:03:24  time: 0.1117  data_time: 0.0017  memory: 1042  
09/21 01:14:03 - mmengine - INFO - Iter(test) [ 600/2000]    eta: 0:03:12  time: 0.0925  data_time: 0.0016  memory: 1040  
09/21 01:14:08 - mmengine - INFO - Iter(test) [ 650/2000]    eta: 0:03:02  time: 0.1786  data_time: 0.0013  memory: 12816  
09/21 01:14:14 - mmengine - INFO - Iter(test) [ 700/2000]    eta: 0:02:53  time: 0.1044  data_time: 0.0016  memory: 12806  
09/21 01:14:20 - mmengine - INFO - Iter(test) [ 750/2000]    eta: 0:02:44  time: 0.1031  data_time: 0.0015  memory: 1096  
09/21 01:14:24 - mmengine - INFO - Iter(test) [ 800/2000]    eta: 0:02:35  time: 0.0884  data_time: 0.0016  memory: 935  
09/21 01:14:29 - mmengine - INFO - Iter(test) [ 850/2000]    eta: 0:02:25  time: 0.0918  data_time: 0.0034  memory: 908  
09/21 01:14:33 - mmengine - INFO - Iter(test) [ 900/2000]    eta: 0:02:17  time: 0.0995  data_time: 0.0014  memory: 987  
09/21 01:14:38 - mmengine - INFO - Iter(test) [ 950/2000]    eta: 0:02:10  time: 0.1049  data_time: 0.0029  memory: 1015  
09/21 01:14:43 - mmengine - INFO - Iter(test) [1000/2000]    eta: 0:02:02  time: 0.0862  data_time: 0.0014  memory: 1015  
09/21 01:14:49 - mmengine - INFO - Iter(test) [1050/2000]    eta: 0:01:55  time: 0.0941  data_time: 0.0014  memory: 12819  
09/21 01:14:53 - mmengine - INFO - Iter(test) [1100/2000]    eta: 0:01:48  time: 0.1049  data_time: 0.0015  memory: 1012  
09/21 01:14:59 - mmengine - INFO - Iter(test) [1150/2000]    eta: 0:01:42  time: 0.1050  data_time: 0.0015  memory: 985  
09/21 01:15:04 - mmengine - INFO - Iter(test) [1200/2000]    eta: 0:01:35  time: 0.0875  data_time: 0.0014  memory: 1921  
09/21 01:15:09 - mmengine - INFO - Iter(test) [1250/2000]    eta: 0:01:28  time: 0.0879  data_time: 0.0014  memory: 12797  
09/21 01:15:13 - mmengine - INFO - Iter(test) [1300/2000]    eta: 0:01:22  time: 0.1052  data_time: 0.0015  memory: 935  
09/21 01:15:19 - mmengine - INFO - Iter(test) [1350/2000]    eta: 0:01:16  time: 0.0968  data_time: 0.0015  memory: 935  
09/21 01:15:23 - mmengine - INFO - Iter(test) [1400/2000]    eta: 0:01:09  time: 0.0938  data_time: 0.0014  memory: 1012  
09/21 01:15:28 - mmengine - INFO - Iter(test) [1450/2000]    eta: 0:01:03  time: 0.0949  data_time: 0.0029  memory: 1015  
09/21 01:15:32 - mmengine - INFO - Iter(test) [1500/2000]    eta: 0:00:57  time: 0.0991  data_time: 0.0014  memory: 933  
09/21 01:15:38 - mmengine - INFO - Iter(test) [1550/2000]    eta: 0:00:51  time: 0.1078  data_time: 0.0015  memory: 1015  
09/21 01:15:43 - mmengine - INFO - Iter(test) [1600/2000]    eta: 0:00:45  time: 0.0878  data_time: 0.0015  memory: 908  
09/21 01:15:48 - mmengine - INFO - Iter(test) [1650/2000]    eta: 0:00:39  time: 0.0867  data_time: 0.0013  memory: 12807  
09/21 01:15:53 - mmengine - INFO - Iter(test) [1700/2000]    eta: 0:00:33  time: 0.1055  data_time: 0.0016  memory: 1012  
09/21 01:15:58 - mmengine - INFO - Iter(test) [1750/2000]    eta: 0:00:28  time: 0.1077  data_time: 0.0014  memory: 1039  
09/21 01:16:03 - mmengine - INFO - Iter(test) [1800/2000]    eta: 0:00:22  time: 0.0884  data_time: 0.0016  memory: 935  
09/21 01:16:07 - mmengine - INFO - Iter(test) [1850/2000]    eta: 0:00:16  time: 0.0881  data_time: 0.0016  memory: 854  
09/21 01:16:12 - mmengine - INFO - Iter(test) [1900/2000]    eta: 0:00:11  time: 0.1034  data_time: 0.0015  memory: 1068  
09/21 01:16:17 - mmengine - INFO - Iter(test) [1950/2000]    eta: 0:00:05  time: 0.1032  data_time: 0.0014  memory: 1306  
09/21 01:16:22 - mmengine - INFO - Iter(test) [2000/2000]    eta: 0:00:00  time: 0.0829  data_time: 0.0013  memory: 1094  
09/21 01:16:22 - mmengine - INFO - per class results:
09/21 01:16:22 - mmengine - INFO - 
+---------------------+-------+-------+
|        Class        |  IoU  |  Acc  |
+---------------------+-------+-------+
|         wall        |  74.8 | 86.51 |
|       building      | 81.28 |  90.9 |
|         sky         | 93.58 | 96.66 |
|        floor        | 78.62 | 88.87 |
|         tree        | 73.71 | 88.52 |
|       ceiling       | 79.57 | 86.27 |
|         road        | 81.32 | 90.67 |
|         bed         | 86.95 | 94.83 |
|      windowpane     | 58.19 | 77.07 |
|        grass        | 65.21 | 79.38 |
|       cabinet       | 55.29 | 70.64 |
|       sidewalk      | 61.59 | 73.88 |
|        person       | 80.81 | 88.28 |
|        earth        | 31.72 | 49.62 |
|         door        | 41.69 | 54.39 |
|        table        | 59.43 | 74.45 |
|       mountain      | 56.81 | 72.99 |
|        plant        | 51.06 | 61.17 |
|       curtain       | 66.57 | 79.09 |
|        chair        | 55.69 | 70.15 |
|         car         | 83.24 | 91.23 |
|        water        | 64.09 | 77.95 |
|       painting      | 68.14 | 81.89 |
|         sofa        | 58.21 |  69.0 |
|        shelf        | 40.92 | 59.42 |
|        house        | 51.89 | 76.59 |
|         sea         | 67.51 |  83.9 |
|        mirror       | 61.42 | 76.27 |
|         rug         | 50.87 | 54.76 |
|        field        | 29.71 | 54.48 |
|       armchair      | 36.61 | 65.67 |
|         seat        | 62.04 | 78.47 |
|        fence        | 41.84 | 60.77 |
|         desk        |  46.9 | 75.44 |
|         rock        | 47.76 | 78.04 |
|       wardrobe      |  45.5 | 71.01 |
|         lamp        | 63.96 | 75.04 |
|       bathtub       | 68.66 | 80.98 |
|       railing       | 31.91 | 49.39 |
|       cushion       | 55.53 | 67.85 |
|         base        | 26.86 | 43.96 |
|         box         | 20.05 | 24.57 |
|        column       | 41.82 | 50.93 |
|      signboard      | 35.77 | 47.83 |
|   chest of drawers  | 39.88 | 58.56 |
|       counter       | 19.62 | 31.27 |
|         sand        | 32.04 | 50.95 |
|         sink        | 70.75 | 78.65 |
|      skyscraper     | 33.81 | 43.13 |
|      fireplace      | 59.98 | 75.22 |
|     refrigerator    | 69.91 | 81.74 |
|      grandstand     | 39.19 | 69.01 |
|         path        | 31.06 | 45.95 |
|        stairs       | 24.51 | 29.54 |
|        runway       | 53.47 | 62.29 |
|         case        | 49.61 | 59.49 |
|      pool table     | 90.29 | 95.26 |
|        pillow       | 56.06 | 65.45 |
|     screen door     | 40.12 | 44.11 |
|       stairway      | 30.79 |  49.4 |
|        river        | 17.27 | 24.31 |
|        bridge       | 37.22 | 43.89 |
|       bookcase      | 32.97 | 57.39 |
|        blind        | 27.84 | 32.03 |
|     coffee table    | 64.63 | 82.53 |
|        toilet       |  83.7 |  86.9 |
|        flower       | 35.87 | 50.68 |
|         book        | 50.05 | 66.48 |
|         hill        | 13.37 | 24.61 |
|        bench        | 44.21 | 53.45 |
|      countertop     | 62.87 | 83.06 |
|        stove        | 74.68 | 84.71 |
|         palm        | 53.37 | 71.36 |
|    kitchen island   | 39.98 | 74.57 |
|       computer      |  58.2 | 64.16 |
|     swivel chair    | 49.26 | 67.16 |
|         boat        | 63.61 | 84.63 |
|         bar         | 41.14 | 55.25 |
|    arcade machine   | 41.61 | 44.97 |
|        hovel        | 39.79 | 47.35 |
|         bus         | 79.96 | 95.42 |
|        towel        | 53.91 | 64.73 |
|        light        | 54.48 | 63.44 |
|        truck        | 36.03 | 48.42 |
|        tower        | 47.66 | 62.47 |
|      chandelier     | 66.41 | 78.34 |
|        awning       | 24.53 | 37.25 |
|     streetlight     | 28.98 | 37.83 |
|        booth        | 49.64 | 68.52 |
| television receiver | 60.46 | 78.94 |
|       airplane      | 52.02 | 65.56 |
|      dirt track     |  2.5  |  9.68 |
|       apparel       | 33.06 | 44.35 |
|         pole        | 30.15 | 51.67 |
|         land        |  5.99 |  7.72 |
|      bannister      | 20.55 |  28.3 |
|      escalator      | 21.01 |  22.3 |
|       ottoman       | 41.61 | 56.63 |
|        bottle       | 18.84 | 22.01 |
|        buffet       | 42.77 | 48.51 |
|        poster       | 22.07 | 31.84 |
|        stage        | 15.28 | 22.75 |
|         van         | 46.57 | 71.61 |
|         ship        |  7.72 |  7.91 |
|       fountain      | 53.29 | 54.54 |
|    conveyer belt    | 51.88 | 69.19 |
|        canopy       | 27.56 | 38.18 |
|        washer       | 68.17 | 68.75 |
|      plaything      | 13.92 | 20.97 |
|    swimming pool    | 38.84 | 55.19 |
|        stool        | 45.02 | 56.69 |
|        barrel       | 46.86 | 49.63 |
|        basket       | 36.28 | 42.09 |
|      waterfall      | 39.45 | 50.48 |
|         tent        | 77.55 | 97.93 |
|         bag         | 17.75 | 21.14 |
|       minibike      | 70.22 |  85.3 |
|        cradle       | 78.53 | 95.37 |
|         oven        | 20.44 | 55.76 |
|         ball        | 32.22 | 71.72 |
|         food        | 60.85 | 81.89 |
|         step        | 15.12 | 22.86 |
|         tank        | 47.39 | 49.51 |
|      trade name     | 27.65 |  34.4 |
|      microwave      | 39.01 | 43.65 |
|         pot         | 48.39 | 56.84 |
|        animal       | 57.89 | 62.35 |
|       bicycle       | 56.76 | 77.44 |
|         lake        |  58.6 | 72.58 |
|      dishwasher     | 52.09 | 65.13 |
|        screen       |  56.6 | 90.51 |
|       blanket       |  7.99 | 11.09 |
|      sculpture      |  37.6 | 64.01 |
|         hood        | 59.34 | 61.63 |
|        sconce       | 41.83 | 52.31 |
|         vase        | 39.78 |  56.3 |
|    traffic light    | 30.01 | 51.93 |
|         tray        |  13.9 | 19.31 |
|        ashcan       | 36.96 | 57.65 |
|         fan         | 59.43 |  74.5 |
|         pier        | 13.57 | 14.76 |
|      crt screen     |  6.77 | 17.19 |
|        plate        | 54.53 | 68.36 |
|       monitor       |  1.48 |  2.05 |
|    bulletin board   | 34.14 |  49.4 |
|        shower       |  5.53 | 87.39 |
|       radiator      | 51.27 | 70.46 |
|        glass        | 16.51 | 17.51 |
|        clock        |  40.2 | 54.28 |
|         flag        | 32.41 |  37.2 |
+---------------------+-------+-------+
09/21 01:16:22 - mmengine - INFO - Iter(test) [2000/2000]    aAcc: 81.1600  mIoU: 45.9400  mAcc: 59.2900  data_time: 0.0017  time: 0.1107
Finished processing corruption type: impulse_noise
Processing corruption type: defocus_blur
09/21 01:16:27 - mmengine - INFO - 
------------------------------------------------------------
System environment:
    sys.platform: linux
    Python: 3.10.13 | packaged by conda-forge | (main, Dec 23 2023, 15:36:39) [GCC 12.3.0]
    CUDA available: True
    MUSA available: False
    numpy_random_seed: 1962753644
    GPU 0: Tesla V100-SXM2-32GB
    CUDA_HOME: /opt/bwhpc/common/devel/cuda/11.7
    NVCC: Cuda compilation tools, release 11.7, V11.7.99
    GCC: gcc (GCC) 8.5.0 20210514 (Red Hat 8.5.0-18)
    PyTorch: 1.13.1
    PyTorch compiling details: PyTorch built with:
  - GCC 9.3
  - C++ Version: 201402
  - Intel(R) oneAPI Math Kernel Library Version 2023.1-Product Build 20230303 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v2.6.0 (Git Hash 52b5f107dd9cf10910aaa19cb47f3abf9b349815)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - LAPACK is enabled (usually provided by MKL)
  - NNPACK is enabled
  - CPU capability usage: AVX2
  - CUDA Runtime 11.7
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_61,code=sm_61;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86;-gencode;arch=compute_37,code=compute_37
  - CuDNN 8.5
  - Magma 2.6.1
  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.7, CUDNN_VERSION=8.5.0, CXX_COMPILER=/opt/rh/devtoolset-9/root/usr/bin/c++, CXX_FLAGS= -fabi-version=11 -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -DEDGE_PROFILER_USE_KINETO -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Werror=non-virtual-dtor -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wunused-local-typedefs -Wno-unused-parameter -Wno-unused-function -Wno-unused-result -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Werror=cast-function-type -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.13.1, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, USE_ROCM=OFF, 

    TorchVision: 0.14.1
    OpenCV: 3.4.18
    MMEngine: 0.10.4

Runtime environment:
    cudnn_benchmark: True
    mp_cfg: {'mp_start_method': 'fork', 'opencv_num_threads': 0}
    dist_cfg: {'backend': 'nccl'}
    seed: 1962753644
    Distributed launcher: none
    Distributed training: False
    GPU number: 1
------------------------------------------------------------

09/21 01:16:27 - mmengine - INFO - Config:
auto_scale_lr = dict(base_batch_size=16, enable=False)
backbone_embed_multi = dict(decay_mult=0.0, lr_mult=0.1)
backbone_norm_multi = dict(decay_mult=0.0, lr_mult=0.1)
crop_size = (
    512,
    512,
)
custom_imports = dict(allow_failed_imports=False, imports='mmdet.models')
custom_keys = dict({
    'absolute_pos_embed':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone':
    dict(decay_mult=1.0, lr_mult=0.1),
    'backbone.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.patch_embed.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.0.blocks.0.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.0.blocks.1.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.0.downsample.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.1.blocks.0.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.1.blocks.1.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.1.downsample.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.0.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.1.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.10.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.11.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.12.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.13.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.14.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.15.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.16.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.17.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.2.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.3.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.4.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.5.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.6.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.7.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.8.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.9.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.downsample.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.3.blocks.0.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.3.blocks.1.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'level_embed':
    dict(decay_mult=0.0, lr_mult=1.0),
    'query_embed':
    dict(decay_mult=0.0, lr_mult=1.0),
    'query_feat':
    dict(decay_mult=0.0, lr_mult=1.0),
    'relative_position_bias_table':
    dict(decay_mult=0.0, lr_mult=0.1)
})
data_root = 'data/ade/ADEChallengeData2016'
dataset_type = 'ADE20KDataset'
default_hooks = dict(
    checkpoint=dict(
        by_epoch=False, interval=5000, save_best='mIoU',
        type='CheckpointHook'),
    logger=dict(interval=50, log_metric_by_epoch=False, type='LoggerHook'),
    param_scheduler=dict(type='ParamSchedulerHook'),
    sampler_seed=dict(type='DistSamplerSeedHook'),
    timer=dict(type='IterTimerHook'),
    visualization=dict(type='SegVisualizationHook'))
default_scope = 'mmseg'
depths = [
    2,
    2,
    18,
    2,
]
embed_multi = dict(decay_mult=0.0, lr_mult=1.0)
env_cfg = dict(
    cudnn_benchmark=True,
    dist_cfg=dict(backend='nccl'),
    mp_cfg=dict(mp_start_method='fork', opencv_num_threads=0))
img_ratios = [
    0.5,
    0.75,
    1.0,
    1.25,
    1.5,
    1.75,
]
launcher = 'none'
load_from = '../checkpoint_files/ade20k/mask2former/mask2former_swin-s_8xb2-160k_ade20k-512x512_20221204_143905-e715144e.pth'
log_level = 'INFO'
log_processor = dict(by_epoch=False)
model = dict(
    backbone=dict(
        attn_drop_rate=0.0,
        depths=[
            2,
            2,
            18,
            2,
        ],
        drop_path_rate=0.3,
        drop_rate=0.0,
        embed_dims=96,
        frozen_stages=-1,
        init_cfg=dict(
            checkpoint=
            'https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/swin/swin_small_patch4_window7_224_20220317-7ba6d6dd.pth',
            type='Pretrained'),
        mlp_ratio=4,
        num_heads=[
            3,
            6,
            12,
            24,
        ],
        out_indices=(
            0,
            1,
            2,
            3,
        ),
        patch_norm=True,
        qk_scale=None,
        qkv_bias=True,
        type='SwinTransformer',
        window_size=7,
        with_cp=False),
    data_preprocessor=dict(
        bgr_to_rgb=True,
        corruption='defocus_blur',
        mean=[
            123.675,
            116.28,
            103.53,
        ],
        pad_val=0,
        seg_pad_val=255,
        size=(
            512,
            512,
        ),
        std=[
            58.395,
            57.12,
            57.375,
        ],
        test_cfg=dict(size_divisor=32),
        type='SegDataPreProcessor'),
    decode_head=dict(
        align_corners=False,
        enforce_decoder_input_project=False,
        feat_channels=256,
        in_channels=[
            96,
            192,
            384,
            768,
        ],
        loss_cls=dict(
            class_weight=[
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                0.1,
            ],
            loss_weight=2.0,
            reduction='mean',
            type='mmdet.CrossEntropyLoss',
            use_sigmoid=False),
        loss_dice=dict(
            activate=True,
            eps=1.0,
            loss_weight=5.0,
            naive_dice=True,
            reduction='mean',
            type='mmdet.DiceLoss',
            use_sigmoid=True),
        loss_mask=dict(
            loss_weight=5.0,
            reduction='mean',
            type='mmdet.CrossEntropyLoss',
            use_sigmoid=True),
        num_classes=150,
        num_queries=100,
        num_transformer_feat_level=3,
        out_channels=256,
        pixel_decoder=dict(
            act_cfg=dict(type='ReLU'),
            encoder=dict(
                init_cfg=None,
                layer_cfg=dict(
                    ffn_cfg=dict(
                        act_cfg=dict(inplace=True, type='ReLU'),
                        embed_dims=256,
                        feedforward_channels=1024,
                        ffn_drop=0.0,
                        num_fcs=2),
                    self_attn_cfg=dict(
                        batch_first=True,
                        dropout=0.0,
                        embed_dims=256,
                        im2col_step=64,
                        init_cfg=None,
                        norm_cfg=None,
                        num_heads=8,
                        num_levels=3,
                        num_points=4)),
                num_layers=6),
            init_cfg=None,
            norm_cfg=dict(num_groups=32, type='GN'),
            num_outs=3,
            positional_encoding=dict(normalize=True, num_feats=128),
            type='mmdet.MSDeformAttnPixelDecoder'),
        positional_encoding=dict(normalize=True, num_feats=128),
        strides=[
            4,
            8,
            16,
            32,
        ],
        train_cfg=dict(
            assigner=dict(
                match_costs=[
                    dict(type='mmdet.ClassificationCost', weight=2.0),
                    dict(
                        type='mmdet.CrossEntropyLossCost',
                        use_sigmoid=True,
                        weight=5.0),
                    dict(
                        eps=1.0,
                        pred_act=True,
                        type='mmdet.DiceCost',
                        weight=5.0),
                ],
                type='mmdet.HungarianAssigner'),
            importance_sample_ratio=0.75,
            num_points=12544,
            oversample_ratio=3.0,
            sampler=dict(type='mmdet.MaskPseudoSampler')),
        transformer_decoder=dict(
            init_cfg=None,
            layer_cfg=dict(
                cross_attn_cfg=dict(
                    attn_drop=0.0,
                    batch_first=True,
                    dropout_layer=None,
                    embed_dims=256,
                    num_heads=8,
                    proj_drop=0.0),
                ffn_cfg=dict(
                    act_cfg=dict(inplace=True, type='ReLU'),
                    add_identity=True,
                    dropout_layer=None,
                    embed_dims=256,
                    feedforward_channels=2048,
                    ffn_drop=0.0,
                    num_fcs=2),
                self_attn_cfg=dict(
                    attn_drop=0.0,
                    batch_first=True,
                    dropout_layer=None,
                    embed_dims=256,
                    num_heads=8,
                    proj_drop=0.0)),
            num_layers=9,
            return_intermediate=True),
        type='Mask2FormerHead'),
    test_cfg=dict(mode='whole'),
    train_cfg=dict(),
    type='EncoderDecoder')
num_classes = 150
optim_wrapper = dict(
    clip_grad=dict(max_norm=0.01, norm_type=2),
    optimizer=dict(
        betas=(
            0.9,
            0.999,
        ),
        eps=1e-08,
        lr=0.0001,
        type='AdamW',
        weight_decay=0.05),
    paramwise_cfg=dict(
        custom_keys=dict({
            'absolute_pos_embed':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone':
            dict(decay_mult=1.0, lr_mult=0.1),
            'backbone.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.patch_embed.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.0.blocks.0.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.0.blocks.1.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.0.downsample.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.1.blocks.0.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.1.blocks.1.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.1.downsample.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.0.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.1.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.10.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.11.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.12.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.13.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.14.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.15.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.16.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.17.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.2.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.3.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.4.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.5.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.6.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.7.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.8.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.9.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.downsample.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.3.blocks.0.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.3.blocks.1.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'level_embed':
            dict(decay_mult=0.0, lr_mult=1.0),
            'query_embed':
            dict(decay_mult=0.0, lr_mult=1.0),
            'query_feat':
            dict(decay_mult=0.0, lr_mult=1.0),
            'relative_position_bias_table':
            dict(decay_mult=0.0, lr_mult=0.1)
        }),
        norm_decay_mult=0.0),
    type='OptimWrapper')
optimizer = dict(
    betas=(
        0.9,
        0.999,
    ),
    eps=1e-08,
    lr=0.0001,
    type='AdamW',
    weight_decay=0.05)
param_scheduler = [
    dict(
        begin=0,
        by_epoch=False,
        end=160000,
        eta_min=0,
        power=0.9,
        type='PolyLR'),
]
pretrained = 'https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/swin/swin_small_patch4_window7_224_20220317-7ba6d6dd.pth'
resume = False
test_cfg = dict(type='TestLoop')
test_dataloader = dict(
    batch_size=1,
    dataset=dict(
        data_prefix=dict(
            img_path='images/validation',
            seg_map_path='annotations/validation'),
        data_root='data/ade/ADEChallengeData2016',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(keep_ratio=True, scale=(
                2048,
                512,
            ), type='Resize'),
            dict(reduce_zero_label=True, type='LoadAnnotations'),
            dict(type='PackSegInputs'),
        ],
        type='ADE20KDataset'),
    num_workers=4,
    persistent_workers=True,
    sampler=dict(shuffle=False, type='DefaultSampler'))
test_evaluator = dict(
    iou_metrics=[
        'mIoU',
    ], type='IoUMetric')
test_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(keep_ratio=True, scale=(
        2048,
        512,
    ), type='Resize'),
    dict(reduce_zero_label=True, type='LoadAnnotations'),
    dict(type='PackSegInputs'),
]
train_cfg = dict(
    max_iters=160000, type='IterBasedTrainLoop', val_interval=5000)
train_dataloader = dict(
    batch_size=2,
    dataset=dict(
        data_prefix=dict(
            img_path='images/training', seg_map_path='annotations/training'),
        data_root='data/ade/ADEChallengeData2016',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(reduce_zero_label=True, type='LoadAnnotations'),
            dict(
                max_size=2048,
                resize_type='ResizeShortestEdge',
                scales=[
                    256,
                    307,
                    358,
                    409,
                    460,
                    512,
                    563,
                    614,
                    665,
                    716,
                    768,
                    819,
                    870,
                    921,
                    972,
                    1024,
                ],
                type='RandomChoiceResize'),
            dict(
                cat_max_ratio=0.75, crop_size=(
                    512,
                    512,
                ), type='RandomCrop'),
            dict(prob=0.5, type='RandomFlip'),
            dict(type='PhotoMetricDistortion'),
            dict(type='PackSegInputs'),
        ],
        type='ADE20KDataset'),
    num_workers=4,
    persistent_workers=True,
    sampler=dict(shuffle=True, type='InfiniteSampler'))
train_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(reduce_zero_label=True, type='LoadAnnotations'),
    dict(
        max_size=2048,
        resize_type='ResizeShortestEdge',
        scales=[
            256,
            307,
            358,
            409,
            460,
            512,
            563,
            614,
            665,
            716,
            768,
            819,
            870,
            921,
            972,
            1024,
        ],
        type='RandomChoiceResize'),
    dict(cat_max_ratio=0.75, crop_size=(
        512,
        512,
    ), type='RandomCrop'),
    dict(prob=0.5, type='RandomFlip'),
    dict(type='PhotoMetricDistortion'),
    dict(type='PackSegInputs'),
]
tta_model = dict(type='SegTTAModel')
tta_pipeline = [
    dict(backend_args=None, type='LoadImageFromFile'),
    dict(
        transforms=[
            [
                dict(keep_ratio=True, scale_factor=0.5, type='Resize'),
                dict(keep_ratio=True, scale_factor=0.75, type='Resize'),
                dict(keep_ratio=True, scale_factor=1.0, type='Resize'),
                dict(keep_ratio=True, scale_factor=1.25, type='Resize'),
                dict(keep_ratio=True, scale_factor=1.5, type='Resize'),
                dict(keep_ratio=True, scale_factor=1.75, type='Resize'),
            ],
            [
                dict(direction='horizontal', prob=0.0, type='RandomFlip'),
                dict(direction='horizontal', prob=1.0, type='RandomFlip'),
            ],
            [
                dict(type='LoadAnnotations'),
            ],
            [
                dict(type='PackSegInputs'),
            ],
        ],
        type='TestTimeAug'),
]
val_cfg = dict(type='ValLoop')
val_dataloader = dict(
    batch_size=1,
    dataset=dict(
        data_prefix=dict(
            img_path='images/validation',
            seg_map_path='annotations/validation'),
        data_root='data/ade/ADEChallengeData2016',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(keep_ratio=True, scale=(
                2048,
                512,
            ), type='Resize'),
            dict(reduce_zero_label=True, type='LoadAnnotations'),
            dict(type='PackSegInputs'),
        ],
        type='ADE20KDataset'),
    num_workers=4,
    persistent_workers=True,
    sampler=dict(shuffle=False, type='DefaultSampler'))
val_evaluator = dict(
    iou_metrics=[
        'mIoU',
    ], type='IoUMetric')
vis_backends = [
    dict(type='LocalVisBackend'),
]
visualizer = dict(
    name='visualizer',
    type='SegLocalVisualizer',
    vis_backends=[
        dict(type='LocalVisBackend'),
    ])
work_dir = '../corruptions/work_dirs/ade20k/mask2former/mask2former_swin-s_8xb2-160k_ade20k-512x512/defocus_blur'

09/21 01:16:30 - mmengine - INFO - Distributed training is not used, all SyncBatchNorm (SyncBN) layers in the model will be automatically reverted to BatchNormXd layers if they are used.
09/21 01:16:30 - mmengine - INFO - Hooks will be executed in the following order:
before_run:
(VERY_HIGH   ) RuntimeInfoHook                    
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
before_train:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_train_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(NORMAL      ) DistSamplerSeedHook                
 -------------------- 
before_train_iter:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_train_iter:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(NORMAL      ) SegVisualizationHook               
(BELOW_NORMAL) LoggerHook                         
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
after_train_epoch:
(NORMAL      ) IterTimerHook                      
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_val:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
before_val_epoch:
(NORMAL      ) IterTimerHook                      
 -------------------- 
before_val_iter:
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_val_iter:
(NORMAL      ) IterTimerHook                      
(NORMAL      ) SegVisualizationHook               
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_val_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
after_val:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
after_train:
(VERY_HIGH   ) RuntimeInfoHook                    
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_test:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
before_test_epoch:
(NORMAL      ) IterTimerHook                      
 -------------------- 
before_test_iter:
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_test_iter:
(NORMAL      ) IterTimerHook                      
(NORMAL      ) SegVisualizationHook               
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_test_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_test:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
after_run:
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
09/21 01:16:31 - mmengine - WARNING - The prefix is not set in metric class IoUMetric.
Loads checkpoint by local backend from path: ../checkpoint_files/ade20k/mask2former/mask2former_swin-s_8xb2-160k_ade20k-512x512_20221204_143905-e715144e.pth
09/21 01:16:32 - mmengine - INFO - Load checkpoint from ../checkpoint_files/ade20k/mask2former/mask2former_swin-s_8xb2-160k_ade20k-512x512_20221204_143905-e715144e.pth
09/21 01:16:51 - mmengine - INFO - Iter(test) [  50/2000]    eta: 0:12:18  time: 0.2719  data_time: 0.0015  memory: 12814  
09/21 01:16:59 - mmengine - INFO - Iter(test) [ 100/2000]    eta: 0:08:31  time: 0.1886  data_time: 0.0016  memory: 12795  
09/21 01:17:04 - mmengine - INFO - Iter(test) [ 150/2000]    eta: 0:06:40  time: 0.1135  data_time: 0.0015  memory: 935  
09/21 01:17:12 - mmengine - INFO - Iter(test) [ 200/2000]    eta: 0:06:00  time: 0.1103  data_time: 0.0015  memory: 12835  
09/21 01:17:19 - mmengine - INFO - Iter(test) [ 250/2000]    eta: 0:05:29  time: 0.1118  data_time: 0.0014  memory: 12838  
09/21 01:17:25 - mmengine - INFO - Iter(test) [ 300/2000]    eta: 0:05:01  time: 0.1112  data_time: 0.0015  memory: 12803  
09/21 01:17:32 - mmengine - INFO - Iter(test) [ 350/2000]    eta: 0:04:43  time: 0.1066  data_time: 0.0014  memory: 12810  
09/21 01:17:38 - mmengine - INFO - Iter(test) [ 400/2000]    eta: 0:04:25  time: 0.1129  data_time: 0.0014  memory: 12775  
09/21 01:17:44 - mmengine - INFO - Iter(test) [ 450/2000]    eta: 0:04:06  time: 0.1073  data_time: 0.0013  memory: 975  
09/21 01:17:49 - mmengine - INFO - Iter(test) [ 500/2000]    eta: 0:03:51  time: 0.1057  data_time: 0.0013  memory: 935  
09/21 01:17:55 - mmengine - INFO - Iter(test) [ 550/2000]    eta: 0:03:38  time: 0.1119  data_time: 0.0015  memory: 1042  
09/21 01:18:00 - mmengine - INFO - Iter(test) [ 600/2000]    eta: 0:03:25  time: 0.1100  data_time: 0.0016  memory: 1040  
09/21 01:18:06 - mmengine - INFO - Iter(test) [ 650/2000]    eta: 0:03:16  time: 0.1983  data_time: 0.0014  memory: 12816  
09/21 01:18:13 - mmengine - INFO - Iter(test) [ 700/2000]    eta: 0:03:07  time: 0.1106  data_time: 0.0016  memory: 12806  
09/21 01:18:18 - mmengine - INFO - Iter(test) [ 750/2000]    eta: 0:02:57  time: 0.1120  data_time: 0.0014  memory: 1096  
09/21 01:18:24 - mmengine - INFO - Iter(test) [ 800/2000]    eta: 0:02:47  time: 0.1092  data_time: 0.0016  memory: 935  
09/21 01:18:29 - mmengine - INFO - Iter(test) [ 850/2000]    eta: 0:02:38  time: 0.1103  data_time: 0.0016  memory: 908  
09/21 01:18:34 - mmengine - INFO - Iter(test) [ 900/2000]    eta: 0:02:29  time: 0.1054  data_time: 0.0014  memory: 987  
09/21 01:18:40 - mmengine - INFO - Iter(test) [ 950/2000]    eta: 0:02:21  time: 0.1091  data_time: 0.0015  memory: 1015  
09/21 01:18:45 - mmengine - INFO - Iter(test) [1000/2000]    eta: 0:02:13  time: 0.1087  data_time: 0.0014  memory: 1015  
09/21 01:18:52 - mmengine - INFO - Iter(test) [1050/2000]    eta: 0:02:06  time: 0.1123  data_time: 0.0015  memory: 12819  
09/21 01:18:57 - mmengine - INFO - Iter(test) [1100/2000]    eta: 0:01:59  time: 0.1090  data_time: 0.0015  memory: 1012  
09/21 01:19:03 - mmengine - INFO - Iter(test) [1150/2000]    eta: 0:01:51  time: 0.1097  data_time: 0.0014  memory: 985  
09/21 01:19:08 - mmengine - INFO - Iter(test) [1200/2000]    eta: 0:01:44  time: 0.1091  data_time: 0.0014  memory: 1921  
09/21 01:19:15 - mmengine - INFO - Iter(test) [1250/2000]    eta: 0:01:37  time: 0.1107  data_time: 0.0015  memory: 12797  
09/21 01:19:20 - mmengine - INFO - Iter(test) [1300/2000]    eta: 0:01:30  time: 0.1228  data_time: 0.0015  memory: 935  
09/21 01:19:25 - mmengine - INFO - Iter(test) [1350/2000]    eta: 0:01:23  time: 0.0915  data_time: 0.0014  memory: 935  
09/21 01:19:30 - mmengine - INFO - Iter(test) [1400/2000]    eta: 0:01:16  time: 0.0974  data_time: 0.0014  memory: 1012  
09/21 01:19:36 - mmengine - INFO - Iter(test) [1450/2000]    eta: 0:01:09  time: 0.1146  data_time: 0.0015  memory: 1015  
09/21 01:19:42 - mmengine - INFO - Iter(test) [1500/2000]    eta: 0:01:03  time: 0.1060  data_time: 0.0014  memory: 933  
09/21 01:19:48 - mmengine - INFO - Iter(test) [1550/2000]    eta: 0:00:56  time: 0.1149  data_time: 0.0015  memory: 1015  
09/21 01:19:53 - mmengine - INFO - Iter(test) [1600/2000]    eta: 0:00:50  time: 0.0938  data_time: 0.0015  memory: 908  
09/21 01:19:59 - mmengine - INFO - Iter(test) [1650/2000]    eta: 0:00:43  time: 0.0921  data_time: 0.0014  memory: 12807  
09/21 01:20:04 - mmengine - INFO - Iter(test) [1700/2000]    eta: 0:00:37  time: 0.1126  data_time: 0.0016  memory: 1012  
09/21 01:20:10 - mmengine - INFO - Iter(test) [1750/2000]    eta: 0:00:31  time: 0.1144  data_time: 0.0015  memory: 1039  
09/21 01:20:14 - mmengine - INFO - Iter(test) [1800/2000]    eta: 0:00:24  time: 0.0962  data_time: 0.0016  memory: 935  
09/21 01:20:19 - mmengine - INFO - Iter(test) [1850/2000]    eta: 0:00:18  time: 0.0950  data_time: 0.0016  memory: 854  
09/21 01:20:24 - mmengine - INFO - Iter(test) [1900/2000]    eta: 0:00:12  time: 0.1119  data_time: 0.0015  memory: 1068  
09/21 01:20:30 - mmengine - INFO - Iter(test) [1950/2000]    eta: 0:00:06  time: 0.1098  data_time: 0.0015  memory: 1306  
09/21 01:20:36 - mmengine - INFO - Iter(test) [2000/2000]    eta: 0:00:00  time: 0.1063  data_time: 0.0014  memory: 1094  
09/21 01:20:36 - mmengine - INFO - per class results:
09/21 01:20:36 - mmengine - INFO - 
+---------------------+-------+-------+
|        Class        |  IoU  |  Acc  |
+---------------------+-------+-------+
|         wall        | 76.61 | 86.78 |
|       building      | 81.84 | 92.51 |
|         sky         | 94.47 | 96.74 |
|        floor        | 80.49 | 89.08 |
|         tree        | 74.49 | 86.14 |
|       ceiling       | 83.27 | 89.18 |
|         road        | 84.25 | 90.75 |
|         bed         | 89.46 | 94.92 |
|      windowpane     | 58.88 | 77.32 |
|        grass        | 66.78 | 76.18 |
|       cabinet       | 57.79 | 72.15 |
|       sidewalk      | 66.25 | 79.66 |
|        person       | 81.29 | 88.52 |
|        earth        | 37.43 | 56.59 |
|         door        | 47.68 | 64.51 |
|        table        | 60.97 | 76.38 |
|       mountain      | 57.64 | 72.98 |
|        plant        | 49.91 | 65.75 |
|       curtain       | 70.24 | 82.08 |
|        chair        | 57.11 |  72.1 |
|         car         | 83.61 | 91.97 |
|        water        | 64.88 |  82.2 |
|       painting      | 71.02 | 85.48 |
|         sofa        | 62.62 | 74.87 |
|        shelf        | 39.44 | 58.29 |
|        house        | 44.55 | 68.34 |
|         sea         | 71.23 | 84.68 |
|        mirror       | 65.78 |  76.7 |
|         rug         | 56.83 | 67.88 |
|        field        | 26.93 | 50.01 |
|       armchair      | 43.83 | 69.42 |
|         seat        | 58.89 | 78.91 |
|        fence        | 44.94 | 58.61 |
|         desk        |  52.4 |  75.8 |
|         rock        | 48.19 | 69.11 |
|       wardrobe      | 53.39 |  75.3 |
|         lamp        | 65.51 | 79.27 |
|       bathtub       |  72.9 | 85.36 |
|       railing       | 32.82 | 50.61 |
|       cushion       | 55.59 | 69.58 |
|         base        | 25.09 |  42.2 |
|         box         | 21.83 | 31.68 |
|        column       | 46.15 | 60.13 |
|      signboard      |  34.9 | 47.18 |
|   chest of drawers  | 30.76 | 55.48 |
|       counter       | 22.62 | 35.55 |
|         sand        |  33.8 | 49.18 |
|         sink        |  72.9 | 81.98 |
|      skyscraper     | 32.07 | 38.86 |
|      fireplace      | 65.73 | 88.43 |
|     refrigerator    | 56.13 | 80.89 |
|      grandstand     | 44.41 | 77.37 |
|         path        | 22.61 | 34.47 |
|        stairs       | 18.47 | 22.35 |
|        runway       | 74.06 | 97.23 |
|         case        |  50.5 | 59.24 |
|      pool table     |  91.8 | 96.55 |
|        pillow       | 59.87 | 69.88 |
|     screen door     | 61.61 | 77.78 |
|       stairway      | 29.67 | 54.11 |
|        river        | 16.57 | 21.23 |
|        bridge       | 35.72 | 51.08 |
|       bookcase      | 36.31 | 64.27 |
|        blind        | 27.17 | 28.17 |
|     coffee table    | 58.63 | 84.68 |
|        toilet       | 85.93 |  90.9 |
|        flower       | 45.08 | 61.39 |
|         book        | 49.74 | 65.05 |
|         hill        | 15.88 | 21.26 |
|        bench        | 38.03 |  48.0 |
|      countertop     | 58.51 | 76.73 |
|        stove        | 72.65 | 84.42 |
|         palm        | 45.41 | 62.58 |
|    kitchen island   | 43.93 | 78.56 |
|       computer      |  58.8 | 66.22 |
|     swivel chair    | 46.25 | 68.59 |
|         boat        | 59.05 | 87.67 |
|         bar         |  45.3 |  59.4 |
|    arcade machine   | 71.24 | 78.76 |
|        hovel        | 13.65 | 14.82 |
|         bus         | 82.51 |  90.2 |
|        towel        |  66.2 | 78.87 |
|        light        | 57.09 | 72.44 |
|        truck        | 38.42 | 51.65 |
|        tower        | 48.63 | 64.02 |
|      chandelier     | 67.23 | 79.03 |
|        awning       | 30.48 | 44.84 |
|     streetlight     | 28.11 | 45.01 |
|        booth        | 63.82 | 76.22 |
| television receiver |  60.6 | 76.94 |
|       airplane      | 53.29 | 67.03 |
|      dirt track     |  7.69 | 10.41 |
|       apparel       | 23.91 | 31.18 |
|         pole        | 18.12 | 25.77 |
|         land        |  9.12 | 11.64 |
|      bannister      | 21.58 | 32.09 |
|      escalator      | 18.74 | 19.21 |
|       ottoman       |  42.6 | 66.38 |
|        bottle       | 16.84 | 20.76 |
|        buffet       | 45.14 | 50.27 |
|        poster       | 21.03 | 31.66 |
|        stage        | 13.39 | 31.62 |
|         van         | 47.11 | 69.77 |
|         ship        |  0.11 |  0.11 |
|       fountain      | 21.18 | 21.77 |
|    conveyer belt    | 46.61 | 69.11 |
|        canopy       | 26.15 | 39.18 |
|        washer       | 71.74 | 72.35 |
|      plaything      | 16.12 | 36.09 |
|    swimming pool    | 45.47 |  71.7 |
|        stool        | 44.22 |  54.8 |
|        barrel       | 65.95 | 73.84 |
|        basket       | 28.46 | 32.06 |
|      waterfall      | 59.31 | 88.34 |
|         tent        | 78.85 | 98.55 |
|         bag         |  9.7  | 11.59 |
|       minibike      | 70.05 | 84.95 |
|        cradle       | 67.98 | 97.53 |
|         oven        |  47.4 | 58.76 |
|         ball        | 40.66 | 73.02 |
|         food        |  57.7 | 70.31 |
|         step        |  3.21 |  5.96 |
|         tank        | 54.28 | 56.84 |
|      trade name     | 24.02 | 27.42 |
|      microwave      |  40.1 |  43.8 |
|         pot         | 49.43 | 61.04 |
|        animal       | 67.14 | 71.31 |
|       bicycle       | 57.64 | 72.08 |
|         lake        | 56.71 | 72.66 |
|      dishwasher     | 70.42 | 82.27 |
|        screen       |  79.2 | 92.24 |
|       blanket       | 13.91 | 16.77 |
|      sculpture      | 36.98 | 59.42 |
|         hood        |  79.1 | 84.77 |
|        sconce       | 48.95 | 61.08 |
|         vase        | 42.27 | 59.37 |
|    traffic light    | 32.76 |  62.1 |
|         tray        | 14.14 | 22.03 |
|        ashcan       | 39.95 | 63.36 |
|         fan         | 62.91 | 79.86 |
|         pier        | 10.79 | 14.73 |
|      crt screen     |  1.46 |  3.92 |
|        plate        | 53.49 | 71.13 |
|       monitor       |  6.88 | 14.44 |
|    bulletin board   | 44.35 | 55.95 |
|        shower       |  4.03 | 21.85 |
|       radiator      | 50.63 | 56.98 |
|        glass        | 14.26 | 15.21 |
|        clock        | 37.62 | 56.93 |
|         flag        | 32.26 | 37.55 |
+---------------------+-------+-------+
09/21 01:20:36 - mmengine - INFO - Iter(test) [2000/2000]    aAcc: 82.2900  mIoU: 47.4600  mAcc: 60.8100  data_time: 0.0017  time: 0.1218
Finished processing corruption type: defocus_blur
Processing corruption type: glass_blur
09/21 01:20:41 - mmengine - INFO - 
------------------------------------------------------------
System environment:
    sys.platform: linux
    Python: 3.10.13 | packaged by conda-forge | (main, Dec 23 2023, 15:36:39) [GCC 12.3.0]
    CUDA available: True
    MUSA available: False
    numpy_random_seed: 34993114
    GPU 0: Tesla V100-SXM2-32GB
    CUDA_HOME: /opt/bwhpc/common/devel/cuda/11.7
    NVCC: Cuda compilation tools, release 11.7, V11.7.99
    GCC: gcc (GCC) 8.5.0 20210514 (Red Hat 8.5.0-18)
    PyTorch: 1.13.1
    PyTorch compiling details: PyTorch built with:
  - GCC 9.3
  - C++ Version: 201402
  - Intel(R) oneAPI Math Kernel Library Version 2023.1-Product Build 20230303 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v2.6.0 (Git Hash 52b5f107dd9cf10910aaa19cb47f3abf9b349815)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - LAPACK is enabled (usually provided by MKL)
  - NNPACK is enabled
  - CPU capability usage: AVX2
  - CUDA Runtime 11.7
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_61,code=sm_61;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86;-gencode;arch=compute_37,code=compute_37
  - CuDNN 8.5
  - Magma 2.6.1
  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.7, CUDNN_VERSION=8.5.0, CXX_COMPILER=/opt/rh/devtoolset-9/root/usr/bin/c++, CXX_FLAGS= -fabi-version=11 -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -DEDGE_PROFILER_USE_KINETO -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Werror=non-virtual-dtor -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wunused-local-typedefs -Wno-unused-parameter -Wno-unused-function -Wno-unused-result -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Werror=cast-function-type -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.13.1, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, USE_ROCM=OFF, 

    TorchVision: 0.14.1
    OpenCV: 3.4.18
    MMEngine: 0.10.4

Runtime environment:
    cudnn_benchmark: True
    mp_cfg: {'mp_start_method': 'fork', 'opencv_num_threads': 0}
    dist_cfg: {'backend': 'nccl'}
    seed: 34993114
    Distributed launcher: none
    Distributed training: False
    GPU number: 1
------------------------------------------------------------

09/21 01:20:42 - mmengine - INFO - Config:
auto_scale_lr = dict(base_batch_size=16, enable=False)
backbone_embed_multi = dict(decay_mult=0.0, lr_mult=0.1)
backbone_norm_multi = dict(decay_mult=0.0, lr_mult=0.1)
crop_size = (
    512,
    512,
)
custom_imports = dict(allow_failed_imports=False, imports='mmdet.models')
custom_keys = dict({
    'absolute_pos_embed':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone':
    dict(decay_mult=1.0, lr_mult=0.1),
    'backbone.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.patch_embed.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.0.blocks.0.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.0.blocks.1.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.0.downsample.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.1.blocks.0.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.1.blocks.1.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.1.downsample.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.0.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.1.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.10.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.11.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.12.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.13.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.14.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.15.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.16.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.17.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.2.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.3.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.4.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.5.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.6.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.7.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.8.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.9.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.downsample.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.3.blocks.0.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.3.blocks.1.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'level_embed':
    dict(decay_mult=0.0, lr_mult=1.0),
    'query_embed':
    dict(decay_mult=0.0, lr_mult=1.0),
    'query_feat':
    dict(decay_mult=0.0, lr_mult=1.0),
    'relative_position_bias_table':
    dict(decay_mult=0.0, lr_mult=0.1)
})
data_root = 'data/ade/ADEChallengeData2016'
dataset_type = 'ADE20KDataset'
default_hooks = dict(
    checkpoint=dict(
        by_epoch=False, interval=5000, save_best='mIoU',
        type='CheckpointHook'),
    logger=dict(interval=50, log_metric_by_epoch=False, type='LoggerHook'),
    param_scheduler=dict(type='ParamSchedulerHook'),
    sampler_seed=dict(type='DistSamplerSeedHook'),
    timer=dict(type='IterTimerHook'),
    visualization=dict(type='SegVisualizationHook'))
default_scope = 'mmseg'
depths = [
    2,
    2,
    18,
    2,
]
embed_multi = dict(decay_mult=0.0, lr_mult=1.0)
env_cfg = dict(
    cudnn_benchmark=True,
    dist_cfg=dict(backend='nccl'),
    mp_cfg=dict(mp_start_method='fork', opencv_num_threads=0))
img_ratios = [
    0.5,
    0.75,
    1.0,
    1.25,
    1.5,
    1.75,
]
launcher = 'none'
load_from = '../checkpoint_files/ade20k/mask2former/mask2former_swin-s_8xb2-160k_ade20k-512x512_20221204_143905-e715144e.pth'
log_level = 'INFO'
log_processor = dict(by_epoch=False)
model = dict(
    backbone=dict(
        attn_drop_rate=0.0,
        depths=[
            2,
            2,
            18,
            2,
        ],
        drop_path_rate=0.3,
        drop_rate=0.0,
        embed_dims=96,
        frozen_stages=-1,
        init_cfg=dict(
            checkpoint=
            'https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/swin/swin_small_patch4_window7_224_20220317-7ba6d6dd.pth',
            type='Pretrained'),
        mlp_ratio=4,
        num_heads=[
            3,
            6,
            12,
            24,
        ],
        out_indices=(
            0,
            1,
            2,
            3,
        ),
        patch_norm=True,
        qk_scale=None,
        qkv_bias=True,
        type='SwinTransformer',
        window_size=7,
        with_cp=False),
    data_preprocessor=dict(
        bgr_to_rgb=True,
        corruption='glass_blur',
        mean=[
            123.675,
            116.28,
            103.53,
        ],
        pad_val=0,
        seg_pad_val=255,
        size=(
            512,
            512,
        ),
        std=[
            58.395,
            57.12,
            57.375,
        ],
        test_cfg=dict(size_divisor=32),
        type='SegDataPreProcessor'),
    decode_head=dict(
        align_corners=False,
        enforce_decoder_input_project=False,
        feat_channels=256,
        in_channels=[
            96,
            192,
            384,
            768,
        ],
        loss_cls=dict(
            class_weight=[
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                0.1,
            ],
            loss_weight=2.0,
            reduction='mean',
            type='mmdet.CrossEntropyLoss',
            use_sigmoid=False),
        loss_dice=dict(
            activate=True,
            eps=1.0,
            loss_weight=5.0,
            naive_dice=True,
            reduction='mean',
            type='mmdet.DiceLoss',
            use_sigmoid=True),
        loss_mask=dict(
            loss_weight=5.0,
            reduction='mean',
            type='mmdet.CrossEntropyLoss',
            use_sigmoid=True),
        num_classes=150,
        num_queries=100,
        num_transformer_feat_level=3,
        out_channels=256,
        pixel_decoder=dict(
            act_cfg=dict(type='ReLU'),
            encoder=dict(
                init_cfg=None,
                layer_cfg=dict(
                    ffn_cfg=dict(
                        act_cfg=dict(inplace=True, type='ReLU'),
                        embed_dims=256,
                        feedforward_channels=1024,
                        ffn_drop=0.0,
                        num_fcs=2),
                    self_attn_cfg=dict(
                        batch_first=True,
                        dropout=0.0,
                        embed_dims=256,
                        im2col_step=64,
                        init_cfg=None,
                        norm_cfg=None,
                        num_heads=8,
                        num_levels=3,
                        num_points=4)),
                num_layers=6),
            init_cfg=None,
            norm_cfg=dict(num_groups=32, type='GN'),
            num_outs=3,
            positional_encoding=dict(normalize=True, num_feats=128),
            type='mmdet.MSDeformAttnPixelDecoder'),
        positional_encoding=dict(normalize=True, num_feats=128),
        strides=[
            4,
            8,
            16,
            32,
        ],
        train_cfg=dict(
            assigner=dict(
                match_costs=[
                    dict(type='mmdet.ClassificationCost', weight=2.0),
                    dict(
                        type='mmdet.CrossEntropyLossCost',
                        use_sigmoid=True,
                        weight=5.0),
                    dict(
                        eps=1.0,
                        pred_act=True,
                        type='mmdet.DiceCost',
                        weight=5.0),
                ],
                type='mmdet.HungarianAssigner'),
            importance_sample_ratio=0.75,
            num_points=12544,
            oversample_ratio=3.0,
            sampler=dict(type='mmdet.MaskPseudoSampler')),
        transformer_decoder=dict(
            init_cfg=None,
            layer_cfg=dict(
                cross_attn_cfg=dict(
                    attn_drop=0.0,
                    batch_first=True,
                    dropout_layer=None,
                    embed_dims=256,
                    num_heads=8,
                    proj_drop=0.0),
                ffn_cfg=dict(
                    act_cfg=dict(inplace=True, type='ReLU'),
                    add_identity=True,
                    dropout_layer=None,
                    embed_dims=256,
                    feedforward_channels=2048,
                    ffn_drop=0.0,
                    num_fcs=2),
                self_attn_cfg=dict(
                    attn_drop=0.0,
                    batch_first=True,
                    dropout_layer=None,
                    embed_dims=256,
                    num_heads=8,
                    proj_drop=0.0)),
            num_layers=9,
            return_intermediate=True),
        type='Mask2FormerHead'),
    test_cfg=dict(mode='whole'),
    train_cfg=dict(),
    type='EncoderDecoder')
num_classes = 150
optim_wrapper = dict(
    clip_grad=dict(max_norm=0.01, norm_type=2),
    optimizer=dict(
        betas=(
            0.9,
            0.999,
        ),
        eps=1e-08,
        lr=0.0001,
        type='AdamW',
        weight_decay=0.05),
    paramwise_cfg=dict(
        custom_keys=dict({
            'absolute_pos_embed':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone':
            dict(decay_mult=1.0, lr_mult=0.1),
            'backbone.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.patch_embed.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.0.blocks.0.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.0.blocks.1.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.0.downsample.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.1.blocks.0.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.1.blocks.1.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.1.downsample.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.0.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.1.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.10.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.11.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.12.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.13.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.14.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.15.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.16.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.17.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.2.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.3.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.4.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.5.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.6.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.7.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.8.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.9.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.downsample.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.3.blocks.0.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.3.blocks.1.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'level_embed':
            dict(decay_mult=0.0, lr_mult=1.0),
            'query_embed':
            dict(decay_mult=0.0, lr_mult=1.0),
            'query_feat':
            dict(decay_mult=0.0, lr_mult=1.0),
            'relative_position_bias_table':
            dict(decay_mult=0.0, lr_mult=0.1)
        }),
        norm_decay_mult=0.0),
    type='OptimWrapper')
optimizer = dict(
    betas=(
        0.9,
        0.999,
    ),
    eps=1e-08,
    lr=0.0001,
    type='AdamW',
    weight_decay=0.05)
param_scheduler = [
    dict(
        begin=0,
        by_epoch=False,
        end=160000,
        eta_min=0,
        power=0.9,
        type='PolyLR'),
]
pretrained = 'https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/swin/swin_small_patch4_window7_224_20220317-7ba6d6dd.pth'
resume = False
test_cfg = dict(type='TestLoop')
test_dataloader = dict(
    batch_size=1,
    dataset=dict(
        data_prefix=dict(
            img_path='images/validation',
            seg_map_path='annotations/validation'),
        data_root='data/ade/ADEChallengeData2016',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(keep_ratio=True, scale=(
                2048,
                512,
            ), type='Resize'),
            dict(reduce_zero_label=True, type='LoadAnnotations'),
            dict(type='PackSegInputs'),
        ],
        type='ADE20KDataset'),
    num_workers=4,
    persistent_workers=True,
    sampler=dict(shuffle=False, type='DefaultSampler'))
test_evaluator = dict(
    iou_metrics=[
        'mIoU',
    ], type='IoUMetric')
test_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(keep_ratio=True, scale=(
        2048,
        512,
    ), type='Resize'),
    dict(reduce_zero_label=True, type='LoadAnnotations'),
    dict(type='PackSegInputs'),
]
train_cfg = dict(
    max_iters=160000, type='IterBasedTrainLoop', val_interval=5000)
train_dataloader = dict(
    batch_size=2,
    dataset=dict(
        data_prefix=dict(
            img_path='images/training', seg_map_path='annotations/training'),
        data_root='data/ade/ADEChallengeData2016',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(reduce_zero_label=True, type='LoadAnnotations'),
            dict(
                max_size=2048,
                resize_type='ResizeShortestEdge',
                scales=[
                    256,
                    307,
                    358,
                    409,
                    460,
                    512,
                    563,
                    614,
                    665,
                    716,
                    768,
                    819,
                    870,
                    921,
                    972,
                    1024,
                ],
                type='RandomChoiceResize'),
            dict(
                cat_max_ratio=0.75, crop_size=(
                    512,
                    512,
                ), type='RandomCrop'),
            dict(prob=0.5, type='RandomFlip'),
            dict(type='PhotoMetricDistortion'),
            dict(type='PackSegInputs'),
        ],
        type='ADE20KDataset'),
    num_workers=4,
    persistent_workers=True,
    sampler=dict(shuffle=True, type='InfiniteSampler'))
train_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(reduce_zero_label=True, type='LoadAnnotations'),
    dict(
        max_size=2048,
        resize_type='ResizeShortestEdge',
        scales=[
            256,
            307,
            358,
            409,
            460,
            512,
            563,
            614,
            665,
            716,
            768,
            819,
            870,
            921,
            972,
            1024,
        ],
        type='RandomChoiceResize'),
    dict(cat_max_ratio=0.75, crop_size=(
        512,
        512,
    ), type='RandomCrop'),
    dict(prob=0.5, type='RandomFlip'),
    dict(type='PhotoMetricDistortion'),
    dict(type='PackSegInputs'),
]
tta_model = dict(type='SegTTAModel')
tta_pipeline = [
    dict(backend_args=None, type='LoadImageFromFile'),
    dict(
        transforms=[
            [
                dict(keep_ratio=True, scale_factor=0.5, type='Resize'),
                dict(keep_ratio=True, scale_factor=0.75, type='Resize'),
                dict(keep_ratio=True, scale_factor=1.0, type='Resize'),
                dict(keep_ratio=True, scale_factor=1.25, type='Resize'),
                dict(keep_ratio=True, scale_factor=1.5, type='Resize'),
                dict(keep_ratio=True, scale_factor=1.75, type='Resize'),
            ],
            [
                dict(direction='horizontal', prob=0.0, type='RandomFlip'),
                dict(direction='horizontal', prob=1.0, type='RandomFlip'),
            ],
            [
                dict(type='LoadAnnotations'),
            ],
            [
                dict(type='PackSegInputs'),
            ],
        ],
        type='TestTimeAug'),
]
val_cfg = dict(type='ValLoop')
val_dataloader = dict(
    batch_size=1,
    dataset=dict(
        data_prefix=dict(
            img_path='images/validation',
            seg_map_path='annotations/validation'),
        data_root='data/ade/ADEChallengeData2016',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(keep_ratio=True, scale=(
                2048,
                512,
            ), type='Resize'),
            dict(reduce_zero_label=True, type='LoadAnnotations'),
            dict(type='PackSegInputs'),
        ],
        type='ADE20KDataset'),
    num_workers=4,
    persistent_workers=True,
    sampler=dict(shuffle=False, type='DefaultSampler'))
val_evaluator = dict(
    iou_metrics=[
        'mIoU',
    ], type='IoUMetric')
vis_backends = [
    dict(type='LocalVisBackend'),
]
visualizer = dict(
    name='visualizer',
    type='SegLocalVisualizer',
    vis_backends=[
        dict(type='LocalVisBackend'),
    ])
work_dir = '../corruptions/work_dirs/ade20k/mask2former/mask2former_swin-s_8xb2-160k_ade20k-512x512/glass_blur'

09/21 01:20:45 - mmengine - INFO - Distributed training is not used, all SyncBatchNorm (SyncBN) layers in the model will be automatically reverted to BatchNormXd layers if they are used.
09/21 01:20:45 - mmengine - INFO - Hooks will be executed in the following order:
before_run:
(VERY_HIGH   ) RuntimeInfoHook                    
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
before_train:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_train_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(NORMAL      ) DistSamplerSeedHook                
 -------------------- 
before_train_iter:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_train_iter:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(NORMAL      ) SegVisualizationHook               
(BELOW_NORMAL) LoggerHook                         
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
after_train_epoch:
(NORMAL      ) IterTimerHook                      
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_val:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
before_val_epoch:
(NORMAL      ) IterTimerHook                      
 -------------------- 
before_val_iter:
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_val_iter:
(NORMAL      ) IterTimerHook                      
(NORMAL      ) SegVisualizationHook               
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_val_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
after_val:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
after_train:
(VERY_HIGH   ) RuntimeInfoHook                    
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_test:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
before_test_epoch:
(NORMAL      ) IterTimerHook                      
 -------------------- 
before_test_iter:
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_test_iter:
(NORMAL      ) IterTimerHook                      
(NORMAL      ) SegVisualizationHook               
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_test_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_test:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
after_run:
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
09/21 01:20:46 - mmengine - WARNING - The prefix is not set in metric class IoUMetric.
Loads checkpoint by local backend from path: ../checkpoint_files/ade20k/mask2former/mask2former_swin-s_8xb2-160k_ade20k-512x512_20221204_143905-e715144e.pth
09/21 01:20:47 - mmengine - INFO - Load checkpoint from ../checkpoint_files/ade20k/mask2former/mask2former_swin-s_8xb2-160k_ade20k-512x512_20221204_143905-e715144e.pth
09/21 01:26:47 - mmengine - INFO - Iter(test) [  50/2000]    eta: 3:54:18  time: 7.5093  data_time: 0.0016  memory: 12814  
09/21 01:32:30 - mmengine - INFO - Iter(test) [ 100/2000]    eta: 3:42:33  time: 7.1554  data_time: 0.0017  memory: 12795  
09/21 01:38:07 - mmengine - INFO - Iter(test) [ 150/2000]    eta: 3:33:45  time: 6.9225  data_time: 0.0016  memory: 935  
09/21 01:43:54 - mmengine - INFO - Iter(test) [ 200/2000]    eta: 3:28:07  time: 6.7762  data_time: 0.0016  memory: 12835  
09/21 01:49:23 - mmengine - INFO - Iter(test) [ 250/2000]    eta: 3:20:16  time: 6.6481  data_time: 0.0015  memory: 12838  
09/21 01:54:52 - mmengine - INFO - Iter(test) [ 300/2000]    eta: 3:13:07  time: 6.9069  data_time: 0.0017  memory: 12803  
09/21 02:00:28 - mmengine - INFO - Iter(test) [ 350/2000]    eta: 3:07:04  time: 6.3901  data_time: 0.0015  memory: 12810  
09/21 02:06:01 - mmengine - INFO - Iter(test) [ 400/2000]    eta: 3:00:56  time: 6.7918  data_time: 0.0015  memory: 12775  
09/21 02:11:06 - mmengine - INFO - Iter(test) [ 450/2000]    eta: 2:53:18  time: 6.1763  data_time: 0.0016  memory: 975  
09/21 02:16:36 - mmengine - INFO - Iter(test) [ 500/2000]    eta: 2:47:25  time: 6.4632  data_time: 0.0015  memory: 935  
09/21 02:22:27 - mmengine - INFO - Iter(test) [ 550/2000]    eta: 2:42:35  time: 7.0089  data_time: 0.0018  memory: 1042  
09/21 02:27:57 - mmengine - INFO - Iter(test) [ 600/2000]    eta: 2:36:43  time: 6.9064  data_time: 0.0017  memory: 1040  
09/21 02:33:29 - mmengine - INFO - Iter(test) [ 650/2000]    eta: 2:30:59  time: 6.7975  data_time: 0.0014  memory: 12816  
09/21 02:39:20 - mmengine - INFO - Iter(test) [ 700/2000]    eta: 2:25:53  time: 6.9596  data_time: 0.0017  memory: 12806  
09/21 02:45:00 - mmengine - INFO - Iter(test) [ 750/2000]    eta: 2:20:20  time: 6.5307  data_time: 0.0015  memory: 1096  
09/21 02:50:15 - mmengine - INFO - Iter(test) [ 800/2000]    eta: 2:14:11  time: 6.7067  data_time: 0.0017  memory: 935  
09/21 02:55:52 - mmengine - INFO - Iter(test) [ 850/2000]    eta: 2:08:38  time: 6.7928  data_time: 0.0017  memory: 908  
09/21 03:01:02 - mmengine - INFO - Iter(test) [ 900/2000]    eta: 2:02:31  time: 5.9736  data_time: 0.0015  memory: 987  
09/21 03:06:41 - mmengine - INFO - Iter(test) [ 950/2000]    eta: 1:57:03  time: 6.5660  data_time: 0.0016  memory: 1015  
09/21 03:12:02 - mmengine - INFO - Iter(test) [1000/2000]    eta: 1:51:15  time: 6.3997  data_time: 0.0015  memory: 1015  
09/21 03:17:44 - mmengine - INFO - Iter(test) [1050/2000]    eta: 1:45:48  time: 6.8729  data_time: 0.0016  memory: 12819  
09/21 03:23:18 - mmengine - INFO - Iter(test) [1100/2000]    eta: 1:40:14  time: 6.5825  data_time: 0.0016  memory: 1012  
09/21 03:28:46 - mmengine - INFO - Iter(test) [1150/2000]    eta: 1:34:35  time: 6.6961  data_time: 0.0015  memory: 985  
09/21 03:34:24 - mmengine - INFO - Iter(test) [1200/2000]    eta: 1:29:04  time: 6.5241  data_time: 0.0015  memory: 1921  
09/21 03:39:46 - mmengine - INFO - Iter(test) [1250/2000]    eta: 1:23:23  time: 6.4337  data_time: 0.0015  memory: 12797  
09/21 03:45:00 - mmengine - INFO - Iter(test) [1300/2000]    eta: 1:17:39  time: 6.7039  data_time: 0.0015  memory: 935  
09/21 03:50:28 - mmengine - INFO - Iter(test) [1350/2000]    eta: 1:12:04  time: 6.1717  data_time: 0.0015  memory: 935  
09/21 03:55:59 - mmengine - INFO - Iter(test) [1400/2000]    eta: 1:06:30  time: 6.9783  data_time: 0.0015  memory: 1012  
09/21 04:01:16 - mmengine - INFO - Iter(test) [1450/2000]    eta: 1:00:52  time: 6.9145  data_time: 0.0015  memory: 1015  
09/21 04:06:40 - mmengine - INFO - Iter(test) [1500/2000]    eta: 0:55:17  time: 6.1958  data_time: 0.0015  memory: 933  
09/21 04:12:27 - mmengine - INFO - Iter(test) [1550/2000]    eta: 0:49:50  time: 6.8096  data_time: 0.0016  memory: 1015  
09/21 04:17:51 - mmengine - INFO - Iter(test) [1600/2000]    eta: 0:44:16  time: 6.5686  data_time: 0.0016  memory: 908  
09/21 04:23:18 - mmengine - INFO - Iter(test) [1650/2000]    eta: 0:38:42  time: 6.1534  data_time: 0.0014  memory: 12807  
09/21 04:28:55 - mmengine - INFO - Iter(test) [1700/2000]    eta: 0:33:12  time: 6.7122  data_time: 0.0057  memory: 1012  
09/21 04:34:34 - mmengine - INFO - Iter(test) [1750/2000]    eta: 0:27:41  time: 6.5929  data_time: 0.0015  memory: 1039  
09/21 04:39:54 - mmengine - INFO - Iter(test) [1800/2000]    eta: 0:22:07  time: 6.8222  data_time: 0.0021  memory: 935  
09/21 04:45:28 - mmengine - INFO - Iter(test) [1850/2000]    eta: 0:16:35  time: 6.6208  data_time: 0.0017  memory: 854  
09/21 04:50:36 - mmengine - INFO - Iter(test) [1900/2000]    eta: 0:11:02  time: 6.3663  data_time: 0.0017  memory: 1068  
09/21 04:56:07 - mmengine - INFO - Iter(test) [1950/2000]    eta: 0:05:31  time: 6.3599  data_time: 0.0015  memory: 1306  
09/21 05:01:20 - mmengine - INFO - Iter(test) [2000/2000]    eta: 0:00:00  time: 5.9661  data_time: 0.0014  memory: 1094  
09/21 05:01:21 - mmengine - INFO - per class results:
09/21 05:01:21 - mmengine - INFO - 
+---------------------+-------+-------+
|        Class        |  IoU  |  Acc  |
+---------------------+-------+-------+
|         wall        | 75.65 |  88.0 |
|       building      | 81.47 | 89.87 |
|         sky         | 94.35 | 97.47 |
|        floor        | 80.23 | 88.92 |
|         tree        | 73.45 | 87.26 |
|       ceiling       | 82.87 | 89.65 |
|         road        | 82.15 | 88.89 |
|         bed         |  88.0 | 94.52 |
|      windowpane     |  60.6 | 78.25 |
|        grass        | 71.74 | 81.59 |
|       cabinet       | 54.44 | 68.26 |
|       sidewalk      | 61.67 | 70.54 |
|        person       | 80.46 | 88.05 |
|        earth        | 37.61 | 64.57 |
|         door        | 47.58 | 60.51 |
|        table        | 58.53 |  73.8 |
|       mountain      | 57.85 | 75.63 |
|        plant        | 47.69 | 60.49 |
|       curtain       | 66.21 | 85.67 |
|        chair        | 53.87 | 70.62 |
|         car         | 81.65 | 88.33 |
|        water        | 59.07 | 79.56 |
|       painting      | 71.31 | 85.75 |
|         sofa        | 61.17 | 72.79 |
|        shelf        |  42.9 | 68.93 |
|        house        | 39.07 | 56.04 |
|         sea         | 67.22 | 87.38 |
|        mirror       | 62.48 | 78.09 |
|         rug         | 59.12 | 71.67 |
|        field        | 29.33 | 48.96 |
|       armchair      | 39.92 | 60.93 |
|         seat        | 51.16 | 72.71 |
|        fence        | 38.01 | 57.11 |
|         desk        | 41.99 | 58.43 |
|         rock        | 35.87 | 54.74 |
|       wardrobe      | 48.92 |  63.2 |
|         lamp        | 66.39 | 77.83 |
|       bathtub       | 74.57 | 84.68 |
|       railing       | 27.61 | 38.92 |
|       cushion       | 50.47 | 71.37 |
|         base        | 28.19 | 41.37 |
|         box         | 20.35 | 30.17 |
|        column       | 46.02 |  58.7 |
|      signboard      | 32.62 | 44.07 |
|   chest of drawers  | 29.64 | 54.13 |
|       counter       | 26.06 | 33.53 |
|         sand        | 37.75 | 50.48 |
|         sink        | 72.41 | 78.39 |
|      skyscraper     | 63.94 | 82.94 |
|      fireplace      | 58.59 | 79.45 |
|     refrigerator    | 65.59 | 71.19 |
|      grandstand     | 30.68 |  84.4 |
|         path        | 18.43 | 27.55 |
|        stairs       | 30.06 | 33.32 |
|        runway       | 51.93 |  58.3 |
|         case        | 49.55 | 56.66 |
|      pool table     | 93.15 | 95.92 |
|        pillow       | 52.73 | 60.67 |
|     screen door     | 40.79 | 46.31 |
|       stairway      | 30.57 | 46.75 |
|        river        | 17.35 | 19.94 |
|        bridge       | 34.11 | 43.63 |
|       bookcase      | 34.14 | 45.78 |
|        blind        | 25.94 | 26.61 |
|     coffee table    | 62.49 | 82.27 |
|        toilet       | 85.37 | 89.49 |
|        flower       | 41.42 | 64.84 |
|         book        | 46.29 | 59.18 |
|         hill        |  6.95 | 12.48 |
|        bench        | 32.08 |  45.5 |
|      countertop     | 58.47 | 69.56 |
|        stove        | 68.93 | 77.65 |
|         palm        |  45.9 | 61.88 |
|    kitchen island   | 34.01 | 59.75 |
|       computer      | 56.89 | 62.81 |
|     swivel chair    | 38.64 | 52.84 |
|         boat        | 68.82 | 85.12 |
|         bar         | 46.88 | 57.18 |
|    arcade machine   | 63.22 | 67.66 |
|        hovel        | 45.45 |  73.6 |
|         bus         | 83.36 | 87.56 |
|        towel        | 58.12 | 73.26 |
|        light        | 52.16 | 68.71 |
|        truck        | 34.44 |  55.1 |
|        tower        | 37.35 |  63.2 |
|      chandelier     |  69.6 | 82.81 |
|        awning       | 26.12 | 40.67 |
|     streetlight     | 26.66 | 35.58 |
|        booth        | 46.32 | 47.05 |
| television receiver | 67.72 | 75.02 |
|       airplane      | 51.44 | 62.86 |
|      dirt track     |  3.99 | 19.49 |
|       apparel       |  27.3 | 41.83 |
|         pole        | 26.11 | 40.28 |
|         land        |  8.51 | 10.59 |
|      bannister      |  8.07 | 10.17 |
|      escalator      | 16.68 | 17.16 |
|       ottoman       | 40.59 | 60.61 |
|        bottle       | 17.79 | 21.06 |
|        buffet       | 52.04 |  54.1 |
|        poster       | 26.71 | 39.08 |
|        stage        | 14.16 |  30.8 |
|         van         | 48.42 | 73.52 |
|         ship        | 72.14 | 72.76 |
|       fountain      |  18.3 | 19.53 |
|    conveyer belt    | 62.07 | 65.68 |
|        canopy       | 26.75 | 40.25 |
|        washer       | 63.04 |  63.3 |
|      plaything      | 12.57 | 33.87 |
|    swimming pool    | 48.67 | 71.76 |
|        stool        | 42.04 | 55.47 |
|        barrel       |  69.2 | 74.02 |
|        basket       | 29.67 | 34.36 |
|      waterfall      | 35.74 | 52.16 |
|         tent        | 95.79 | 97.87 |
|         bag         | 11.53 | 12.82 |
|       minibike      | 69.84 | 84.18 |
|        cradle       | 65.95 | 96.67 |
|         oven        | 18.07 | 44.27 |
|         ball        | 42.88 | 79.99 |
|         food        | 54.07 | 70.92 |
|         step        |  8.16 | 13.37 |
|         tank        | 48.46 |  50.8 |
|      trade name     | 17.68 | 19.54 |
|      microwave      | 31.99 | 34.07 |
|         pot         | 35.55 | 41.45 |
|        animal       |  59.7 |  69.4 |
|       bicycle       | 55.47 | 69.34 |
|         lake        |  7.51 |  9.38 |
|      dishwasher     | 42.91 | 56.81 |
|        screen       |  68.0 |  92.5 |
|       blanket       |  5.53 |  8.67 |
|      sculpture      | 63.28 | 72.36 |
|         hood        | 63.93 | 69.69 |
|        sconce       | 47.97 | 62.64 |
|         vase        | 34.46 | 55.76 |
|    traffic light    | 36.86 | 54.76 |
|         tray        | 11.67 | 16.49 |
|        ashcan       | 42.41 | 52.93 |
|         fan         | 55.88 | 77.02 |
|         pier        |  9.82 | 13.24 |
|      crt screen     |  0.43 |  1.25 |
|        plate        | 49.41 | 62.59 |
|       monitor       |  1.58 |  1.86 |
|    bulletin board   | 39.76 | 50.43 |
|        shower       |  1.72 | 15.69 |
|       radiator      | 52.74 |  69.0 |
|        glass        | 10.37 | 10.75 |
|        clock        |  45.4 | 52.66 |
|         flag        |  44.0 | 48.79 |
+---------------------+-------+-------+
09/21 05:01:21 - mmengine - INFO - Iter(test) [2000/2000]    aAcc: 81.5400  mIoU: 45.8100  mAcc: 58.0400  data_time: 0.0018  time: 6.6167
Finished processing corruption type: glass_blur
Processing corruption type: motion_blur
09/21 05:01:25 - mmengine - INFO - 
------------------------------------------------------------
System environment:
    sys.platform: linux
    Python: 3.10.13 | packaged by conda-forge | (main, Dec 23 2023, 15:36:39) [GCC 12.3.0]
    CUDA available: True
    MUSA available: False
    numpy_random_seed: 179091165
    GPU 0: Tesla V100-SXM2-32GB
    CUDA_HOME: /opt/bwhpc/common/devel/cuda/11.7
    NVCC: Cuda compilation tools, release 11.7, V11.7.99
    GCC: gcc (GCC) 8.5.0 20210514 (Red Hat 8.5.0-18)
    PyTorch: 1.13.1
    PyTorch compiling details: PyTorch built with:
  - GCC 9.3
  - C++ Version: 201402
  - Intel(R) oneAPI Math Kernel Library Version 2023.1-Product Build 20230303 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v2.6.0 (Git Hash 52b5f107dd9cf10910aaa19cb47f3abf9b349815)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - LAPACK is enabled (usually provided by MKL)
  - NNPACK is enabled
  - CPU capability usage: AVX2
  - CUDA Runtime 11.7
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_61,code=sm_61;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86;-gencode;arch=compute_37,code=compute_37
  - CuDNN 8.5
  - Magma 2.6.1
  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.7, CUDNN_VERSION=8.5.0, CXX_COMPILER=/opt/rh/devtoolset-9/root/usr/bin/c++, CXX_FLAGS= -fabi-version=11 -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -DEDGE_PROFILER_USE_KINETO -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Werror=non-virtual-dtor -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wunused-local-typedefs -Wno-unused-parameter -Wno-unused-function -Wno-unused-result -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Werror=cast-function-type -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.13.1, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, USE_ROCM=OFF, 

    TorchVision: 0.14.1
    OpenCV: 3.4.18
    MMEngine: 0.10.4

Runtime environment:
    cudnn_benchmark: True
    mp_cfg: {'mp_start_method': 'fork', 'opencv_num_threads': 0}
    dist_cfg: {'backend': 'nccl'}
    seed: 179091165
    Distributed launcher: none
    Distributed training: False
    GPU number: 1
------------------------------------------------------------

09/21 05:01:26 - mmengine - INFO - Config:
auto_scale_lr = dict(base_batch_size=16, enable=False)
backbone_embed_multi = dict(decay_mult=0.0, lr_mult=0.1)
backbone_norm_multi = dict(decay_mult=0.0, lr_mult=0.1)
crop_size = (
    512,
    512,
)
custom_imports = dict(allow_failed_imports=False, imports='mmdet.models')
custom_keys = dict({
    'absolute_pos_embed':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone':
    dict(decay_mult=1.0, lr_mult=0.1),
    'backbone.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.patch_embed.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.0.blocks.0.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.0.blocks.1.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.0.downsample.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.1.blocks.0.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.1.blocks.1.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.1.downsample.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.0.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.1.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.10.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.11.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.12.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.13.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.14.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.15.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.16.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.17.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.2.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.3.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.4.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.5.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.6.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.7.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.8.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.9.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.downsample.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.3.blocks.0.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.3.blocks.1.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'level_embed':
    dict(decay_mult=0.0, lr_mult=1.0),
    'query_embed':
    dict(decay_mult=0.0, lr_mult=1.0),
    'query_feat':
    dict(decay_mult=0.0, lr_mult=1.0),
    'relative_position_bias_table':
    dict(decay_mult=0.0, lr_mult=0.1)
})
data_root = 'data/ade/ADEChallengeData2016'
dataset_type = 'ADE20KDataset'
default_hooks = dict(
    checkpoint=dict(
        by_epoch=False, interval=5000, save_best='mIoU',
        type='CheckpointHook'),
    logger=dict(interval=50, log_metric_by_epoch=False, type='LoggerHook'),
    param_scheduler=dict(type='ParamSchedulerHook'),
    sampler_seed=dict(type='DistSamplerSeedHook'),
    timer=dict(type='IterTimerHook'),
    visualization=dict(type='SegVisualizationHook'))
default_scope = 'mmseg'
depths = [
    2,
    2,
    18,
    2,
]
embed_multi = dict(decay_mult=0.0, lr_mult=1.0)
env_cfg = dict(
    cudnn_benchmark=True,
    dist_cfg=dict(backend='nccl'),
    mp_cfg=dict(mp_start_method='fork', opencv_num_threads=0))
img_ratios = [
    0.5,
    0.75,
    1.0,
    1.25,
    1.5,
    1.75,
]
launcher = 'none'
load_from = '../checkpoint_files/ade20k/mask2former/mask2former_swin-s_8xb2-160k_ade20k-512x512_20221204_143905-e715144e.pth'
log_level = 'INFO'
log_processor = dict(by_epoch=False)
model = dict(
    backbone=dict(
        attn_drop_rate=0.0,
        depths=[
            2,
            2,
            18,
            2,
        ],
        drop_path_rate=0.3,
        drop_rate=0.0,
        embed_dims=96,
        frozen_stages=-1,
        init_cfg=dict(
            checkpoint=
            'https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/swin/swin_small_patch4_window7_224_20220317-7ba6d6dd.pth',
            type='Pretrained'),
        mlp_ratio=4,
        num_heads=[
            3,
            6,
            12,
            24,
        ],
        out_indices=(
            0,
            1,
            2,
            3,
        ),
        patch_norm=True,
        qk_scale=None,
        qkv_bias=True,
        type='SwinTransformer',
        window_size=7,
        with_cp=False),
    data_preprocessor=dict(
        bgr_to_rgb=True,
        corruption='motion_blur',
        mean=[
            123.675,
            116.28,
            103.53,
        ],
        pad_val=0,
        seg_pad_val=255,
        size=(
            512,
            512,
        ),
        std=[
            58.395,
            57.12,
            57.375,
        ],
        test_cfg=dict(size_divisor=32),
        type='SegDataPreProcessor'),
    decode_head=dict(
        align_corners=False,
        enforce_decoder_input_project=False,
        feat_channels=256,
        in_channels=[
            96,
            192,
            384,
            768,
        ],
        loss_cls=dict(
            class_weight=[
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                0.1,
            ],
            loss_weight=2.0,
            reduction='mean',
            type='mmdet.CrossEntropyLoss',
            use_sigmoid=False),
        loss_dice=dict(
            activate=True,
            eps=1.0,
            loss_weight=5.0,
            naive_dice=True,
            reduction='mean',
            type='mmdet.DiceLoss',
            use_sigmoid=True),
        loss_mask=dict(
            loss_weight=5.0,
            reduction='mean',
            type='mmdet.CrossEntropyLoss',
            use_sigmoid=True),
        num_classes=150,
        num_queries=100,
        num_transformer_feat_level=3,
        out_channels=256,
        pixel_decoder=dict(
            act_cfg=dict(type='ReLU'),
            encoder=dict(
                init_cfg=None,
                layer_cfg=dict(
                    ffn_cfg=dict(
                        act_cfg=dict(inplace=True, type='ReLU'),
                        embed_dims=256,
                        feedforward_channels=1024,
                        ffn_drop=0.0,
                        num_fcs=2),
                    self_attn_cfg=dict(
                        batch_first=True,
                        dropout=0.0,
                        embed_dims=256,
                        im2col_step=64,
                        init_cfg=None,
                        norm_cfg=None,
                        num_heads=8,
                        num_levels=3,
                        num_points=4)),
                num_layers=6),
            init_cfg=None,
            norm_cfg=dict(num_groups=32, type='GN'),
            num_outs=3,
            positional_encoding=dict(normalize=True, num_feats=128),
            type='mmdet.MSDeformAttnPixelDecoder'),
        positional_encoding=dict(normalize=True, num_feats=128),
        strides=[
            4,
            8,
            16,
            32,
        ],
        train_cfg=dict(
            assigner=dict(
                match_costs=[
                    dict(type='mmdet.ClassificationCost', weight=2.0),
                    dict(
                        type='mmdet.CrossEntropyLossCost',
                        use_sigmoid=True,
                        weight=5.0),
                    dict(
                        eps=1.0,
                        pred_act=True,
                        type='mmdet.DiceCost',
                        weight=5.0),
                ],
                type='mmdet.HungarianAssigner'),
            importance_sample_ratio=0.75,
            num_points=12544,
            oversample_ratio=3.0,
            sampler=dict(type='mmdet.MaskPseudoSampler')),
        transformer_decoder=dict(
            init_cfg=None,
            layer_cfg=dict(
                cross_attn_cfg=dict(
                    attn_drop=0.0,
                    batch_first=True,
                    dropout_layer=None,
                    embed_dims=256,
                    num_heads=8,
                    proj_drop=0.0),
                ffn_cfg=dict(
                    act_cfg=dict(inplace=True, type='ReLU'),
                    add_identity=True,
                    dropout_layer=None,
                    embed_dims=256,
                    feedforward_channels=2048,
                    ffn_drop=0.0,
                    num_fcs=2),
                self_attn_cfg=dict(
                    attn_drop=0.0,
                    batch_first=True,
                    dropout_layer=None,
                    embed_dims=256,
                    num_heads=8,
                    proj_drop=0.0)),
            num_layers=9,
            return_intermediate=True),
        type='Mask2FormerHead'),
    test_cfg=dict(mode='whole'),
    train_cfg=dict(),
    type='EncoderDecoder')
num_classes = 150
optim_wrapper = dict(
    clip_grad=dict(max_norm=0.01, norm_type=2),
    optimizer=dict(
        betas=(
            0.9,
            0.999,
        ),
        eps=1e-08,
        lr=0.0001,
        type='AdamW',
        weight_decay=0.05),
    paramwise_cfg=dict(
        custom_keys=dict({
            'absolute_pos_embed':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone':
            dict(decay_mult=1.0, lr_mult=0.1),
            'backbone.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.patch_embed.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.0.blocks.0.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.0.blocks.1.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.0.downsample.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.1.blocks.0.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.1.blocks.1.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.1.downsample.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.0.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.1.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.10.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.11.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.12.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.13.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.14.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.15.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.16.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.17.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.2.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.3.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.4.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.5.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.6.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.7.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.8.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.9.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.downsample.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.3.blocks.0.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.3.blocks.1.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'level_embed':
            dict(decay_mult=0.0, lr_mult=1.0),
            'query_embed':
            dict(decay_mult=0.0, lr_mult=1.0),
            'query_feat':
            dict(decay_mult=0.0, lr_mult=1.0),
            'relative_position_bias_table':
            dict(decay_mult=0.0, lr_mult=0.1)
        }),
        norm_decay_mult=0.0),
    type='OptimWrapper')
optimizer = dict(
    betas=(
        0.9,
        0.999,
    ),
    eps=1e-08,
    lr=0.0001,
    type='AdamW',
    weight_decay=0.05)
param_scheduler = [
    dict(
        begin=0,
        by_epoch=False,
        end=160000,
        eta_min=0,
        power=0.9,
        type='PolyLR'),
]
pretrained = 'https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/swin/swin_small_patch4_window7_224_20220317-7ba6d6dd.pth'
resume = False
test_cfg = dict(type='TestLoop')
test_dataloader = dict(
    batch_size=1,
    dataset=dict(
        data_prefix=dict(
            img_path='images/validation',
            seg_map_path='annotations/validation'),
        data_root='data/ade/ADEChallengeData2016',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(keep_ratio=True, scale=(
                2048,
                512,
            ), type='Resize'),
            dict(reduce_zero_label=True, type='LoadAnnotations'),
            dict(type='PackSegInputs'),
        ],
        type='ADE20KDataset'),
    num_workers=4,
    persistent_workers=True,
    sampler=dict(shuffle=False, type='DefaultSampler'))
test_evaluator = dict(
    iou_metrics=[
        'mIoU',
    ], type='IoUMetric')
test_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(keep_ratio=True, scale=(
        2048,
        512,
    ), type='Resize'),
    dict(reduce_zero_label=True, type='LoadAnnotations'),
    dict(type='PackSegInputs'),
]
train_cfg = dict(
    max_iters=160000, type='IterBasedTrainLoop', val_interval=5000)
train_dataloader = dict(
    batch_size=2,
    dataset=dict(
        data_prefix=dict(
            img_path='images/training', seg_map_path='annotations/training'),
        data_root='data/ade/ADEChallengeData2016',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(reduce_zero_label=True, type='LoadAnnotations'),
            dict(
                max_size=2048,
                resize_type='ResizeShortestEdge',
                scales=[
                    256,
                    307,
                    358,
                    409,
                    460,
                    512,
                    563,
                    614,
                    665,
                    716,
                    768,
                    819,
                    870,
                    921,
                    972,
                    1024,
                ],
                type='RandomChoiceResize'),
            dict(
                cat_max_ratio=0.75, crop_size=(
                    512,
                    512,
                ), type='RandomCrop'),
            dict(prob=0.5, type='RandomFlip'),
            dict(type='PhotoMetricDistortion'),
            dict(type='PackSegInputs'),
        ],
        type='ADE20KDataset'),
    num_workers=4,
    persistent_workers=True,
    sampler=dict(shuffle=True, type='InfiniteSampler'))
train_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(reduce_zero_label=True, type='LoadAnnotations'),
    dict(
        max_size=2048,
        resize_type='ResizeShortestEdge',
        scales=[
            256,
            307,
            358,
            409,
            460,
            512,
            563,
            614,
            665,
            716,
            768,
            819,
            870,
            921,
            972,
            1024,
        ],
        type='RandomChoiceResize'),
    dict(cat_max_ratio=0.75, crop_size=(
        512,
        512,
    ), type='RandomCrop'),
    dict(prob=0.5, type='RandomFlip'),
    dict(type='PhotoMetricDistortion'),
    dict(type='PackSegInputs'),
]
tta_model = dict(type='SegTTAModel')
tta_pipeline = [
    dict(backend_args=None, type='LoadImageFromFile'),
    dict(
        transforms=[
            [
                dict(keep_ratio=True, scale_factor=0.5, type='Resize'),
                dict(keep_ratio=True, scale_factor=0.75, type='Resize'),
                dict(keep_ratio=True, scale_factor=1.0, type='Resize'),
                dict(keep_ratio=True, scale_factor=1.25, type='Resize'),
                dict(keep_ratio=True, scale_factor=1.5, type='Resize'),
                dict(keep_ratio=True, scale_factor=1.75, type='Resize'),
            ],
            [
                dict(direction='horizontal', prob=0.0, type='RandomFlip'),
                dict(direction='horizontal', prob=1.0, type='RandomFlip'),
            ],
            [
                dict(type='LoadAnnotations'),
            ],
            [
                dict(type='PackSegInputs'),
            ],
        ],
        type='TestTimeAug'),
]
val_cfg = dict(type='ValLoop')
val_dataloader = dict(
    batch_size=1,
    dataset=dict(
        data_prefix=dict(
            img_path='images/validation',
            seg_map_path='annotations/validation'),
        data_root='data/ade/ADEChallengeData2016',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(keep_ratio=True, scale=(
                2048,
                512,
            ), type='Resize'),
            dict(reduce_zero_label=True, type='LoadAnnotations'),
            dict(type='PackSegInputs'),
        ],
        type='ADE20KDataset'),
    num_workers=4,
    persistent_workers=True,
    sampler=dict(shuffle=False, type='DefaultSampler'))
val_evaluator = dict(
    iou_metrics=[
        'mIoU',
    ], type='IoUMetric')
vis_backends = [
    dict(type='LocalVisBackend'),
]
visualizer = dict(
    name='visualizer',
    type='SegLocalVisualizer',
    vis_backends=[
        dict(type='LocalVisBackend'),
    ])
work_dir = '../corruptions/work_dirs/ade20k/mask2former/mask2former_swin-s_8xb2-160k_ade20k-512x512/motion_blur'

09/21 05:01:29 - mmengine - INFO - Distributed training is not used, all SyncBatchNorm (SyncBN) layers in the model will be automatically reverted to BatchNormXd layers if they are used.
09/21 05:01:29 - mmengine - INFO - Hooks will be executed in the following order:
before_run:
(VERY_HIGH   ) RuntimeInfoHook                    
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
before_train:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_train_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(NORMAL      ) DistSamplerSeedHook                
 -------------------- 
before_train_iter:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_train_iter:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(NORMAL      ) SegVisualizationHook               
(BELOW_NORMAL) LoggerHook                         
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
after_train_epoch:
(NORMAL      ) IterTimerHook                      
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_val:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
before_val_epoch:
(NORMAL      ) IterTimerHook                      
 -------------------- 
before_val_iter:
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_val_iter:
(NORMAL      ) IterTimerHook                      
(NORMAL      ) SegVisualizationHook               
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_val_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
after_val:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
after_train:
(VERY_HIGH   ) RuntimeInfoHook                    
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_test:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
before_test_epoch:
(NORMAL      ) IterTimerHook                      
 -------------------- 
before_test_iter:
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_test_iter:
(NORMAL      ) IterTimerHook                      
(NORMAL      ) SegVisualizationHook               
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_test_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_test:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
after_run:
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
09/21 05:01:29 - mmengine - WARNING - The prefix is not set in metric class IoUMetric.
Loads checkpoint by local backend from path: ../checkpoint_files/ade20k/mask2former/mask2former_swin-s_8xb2-160k_ade20k-512x512_20221204_143905-e715144e.pth
09/21 05:01:32 - mmengine - INFO - Load checkpoint from ../checkpoint_files/ade20k/mask2former/mask2former_swin-s_8xb2-160k_ade20k-512x512_20221204_143905-e715144e.pth
09/21 05:02:25 - mmengine - INFO - Iter(test) [  50/2000]    eta: 0:34:32  time: 1.0065  data_time: 0.0016  memory: 12814  
09/21 05:03:09 - mmengine - INFO - Iter(test) [ 100/2000]    eta: 0:30:38  time: 0.9176  data_time: 0.0018  memory: 12795  
09/21 05:03:49 - mmengine - INFO - Iter(test) [ 150/2000]    eta: 0:28:02  time: 0.8136  data_time: 0.0017  memory: 935  
09/21 05:04:32 - mmengine - INFO - Iter(test) [ 200/2000]    eta: 0:27:00  time: 0.8219  data_time: 0.0018  memory: 12835  
09/21 05:05:14 - mmengine - INFO - Iter(test) [ 250/2000]    eta: 0:25:50  time: 0.8124  data_time: 0.0017  memory: 12838  
09/21 05:05:54 - mmengine - INFO - Iter(test) [ 300/2000]    eta: 0:24:45  time: 0.8567  data_time: 0.0018  memory: 12803  
09/21 05:06:35 - mmengine - INFO - Iter(test) [ 350/2000]    eta: 0:23:47  time: 0.7591  data_time: 0.0016  memory: 12810  
09/21 05:07:16 - mmengine - INFO - Iter(test) [ 400/2000]    eta: 0:22:55  time: 0.8318  data_time: 0.0015  memory: 12775  
09/21 05:07:52 - mmengine - INFO - Iter(test) [ 450/2000]    eta: 0:21:49  time: 0.7545  data_time: 0.0017  memory: 975  
09/21 05:08:32 - mmengine - INFO - Iter(test) [ 500/2000]    eta: 0:20:59  time: 0.7644  data_time: 0.0017  memory: 935  
09/21 05:09:13 - mmengine - INFO - Iter(test) [ 550/2000]    eta: 0:20:15  time: 0.8351  data_time: 0.0018  memory: 1042  
09/21 05:09:51 - mmengine - INFO - Iter(test) [ 600/2000]    eta: 0:19:23  time: 0.7940  data_time: 0.0018  memory: 1040  
09/21 05:10:31 - mmengine - INFO - Iter(test) [ 650/2000]    eta: 0:18:40  time: 0.8912  data_time: 0.0016  memory: 12816  
09/21 05:11:14 - mmengine - INFO - Iter(test) [ 700/2000]    eta: 0:18:00  time: 0.8331  data_time: 0.0019  memory: 12806  
09/21 05:11:55 - mmengine - INFO - Iter(test) [ 750/2000]    eta: 0:17:18  time: 0.8024  data_time: 0.0016  memory: 1096  
09/21 05:12:32 - mmengine - INFO - Iter(test) [ 800/2000]    eta: 0:16:30  time: 0.7659  data_time: 0.0018  memory: 935  
09/21 05:13:11 - mmengine - INFO - Iter(test) [ 850/2000]    eta: 0:15:45  time: 0.7833  data_time: 0.0017  memory: 908  
09/21 05:13:48 - mmengine - INFO - Iter(test) [ 900/2000]    eta: 0:14:59  time: 0.7316  data_time: 0.0015  memory: 987  
09/21 05:14:29 - mmengine - INFO - Iter(test) [ 950/2000]    eta: 0:14:18  time: 0.8172  data_time: 0.0016  memory: 1015  
09/21 05:15:08 - mmengine - INFO - Iter(test) [1000/2000]    eta: 0:13:35  time: 0.7802  data_time: 0.0016  memory: 1015  
09/21 05:15:49 - mmengine - INFO - Iter(test) [1050/2000]    eta: 0:12:55  time: 0.8659  data_time: 0.0016  memory: 12819  
09/21 05:16:29 - mmengine - INFO - Iter(test) [1100/2000]    eta: 0:12:13  time: 0.8036  data_time: 0.0017  memory: 1012  
09/21 05:17:09 - mmengine - INFO - Iter(test) [1150/2000]    eta: 0:11:32  time: 0.8146  data_time: 0.0017  memory: 985  
09/21 05:17:49 - mmengine - INFO - Iter(test) [1200/2000]    eta: 0:10:51  time: 0.8001  data_time: 0.0015  memory: 1921  
09/21 05:18:29 - mmengine - INFO - Iter(test) [1250/2000]    eta: 0:10:10  time: 0.8024  data_time: 0.0016  memory: 12797  
09/21 05:19:06 - mmengine - INFO - Iter(test) [1300/2000]    eta: 0:09:27  time: 0.7917  data_time: 0.0016  memory: 935  
09/21 05:19:47 - mmengine - INFO - Iter(test) [1350/2000]    eta: 0:08:46  time: 0.7691  data_time: 0.0015  memory: 935  
09/21 05:20:27 - mmengine - INFO - Iter(test) [1400/2000]    eta: 0:08:06  time: 0.9038  data_time: 0.0016  memory: 1012  
09/21 05:21:06 - mmengine - INFO - Iter(test) [1450/2000]    eta: 0:07:25  time: 0.8532  data_time: 0.0015  memory: 1015  
09/21 05:21:45 - mmengine - INFO - Iter(test) [1500/2000]    eta: 0:06:44  time: 0.7380  data_time: 0.0017  memory: 933  
09/21 05:22:27 - mmengine - INFO - Iter(test) [1550/2000]    eta: 0:06:04  time: 0.8318  data_time: 0.0017  memory: 1015  
09/21 05:23:03 - mmengine - INFO - Iter(test) [1600/2000]    eta: 0:05:22  time: 0.7439  data_time: 0.0017  memory: 908  
09/21 05:23:43 - mmengine - INFO - Iter(test) [1650/2000]    eta: 0:04:42  time: 0.7415  data_time: 0.0014  memory: 12807  
09/21 05:24:24 - mmengine - INFO - Iter(test) [1700/2000]    eta: 0:04:02  time: 0.8209  data_time: 0.0017  memory: 1012  
09/21 05:25:05 - mmengine - INFO - Iter(test) [1750/2000]    eta: 0:03:21  time: 0.8445  data_time: 0.0016  memory: 1039  
09/21 05:25:43 - mmengine - INFO - Iter(test) [1800/2000]    eta: 0:02:41  time: 0.7864  data_time: 0.0018  memory: 935  
09/21 05:26:21 - mmengine - INFO - Iter(test) [1850/2000]    eta: 0:02:00  time: 0.7468  data_time: 0.0018  memory: 854  
09/21 05:26:59 - mmengine - INFO - Iter(test) [1900/2000]    eta: 0:01:20  time: 0.7987  data_time: 0.0024  memory: 1068  
09/21 05:27:40 - mmengine - INFO - Iter(test) [1950/2000]    eta: 0:00:40  time: 0.7931  data_time: 0.0016  memory: 1306  
09/21 05:28:19 - mmengine - INFO - Iter(test) [2000/2000]    eta: 0:00:00  time: 0.6963  data_time: 0.0013  memory: 1094  
09/21 05:28:19 - mmengine - INFO - per class results:
09/21 05:28:19 - mmengine - INFO - 
+---------------------+-------+-------+
|        Class        |  IoU  |  Acc  |
+---------------------+-------+-------+
|         wall        | 76.25 | 85.58 |
|       building      | 79.93 | 92.35 |
|         sky         | 94.24 | 96.31 |
|        floor        | 79.83 | 88.59 |
|         tree        | 74.83 | 86.44 |
|       ceiling       | 83.66 | 90.73 |
|         road        | 82.93 | 89.58 |
|         bed         | 88.83 | 95.17 |
|      windowpane     | 59.44 | 78.81 |
|        grass        | 69.21 | 84.25 |
|       cabinet       | 55.89 |  71.1 |
|       sidewalk      | 64.63 | 78.85 |
|        person       | 81.84 | 89.39 |
|        earth        | 36.97 | 56.64 |
|         door        | 43.75 | 57.27 |
|        table        | 60.67 | 74.84 |
|       mountain      | 49.37 | 71.18 |
|        plant        | 51.34 | 65.86 |
|       curtain       | 69.26 |  82.3 |
|        chair        | 57.85 | 72.88 |
|         car         | 83.66 | 91.79 |
|        water        | 60.19 |  78.1 |
|       painting      | 73.12 | 86.69 |
|         sofa        | 61.87 | 74.99 |
|        shelf        | 43.94 | 67.37 |
|        house        | 46.22 |  58.8 |
|         sea         | 69.78 | 88.18 |
|        mirror       | 63.06 | 76.09 |
|         rug         | 57.44 | 69.64 |
|        field        | 25.97 | 45.27 |
|       armchair      | 44.04 |  65.4 |
|         seat        | 56.25 | 77.34 |
|        fence        | 45.54 | 61.03 |
|         desk        | 49.14 | 74.14 |
|         rock        | 43.07 | 58.11 |
|       wardrobe      | 44.13 | 67.05 |
|         lamp        | 63.69 | 77.48 |
|       bathtub       | 75.21 | 85.13 |
|       railing       | 35.14 | 50.09 |
|       cushion       | 56.56 | 70.22 |
|         base        | 35.07 | 54.52 |
|         box         |  23.2 | 32.98 |
|        column       | 48.44 | 60.42 |
|      signboard      | 33.01 |  49.5 |
|   chest of drawers  | 40.39 | 61.55 |
|       counter       |  27.0 | 41.21 |
|         sand        | 47.19 | 52.48 |
|         sink        | 74.47 | 81.95 |
|      skyscraper     | 32.71 | 39.03 |
|      fireplace      |  68.3 | 92.65 |
|     refrigerator    | 72.45 | 80.48 |
|      grandstand     |  44.7 | 72.55 |
|         path        | 19.33 | 30.89 |
|        stairs       | 25.68 | 29.26 |
|        runway       | 63.81 | 73.11 |
|         case        | 45.83 | 59.98 |
|      pool table     | 92.12 | 96.68 |
|        pillow       | 56.52 | 67.66 |
|     screen door     | 56.63 | 71.06 |
|       stairway      | 33.43 | 51.08 |
|        river        | 16.53 | 20.25 |
|        bridge       | 35.71 | 47.45 |
|       bookcase      | 34.18 | 55.38 |
|        blind        | 42.53 | 50.77 |
|     coffee table    | 59.99 | 83.76 |
|        toilet       | 86.42 | 90.42 |
|        flower       | 44.43 | 54.55 |
|         book        | 49.52 | 66.88 |
|         hill        |  5.44 | 11.76 |
|        bench        | 35.28 | 44.01 |
|      countertop     | 61.45 | 80.95 |
|        stove        | 75.03 | 85.76 |
|         palm        | 46.65 |  65.1 |
|    kitchen island   | 38.82 | 74.87 |
|       computer      | 60.61 | 68.36 |
|     swivel chair    |  44.8 | 75.45 |
|         boat        | 61.67 | 89.28 |
|         bar         |  42.7 | 54.01 |
|    arcade machine   | 55.87 | 60.67 |
|        hovel        | 14.19 |  15.4 |
|         bus         | 80.84 | 95.55 |
|        towel        | 64.24 | 79.38 |
|        light        | 56.46 | 73.47 |
|        truck        | 35.18 | 54.92 |
|        tower        | 22.73 | 37.45 |
|      chandelier     | 63.29 | 73.54 |
|        awning       | 26.39 |  39.6 |
|     streetlight     | 28.45 | 40.96 |
|        booth        | 60.17 | 61.43 |
| television receiver |  68.3 | 81.41 |
|       airplane      | 57.11 |  66.0 |
|      dirt track     |  3.71 | 16.81 |
|       apparel       | 30.39 | 38.56 |
|         pole        | 25.33 |  39.1 |
|         land        |  6.21 |  8.54 |
|      bannister      | 13.13 | 19.15 |
|      escalator      | 41.31 | 54.85 |
|       ottoman       | 45.82 | 64.09 |
|        bottle       | 18.73 | 22.33 |
|        buffet       |  41.3 | 45.68 |
|        poster       | 20.05 | 41.28 |
|        stage        | 18.01 | 30.31 |
|         van         |  52.6 | 70.08 |
|         ship        |  0.11 |  0.11 |
|       fountain      | 21.08 | 21.59 |
|    conveyer belt    |  59.3 | 72.02 |
|        canopy       | 19.48 | 25.87 |
|        washer       | 62.56 | 75.93 |
|      plaything      | 22.72 | 35.21 |
|    swimming pool    | 39.61 | 63.39 |
|        stool        | 43.26 |  58.0 |
|        barrel       |  64.8 | 74.06 |
|        basket       | 35.28 | 45.54 |
|      waterfall      | 47.34 |  51.4 |
|         tent        | 82.29 | 98.11 |
|         bag         | 14.83 | 18.88 |
|       minibike      | 66.12 | 88.23 |
|        cradle       | 79.96 | 95.58 |
|         oven        | 23.22 | 64.22 |
|         ball        | 32.33 | 80.33 |
|         food        | 38.99 | 49.16 |
|         step        |  8.57 | 14.66 |
|         tank        | 46.64 | 50.93 |
|      trade name     | 25.36 | 28.52 |
|      microwave      | 41.69 | 46.14 |
|         pot         | 49.17 | 62.95 |
|        animal       | 68.62 | 75.34 |
|       bicycle       |  54.5 | 76.58 |
|         lake        |  8.35 |  9.33 |
|      dishwasher     | 63.14 | 82.08 |
|        screen       | 77.15 | 89.65 |
|       blanket       |  12.5 |  16.9 |
|      sculpture      | 40.72 | 60.92 |
|         hood        | 66.32 | 74.87 |
|        sconce       | 49.13 | 63.53 |
|         vase        | 45.03 | 59.13 |
|    traffic light    | 36.26 | 66.21 |
|         tray        | 11.49 | 21.53 |
|        ashcan       | 36.03 | 56.44 |
|         fan         | 58.31 | 81.01 |
|         pier        | 12.84 | 14.25 |
|      crt screen     |  2.37 |  3.03 |
|        plate        | 54.27 | 73.63 |
|       monitor       |  2.59 |  4.88 |
|    bulletin board   | 45.03 | 57.26 |
|        shower       |  6.59 | 21.34 |
|       radiator      | 59.36 |  67.8 |
|        glass        | 16.35 | 17.35 |
|        clock        | 33.36 |  45.1 |
|         flag        | 33.51 | 38.27 |
+---------------------+-------+-------+
09/21 05:28:19 - mmengine - INFO - Iter(test) [2000/2000]    aAcc: 81.9000  mIoU: 46.7300  mAcc: 59.8500  data_time: 0.0018  time: 0.8031
Finished processing corruption type: motion_blur
Processing corruption type: zoom_blur
09/21 05:28:23 - mmengine - INFO - 
------------------------------------------------------------
System environment:
    sys.platform: linux
    Python: 3.10.13 | packaged by conda-forge | (main, Dec 23 2023, 15:36:39) [GCC 12.3.0]
    CUDA available: True
    MUSA available: False
    numpy_random_seed: 743075403
    GPU 0: Tesla V100-SXM2-32GB
    CUDA_HOME: /opt/bwhpc/common/devel/cuda/11.7
    NVCC: Cuda compilation tools, release 11.7, V11.7.99
    GCC: gcc (GCC) 8.5.0 20210514 (Red Hat 8.5.0-18)
    PyTorch: 1.13.1
    PyTorch compiling details: PyTorch built with:
  - GCC 9.3
  - C++ Version: 201402
  - Intel(R) oneAPI Math Kernel Library Version 2023.1-Product Build 20230303 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v2.6.0 (Git Hash 52b5f107dd9cf10910aaa19cb47f3abf9b349815)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - LAPACK is enabled (usually provided by MKL)
  - NNPACK is enabled
  - CPU capability usage: AVX2
  - CUDA Runtime 11.7
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_61,code=sm_61;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86;-gencode;arch=compute_37,code=compute_37
  - CuDNN 8.5
  - Magma 2.6.1
  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.7, CUDNN_VERSION=8.5.0, CXX_COMPILER=/opt/rh/devtoolset-9/root/usr/bin/c++, CXX_FLAGS= -fabi-version=11 -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -DEDGE_PROFILER_USE_KINETO -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Werror=non-virtual-dtor -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wunused-local-typedefs -Wno-unused-parameter -Wno-unused-function -Wno-unused-result -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Werror=cast-function-type -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.13.1, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, USE_ROCM=OFF, 

    TorchVision: 0.14.1
    OpenCV: 3.4.18
    MMEngine: 0.10.4

Runtime environment:
    cudnn_benchmark: True
    mp_cfg: {'mp_start_method': 'fork', 'opencv_num_threads': 0}
    dist_cfg: {'backend': 'nccl'}
    seed: 743075403
    Distributed launcher: none
    Distributed training: False
    GPU number: 1
------------------------------------------------------------

09/21 05:28:24 - mmengine - INFO - Config:
auto_scale_lr = dict(base_batch_size=16, enable=False)
backbone_embed_multi = dict(decay_mult=0.0, lr_mult=0.1)
backbone_norm_multi = dict(decay_mult=0.0, lr_mult=0.1)
crop_size = (
    512,
    512,
)
custom_imports = dict(allow_failed_imports=False, imports='mmdet.models')
custom_keys = dict({
    'absolute_pos_embed':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone':
    dict(decay_mult=1.0, lr_mult=0.1),
    'backbone.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.patch_embed.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.0.blocks.0.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.0.blocks.1.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.0.downsample.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.1.blocks.0.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.1.blocks.1.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.1.downsample.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.0.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.1.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.10.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.11.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.12.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.13.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.14.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.15.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.16.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.17.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.2.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.3.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.4.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.5.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.6.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.7.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.8.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.9.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.downsample.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.3.blocks.0.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.3.blocks.1.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'level_embed':
    dict(decay_mult=0.0, lr_mult=1.0),
    'query_embed':
    dict(decay_mult=0.0, lr_mult=1.0),
    'query_feat':
    dict(decay_mult=0.0, lr_mult=1.0),
    'relative_position_bias_table':
    dict(decay_mult=0.0, lr_mult=0.1)
})
data_root = 'data/ade/ADEChallengeData2016'
dataset_type = 'ADE20KDataset'
default_hooks = dict(
    checkpoint=dict(
        by_epoch=False, interval=5000, save_best='mIoU',
        type='CheckpointHook'),
    logger=dict(interval=50, log_metric_by_epoch=False, type='LoggerHook'),
    param_scheduler=dict(type='ParamSchedulerHook'),
    sampler_seed=dict(type='DistSamplerSeedHook'),
    timer=dict(type='IterTimerHook'),
    visualization=dict(type='SegVisualizationHook'))
default_scope = 'mmseg'
depths = [
    2,
    2,
    18,
    2,
]
embed_multi = dict(decay_mult=0.0, lr_mult=1.0)
env_cfg = dict(
    cudnn_benchmark=True,
    dist_cfg=dict(backend='nccl'),
    mp_cfg=dict(mp_start_method='fork', opencv_num_threads=0))
img_ratios = [
    0.5,
    0.75,
    1.0,
    1.25,
    1.5,
    1.75,
]
launcher = 'none'
load_from = '../checkpoint_files/ade20k/mask2former/mask2former_swin-s_8xb2-160k_ade20k-512x512_20221204_143905-e715144e.pth'
log_level = 'INFO'
log_processor = dict(by_epoch=False)
model = dict(
    backbone=dict(
        attn_drop_rate=0.0,
        depths=[
            2,
            2,
            18,
            2,
        ],
        drop_path_rate=0.3,
        drop_rate=0.0,
        embed_dims=96,
        frozen_stages=-1,
        init_cfg=dict(
            checkpoint=
            'https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/swin/swin_small_patch4_window7_224_20220317-7ba6d6dd.pth',
            type='Pretrained'),
        mlp_ratio=4,
        num_heads=[
            3,
            6,
            12,
            24,
        ],
        out_indices=(
            0,
            1,
            2,
            3,
        ),
        patch_norm=True,
        qk_scale=None,
        qkv_bias=True,
        type='SwinTransformer',
        window_size=7,
        with_cp=False),
    data_preprocessor=dict(
        bgr_to_rgb=True,
        corruption='zoom_blur',
        mean=[
            123.675,
            116.28,
            103.53,
        ],
        pad_val=0,
        seg_pad_val=255,
        size=(
            512,
            512,
        ),
        std=[
            58.395,
            57.12,
            57.375,
        ],
        test_cfg=dict(size_divisor=32),
        type='SegDataPreProcessor'),
    decode_head=dict(
        align_corners=False,
        enforce_decoder_input_project=False,
        feat_channels=256,
        in_channels=[
            96,
            192,
            384,
            768,
        ],
        loss_cls=dict(
            class_weight=[
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                0.1,
            ],
            loss_weight=2.0,
            reduction='mean',
            type='mmdet.CrossEntropyLoss',
            use_sigmoid=False),
        loss_dice=dict(
            activate=True,
            eps=1.0,
            loss_weight=5.0,
            naive_dice=True,
            reduction='mean',
            type='mmdet.DiceLoss',
            use_sigmoid=True),
        loss_mask=dict(
            loss_weight=5.0,
            reduction='mean',
            type='mmdet.CrossEntropyLoss',
            use_sigmoid=True),
        num_classes=150,
        num_queries=100,
        num_transformer_feat_level=3,
        out_channels=256,
        pixel_decoder=dict(
            act_cfg=dict(type='ReLU'),
            encoder=dict(
                init_cfg=None,
                layer_cfg=dict(
                    ffn_cfg=dict(
                        act_cfg=dict(inplace=True, type='ReLU'),
                        embed_dims=256,
                        feedforward_channels=1024,
                        ffn_drop=0.0,
                        num_fcs=2),
                    self_attn_cfg=dict(
                        batch_first=True,
                        dropout=0.0,
                        embed_dims=256,
                        im2col_step=64,
                        init_cfg=None,
                        norm_cfg=None,
                        num_heads=8,
                        num_levels=3,
                        num_points=4)),
                num_layers=6),
            init_cfg=None,
            norm_cfg=dict(num_groups=32, type='GN'),
            num_outs=3,
            positional_encoding=dict(normalize=True, num_feats=128),
            type='mmdet.MSDeformAttnPixelDecoder'),
        positional_encoding=dict(normalize=True, num_feats=128),
        strides=[
            4,
            8,
            16,
            32,
        ],
        train_cfg=dict(
            assigner=dict(
                match_costs=[
                    dict(type='mmdet.ClassificationCost', weight=2.0),
                    dict(
                        type='mmdet.CrossEntropyLossCost',
                        use_sigmoid=True,
                        weight=5.0),
                    dict(
                        eps=1.0,
                        pred_act=True,
                        type='mmdet.DiceCost',
                        weight=5.0),
                ],
                type='mmdet.HungarianAssigner'),
            importance_sample_ratio=0.75,
            num_points=12544,
            oversample_ratio=3.0,
            sampler=dict(type='mmdet.MaskPseudoSampler')),
        transformer_decoder=dict(
            init_cfg=None,
            layer_cfg=dict(
                cross_attn_cfg=dict(
                    attn_drop=0.0,
                    batch_first=True,
                    dropout_layer=None,
                    embed_dims=256,
                    num_heads=8,
                    proj_drop=0.0),
                ffn_cfg=dict(
                    act_cfg=dict(inplace=True, type='ReLU'),
                    add_identity=True,
                    dropout_layer=None,
                    embed_dims=256,
                    feedforward_channels=2048,
                    ffn_drop=0.0,
                    num_fcs=2),
                self_attn_cfg=dict(
                    attn_drop=0.0,
                    batch_first=True,
                    dropout_layer=None,
                    embed_dims=256,
                    num_heads=8,
                    proj_drop=0.0)),
            num_layers=9,
            return_intermediate=True),
        type='Mask2FormerHead'),
    test_cfg=dict(mode='whole'),
    train_cfg=dict(),
    type='EncoderDecoder')
num_classes = 150
optim_wrapper = dict(
    clip_grad=dict(max_norm=0.01, norm_type=2),
    optimizer=dict(
        betas=(
            0.9,
            0.999,
        ),
        eps=1e-08,
        lr=0.0001,
        type='AdamW',
        weight_decay=0.05),
    paramwise_cfg=dict(
        custom_keys=dict({
            'absolute_pos_embed':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone':
            dict(decay_mult=1.0, lr_mult=0.1),
            'backbone.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.patch_embed.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.0.blocks.0.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.0.blocks.1.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.0.downsample.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.1.blocks.0.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.1.blocks.1.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.1.downsample.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.0.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.1.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.10.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.11.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.12.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.13.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.14.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.15.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.16.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.17.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.2.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.3.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.4.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.5.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.6.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.7.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.8.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.9.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.downsample.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.3.blocks.0.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.3.blocks.1.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'level_embed':
            dict(decay_mult=0.0, lr_mult=1.0),
            'query_embed':
            dict(decay_mult=0.0, lr_mult=1.0),
            'query_feat':
            dict(decay_mult=0.0, lr_mult=1.0),
            'relative_position_bias_table':
            dict(decay_mult=0.0, lr_mult=0.1)
        }),
        norm_decay_mult=0.0),
    type='OptimWrapper')
optimizer = dict(
    betas=(
        0.9,
        0.999,
    ),
    eps=1e-08,
    lr=0.0001,
    type='AdamW',
    weight_decay=0.05)
param_scheduler = [
    dict(
        begin=0,
        by_epoch=False,
        end=160000,
        eta_min=0,
        power=0.9,
        type='PolyLR'),
]
pretrained = 'https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/swin/swin_small_patch4_window7_224_20220317-7ba6d6dd.pth'
resume = False
test_cfg = dict(type='TestLoop')
test_dataloader = dict(
    batch_size=1,
    dataset=dict(
        data_prefix=dict(
            img_path='images/validation',
            seg_map_path='annotations/validation'),
        data_root='data/ade/ADEChallengeData2016',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(keep_ratio=True, scale=(
                2048,
                512,
            ), type='Resize'),
            dict(reduce_zero_label=True, type='LoadAnnotations'),
            dict(type='PackSegInputs'),
        ],
        type='ADE20KDataset'),
    num_workers=4,
    persistent_workers=True,
    sampler=dict(shuffle=False, type='DefaultSampler'))
test_evaluator = dict(
    iou_metrics=[
        'mIoU',
    ], type='IoUMetric')
test_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(keep_ratio=True, scale=(
        2048,
        512,
    ), type='Resize'),
    dict(reduce_zero_label=True, type='LoadAnnotations'),
    dict(type='PackSegInputs'),
]
train_cfg = dict(
    max_iters=160000, type='IterBasedTrainLoop', val_interval=5000)
train_dataloader = dict(
    batch_size=2,
    dataset=dict(
        data_prefix=dict(
            img_path='images/training', seg_map_path='annotations/training'),
        data_root='data/ade/ADEChallengeData2016',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(reduce_zero_label=True, type='LoadAnnotations'),
            dict(
                max_size=2048,
                resize_type='ResizeShortestEdge',
                scales=[
                    256,
                    307,
                    358,
                    409,
                    460,
                    512,
                    563,
                    614,
                    665,
                    716,
                    768,
                    819,
                    870,
                    921,
                    972,
                    1024,
                ],
                type='RandomChoiceResize'),
            dict(
                cat_max_ratio=0.75, crop_size=(
                    512,
                    512,
                ), type='RandomCrop'),
            dict(prob=0.5, type='RandomFlip'),
            dict(type='PhotoMetricDistortion'),
            dict(type='PackSegInputs'),
        ],
        type='ADE20KDataset'),
    num_workers=4,
    persistent_workers=True,
    sampler=dict(shuffle=True, type='InfiniteSampler'))
train_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(reduce_zero_label=True, type='LoadAnnotations'),
    dict(
        max_size=2048,
        resize_type='ResizeShortestEdge',
        scales=[
            256,
            307,
            358,
            409,
            460,
            512,
            563,
            614,
            665,
            716,
            768,
            819,
            870,
            921,
            972,
            1024,
        ],
        type='RandomChoiceResize'),
    dict(cat_max_ratio=0.75, crop_size=(
        512,
        512,
    ), type='RandomCrop'),
    dict(prob=0.5, type='RandomFlip'),
    dict(type='PhotoMetricDistortion'),
    dict(type='PackSegInputs'),
]
tta_model = dict(type='SegTTAModel')
tta_pipeline = [
    dict(backend_args=None, type='LoadImageFromFile'),
    dict(
        transforms=[
            [
                dict(keep_ratio=True, scale_factor=0.5, type='Resize'),
                dict(keep_ratio=True, scale_factor=0.75, type='Resize'),
                dict(keep_ratio=True, scale_factor=1.0, type='Resize'),
                dict(keep_ratio=True, scale_factor=1.25, type='Resize'),
                dict(keep_ratio=True, scale_factor=1.5, type='Resize'),
                dict(keep_ratio=True, scale_factor=1.75, type='Resize'),
            ],
            [
                dict(direction='horizontal', prob=0.0, type='RandomFlip'),
                dict(direction='horizontal', prob=1.0, type='RandomFlip'),
            ],
            [
                dict(type='LoadAnnotations'),
            ],
            [
                dict(type='PackSegInputs'),
            ],
        ],
        type='TestTimeAug'),
]
val_cfg = dict(type='ValLoop')
val_dataloader = dict(
    batch_size=1,
    dataset=dict(
        data_prefix=dict(
            img_path='images/validation',
            seg_map_path='annotations/validation'),
        data_root='data/ade/ADEChallengeData2016',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(keep_ratio=True, scale=(
                2048,
                512,
            ), type='Resize'),
            dict(reduce_zero_label=True, type='LoadAnnotations'),
            dict(type='PackSegInputs'),
        ],
        type='ADE20KDataset'),
    num_workers=4,
    persistent_workers=True,
    sampler=dict(shuffle=False, type='DefaultSampler'))
val_evaluator = dict(
    iou_metrics=[
        'mIoU',
    ], type='IoUMetric')
vis_backends = [
    dict(type='LocalVisBackend'),
]
visualizer = dict(
    name='visualizer',
    type='SegLocalVisualizer',
    vis_backends=[
        dict(type='LocalVisBackend'),
    ])
work_dir = '../corruptions/work_dirs/ade20k/mask2former/mask2former_swin-s_8xb2-160k_ade20k-512x512/zoom_blur'

09/21 05:28:27 - mmengine - INFO - Distributed training is not used, all SyncBatchNorm (SyncBN) layers in the model will be automatically reverted to BatchNormXd layers if they are used.
09/21 05:28:27 - mmengine - INFO - Hooks will be executed in the following order:
before_run:
(VERY_HIGH   ) RuntimeInfoHook                    
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
before_train:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_train_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(NORMAL      ) DistSamplerSeedHook                
 -------------------- 
before_train_iter:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_train_iter:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(NORMAL      ) SegVisualizationHook               
(BELOW_NORMAL) LoggerHook                         
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
after_train_epoch:
(NORMAL      ) IterTimerHook                      
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_val:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
before_val_epoch:
(NORMAL      ) IterTimerHook                      
 -------------------- 
before_val_iter:
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_val_iter:
(NORMAL      ) IterTimerHook                      
(NORMAL      ) SegVisualizationHook               
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_val_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
after_val:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
after_train:
(VERY_HIGH   ) RuntimeInfoHook                    
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_test:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
before_test_epoch:
(NORMAL      ) IterTimerHook                      
 -------------------- 
before_test_iter:
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_test_iter:
(NORMAL      ) IterTimerHook                      
(NORMAL      ) SegVisualizationHook               
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_test_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_test:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
after_run:
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
09/21 05:28:28 - mmengine - WARNING - The prefix is not set in metric class IoUMetric.
Loads checkpoint by local backend from path: ../checkpoint_files/ade20k/mask2former/mask2former_swin-s_8xb2-160k_ade20k-512x512_20221204_143905-e715144e.pth
09/21 05:28:29 - mmengine - INFO - Load checkpoint from ../checkpoint_files/ade20k/mask2former/mask2former_swin-s_8xb2-160k_ade20k-512x512_20221204_143905-e715144e.pth
09/21 05:29:17 - mmengine - INFO - Iter(test) [  50/2000]    eta: 0:31:30  time: 0.9064  data_time: 0.0015  memory: 12814  
09/21 05:29:55 - mmengine - INFO - Iter(test) [ 100/2000]    eta: 0:27:29  time: 0.8125  data_time: 0.0016  memory: 12795  
09/21 05:30:32 - mmengine - INFO - Iter(test) [ 150/2000]    eta: 0:25:19  time: 0.7671  data_time: 0.0015  memory: 935  
09/21 05:31:11 - mmengine - INFO - Iter(test) [ 200/2000]    eta: 0:24:17  time: 0.7423  data_time: 0.0015  memory: 12835  
09/21 05:31:47 - mmengine - INFO - Iter(test) [ 250/2000]    eta: 0:23:08  time: 0.7253  data_time: 0.0015  memory: 12838  
09/21 05:32:22 - mmengine - INFO - Iter(test) [ 300/2000]    eta: 0:22:04  time: 0.7232  data_time: 0.0015  memory: 12803  
09/21 05:33:00 - mmengine - INFO - Iter(test) [ 350/2000]    eta: 0:21:17  time: 0.6608  data_time: 0.0014  memory: 12810  
09/21 05:33:36 - mmengine - INFO - Iter(test) [ 400/2000]    eta: 0:20:29  time: 0.7230  data_time: 0.0014  memory: 12775  
09/21 05:34:09 - mmengine - INFO - Iter(test) [ 450/2000]    eta: 0:19:32  time: 0.6856  data_time: 0.0014  memory: 975  
09/21 05:34:45 - mmengine - INFO - Iter(test) [ 500/2000]    eta: 0:18:47  time: 0.7014  data_time: 0.0014  memory: 935  
09/21 05:35:22 - mmengine - INFO - Iter(test) [ 550/2000]    eta: 0:18:10  time: 0.7435  data_time: 0.0016  memory: 1042  
09/21 05:35:58 - mmengine - INFO - Iter(test) [ 600/2000]    eta: 0:17:28  time: 0.7220  data_time: 0.0016  memory: 1040  
09/21 05:36:35 - mmengine - INFO - Iter(test) [ 650/2000]    eta: 0:16:49  time: 0.8170  data_time: 0.0014  memory: 12816  
09/21 05:37:13 - mmengine - INFO - Iter(test) [ 700/2000]    eta: 0:16:13  time: 0.7503  data_time: 0.0028  memory: 12806  
09/21 05:37:49 - mmengine - INFO - Iter(test) [ 750/2000]    eta: 0:15:34  time: 0.7271  data_time: 0.0015  memory: 1096  
09/21 05:38:23 - mmengine - INFO - Iter(test) [ 800/2000]    eta: 0:14:51  time: 0.7125  data_time: 0.0016  memory: 935  
09/21 05:38:59 - mmengine - INFO - Iter(test) [ 850/2000]    eta: 0:14:13  time: 0.7058  data_time: 0.0016  memory: 908  
09/21 05:39:33 - mmengine - INFO - Iter(test) [ 900/2000]    eta: 0:13:31  time: 0.6555  data_time: 0.0014  memory: 987  
09/21 05:40:09 - mmengine - INFO - Iter(test) [ 950/2000]    eta: 0:12:54  time: 0.7279  data_time: 0.0015  memory: 1015  
09/21 05:40:44 - mmengine - INFO - Iter(test) [1000/2000]    eta: 0:12:14  time: 0.6865  data_time: 0.0015  memory: 1015  
09/21 05:41:21 - mmengine - INFO - Iter(test) [1050/2000]    eta: 0:11:38  time: 0.7228  data_time: 0.0015  memory: 12819  
09/21 05:41:57 - mmengine - INFO - Iter(test) [1100/2000]    eta: 0:11:01  time: 0.6901  data_time: 0.0016  memory: 1012  
09/21 05:42:33 - mmengine - INFO - Iter(test) [1150/2000]    eta: 0:10:23  time: 0.7366  data_time: 0.0015  memory: 985  
09/21 05:43:09 - mmengine - INFO - Iter(test) [1200/2000]    eta: 0:09:46  time: 0.7283  data_time: 0.0015  memory: 1921  
09/21 05:43:45 - mmengine - INFO - Iter(test) [1250/2000]    eta: 0:09:09  time: 0.7432  data_time: 0.0015  memory: 12797  
09/21 05:44:19 - mmengine - INFO - Iter(test) [1300/2000]    eta: 0:08:31  time: 0.6999  data_time: 0.0015  memory: 935  
09/21 05:44:54 - mmengine - INFO - Iter(test) [1350/2000]    eta: 0:07:54  time: 0.6710  data_time: 0.0037  memory: 935  
09/21 05:45:30 - mmengine - INFO - Iter(test) [1400/2000]    eta: 0:07:17  time: 0.7727  data_time: 0.0015  memory: 1012  
09/21 05:46:04 - mmengine - INFO - Iter(test) [1450/2000]    eta: 0:06:40  time: 0.7391  data_time: 0.0014  memory: 1015  
09/21 05:46:39 - mmengine - INFO - Iter(test) [1500/2000]    eta: 0:06:03  time: 0.6481  data_time: 0.0014  memory: 933  
09/21 05:47:16 - mmengine - INFO - Iter(test) [1550/2000]    eta: 0:05:27  time: 0.7207  data_time: 0.0015  memory: 1015  
09/21 05:47:52 - mmengine - INFO - Iter(test) [1600/2000]    eta: 0:04:50  time: 0.7351  data_time: 0.0017  memory: 908  
09/21 05:48:27 - mmengine - INFO - Iter(test) [1650/2000]    eta: 0:04:14  time: 0.6865  data_time: 0.0014  memory: 12807  
09/21 05:49:04 - mmengine - INFO - Iter(test) [1700/2000]    eta: 0:03:37  time: 0.7144  data_time: 0.0016  memory: 1012  
09/21 05:49:40 - mmengine - INFO - Iter(test) [1750/2000]    eta: 0:03:01  time: 0.6872  data_time: 0.0016  memory: 1039  
09/21 05:50:15 - mmengine - INFO - Iter(test) [1800/2000]    eta: 0:02:25  time: 0.7300  data_time: 0.0016  memory: 935  
09/21 05:50:51 - mmengine - INFO - Iter(test) [1850/2000]    eta: 0:01:48  time: 0.7443  data_time: 0.0016  memory: 854  
09/21 05:51:25 - mmengine - INFO - Iter(test) [1900/2000]    eta: 0:01:12  time: 0.6996  data_time: 0.0018  memory: 1068  
09/21 05:52:01 - mmengine - INFO - Iter(test) [1950/2000]    eta: 0:00:36  time: 0.6745  data_time: 0.0015  memory: 1306  
09/21 05:52:35 - mmengine - INFO - Iter(test) [2000/2000]    eta: 0:00:00  time: 0.6447  data_time: 0.0013  memory: 1094  
09/21 05:52:35 - mmengine - INFO - per class results:
09/21 05:52:35 - mmengine - INFO - 
+---------------------+-------+-------+
|        Class        |  IoU  |  Acc  |
+---------------------+-------+-------+
|         wall        | 58.32 | 82.16 |
|       building      | 68.27 | 83.61 |
|         sky         | 85.84 | 88.73 |
|        floor        | 57.48 | 83.84 |
|         tree        | 48.57 |  57.0 |
|       ceiling       | 65.64 | 88.86 |
|         road        | 63.76 | 72.55 |
|         bed         | 68.17 | 84.08 |
|      windowpane     | 46.03 | 69.38 |
|        grass        | 48.57 | 70.69 |
|       cabinet       |  39.1 | 48.21 |
|       sidewalk      | 35.59 | 47.51 |
|        person       | 57.69 | 68.36 |
|        earth        |  24.6 |  49.5 |
|         door        | 14.86 | 17.14 |
|        table        | 38.03 | 46.14 |
|       mountain      | 32.48 | 47.32 |
|        plant        | 20.63 |  30.8 |
|       curtain       | 44.58 | 62.73 |
|        chair        | 24.91 | 30.27 |
|         car         | 63.05 | 81.16 |
|        water        |  38.4 | 56.68 |
|       painting      | 46.91 | 62.97 |
|         sofa        | 39.57 | 51.24 |
|        shelf        | 26.03 |  47.8 |
|        house        | 22.32 | 24.13 |
|         sea         | 37.63 | 47.23 |
|        mirror       | 47.98 | 59.73 |
|         rug         |  9.96 | 10.33 |
|        field        | 19.92 | 45.25 |
|       armchair      | 18.19 | 25.62 |
|         seat        | 14.89 | 24.88 |
|        fence        |  9.66 | 23.57 |
|         desk        | 32.17 | 42.51 |
|         rock        | 20.49 | 22.38 |
|       wardrobe      | 29.98 | 39.28 |
|         lamp        | 37.58 | 50.85 |
|       bathtub       | 45.62 | 72.42 |
|       railing       |  8.59 | 11.98 |
|       cushion       | 29.35 | 34.38 |
|         base        |  9.31 | 11.86 |
|         box         |  5.8  |  6.96 |
|        column       | 21.95 | 27.49 |
|      signboard      | 19.71 | 24.25 |
|   chest of drawers  | 33.09 | 43.27 |
|       counter       | 21.55 | 35.38 |
|         sand        | 10.27 | 17.83 |
|         sink        | 49.84 | 56.76 |
|      skyscraper     | 26.74 | 36.08 |
|      fireplace      | 43.67 | 65.32 |
|     refrigerator    | 42.62 | 50.59 |
|      grandstand     | 24.95 | 66.65 |
|         path        |  1.4  |  1.57 |
|        stairs       |  2.57 |  2.8  |
|        runway       | 50.32 | 68.12 |
|         case        | 20.21 | 25.27 |
|      pool table     | 83.63 | 93.24 |
|        pillow       |  39.3 | 50.64 |
|     screen door     | 24.84 |  31.4 |
|       stairway      | 19.22 | 25.65 |
|        river        |  0.0  |  0.0  |
|        bridge       | 22.34 | 34.82 |
|       bookcase      | 19.21 | 25.44 |
|        blind        | 16.86 | 20.57 |
|     coffee table    | 45.28 | 55.66 |
|        toilet       | 60.63 | 68.03 |
|        flower       | 18.02 | 20.64 |
|         book        | 19.62 | 24.42 |
|         hill        |  4.64 | 22.43 |
|        bench        | 17.69 | 26.75 |
|      countertop     | 42.44 | 53.41 |
|        stove        | 53.06 | 59.83 |
|         palm        | 15.69 | 51.23 |
|    kitchen island   | 32.44 | 55.92 |
|       computer      | 38.21 | 42.08 |
|     swivel chair    | 16.64 | 21.98 |
|         boat        | 21.38 | 23.54 |
|         bar         |  7.76 | 10.23 |
|    arcade machine   | 13.32 | 29.67 |
|        hovel        | 27.49 | 31.85 |
|         bus         | 58.05 | 82.23 |
|        towel        | 21.67 | 30.59 |
|        light        | 27.68 | 44.92 |
|        truck        | 10.44 | 29.82 |
|        tower        | 35.74 | 63.29 |
|      chandelier     | 18.96 | 19.76 |
|        awning       | 10.64 | 11.32 |
|     streetlight     |  4.79 |  5.42 |
|        booth        | 13.44 | 14.48 |
| television receiver | 37.91 | 52.57 |
|       airplane      |  35.8 | 62.46 |
|      dirt track     |  0.74 |  4.78 |
|       apparel       |  3.29 |  4.51 |
|         pole        |  7.93 | 10.04 |
|         land        |  1.92 |  2.64 |
|      bannister      |  4.73 |  6.14 |
|      escalator      | 25.62 | 49.71 |
|       ottoman       | 17.02 | 27.76 |
|        bottle       |  2.74 |  2.82 |
|        buffet       |  0.02 |  0.02 |
|        poster       |  12.5 |  24.5 |
|        stage        |  5.9  | 10.35 |
|         van         | 31.35 |  43.1 |
|         ship        |  5.43 |  5.47 |
|       fountain      | 14.63 | 18.99 |
|    conveyer belt    | 18.85 | 59.92 |
|        canopy       |  2.27 |  2.28 |
|        washer       | 66.73 | 73.32 |
|      plaything      |  9.2  | 22.93 |
|    swimming pool    | 24.86 | 53.53 |
|        stool        | 25.11 | 38.73 |
|        barrel       |  0.0  |  0.0  |
|        basket       | 14.67 | 18.27 |
|      waterfall      | 46.57 | 69.17 |
|         tent        | 79.11 | 99.44 |
|         bag         |  6.75 |  12.2 |
|       minibike      |  52.1 | 62.54 |
|        cradle       | 49.59 | 63.64 |
|         oven        | 12.27 | 15.54 |
|         ball        | 15.16 | 44.86 |
|         food        |  0.68 |  0.69 |
|         step        |  4.0  |  7.15 |
|         tank        | 16.87 | 18.41 |
|      trade name     | 15.57 | 16.82 |
|      microwave      | 27.45 | 29.69 |
|         pot         | 12.12 | 12.93 |
|        animal       | 46.34 | 62.19 |
|       bicycle       | 13.16 | 21.44 |
|         lake        |  0.0  |  0.0  |
|      dishwasher     | 32.58 | 36.71 |
|        screen       | 54.22 | 78.04 |
|       blanket       |  4.68 |  5.21 |
|      sculpture      |  7.98 | 10.15 |
|         hood        | 33.15 | 42.97 |
|        sconce       | 21.95 | 27.85 |
|         vase        | 16.22 |  22.4 |
|    traffic light    | 12.49 | 14.21 |
|         tray        |  8.36 | 11.47 |
|        ashcan       | 22.54 | 27.34 |
|         fan         | 32.16 | 51.28 |
|         pier        | 10.33 | 11.53 |
|      crt screen     |  2.05 |  2.45 |
|        plate        | 16.63 | 19.15 |
|       monitor       | 37.26 | 57.13 |
|    bulletin board   | 14.34 | 14.39 |
|        shower       |  2.77 |  8.42 |
|       radiator      | 25.77 | 43.22 |
|        glass        |  1.11 |  1.19 |
|        clock        |  7.49 |  8.22 |
|         flag        | 15.71 | 18.61 |
+---------------------+-------+-------+
09/21 05:52:35 - mmengine - INFO - Iter(test) [2000/2000]    aAcc: 67.4100  mIoU: 26.2200  mAcc: 36.1900  data_time: 0.0017  time: 0.7231
Finished processing corruption type: zoom_blur
Processing corruption type: snow
09/21 05:52:39 - mmengine - INFO - 
------------------------------------------------------------
System environment:
    sys.platform: linux
    Python: 3.10.13 | packaged by conda-forge | (main, Dec 23 2023, 15:36:39) [GCC 12.3.0]
    CUDA available: True
    MUSA available: False
    numpy_random_seed: 226871448
    GPU 0: Tesla V100-SXM2-32GB
    CUDA_HOME: /opt/bwhpc/common/devel/cuda/11.7
    NVCC: Cuda compilation tools, release 11.7, V11.7.99
    GCC: gcc (GCC) 8.5.0 20210514 (Red Hat 8.5.0-18)
    PyTorch: 1.13.1
    PyTorch compiling details: PyTorch built with:
  - GCC 9.3
  - C++ Version: 201402
  - Intel(R) oneAPI Math Kernel Library Version 2023.1-Product Build 20230303 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v2.6.0 (Git Hash 52b5f107dd9cf10910aaa19cb47f3abf9b349815)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - LAPACK is enabled (usually provided by MKL)
  - NNPACK is enabled
  - CPU capability usage: AVX2
  - CUDA Runtime 11.7
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_61,code=sm_61;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86;-gencode;arch=compute_37,code=compute_37
  - CuDNN 8.5
  - Magma 2.6.1
  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.7, CUDNN_VERSION=8.5.0, CXX_COMPILER=/opt/rh/devtoolset-9/root/usr/bin/c++, CXX_FLAGS= -fabi-version=11 -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -DEDGE_PROFILER_USE_KINETO -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Werror=non-virtual-dtor -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wunused-local-typedefs -Wno-unused-parameter -Wno-unused-function -Wno-unused-result -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Werror=cast-function-type -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.13.1, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, USE_ROCM=OFF, 

    TorchVision: 0.14.1
    OpenCV: 3.4.18
    MMEngine: 0.10.4

Runtime environment:
    cudnn_benchmark: True
    mp_cfg: {'mp_start_method': 'fork', 'opencv_num_threads': 0}
    dist_cfg: {'backend': 'nccl'}
    seed: 226871448
    Distributed launcher: none
    Distributed training: False
    GPU number: 1
------------------------------------------------------------

09/21 05:52:40 - mmengine - INFO - Config:
auto_scale_lr = dict(base_batch_size=16, enable=False)
backbone_embed_multi = dict(decay_mult=0.0, lr_mult=0.1)
backbone_norm_multi = dict(decay_mult=0.0, lr_mult=0.1)
crop_size = (
    512,
    512,
)
custom_imports = dict(allow_failed_imports=False, imports='mmdet.models')
custom_keys = dict({
    'absolute_pos_embed':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone':
    dict(decay_mult=1.0, lr_mult=0.1),
    'backbone.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.patch_embed.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.0.blocks.0.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.0.blocks.1.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.0.downsample.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.1.blocks.0.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.1.blocks.1.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.1.downsample.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.0.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.1.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.10.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.11.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.12.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.13.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.14.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.15.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.16.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.17.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.2.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.3.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.4.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.5.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.6.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.7.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.8.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.9.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.downsample.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.3.blocks.0.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.3.blocks.1.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'level_embed':
    dict(decay_mult=0.0, lr_mult=1.0),
    'query_embed':
    dict(decay_mult=0.0, lr_mult=1.0),
    'query_feat':
    dict(decay_mult=0.0, lr_mult=1.0),
    'relative_position_bias_table':
    dict(decay_mult=0.0, lr_mult=0.1)
})
data_root = 'data/ade/ADEChallengeData2016'
dataset_type = 'ADE20KDataset'
default_hooks = dict(
    checkpoint=dict(
        by_epoch=False, interval=5000, save_best='mIoU',
        type='CheckpointHook'),
    logger=dict(interval=50, log_metric_by_epoch=False, type='LoggerHook'),
    param_scheduler=dict(type='ParamSchedulerHook'),
    sampler_seed=dict(type='DistSamplerSeedHook'),
    timer=dict(type='IterTimerHook'),
    visualization=dict(type='SegVisualizationHook'))
default_scope = 'mmseg'
depths = [
    2,
    2,
    18,
    2,
]
embed_multi = dict(decay_mult=0.0, lr_mult=1.0)
env_cfg = dict(
    cudnn_benchmark=True,
    dist_cfg=dict(backend='nccl'),
    mp_cfg=dict(mp_start_method='fork', opencv_num_threads=0))
img_ratios = [
    0.5,
    0.75,
    1.0,
    1.25,
    1.5,
    1.75,
]
launcher = 'none'
load_from = '../checkpoint_files/ade20k/mask2former/mask2former_swin-s_8xb2-160k_ade20k-512x512_20221204_143905-e715144e.pth'
log_level = 'INFO'
log_processor = dict(by_epoch=False)
model = dict(
    backbone=dict(
        attn_drop_rate=0.0,
        depths=[
            2,
            2,
            18,
            2,
        ],
        drop_path_rate=0.3,
        drop_rate=0.0,
        embed_dims=96,
        frozen_stages=-1,
        init_cfg=dict(
            checkpoint=
            'https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/swin/swin_small_patch4_window7_224_20220317-7ba6d6dd.pth',
            type='Pretrained'),
        mlp_ratio=4,
        num_heads=[
            3,
            6,
            12,
            24,
        ],
        out_indices=(
            0,
            1,
            2,
            3,
        ),
        patch_norm=True,
        qk_scale=None,
        qkv_bias=True,
        type='SwinTransformer',
        window_size=7,
        with_cp=False),
    data_preprocessor=dict(
        bgr_to_rgb=True,
        corruption='snow',
        mean=[
            123.675,
            116.28,
            103.53,
        ],
        pad_val=0,
        seg_pad_val=255,
        size=(
            512,
            512,
        ),
        std=[
            58.395,
            57.12,
            57.375,
        ],
        test_cfg=dict(size_divisor=32),
        type='SegDataPreProcessor'),
    decode_head=dict(
        align_corners=False,
        enforce_decoder_input_project=False,
        feat_channels=256,
        in_channels=[
            96,
            192,
            384,
            768,
        ],
        loss_cls=dict(
            class_weight=[
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                0.1,
            ],
            loss_weight=2.0,
            reduction='mean',
            type='mmdet.CrossEntropyLoss',
            use_sigmoid=False),
        loss_dice=dict(
            activate=True,
            eps=1.0,
            loss_weight=5.0,
            naive_dice=True,
            reduction='mean',
            type='mmdet.DiceLoss',
            use_sigmoid=True),
        loss_mask=dict(
            loss_weight=5.0,
            reduction='mean',
            type='mmdet.CrossEntropyLoss',
            use_sigmoid=True),
        num_classes=150,
        num_queries=100,
        num_transformer_feat_level=3,
        out_channels=256,
        pixel_decoder=dict(
            act_cfg=dict(type='ReLU'),
            encoder=dict(
                init_cfg=None,
                layer_cfg=dict(
                    ffn_cfg=dict(
                        act_cfg=dict(inplace=True, type='ReLU'),
                        embed_dims=256,
                        feedforward_channels=1024,
                        ffn_drop=0.0,
                        num_fcs=2),
                    self_attn_cfg=dict(
                        batch_first=True,
                        dropout=0.0,
                        embed_dims=256,
                        im2col_step=64,
                        init_cfg=None,
                        norm_cfg=None,
                        num_heads=8,
                        num_levels=3,
                        num_points=4)),
                num_layers=6),
            init_cfg=None,
            norm_cfg=dict(num_groups=32, type='GN'),
            num_outs=3,
            positional_encoding=dict(normalize=True, num_feats=128),
            type='mmdet.MSDeformAttnPixelDecoder'),
        positional_encoding=dict(normalize=True, num_feats=128),
        strides=[
            4,
            8,
            16,
            32,
        ],
        train_cfg=dict(
            assigner=dict(
                match_costs=[
                    dict(type='mmdet.ClassificationCost', weight=2.0),
                    dict(
                        type='mmdet.CrossEntropyLossCost',
                        use_sigmoid=True,
                        weight=5.0),
                    dict(
                        eps=1.0,
                        pred_act=True,
                        type='mmdet.DiceCost',
                        weight=5.0),
                ],
                type='mmdet.HungarianAssigner'),
            importance_sample_ratio=0.75,
            num_points=12544,
            oversample_ratio=3.0,
            sampler=dict(type='mmdet.MaskPseudoSampler')),
        transformer_decoder=dict(
            init_cfg=None,
            layer_cfg=dict(
                cross_attn_cfg=dict(
                    attn_drop=0.0,
                    batch_first=True,
                    dropout_layer=None,
                    embed_dims=256,
                    num_heads=8,
                    proj_drop=0.0),
                ffn_cfg=dict(
                    act_cfg=dict(inplace=True, type='ReLU'),
                    add_identity=True,
                    dropout_layer=None,
                    embed_dims=256,
                    feedforward_channels=2048,
                    ffn_drop=0.0,
                    num_fcs=2),
                self_attn_cfg=dict(
                    attn_drop=0.0,
                    batch_first=True,
                    dropout_layer=None,
                    embed_dims=256,
                    num_heads=8,
                    proj_drop=0.0)),
            num_layers=9,
            return_intermediate=True),
        type='Mask2FormerHead'),
    test_cfg=dict(mode='whole'),
    train_cfg=dict(),
    type='EncoderDecoder')
num_classes = 150
optim_wrapper = dict(
    clip_grad=dict(max_norm=0.01, norm_type=2),
    optimizer=dict(
        betas=(
            0.9,
            0.999,
        ),
        eps=1e-08,
        lr=0.0001,
        type='AdamW',
        weight_decay=0.05),
    paramwise_cfg=dict(
        custom_keys=dict({
            'absolute_pos_embed':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone':
            dict(decay_mult=1.0, lr_mult=0.1),
            'backbone.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.patch_embed.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.0.blocks.0.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.0.blocks.1.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.0.downsample.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.1.blocks.0.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.1.blocks.1.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.1.downsample.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.0.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.1.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.10.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.11.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.12.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.13.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.14.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.15.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.16.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.17.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.2.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.3.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.4.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.5.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.6.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.7.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.8.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.9.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.downsample.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.3.blocks.0.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.3.blocks.1.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'level_embed':
            dict(decay_mult=0.0, lr_mult=1.0),
            'query_embed':
            dict(decay_mult=0.0, lr_mult=1.0),
            'query_feat':
            dict(decay_mult=0.0, lr_mult=1.0),
            'relative_position_bias_table':
            dict(decay_mult=0.0, lr_mult=0.1)
        }),
        norm_decay_mult=0.0),
    type='OptimWrapper')
optimizer = dict(
    betas=(
        0.9,
        0.999,
    ),
    eps=1e-08,
    lr=0.0001,
    type='AdamW',
    weight_decay=0.05)
param_scheduler = [
    dict(
        begin=0,
        by_epoch=False,
        end=160000,
        eta_min=0,
        power=0.9,
        type='PolyLR'),
]
pretrained = 'https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/swin/swin_small_patch4_window7_224_20220317-7ba6d6dd.pth'
resume = False
test_cfg = dict(type='TestLoop')
test_dataloader = dict(
    batch_size=1,
    dataset=dict(
        data_prefix=dict(
            img_path='images/validation',
            seg_map_path='annotations/validation'),
        data_root='data/ade/ADEChallengeData2016',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(keep_ratio=True, scale=(
                2048,
                512,
            ), type='Resize'),
            dict(reduce_zero_label=True, type='LoadAnnotations'),
            dict(type='PackSegInputs'),
        ],
        type='ADE20KDataset'),
    num_workers=4,
    persistent_workers=True,
    sampler=dict(shuffle=False, type='DefaultSampler'))
test_evaluator = dict(
    iou_metrics=[
        'mIoU',
    ], type='IoUMetric')
test_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(keep_ratio=True, scale=(
        2048,
        512,
    ), type='Resize'),
    dict(reduce_zero_label=True, type='LoadAnnotations'),
    dict(type='PackSegInputs'),
]
train_cfg = dict(
    max_iters=160000, type='IterBasedTrainLoop', val_interval=5000)
train_dataloader = dict(
    batch_size=2,
    dataset=dict(
        data_prefix=dict(
            img_path='images/training', seg_map_path='annotations/training'),
        data_root='data/ade/ADEChallengeData2016',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(reduce_zero_label=True, type='LoadAnnotations'),
            dict(
                max_size=2048,
                resize_type='ResizeShortestEdge',
                scales=[
                    256,
                    307,
                    358,
                    409,
                    460,
                    512,
                    563,
                    614,
                    665,
                    716,
                    768,
                    819,
                    870,
                    921,
                    972,
                    1024,
                ],
                type='RandomChoiceResize'),
            dict(
                cat_max_ratio=0.75, crop_size=(
                    512,
                    512,
                ), type='RandomCrop'),
            dict(prob=0.5, type='RandomFlip'),
            dict(type='PhotoMetricDistortion'),
            dict(type='PackSegInputs'),
        ],
        type='ADE20KDataset'),
    num_workers=4,
    persistent_workers=True,
    sampler=dict(shuffle=True, type='InfiniteSampler'))
train_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(reduce_zero_label=True, type='LoadAnnotations'),
    dict(
        max_size=2048,
        resize_type='ResizeShortestEdge',
        scales=[
            256,
            307,
            358,
            409,
            460,
            512,
            563,
            614,
            665,
            716,
            768,
            819,
            870,
            921,
            972,
            1024,
        ],
        type='RandomChoiceResize'),
    dict(cat_max_ratio=0.75, crop_size=(
        512,
        512,
    ), type='RandomCrop'),
    dict(prob=0.5, type='RandomFlip'),
    dict(type='PhotoMetricDistortion'),
    dict(type='PackSegInputs'),
]
tta_model = dict(type='SegTTAModel')
tta_pipeline = [
    dict(backend_args=None, type='LoadImageFromFile'),
    dict(
        transforms=[
            [
                dict(keep_ratio=True, scale_factor=0.5, type='Resize'),
                dict(keep_ratio=True, scale_factor=0.75, type='Resize'),
                dict(keep_ratio=True, scale_factor=1.0, type='Resize'),
                dict(keep_ratio=True, scale_factor=1.25, type='Resize'),
                dict(keep_ratio=True, scale_factor=1.5, type='Resize'),
                dict(keep_ratio=True, scale_factor=1.75, type='Resize'),
            ],
            [
                dict(direction='horizontal', prob=0.0, type='RandomFlip'),
                dict(direction='horizontal', prob=1.0, type='RandomFlip'),
            ],
            [
                dict(type='LoadAnnotations'),
            ],
            [
                dict(type='PackSegInputs'),
            ],
        ],
        type='TestTimeAug'),
]
val_cfg = dict(type='ValLoop')
val_dataloader = dict(
    batch_size=1,
    dataset=dict(
        data_prefix=dict(
            img_path='images/validation',
            seg_map_path='annotations/validation'),
        data_root='data/ade/ADEChallengeData2016',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(keep_ratio=True, scale=(
                2048,
                512,
            ), type='Resize'),
            dict(reduce_zero_label=True, type='LoadAnnotations'),
            dict(type='PackSegInputs'),
        ],
        type='ADE20KDataset'),
    num_workers=4,
    persistent_workers=True,
    sampler=dict(shuffle=False, type='DefaultSampler'))
val_evaluator = dict(
    iou_metrics=[
        'mIoU',
    ], type='IoUMetric')
vis_backends = [
    dict(type='LocalVisBackend'),
]
visualizer = dict(
    name='visualizer',
    type='SegLocalVisualizer',
    vis_backends=[
        dict(type='LocalVisBackend'),
    ])
work_dir = '../corruptions/work_dirs/ade20k/mask2former/mask2former_swin-s_8xb2-160k_ade20k-512x512/snow'

09/21 05:52:43 - mmengine - INFO - Distributed training is not used, all SyncBatchNorm (SyncBN) layers in the model will be automatically reverted to BatchNormXd layers if they are used.
09/21 05:52:43 - mmengine - INFO - Hooks will be executed in the following order:
before_run:
(VERY_HIGH   ) RuntimeInfoHook                    
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
before_train:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_train_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(NORMAL      ) DistSamplerSeedHook                
 -------------------- 
before_train_iter:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_train_iter:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(NORMAL      ) SegVisualizationHook               
(BELOW_NORMAL) LoggerHook                         
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
after_train_epoch:
(NORMAL      ) IterTimerHook                      
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_val:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
before_val_epoch:
(NORMAL      ) IterTimerHook                      
 -------------------- 
before_val_iter:
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_val_iter:
(NORMAL      ) IterTimerHook                      
(NORMAL      ) SegVisualizationHook               
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_val_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
after_val:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
after_train:
(VERY_HIGH   ) RuntimeInfoHook                    
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_test:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
before_test_epoch:
(NORMAL      ) IterTimerHook                      
 -------------------- 
before_test_iter:
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_test_iter:
(NORMAL      ) IterTimerHook                      
(NORMAL      ) SegVisualizationHook               
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_test_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_test:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
after_run:
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
09/21 05:52:44 - mmengine - WARNING - The prefix is not set in metric class IoUMetric.
Loads checkpoint by local backend from path: ../checkpoint_files/ade20k/mask2former/mask2former_swin-s_8xb2-160k_ade20k-512x512_20221204_143905-e715144e.pth
09/21 05:52:45 - mmengine - INFO - Load checkpoint from ../checkpoint_files/ade20k/mask2former/mask2former_swin-s_8xb2-160k_ade20k-512x512_20221204_143905-e715144e.pth
09/21 05:53:13 - mmengine - INFO - Iter(test) [  50/2000]    eta: 0:18:25  time: 0.4912  data_time: 0.0016  memory: 12814  
09/21 05:53:31 - mmengine - INFO - Iter(test) [ 100/2000]    eta: 0:14:37  time: 0.4083  data_time: 0.0016  memory: 12795  
09/21 05:53:46 - mmengine - INFO - Iter(test) [ 150/2000]    eta: 0:12:37  time: 0.3264  data_time: 0.0016  memory: 935  
09/21 05:54:04 - mmengine - INFO - Iter(test) [ 200/2000]    eta: 0:11:56  time: 0.3223  data_time: 0.0015  memory: 12835  
09/21 05:54:21 - mmengine - INFO - Iter(test) [ 250/2000]    eta: 0:11:17  time: 0.3009  data_time: 0.0014  memory: 12838  
09/21 05:54:38 - mmengine - INFO - Iter(test) [ 300/2000]    eta: 0:10:40  time: 0.2992  data_time: 0.0015  memory: 12803  
09/21 05:54:55 - mmengine - INFO - Iter(test) [ 350/2000]    eta: 0:10:13  time: 0.2856  data_time: 0.0014  memory: 12810  
09/21 05:55:11 - mmengine - INFO - Iter(test) [ 400/2000]    eta: 0:09:46  time: 0.3293  data_time: 0.0014  memory: 12775  
09/21 05:55:26 - mmengine - INFO - Iter(test) [ 450/2000]    eta: 0:09:14  time: 0.3130  data_time: 0.0015  memory: 975  
09/21 05:55:41 - mmengine - INFO - Iter(test) [ 500/2000]    eta: 0:08:49  time: 0.2942  data_time: 0.0014  memory: 935  
09/21 05:55:58 - mmengine - INFO - Iter(test) [ 550/2000]    eta: 0:08:28  time: 0.3134  data_time: 0.0015  memory: 1042  
09/21 05:56:14 - mmengine - INFO - Iter(test) [ 600/2000]    eta: 0:08:07  time: 0.3198  data_time: 0.0016  memory: 1040  
09/21 05:56:30 - mmengine - INFO - Iter(test) [ 650/2000]    eta: 0:07:48  time: 0.4226  data_time: 0.0014  memory: 12816  
09/21 05:56:47 - mmengine - INFO - Iter(test) [ 700/2000]    eta: 0:07:30  time: 0.3405  data_time: 0.0016  memory: 12806  
09/21 05:57:03 - mmengine - INFO - Iter(test) [ 750/2000]    eta: 0:07:11  time: 0.3445  data_time: 0.0015  memory: 1096  
09/21 05:57:18 - mmengine - INFO - Iter(test) [ 800/2000]    eta: 0:06:50  time: 0.2985  data_time: 0.0016  memory: 935  
09/21 05:57:34 - mmengine - INFO - Iter(test) [ 850/2000]    eta: 0:06:31  time: 0.3076  data_time: 0.0016  memory: 908  
09/21 05:57:49 - mmengine - INFO - Iter(test) [ 900/2000]    eta: 0:06:11  time: 0.2933  data_time: 0.0014  memory: 987  
09/21 05:58:04 - mmengine - INFO - Iter(test) [ 950/2000]    eta: 0:05:53  time: 0.3134  data_time: 0.0015  memory: 1015  
09/21 05:58:19 - mmengine - INFO - Iter(test) [1000/2000]    eta: 0:05:34  time: 0.2894  data_time: 0.0015  memory: 1015  
09/21 05:58:36 - mmengine - INFO - Iter(test) [1050/2000]    eta: 0:05:17  time: 0.3077  data_time: 0.0014  memory: 12819  
09/21 05:58:52 - mmengine - INFO - Iter(test) [1100/2000]    eta: 0:05:00  time: 0.3082  data_time: 0.0015  memory: 1012  
09/21 05:59:07 - mmengine - INFO - Iter(test) [1150/2000]    eta: 0:04:42  time: 0.3280  data_time: 0.0015  memory: 985  
09/21 05:59:22 - mmengine - INFO - Iter(test) [1200/2000]    eta: 0:04:25  time: 0.3085  data_time: 0.0015  memory: 1921  
09/21 05:59:38 - mmengine - INFO - Iter(test) [1250/2000]    eta: 0:04:07  time: 0.2889  data_time: 0.0014  memory: 12797  
09/21 05:59:53 - mmengine - INFO - Iter(test) [1300/2000]    eta: 0:03:50  time: 0.3032  data_time: 0.0015  memory: 935  
09/21 06:00:08 - mmengine - INFO - Iter(test) [1350/2000]    eta: 0:03:33  time: 0.3056  data_time: 0.0014  memory: 935  
09/21 06:00:24 - mmengine - INFO - Iter(test) [1400/2000]    eta: 0:03:16  time: 0.3349  data_time: 0.0015  memory: 1012  
09/21 06:00:39 - mmengine - INFO - Iter(test) [1450/2000]    eta: 0:02:59  time: 0.3094  data_time: 0.0014  memory: 1015  
09/21 06:00:54 - mmengine - INFO - Iter(test) [1500/2000]    eta: 0:02:43  time: 0.2782  data_time: 0.0014  memory: 933  
09/21 06:01:10 - mmengine - INFO - Iter(test) [1550/2000]    eta: 0:02:26  time: 0.3240  data_time: 0.0015  memory: 1015  
09/21 06:01:25 - mmengine - INFO - Iter(test) [1600/2000]    eta: 0:02:10  time: 0.3239  data_time: 0.0016  memory: 908  
09/21 06:01:41 - mmengine - INFO - Iter(test) [1650/2000]    eta: 0:01:53  time: 0.2773  data_time: 0.0014  memory: 12807  
09/21 06:01:57 - mmengine - INFO - Iter(test) [1700/2000]    eta: 0:01:37  time: 0.2965  data_time: 0.0015  memory: 1012  
09/21 06:02:12 - mmengine - INFO - Iter(test) [1750/2000]    eta: 0:01:21  time: 0.3016  data_time: 0.0014  memory: 1039  
09/21 06:02:27 - mmengine - INFO - Iter(test) [1800/2000]    eta: 0:01:04  time: 0.3292  data_time: 0.0016  memory: 935  
09/21 06:02:42 - mmengine - INFO - Iter(test) [1850/2000]    eta: 0:00:48  time: 0.3094  data_time: 0.0016  memory: 854  
09/21 06:02:57 - mmengine - INFO - Iter(test) [1900/2000]    eta: 0:00:32  time: 0.2875  data_time: 0.0014  memory: 1068  
09/21 06:03:13 - mmengine - INFO - Iter(test) [1950/2000]    eta: 0:00:16  time: 0.2971  data_time: 0.0014  memory: 1306  
09/21 06:03:28 - mmengine - INFO - Iter(test) [2000/2000]    eta: 0:00:00  time: 0.2925  data_time: 0.0014  memory: 1094  
09/21 06:03:28 - mmengine - INFO - per class results:
09/21 06:03:28 - mmengine - INFO - 
+---------------------+-------+-------+
|        Class        |  IoU  |  Acc  |
+---------------------+-------+-------+
|         wall        | 70.19 | 88.68 |
|       building      | 77.96 | 92.09 |
|         sky         | 93.32 | 96.23 |
|        floor        | 73.31 | 90.76 |
|         tree        | 71.27 | 83.63 |
|       ceiling       | 74.42 | 80.83 |
|         road        | 75.46 | 81.32 |
|         bed         | 84.11 | 92.43 |
|      windowpane     | 55.11 | 71.36 |
|        grass        | 61.62 | 70.15 |
|       cabinet       | 52.31 | 68.01 |
|       sidewalk      | 57.76 | 74.04 |
|        person       | 79.77 | 87.43 |
|        earth        | 34.71 | 52.12 |
|         door        | 24.33 | 29.21 |
|        table        |  55.0 | 68.95 |
|       mountain      | 50.43 | 62.74 |
|        plant        | 46.52 | 57.25 |
|       curtain       | 65.15 | 75.94 |
|        chair        | 51.28 | 64.46 |
|         car         |  82.8 |  89.8 |
|        water        | 43.64 | 68.36 |
|       painting      | 66.59 | 77.06 |
|         sofa        | 59.04 | 71.69 |
|        shelf        |  35.4 |  61.4 |
|        house        | 18.36 | 19.56 |
|         sea         | 56.32 | 62.96 |
|        mirror       | 53.03 | 71.57 |
|         rug         | 36.71 | 39.06 |
|        field        | 26.56 | 66.99 |
|       armchair      |  37.8 |  53.5 |
|         seat        | 40.74 | 64.22 |
|        fence        | 32.84 | 62.94 |
|         desk        | 47.46 | 63.38 |
|         rock        | 35.13 | 47.21 |
|       wardrobe      | 40.17 | 57.89 |
|         lamp        | 61.04 | 69.73 |
|       bathtub       | 63.24 | 79.11 |
|       railing       | 33.01 | 41.19 |
|       cushion       | 49.66 | 58.31 |
|         base        | 13.57 | 23.98 |
|         box         | 17.33 | 24.69 |
|        column       | 32.26 | 35.18 |
|      signboard      | 34.34 | 47.31 |
|   chest of drawers  |  34.6 | 51.43 |
|       counter       | 26.28 | 39.56 |
|         sand        | 28.63 | 41.69 |
|         sink        | 61.23 | 77.03 |
|      skyscraper     |  32.7 | 41.38 |
|      fireplace      | 66.25 | 75.44 |
|     refrigerator    | 59.25 | 70.19 |
|      grandstand     | 19.15 | 83.81 |
|         path        | 22.65 | 25.87 |
|        stairs       | 23.88 | 28.59 |
|        runway       |  38.3 | 51.66 |
|         case        | 42.13 |  47.8 |
|      pool table     | 91.46 | 95.33 |
|        pillow       | 49.34 | 57.57 |
|     screen door     | 50.89 | 61.09 |
|       stairway      | 24.47 | 35.42 |
|        river        |  8.24 |  9.03 |
|        bridge       |  28.6 | 31.45 |
|       bookcase      | 32.36 | 46.99 |
|        blind        | 25.48 | 28.63 |
|     coffee table    | 62.91 | 75.14 |
|        toilet       | 81.15 | 84.76 |
|        flower       | 40.92 | 57.62 |
|         book        | 45.67 | 55.91 |
|         hill        |  7.57 | 10.75 |
|        bench        | 37.62 | 45.43 |
|      countertop     | 61.11 | 83.38 |
|        stove        | 66.59 | 75.45 |
|         palm        |  47.9 | 65.76 |
|    kitchen island   | 29.42 | 56.06 |
|       computer      | 52.55 | 56.41 |
|     swivel chair    | 39.98 | 47.23 |
|         boat        | 44.35 | 52.88 |
|         bar         | 27.12 | 36.94 |
|    arcade machine   | 19.05 | 20.29 |
|        hovel        | 37.99 | 46.91 |
|         bus         | 83.19 | 95.14 |
|        towel        | 47.59 | 56.98 |
|        light        | 46.58 | 58.86 |
|        truck        | 35.39 | 54.46 |
|        tower        | 26.95 | 35.75 |
|      chandelier     | 59.61 | 66.94 |
|        awning       | 31.03 | 33.91 |
|     streetlight     | 29.44 | 35.97 |
|        booth        | 27.18 | 29.49 |
| television receiver | 44.82 | 61.14 |
|       airplane      | 52.51 | 63.73 |
|      dirt track     |  0.73 |  1.1  |
|       apparel       | 31.86 | 40.17 |
|         pole        | 27.47 | 40.35 |
|         land        |  2.78 |  3.22 |
|      bannister      | 13.45 | 15.32 |
|      escalator      | 17.64 | 18.53 |
|       ottoman       | 42.18 | 57.51 |
|        bottle       | 17.41 | 21.37 |
|        buffet       | 38.46 | 40.13 |
|        poster       | 20.03 | 24.87 |
|        stage        |  8.79 | 14.49 |
|         van         |  42.4 | 65.85 |
|         ship        |  4.63 |  6.74 |
|       fountain      | 32.77 | 49.78 |
|    conveyer belt    | 48.17 | 62.07 |
|        canopy       |  7.79 | 10.03 |
|        washer       | 52.88 | 55.69 |
|      plaything      | 16.39 | 25.49 |
|    swimming pool    | 21.81 | 72.99 |
|        stool        | 37.51 | 49.35 |
|        barrel       | 24.95 | 50.05 |
|        basket       | 30.61 | 38.55 |
|      waterfall      | 38.36 | 41.04 |
|         tent        | 84.12 | 97.61 |
|         bag         | 10.39 | 12.96 |
|       minibike      | 66.58 | 79.73 |
|        cradle       | 65.85 | 94.29 |
|         oven        | 41.09 |  53.4 |
|         ball        | 33.36 | 64.34 |
|         food        | 53.43 | 63.38 |
|         step        |  8.58 | 12.15 |
|         tank        | 28.22 | 29.24 |
|      trade name     | 26.36 | 30.51 |
|      microwave      | 30.69 |  32.0 |
|         pot         | 44.32 | 51.61 |
|        animal       | 59.94 | 71.78 |
|       bicycle       | 56.56 | 78.15 |
|         lake        |  4.91 |  6.34 |
|      dishwasher     | 52.15 | 59.69 |
|        screen       | 62.79 | 86.33 |
|       blanket       |  8.69 |  9.86 |
|      sculpture      |  34.5 | 50.97 |
|         hood        | 43.67 | 47.14 |
|        sconce       | 39.66 | 53.61 |
|         vase        | 39.71 |  57.5 |
|    traffic light    | 36.95 | 51.09 |
|         tray        | 13.63 | 17.15 |
|        ashcan       | 36.23 | 44.42 |
|         fan         | 53.73 | 69.51 |
|         pier        |  32.7 | 41.08 |
|      crt screen     |  3.61 | 11.27 |
|        plate        | 48.99 | 63.54 |
|       monitor       |  3.09 |  3.81 |
|    bulletin board   |  33.5 |  41.2 |
|        shower       |  1.73 | 21.77 |
|       radiator      | 33.19 | 37.71 |
|        glass        | 14.92 | 15.93 |
|        clock        | 28.94 | 36.11 |
|         flag        | 44.54 | 48.37 |
+---------------------+-------+-------+
09/21 06:03:28 - mmengine - INFO - Iter(test) [2000/2000]    aAcc: 78.1000  mIoU: 40.5600  mAcc: 51.7200  data_time: 0.0017  time: 0.3213
Finished processing corruption type: snow
Processing corruption type: frost
09/21 06:03:32 - mmengine - INFO - 
------------------------------------------------------------
System environment:
    sys.platform: linux
    Python: 3.10.13 | packaged by conda-forge | (main, Dec 23 2023, 15:36:39) [GCC 12.3.0]
    CUDA available: True
    MUSA available: False
    numpy_random_seed: 1103828285
    GPU 0: Tesla V100-SXM2-32GB
    CUDA_HOME: /opt/bwhpc/common/devel/cuda/11.7
    NVCC: Cuda compilation tools, release 11.7, V11.7.99
    GCC: gcc (GCC) 8.5.0 20210514 (Red Hat 8.5.0-18)
    PyTorch: 1.13.1
    PyTorch compiling details: PyTorch built with:
  - GCC 9.3
  - C++ Version: 201402
  - Intel(R) oneAPI Math Kernel Library Version 2023.1-Product Build 20230303 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v2.6.0 (Git Hash 52b5f107dd9cf10910aaa19cb47f3abf9b349815)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - LAPACK is enabled (usually provided by MKL)
  - NNPACK is enabled
  - CPU capability usage: AVX2
  - CUDA Runtime 11.7
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_61,code=sm_61;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86;-gencode;arch=compute_37,code=compute_37
  - CuDNN 8.5
  - Magma 2.6.1
  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.7, CUDNN_VERSION=8.5.0, CXX_COMPILER=/opt/rh/devtoolset-9/root/usr/bin/c++, CXX_FLAGS= -fabi-version=11 -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -DEDGE_PROFILER_USE_KINETO -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Werror=non-virtual-dtor -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wunused-local-typedefs -Wno-unused-parameter -Wno-unused-function -Wno-unused-result -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Werror=cast-function-type -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.13.1, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, USE_ROCM=OFF, 

    TorchVision: 0.14.1
    OpenCV: 3.4.18
    MMEngine: 0.10.4

Runtime environment:
    cudnn_benchmark: True
    mp_cfg: {'mp_start_method': 'fork', 'opencv_num_threads': 0}
    dist_cfg: {'backend': 'nccl'}
    seed: 1103828285
    Distributed launcher: none
    Distributed training: False
    GPU number: 1
------------------------------------------------------------

09/21 06:03:33 - mmengine - INFO - Config:
auto_scale_lr = dict(base_batch_size=16, enable=False)
backbone_embed_multi = dict(decay_mult=0.0, lr_mult=0.1)
backbone_norm_multi = dict(decay_mult=0.0, lr_mult=0.1)
crop_size = (
    512,
    512,
)
custom_imports = dict(allow_failed_imports=False, imports='mmdet.models')
custom_keys = dict({
    'absolute_pos_embed':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone':
    dict(decay_mult=1.0, lr_mult=0.1),
    'backbone.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.patch_embed.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.0.blocks.0.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.0.blocks.1.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.0.downsample.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.1.blocks.0.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.1.blocks.1.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.1.downsample.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.0.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.1.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.10.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.11.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.12.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.13.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.14.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.15.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.16.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.17.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.2.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.3.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.4.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.5.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.6.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.7.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.8.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.9.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.downsample.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.3.blocks.0.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.3.blocks.1.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'level_embed':
    dict(decay_mult=0.0, lr_mult=1.0),
    'query_embed':
    dict(decay_mult=0.0, lr_mult=1.0),
    'query_feat':
    dict(decay_mult=0.0, lr_mult=1.0),
    'relative_position_bias_table':
    dict(decay_mult=0.0, lr_mult=0.1)
})
data_root = 'data/ade/ADEChallengeData2016'
dataset_type = 'ADE20KDataset'
default_hooks = dict(
    checkpoint=dict(
        by_epoch=False, interval=5000, save_best='mIoU',
        type='CheckpointHook'),
    logger=dict(interval=50, log_metric_by_epoch=False, type='LoggerHook'),
    param_scheduler=dict(type='ParamSchedulerHook'),
    sampler_seed=dict(type='DistSamplerSeedHook'),
    timer=dict(type='IterTimerHook'),
    visualization=dict(type='SegVisualizationHook'))
default_scope = 'mmseg'
depths = [
    2,
    2,
    18,
    2,
]
embed_multi = dict(decay_mult=0.0, lr_mult=1.0)
env_cfg = dict(
    cudnn_benchmark=True,
    dist_cfg=dict(backend='nccl'),
    mp_cfg=dict(mp_start_method='fork', opencv_num_threads=0))
img_ratios = [
    0.5,
    0.75,
    1.0,
    1.25,
    1.5,
    1.75,
]
launcher = 'none'
load_from = '../checkpoint_files/ade20k/mask2former/mask2former_swin-s_8xb2-160k_ade20k-512x512_20221204_143905-e715144e.pth'
log_level = 'INFO'
log_processor = dict(by_epoch=False)
model = dict(
    backbone=dict(
        attn_drop_rate=0.0,
        depths=[
            2,
            2,
            18,
            2,
        ],
        drop_path_rate=0.3,
        drop_rate=0.0,
        embed_dims=96,
        frozen_stages=-1,
        init_cfg=dict(
            checkpoint=
            'https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/swin/swin_small_patch4_window7_224_20220317-7ba6d6dd.pth',
            type='Pretrained'),
        mlp_ratio=4,
        num_heads=[
            3,
            6,
            12,
            24,
        ],
        out_indices=(
            0,
            1,
            2,
            3,
        ),
        patch_norm=True,
        qk_scale=None,
        qkv_bias=True,
        type='SwinTransformer',
        window_size=7,
        with_cp=False),
    data_preprocessor=dict(
        bgr_to_rgb=True,
        corruption='frost',
        mean=[
            123.675,
            116.28,
            103.53,
        ],
        pad_val=0,
        seg_pad_val=255,
        size=(
            512,
            512,
        ),
        std=[
            58.395,
            57.12,
            57.375,
        ],
        test_cfg=dict(size_divisor=32),
        type='SegDataPreProcessor'),
    decode_head=dict(
        align_corners=False,
        enforce_decoder_input_project=False,
        feat_channels=256,
        in_channels=[
            96,
            192,
            384,
            768,
        ],
        loss_cls=dict(
            class_weight=[
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                0.1,
            ],
            loss_weight=2.0,
            reduction='mean',
            type='mmdet.CrossEntropyLoss',
            use_sigmoid=False),
        loss_dice=dict(
            activate=True,
            eps=1.0,
            loss_weight=5.0,
            naive_dice=True,
            reduction='mean',
            type='mmdet.DiceLoss',
            use_sigmoid=True),
        loss_mask=dict(
            loss_weight=5.0,
            reduction='mean',
            type='mmdet.CrossEntropyLoss',
            use_sigmoid=True),
        num_classes=150,
        num_queries=100,
        num_transformer_feat_level=3,
        out_channels=256,
        pixel_decoder=dict(
            act_cfg=dict(type='ReLU'),
            encoder=dict(
                init_cfg=None,
                layer_cfg=dict(
                    ffn_cfg=dict(
                        act_cfg=dict(inplace=True, type='ReLU'),
                        embed_dims=256,
                        feedforward_channels=1024,
                        ffn_drop=0.0,
                        num_fcs=2),
                    self_attn_cfg=dict(
                        batch_first=True,
                        dropout=0.0,
                        embed_dims=256,
                        im2col_step=64,
                        init_cfg=None,
                        norm_cfg=None,
                        num_heads=8,
                        num_levels=3,
                        num_points=4)),
                num_layers=6),
            init_cfg=None,
            norm_cfg=dict(num_groups=32, type='GN'),
            num_outs=3,
            positional_encoding=dict(normalize=True, num_feats=128),
            type='mmdet.MSDeformAttnPixelDecoder'),
        positional_encoding=dict(normalize=True, num_feats=128),
        strides=[
            4,
            8,
            16,
            32,
        ],
        train_cfg=dict(
            assigner=dict(
                match_costs=[
                    dict(type='mmdet.ClassificationCost', weight=2.0),
                    dict(
                        type='mmdet.CrossEntropyLossCost',
                        use_sigmoid=True,
                        weight=5.0),
                    dict(
                        eps=1.0,
                        pred_act=True,
                        type='mmdet.DiceCost',
                        weight=5.0),
                ],
                type='mmdet.HungarianAssigner'),
            importance_sample_ratio=0.75,
            num_points=12544,
            oversample_ratio=3.0,
            sampler=dict(type='mmdet.MaskPseudoSampler')),
        transformer_decoder=dict(
            init_cfg=None,
            layer_cfg=dict(
                cross_attn_cfg=dict(
                    attn_drop=0.0,
                    batch_first=True,
                    dropout_layer=None,
                    embed_dims=256,
                    num_heads=8,
                    proj_drop=0.0),
                ffn_cfg=dict(
                    act_cfg=dict(inplace=True, type='ReLU'),
                    add_identity=True,
                    dropout_layer=None,
                    embed_dims=256,
                    feedforward_channels=2048,
                    ffn_drop=0.0,
                    num_fcs=2),
                self_attn_cfg=dict(
                    attn_drop=0.0,
                    batch_first=True,
                    dropout_layer=None,
                    embed_dims=256,
                    num_heads=8,
                    proj_drop=0.0)),
            num_layers=9,
            return_intermediate=True),
        type='Mask2FormerHead'),
    test_cfg=dict(mode='whole'),
    train_cfg=dict(),
    type='EncoderDecoder')
num_classes = 150
optim_wrapper = dict(
    clip_grad=dict(max_norm=0.01, norm_type=2),
    optimizer=dict(
        betas=(
            0.9,
            0.999,
        ),
        eps=1e-08,
        lr=0.0001,
        type='AdamW',
        weight_decay=0.05),
    paramwise_cfg=dict(
        custom_keys=dict({
            'absolute_pos_embed':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone':
            dict(decay_mult=1.0, lr_mult=0.1),
            'backbone.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.patch_embed.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.0.blocks.0.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.0.blocks.1.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.0.downsample.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.1.blocks.0.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.1.blocks.1.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.1.downsample.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.0.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.1.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.10.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.11.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.12.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.13.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.14.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.15.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.16.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.17.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.2.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.3.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.4.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.5.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.6.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.7.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.8.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.9.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.downsample.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.3.blocks.0.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.3.blocks.1.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'level_embed':
            dict(decay_mult=0.0, lr_mult=1.0),
            'query_embed':
            dict(decay_mult=0.0, lr_mult=1.0),
            'query_feat':
            dict(decay_mult=0.0, lr_mult=1.0),
            'relative_position_bias_table':
            dict(decay_mult=0.0, lr_mult=0.1)
        }),
        norm_decay_mult=0.0),
    type='OptimWrapper')
optimizer = dict(
    betas=(
        0.9,
        0.999,
    ),
    eps=1e-08,
    lr=0.0001,
    type='AdamW',
    weight_decay=0.05)
param_scheduler = [
    dict(
        begin=0,
        by_epoch=False,
        end=160000,
        eta_min=0,
        power=0.9,
        type='PolyLR'),
]
pretrained = 'https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/swin/swin_small_patch4_window7_224_20220317-7ba6d6dd.pth'
resume = False
test_cfg = dict(type='TestLoop')
test_dataloader = dict(
    batch_size=1,
    dataset=dict(
        data_prefix=dict(
            img_path='images/validation',
            seg_map_path='annotations/validation'),
        data_root='data/ade/ADEChallengeData2016',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(keep_ratio=True, scale=(
                2048,
                512,
            ), type='Resize'),
            dict(reduce_zero_label=True, type='LoadAnnotations'),
            dict(type='PackSegInputs'),
        ],
        type='ADE20KDataset'),
    num_workers=4,
    persistent_workers=True,
    sampler=dict(shuffle=False, type='DefaultSampler'))
test_evaluator = dict(
    iou_metrics=[
        'mIoU',
    ], type='IoUMetric')
test_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(keep_ratio=True, scale=(
        2048,
        512,
    ), type='Resize'),
    dict(reduce_zero_label=True, type='LoadAnnotations'),
    dict(type='PackSegInputs'),
]
train_cfg = dict(
    max_iters=160000, type='IterBasedTrainLoop', val_interval=5000)
train_dataloader = dict(
    batch_size=2,
    dataset=dict(
        data_prefix=dict(
            img_path='images/training', seg_map_path='annotations/training'),
        data_root='data/ade/ADEChallengeData2016',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(reduce_zero_label=True, type='LoadAnnotations'),
            dict(
                max_size=2048,
                resize_type='ResizeShortestEdge',
                scales=[
                    256,
                    307,
                    358,
                    409,
                    460,
                    512,
                    563,
                    614,
                    665,
                    716,
                    768,
                    819,
                    870,
                    921,
                    972,
                    1024,
                ],
                type='RandomChoiceResize'),
            dict(
                cat_max_ratio=0.75, crop_size=(
                    512,
                    512,
                ), type='RandomCrop'),
            dict(prob=0.5, type='RandomFlip'),
            dict(type='PhotoMetricDistortion'),
            dict(type='PackSegInputs'),
        ],
        type='ADE20KDataset'),
    num_workers=4,
    persistent_workers=True,
    sampler=dict(shuffle=True, type='InfiniteSampler'))
train_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(reduce_zero_label=True, type='LoadAnnotations'),
    dict(
        max_size=2048,
        resize_type='ResizeShortestEdge',
        scales=[
            256,
            307,
            358,
            409,
            460,
            512,
            563,
            614,
            665,
            716,
            768,
            819,
            870,
            921,
            972,
            1024,
        ],
        type='RandomChoiceResize'),
    dict(cat_max_ratio=0.75, crop_size=(
        512,
        512,
    ), type='RandomCrop'),
    dict(prob=0.5, type='RandomFlip'),
    dict(type='PhotoMetricDistortion'),
    dict(type='PackSegInputs'),
]
tta_model = dict(type='SegTTAModel')
tta_pipeline = [
    dict(backend_args=None, type='LoadImageFromFile'),
    dict(
        transforms=[
            [
                dict(keep_ratio=True, scale_factor=0.5, type='Resize'),
                dict(keep_ratio=True, scale_factor=0.75, type='Resize'),
                dict(keep_ratio=True, scale_factor=1.0, type='Resize'),
                dict(keep_ratio=True, scale_factor=1.25, type='Resize'),
                dict(keep_ratio=True, scale_factor=1.5, type='Resize'),
                dict(keep_ratio=True, scale_factor=1.75, type='Resize'),
            ],
            [
                dict(direction='horizontal', prob=0.0, type='RandomFlip'),
                dict(direction='horizontal', prob=1.0, type='RandomFlip'),
            ],
            [
                dict(type='LoadAnnotations'),
            ],
            [
                dict(type='PackSegInputs'),
            ],
        ],
        type='TestTimeAug'),
]
val_cfg = dict(type='ValLoop')
val_dataloader = dict(
    batch_size=1,
    dataset=dict(
        data_prefix=dict(
            img_path='images/validation',
            seg_map_path='annotations/validation'),
        data_root='data/ade/ADEChallengeData2016',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(keep_ratio=True, scale=(
                2048,
                512,
            ), type='Resize'),
            dict(reduce_zero_label=True, type='LoadAnnotations'),
            dict(type='PackSegInputs'),
        ],
        type='ADE20KDataset'),
    num_workers=4,
    persistent_workers=True,
    sampler=dict(shuffle=False, type='DefaultSampler'))
val_evaluator = dict(
    iou_metrics=[
        'mIoU',
    ], type='IoUMetric')
vis_backends = [
    dict(type='LocalVisBackend'),
]
visualizer = dict(
    name='visualizer',
    type='SegLocalVisualizer',
    vis_backends=[
        dict(type='LocalVisBackend'),
    ])
work_dir = '../corruptions/work_dirs/ade20k/mask2former/mask2former_swin-s_8xb2-160k_ade20k-512x512/frost'

09/21 06:03:36 - mmengine - INFO - Distributed training is not used, all SyncBatchNorm (SyncBN) layers in the model will be automatically reverted to BatchNormXd layers if they are used.
09/21 06:03:36 - mmengine - INFO - Hooks will be executed in the following order:
before_run:
(VERY_HIGH   ) RuntimeInfoHook                    
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
before_train:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_train_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(NORMAL      ) DistSamplerSeedHook                
 -------------------- 
before_train_iter:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_train_iter:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(NORMAL      ) SegVisualizationHook               
(BELOW_NORMAL) LoggerHook                         
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
after_train_epoch:
(NORMAL      ) IterTimerHook                      
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_val:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
before_val_epoch:
(NORMAL      ) IterTimerHook                      
 -------------------- 
before_val_iter:
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_val_iter:
(NORMAL      ) IterTimerHook                      
(NORMAL      ) SegVisualizationHook               
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_val_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
after_val:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
after_train:
(VERY_HIGH   ) RuntimeInfoHook                    
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_test:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
before_test_epoch:
(NORMAL      ) IterTimerHook                      
 -------------------- 
before_test_iter:
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_test_iter:
(NORMAL      ) IterTimerHook                      
(NORMAL      ) SegVisualizationHook               
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_test_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_test:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
after_run:
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
09/21 06:03:37 - mmengine - WARNING - The prefix is not set in metric class IoUMetric.
Loads checkpoint by local backend from path: ../checkpoint_files/ade20k/mask2former/mask2former_swin-s_8xb2-160k_ade20k-512x512_20221204_143905-e715144e.pth
09/21 06:03:38 - mmengine - INFO - Load checkpoint from ../checkpoint_files/ade20k/mask2former/mask2former_swin-s_8xb2-160k_ade20k-512x512_20221204_143905-e715144e.pth
09/21 06:03:55 - mmengine - INFO - Iter(test) [  50/2000]    eta: 0:11:38  time: 0.2447  data_time: 0.0015  memory: 12814  
09/21 06:04:02 - mmengine - INFO - Iter(test) [ 100/2000]    eta: 0:07:50  time: 0.1740  data_time: 0.0016  memory: 12795  
09/21 06:04:07 - mmengine - INFO - Iter(test) [ 150/2000]    eta: 0:06:08  time: 0.1022  data_time: 0.0015  memory: 935  
09/21 06:04:14 - mmengine - INFO - Iter(test) [ 200/2000]    eta: 0:05:28  time: 0.0875  data_time: 0.0015  memory: 12835  
09/21 06:04:20 - mmengine - INFO - Iter(test) [ 250/2000]    eta: 0:04:56  time: 0.0944  data_time: 0.0015  memory: 12838  
09/21 06:04:26 - mmengine - INFO - Iter(test) [ 300/2000]    eta: 0:04:33  time: 0.1027  data_time: 0.0016  memory: 12803  
09/21 06:04:32 - mmengine - INFO - Iter(test) [ 350/2000]    eta: 0:04:18  time: 0.1024  data_time: 0.0014  memory: 12810  
09/21 06:04:37 - mmengine - INFO - Iter(test) [ 400/2000]    eta: 0:03:59  time: 0.0869  data_time: 0.0014  memory: 12775  
09/21 06:04:42 - mmengine - INFO - Iter(test) [ 450/2000]    eta: 0:03:41  time: 0.1029  data_time: 0.0015  memory: 975  
09/21 06:04:47 - mmengine - INFO - Iter(test) [ 500/2000]    eta: 0:03:28  time: 0.0974  data_time: 0.0015  memory: 935  
09/21 06:04:52 - mmengine - INFO - Iter(test) [ 550/2000]    eta: 0:03:16  time: 0.0857  data_time: 0.0015  memory: 1042  
09/21 06:04:56 - mmengine - INFO - Iter(test) [ 600/2000]    eta: 0:03:03  time: 0.0860  data_time: 0.0015  memory: 1040  
09/21 06:05:01 - mmengine - INFO - Iter(test) [ 650/2000]    eta: 0:02:54  time: 0.1712  data_time: 0.0013  memory: 12816  
09/21 06:05:07 - mmengine - INFO - Iter(test) [ 700/2000]    eta: 0:02:46  time: 0.1022  data_time: 0.0017  memory: 12806  
09/21 06:05:12 - mmengine - INFO - Iter(test) [ 750/2000]    eta: 0:02:37  time: 0.0841  data_time: 0.0014  memory: 1096  
09/21 06:05:16 - mmengine - INFO - Iter(test) [ 800/2000]    eta: 0:02:28  time: 0.0868  data_time: 0.0016  memory: 935  
09/21 06:05:21 - mmengine - INFO - Iter(test) [ 850/2000]    eta: 0:02:19  time: 0.0870  data_time: 0.0016  memory: 908  
09/21 06:05:25 - mmengine - INFO - Iter(test) [ 900/2000]    eta: 0:02:11  time: 0.0960  data_time: 0.0014  memory: 987  
09/21 06:05:30 - mmengine - INFO - Iter(test) [ 950/2000]    eta: 0:02:04  time: 0.0976  data_time: 0.0015  memory: 1015  
09/21 06:05:35 - mmengine - INFO - Iter(test) [1000/2000]    eta: 0:01:57  time: 0.0857  data_time: 0.0014  memory: 1015  
09/21 06:05:40 - mmengine - INFO - Iter(test) [1050/2000]    eta: 0:01:50  time: 0.0847  data_time: 0.0014  memory: 12819  
09/21 06:05:45 - mmengine - INFO - Iter(test) [1100/2000]    eta: 0:01:44  time: 0.1000  data_time: 0.0015  memory: 1012  
09/21 06:05:50 - mmengine - INFO - Iter(test) [1150/2000]    eta: 0:01:37  time: 0.0989  data_time: 0.0015  memory: 985  
09/21 06:05:54 - mmengine - INFO - Iter(test) [1200/2000]    eta: 0:01:31  time: 0.0849  data_time: 0.0015  memory: 1921  
09/21 06:05:59 - mmengine - INFO - Iter(test) [1250/2000]    eta: 0:01:25  time: 0.0846  data_time: 0.0015  memory: 12797  
09/21 06:06:04 - mmengine - INFO - Iter(test) [1300/2000]    eta: 0:01:18  time: 0.1012  data_time: 0.0015  memory: 935  
09/21 06:06:09 - mmengine - INFO - Iter(test) [1350/2000]    eta: 0:01:12  time: 0.0968  data_time: 0.0015  memory: 935  
09/21 06:06:14 - mmengine - INFO - Iter(test) [1400/2000]    eta: 0:01:06  time: 0.0889  data_time: 0.0014  memory: 1012  
09/21 06:06:18 - mmengine - INFO - Iter(test) [1450/2000]    eta: 0:01:00  time: 0.0893  data_time: 0.0026  memory: 1015  
09/21 06:06:22 - mmengine - INFO - Iter(test) [1500/2000]    eta: 0:00:54  time: 0.0954  data_time: 0.0014  memory: 933  
09/21 06:06:28 - mmengine - INFO - Iter(test) [1550/2000]    eta: 0:00:49  time: 0.0989  data_time: 0.0014  memory: 1015  
09/21 06:06:32 - mmengine - INFO - Iter(test) [1600/2000]    eta: 0:00:43  time: 0.0871  data_time: 0.0015  memory: 908  
09/21 06:06:37 - mmengine - INFO - Iter(test) [1650/2000]    eta: 0:00:38  time: 0.0850  data_time: 0.0014  memory: 12807  
09/21 06:06:42 - mmengine - INFO - Iter(test) [1700/2000]    eta: 0:00:32  time: 0.0993  data_time: 0.0016  memory: 1012  
09/21 06:06:47 - mmengine - INFO - Iter(test) [1750/2000]    eta: 0:00:27  time: 0.0996  data_time: 0.0014  memory: 1039  
09/21 06:06:52 - mmengine - INFO - Iter(test) [1800/2000]    eta: 0:00:21  time: 0.0921  data_time: 0.0016  memory: 935  
09/21 06:06:56 - mmengine - INFO - Iter(test) [1850/2000]    eta: 0:00:16  time: 0.0870  data_time: 0.0016  memory: 854  
09/21 06:07:00 - mmengine - INFO - Iter(test) [1900/2000]    eta: 0:00:10  time: 0.0844  data_time: 0.0014  memory: 1068  
09/21 06:07:05 - mmengine - INFO - Iter(test) [1950/2000]    eta: 0:00:05  time: 0.0989  data_time: 0.0015  memory: 1306  
09/21 06:07:10 - mmengine - INFO - Iter(test) [2000/2000]    eta: 0:00:00  time: 0.0925  data_time: 0.0014  memory: 1094  
09/21 06:07:10 - mmengine - INFO - per class results:
09/21 06:07:10 - mmengine - INFO - 
+---------------------+-------+-------+
|        Class        |  IoU  |  Acc  |
+---------------------+-------+-------+
|         wall        | 71.06 | 88.35 |
|       building      | 82.11 |  90.8 |
|         sky         | 69.13 | 71.07 |
|        floor        | 75.91 |  89.3 |
|         tree        | 68.21 | 85.03 |
|       ceiling       | 73.53 | 79.71 |
|         road        |  76.7 | 83.94 |
|         bed         | 83.48 |  92.6 |
|      windowpane     | 57.69 | 74.89 |
|        grass        | 65.83 | 76.47 |
|       cabinet       |  54.9 |  65.0 |
|       sidewalk      | 57.39 | 65.42 |
|        person       | 79.39 | 86.74 |
|        earth        | 33.74 | 63.24 |
|         door        | 36.05 | 46.46 |
|        table        | 57.08 | 75.27 |
|       mountain      | 23.01 | 70.17 |
|        plant        | 48.14 | 59.55 |
|       curtain       | 60.34 | 70.22 |
|        chair        | 53.01 | 66.65 |
|         car         | 84.26 | 90.71 |
|        water        | 52.54 | 78.26 |
|       painting      | 63.91 | 83.28 |
|         sofa        | 62.89 | 73.36 |
|        shelf        | 34.47 | 53.63 |
|        house        | 51.83 | 66.79 |
|         sea         | 52.14 | 63.35 |
|        mirror       | 57.82 | 73.01 |
|         rug         | 51.06 | 54.51 |
|        field        | 29.49 | 45.67 |
|       armchair      |  39.0 | 68.65 |
|         seat        | 55.67 | 74.99 |
|        fence        | 43.12 | 64.25 |
|         desk        | 41.73 | 52.33 |
|         rock        | 39.56 | 58.45 |
|       wardrobe      | 32.85 | 44.47 |
|         lamp        | 62.51 | 73.43 |
|       bathtub       | 50.55 | 65.14 |
|       railing       | 36.33 |  49.0 |
|       cushion       | 49.64 | 67.24 |
|         base        | 18.19 | 28.48 |
|         box         | 18.24 | 24.13 |
|        column       | 40.96 |  53.7 |
|      signboard      |  33.8 | 49.53 |
|   chest of drawers  | 42.41 | 53.14 |
|       counter       | 31.65 | 41.66 |
|         sand        | 38.36 | 45.55 |
|         sink        | 68.23 |  76.1 |
|      skyscraper     | 40.51 |  50.4 |
|      fireplace      | 65.12 | 87.86 |
|     refrigerator    | 80.89 | 86.58 |
|      grandstand     | 41.84 | 73.11 |
|         path        | 26.51 | 43.05 |
|        stairs       | 29.73 | 40.67 |
|        runway       |  25.5 | 28.41 |
|         case        | 60.62 |  79.5 |
|      pool table     | 94.09 | 96.01 |
|        pillow       | 55.07 | 63.87 |
|     screen door     | 41.65 | 58.87 |
|       stairway      | 35.55 | 51.18 |
|        river        | 12.65 | 19.46 |
|        bridge       | 31.32 | 42.19 |
|       bookcase      |  32.2 | 49.01 |
|        blind        |  27.7 | 29.64 |
|     coffee table    | 61.48 | 81.51 |
|        toilet       | 71.07 |  75.0 |
|        flower       | 44.16 | 61.26 |
|         book        |  51.7 | 67.68 |
|         hill        |  11.1 | 26.57 |
|        bench        | 37.46 | 45.13 |
|      countertop     |  56.0 | 76.91 |
|        stove        | 68.24 | 72.91 |
|         palm        | 49.99 | 70.12 |
|    kitchen island   | 30.13 | 65.46 |
|       computer      | 58.72 | 62.26 |
|     swivel chair    | 41.59 |  47.7 |
|         boat        |  41.9 | 49.63 |
|         bar         | 56.51 | 64.22 |
|    arcade machine   |  4.7  |  5.67 |
|        hovel        | 40.22 | 48.31 |
|         bus         | 85.18 | 95.04 |
|        towel        |  40.7 | 56.87 |
|        light        | 51.14 | 63.24 |
|        truck        | 34.99 | 53.19 |
|        tower        | 48.69 |  63.7 |
|      chandelier     | 62.18 |  69.4 |
|        awning       | 26.82 | 32.55 |
|     streetlight     | 30.04 | 40.97 |
|        booth        | 35.36 | 40.17 |
| television receiver |  49.9 | 63.97 |
|       airplane      | 55.48 |  63.9 |
|      dirt track     |  5.21 | 19.68 |
|       apparel       | 23.25 | 38.99 |
|         pole        | 21.06 | 31.27 |
|         land        |  2.8  |  3.08 |
|      bannister      | 14.09 | 20.12 |
|      escalator      | 10.88 | 11.32 |
|       ottoman       | 46.55 | 66.15 |
|        bottle       | 20.37 | 24.22 |
|        buffet       |  46.0 | 51.89 |
|        poster       | 14.76 | 21.83 |
|        stage        | 16.77 | 29.41 |
|         van         | 42.95 | 61.78 |
|         ship        |  7.59 |  7.67 |
|       fountain      |  18.8 | 19.75 |
|    conveyer belt    | 50.04 | 65.08 |
|        canopy       | 17.59 | 30.24 |
|        washer       | 63.23 | 64.07 |
|      plaything      | 19.06 | 26.64 |
|    swimming pool    | 54.61 | 71.16 |
|        stool        |  40.1 | 53.71 |
|        barrel       |  2.67 |  51.7 |
|        basket       | 30.03 |  38.7 |
|      waterfall      | 35.64 | 39.57 |
|         tent        | 95.86 | 98.39 |
|         bag         | 10.12 | 11.82 |
|       minibike      | 71.76 |  84.4 |
|        cradle       | 81.65 |  95.2 |
|         oven        | 24.03 | 70.27 |
|         ball        | 40.71 | 71.72 |
|         food        | 60.08 | 81.52 |
|         step        |  7.23 | 16.81 |
|         tank        | 36.28 | 38.25 |
|      trade name     | 26.36 | 30.48 |
|      microwave      | 29.17 | 29.87 |
|         pot         | 34.56 | 39.97 |
|        animal       | 70.53 | 77.13 |
|       bicycle       | 61.78 | 78.22 |
|         lake        |  0.03 |  0.04 |
|      dishwasher     | 49.01 | 55.67 |
|        screen       | 56.86 | 72.16 |
|       blanket       | 15.92 | 19.11 |
|      sculpture      | 28.87 | 60.74 |
|         hood        | 77.53 |  80.7 |
|        sconce       | 38.26 | 50.35 |
|         vase        | 38.92 |  58.0 |
|    traffic light    | 32.12 | 50.89 |
|         tray        | 13.42 | 20.95 |
|        ashcan       | 30.79 | 37.01 |
|         fan         | 61.76 | 70.54 |
|         pier        | 31.59 | 39.62 |
|      crt screen     | 14.17 | 17.16 |
|        plate        | 50.04 | 66.69 |
|       monitor       |  2.02 |  2.12 |
|    bulletin board   | 37.14 | 46.28 |
|        shower       |  0.68 |  17.6 |
|       radiator      | 40.45 | 44.42 |
|        glass        | 17.08 | 18.76 |
|        clock        | 28.97 | 35.14 |
|         flag        | 47.28 | 52.68 |
+---------------------+-------+-------+
09/21 06:07:10 - mmengine - INFO - Iter(test) [2000/2000]    aAcc: 77.1400  mIoU: 42.8200  mAcc: 54.8400  data_time: 0.0017  time: 0.1062
Finished processing corruption type: frost
Processing corruption type: fog
09/21 06:07:14 - mmengine - INFO - 
------------------------------------------------------------
System environment:
    sys.platform: linux
    Python: 3.10.13 | packaged by conda-forge | (main, Dec 23 2023, 15:36:39) [GCC 12.3.0]
    CUDA available: True
    MUSA available: False
    numpy_random_seed: 1653833029
    GPU 0: Tesla V100-SXM2-32GB
    CUDA_HOME: /opt/bwhpc/common/devel/cuda/11.7
    NVCC: Cuda compilation tools, release 11.7, V11.7.99
    GCC: gcc (GCC) 8.5.0 20210514 (Red Hat 8.5.0-18)
    PyTorch: 1.13.1
    PyTorch compiling details: PyTorch built with:
  - GCC 9.3
  - C++ Version: 201402
  - Intel(R) oneAPI Math Kernel Library Version 2023.1-Product Build 20230303 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v2.6.0 (Git Hash 52b5f107dd9cf10910aaa19cb47f3abf9b349815)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - LAPACK is enabled (usually provided by MKL)
  - NNPACK is enabled
  - CPU capability usage: AVX2
  - CUDA Runtime 11.7
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_61,code=sm_61;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86;-gencode;arch=compute_37,code=compute_37
  - CuDNN 8.5
  - Magma 2.6.1
  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.7, CUDNN_VERSION=8.5.0, CXX_COMPILER=/opt/rh/devtoolset-9/root/usr/bin/c++, CXX_FLAGS= -fabi-version=11 -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -DEDGE_PROFILER_USE_KINETO -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Werror=non-virtual-dtor -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wunused-local-typedefs -Wno-unused-parameter -Wno-unused-function -Wno-unused-result -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Werror=cast-function-type -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.13.1, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, USE_ROCM=OFF, 

    TorchVision: 0.14.1
    OpenCV: 3.4.18
    MMEngine: 0.10.4

Runtime environment:
    cudnn_benchmark: True
    mp_cfg: {'mp_start_method': 'fork', 'opencv_num_threads': 0}
    dist_cfg: {'backend': 'nccl'}
    seed: 1653833029
    Distributed launcher: none
    Distributed training: False
    GPU number: 1
------------------------------------------------------------

09/21 06:07:15 - mmengine - INFO - Config:
auto_scale_lr = dict(base_batch_size=16, enable=False)
backbone_embed_multi = dict(decay_mult=0.0, lr_mult=0.1)
backbone_norm_multi = dict(decay_mult=0.0, lr_mult=0.1)
crop_size = (
    512,
    512,
)
custom_imports = dict(allow_failed_imports=False, imports='mmdet.models')
custom_keys = dict({
    'absolute_pos_embed':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone':
    dict(decay_mult=1.0, lr_mult=0.1),
    'backbone.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.patch_embed.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.0.blocks.0.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.0.blocks.1.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.0.downsample.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.1.blocks.0.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.1.blocks.1.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.1.downsample.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.0.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.1.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.10.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.11.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.12.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.13.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.14.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.15.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.16.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.17.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.2.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.3.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.4.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.5.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.6.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.7.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.8.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.9.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.downsample.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.3.blocks.0.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.3.blocks.1.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'level_embed':
    dict(decay_mult=0.0, lr_mult=1.0),
    'query_embed':
    dict(decay_mult=0.0, lr_mult=1.0),
    'query_feat':
    dict(decay_mult=0.0, lr_mult=1.0),
    'relative_position_bias_table':
    dict(decay_mult=0.0, lr_mult=0.1)
})
data_root = 'data/ade/ADEChallengeData2016'
dataset_type = 'ADE20KDataset'
default_hooks = dict(
    checkpoint=dict(
        by_epoch=False, interval=5000, save_best='mIoU',
        type='CheckpointHook'),
    logger=dict(interval=50, log_metric_by_epoch=False, type='LoggerHook'),
    param_scheduler=dict(type='ParamSchedulerHook'),
    sampler_seed=dict(type='DistSamplerSeedHook'),
    timer=dict(type='IterTimerHook'),
    visualization=dict(type='SegVisualizationHook'))
default_scope = 'mmseg'
depths = [
    2,
    2,
    18,
    2,
]
embed_multi = dict(decay_mult=0.0, lr_mult=1.0)
env_cfg = dict(
    cudnn_benchmark=True,
    dist_cfg=dict(backend='nccl'),
    mp_cfg=dict(mp_start_method='fork', opencv_num_threads=0))
img_ratios = [
    0.5,
    0.75,
    1.0,
    1.25,
    1.5,
    1.75,
]
launcher = 'none'
load_from = '../checkpoint_files/ade20k/mask2former/mask2former_swin-s_8xb2-160k_ade20k-512x512_20221204_143905-e715144e.pth'
log_level = 'INFO'
log_processor = dict(by_epoch=False)
model = dict(
    backbone=dict(
        attn_drop_rate=0.0,
        depths=[
            2,
            2,
            18,
            2,
        ],
        drop_path_rate=0.3,
        drop_rate=0.0,
        embed_dims=96,
        frozen_stages=-1,
        init_cfg=dict(
            checkpoint=
            'https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/swin/swin_small_patch4_window7_224_20220317-7ba6d6dd.pth',
            type='Pretrained'),
        mlp_ratio=4,
        num_heads=[
            3,
            6,
            12,
            24,
        ],
        out_indices=(
            0,
            1,
            2,
            3,
        ),
        patch_norm=True,
        qk_scale=None,
        qkv_bias=True,
        type='SwinTransformer',
        window_size=7,
        with_cp=False),
    data_preprocessor=dict(
        bgr_to_rgb=True,
        corruption='fog',
        mean=[
            123.675,
            116.28,
            103.53,
        ],
        pad_val=0,
        seg_pad_val=255,
        size=(
            512,
            512,
        ),
        std=[
            58.395,
            57.12,
            57.375,
        ],
        test_cfg=dict(size_divisor=32),
        type='SegDataPreProcessor'),
    decode_head=dict(
        align_corners=False,
        enforce_decoder_input_project=False,
        feat_channels=256,
        in_channels=[
            96,
            192,
            384,
            768,
        ],
        loss_cls=dict(
            class_weight=[
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                0.1,
            ],
            loss_weight=2.0,
            reduction='mean',
            type='mmdet.CrossEntropyLoss',
            use_sigmoid=False),
        loss_dice=dict(
            activate=True,
            eps=1.0,
            loss_weight=5.0,
            naive_dice=True,
            reduction='mean',
            type='mmdet.DiceLoss',
            use_sigmoid=True),
        loss_mask=dict(
            loss_weight=5.0,
            reduction='mean',
            type='mmdet.CrossEntropyLoss',
            use_sigmoid=True),
        num_classes=150,
        num_queries=100,
        num_transformer_feat_level=3,
        out_channels=256,
        pixel_decoder=dict(
            act_cfg=dict(type='ReLU'),
            encoder=dict(
                init_cfg=None,
                layer_cfg=dict(
                    ffn_cfg=dict(
                        act_cfg=dict(inplace=True, type='ReLU'),
                        embed_dims=256,
                        feedforward_channels=1024,
                        ffn_drop=0.0,
                        num_fcs=2),
                    self_attn_cfg=dict(
                        batch_first=True,
                        dropout=0.0,
                        embed_dims=256,
                        im2col_step=64,
                        init_cfg=None,
                        norm_cfg=None,
                        num_heads=8,
                        num_levels=3,
                        num_points=4)),
                num_layers=6),
            init_cfg=None,
            norm_cfg=dict(num_groups=32, type='GN'),
            num_outs=3,
            positional_encoding=dict(normalize=True, num_feats=128),
            type='mmdet.MSDeformAttnPixelDecoder'),
        positional_encoding=dict(normalize=True, num_feats=128),
        strides=[
            4,
            8,
            16,
            32,
        ],
        train_cfg=dict(
            assigner=dict(
                match_costs=[
                    dict(type='mmdet.ClassificationCost', weight=2.0),
                    dict(
                        type='mmdet.CrossEntropyLossCost',
                        use_sigmoid=True,
                        weight=5.0),
                    dict(
                        eps=1.0,
                        pred_act=True,
                        type='mmdet.DiceCost',
                        weight=5.0),
                ],
                type='mmdet.HungarianAssigner'),
            importance_sample_ratio=0.75,
            num_points=12544,
            oversample_ratio=3.0,
            sampler=dict(type='mmdet.MaskPseudoSampler')),
        transformer_decoder=dict(
            init_cfg=None,
            layer_cfg=dict(
                cross_attn_cfg=dict(
                    attn_drop=0.0,
                    batch_first=True,
                    dropout_layer=None,
                    embed_dims=256,
                    num_heads=8,
                    proj_drop=0.0),
                ffn_cfg=dict(
                    act_cfg=dict(inplace=True, type='ReLU'),
                    add_identity=True,
                    dropout_layer=None,
                    embed_dims=256,
                    feedforward_channels=2048,
                    ffn_drop=0.0,
                    num_fcs=2),
                self_attn_cfg=dict(
                    attn_drop=0.0,
                    batch_first=True,
                    dropout_layer=None,
                    embed_dims=256,
                    num_heads=8,
                    proj_drop=0.0)),
            num_layers=9,
            return_intermediate=True),
        type='Mask2FormerHead'),
    test_cfg=dict(mode='whole'),
    train_cfg=dict(),
    type='EncoderDecoder')
num_classes = 150
optim_wrapper = dict(
    clip_grad=dict(max_norm=0.01, norm_type=2),
    optimizer=dict(
        betas=(
            0.9,
            0.999,
        ),
        eps=1e-08,
        lr=0.0001,
        type='AdamW',
        weight_decay=0.05),
    paramwise_cfg=dict(
        custom_keys=dict({
            'absolute_pos_embed':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone':
            dict(decay_mult=1.0, lr_mult=0.1),
            'backbone.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.patch_embed.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.0.blocks.0.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.0.blocks.1.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.0.downsample.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.1.blocks.0.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.1.blocks.1.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.1.downsample.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.0.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.1.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.10.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.11.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.12.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.13.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.14.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.15.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.16.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.17.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.2.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.3.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.4.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.5.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.6.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.7.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.8.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.9.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.downsample.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.3.blocks.0.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.3.blocks.1.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'level_embed':
            dict(decay_mult=0.0, lr_mult=1.0),
            'query_embed':
            dict(decay_mult=0.0, lr_mult=1.0),
            'query_feat':
            dict(decay_mult=0.0, lr_mult=1.0),
            'relative_position_bias_table':
            dict(decay_mult=0.0, lr_mult=0.1)
        }),
        norm_decay_mult=0.0),
    type='OptimWrapper')
optimizer = dict(
    betas=(
        0.9,
        0.999,
    ),
    eps=1e-08,
    lr=0.0001,
    type='AdamW',
    weight_decay=0.05)
param_scheduler = [
    dict(
        begin=0,
        by_epoch=False,
        end=160000,
        eta_min=0,
        power=0.9,
        type='PolyLR'),
]
pretrained = 'https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/swin/swin_small_patch4_window7_224_20220317-7ba6d6dd.pth'
resume = False
test_cfg = dict(type='TestLoop')
test_dataloader = dict(
    batch_size=1,
    dataset=dict(
        data_prefix=dict(
            img_path='images/validation',
            seg_map_path='annotations/validation'),
        data_root='data/ade/ADEChallengeData2016',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(keep_ratio=True, scale=(
                2048,
                512,
            ), type='Resize'),
            dict(reduce_zero_label=True, type='LoadAnnotations'),
            dict(type='PackSegInputs'),
        ],
        type='ADE20KDataset'),
    num_workers=4,
    persistent_workers=True,
    sampler=dict(shuffle=False, type='DefaultSampler'))
test_evaluator = dict(
    iou_metrics=[
        'mIoU',
    ], type='IoUMetric')
test_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(keep_ratio=True, scale=(
        2048,
        512,
    ), type='Resize'),
    dict(reduce_zero_label=True, type='LoadAnnotations'),
    dict(type='PackSegInputs'),
]
train_cfg = dict(
    max_iters=160000, type='IterBasedTrainLoop', val_interval=5000)
train_dataloader = dict(
    batch_size=2,
    dataset=dict(
        data_prefix=dict(
            img_path='images/training', seg_map_path='annotations/training'),
        data_root='data/ade/ADEChallengeData2016',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(reduce_zero_label=True, type='LoadAnnotations'),
            dict(
                max_size=2048,
                resize_type='ResizeShortestEdge',
                scales=[
                    256,
                    307,
                    358,
                    409,
                    460,
                    512,
                    563,
                    614,
                    665,
                    716,
                    768,
                    819,
                    870,
                    921,
                    972,
                    1024,
                ],
                type='RandomChoiceResize'),
            dict(
                cat_max_ratio=0.75, crop_size=(
                    512,
                    512,
                ), type='RandomCrop'),
            dict(prob=0.5, type='RandomFlip'),
            dict(type='PhotoMetricDistortion'),
            dict(type='PackSegInputs'),
        ],
        type='ADE20KDataset'),
    num_workers=4,
    persistent_workers=True,
    sampler=dict(shuffle=True, type='InfiniteSampler'))
train_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(reduce_zero_label=True, type='LoadAnnotations'),
    dict(
        max_size=2048,
        resize_type='ResizeShortestEdge',
        scales=[
            256,
            307,
            358,
            409,
            460,
            512,
            563,
            614,
            665,
            716,
            768,
            819,
            870,
            921,
            972,
            1024,
        ],
        type='RandomChoiceResize'),
    dict(cat_max_ratio=0.75, crop_size=(
        512,
        512,
    ), type='RandomCrop'),
    dict(prob=0.5, type='RandomFlip'),
    dict(type='PhotoMetricDistortion'),
    dict(type='PackSegInputs'),
]
tta_model = dict(type='SegTTAModel')
tta_pipeline = [
    dict(backend_args=None, type='LoadImageFromFile'),
    dict(
        transforms=[
            [
                dict(keep_ratio=True, scale_factor=0.5, type='Resize'),
                dict(keep_ratio=True, scale_factor=0.75, type='Resize'),
                dict(keep_ratio=True, scale_factor=1.0, type='Resize'),
                dict(keep_ratio=True, scale_factor=1.25, type='Resize'),
                dict(keep_ratio=True, scale_factor=1.5, type='Resize'),
                dict(keep_ratio=True, scale_factor=1.75, type='Resize'),
            ],
            [
                dict(direction='horizontal', prob=0.0, type='RandomFlip'),
                dict(direction='horizontal', prob=1.0, type='RandomFlip'),
            ],
            [
                dict(type='LoadAnnotations'),
            ],
            [
                dict(type='PackSegInputs'),
            ],
        ],
        type='TestTimeAug'),
]
val_cfg = dict(type='ValLoop')
val_dataloader = dict(
    batch_size=1,
    dataset=dict(
        data_prefix=dict(
            img_path='images/validation',
            seg_map_path='annotations/validation'),
        data_root='data/ade/ADEChallengeData2016',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(keep_ratio=True, scale=(
                2048,
                512,
            ), type='Resize'),
            dict(reduce_zero_label=True, type='LoadAnnotations'),
            dict(type='PackSegInputs'),
        ],
        type='ADE20KDataset'),
    num_workers=4,
    persistent_workers=True,
    sampler=dict(shuffle=False, type='DefaultSampler'))
val_evaluator = dict(
    iou_metrics=[
        'mIoU',
    ], type='IoUMetric')
vis_backends = [
    dict(type='LocalVisBackend'),
]
visualizer = dict(
    name='visualizer',
    type='SegLocalVisualizer',
    vis_backends=[
        dict(type='LocalVisBackend'),
    ])
work_dir = '../corruptions/work_dirs/ade20k/mask2former/mask2former_swin-s_8xb2-160k_ade20k-512x512/fog'

09/21 06:07:18 - mmengine - INFO - Distributed training is not used, all SyncBatchNorm (SyncBN) layers in the model will be automatically reverted to BatchNormXd layers if they are used.
09/21 06:07:18 - mmengine - INFO - Hooks will be executed in the following order:
before_run:
(VERY_HIGH   ) RuntimeInfoHook                    
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
before_train:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_train_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(NORMAL      ) DistSamplerSeedHook                
 -------------------- 
before_train_iter:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_train_iter:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(NORMAL      ) SegVisualizationHook               
(BELOW_NORMAL) LoggerHook                         
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
after_train_epoch:
(NORMAL      ) IterTimerHook                      
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_val:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
before_val_epoch:
(NORMAL      ) IterTimerHook                      
 -------------------- 
before_val_iter:
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_val_iter:
(NORMAL      ) IterTimerHook                      
(NORMAL      ) SegVisualizationHook               
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_val_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
after_val:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
after_train:
(VERY_HIGH   ) RuntimeInfoHook                    
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_test:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
before_test_epoch:
(NORMAL      ) IterTimerHook                      
 -------------------- 
before_test_iter:
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_test_iter:
(NORMAL      ) IterTimerHook                      
(NORMAL      ) SegVisualizationHook               
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_test_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_test:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
after_run:
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
09/21 06:07:18 - mmengine - WARNING - The prefix is not set in metric class IoUMetric.
Loads checkpoint by local backend from path: ../checkpoint_files/ade20k/mask2former/mask2former_swin-s_8xb2-160k_ade20k-512x512_20221204_143905-e715144e.pth
09/21 06:07:19 - mmengine - INFO - Load checkpoint from ../checkpoint_files/ade20k/mask2former/mask2former_swin-s_8xb2-160k_ade20k-512x512_20221204_143905-e715144e.pth
09/21 06:07:43 - mmengine - INFO - Iter(test) [  50/2000]    eta: 0:15:04  time: 0.3776  data_time: 0.0015  memory: 12814  
09/21 06:07:56 - mmengine - INFO - Iter(test) [ 100/2000]    eta: 0:11:28  time: 0.2803  data_time: 0.0016  memory: 12795  
09/21 06:08:06 - mmengine - INFO - Iter(test) [ 150/2000]    eta: 0:09:38  time: 0.2207  data_time: 0.0014  memory: 935  
09/21 06:08:19 - mmengine - INFO - Iter(test) [ 200/2000]    eta: 0:08:54  time: 0.2074  data_time: 0.0015  memory: 12835  
09/21 06:08:31 - mmengine - INFO - Iter(test) [ 250/2000]    eta: 0:08:22  time: 0.2183  data_time: 0.0014  memory: 12838  
09/21 06:08:42 - mmengine - INFO - Iter(test) [ 300/2000]    eta: 0:07:49  time: 0.2155  data_time: 0.0015  memory: 12803  
09/21 06:08:55 - mmengine - INFO - Iter(test) [ 350/2000]    eta: 0:07:28  time: 0.2039  data_time: 0.0014  memory: 12810  
09/21 06:09:06 - mmengine - INFO - Iter(test) [ 400/2000]    eta: 0:07:05  time: 0.2195  data_time: 0.0013  memory: 12775  
09/21 06:09:16 - mmengine - INFO - Iter(test) [ 450/2000]    eta: 0:06:42  time: 0.2026  data_time: 0.0014  memory: 975  
09/21 06:09:27 - mmengine - INFO - Iter(test) [ 500/2000]    eta: 0:06:23  time: 0.2197  data_time: 0.0014  memory: 935  
09/21 06:09:38 - mmengine - INFO - Iter(test) [ 550/2000]    eta: 0:06:04  time: 0.2139  data_time: 0.0015  memory: 1042  
09/21 06:09:49 - mmengine - INFO - Iter(test) [ 600/2000]    eta: 0:05:48  time: 0.2247  data_time: 0.0015  memory: 1040  
09/21 06:10:00 - mmengine - INFO - Iter(test) [ 650/2000]    eta: 0:05:33  time: 0.2998  data_time: 0.0014  memory: 12816  
09/21 06:10:12 - mmengine - INFO - Iter(test) [ 700/2000]    eta: 0:05:20  time: 0.2128  data_time: 0.0015  memory: 12806  
09/21 06:10:22 - mmengine - INFO - Iter(test) [ 750/2000]    eta: 0:05:04  time: 0.2119  data_time: 0.0014  memory: 1096  
09/21 06:10:33 - mmengine - INFO - Iter(test) [ 800/2000]    eta: 0:04:50  time: 0.2075  data_time: 0.0015  memory: 935  
09/21 06:10:43 - mmengine - INFO - Iter(test) [ 850/2000]    eta: 0:04:35  time: 0.2191  data_time: 0.0015  memory: 908  
09/21 06:10:54 - mmengine - INFO - Iter(test) [ 900/2000]    eta: 0:04:22  time: 0.2026  data_time: 0.0014  memory: 987  
09/21 06:11:05 - mmengine - INFO - Iter(test) [ 950/2000]    eta: 0:04:08  time: 0.2193  data_time: 0.0014  memory: 1015  
09/21 06:11:15 - mmengine - INFO - Iter(test) [1000/2000]    eta: 0:03:55  time: 0.2064  data_time: 0.0015  memory: 1015  
09/21 06:11:27 - mmengine - INFO - Iter(test) [1050/2000]    eta: 0:03:43  time: 0.2190  data_time: 0.0014  memory: 12819  
09/21 06:11:37 - mmengine - INFO - Iter(test) [1100/2000]    eta: 0:03:31  time: 0.2047  data_time: 0.0015  memory: 1012  
09/21 06:11:48 - mmengine - INFO - Iter(test) [1150/2000]    eta: 0:03:18  time: 0.2203  data_time: 0.0014  memory: 985  
09/21 06:11:59 - mmengine - INFO - Iter(test) [1200/2000]    eta: 0:03:06  time: 0.2078  data_time: 0.0014  memory: 1921  
09/21 06:12:10 - mmengine - INFO - Iter(test) [1250/2000]    eta: 0:02:54  time: 0.2162  data_time: 0.0014  memory: 12797  
09/21 06:12:21 - mmengine - INFO - Iter(test) [1300/2000]    eta: 0:02:42  time: 0.2051  data_time: 0.0014  memory: 935  
09/21 06:12:32 - mmengine - INFO - Iter(test) [1350/2000]    eta: 0:02:30  time: 0.2250  data_time: 0.0014  memory: 935  
09/21 06:12:43 - mmengine - INFO - Iter(test) [1400/2000]    eta: 0:02:18  time: 0.2209  data_time: 0.0014  memory: 1012  
09/21 06:12:54 - mmengine - INFO - Iter(test) [1450/2000]    eta: 0:02:06  time: 0.2106  data_time: 0.0014  memory: 1015  
09/21 06:13:04 - mmengine - INFO - Iter(test) [1500/2000]    eta: 0:01:54  time: 0.2193  data_time: 0.0014  memory: 933  
09/21 06:13:15 - mmengine - INFO - Iter(test) [1550/2000]    eta: 0:01:43  time: 0.2113  data_time: 0.0015  memory: 1015  
09/21 06:13:26 - mmengine - INFO - Iter(test) [1600/2000]    eta: 0:01:31  time: 0.2225  data_time: 0.0015  memory: 908  
09/21 06:13:38 - mmengine - INFO - Iter(test) [1650/2000]    eta: 0:01:20  time: 0.2047  data_time: 0.0014  memory: 12807  
09/21 06:13:48 - mmengine - INFO - Iter(test) [1700/2000]    eta: 0:01:08  time: 0.2239  data_time: 0.0015  memory: 1012  
09/21 06:13:59 - mmengine - INFO - Iter(test) [1750/2000]    eta: 0:00:57  time: 0.2096  data_time: 0.0014  memory: 1039  
09/21 06:14:10 - mmengine - INFO - Iter(test) [1800/2000]    eta: 0:00:45  time: 0.2226  data_time: 0.0016  memory: 935  
09/21 06:14:20 - mmengine - INFO - Iter(test) [1850/2000]    eta: 0:00:34  time: 0.2090  data_time: 0.0016  memory: 854  
09/21 06:14:31 - mmengine - INFO - Iter(test) [1900/2000]    eta: 0:00:22  time: 0.2168  data_time: 0.0014  memory: 1068  
09/21 06:14:42 - mmengine - INFO - Iter(test) [1950/2000]    eta: 0:00:11  time: 0.2156  data_time: 0.0014  memory: 1306  
09/21 06:14:53 - mmengine - INFO - Iter(test) [2000/2000]    eta: 0:00:00  time: 0.2046  data_time: 0.0013  memory: 1094  
09/21 06:14:53 - mmengine - INFO - per class results:
09/21 06:14:53 - mmengine - INFO - 
+---------------------+-------+-------+
|        Class        |  IoU  |  Acc  |
+---------------------+-------+-------+
|         wall        | 78.51 | 88.65 |
|       building      | 83.91 | 92.71 |
|         sky         | 94.72 | 97.12 |
|        floor        | 81.21 |  89.8 |
|         tree        | 74.74 | 86.91 |
|       ceiling       | 84.59 | 90.69 |
|         road        | 83.81 | 89.75 |
|         bed         |  89.5 | 95.39 |
|      windowpane     | 61.05 |  79.7 |
|        grass        | 72.29 | 82.13 |
|       cabinet       | 60.43 | 72.95 |
|       sidewalk      | 67.41 | 79.56 |
|        person       | 83.29 | 91.08 |
|        earth        | 39.29 |  60.5 |
|         door        | 50.95 | 67.65 |
|        table        | 64.35 | 78.48 |
|       mountain      | 61.43 | 79.78 |
|        plant        | 50.22 | 62.27 |
|       curtain       | 71.89 | 83.69 |
|        chair        | 60.81 | 73.54 |
|         car         | 85.23 | 92.38 |
|        water        | 61.67 | 82.09 |
|       painting      | 73.58 | 87.05 |
|         sofa        | 62.61 | 72.53 |
|        shelf        | 41.58 | 60.48 |
|        house        | 49.02 | 64.27 |
|         sea         | 71.37 | 88.44 |
|        mirror       | 66.89 | 78.87 |
|         rug         | 58.53 | 69.62 |
|        field        |  30.0 | 44.09 |
|       armchair      | 42.58 | 70.71 |
|         seat        | 58.54 | 81.03 |
|        fence        | 48.71 | 66.87 |
|         desk        | 51.99 | 72.23 |
|         rock        | 45.78 | 66.14 |
|       wardrobe      | 48.56 | 72.93 |
|         lamp        | 67.62 | 80.07 |
|       bathtub       | 74.46 | 86.01 |
|       railing       | 37.49 |  55.9 |
|       cushion       | 56.95 | 72.98 |
|         base        | 27.37 | 43.69 |
|         box         | 26.09 | 36.31 |
|        column       |  49.1 | 59.35 |
|      signboard      | 35.75 | 51.73 |
|   chest of drawers  | 43.34 | 60.19 |
|       counter       | 23.99 | 36.71 |
|         sand        | 42.56 | 58.96 |
|         sink        | 74.86 | 83.36 |
|      skyscraper     |  33.4 | 40.42 |
|      fireplace      | 73.45 | 91.33 |
|     refrigerator    | 77.99 | 85.05 |
|      grandstand     | 46.77 | 70.91 |
|         path        | 26.53 | 46.17 |
|        stairs       | 30.15 |  36.8 |
|        runway       | 67.67 | 85.29 |
|         case        | 46.05 | 58.96 |
|      pool table     | 94.14 | 96.51 |
|        pillow       | 58.91 | 69.86 |
|     screen door     | 64.71 |  72.7 |
|       stairway      | 37.98 | 50.63 |
|        river        | 23.96 | 28.27 |
|        bridge       | 42.98 | 48.59 |
|       bookcase      | 39.74 | 61.81 |
|        blind        | 41.76 |  47.1 |
|     coffee table    | 64.44 | 85.45 |
|        toilet       | 86.96 | 90.85 |
|        flower       | 43.99 | 66.61 |
|         book        | 53.16 |  71.8 |
|         hill        | 20.06 | 27.43 |
|        bench        | 46.85 | 64.38 |
|      countertop     | 60.04 | 79.39 |
|        stove        | 77.33 | 84.42 |
|         palm        | 50.13 | 70.83 |
|    kitchen island   | 44.27 | 78.61 |
|       computer      | 61.68 | 70.03 |
|     swivel chair    | 49.92 | 68.71 |
|         boat        | 73.85 | 86.92 |
|         bar         | 52.52 | 65.26 |
|    arcade machine   | 31.71 | 34.43 |
|        hovel        | 42.27 | 46.98 |
|         bus         | 89.89 | 95.84 |
|        towel        | 71.11 | 79.39 |
|        light        | 60.63 |  74.8 |
|        truck        | 38.06 | 54.09 |
|        tower        | 44.32 | 61.82 |
|      chandelier     | 68.58 | 77.47 |
|        awning       | 30.68 | 38.63 |
|     streetlight     | 32.55 | 45.76 |
|        booth        | 53.62 | 61.88 |
| television receiver | 56.72 | 81.55 |
|       airplane      | 55.61 | 65.59 |
|      dirt track     |  0.0  |  0.0  |
|       apparel       | 41.36 | 52.94 |
|         pole        | 28.02 | 43.51 |
|         land        |  8.73 | 11.41 |
|      bannister      | 27.02 | 39.47 |
|      escalator      | 36.69 | 41.37 |
|       ottoman       | 45.93 | 65.85 |
|        bottle       | 20.62 | 25.19 |
|        buffet       | 41.44 | 51.51 |
|        poster       | 31.44 | 46.28 |
|        stage        | 10.03 | 15.56 |
|         van         | 53.58 | 75.04 |
|         ship        |  0.82 |  0.82 |
|       fountain      | 46.41 | 47.83 |
|    conveyer belt    | 53.81 | 68.47 |
|        canopy       | 15.82 | 21.04 |
|        washer       | 73.18 | 74.66 |
|      plaything      | 18.56 | 30.95 |
|    swimming pool    | 50.87 | 66.07 |
|        stool        | 45.48 | 56.27 |
|        barrel       | 63.42 |  74.2 |
|        basket       | 42.33 | 50.58 |
|      waterfall      | 45.29 | 58.36 |
|         tent        | 79.05 | 98.26 |
|         bag         |  18.5 | 22.95 |
|       minibike      |  74.1 | 85.83 |
|        cradle       | 83.78 | 96.93 |
|         oven        | 54.46 | 66.17 |
|         ball        | 30.54 | 78.32 |
|         food        | 62.97 | 80.02 |
|         step        |  8.95 | 15.98 |
|         tank        |  46.2 | 47.45 |
|      trade name     | 25.49 |  29.9 |
|      microwave      | 86.08 | 94.33 |
|         pot         | 52.97 | 65.82 |
|        animal       | 68.73 | 72.44 |
|       bicycle       | 60.42 |  80.7 |
|         lake        | 63.01 | 72.91 |
|      dishwasher     | 62.84 | 83.46 |
|        screen       | 82.02 | 90.61 |
|       blanket       | 14.17 | 18.72 |
|      sculpture      | 47.48 | 68.97 |
|         hood        | 65.27 | 68.42 |
|        sconce       | 51.87 | 64.58 |
|         vase        | 43.62 | 63.09 |
|    traffic light    | 36.41 | 62.29 |
|         tray        | 15.56 | 25.69 |
|        ashcan       | 34.89 | 54.11 |
|         fan         | 64.18 | 78.62 |
|         pier        | 33.59 | 40.95 |
|      crt screen     |  5.26 | 13.92 |
|        plate        | 52.72 | 69.96 |
|       monitor       |  2.19 |  3.86 |
|    bulletin board   | 50.21 | 66.37 |
|        shower       |  7.15 | 23.29 |
|       radiator      | 56.89 | 71.23 |
|        glass        | 20.84 | 23.08 |
|        clock        | 36.18 | 44.38 |
|         flag        | 36.23 | 39.62 |
+---------------------+-------+-------+
09/21 06:14:53 - mmengine - INFO - Iter(test) [2000/2000]    aAcc: 83.6200  mIoU: 50.4900  mAcc: 63.0500  data_time: 0.0016  time: 0.2267
Finished processing corruption type: fog
Processing corruption type: brightness
09/21 06:14:57 - mmengine - INFO - 
------------------------------------------------------------
System environment:
    sys.platform: linux
    Python: 3.10.13 | packaged by conda-forge | (main, Dec 23 2023, 15:36:39) [GCC 12.3.0]
    CUDA available: True
    MUSA available: False
    numpy_random_seed: 617109269
    GPU 0: Tesla V100-SXM2-32GB
    CUDA_HOME: /opt/bwhpc/common/devel/cuda/11.7
    NVCC: Cuda compilation tools, release 11.7, V11.7.99
    GCC: gcc (GCC) 8.5.0 20210514 (Red Hat 8.5.0-18)
    PyTorch: 1.13.1
    PyTorch compiling details: PyTorch built with:
  - GCC 9.3
  - C++ Version: 201402
  - Intel(R) oneAPI Math Kernel Library Version 2023.1-Product Build 20230303 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v2.6.0 (Git Hash 52b5f107dd9cf10910aaa19cb47f3abf9b349815)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - LAPACK is enabled (usually provided by MKL)
  - NNPACK is enabled
  - CPU capability usage: AVX2
  - CUDA Runtime 11.7
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_61,code=sm_61;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86;-gencode;arch=compute_37,code=compute_37
  - CuDNN 8.5
  - Magma 2.6.1
  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.7, CUDNN_VERSION=8.5.0, CXX_COMPILER=/opt/rh/devtoolset-9/root/usr/bin/c++, CXX_FLAGS= -fabi-version=11 -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -DEDGE_PROFILER_USE_KINETO -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Werror=non-virtual-dtor -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wunused-local-typedefs -Wno-unused-parameter -Wno-unused-function -Wno-unused-result -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Werror=cast-function-type -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.13.1, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, USE_ROCM=OFF, 

    TorchVision: 0.14.1
    OpenCV: 3.4.18
    MMEngine: 0.10.4

Runtime environment:
    cudnn_benchmark: True
    mp_cfg: {'mp_start_method': 'fork', 'opencv_num_threads': 0}
    dist_cfg: {'backend': 'nccl'}
    seed: 617109269
    Distributed launcher: none
    Distributed training: False
    GPU number: 1
------------------------------------------------------------

09/21 06:14:58 - mmengine - INFO - Config:
auto_scale_lr = dict(base_batch_size=16, enable=False)
backbone_embed_multi = dict(decay_mult=0.0, lr_mult=0.1)
backbone_norm_multi = dict(decay_mult=0.0, lr_mult=0.1)
crop_size = (
    512,
    512,
)
custom_imports = dict(allow_failed_imports=False, imports='mmdet.models')
custom_keys = dict({
    'absolute_pos_embed':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone':
    dict(decay_mult=1.0, lr_mult=0.1),
    'backbone.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.patch_embed.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.0.blocks.0.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.0.blocks.1.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.0.downsample.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.1.blocks.0.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.1.blocks.1.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.1.downsample.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.0.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.1.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.10.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.11.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.12.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.13.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.14.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.15.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.16.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.17.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.2.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.3.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.4.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.5.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.6.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.7.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.8.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.9.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.downsample.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.3.blocks.0.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.3.blocks.1.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'level_embed':
    dict(decay_mult=0.0, lr_mult=1.0),
    'query_embed':
    dict(decay_mult=0.0, lr_mult=1.0),
    'query_feat':
    dict(decay_mult=0.0, lr_mult=1.0),
    'relative_position_bias_table':
    dict(decay_mult=0.0, lr_mult=0.1)
})
data_root = 'data/ade/ADEChallengeData2016'
dataset_type = 'ADE20KDataset'
default_hooks = dict(
    checkpoint=dict(
        by_epoch=False, interval=5000, save_best='mIoU',
        type='CheckpointHook'),
    logger=dict(interval=50, log_metric_by_epoch=False, type='LoggerHook'),
    param_scheduler=dict(type='ParamSchedulerHook'),
    sampler_seed=dict(type='DistSamplerSeedHook'),
    timer=dict(type='IterTimerHook'),
    visualization=dict(type='SegVisualizationHook'))
default_scope = 'mmseg'
depths = [
    2,
    2,
    18,
    2,
]
embed_multi = dict(decay_mult=0.0, lr_mult=1.0)
env_cfg = dict(
    cudnn_benchmark=True,
    dist_cfg=dict(backend='nccl'),
    mp_cfg=dict(mp_start_method='fork', opencv_num_threads=0))
img_ratios = [
    0.5,
    0.75,
    1.0,
    1.25,
    1.5,
    1.75,
]
launcher = 'none'
load_from = '../checkpoint_files/ade20k/mask2former/mask2former_swin-s_8xb2-160k_ade20k-512x512_20221204_143905-e715144e.pth'
log_level = 'INFO'
log_processor = dict(by_epoch=False)
model = dict(
    backbone=dict(
        attn_drop_rate=0.0,
        depths=[
            2,
            2,
            18,
            2,
        ],
        drop_path_rate=0.3,
        drop_rate=0.0,
        embed_dims=96,
        frozen_stages=-1,
        init_cfg=dict(
            checkpoint=
            'https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/swin/swin_small_patch4_window7_224_20220317-7ba6d6dd.pth',
            type='Pretrained'),
        mlp_ratio=4,
        num_heads=[
            3,
            6,
            12,
            24,
        ],
        out_indices=(
            0,
            1,
            2,
            3,
        ),
        patch_norm=True,
        qk_scale=None,
        qkv_bias=True,
        type='SwinTransformer',
        window_size=7,
        with_cp=False),
    data_preprocessor=dict(
        bgr_to_rgb=True,
        corruption='brightness',
        mean=[
            123.675,
            116.28,
            103.53,
        ],
        pad_val=0,
        seg_pad_val=255,
        size=(
            512,
            512,
        ),
        std=[
            58.395,
            57.12,
            57.375,
        ],
        test_cfg=dict(size_divisor=32),
        type='SegDataPreProcessor'),
    decode_head=dict(
        align_corners=False,
        enforce_decoder_input_project=False,
        feat_channels=256,
        in_channels=[
            96,
            192,
            384,
            768,
        ],
        loss_cls=dict(
            class_weight=[
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                0.1,
            ],
            loss_weight=2.0,
            reduction='mean',
            type='mmdet.CrossEntropyLoss',
            use_sigmoid=False),
        loss_dice=dict(
            activate=True,
            eps=1.0,
            loss_weight=5.0,
            naive_dice=True,
            reduction='mean',
            type='mmdet.DiceLoss',
            use_sigmoid=True),
        loss_mask=dict(
            loss_weight=5.0,
            reduction='mean',
            type='mmdet.CrossEntropyLoss',
            use_sigmoid=True),
        num_classes=150,
        num_queries=100,
        num_transformer_feat_level=3,
        out_channels=256,
        pixel_decoder=dict(
            act_cfg=dict(type='ReLU'),
            encoder=dict(
                init_cfg=None,
                layer_cfg=dict(
                    ffn_cfg=dict(
                        act_cfg=dict(inplace=True, type='ReLU'),
                        embed_dims=256,
                        feedforward_channels=1024,
                        ffn_drop=0.0,
                        num_fcs=2),
                    self_attn_cfg=dict(
                        batch_first=True,
                        dropout=0.0,
                        embed_dims=256,
                        im2col_step=64,
                        init_cfg=None,
                        norm_cfg=None,
                        num_heads=8,
                        num_levels=3,
                        num_points=4)),
                num_layers=6),
            init_cfg=None,
            norm_cfg=dict(num_groups=32, type='GN'),
            num_outs=3,
            positional_encoding=dict(normalize=True, num_feats=128),
            type='mmdet.MSDeformAttnPixelDecoder'),
        positional_encoding=dict(normalize=True, num_feats=128),
        strides=[
            4,
            8,
            16,
            32,
        ],
        train_cfg=dict(
            assigner=dict(
                match_costs=[
                    dict(type='mmdet.ClassificationCost', weight=2.0),
                    dict(
                        type='mmdet.CrossEntropyLossCost',
                        use_sigmoid=True,
                        weight=5.0),
                    dict(
                        eps=1.0,
                        pred_act=True,
                        type='mmdet.DiceCost',
                        weight=5.0),
                ],
                type='mmdet.HungarianAssigner'),
            importance_sample_ratio=0.75,
            num_points=12544,
            oversample_ratio=3.0,
            sampler=dict(type='mmdet.MaskPseudoSampler')),
        transformer_decoder=dict(
            init_cfg=None,
            layer_cfg=dict(
                cross_attn_cfg=dict(
                    attn_drop=0.0,
                    batch_first=True,
                    dropout_layer=None,
                    embed_dims=256,
                    num_heads=8,
                    proj_drop=0.0),
                ffn_cfg=dict(
                    act_cfg=dict(inplace=True, type='ReLU'),
                    add_identity=True,
                    dropout_layer=None,
                    embed_dims=256,
                    feedforward_channels=2048,
                    ffn_drop=0.0,
                    num_fcs=2),
                self_attn_cfg=dict(
                    attn_drop=0.0,
                    batch_first=True,
                    dropout_layer=None,
                    embed_dims=256,
                    num_heads=8,
                    proj_drop=0.0)),
            num_layers=9,
            return_intermediate=True),
        type='Mask2FormerHead'),
    test_cfg=dict(mode='whole'),
    train_cfg=dict(),
    type='EncoderDecoder')
num_classes = 150
optim_wrapper = dict(
    clip_grad=dict(max_norm=0.01, norm_type=2),
    optimizer=dict(
        betas=(
            0.9,
            0.999,
        ),
        eps=1e-08,
        lr=0.0001,
        type='AdamW',
        weight_decay=0.05),
    paramwise_cfg=dict(
        custom_keys=dict({
            'absolute_pos_embed':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone':
            dict(decay_mult=1.0, lr_mult=0.1),
            'backbone.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.patch_embed.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.0.blocks.0.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.0.blocks.1.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.0.downsample.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.1.blocks.0.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.1.blocks.1.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.1.downsample.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.0.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.1.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.10.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.11.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.12.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.13.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.14.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.15.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.16.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.17.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.2.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.3.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.4.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.5.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.6.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.7.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.8.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.9.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.downsample.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.3.blocks.0.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.3.blocks.1.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'level_embed':
            dict(decay_mult=0.0, lr_mult=1.0),
            'query_embed':
            dict(decay_mult=0.0, lr_mult=1.0),
            'query_feat':
            dict(decay_mult=0.0, lr_mult=1.0),
            'relative_position_bias_table':
            dict(decay_mult=0.0, lr_mult=0.1)
        }),
        norm_decay_mult=0.0),
    type='OptimWrapper')
optimizer = dict(
    betas=(
        0.9,
        0.999,
    ),
    eps=1e-08,
    lr=0.0001,
    type='AdamW',
    weight_decay=0.05)
param_scheduler = [
    dict(
        begin=0,
        by_epoch=False,
        end=160000,
        eta_min=0,
        power=0.9,
        type='PolyLR'),
]
pretrained = 'https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/swin/swin_small_patch4_window7_224_20220317-7ba6d6dd.pth'
resume = False
test_cfg = dict(type='TestLoop')
test_dataloader = dict(
    batch_size=1,
    dataset=dict(
        data_prefix=dict(
            img_path='images/validation',
            seg_map_path='annotations/validation'),
        data_root='data/ade/ADEChallengeData2016',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(keep_ratio=True, scale=(
                2048,
                512,
            ), type='Resize'),
            dict(reduce_zero_label=True, type='LoadAnnotations'),
            dict(type='PackSegInputs'),
        ],
        type='ADE20KDataset'),
    num_workers=4,
    persistent_workers=True,
    sampler=dict(shuffle=False, type='DefaultSampler'))
test_evaluator = dict(
    iou_metrics=[
        'mIoU',
    ], type='IoUMetric')
test_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(keep_ratio=True, scale=(
        2048,
        512,
    ), type='Resize'),
    dict(reduce_zero_label=True, type='LoadAnnotations'),
    dict(type='PackSegInputs'),
]
train_cfg = dict(
    max_iters=160000, type='IterBasedTrainLoop', val_interval=5000)
train_dataloader = dict(
    batch_size=2,
    dataset=dict(
        data_prefix=dict(
            img_path='images/training', seg_map_path='annotations/training'),
        data_root='data/ade/ADEChallengeData2016',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(reduce_zero_label=True, type='LoadAnnotations'),
            dict(
                max_size=2048,
                resize_type='ResizeShortestEdge',
                scales=[
                    256,
                    307,
                    358,
                    409,
                    460,
                    512,
                    563,
                    614,
                    665,
                    716,
                    768,
                    819,
                    870,
                    921,
                    972,
                    1024,
                ],
                type='RandomChoiceResize'),
            dict(
                cat_max_ratio=0.75, crop_size=(
                    512,
                    512,
                ), type='RandomCrop'),
            dict(prob=0.5, type='RandomFlip'),
            dict(type='PhotoMetricDistortion'),
            dict(type='PackSegInputs'),
        ],
        type='ADE20KDataset'),
    num_workers=4,
    persistent_workers=True,
    sampler=dict(shuffle=True, type='InfiniteSampler'))
train_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(reduce_zero_label=True, type='LoadAnnotations'),
    dict(
        max_size=2048,
        resize_type='ResizeShortestEdge',
        scales=[
            256,
            307,
            358,
            409,
            460,
            512,
            563,
            614,
            665,
            716,
            768,
            819,
            870,
            921,
            972,
            1024,
        ],
        type='RandomChoiceResize'),
    dict(cat_max_ratio=0.75, crop_size=(
        512,
        512,
    ), type='RandomCrop'),
    dict(prob=0.5, type='RandomFlip'),
    dict(type='PhotoMetricDistortion'),
    dict(type='PackSegInputs'),
]
tta_model = dict(type='SegTTAModel')
tta_pipeline = [
    dict(backend_args=None, type='LoadImageFromFile'),
    dict(
        transforms=[
            [
                dict(keep_ratio=True, scale_factor=0.5, type='Resize'),
                dict(keep_ratio=True, scale_factor=0.75, type='Resize'),
                dict(keep_ratio=True, scale_factor=1.0, type='Resize'),
                dict(keep_ratio=True, scale_factor=1.25, type='Resize'),
                dict(keep_ratio=True, scale_factor=1.5, type='Resize'),
                dict(keep_ratio=True, scale_factor=1.75, type='Resize'),
            ],
            [
                dict(direction='horizontal', prob=0.0, type='RandomFlip'),
                dict(direction='horizontal', prob=1.0, type='RandomFlip'),
            ],
            [
                dict(type='LoadAnnotations'),
            ],
            [
                dict(type='PackSegInputs'),
            ],
        ],
        type='TestTimeAug'),
]
val_cfg = dict(type='ValLoop')
val_dataloader = dict(
    batch_size=1,
    dataset=dict(
        data_prefix=dict(
            img_path='images/validation',
            seg_map_path='annotations/validation'),
        data_root='data/ade/ADEChallengeData2016',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(keep_ratio=True, scale=(
                2048,
                512,
            ), type='Resize'),
            dict(reduce_zero_label=True, type='LoadAnnotations'),
            dict(type='PackSegInputs'),
        ],
        type='ADE20KDataset'),
    num_workers=4,
    persistent_workers=True,
    sampler=dict(shuffle=False, type='DefaultSampler'))
val_evaluator = dict(
    iou_metrics=[
        'mIoU',
    ], type='IoUMetric')
vis_backends = [
    dict(type='LocalVisBackend'),
]
visualizer = dict(
    name='visualizer',
    type='SegLocalVisualizer',
    vis_backends=[
        dict(type='LocalVisBackend'),
    ])
work_dir = '../corruptions/work_dirs/ade20k/mask2former/mask2former_swin-s_8xb2-160k_ade20k-512x512/brightness'

09/21 06:15:01 - mmengine - INFO - Distributed training is not used, all SyncBatchNorm (SyncBN) layers in the model will be automatically reverted to BatchNormXd layers if they are used.
09/21 06:15:01 - mmengine - INFO - Hooks will be executed in the following order:
before_run:
(VERY_HIGH   ) RuntimeInfoHook                    
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
before_train:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_train_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(NORMAL      ) DistSamplerSeedHook                
 -------------------- 
before_train_iter:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_train_iter:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(NORMAL      ) SegVisualizationHook               
(BELOW_NORMAL) LoggerHook                         
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
after_train_epoch:
(NORMAL      ) IterTimerHook                      
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_val:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
before_val_epoch:
(NORMAL      ) IterTimerHook                      
 -------------------- 
before_val_iter:
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_val_iter:
(NORMAL      ) IterTimerHook                      
(NORMAL      ) SegVisualizationHook               
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_val_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
after_val:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
after_train:
(VERY_HIGH   ) RuntimeInfoHook                    
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_test:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
before_test_epoch:
(NORMAL      ) IterTimerHook                      
 -------------------- 
before_test_iter:
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_test_iter:
(NORMAL      ) IterTimerHook                      
(NORMAL      ) SegVisualizationHook               
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_test_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_test:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
after_run:
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
09/21 06:15:01 - mmengine - WARNING - The prefix is not set in metric class IoUMetric.
Loads checkpoint by local backend from path: ../checkpoint_files/ade20k/mask2former/mask2former_swin-s_8xb2-160k_ade20k-512x512_20221204_143905-e715144e.pth
09/21 06:15:02 - mmengine - INFO - Load checkpoint from ../checkpoint_files/ade20k/mask2former/mask2former_swin-s_8xb2-160k_ade20k-512x512_20221204_143905-e715144e.pth
09/21 06:15:27 - mmengine - INFO - Iter(test) [  50/2000]    eta: 0:15:45  time: 0.4111  data_time: 0.0015  memory: 12814  
09/21 06:15:41 - mmengine - INFO - Iter(test) [ 100/2000]    eta: 0:12:05  time: 0.3211  data_time: 0.0017  memory: 12795  
09/21 06:15:52 - mmengine - INFO - Iter(test) [ 150/2000]    eta: 0:10:17  time: 0.2338  data_time: 0.0015  memory: 935  
09/21 06:16:06 - mmengine - INFO - Iter(test) [ 200/2000]    eta: 0:09:30  time: 0.2355  data_time: 0.0015  memory: 12835  
09/21 06:16:18 - mmengine - INFO - Iter(test) [ 250/2000]    eta: 0:08:51  time: 0.2159  data_time: 0.0015  memory: 12838  
09/21 06:16:30 - mmengine - INFO - Iter(test) [ 300/2000]    eta: 0:08:18  time: 0.2397  data_time: 0.0016  memory: 12803  
09/21 06:16:43 - mmengine - INFO - Iter(test) [ 350/2000]    eta: 0:07:53  time: 0.2210  data_time: 0.0015  memory: 12810  
09/21 06:16:55 - mmengine - INFO - Iter(test) [ 400/2000]    eta: 0:07:29  time: 0.2196  data_time: 0.0014  memory: 12775  
09/21 06:17:05 - mmengine - INFO - Iter(test) [ 450/2000]    eta: 0:07:01  time: 0.2129  data_time: 0.0014  memory: 975  
09/21 06:17:16 - mmengine - INFO - Iter(test) [ 500/2000]    eta: 0:06:40  time: 0.2118  data_time: 0.0014  memory: 935  
09/21 06:17:28 - mmengine - INFO - Iter(test) [ 550/2000]    eta: 0:06:22  time: 0.2382  data_time: 0.0015  memory: 1042  
09/21 06:17:39 - mmengine - INFO - Iter(test) [ 600/2000]    eta: 0:06:04  time: 0.2281  data_time: 0.0016  memory: 1040  
09/21 06:17:51 - mmengine - INFO - Iter(test) [ 650/2000]    eta: 0:05:50  time: 0.3203  data_time: 0.0014  memory: 12816  
09/21 06:18:03 - mmengine - INFO - Iter(test) [ 700/2000]    eta: 0:05:35  time: 0.2383  data_time: 0.0015  memory: 12806  
09/21 06:18:15 - mmengine - INFO - Iter(test) [ 750/2000]    eta: 0:05:20  time: 0.2138  data_time: 0.0014  memory: 1096  
09/21 06:18:25 - mmengine - INFO - Iter(test) [ 800/2000]    eta: 0:05:04  time: 0.2363  data_time: 0.0015  memory: 935  
09/21 06:18:37 - mmengine - INFO - Iter(test) [ 850/2000]    eta: 0:04:50  time: 0.2236  data_time: 0.0016  memory: 908  
09/21 06:18:48 - mmengine - INFO - Iter(test) [ 900/2000]    eta: 0:04:35  time: 0.2130  data_time: 0.0014  memory: 987  
09/21 06:18:59 - mmengine - INFO - Iter(test) [ 950/2000]    eta: 0:04:21  time: 0.2185  data_time: 0.0015  memory: 1015  
09/21 06:19:10 - mmengine - INFO - Iter(test) [1000/2000]    eta: 0:04:07  time: 0.2292  data_time: 0.0015  memory: 1015  
09/21 06:19:22 - mmengine - INFO - Iter(test) [1050/2000]    eta: 0:03:55  time: 0.2309  data_time: 0.0015  memory: 12819  
09/21 06:19:34 - mmengine - INFO - Iter(test) [1100/2000]    eta: 0:03:41  time: 0.2139  data_time: 0.0015  memory: 1012  
09/21 06:19:45 - mmengine - INFO - Iter(test) [1150/2000]    eta: 0:03:28  time: 0.2343  data_time: 0.0014  memory: 985  
09/21 06:19:56 - mmengine - INFO - Iter(test) [1200/2000]    eta: 0:03:15  time: 0.2146  data_time: 0.0015  memory: 1921  
09/21 06:20:08 - mmengine - INFO - Iter(test) [1250/2000]    eta: 0:03:03  time: 0.2254  data_time: 0.0014  memory: 12797  
09/21 06:20:18 - mmengine - INFO - Iter(test) [1300/2000]    eta: 0:02:50  time: 0.2181  data_time: 0.0014  memory: 935  
09/21 06:20:29 - mmengine - INFO - Iter(test) [1350/2000]    eta: 0:02:37  time: 0.2233  data_time: 0.0014  memory: 935  
09/21 06:20:40 - mmengine - INFO - Iter(test) [1400/2000]    eta: 0:02:24  time: 0.2271  data_time: 0.0014  memory: 1012  
09/21 06:20:52 - mmengine - INFO - Iter(test) [1450/2000]    eta: 0:02:12  time: 0.2362  data_time: 0.0014  memory: 1015  
09/21 06:21:02 - mmengine - INFO - Iter(test) [1500/2000]    eta: 0:01:59  time: 0.2150  data_time: 0.0014  memory: 933  
09/21 06:21:14 - mmengine - INFO - Iter(test) [1550/2000]    eta: 0:01:47  time: 0.2249  data_time: 0.0015  memory: 1015  
09/21 06:21:25 - mmengine - INFO - Iter(test) [1600/2000]    eta: 0:01:35  time: 0.2324  data_time: 0.0015  memory: 908  
09/21 06:21:37 - mmengine - INFO - Iter(test) [1650/2000]    eta: 0:01:23  time: 0.2019  data_time: 0.0014  memory: 12807  
09/21 06:21:49 - mmengine - INFO - Iter(test) [1700/2000]    eta: 0:01:11  time: 0.2347  data_time: 0.0015  memory: 1012  
09/21 06:22:00 - mmengine - INFO - Iter(test) [1750/2000]    eta: 0:00:59  time: 0.2135  data_time: 0.0014  memory: 1039  
09/21 06:22:11 - mmengine - INFO - Iter(test) [1800/2000]    eta: 0:00:47  time: 0.2353  data_time: 0.0016  memory: 935  
09/21 06:22:22 - mmengine - INFO - Iter(test) [1850/2000]    eta: 0:00:35  time: 0.2290  data_time: 0.0015  memory: 854  
09/21 06:22:33 - mmengine - INFO - Iter(test) [1900/2000]    eta: 0:00:23  time: 0.2109  data_time: 0.0014  memory: 1068  
09/21 06:22:44 - mmengine - INFO - Iter(test) [1950/2000]    eta: 0:00:11  time: 0.2247  data_time: 0.0014  memory: 1306  
09/21 06:22:55 - mmengine - INFO - Iter(test) [2000/2000]    eta: 0:00:00  time: 0.1983  data_time: 0.0013  memory: 1094  
09/21 06:22:55 - mmengine - INFO - per class results:
09/21 06:22:55 - mmengine - INFO - 
+---------------------+-------+-------+
|        Class        |  IoU  |  Acc  |
+---------------------+-------+-------+
|         wall        | 78.49 | 87.76 |
|       building      | 83.45 | 91.95 |
|         sky         | 94.58 | 97.45 |
|        floor        | 81.79 | 90.07 |
|         tree        | 75.38 | 86.62 |
|       ceiling       | 84.49 | 90.31 |
|         road        | 84.33 | 90.32 |
|         bed         | 89.78 | 95.28 |
|      windowpane     | 60.12 | 79.07 |
|        grass        | 73.51 | 85.77 |
|       cabinet       | 59.24 | 72.67 |
|       sidewalk      |  67.5 | 79.61 |
|        person       | 83.79 |  91.0 |
|        earth        |  36.5 | 54.66 |
|         door        | 49.39 | 67.57 |
|        table        | 65.36 | 80.01 |
|       mountain      | 63.79 |  79.5 |
|        plant        | 51.33 | 64.54 |
|       curtain       | 73.28 | 84.27 |
|        chair        | 59.99 | 73.56 |
|         car         | 85.13 | 92.82 |
|        water        | 61.73 |  82.3 |
|       painting      | 72.33 | 86.03 |
|         sofa        | 61.67 | 72.85 |
|        shelf        | 41.57 | 60.31 |
|        house        | 50.53 | 75.87 |
|         sea         | 71.42 | 89.95 |
|        mirror       | 67.71 | 79.72 |
|         rug         | 59.01 | 69.59 |
|        field        | 32.29 | 48.14 |
|       armchair      | 43.02 | 72.27 |
|         seat        | 63.04 | 83.38 |
|        fence        | 47.49 | 64.92 |
|         desk        | 53.59 | 72.89 |
|         rock        | 51.49 | 73.01 |
|       wardrobe      | 54.96 | 76.38 |
|         lamp        | 67.28 | 80.09 |
|       bathtub       | 78.91 | 91.11 |
|       railing       | 36.55 | 54.28 |
|       cushion       | 58.57 | 73.42 |
|         base        | 34.87 | 53.64 |
|         box         | 25.19 | 34.21 |
|        column       | 50.41 | 59.43 |
|      signboard      | 37.35 | 51.83 |
|   chest of drawers  |  35.0 | 59.97 |
|       counter       | 25.76 | 39.69 |
|         sand        | 36.33 |  60.0 |
|         sink        | 74.78 | 82.53 |
|      skyscraper     | 33.39 |  41.4 |
|      fireplace      | 70.28 | 91.42 |
|     refrigerator    | 78.68 | 86.48 |
|      grandstand     | 43.26 | 64.52 |
|         path        | 24.21 | 40.94 |
|        stairs       | 29.19 | 36.82 |
|        runway       | 65.44 | 82.26 |
|         case        | 45.43 | 58.01 |
|      pool table     | 94.05 | 96.71 |
|        pillow       | 62.83 | 73.84 |
|     screen door     | 71.69 | 76.95 |
|       stairway      | 33.24 | 48.48 |
|        river        | 22.98 |  28.2 |
|        bridge       | 63.06 | 87.57 |
|       bookcase      |  35.5 | 60.75 |
|        blind        | 41.15 | 45.99 |
|     coffee table    | 64.52 | 86.46 |
|        toilet       | 86.79 | 91.39 |
|        flower       | 46.08 | 65.08 |
|         book        | 52.96 | 70.94 |
|         hill        | 18.03 | 26.32 |
|        bench        | 56.94 | 70.62 |
|      countertop     | 55.07 | 73.21 |
|        stove        | 76.81 | 83.97 |
|         palm        | 50.99 | 73.29 |
|    kitchen island   | 40.63 | 74.33 |
|       computer      | 73.44 | 83.05 |
|     swivel chair    | 45.18 | 65.85 |
|         boat        | 75.65 | 89.68 |
|         bar         | 59.82 | 74.88 |
|    arcade machine   | 32.54 | 35.45 |
|        hovel        | 37.42 | 47.33 |
|         bus         | 84.27 | 96.55 |
|        towel        | 68.82 | 78.18 |
|        light        | 61.61 | 75.64 |
|        truck        | 37.06 | 52.94 |
|        tower        | 36.22 | 62.16 |
|      chandelier     | 70.02 | 80.47 |
|        awning       | 34.34 | 45.76 |
|     streetlight     | 32.91 | 46.63 |
|        booth        | 35.57 | 53.16 |
| television receiver | 58.41 | 79.73 |
|       airplane      | 56.55 | 66.06 |
|      dirt track     |  0.0  |  0.0  |
|       apparel       | 29.86 | 47.03 |
|         pole        | 27.41 | 40.86 |
|         land        |  8.12 | 10.85 |
|      bannister      | 16.14 | 24.66 |
|      escalator      | 21.08 | 21.91 |
|       ottoman       | 45.19 | 66.48 |
|        bottle       | 21.27 | 25.48 |
|        buffet       | 36.47 | 46.76 |
|        poster       | 32.02 | 46.37 |
|        stage        | 10.24 | 16.88 |
|         van         |  51.8 | 72.78 |
|         ship        |  9.06 |  9.19 |
|       fountain      | 22.56 |  23.3 |
|    conveyer belt    |  52.5 | 68.92 |
|        canopy       | 14.02 | 21.04 |
|        washer       | 71.82 | 75.27 |
|      plaything      | 31.38 | 52.36 |
|    swimming pool    | 61.71 | 62.62 |
|        stool        | 49.72 |  58.1 |
|        barrel       | 66.12 |  74.0 |
|        basket       | 39.73 | 50.87 |
|      waterfall      | 44.52 |  63.0 |
|         tent        |  96.4 | 98.09 |
|         bag         | 19.43 |  24.4 |
|       minibike      | 75.83 | 87.25 |
|        cradle       |  82.9 |  97.1 |
|         oven        | 53.69 |  66.1 |
|         ball        | 30.13 | 73.93 |
|         food        | 60.41 | 78.49 |
|         step        |  8.58 |  16.6 |
|         tank        | 48.95 |  51.4 |
|      trade name     | 29.13 | 35.25 |
|      microwave      |  87.0 | 95.12 |
|         pot         | 52.55 | 65.59 |
|        animal       | 71.01 | 74.49 |
|       bicycle       | 62.48 | 80.14 |
|         lake        |  7.71 |  9.58 |
|      dishwasher     | 78.44 | 87.96 |
|        screen       | 74.42 |  90.1 |
|       blanket       | 15.57 | 18.88 |
|      sculpture      | 53.15 | 76.09 |
|         hood        | 68.55 | 72.28 |
|        sconce       |  50.2 | 62.56 |
|         vase        | 44.75 |  62.0 |
|    traffic light    | 35.33 | 62.51 |
|         tray        | 12.05 | 24.26 |
|        ashcan       | 41.75 | 60.32 |
|         fan         | 64.76 | 79.21 |
|         pier        | 14.17 | 15.43 |
|      crt screen     |  4.42 | 12.54 |
|        plate        | 57.61 | 73.69 |
|       monitor       |  2.13 |  2.54 |
|    bulletin board   |  51.5 | 66.84 |
|        shower       |  9.25 | 24.92 |
|       radiator      | 64.42 | 74.48 |
|        glass        | 20.71 | 22.63 |
|        clock        | 34.02 |  42.6 |
|         flag        | 36.65 | 40.89 |
+---------------------+-------+-------+
09/21 06:22:55 - mmengine - INFO - Iter(test) [2000/2000]    aAcc: 83.6100  mIoU: 50.2700  mAcc: 63.0500  data_time: 0.0016  time: 0.2362
Finished processing corruption type: brightness
Processing corruption type: contrast
09/21 06:22:59 - mmengine - INFO - 
------------------------------------------------------------
System environment:
    sys.platform: linux
    Python: 3.10.13 | packaged by conda-forge | (main, Dec 23 2023, 15:36:39) [GCC 12.3.0]
    CUDA available: True
    MUSA available: False
    numpy_random_seed: 1005995806
    GPU 0: Tesla V100-SXM2-32GB
    CUDA_HOME: /opt/bwhpc/common/devel/cuda/11.7
    NVCC: Cuda compilation tools, release 11.7, V11.7.99
    GCC: gcc (GCC) 8.5.0 20210514 (Red Hat 8.5.0-18)
    PyTorch: 1.13.1
    PyTorch compiling details: PyTorch built with:
  - GCC 9.3
  - C++ Version: 201402
  - Intel(R) oneAPI Math Kernel Library Version 2023.1-Product Build 20230303 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v2.6.0 (Git Hash 52b5f107dd9cf10910aaa19cb47f3abf9b349815)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - LAPACK is enabled (usually provided by MKL)
  - NNPACK is enabled
  - CPU capability usage: AVX2
  - CUDA Runtime 11.7
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_61,code=sm_61;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86;-gencode;arch=compute_37,code=compute_37
  - CuDNN 8.5
  - Magma 2.6.1
  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.7, CUDNN_VERSION=8.5.0, CXX_COMPILER=/opt/rh/devtoolset-9/root/usr/bin/c++, CXX_FLAGS= -fabi-version=11 -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -DEDGE_PROFILER_USE_KINETO -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Werror=non-virtual-dtor -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wunused-local-typedefs -Wno-unused-parameter -Wno-unused-function -Wno-unused-result -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Werror=cast-function-type -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.13.1, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, USE_ROCM=OFF, 

    TorchVision: 0.14.1
    OpenCV: 3.4.18
    MMEngine: 0.10.4

Runtime environment:
    cudnn_benchmark: True
    mp_cfg: {'mp_start_method': 'fork', 'opencv_num_threads': 0}
    dist_cfg: {'backend': 'nccl'}
    seed: 1005995806
    Distributed launcher: none
    Distributed training: False
    GPU number: 1
------------------------------------------------------------

09/21 06:23:00 - mmengine - INFO - Config:
auto_scale_lr = dict(base_batch_size=16, enable=False)
backbone_embed_multi = dict(decay_mult=0.0, lr_mult=0.1)
backbone_norm_multi = dict(decay_mult=0.0, lr_mult=0.1)
crop_size = (
    512,
    512,
)
custom_imports = dict(allow_failed_imports=False, imports='mmdet.models')
custom_keys = dict({
    'absolute_pos_embed':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone':
    dict(decay_mult=1.0, lr_mult=0.1),
    'backbone.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.patch_embed.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.0.blocks.0.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.0.blocks.1.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.0.downsample.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.1.blocks.0.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.1.blocks.1.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.1.downsample.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.0.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.1.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.10.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.11.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.12.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.13.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.14.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.15.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.16.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.17.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.2.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.3.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.4.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.5.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.6.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.7.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.8.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.9.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.downsample.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.3.blocks.0.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.3.blocks.1.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'level_embed':
    dict(decay_mult=0.0, lr_mult=1.0),
    'query_embed':
    dict(decay_mult=0.0, lr_mult=1.0),
    'query_feat':
    dict(decay_mult=0.0, lr_mult=1.0),
    'relative_position_bias_table':
    dict(decay_mult=0.0, lr_mult=0.1)
})
data_root = 'data/ade/ADEChallengeData2016'
dataset_type = 'ADE20KDataset'
default_hooks = dict(
    checkpoint=dict(
        by_epoch=False, interval=5000, save_best='mIoU',
        type='CheckpointHook'),
    logger=dict(interval=50, log_metric_by_epoch=False, type='LoggerHook'),
    param_scheduler=dict(type='ParamSchedulerHook'),
    sampler_seed=dict(type='DistSamplerSeedHook'),
    timer=dict(type='IterTimerHook'),
    visualization=dict(type='SegVisualizationHook'))
default_scope = 'mmseg'
depths = [
    2,
    2,
    18,
    2,
]
embed_multi = dict(decay_mult=0.0, lr_mult=1.0)
env_cfg = dict(
    cudnn_benchmark=True,
    dist_cfg=dict(backend='nccl'),
    mp_cfg=dict(mp_start_method='fork', opencv_num_threads=0))
img_ratios = [
    0.5,
    0.75,
    1.0,
    1.25,
    1.5,
    1.75,
]
launcher = 'none'
load_from = '../checkpoint_files/ade20k/mask2former/mask2former_swin-s_8xb2-160k_ade20k-512x512_20221204_143905-e715144e.pth'
log_level = 'INFO'
log_processor = dict(by_epoch=False)
model = dict(
    backbone=dict(
        attn_drop_rate=0.0,
        depths=[
            2,
            2,
            18,
            2,
        ],
        drop_path_rate=0.3,
        drop_rate=0.0,
        embed_dims=96,
        frozen_stages=-1,
        init_cfg=dict(
            checkpoint=
            'https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/swin/swin_small_patch4_window7_224_20220317-7ba6d6dd.pth',
            type='Pretrained'),
        mlp_ratio=4,
        num_heads=[
            3,
            6,
            12,
            24,
        ],
        out_indices=(
            0,
            1,
            2,
            3,
        ),
        patch_norm=True,
        qk_scale=None,
        qkv_bias=True,
        type='SwinTransformer',
        window_size=7,
        with_cp=False),
    data_preprocessor=dict(
        bgr_to_rgb=True,
        corruption='contrast',
        mean=[
            123.675,
            116.28,
            103.53,
        ],
        pad_val=0,
        seg_pad_val=255,
        size=(
            512,
            512,
        ),
        std=[
            58.395,
            57.12,
            57.375,
        ],
        test_cfg=dict(size_divisor=32),
        type='SegDataPreProcessor'),
    decode_head=dict(
        align_corners=False,
        enforce_decoder_input_project=False,
        feat_channels=256,
        in_channels=[
            96,
            192,
            384,
            768,
        ],
        loss_cls=dict(
            class_weight=[
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                0.1,
            ],
            loss_weight=2.0,
            reduction='mean',
            type='mmdet.CrossEntropyLoss',
            use_sigmoid=False),
        loss_dice=dict(
            activate=True,
            eps=1.0,
            loss_weight=5.0,
            naive_dice=True,
            reduction='mean',
            type='mmdet.DiceLoss',
            use_sigmoid=True),
        loss_mask=dict(
            loss_weight=5.0,
            reduction='mean',
            type='mmdet.CrossEntropyLoss',
            use_sigmoid=True),
        num_classes=150,
        num_queries=100,
        num_transformer_feat_level=3,
        out_channels=256,
        pixel_decoder=dict(
            act_cfg=dict(type='ReLU'),
            encoder=dict(
                init_cfg=None,
                layer_cfg=dict(
                    ffn_cfg=dict(
                        act_cfg=dict(inplace=True, type='ReLU'),
                        embed_dims=256,
                        feedforward_channels=1024,
                        ffn_drop=0.0,
                        num_fcs=2),
                    self_attn_cfg=dict(
                        batch_first=True,
                        dropout=0.0,
                        embed_dims=256,
                        im2col_step=64,
                        init_cfg=None,
                        norm_cfg=None,
                        num_heads=8,
                        num_levels=3,
                        num_points=4)),
                num_layers=6),
            init_cfg=None,
            norm_cfg=dict(num_groups=32, type='GN'),
            num_outs=3,
            positional_encoding=dict(normalize=True, num_feats=128),
            type='mmdet.MSDeformAttnPixelDecoder'),
        positional_encoding=dict(normalize=True, num_feats=128),
        strides=[
            4,
            8,
            16,
            32,
        ],
        train_cfg=dict(
            assigner=dict(
                match_costs=[
                    dict(type='mmdet.ClassificationCost', weight=2.0),
                    dict(
                        type='mmdet.CrossEntropyLossCost',
                        use_sigmoid=True,
                        weight=5.0),
                    dict(
                        eps=1.0,
                        pred_act=True,
                        type='mmdet.DiceCost',
                        weight=5.0),
                ],
                type='mmdet.HungarianAssigner'),
            importance_sample_ratio=0.75,
            num_points=12544,
            oversample_ratio=3.0,
            sampler=dict(type='mmdet.MaskPseudoSampler')),
        transformer_decoder=dict(
            init_cfg=None,
            layer_cfg=dict(
                cross_attn_cfg=dict(
                    attn_drop=0.0,
                    batch_first=True,
                    dropout_layer=None,
                    embed_dims=256,
                    num_heads=8,
                    proj_drop=0.0),
                ffn_cfg=dict(
                    act_cfg=dict(inplace=True, type='ReLU'),
                    add_identity=True,
                    dropout_layer=None,
                    embed_dims=256,
                    feedforward_channels=2048,
                    ffn_drop=0.0,
                    num_fcs=2),
                self_attn_cfg=dict(
                    attn_drop=0.0,
                    batch_first=True,
                    dropout_layer=None,
                    embed_dims=256,
                    num_heads=8,
                    proj_drop=0.0)),
            num_layers=9,
            return_intermediate=True),
        type='Mask2FormerHead'),
    test_cfg=dict(mode='whole'),
    train_cfg=dict(),
    type='EncoderDecoder')
num_classes = 150
optim_wrapper = dict(
    clip_grad=dict(max_norm=0.01, norm_type=2),
    optimizer=dict(
        betas=(
            0.9,
            0.999,
        ),
        eps=1e-08,
        lr=0.0001,
        type='AdamW',
        weight_decay=0.05),
    paramwise_cfg=dict(
        custom_keys=dict({
            'absolute_pos_embed':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone':
            dict(decay_mult=1.0, lr_mult=0.1),
            'backbone.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.patch_embed.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.0.blocks.0.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.0.blocks.1.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.0.downsample.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.1.blocks.0.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.1.blocks.1.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.1.downsample.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.0.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.1.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.10.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.11.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.12.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.13.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.14.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.15.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.16.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.17.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.2.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.3.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.4.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.5.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.6.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.7.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.8.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.9.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.downsample.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.3.blocks.0.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.3.blocks.1.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'level_embed':
            dict(decay_mult=0.0, lr_mult=1.0),
            'query_embed':
            dict(decay_mult=0.0, lr_mult=1.0),
            'query_feat':
            dict(decay_mult=0.0, lr_mult=1.0),
            'relative_position_bias_table':
            dict(decay_mult=0.0, lr_mult=0.1)
        }),
        norm_decay_mult=0.0),
    type='OptimWrapper')
optimizer = dict(
    betas=(
        0.9,
        0.999,
    ),
    eps=1e-08,
    lr=0.0001,
    type='AdamW',
    weight_decay=0.05)
param_scheduler = [
    dict(
        begin=0,
        by_epoch=False,
        end=160000,
        eta_min=0,
        power=0.9,
        type='PolyLR'),
]
pretrained = 'https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/swin/swin_small_patch4_window7_224_20220317-7ba6d6dd.pth'
resume = False
test_cfg = dict(type='TestLoop')
test_dataloader = dict(
    batch_size=1,
    dataset=dict(
        data_prefix=dict(
            img_path='images/validation',
            seg_map_path='annotations/validation'),
        data_root='data/ade/ADEChallengeData2016',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(keep_ratio=True, scale=(
                2048,
                512,
            ), type='Resize'),
            dict(reduce_zero_label=True, type='LoadAnnotations'),
            dict(type='PackSegInputs'),
        ],
        type='ADE20KDataset'),
    num_workers=4,
    persistent_workers=True,
    sampler=dict(shuffle=False, type='DefaultSampler'))
test_evaluator = dict(
    iou_metrics=[
        'mIoU',
    ], type='IoUMetric')
test_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(keep_ratio=True, scale=(
        2048,
        512,
    ), type='Resize'),
    dict(reduce_zero_label=True, type='LoadAnnotations'),
    dict(type='PackSegInputs'),
]
train_cfg = dict(
    max_iters=160000, type='IterBasedTrainLoop', val_interval=5000)
train_dataloader = dict(
    batch_size=2,
    dataset=dict(
        data_prefix=dict(
            img_path='images/training', seg_map_path='annotations/training'),
        data_root='data/ade/ADEChallengeData2016',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(reduce_zero_label=True, type='LoadAnnotations'),
            dict(
                max_size=2048,
                resize_type='ResizeShortestEdge',
                scales=[
                    256,
                    307,
                    358,
                    409,
                    460,
                    512,
                    563,
                    614,
                    665,
                    716,
                    768,
                    819,
                    870,
                    921,
                    972,
                    1024,
                ],
                type='RandomChoiceResize'),
            dict(
                cat_max_ratio=0.75, crop_size=(
                    512,
                    512,
                ), type='RandomCrop'),
            dict(prob=0.5, type='RandomFlip'),
            dict(type='PhotoMetricDistortion'),
            dict(type='PackSegInputs'),
        ],
        type='ADE20KDataset'),
    num_workers=4,
    persistent_workers=True,
    sampler=dict(shuffle=True, type='InfiniteSampler'))
train_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(reduce_zero_label=True, type='LoadAnnotations'),
    dict(
        max_size=2048,
        resize_type='ResizeShortestEdge',
        scales=[
            256,
            307,
            358,
            409,
            460,
            512,
            563,
            614,
            665,
            716,
            768,
            819,
            870,
            921,
            972,
            1024,
        ],
        type='RandomChoiceResize'),
    dict(cat_max_ratio=0.75, crop_size=(
        512,
        512,
    ), type='RandomCrop'),
    dict(prob=0.5, type='RandomFlip'),
    dict(type='PhotoMetricDistortion'),
    dict(type='PackSegInputs'),
]
tta_model = dict(type='SegTTAModel')
tta_pipeline = [
    dict(backend_args=None, type='LoadImageFromFile'),
    dict(
        transforms=[
            [
                dict(keep_ratio=True, scale_factor=0.5, type='Resize'),
                dict(keep_ratio=True, scale_factor=0.75, type='Resize'),
                dict(keep_ratio=True, scale_factor=1.0, type='Resize'),
                dict(keep_ratio=True, scale_factor=1.25, type='Resize'),
                dict(keep_ratio=True, scale_factor=1.5, type='Resize'),
                dict(keep_ratio=True, scale_factor=1.75, type='Resize'),
            ],
            [
                dict(direction='horizontal', prob=0.0, type='RandomFlip'),
                dict(direction='horizontal', prob=1.0, type='RandomFlip'),
            ],
            [
                dict(type='LoadAnnotations'),
            ],
            [
                dict(type='PackSegInputs'),
            ],
        ],
        type='TestTimeAug'),
]
val_cfg = dict(type='ValLoop')
val_dataloader = dict(
    batch_size=1,
    dataset=dict(
        data_prefix=dict(
            img_path='images/validation',
            seg_map_path='annotations/validation'),
        data_root='data/ade/ADEChallengeData2016',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(keep_ratio=True, scale=(
                2048,
                512,
            ), type='Resize'),
            dict(reduce_zero_label=True, type='LoadAnnotations'),
            dict(type='PackSegInputs'),
        ],
        type='ADE20KDataset'),
    num_workers=4,
    persistent_workers=True,
    sampler=dict(shuffle=False, type='DefaultSampler'))
val_evaluator = dict(
    iou_metrics=[
        'mIoU',
    ], type='IoUMetric')
vis_backends = [
    dict(type='LocalVisBackend'),
]
visualizer = dict(
    name='visualizer',
    type='SegLocalVisualizer',
    vis_backends=[
        dict(type='LocalVisBackend'),
    ])
work_dir = '../corruptions/work_dirs/ade20k/mask2former/mask2former_swin-s_8xb2-160k_ade20k-512x512/contrast'

09/21 06:23:03 - mmengine - INFO - Distributed training is not used, all SyncBatchNorm (SyncBN) layers in the model will be automatically reverted to BatchNormXd layers if they are used.
09/21 06:23:03 - mmengine - INFO - Hooks will be executed in the following order:
before_run:
(VERY_HIGH   ) RuntimeInfoHook                    
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
before_train:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_train_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(NORMAL      ) DistSamplerSeedHook                
 -------------------- 
before_train_iter:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_train_iter:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(NORMAL      ) SegVisualizationHook               
(BELOW_NORMAL) LoggerHook                         
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
after_train_epoch:
(NORMAL      ) IterTimerHook                      
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_val:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
before_val_epoch:
(NORMAL      ) IterTimerHook                      
 -------------------- 
before_val_iter:
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_val_iter:
(NORMAL      ) IterTimerHook                      
(NORMAL      ) SegVisualizationHook               
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_val_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
after_val:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
after_train:
(VERY_HIGH   ) RuntimeInfoHook                    
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_test:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
before_test_epoch:
(NORMAL      ) IterTimerHook                      
 -------------------- 
before_test_iter:
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_test_iter:
(NORMAL      ) IterTimerHook                      
(NORMAL      ) SegVisualizationHook               
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_test_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_test:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
after_run:
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
09/21 06:23:03 - mmengine - WARNING - The prefix is not set in metric class IoUMetric.
Loads checkpoint by local backend from path: ../checkpoint_files/ade20k/mask2former/mask2former_swin-s_8xb2-160k_ade20k-512x512_20221204_143905-e715144e.pth
09/21 06:23:04 - mmengine - INFO - Load checkpoint from ../checkpoint_files/ade20k/mask2former/mask2former_swin-s_8xb2-160k_ade20k-512x512_20221204_143905-e715144e.pth
09/21 06:23:22 - mmengine - INFO - Iter(test) [  50/2000]    eta: 0:11:41  time: 0.2644  data_time: 0.0015  memory: 12814  
09/21 06:23:30 - mmengine - INFO - Iter(test) [ 100/2000]    eta: 0:07:57  time: 0.1716  data_time: 0.0015  memory: 12795  
09/21 06:23:34 - mmengine - INFO - Iter(test) [ 150/2000]    eta: 0:06:03  time: 0.0841  data_time: 0.0015  memory: 935  
09/21 06:23:40 - mmengine - INFO - Iter(test) [ 200/2000]    eta: 0:05:21  time: 0.0837  data_time: 0.0015  memory: 12835  
09/21 06:23:46 - mmengine - INFO - Iter(test) [ 250/2000]    eta: 0:04:53  time: 0.0946  data_time: 0.0014  memory: 12838  
09/21 06:23:52 - mmengine - INFO - Iter(test) [ 300/2000]    eta: 0:04:28  time: 0.0859  data_time: 0.0015  memory: 12803  
09/21 06:23:57 - mmengine - INFO - Iter(test) [ 350/2000]    eta: 0:04:09  time: 0.0829  data_time: 0.0014  memory: 12810  
09/21 06:24:03 - mmengine - INFO - Iter(test) [ 400/2000]    eta: 0:03:52  time: 0.0973  data_time: 0.0013  memory: 12775  
09/21 06:24:07 - mmengine - INFO - Iter(test) [ 450/2000]    eta: 0:03:36  time: 0.0947  data_time: 0.0014  memory: 975  
09/21 06:24:12 - mmengine - INFO - Iter(test) [ 500/2000]    eta: 0:03:22  time: 0.0835  data_time: 0.0015  memory: 935  
09/21 06:24:16 - mmengine - INFO - Iter(test) [ 550/2000]    eta: 0:03:09  time: 0.0853  data_time: 0.0015  memory: 1042  
09/21 06:24:21 - mmengine - INFO - Iter(test) [ 600/2000]    eta: 0:02:57  time: 0.0848  data_time: 0.0015  memory: 1040  
09/21 06:24:26 - mmengine - INFO - Iter(test) [ 650/2000]    eta: 0:02:49  time: 0.1818  data_time: 0.0013  memory: 12816  
09/21 06:24:32 - mmengine - INFO - Iter(test) [ 700/2000]    eta: 0:02:41  time: 0.0869  data_time: 0.0016  memory: 12806  
09/21 06:24:36 - mmengine - INFO - Iter(test) [ 750/2000]    eta: 0:02:32  time: 0.0826  data_time: 0.0014  memory: 1096  
09/21 06:24:40 - mmengine - INFO - Iter(test) [ 800/2000]    eta: 0:02:23  time: 0.0837  data_time: 0.0016  memory: 935  
09/21 06:24:44 - mmengine - INFO - Iter(test) [ 850/2000]    eta: 0:02:15  time: 0.0962  data_time: 0.0016  memory: 908  
09/21 06:24:49 - mmengine - INFO - Iter(test) [ 900/2000]    eta: 0:02:07  time: 0.0918  data_time: 0.0014  memory: 987  
09/21 06:24:54 - mmengine - INFO - Iter(test) [ 950/2000]    eta: 0:02:00  time: 0.0820  data_time: 0.0015  memory: 1015  
09/21 06:24:58 - mmengine - INFO - Iter(test) [1000/2000]    eta: 0:01:53  time: 0.0818  data_time: 0.0015  memory: 1015  
09/21 06:25:03 - mmengine - INFO - Iter(test) [1050/2000]    eta: 0:01:47  time: 0.0978  data_time: 0.0015  memory: 12819  
09/21 06:25:08 - mmengine - INFO - Iter(test) [1100/2000]    eta: 0:01:40  time: 0.0981  data_time: 0.0015  memory: 1012  
09/21 06:25:12 - mmengine - INFO - Iter(test) [1150/2000]    eta: 0:01:34  time: 0.0824  data_time: 0.0015  memory: 985  
09/21 06:25:16 - mmengine - INFO - Iter(test) [1200/2000]    eta: 0:01:27  time: 0.0813  data_time: 0.0015  memory: 1921  
09/21 06:25:21 - mmengine - INFO - Iter(test) [1250/2000]    eta: 0:01:22  time: 0.0905  data_time: 0.0014  memory: 12797  
09/21 06:25:26 - mmengine - INFO - Iter(test) [1300/2000]    eta: 0:01:16  time: 0.0964  data_time: 0.0015  memory: 935  
09/21 06:25:31 - mmengine - INFO - Iter(test) [1350/2000]    eta: 0:01:10  time: 0.0941  data_time: 0.0014  memory: 935  
09/21 06:25:35 - mmengine - INFO - Iter(test) [1400/2000]    eta: 0:01:04  time: 0.0854  data_time: 0.0014  memory: 1012  
09/21 06:25:39 - mmengine - INFO - Iter(test) [1450/2000]    eta: 0:00:58  time: 0.0846  data_time: 0.0014  memory: 1015  
09/21 06:25:44 - mmengine - INFO - Iter(test) [1500/2000]    eta: 0:00:53  time: 0.0941  data_time: 0.0014  memory: 933  
09/21 06:25:49 - mmengine - INFO - Iter(test) [1550/2000]    eta: 0:00:47  time: 0.0973  data_time: 0.0015  memory: 1015  
09/21 06:25:53 - mmengine - INFO - Iter(test) [1600/2000]    eta: 0:00:42  time: 0.0829  data_time: 0.0016  memory: 908  
09/21 06:25:58 - mmengine - INFO - Iter(test) [1650/2000]    eta: 0:00:36  time: 0.0807  data_time: 0.0014  memory: 12807  
09/21 06:26:02 - mmengine - INFO - Iter(test) [1700/2000]    eta: 0:00:31  time: 0.0968  data_time: 0.0016  memory: 1012  
09/21 06:26:07 - mmengine - INFO - Iter(test) [1750/2000]    eta: 0:00:26  time: 0.0964  data_time: 0.0014  memory: 1039  
09/21 06:26:12 - mmengine - INFO - Iter(test) [1800/2000]    eta: 0:00:20  time: 0.0848  data_time: 0.0016  memory: 935  
09/21 06:26:16 - mmengine - INFO - Iter(test) [1850/2000]    eta: 0:00:15  time: 0.0849  data_time: 0.0016  memory: 854  
09/21 06:26:20 - mmengine - INFO - Iter(test) [1900/2000]    eta: 0:00:10  time: 0.0833  data_time: 0.0014  memory: 1068  
09/21 06:26:25 - mmengine - INFO - Iter(test) [1950/2000]    eta: 0:00:05  time: 0.0962  data_time: 0.0014  memory: 1306  
09/21 06:26:30 - mmengine - INFO - Iter(test) [2000/2000]    eta: 0:00:00  time: 0.0915  data_time: 0.0013  memory: 1094  
09/21 06:26:30 - mmengine - INFO - per class results:
09/21 06:26:30 - mmengine - INFO - 
+---------------------+-------+-------+
|        Class        |  IoU  |  Acc  |
+---------------------+-------+-------+
|         wall        | 77.99 | 88.08 |
|       building      | 83.16 | 91.74 |
|         sky         | 94.57 | 97.05 |
|        floor        |  81.6 | 89.99 |
|         tree        | 74.88 | 87.69 |
|       ceiling       | 84.32 | 90.75 |
|         road        | 84.62 | 90.38 |
|         bed         | 90.28 |  95.4 |
|      windowpane     | 60.33 | 78.22 |
|        grass        | 73.63 | 84.78 |
|       cabinet       |  58.6 | 72.88 |
|       sidewalk      | 68.46 | 79.69 |
|        person       | 83.26 | 90.67 |
|        earth        |  37.3 | 59.11 |
|         door        | 50.58 | 69.48 |
|        table        | 63.88 | 77.72 |
|       mountain      | 63.39 | 78.21 |
|        plant        |  50.6 | 61.54 |
|       curtain       | 71.33 | 84.06 |
|        chair        | 58.08 | 71.63 |
|         car         | 85.88 | 92.31 |
|        water        | 61.15 | 80.62 |
|       painting      | 73.96 | 87.09 |
|         sofa        | 60.88 | 71.74 |
|        shelf        | 41.07 | 59.65 |
|        house        | 47.07 | 65.97 |
|         sea         | 69.58 | 88.43 |
|        mirror       | 65.77 |  78.2 |
|         rug         | 60.04 | 71.35 |
|        field        | 30.74 | 47.19 |
|       armchair      | 41.24 | 70.51 |
|         seat        | 59.71 | 79.72 |
|        fence        | 47.79 |  65.8 |
|         desk        | 53.09 | 72.26 |
|         rock        | 52.63 | 74.96 |
|       wardrobe      | 54.74 | 72.03 |
|         lamp        | 67.36 | 79.83 |
|       bathtub       | 72.57 | 85.49 |
|       railing       | 37.85 | 56.61 |
|       cushion       | 58.36 | 72.49 |
|         base        | 26.83 | 42.37 |
|         box         | 25.36 | 35.13 |
|        column       |  50.2 | 60.77 |
|      signboard      | 35.44 | 51.66 |
|   chest of drawers  | 36.14 | 59.85 |
|       counter       |  27.9 | 42.21 |
|         sand        | 44.84 | 59.39 |
|         sink        |  71.4 | 82.68 |
|      skyscraper     | 34.06 | 42.23 |
|      fireplace      | 64.37 | 80.09 |
|     refrigerator    | 79.32 | 85.47 |
|      grandstand     |  43.5 |  67.0 |
|         path        | 25.28 |  44.0 |
|        stairs       | 30.13 | 35.93 |
|        runway       | 55.57 | 69.93 |
|         case        | 44.04 | 59.87 |
|      pool table     | 93.75 | 96.53 |
|        pillow       | 64.61 | 76.58 |
|     screen door     | 60.12 | 73.76 |
|       stairway      | 36.68 | 51.43 |
|        river        | 18.08 | 21.39 |
|        bridge       | 41.49 | 47.55 |
|       bookcase      | 38.06 | 56.93 |
|        blind        | 41.24 | 46.01 |
|     coffee table    | 64.09 | 85.99 |
|        toilet       | 86.99 | 90.91 |
|        flower       | 42.25 | 64.13 |
|         book        | 52.04 | 70.89 |
|         hill        | 19.21 | 26.21 |
|        bench        | 49.18 | 63.32 |
|      countertop     | 56.87 | 79.64 |
|        stove        | 78.51 | 85.19 |
|         palm        | 52.11 | 68.79 |
|    kitchen island   | 40.01 | 71.34 |
|       computer      | 64.97 | 73.63 |
|     swivel chair    | 47.11 | 66.29 |
|         boat        | 75.53 | 84.88 |
|         bar         | 61.01 | 74.87 |
|    arcade machine   | 27.76 | 33.51 |
|        hovel        | 40.94 | 46.64 |
|         bus         | 89.23 | 96.01 |
|        towel        | 68.52 | 79.99 |
|        light        | 60.99 | 74.02 |
|        truck        | 36.41 | 51.85 |
|        tower        | 37.02 | 63.39 |
|      chandelier     | 69.39 | 78.42 |
|        awning       | 32.31 |  39.0 |
|     streetlight     | 31.59 | 44.39 |
|        booth        | 43.54 |  63.7 |
| television receiver | 59.04 | 78.32 |
|       airplane      | 55.99 | 65.22 |
|      dirt track     |  0.06 |  0.12 |
|       apparel       | 27.15 | 43.29 |
|         pole        | 28.67 | 42.84 |
|         land        |  7.62 |  9.3  |
|      bannister      |  26.2 | 39.19 |
|      escalator      | 20.37 | 20.99 |
|       ottoman       | 45.16 | 67.17 |
|        bottle       | 21.21 | 25.37 |
|        buffet       |  37.1 | 46.48 |
|        poster       | 29.38 |  46.4 |
|        stage        |  9.62 | 14.55 |
|         van         | 54.12 | 74.77 |
|         ship        |  7.9  |  8.04 |
|       fountain      |  44.5 |  46.5 |
|    conveyer belt    | 53.31 | 67.29 |
|        canopy       | 25.26 |  34.7 |
|        washer       | 72.13 |  74.5 |
|      plaything      | 32.33 | 54.03 |
|    swimming pool    | 55.35 | 71.46 |
|        stool        | 44.98 | 56.11 |
|        barrel       | 64.62 |  74.2 |
|        basket       | 40.65 | 48.07 |
|      waterfall      | 43.93 | 59.84 |
|         tent        | 91.91 | 98.33 |
|         bag         | 18.52 | 23.86 |
|       minibike      | 74.48 | 86.52 |
|        cradle       | 84.67 | 97.18 |
|         oven        |  50.4 | 60.49 |
|         ball        | 30.06 | 76.62 |
|         food        | 61.07 | 79.01 |
|         step        |  9.46 | 16.23 |
|         tank        | 36.57 | 38.07 |
|      trade name     | 25.53 | 29.66 |
|      microwave      | 86.04 | 94.29 |
|         pot         | 50.86 | 63.07 |
|        animal       |  72.6 | 76.35 |
|       bicycle       | 61.81 | 80.61 |
|         lake        | 63.76 | 72.93 |
|      dishwasher     |  73.9 | 82.27 |
|        screen       | 59.62 | 89.87 |
|       blanket       | 15.21 |  18.7 |
|      sculpture      | 52.59 |  74.7 |
|         hood        | 66.41 | 68.98 |
|        sconce       | 50.97 | 63.01 |
|         vase        | 43.09 |  62.6 |
|    traffic light    | 35.99 | 61.63 |
|         tray        | 14.99 | 25.27 |
|        ashcan       | 36.73 | 51.95 |
|         fan         | 66.64 |  79.4 |
|         pier        | 32.09 | 39.44 |
|      crt screen     |  0.63 |  1.85 |
|        plate        | 52.62 | 68.64 |
|       monitor       |  8.44 | 12.45 |
|    bulletin board   | 50.34 | 67.01 |
|        shower       |  6.9  |  22.7 |
|       radiator      | 68.11 | 80.25 |
|        glass        | 20.68 | 22.88 |
|        clock        | 33.55 | 42.43 |
|         flag        | 37.93 |  41.2 |
+---------------------+-------+-------+
09/21 06:26:30 - mmengine - INFO - Iter(test) [2000/2000]    aAcc: 83.4100  mIoU: 50.1300  mAcc: 62.7800  data_time: 0.0016  time: 0.1027
Finished processing corruption type: contrast
Processing corruption type: elastic_transform
09/21 06:26:34 - mmengine - INFO - 
------------------------------------------------------------
System environment:
    sys.platform: linux
    Python: 3.10.13 | packaged by conda-forge | (main, Dec 23 2023, 15:36:39) [GCC 12.3.0]
    CUDA available: True
    MUSA available: False
    numpy_random_seed: 329713924
    GPU 0: Tesla V100-SXM2-32GB
    CUDA_HOME: /opt/bwhpc/common/devel/cuda/11.7
    NVCC: Cuda compilation tools, release 11.7, V11.7.99
    GCC: gcc (GCC) 8.5.0 20210514 (Red Hat 8.5.0-18)
    PyTorch: 1.13.1
    PyTorch compiling details: PyTorch built with:
  - GCC 9.3
  - C++ Version: 201402
  - Intel(R) oneAPI Math Kernel Library Version 2023.1-Product Build 20230303 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v2.6.0 (Git Hash 52b5f107dd9cf10910aaa19cb47f3abf9b349815)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - LAPACK is enabled (usually provided by MKL)
  - NNPACK is enabled
  - CPU capability usage: AVX2
  - CUDA Runtime 11.7
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_61,code=sm_61;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86;-gencode;arch=compute_37,code=compute_37
  - CuDNN 8.5
  - Magma 2.6.1
  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.7, CUDNN_VERSION=8.5.0, CXX_COMPILER=/opt/rh/devtoolset-9/root/usr/bin/c++, CXX_FLAGS= -fabi-version=11 -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -DEDGE_PROFILER_USE_KINETO -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Werror=non-virtual-dtor -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wunused-local-typedefs -Wno-unused-parameter -Wno-unused-function -Wno-unused-result -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Werror=cast-function-type -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.13.1, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, USE_ROCM=OFF, 

    TorchVision: 0.14.1
    OpenCV: 3.4.18
    MMEngine: 0.10.4

Runtime environment:
    cudnn_benchmark: True
    mp_cfg: {'mp_start_method': 'fork', 'opencv_num_threads': 0}
    dist_cfg: {'backend': 'nccl'}
    seed: 329713924
    Distributed launcher: none
    Distributed training: False
    GPU number: 1
------------------------------------------------------------

09/21 06:26:35 - mmengine - INFO - Config:
auto_scale_lr = dict(base_batch_size=16, enable=False)
backbone_embed_multi = dict(decay_mult=0.0, lr_mult=0.1)
backbone_norm_multi = dict(decay_mult=0.0, lr_mult=0.1)
crop_size = (
    512,
    512,
)
custom_imports = dict(allow_failed_imports=False, imports='mmdet.models')
custom_keys = dict({
    'absolute_pos_embed':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone':
    dict(decay_mult=1.0, lr_mult=0.1),
    'backbone.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.patch_embed.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.0.blocks.0.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.0.blocks.1.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.0.downsample.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.1.blocks.0.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.1.blocks.1.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.1.downsample.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.0.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.1.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.10.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.11.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.12.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.13.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.14.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.15.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.16.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.17.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.2.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.3.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.4.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.5.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.6.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.7.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.8.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.9.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.downsample.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.3.blocks.0.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.3.blocks.1.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'level_embed':
    dict(decay_mult=0.0, lr_mult=1.0),
    'query_embed':
    dict(decay_mult=0.0, lr_mult=1.0),
    'query_feat':
    dict(decay_mult=0.0, lr_mult=1.0),
    'relative_position_bias_table':
    dict(decay_mult=0.0, lr_mult=0.1)
})
data_root = 'data/ade/ADEChallengeData2016'
dataset_type = 'ADE20KDataset'
default_hooks = dict(
    checkpoint=dict(
        by_epoch=False, interval=5000, save_best='mIoU',
        type='CheckpointHook'),
    logger=dict(interval=50, log_metric_by_epoch=False, type='LoggerHook'),
    param_scheduler=dict(type='ParamSchedulerHook'),
    sampler_seed=dict(type='DistSamplerSeedHook'),
    timer=dict(type='IterTimerHook'),
    visualization=dict(type='SegVisualizationHook'))
default_scope = 'mmseg'
depths = [
    2,
    2,
    18,
    2,
]
embed_multi = dict(decay_mult=0.0, lr_mult=1.0)
env_cfg = dict(
    cudnn_benchmark=True,
    dist_cfg=dict(backend='nccl'),
    mp_cfg=dict(mp_start_method='fork', opencv_num_threads=0))
img_ratios = [
    0.5,
    0.75,
    1.0,
    1.25,
    1.5,
    1.75,
]
launcher = 'none'
load_from = '../checkpoint_files/ade20k/mask2former/mask2former_swin-s_8xb2-160k_ade20k-512x512_20221204_143905-e715144e.pth'
log_level = 'INFO'
log_processor = dict(by_epoch=False)
model = dict(
    backbone=dict(
        attn_drop_rate=0.0,
        depths=[
            2,
            2,
            18,
            2,
        ],
        drop_path_rate=0.3,
        drop_rate=0.0,
        embed_dims=96,
        frozen_stages=-1,
        init_cfg=dict(
            checkpoint=
            'https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/swin/swin_small_patch4_window7_224_20220317-7ba6d6dd.pth',
            type='Pretrained'),
        mlp_ratio=4,
        num_heads=[
            3,
            6,
            12,
            24,
        ],
        out_indices=(
            0,
            1,
            2,
            3,
        ),
        patch_norm=True,
        qk_scale=None,
        qkv_bias=True,
        type='SwinTransformer',
        window_size=7,
        with_cp=False),
    data_preprocessor=dict(
        bgr_to_rgb=True,
        corruption='elastic_transform',
        mean=[
            123.675,
            116.28,
            103.53,
        ],
        pad_val=0,
        seg_pad_val=255,
        size=(
            512,
            512,
        ),
        std=[
            58.395,
            57.12,
            57.375,
        ],
        test_cfg=dict(size_divisor=32),
        type='SegDataPreProcessor'),
    decode_head=dict(
        align_corners=False,
        enforce_decoder_input_project=False,
        feat_channels=256,
        in_channels=[
            96,
            192,
            384,
            768,
        ],
        loss_cls=dict(
            class_weight=[
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                0.1,
            ],
            loss_weight=2.0,
            reduction='mean',
            type='mmdet.CrossEntropyLoss',
            use_sigmoid=False),
        loss_dice=dict(
            activate=True,
            eps=1.0,
            loss_weight=5.0,
            naive_dice=True,
            reduction='mean',
            type='mmdet.DiceLoss',
            use_sigmoid=True),
        loss_mask=dict(
            loss_weight=5.0,
            reduction='mean',
            type='mmdet.CrossEntropyLoss',
            use_sigmoid=True),
        num_classes=150,
        num_queries=100,
        num_transformer_feat_level=3,
        out_channels=256,
        pixel_decoder=dict(
            act_cfg=dict(type='ReLU'),
            encoder=dict(
                init_cfg=None,
                layer_cfg=dict(
                    ffn_cfg=dict(
                        act_cfg=dict(inplace=True, type='ReLU'),
                        embed_dims=256,
                        feedforward_channels=1024,
                        ffn_drop=0.0,
                        num_fcs=2),
                    self_attn_cfg=dict(
                        batch_first=True,
                        dropout=0.0,
                        embed_dims=256,
                        im2col_step=64,
                        init_cfg=None,
                        norm_cfg=None,
                        num_heads=8,
                        num_levels=3,
                        num_points=4)),
                num_layers=6),
            init_cfg=None,
            norm_cfg=dict(num_groups=32, type='GN'),
            num_outs=3,
            positional_encoding=dict(normalize=True, num_feats=128),
            type='mmdet.MSDeformAttnPixelDecoder'),
        positional_encoding=dict(normalize=True, num_feats=128),
        strides=[
            4,
            8,
            16,
            32,
        ],
        train_cfg=dict(
            assigner=dict(
                match_costs=[
                    dict(type='mmdet.ClassificationCost', weight=2.0),
                    dict(
                        type='mmdet.CrossEntropyLossCost',
                        use_sigmoid=True,
                        weight=5.0),
                    dict(
                        eps=1.0,
                        pred_act=True,
                        type='mmdet.DiceCost',
                        weight=5.0),
                ],
                type='mmdet.HungarianAssigner'),
            importance_sample_ratio=0.75,
            num_points=12544,
            oversample_ratio=3.0,
            sampler=dict(type='mmdet.MaskPseudoSampler')),
        transformer_decoder=dict(
            init_cfg=None,
            layer_cfg=dict(
                cross_attn_cfg=dict(
                    attn_drop=0.0,
                    batch_first=True,
                    dropout_layer=None,
                    embed_dims=256,
                    num_heads=8,
                    proj_drop=0.0),
                ffn_cfg=dict(
                    act_cfg=dict(inplace=True, type='ReLU'),
                    add_identity=True,
                    dropout_layer=None,
                    embed_dims=256,
                    feedforward_channels=2048,
                    ffn_drop=0.0,
                    num_fcs=2),
                self_attn_cfg=dict(
                    attn_drop=0.0,
                    batch_first=True,
                    dropout_layer=None,
                    embed_dims=256,
                    num_heads=8,
                    proj_drop=0.0)),
            num_layers=9,
            return_intermediate=True),
        type='Mask2FormerHead'),
    test_cfg=dict(mode='whole'),
    train_cfg=dict(),
    type='EncoderDecoder')
num_classes = 150
optim_wrapper = dict(
    clip_grad=dict(max_norm=0.01, norm_type=2),
    optimizer=dict(
        betas=(
            0.9,
            0.999,
        ),
        eps=1e-08,
        lr=0.0001,
        type='AdamW',
        weight_decay=0.05),
    paramwise_cfg=dict(
        custom_keys=dict({
            'absolute_pos_embed':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone':
            dict(decay_mult=1.0, lr_mult=0.1),
            'backbone.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.patch_embed.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.0.blocks.0.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.0.blocks.1.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.0.downsample.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.1.blocks.0.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.1.blocks.1.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.1.downsample.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.0.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.1.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.10.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.11.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.12.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.13.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.14.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.15.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.16.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.17.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.2.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.3.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.4.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.5.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.6.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.7.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.8.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.9.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.downsample.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.3.blocks.0.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.3.blocks.1.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'level_embed':
            dict(decay_mult=0.0, lr_mult=1.0),
            'query_embed':
            dict(decay_mult=0.0, lr_mult=1.0),
            'query_feat':
            dict(decay_mult=0.0, lr_mult=1.0),
            'relative_position_bias_table':
            dict(decay_mult=0.0, lr_mult=0.1)
        }),
        norm_decay_mult=0.0),
    type='OptimWrapper')
optimizer = dict(
    betas=(
        0.9,
        0.999,
    ),
    eps=1e-08,
    lr=0.0001,
    type='AdamW',
    weight_decay=0.05)
param_scheduler = [
    dict(
        begin=0,
        by_epoch=False,
        end=160000,
        eta_min=0,
        power=0.9,
        type='PolyLR'),
]
pretrained = 'https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/swin/swin_small_patch4_window7_224_20220317-7ba6d6dd.pth'
resume = False
test_cfg = dict(type='TestLoop')
test_dataloader = dict(
    batch_size=1,
    dataset=dict(
        data_prefix=dict(
            img_path='images/validation',
            seg_map_path='annotations/validation'),
        data_root='data/ade/ADEChallengeData2016',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(keep_ratio=True, scale=(
                2048,
                512,
            ), type='Resize'),
            dict(reduce_zero_label=True, type='LoadAnnotations'),
            dict(type='PackSegInputs'),
        ],
        type='ADE20KDataset'),
    num_workers=4,
    persistent_workers=True,
    sampler=dict(shuffle=False, type='DefaultSampler'))
test_evaluator = dict(
    iou_metrics=[
        'mIoU',
    ], type='IoUMetric')
test_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(keep_ratio=True, scale=(
        2048,
        512,
    ), type='Resize'),
    dict(reduce_zero_label=True, type='LoadAnnotations'),
    dict(type='PackSegInputs'),
]
train_cfg = dict(
    max_iters=160000, type='IterBasedTrainLoop', val_interval=5000)
train_dataloader = dict(
    batch_size=2,
    dataset=dict(
        data_prefix=dict(
            img_path='images/training', seg_map_path='annotations/training'),
        data_root='data/ade/ADEChallengeData2016',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(reduce_zero_label=True, type='LoadAnnotations'),
            dict(
                max_size=2048,
                resize_type='ResizeShortestEdge',
                scales=[
                    256,
                    307,
                    358,
                    409,
                    460,
                    512,
                    563,
                    614,
                    665,
                    716,
                    768,
                    819,
                    870,
                    921,
                    972,
                    1024,
                ],
                type='RandomChoiceResize'),
            dict(
                cat_max_ratio=0.75, crop_size=(
                    512,
                    512,
                ), type='RandomCrop'),
            dict(prob=0.5, type='RandomFlip'),
            dict(type='PhotoMetricDistortion'),
            dict(type='PackSegInputs'),
        ],
        type='ADE20KDataset'),
    num_workers=4,
    persistent_workers=True,
    sampler=dict(shuffle=True, type='InfiniteSampler'))
train_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(reduce_zero_label=True, type='LoadAnnotations'),
    dict(
        max_size=2048,
        resize_type='ResizeShortestEdge',
        scales=[
            256,
            307,
            358,
            409,
            460,
            512,
            563,
            614,
            665,
            716,
            768,
            819,
            870,
            921,
            972,
            1024,
        ],
        type='RandomChoiceResize'),
    dict(cat_max_ratio=0.75, crop_size=(
        512,
        512,
    ), type='RandomCrop'),
    dict(prob=0.5, type='RandomFlip'),
    dict(type='PhotoMetricDistortion'),
    dict(type='PackSegInputs'),
]
tta_model = dict(type='SegTTAModel')
tta_pipeline = [
    dict(backend_args=None, type='LoadImageFromFile'),
    dict(
        transforms=[
            [
                dict(keep_ratio=True, scale_factor=0.5, type='Resize'),
                dict(keep_ratio=True, scale_factor=0.75, type='Resize'),
                dict(keep_ratio=True, scale_factor=1.0, type='Resize'),
                dict(keep_ratio=True, scale_factor=1.25, type='Resize'),
                dict(keep_ratio=True, scale_factor=1.5, type='Resize'),
                dict(keep_ratio=True, scale_factor=1.75, type='Resize'),
            ],
            [
                dict(direction='horizontal', prob=0.0, type='RandomFlip'),
                dict(direction='horizontal', prob=1.0, type='RandomFlip'),
            ],
            [
                dict(type='LoadAnnotations'),
            ],
            [
                dict(type='PackSegInputs'),
            ],
        ],
        type='TestTimeAug'),
]
val_cfg = dict(type='ValLoop')
val_dataloader = dict(
    batch_size=1,
    dataset=dict(
        data_prefix=dict(
            img_path='images/validation',
            seg_map_path='annotations/validation'),
        data_root='data/ade/ADEChallengeData2016',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(keep_ratio=True, scale=(
                2048,
                512,
            ), type='Resize'),
            dict(reduce_zero_label=True, type='LoadAnnotations'),
            dict(type='PackSegInputs'),
        ],
        type='ADE20KDataset'),
    num_workers=4,
    persistent_workers=True,
    sampler=dict(shuffle=False, type='DefaultSampler'))
val_evaluator = dict(
    iou_metrics=[
        'mIoU',
    ], type='IoUMetric')
vis_backends = [
    dict(type='LocalVisBackend'),
]
visualizer = dict(
    name='visualizer',
    type='SegLocalVisualizer',
    vis_backends=[
        dict(type='LocalVisBackend'),
    ])
work_dir = '../corruptions/work_dirs/ade20k/mask2former/mask2former_swin-s_8xb2-160k_ade20k-512x512/elastic_transform'

09/21 06:26:38 - mmengine - INFO - Distributed training is not used, all SyncBatchNorm (SyncBN) layers in the model will be automatically reverted to BatchNormXd layers if they are used.
09/21 06:26:38 - mmengine - INFO - Hooks will be executed in the following order:
before_run:
(VERY_HIGH   ) RuntimeInfoHook                    
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
before_train:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_train_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(NORMAL      ) DistSamplerSeedHook                
 -------------------- 
before_train_iter:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_train_iter:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(NORMAL      ) SegVisualizationHook               
(BELOW_NORMAL) LoggerHook                         
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
after_train_epoch:
(NORMAL      ) IterTimerHook                      
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_val:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
before_val_epoch:
(NORMAL      ) IterTimerHook                      
 -------------------- 
before_val_iter:
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_val_iter:
(NORMAL      ) IterTimerHook                      
(NORMAL      ) SegVisualizationHook               
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_val_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
after_val:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
after_train:
(VERY_HIGH   ) RuntimeInfoHook                    
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_test:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
before_test_epoch:
(NORMAL      ) IterTimerHook                      
 -------------------- 
before_test_iter:
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_test_iter:
(NORMAL      ) IterTimerHook                      
(NORMAL      ) SegVisualizationHook               
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_test_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_test:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
after_run:
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
09/21 06:26:38 - mmengine - WARNING - The prefix is not set in metric class IoUMetric.
Loads checkpoint by local backend from path: ../checkpoint_files/ade20k/mask2former/mask2former_swin-s_8xb2-160k_ade20k-512x512_20221204_143905-e715144e.pth
09/21 06:26:39 - mmengine - INFO - Load checkpoint from ../checkpoint_files/ade20k/mask2former/mask2former_swin-s_8xb2-160k_ade20k-512x512_20221204_143905-e715144e.pth
09/21 06:27:43 - mmengine - INFO - Iter(test) [  50/2000]    eta: 0:41:16  time: 1.2404  data_time: 0.0015  memory: 12814  
09/21 06:28:36 - mmengine - INFO - Iter(test) [ 100/2000]    eta: 0:36:50  time: 1.1041  data_time: 0.0016  memory: 12795  
09/21 06:29:26 - mmengine - INFO - Iter(test) [ 150/2000]    eta: 0:34:09  time: 1.0263  data_time: 0.0015  memory: 935  
09/21 06:30:18 - mmengine - INFO - Iter(test) [ 200/2000]    eta: 0:32:49  time: 0.9965  data_time: 0.0015  memory: 12835  
09/21 06:31:08 - mmengine - INFO - Iter(test) [ 250/2000]    eta: 0:31:22  time: 0.9771  data_time: 0.0014  memory: 12838  
09/21 06:32:01 - mmengine - INFO - Iter(test) [ 300/2000]    eta: 0:30:25  time: 1.0347  data_time: 0.0016  memory: 12803  
09/21 06:32:53 - mmengine - INFO - Iter(test) [ 350/2000]    eta: 0:29:21  time: 0.9575  data_time: 0.0015  memory: 12810  
09/21 06:33:46 - mmengine - INFO - Iter(test) [ 400/2000]    eta: 0:28:28  time: 1.1153  data_time: 0.0015  memory: 12775  
09/21 06:34:32 - mmengine - INFO - Iter(test) [ 450/2000]    eta: 0:27:08  time: 0.9122  data_time: 0.0014  memory: 975  
09/21 06:35:22 - mmengine - INFO - Iter(test) [ 500/2000]    eta: 0:26:08  time: 0.9947  data_time: 0.0015  memory: 935  
09/21 06:36:15 - mmengine - INFO - Iter(test) [ 550/2000]    eta: 0:25:17  time: 1.0402  data_time: 0.0016  memory: 1042  
09/21 06:37:05 - mmengine - INFO - Iter(test) [ 600/2000]    eta: 0:24:19  time: 1.0460  data_time: 0.0016  memory: 1040  
09/21 06:37:55 - mmengine - INFO - Iter(test) [ 650/2000]    eta: 0:23:23  time: 1.0857  data_time: 0.0014  memory: 12816  
09/21 06:38:48 - mmengine - INFO - Iter(test) [ 700/2000]    eta: 0:22:33  time: 1.0324  data_time: 0.0016  memory: 12806  
09/21 06:39:39 - mmengine - INFO - Iter(test) [ 750/2000]    eta: 0:21:39  time: 0.9922  data_time: 0.0015  memory: 1096  
09/21 06:40:26 - mmengine - INFO - Iter(test) [ 800/2000]    eta: 0:20:40  time: 1.0108  data_time: 0.0017  memory: 935  
09/21 06:41:17 - mmengine - INFO - Iter(test) [ 850/2000]    eta: 0:19:47  time: 1.0268  data_time: 0.0016  memory: 908  
09/21 06:42:04 - mmengine - INFO - Iter(test) [ 900/2000]    eta: 0:18:49  time: 0.9145  data_time: 0.0015  memory: 987  
09/21 06:42:55 - mmengine - INFO - Iter(test) [ 950/2000]    eta: 0:17:58  time: 0.9733  data_time: 0.0015  memory: 1015  
09/21 06:43:43 - mmengine - INFO - Iter(test) [1000/2000]    eta: 0:17:03  time: 0.9780  data_time: 0.0015  memory: 1015  
09/21 06:44:35 - mmengine - INFO - Iter(test) [1050/2000]    eta: 0:16:13  time: 1.0357  data_time: 0.0015  memory: 12819  
09/21 06:45:26 - mmengine - INFO - Iter(test) [1100/2000]    eta: 0:15:21  time: 0.9944  data_time: 0.0016  memory: 1012  
09/21 06:46:15 - mmengine - INFO - Iter(test) [1150/2000]    eta: 0:14:28  time: 0.9992  data_time: 0.0015  memory: 985  
09/21 06:47:06 - mmengine - INFO - Iter(test) [1200/2000]    eta: 0:13:37  time: 0.9842  data_time: 0.0015  memory: 1921  
09/21 06:47:55 - mmengine - INFO - Iter(test) [1250/2000]    eta: 0:12:45  time: 0.9653  data_time: 0.0014  memory: 12797  
09/21 06:48:42 - mmengine - INFO - Iter(test) [1300/2000]    eta: 0:11:52  time: 1.0527  data_time: 0.0015  memory: 935  
09/21 06:49:32 - mmengine - INFO - Iter(test) [1350/2000]    eta: 0:11:00  time: 0.9275  data_time: 0.0015  memory: 935  
09/21 06:50:23 - mmengine - INFO - Iter(test) [1400/2000]    eta: 0:10:10  time: 1.0840  data_time: 0.0015  memory: 1012  
09/21 06:51:11 - mmengine - INFO - Iter(test) [1450/2000]    eta: 0:09:18  time: 1.0573  data_time: 0.0014  memory: 1015  
09/21 06:52:01 - mmengine - INFO - Iter(test) [1500/2000]    eta: 0:08:27  time: 0.9713  data_time: 0.0015  memory: 933  
09/21 06:52:54 - mmengine - INFO - Iter(test) [1550/2000]    eta: 0:07:36  time: 1.0111  data_time: 0.0015  memory: 1015  
09/21 06:53:43 - mmengine - INFO - Iter(test) [1600/2000]    eta: 0:06:45  time: 1.0174  data_time: 0.0017  memory: 908  
09/21 06:54:32 - mmengine - INFO - Iter(test) [1650/2000]    eta: 0:05:54  time: 0.8920  data_time: 0.0014  memory: 12807  
09/21 06:55:22 - mmengine - INFO - Iter(test) [1700/2000]    eta: 0:05:04  time: 1.0130  data_time: 0.0016  memory: 1012  
09/21 06:56:13 - mmengine - INFO - Iter(test) [1750/2000]    eta: 0:04:13  time: 0.9694  data_time: 0.0014  memory: 1039  
09/21 06:57:00 - mmengine - INFO - Iter(test) [1800/2000]    eta: 0:03:22  time: 1.0287  data_time: 0.0017  memory: 935  
09/21 06:57:50 - mmengine - INFO - Iter(test) [1850/2000]    eta: 0:02:31  time: 0.9816  data_time: 0.0016  memory: 854  
09/21 06:58:37 - mmengine - INFO - Iter(test) [1900/2000]    eta: 0:01:40  time: 0.9652  data_time: 0.0015  memory: 1068  
09/21 06:59:27 - mmengine - INFO - Iter(test) [1950/2000]    eta: 0:00:50  time: 0.9558  data_time: 0.0014  memory: 1306  
09/21 07:00:14 - mmengine - INFO - Iter(test) [2000/2000]    eta: 0:00:00  time: 0.8862  data_time: 0.0014  memory: 1094  
09/21 07:00:14 - mmengine - INFO - per class results:
09/21 07:00:14 - mmengine - INFO - 
+---------------------+-------+-------+
|        Class        |  IoU  |  Acc  |
+---------------------+-------+-------+
|         wall        | 63.68 | 77.25 |
|       building      |  74.5 | 86.65 |
|         sky         | 84.42 | 91.32 |
|        floor        | 68.55 | 80.96 |
|         tree        | 63.91 | 79.19 |
|       ceiling       | 70.42 | 82.15 |
|         road        |  76.3 | 84.79 |
|         bed         | 76.45 | 88.74 |
|      windowpane     | 47.74 | 67.06 |
|        grass        | 63.03 | 76.83 |
|       cabinet       | 49.21 | 64.75 |
|       sidewalk      | 52.03 | 67.49 |
|        person       | 60.61 | 75.03 |
|        earth        | 37.02 | 55.42 |
|         door        | 39.43 | 56.85 |
|        table        | 44.27 | 62.18 |
|       mountain      |  55.9 | 72.85 |
|        plant        | 41.74 |  57.6 |
|       curtain       | 50.79 | 68.59 |
|        chair        | 40.26 |  57.0 |
|         car         | 62.51 | 77.08 |
|        water        | 56.17 | 80.47 |
|       painting      | 47.48 | 65.65 |
|         sofa        | 53.63 |  66.5 |
|        shelf        | 32.66 | 51.43 |
|        house        | 42.99 | 62.55 |
|         sea         | 64.93 | 78.59 |
|        mirror       | 52.28 |  70.7 |
|         rug         | 50.22 |  61.5 |
|        field        | 29.58 |  47.3 |
|       armchair      | 37.02 | 60.56 |
|         seat        |  56.3 | 77.15 |
|        fence        | 32.26 | 51.55 |
|         desk        | 39.67 | 61.27 |
|         rock        | 32.87 | 52.72 |
|       wardrobe      | 45.28 | 62.85 |
|         lamp        | 30.24 | 48.43 |
|       bathtub       | 61.33 | 76.39 |
|       railing       | 28.79 | 45.51 |
|       cushion       | 37.42 | 54.95 |
|         base        | 22.24 | 36.92 |
|         box         | 16.98 | 26.84 |
|        column       | 29.69 | 45.08 |
|      signboard      | 19.64 | 32.88 |
|   chest of drawers  | 28.01 | 53.42 |
|       counter       | 18.82 | 29.78 |
|         sand        | 32.32 | 46.95 |
|         sink        | 46.78 | 61.11 |
|      skyscraper     | 30.61 | 39.17 |
|      fireplace      | 48.84 | 72.53 |
|     refrigerator    | 62.77 | 76.46 |
|      grandstand     | 40.67 | 69.56 |
|         path        | 21.42 | 33.95 |
|        stairs       | 23.68 | 31.34 |
|        runway       | 65.57 | 84.21 |
|         case        | 39.29 | 47.99 |
|      pool table     | 76.48 | 86.33 |
|        pillow       | 44.44 | 57.31 |
|     screen door     | 54.73 | 68.01 |
|       stairway      | 27.01 | 38.45 |
|        river        | 14.33 | 18.28 |
|        bridge       | 32.39 | 44.11 |
|       bookcase      |  27.3 | 47.37 |
|        blind        | 34.36 | 43.22 |
|     coffee table    | 47.28 | 70.79 |
|        toilet       |  49.5 | 63.96 |
|        flower       | 28.24 | 45.72 |
|         book        | 31.95 | 51.32 |
|         hill        | 13.39 |  21.0 |
|        bench        | 38.11 | 52.92 |
|      countertop     | 39.24 | 57.76 |
|        stove        | 61.45 | 72.43 |
|         palm        | 38.34 |  59.8 |
|    kitchen island   |  25.5 | 57.93 |
|       computer      | 52.43 | 63.21 |
|     swivel chair    | 33.77 | 54.46 |
|         boat        |  52.2 | 78.25 |
|         bar         | 57.26 | 76.55 |
|    arcade machine   | 50.89 | 60.34 |
|        hovel        | 12.41 | 15.84 |
|         bus         |  70.1 | 85.86 |
|        towel        | 35.48 |  55.1 |
|        light        | 16.89 | 30.09 |
|        truck        | 28.26 | 53.95 |
|        tower        | 35.07 | 50.32 |
|      chandelier     | 45.05 | 60.08 |
|        awning       | 16.21 | 24.37 |
|     streetlight     |  7.9  |  13.2 |
|        booth        | 40.17 | 64.46 |
| television receiver | 41.53 | 64.74 |
|       airplane      | 40.13 | 54.95 |
|      dirt track     |  5.46 | 24.22 |
|       apparel       | 20.06 |  32.9 |
|         pole        | 14.92 | 26.28 |
|         land        |  7.97 |  9.38 |
|      bannister      |  14.7 | 21.98 |
|      escalator      | 19.88 |  20.4 |
|       ottoman       | 36.74 | 52.71 |
|        bottle       | 11.13 | 15.56 |
|        buffet       | 36.17 | 42.48 |
|        poster       | 22.76 | 38.37 |
|        stage        | 10.96 | 24.65 |
|         van         | 38.69 | 62.82 |
|         ship        |  0.3  |  0.31 |
|       fountain      | 18.92 |  19.9 |
|    conveyer belt    | 39.65 | 57.34 |
|        canopy       |  20.5 |  29.1 |
|        washer       | 61.72 | 70.88 |
|      plaything      |  13.0 | 28.02 |
|    swimming pool    | 41.45 | 58.03 |
|        stool        |  30.5 | 44.52 |
|        barrel       | 26.28 | 51.75 |
|        basket       | 22.94 | 32.58 |
|      waterfall      | 36.07 |  53.5 |
|         tent        | 70.51 | 92.34 |
|         bag         | 12.93 | 18.66 |
|       minibike      | 51.54 | 67.82 |
|        cradle       | 68.01 |  83.5 |
|         oven        | 21.19 | 57.19 |
|         ball        | 29.91 | 63.95 |
|         food        | 50.85 | 70.27 |
|         step        |  6.63 |  12.4 |
|         tank        |  40.0 | 45.69 |
|      trade name     | 17.02 | 21.74 |
|      microwave      | 29.51 | 35.06 |
|         pot         | 24.57 |  38.2 |
|        animal       |  51.7 | 64.52 |
|       bicycle       | 36.69 | 58.77 |
|         lake        |  0.07 |  0.08 |
|      dishwasher     | 55.24 | 68.59 |
|        screen       | 62.15 | 82.39 |
|       blanket       | 12.34 | 15.72 |
|      sculpture      | 32.42 | 60.22 |
|         hood        | 47.83 | 60.91 |
|        sconce       | 20.21 | 32.35 |
|         vase        |  18.7 | 34.89 |
|    traffic light    | 17.72 | 35.56 |
|         tray        |  8.93 | 17.86 |
|        ashcan       | 23.07 | 43.88 |
|         fan         | 24.29 | 43.23 |
|         pier        | 10.29 | 13.04 |
|      crt screen     |  2.04 |  5.91 |
|        plate        | 36.74 | 54.21 |
|       monitor       |  6.83 | 12.25 |
|    bulletin board   | 34.71 | 49.52 |
|        shower       |  4.32 |  11.5 |
|       radiator      | 45.35 | 56.08 |
|        glass        |  9.62 | 12.12 |
|        clock        | 11.38 | 18.73 |
|         flag        | 27.36 | 38.43 |
+---------------------+-------+-------+
09/21 07:00:14 - mmengine - INFO - Iter(test) [2000/2000]    aAcc: 74.4900  mIoU: 36.6300  mAcc: 51.1500  data_time: 0.0016  time: 1.0072
Finished processing corruption type: elastic_transform
Processing corruption type: pixelate
09/21 07:00:19 - mmengine - INFO - 
------------------------------------------------------------
System environment:
    sys.platform: linux
    Python: 3.10.13 | packaged by conda-forge | (main, Dec 23 2023, 15:36:39) [GCC 12.3.0]
    CUDA available: True
    MUSA available: False
    numpy_random_seed: 282250732
    GPU 0: Tesla V100-SXM2-32GB
    CUDA_HOME: /opt/bwhpc/common/devel/cuda/11.7
    NVCC: Cuda compilation tools, release 11.7, V11.7.99
    GCC: gcc (GCC) 8.5.0 20210514 (Red Hat 8.5.0-18)
    PyTorch: 1.13.1
    PyTorch compiling details: PyTorch built with:
  - GCC 9.3
  - C++ Version: 201402
  - Intel(R) oneAPI Math Kernel Library Version 2023.1-Product Build 20230303 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v2.6.0 (Git Hash 52b5f107dd9cf10910aaa19cb47f3abf9b349815)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - LAPACK is enabled (usually provided by MKL)
  - NNPACK is enabled
  - CPU capability usage: AVX2
  - CUDA Runtime 11.7
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_61,code=sm_61;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86;-gencode;arch=compute_37,code=compute_37
  - CuDNN 8.5
  - Magma 2.6.1
  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.7, CUDNN_VERSION=8.5.0, CXX_COMPILER=/opt/rh/devtoolset-9/root/usr/bin/c++, CXX_FLAGS= -fabi-version=11 -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -DEDGE_PROFILER_USE_KINETO -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Werror=non-virtual-dtor -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wunused-local-typedefs -Wno-unused-parameter -Wno-unused-function -Wno-unused-result -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Werror=cast-function-type -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.13.1, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, USE_ROCM=OFF, 

    TorchVision: 0.14.1
    OpenCV: 3.4.18
    MMEngine: 0.10.4

Runtime environment:
    cudnn_benchmark: True
    mp_cfg: {'mp_start_method': 'fork', 'opencv_num_threads': 0}
    dist_cfg: {'backend': 'nccl'}
    seed: 282250732
    Distributed launcher: none
    Distributed training: False
    GPU number: 1
------------------------------------------------------------

09/21 07:00:19 - mmengine - INFO - Config:
auto_scale_lr = dict(base_batch_size=16, enable=False)
backbone_embed_multi = dict(decay_mult=0.0, lr_mult=0.1)
backbone_norm_multi = dict(decay_mult=0.0, lr_mult=0.1)
crop_size = (
    512,
    512,
)
custom_imports = dict(allow_failed_imports=False, imports='mmdet.models')
custom_keys = dict({
    'absolute_pos_embed':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone':
    dict(decay_mult=1.0, lr_mult=0.1),
    'backbone.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.patch_embed.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.0.blocks.0.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.0.blocks.1.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.0.downsample.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.1.blocks.0.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.1.blocks.1.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.1.downsample.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.0.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.1.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.10.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.11.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.12.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.13.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.14.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.15.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.16.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.17.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.2.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.3.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.4.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.5.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.6.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.7.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.8.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.9.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.downsample.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.3.blocks.0.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.3.blocks.1.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'level_embed':
    dict(decay_mult=0.0, lr_mult=1.0),
    'query_embed':
    dict(decay_mult=0.0, lr_mult=1.0),
    'query_feat':
    dict(decay_mult=0.0, lr_mult=1.0),
    'relative_position_bias_table':
    dict(decay_mult=0.0, lr_mult=0.1)
})
data_root = 'data/ade/ADEChallengeData2016'
dataset_type = 'ADE20KDataset'
default_hooks = dict(
    checkpoint=dict(
        by_epoch=False, interval=5000, save_best='mIoU',
        type='CheckpointHook'),
    logger=dict(interval=50, log_metric_by_epoch=False, type='LoggerHook'),
    param_scheduler=dict(type='ParamSchedulerHook'),
    sampler_seed=dict(type='DistSamplerSeedHook'),
    timer=dict(type='IterTimerHook'),
    visualization=dict(type='SegVisualizationHook'))
default_scope = 'mmseg'
depths = [
    2,
    2,
    18,
    2,
]
embed_multi = dict(decay_mult=0.0, lr_mult=1.0)
env_cfg = dict(
    cudnn_benchmark=True,
    dist_cfg=dict(backend='nccl'),
    mp_cfg=dict(mp_start_method='fork', opencv_num_threads=0))
img_ratios = [
    0.5,
    0.75,
    1.0,
    1.25,
    1.5,
    1.75,
]
launcher = 'none'
load_from = '../checkpoint_files/ade20k/mask2former/mask2former_swin-s_8xb2-160k_ade20k-512x512_20221204_143905-e715144e.pth'
log_level = 'INFO'
log_processor = dict(by_epoch=False)
model = dict(
    backbone=dict(
        attn_drop_rate=0.0,
        depths=[
            2,
            2,
            18,
            2,
        ],
        drop_path_rate=0.3,
        drop_rate=0.0,
        embed_dims=96,
        frozen_stages=-1,
        init_cfg=dict(
            checkpoint=
            'https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/swin/swin_small_patch4_window7_224_20220317-7ba6d6dd.pth',
            type='Pretrained'),
        mlp_ratio=4,
        num_heads=[
            3,
            6,
            12,
            24,
        ],
        out_indices=(
            0,
            1,
            2,
            3,
        ),
        patch_norm=True,
        qk_scale=None,
        qkv_bias=True,
        type='SwinTransformer',
        window_size=7,
        with_cp=False),
    data_preprocessor=dict(
        bgr_to_rgb=True,
        corruption='pixelate',
        mean=[
            123.675,
            116.28,
            103.53,
        ],
        pad_val=0,
        seg_pad_val=255,
        size=(
            512,
            512,
        ),
        std=[
            58.395,
            57.12,
            57.375,
        ],
        test_cfg=dict(size_divisor=32),
        type='SegDataPreProcessor'),
    decode_head=dict(
        align_corners=False,
        enforce_decoder_input_project=False,
        feat_channels=256,
        in_channels=[
            96,
            192,
            384,
            768,
        ],
        loss_cls=dict(
            class_weight=[
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                0.1,
            ],
            loss_weight=2.0,
            reduction='mean',
            type='mmdet.CrossEntropyLoss',
            use_sigmoid=False),
        loss_dice=dict(
            activate=True,
            eps=1.0,
            loss_weight=5.0,
            naive_dice=True,
            reduction='mean',
            type='mmdet.DiceLoss',
            use_sigmoid=True),
        loss_mask=dict(
            loss_weight=5.0,
            reduction='mean',
            type='mmdet.CrossEntropyLoss',
            use_sigmoid=True),
        num_classes=150,
        num_queries=100,
        num_transformer_feat_level=3,
        out_channels=256,
        pixel_decoder=dict(
            act_cfg=dict(type='ReLU'),
            encoder=dict(
                init_cfg=None,
                layer_cfg=dict(
                    ffn_cfg=dict(
                        act_cfg=dict(inplace=True, type='ReLU'),
                        embed_dims=256,
                        feedforward_channels=1024,
                        ffn_drop=0.0,
                        num_fcs=2),
                    self_attn_cfg=dict(
                        batch_first=True,
                        dropout=0.0,
                        embed_dims=256,
                        im2col_step=64,
                        init_cfg=None,
                        norm_cfg=None,
                        num_heads=8,
                        num_levels=3,
                        num_points=4)),
                num_layers=6),
            init_cfg=None,
            norm_cfg=dict(num_groups=32, type='GN'),
            num_outs=3,
            positional_encoding=dict(normalize=True, num_feats=128),
            type='mmdet.MSDeformAttnPixelDecoder'),
        positional_encoding=dict(normalize=True, num_feats=128),
        strides=[
            4,
            8,
            16,
            32,
        ],
        train_cfg=dict(
            assigner=dict(
                match_costs=[
                    dict(type='mmdet.ClassificationCost', weight=2.0),
                    dict(
                        type='mmdet.CrossEntropyLossCost',
                        use_sigmoid=True,
                        weight=5.0),
                    dict(
                        eps=1.0,
                        pred_act=True,
                        type='mmdet.DiceCost',
                        weight=5.0),
                ],
                type='mmdet.HungarianAssigner'),
            importance_sample_ratio=0.75,
            num_points=12544,
            oversample_ratio=3.0,
            sampler=dict(type='mmdet.MaskPseudoSampler')),
        transformer_decoder=dict(
            init_cfg=None,
            layer_cfg=dict(
                cross_attn_cfg=dict(
                    attn_drop=0.0,
                    batch_first=True,
                    dropout_layer=None,
                    embed_dims=256,
                    num_heads=8,
                    proj_drop=0.0),
                ffn_cfg=dict(
                    act_cfg=dict(inplace=True, type='ReLU'),
                    add_identity=True,
                    dropout_layer=None,
                    embed_dims=256,
                    feedforward_channels=2048,
                    ffn_drop=0.0,
                    num_fcs=2),
                self_attn_cfg=dict(
                    attn_drop=0.0,
                    batch_first=True,
                    dropout_layer=None,
                    embed_dims=256,
                    num_heads=8,
                    proj_drop=0.0)),
            num_layers=9,
            return_intermediate=True),
        type='Mask2FormerHead'),
    test_cfg=dict(mode='whole'),
    train_cfg=dict(),
    type='EncoderDecoder')
num_classes = 150
optim_wrapper = dict(
    clip_grad=dict(max_norm=0.01, norm_type=2),
    optimizer=dict(
        betas=(
            0.9,
            0.999,
        ),
        eps=1e-08,
        lr=0.0001,
        type='AdamW',
        weight_decay=0.05),
    paramwise_cfg=dict(
        custom_keys=dict({
            'absolute_pos_embed':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone':
            dict(decay_mult=1.0, lr_mult=0.1),
            'backbone.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.patch_embed.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.0.blocks.0.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.0.blocks.1.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.0.downsample.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.1.blocks.0.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.1.blocks.1.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.1.downsample.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.0.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.1.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.10.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.11.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.12.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.13.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.14.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.15.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.16.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.17.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.2.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.3.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.4.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.5.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.6.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.7.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.8.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.9.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.downsample.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.3.blocks.0.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.3.blocks.1.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'level_embed':
            dict(decay_mult=0.0, lr_mult=1.0),
            'query_embed':
            dict(decay_mult=0.0, lr_mult=1.0),
            'query_feat':
            dict(decay_mult=0.0, lr_mult=1.0),
            'relative_position_bias_table':
            dict(decay_mult=0.0, lr_mult=0.1)
        }),
        norm_decay_mult=0.0),
    type='OptimWrapper')
optimizer = dict(
    betas=(
        0.9,
        0.999,
    ),
    eps=1e-08,
    lr=0.0001,
    type='AdamW',
    weight_decay=0.05)
param_scheduler = [
    dict(
        begin=0,
        by_epoch=False,
        end=160000,
        eta_min=0,
        power=0.9,
        type='PolyLR'),
]
pretrained = 'https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/swin/swin_small_patch4_window7_224_20220317-7ba6d6dd.pth'
resume = False
test_cfg = dict(type='TestLoop')
test_dataloader = dict(
    batch_size=1,
    dataset=dict(
        data_prefix=dict(
            img_path='images/validation',
            seg_map_path='annotations/validation'),
        data_root='data/ade/ADEChallengeData2016',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(keep_ratio=True, scale=(
                2048,
                512,
            ), type='Resize'),
            dict(reduce_zero_label=True, type='LoadAnnotations'),
            dict(type='PackSegInputs'),
        ],
        type='ADE20KDataset'),
    num_workers=4,
    persistent_workers=True,
    sampler=dict(shuffle=False, type='DefaultSampler'))
test_evaluator = dict(
    iou_metrics=[
        'mIoU',
    ], type='IoUMetric')
test_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(keep_ratio=True, scale=(
        2048,
        512,
    ), type='Resize'),
    dict(reduce_zero_label=True, type='LoadAnnotations'),
    dict(type='PackSegInputs'),
]
train_cfg = dict(
    max_iters=160000, type='IterBasedTrainLoop', val_interval=5000)
train_dataloader = dict(
    batch_size=2,
    dataset=dict(
        data_prefix=dict(
            img_path='images/training', seg_map_path='annotations/training'),
        data_root='data/ade/ADEChallengeData2016',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(reduce_zero_label=True, type='LoadAnnotations'),
            dict(
                max_size=2048,
                resize_type='ResizeShortestEdge',
                scales=[
                    256,
                    307,
                    358,
                    409,
                    460,
                    512,
                    563,
                    614,
                    665,
                    716,
                    768,
                    819,
                    870,
                    921,
                    972,
                    1024,
                ],
                type='RandomChoiceResize'),
            dict(
                cat_max_ratio=0.75, crop_size=(
                    512,
                    512,
                ), type='RandomCrop'),
            dict(prob=0.5, type='RandomFlip'),
            dict(type='PhotoMetricDistortion'),
            dict(type='PackSegInputs'),
        ],
        type='ADE20KDataset'),
    num_workers=4,
    persistent_workers=True,
    sampler=dict(shuffle=True, type='InfiniteSampler'))
train_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(reduce_zero_label=True, type='LoadAnnotations'),
    dict(
        max_size=2048,
        resize_type='ResizeShortestEdge',
        scales=[
            256,
            307,
            358,
            409,
            460,
            512,
            563,
            614,
            665,
            716,
            768,
            819,
            870,
            921,
            972,
            1024,
        ],
        type='RandomChoiceResize'),
    dict(cat_max_ratio=0.75, crop_size=(
        512,
        512,
    ), type='RandomCrop'),
    dict(prob=0.5, type='RandomFlip'),
    dict(type='PhotoMetricDistortion'),
    dict(type='PackSegInputs'),
]
tta_model = dict(type='SegTTAModel')
tta_pipeline = [
    dict(backend_args=None, type='LoadImageFromFile'),
    dict(
        transforms=[
            [
                dict(keep_ratio=True, scale_factor=0.5, type='Resize'),
                dict(keep_ratio=True, scale_factor=0.75, type='Resize'),
                dict(keep_ratio=True, scale_factor=1.0, type='Resize'),
                dict(keep_ratio=True, scale_factor=1.25, type='Resize'),
                dict(keep_ratio=True, scale_factor=1.5, type='Resize'),
                dict(keep_ratio=True, scale_factor=1.75, type='Resize'),
            ],
            [
                dict(direction='horizontal', prob=0.0, type='RandomFlip'),
                dict(direction='horizontal', prob=1.0, type='RandomFlip'),
            ],
            [
                dict(type='LoadAnnotations'),
            ],
            [
                dict(type='PackSegInputs'),
            ],
        ],
        type='TestTimeAug'),
]
val_cfg = dict(type='ValLoop')
val_dataloader = dict(
    batch_size=1,
    dataset=dict(
        data_prefix=dict(
            img_path='images/validation',
            seg_map_path='annotations/validation'),
        data_root='data/ade/ADEChallengeData2016',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(keep_ratio=True, scale=(
                2048,
                512,
            ), type='Resize'),
            dict(reduce_zero_label=True, type='LoadAnnotations'),
            dict(type='PackSegInputs'),
        ],
        type='ADE20KDataset'),
    num_workers=4,
    persistent_workers=True,
    sampler=dict(shuffle=False, type='DefaultSampler'))
val_evaluator = dict(
    iou_metrics=[
        'mIoU',
    ], type='IoUMetric')
vis_backends = [
    dict(type='LocalVisBackend'),
]
visualizer = dict(
    name='visualizer',
    type='SegLocalVisualizer',
    vis_backends=[
        dict(type='LocalVisBackend'),
    ])
work_dir = '../corruptions/work_dirs/ade20k/mask2former/mask2former_swin-s_8xb2-160k_ade20k-512x512/pixelate'

09/21 07:00:22 - mmengine - INFO - Distributed training is not used, all SyncBatchNorm (SyncBN) layers in the model will be automatically reverted to BatchNormXd layers if they are used.
09/21 07:00:22 - mmengine - INFO - Hooks will be executed in the following order:
before_run:
(VERY_HIGH   ) RuntimeInfoHook                    
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
before_train:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_train_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(NORMAL      ) DistSamplerSeedHook                
 -------------------- 
before_train_iter:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_train_iter:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(NORMAL      ) SegVisualizationHook               
(BELOW_NORMAL) LoggerHook                         
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
after_train_epoch:
(NORMAL      ) IterTimerHook                      
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_val:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
before_val_epoch:
(NORMAL      ) IterTimerHook                      
 -------------------- 
before_val_iter:
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_val_iter:
(NORMAL      ) IterTimerHook                      
(NORMAL      ) SegVisualizationHook               
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_val_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
after_val:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
after_train:
(VERY_HIGH   ) RuntimeInfoHook                    
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_test:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
before_test_epoch:
(NORMAL      ) IterTimerHook                      
 -------------------- 
before_test_iter:
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_test_iter:
(NORMAL      ) IterTimerHook                      
(NORMAL      ) SegVisualizationHook               
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_test_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_test:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
after_run:
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
09/21 07:00:23 - mmengine - WARNING - The prefix is not set in metric class IoUMetric.
Loads checkpoint by local backend from path: ../checkpoint_files/ade20k/mask2former/mask2former_swin-s_8xb2-160k_ade20k-512x512_20221204_143905-e715144e.pth
09/21 07:00:25 - mmengine - INFO - Load checkpoint from ../checkpoint_files/ade20k/mask2former/mask2former_swin-s_8xb2-160k_ade20k-512x512_20221204_143905-e715144e.pth
09/21 07:00:43 - mmengine - INFO - Iter(test) [  50/2000]    eta: 0:11:38  time: 0.2585  data_time: 0.0016  memory: 12814  
09/21 07:00:49 - mmengine - INFO - Iter(test) [ 100/2000]    eta: 0:07:39  time: 0.1535  data_time: 0.0016  memory: 12795  
09/21 07:00:53 - mmengine - INFO - Iter(test) [ 150/2000]    eta: 0:05:49  time: 0.0872  data_time: 0.0016  memory: 935  
09/21 07:01:00 - mmengine - INFO - Iter(test) [ 200/2000]    eta: 0:05:10  time: 0.0873  data_time: 0.0015  memory: 12835  
09/21 07:01:05 - mmengine - INFO - Iter(test) [ 250/2000]    eta: 0:04:41  time: 0.0762  data_time: 0.0014  memory: 12838  
09/21 07:01:10 - mmengine - INFO - Iter(test) [ 300/2000]    eta: 0:04:13  time: 0.0756  data_time: 0.0016  memory: 12803  
09/21 07:01:15 - mmengine - INFO - Iter(test) [ 350/2000]    eta: 0:03:56  time: 0.0831  data_time: 0.0014  memory: 12810  
09/21 07:01:20 - mmengine - INFO - Iter(test) [ 400/2000]    eta: 0:03:40  time: 0.0854  data_time: 0.0014  memory: 12775  
09/21 07:01:24 - mmengine - INFO - Iter(test) [ 450/2000]    eta: 0:03:23  time: 0.0709  data_time: 0.0014  memory: 975  
09/21 07:01:28 - mmengine - INFO - Iter(test) [ 500/2000]    eta: 0:03:08  time: 0.0729  data_time: 0.0014  memory: 935  
09/21 07:01:32 - mmengine - INFO - Iter(test) [ 550/2000]    eta: 0:02:55  time: 0.0861  data_time: 0.0016  memory: 1042  
09/21 07:01:36 - mmengine - INFO - Iter(test) [ 600/2000]    eta: 0:02:45  time: 0.0861  data_time: 0.0017  memory: 1040  
09/21 07:01:41 - mmengine - INFO - Iter(test) [ 650/2000]    eta: 0:02:37  time: 0.1717  data_time: 0.0014  memory: 12816  
09/21 07:01:46 - mmengine - INFO - Iter(test) [ 700/2000]    eta: 0:02:29  time: 0.0753  data_time: 0.0016  memory: 12806  
09/21 07:01:50 - mmengine - INFO - Iter(test) [ 750/2000]    eta: 0:02:20  time: 0.0733  data_time: 0.0014  memory: 1096  
09/21 07:01:54 - mmengine - INFO - Iter(test) [ 800/2000]    eta: 0:02:12  time: 0.0875  data_time: 0.0016  memory: 935  
09/21 07:01:58 - mmengine - INFO - Iter(test) [ 850/2000]    eta: 0:02:05  time: 0.0865  data_time: 0.0016  memory: 908  
09/21 07:02:02 - mmengine - INFO - Iter(test) [ 900/2000]    eta: 0:01:58  time: 0.0818  data_time: 0.0014  memory: 987  
09/21 07:02:06 - mmengine - INFO - Iter(test) [ 950/2000]    eta: 0:01:51  time: 0.0741  data_time: 0.0015  memory: 1015  
09/21 07:02:10 - mmengine - INFO - Iter(test) [1000/2000]    eta: 0:01:44  time: 0.0738  data_time: 0.0015  memory: 1015  
09/21 07:02:15 - mmengine - INFO - Iter(test) [1050/2000]    eta: 0:01:38  time: 0.0845  data_time: 0.0016  memory: 12819  
09/21 07:02:19 - mmengine - INFO - Iter(test) [1100/2000]    eta: 0:01:32  time: 0.0854  data_time: 0.0016  memory: 1012  
09/21 07:02:23 - mmengine - INFO - Iter(test) [1150/2000]    eta: 0:01:27  time: 0.0774  data_time: 0.0015  memory: 985  
09/21 07:02:27 - mmengine - INFO - Iter(test) [1200/2000]    eta: 0:01:20  time: 0.0725  data_time: 0.0014  memory: 1921  
09/21 07:02:31 - mmengine - INFO - Iter(test) [1250/2000]    eta: 0:01:15  time: 0.0774  data_time: 0.0014  memory: 12797  
09/21 07:02:35 - mmengine - INFO - Iter(test) [1300/2000]    eta: 0:01:10  time: 0.0857  data_time: 0.0015  memory: 935  
09/21 07:02:40 - mmengine - INFO - Iter(test) [1350/2000]    eta: 0:01:04  time: 0.0833  data_time: 0.0015  memory: 935  
09/21 07:02:44 - mmengine - INFO - Iter(test) [1400/2000]    eta: 0:00:59  time: 0.0746  data_time: 0.0014  memory: 1012  
09/21 07:02:47 - mmengine - INFO - Iter(test) [1450/2000]    eta: 0:00:53  time: 0.0747  data_time: 0.0014  memory: 1015  
09/21 07:02:51 - mmengine - INFO - Iter(test) [1500/2000]    eta: 0:00:48  time: 0.0723  data_time: 0.0014  memory: 933  
09/21 07:02:55 - mmengine - INFO - Iter(test) [1550/2000]    eta: 0:00:43  time: 0.0846  data_time: 0.0015  memory: 1015  
09/21 07:02:59 - mmengine - INFO - Iter(test) [1600/2000]    eta: 0:00:38  time: 0.0834  data_time: 0.0016  memory: 908  
09/21 07:03:04 - mmengine - INFO - Iter(test) [1650/2000]    eta: 0:00:33  time: 0.0718  data_time: 0.0014  memory: 12807  
09/21 07:03:08 - mmengine - INFO - Iter(test) [1700/2000]    eta: 0:00:28  time: 0.0755  data_time: 0.0016  memory: 1012  
09/21 07:03:12 - mmengine - INFO - Iter(test) [1750/2000]    eta: 0:00:23  time: 0.0825  data_time: 0.0013  memory: 1039  
09/21 07:03:16 - mmengine - INFO - Iter(test) [1800/2000]    eta: 0:00:18  time: 0.0845  data_time: 0.0016  memory: 935  
09/21 07:03:20 - mmengine - INFO - Iter(test) [1850/2000]    eta: 0:00:14  time: 0.0846  data_time: 0.0016  memory: 854  
09/21 07:03:24 - mmengine - INFO - Iter(test) [1900/2000]    eta: 0:00:09  time: 0.0850  data_time: 0.0016  memory: 1068  
09/21 07:03:28 - mmengine - INFO - Iter(test) [1950/2000]    eta: 0:00:04  time: 0.0738  data_time: 0.0014  memory: 1306  
09/21 07:03:32 - mmengine - INFO - Iter(test) [2000/2000]    eta: 0:00:00  time: 0.0777  data_time: 0.0013  memory: 1094  
09/21 07:03:32 - mmengine - INFO - per class results:
09/21 07:03:32 - mmengine - INFO - 
+---------------------+-------+-------+
|        Class        |  IoU  |  Acc  |
+---------------------+-------+-------+
|         wall        |  76.4 | 87.47 |
|       building      | 81.13 | 94.28 |
|         sky         | 94.03 | 96.62 |
|        floor        | 80.89 | 89.73 |
|         tree        |  73.4 | 86.56 |
|       ceiling       | 82.93 |  89.0 |
|         road        | 83.31 | 89.79 |
|         bed         | 88.12 | 95.37 |
|      windowpane     | 58.64 | 77.02 |
|        grass        | 70.52 | 84.65 |
|       cabinet       | 57.04 | 71.99 |
|       sidewalk      | 65.78 |  80.0 |
|        person       | 80.92 | 87.93 |
|        earth        | 33.67 | 49.17 |
|         door        | 41.43 | 55.94 |
|        table        | 62.56 | 78.12 |
|       mountain      | 49.35 | 64.85 |
|        plant        | 48.64 | 62.47 |
|       curtain       | 72.72 | 85.08 |
|        chair        | 55.63 | 68.18 |
|         car         | 81.56 | 89.16 |
|        water        | 57.69 | 81.63 |
|       painting      | 72.54 | 85.44 |
|         sofa        | 60.88 | 70.57 |
|        shelf        | 44.05 | 63.83 |
|        house        | 46.77 | 54.36 |
|         sea         | 62.51 | 74.21 |
|        mirror       | 62.25 | 73.93 |
|         rug         |  57.2 |  69.7 |
|        field        | 30.85 |  45.2 |
|       armchair      | 40.76 | 63.24 |
|         seat        | 53.66 | 77.62 |
|        fence        | 45.66 | 62.46 |
|         desk        | 52.01 | 72.24 |
|         rock        | 34.59 | 60.55 |
|       wardrobe      | 49.11 | 72.93 |
|         lamp        | 64.45 | 76.31 |
|       bathtub       | 78.38 | 91.68 |
|       railing       | 34.15 | 47.75 |
|       cushion       | 55.15 | 69.18 |
|         base        |  27.2 | 34.18 |
|         box         | 23.94 | 39.42 |
|        column       | 44.12 | 58.58 |
|      signboard      | 36.13 | 49.93 |
|   chest of drawers  |  38.3 |  56.5 |
|       counter       | 33.72 | 41.02 |
|         sand        | 34.47 | 50.71 |
|         sink        |  71.9 | 80.05 |
|      skyscraper     | 31.15 | 32.65 |
|      fireplace      | 58.71 | 73.55 |
|     refrigerator    | 58.17 | 78.12 |
|      grandstand     | 34.85 | 69.83 |
|         path        | 20.67 | 31.26 |
|        stairs       | 27.69 | 36.83 |
|        runway       | 74.19 | 96.34 |
|         case        |  58.8 | 68.29 |
|      pool table     | 93.66 | 96.26 |
|        pillow       | 55.89 | 63.93 |
|     screen door     |  61.0 | 76.99 |
|       stairway      | 37.34 | 51.19 |
|        river        | 12.31 | 13.88 |
|        bridge       | 68.82 | 79.26 |
|       bookcase      | 33.83 | 56.93 |
|        blind        |  37.1 | 43.81 |
|     coffee table    | 64.01 | 80.75 |
|        toilet       | 88.06 | 90.21 |
|        flower       | 36.15 |  50.7 |
|         book        |  47.9 |  70.1 |
|         hill        |  6.53 | 10.18 |
|        bench        | 43.03 | 58.06 |
|      countertop     | 54.71 | 69.58 |
|        stove        | 74.37 | 80.09 |
|         palm        | 49.14 | 63.08 |
|    kitchen island   | 46.24 | 78.05 |
|       computer      | 59.98 | 67.39 |
|     swivel chair    |  43.5 | 57.31 |
|         boat        | 43.08 | 45.96 |
|         bar         | 58.75 | 73.87 |
|    arcade machine   | 18.77 | 20.47 |
|        hovel        |  40.0 | 47.63 |
|         bus         | 86.42 | 95.83 |
|        towel        | 68.17 | 73.63 |
|        light        | 60.14 | 73.91 |
|        truck        | 29.46 | 51.35 |
|        tower        | 27.36 | 38.11 |
|      chandelier     | 65.34 |  73.3 |
|        awning       | 34.86 |  42.4 |
|     streetlight     | 32.17 | 41.23 |
|        booth        | 41.75 | 47.49 |
| television receiver | 58.15 | 81.23 |
|       airplane      | 51.72 | 59.74 |
|      dirt track     |  1.07 |  1.36 |
|       apparel       | 28.72 | 41.58 |
|         pole        | 34.67 | 57.01 |
|         land        |  7.92 | 11.29 |
|      bannister      |  7.98 | 11.07 |
|      escalator      | 19.05 | 20.59 |
|       ottoman       | 48.76 | 61.96 |
|        bottle       |  19.7 | 25.33 |
|        buffet       | 40.27 |  45.8 |
|        poster       | 34.66 | 45.37 |
|        stage        |  7.1  | 16.56 |
|         van         | 47.27 | 80.11 |
|         ship        |  4.98 |  7.23 |
|       fountain      |  39.8 | 43.39 |
|    conveyer belt    | 51.07 | 67.99 |
|        canopy       | 18.98 | 20.46 |
|        washer       | 63.91 | 64.14 |
|      plaything      | 17.32 | 23.01 |
|    swimming pool    | 70.39 | 72.48 |
|        stool        | 39.38 | 54.37 |
|        barrel       | 56.04 | 73.92 |
|        basket       | 28.34 | 32.31 |
|      waterfall      |  50.3 | 57.99 |
|         tent        | 94.61 | 98.26 |
|         bag         | 12.74 | 14.91 |
|       minibike      |  53.8 |  59.3 |
|        cradle       |  80.8 | 97.01 |
|         oven        | 55.28 |  66.9 |
|         ball        | 38.66 | 61.45 |
|         food        | 56.85 | 67.92 |
|         step        | 11.75 | 16.04 |
|         tank        | 24.28 | 28.69 |
|      trade name     | 28.83 | 34.34 |
|      microwave      |  39.4 | 43.98 |
|         pot         | 51.39 | 64.08 |
|        animal       | 60.02 | 61.55 |
|       bicycle       | 52.64 | 67.14 |
|         lake        | 65.55 | 72.87 |
|      dishwasher     | 66.65 |  74.1 |
|        screen       | 64.34 | 90.89 |
|       blanket       | 15.42 |  19.9 |
|      sculpture      | 45.56 | 62.05 |
|         hood        | 60.05 | 63.64 |
|        sconce       | 45.95 |  54.7 |
|         vase        | 39.16 | 54.87 |
|    traffic light    | 34.76 | 56.94 |
|         tray        | 15.47 | 23.55 |
|        ashcan       | 37.86 | 59.53 |
|         fan         | 61.53 | 76.29 |
|         pier        |  33.9 | 40.02 |
|      crt screen     |  3.08 | 12.67 |
|        plate        | 52.36 | 71.56 |
|       monitor       |  5.01 |  6.94 |
|    bulletin board   | 39.46 | 56.38 |
|        shower       |  4.36 | 18.33 |
|       radiator      | 61.52 | 75.47 |
|        glass        | 16.79 | 18.59 |
|        clock        | 33.89 | 41.25 |
|         flag        | 33.36 |  38.3 |
+---------------------+-------+-------+
09/21 07:03:32 - mmengine - INFO - Iter(test) [2000/2000]    aAcc: 82.0800  mIoU: 47.2000  mAcc: 58.8200  data_time: 0.0017  time: 0.0932
Finished processing corruption type: pixelate
Processing corruption type: jpeg_compression
09/21 07:03:37 - mmengine - INFO - 
------------------------------------------------------------
System environment:
    sys.platform: linux
    Python: 3.10.13 | packaged by conda-forge | (main, Dec 23 2023, 15:36:39) [GCC 12.3.0]
    CUDA available: True
    MUSA available: False
    numpy_random_seed: 311801632
    GPU 0: Tesla V100-SXM2-32GB
    CUDA_HOME: /opt/bwhpc/common/devel/cuda/11.7
    NVCC: Cuda compilation tools, release 11.7, V11.7.99
    GCC: gcc (GCC) 8.5.0 20210514 (Red Hat 8.5.0-18)
    PyTorch: 1.13.1
    PyTorch compiling details: PyTorch built with:
  - GCC 9.3
  - C++ Version: 201402
  - Intel(R) oneAPI Math Kernel Library Version 2023.1-Product Build 20230303 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v2.6.0 (Git Hash 52b5f107dd9cf10910aaa19cb47f3abf9b349815)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - LAPACK is enabled (usually provided by MKL)
  - NNPACK is enabled
  - CPU capability usage: AVX2
  - CUDA Runtime 11.7
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_61,code=sm_61;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86;-gencode;arch=compute_37,code=compute_37
  - CuDNN 8.5
  - Magma 2.6.1
  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.7, CUDNN_VERSION=8.5.0, CXX_COMPILER=/opt/rh/devtoolset-9/root/usr/bin/c++, CXX_FLAGS= -fabi-version=11 -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -DEDGE_PROFILER_USE_KINETO -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Werror=non-virtual-dtor -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wunused-local-typedefs -Wno-unused-parameter -Wno-unused-function -Wno-unused-result -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Werror=cast-function-type -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.13.1, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, USE_ROCM=OFF, 

    TorchVision: 0.14.1
    OpenCV: 3.4.18
    MMEngine: 0.10.4

Runtime environment:
    cudnn_benchmark: True
    mp_cfg: {'mp_start_method': 'fork', 'opencv_num_threads': 0}
    dist_cfg: {'backend': 'nccl'}
    seed: 311801632
    Distributed launcher: none
    Distributed training: False
    GPU number: 1
------------------------------------------------------------

09/21 07:03:37 - mmengine - INFO - Config:
auto_scale_lr = dict(base_batch_size=16, enable=False)
backbone_embed_multi = dict(decay_mult=0.0, lr_mult=0.1)
backbone_norm_multi = dict(decay_mult=0.0, lr_mult=0.1)
crop_size = (
    512,
    512,
)
custom_imports = dict(allow_failed_imports=False, imports='mmdet.models')
custom_keys = dict({
    'absolute_pos_embed':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone':
    dict(decay_mult=1.0, lr_mult=0.1),
    'backbone.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.patch_embed.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.0.blocks.0.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.0.blocks.1.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.0.downsample.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.1.blocks.0.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.1.blocks.1.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.1.downsample.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.0.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.1.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.10.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.11.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.12.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.13.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.14.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.15.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.16.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.17.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.2.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.3.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.4.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.5.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.6.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.7.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.8.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.9.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.downsample.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.3.blocks.0.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.3.blocks.1.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'level_embed':
    dict(decay_mult=0.0, lr_mult=1.0),
    'query_embed':
    dict(decay_mult=0.0, lr_mult=1.0),
    'query_feat':
    dict(decay_mult=0.0, lr_mult=1.0),
    'relative_position_bias_table':
    dict(decay_mult=0.0, lr_mult=0.1)
})
data_root = 'data/ade/ADEChallengeData2016'
dataset_type = 'ADE20KDataset'
default_hooks = dict(
    checkpoint=dict(
        by_epoch=False, interval=5000, save_best='mIoU',
        type='CheckpointHook'),
    logger=dict(interval=50, log_metric_by_epoch=False, type='LoggerHook'),
    param_scheduler=dict(type='ParamSchedulerHook'),
    sampler_seed=dict(type='DistSamplerSeedHook'),
    timer=dict(type='IterTimerHook'),
    visualization=dict(type='SegVisualizationHook'))
default_scope = 'mmseg'
depths = [
    2,
    2,
    18,
    2,
]
embed_multi = dict(decay_mult=0.0, lr_mult=1.0)
env_cfg = dict(
    cudnn_benchmark=True,
    dist_cfg=dict(backend='nccl'),
    mp_cfg=dict(mp_start_method='fork', opencv_num_threads=0))
img_ratios = [
    0.5,
    0.75,
    1.0,
    1.25,
    1.5,
    1.75,
]
launcher = 'none'
load_from = '../checkpoint_files/ade20k/mask2former/mask2former_swin-s_8xb2-160k_ade20k-512x512_20221204_143905-e715144e.pth'
log_level = 'INFO'
log_processor = dict(by_epoch=False)
model = dict(
    backbone=dict(
        attn_drop_rate=0.0,
        depths=[
            2,
            2,
            18,
            2,
        ],
        drop_path_rate=0.3,
        drop_rate=0.0,
        embed_dims=96,
        frozen_stages=-1,
        init_cfg=dict(
            checkpoint=
            'https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/swin/swin_small_patch4_window7_224_20220317-7ba6d6dd.pth',
            type='Pretrained'),
        mlp_ratio=4,
        num_heads=[
            3,
            6,
            12,
            24,
        ],
        out_indices=(
            0,
            1,
            2,
            3,
        ),
        patch_norm=True,
        qk_scale=None,
        qkv_bias=True,
        type='SwinTransformer',
        window_size=7,
        with_cp=False),
    data_preprocessor=dict(
        bgr_to_rgb=True,
        corruption='jpeg_compression',
        mean=[
            123.675,
            116.28,
            103.53,
        ],
        pad_val=0,
        seg_pad_val=255,
        size=(
            512,
            512,
        ),
        std=[
            58.395,
            57.12,
            57.375,
        ],
        test_cfg=dict(size_divisor=32),
        type='SegDataPreProcessor'),
    decode_head=dict(
        align_corners=False,
        enforce_decoder_input_project=False,
        feat_channels=256,
        in_channels=[
            96,
            192,
            384,
            768,
        ],
        loss_cls=dict(
            class_weight=[
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                0.1,
            ],
            loss_weight=2.0,
            reduction='mean',
            type='mmdet.CrossEntropyLoss',
            use_sigmoid=False),
        loss_dice=dict(
            activate=True,
            eps=1.0,
            loss_weight=5.0,
            naive_dice=True,
            reduction='mean',
            type='mmdet.DiceLoss',
            use_sigmoid=True),
        loss_mask=dict(
            loss_weight=5.0,
            reduction='mean',
            type='mmdet.CrossEntropyLoss',
            use_sigmoid=True),
        num_classes=150,
        num_queries=100,
        num_transformer_feat_level=3,
        out_channels=256,
        pixel_decoder=dict(
            act_cfg=dict(type='ReLU'),
            encoder=dict(
                init_cfg=None,
                layer_cfg=dict(
                    ffn_cfg=dict(
                        act_cfg=dict(inplace=True, type='ReLU'),
                        embed_dims=256,
                        feedforward_channels=1024,
                        ffn_drop=0.0,
                        num_fcs=2),
                    self_attn_cfg=dict(
                        batch_first=True,
                        dropout=0.0,
                        embed_dims=256,
                        im2col_step=64,
                        init_cfg=None,
                        norm_cfg=None,
                        num_heads=8,
                        num_levels=3,
                        num_points=4)),
                num_layers=6),
            init_cfg=None,
            norm_cfg=dict(num_groups=32, type='GN'),
            num_outs=3,
            positional_encoding=dict(normalize=True, num_feats=128),
            type='mmdet.MSDeformAttnPixelDecoder'),
        positional_encoding=dict(normalize=True, num_feats=128),
        strides=[
            4,
            8,
            16,
            32,
        ],
        train_cfg=dict(
            assigner=dict(
                match_costs=[
                    dict(type='mmdet.ClassificationCost', weight=2.0),
                    dict(
                        type='mmdet.CrossEntropyLossCost',
                        use_sigmoid=True,
                        weight=5.0),
                    dict(
                        eps=1.0,
                        pred_act=True,
                        type='mmdet.DiceCost',
                        weight=5.0),
                ],
                type='mmdet.HungarianAssigner'),
            importance_sample_ratio=0.75,
            num_points=12544,
            oversample_ratio=3.0,
            sampler=dict(type='mmdet.MaskPseudoSampler')),
        transformer_decoder=dict(
            init_cfg=None,
            layer_cfg=dict(
                cross_attn_cfg=dict(
                    attn_drop=0.0,
                    batch_first=True,
                    dropout_layer=None,
                    embed_dims=256,
                    num_heads=8,
                    proj_drop=0.0),
                ffn_cfg=dict(
                    act_cfg=dict(inplace=True, type='ReLU'),
                    add_identity=True,
                    dropout_layer=None,
                    embed_dims=256,
                    feedforward_channels=2048,
                    ffn_drop=0.0,
                    num_fcs=2),
                self_attn_cfg=dict(
                    attn_drop=0.0,
                    batch_first=True,
                    dropout_layer=None,
                    embed_dims=256,
                    num_heads=8,
                    proj_drop=0.0)),
            num_layers=9,
            return_intermediate=True),
        type='Mask2FormerHead'),
    test_cfg=dict(mode='whole'),
    train_cfg=dict(),
    type='EncoderDecoder')
num_classes = 150
optim_wrapper = dict(
    clip_grad=dict(max_norm=0.01, norm_type=2),
    optimizer=dict(
        betas=(
            0.9,
            0.999,
        ),
        eps=1e-08,
        lr=0.0001,
        type='AdamW',
        weight_decay=0.05),
    paramwise_cfg=dict(
        custom_keys=dict({
            'absolute_pos_embed':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone':
            dict(decay_mult=1.0, lr_mult=0.1),
            'backbone.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.patch_embed.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.0.blocks.0.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.0.blocks.1.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.0.downsample.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.1.blocks.0.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.1.blocks.1.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.1.downsample.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.0.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.1.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.10.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.11.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.12.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.13.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.14.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.15.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.16.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.17.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.2.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.3.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.4.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.5.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.6.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.7.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.8.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.9.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.downsample.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.3.blocks.0.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.3.blocks.1.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'level_embed':
            dict(decay_mult=0.0, lr_mult=1.0),
            'query_embed':
            dict(decay_mult=0.0, lr_mult=1.0),
            'query_feat':
            dict(decay_mult=0.0, lr_mult=1.0),
            'relative_position_bias_table':
            dict(decay_mult=0.0, lr_mult=0.1)
        }),
        norm_decay_mult=0.0),
    type='OptimWrapper')
optimizer = dict(
    betas=(
        0.9,
        0.999,
    ),
    eps=1e-08,
    lr=0.0001,
    type='AdamW',
    weight_decay=0.05)
param_scheduler = [
    dict(
        begin=0,
        by_epoch=False,
        end=160000,
        eta_min=0,
        power=0.9,
        type='PolyLR'),
]
pretrained = 'https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/swin/swin_small_patch4_window7_224_20220317-7ba6d6dd.pth'
resume = False
test_cfg = dict(type='TestLoop')
test_dataloader = dict(
    batch_size=1,
    dataset=dict(
        data_prefix=dict(
            img_path='images/validation',
            seg_map_path='annotations/validation'),
        data_root='data/ade/ADEChallengeData2016',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(keep_ratio=True, scale=(
                2048,
                512,
            ), type='Resize'),
            dict(reduce_zero_label=True, type='LoadAnnotations'),
            dict(type='PackSegInputs'),
        ],
        type='ADE20KDataset'),
    num_workers=4,
    persistent_workers=True,
    sampler=dict(shuffle=False, type='DefaultSampler'))
test_evaluator = dict(
    iou_metrics=[
        'mIoU',
    ], type='IoUMetric')
test_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(keep_ratio=True, scale=(
        2048,
        512,
    ), type='Resize'),
    dict(reduce_zero_label=True, type='LoadAnnotations'),
    dict(type='PackSegInputs'),
]
train_cfg = dict(
    max_iters=160000, type='IterBasedTrainLoop', val_interval=5000)
train_dataloader = dict(
    batch_size=2,
    dataset=dict(
        data_prefix=dict(
            img_path='images/training', seg_map_path='annotations/training'),
        data_root='data/ade/ADEChallengeData2016',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(reduce_zero_label=True, type='LoadAnnotations'),
            dict(
                max_size=2048,
                resize_type='ResizeShortestEdge',
                scales=[
                    256,
                    307,
                    358,
                    409,
                    460,
                    512,
                    563,
                    614,
                    665,
                    716,
                    768,
                    819,
                    870,
                    921,
                    972,
                    1024,
                ],
                type='RandomChoiceResize'),
            dict(
                cat_max_ratio=0.75, crop_size=(
                    512,
                    512,
                ), type='RandomCrop'),
            dict(prob=0.5, type='RandomFlip'),
            dict(type='PhotoMetricDistortion'),
            dict(type='PackSegInputs'),
        ],
        type='ADE20KDataset'),
    num_workers=4,
    persistent_workers=True,
    sampler=dict(shuffle=True, type='InfiniteSampler'))
train_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(reduce_zero_label=True, type='LoadAnnotations'),
    dict(
        max_size=2048,
        resize_type='ResizeShortestEdge',
        scales=[
            256,
            307,
            358,
            409,
            460,
            512,
            563,
            614,
            665,
            716,
            768,
            819,
            870,
            921,
            972,
            1024,
        ],
        type='RandomChoiceResize'),
    dict(cat_max_ratio=0.75, crop_size=(
        512,
        512,
    ), type='RandomCrop'),
    dict(prob=0.5, type='RandomFlip'),
    dict(type='PhotoMetricDistortion'),
    dict(type='PackSegInputs'),
]
tta_model = dict(type='SegTTAModel')
tta_pipeline = [
    dict(backend_args=None, type='LoadImageFromFile'),
    dict(
        transforms=[
            [
                dict(keep_ratio=True, scale_factor=0.5, type='Resize'),
                dict(keep_ratio=True, scale_factor=0.75, type='Resize'),
                dict(keep_ratio=True, scale_factor=1.0, type='Resize'),
                dict(keep_ratio=True, scale_factor=1.25, type='Resize'),
                dict(keep_ratio=True, scale_factor=1.5, type='Resize'),
                dict(keep_ratio=True, scale_factor=1.75, type='Resize'),
            ],
            [
                dict(direction='horizontal', prob=0.0, type='RandomFlip'),
                dict(direction='horizontal', prob=1.0, type='RandomFlip'),
            ],
            [
                dict(type='LoadAnnotations'),
            ],
            [
                dict(type='PackSegInputs'),
            ],
        ],
        type='TestTimeAug'),
]
val_cfg = dict(type='ValLoop')
val_dataloader = dict(
    batch_size=1,
    dataset=dict(
        data_prefix=dict(
            img_path='images/validation',
            seg_map_path='annotations/validation'),
        data_root='data/ade/ADEChallengeData2016',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(keep_ratio=True, scale=(
                2048,
                512,
            ), type='Resize'),
            dict(reduce_zero_label=True, type='LoadAnnotations'),
            dict(type='PackSegInputs'),
        ],
        type='ADE20KDataset'),
    num_workers=4,
    persistent_workers=True,
    sampler=dict(shuffle=False, type='DefaultSampler'))
val_evaluator = dict(
    iou_metrics=[
        'mIoU',
    ], type='IoUMetric')
vis_backends = [
    dict(type='LocalVisBackend'),
]
visualizer = dict(
    name='visualizer',
    type='SegLocalVisualizer',
    vis_backends=[
        dict(type='LocalVisBackend'),
    ])
work_dir = '../corruptions/work_dirs/ade20k/mask2former/mask2former_swin-s_8xb2-160k_ade20k-512x512/jpeg_compression'

09/21 07:03:40 - mmengine - INFO - Distributed training is not used, all SyncBatchNorm (SyncBN) layers in the model will be automatically reverted to BatchNormXd layers if they are used.
09/21 07:03:40 - mmengine - INFO - Hooks will be executed in the following order:
before_run:
(VERY_HIGH   ) RuntimeInfoHook                    
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
before_train:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_train_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(NORMAL      ) DistSamplerSeedHook                
 -------------------- 
before_train_iter:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_train_iter:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(NORMAL      ) SegVisualizationHook               
(BELOW_NORMAL) LoggerHook                         
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
after_train_epoch:
(NORMAL      ) IterTimerHook                      
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_val:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
before_val_epoch:
(NORMAL      ) IterTimerHook                      
 -------------------- 
before_val_iter:
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_val_iter:
(NORMAL      ) IterTimerHook                      
(NORMAL      ) SegVisualizationHook               
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_val_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
after_val:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
after_train:
(VERY_HIGH   ) RuntimeInfoHook                    
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_test:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
before_test_epoch:
(NORMAL      ) IterTimerHook                      
 -------------------- 
before_test_iter:
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_test_iter:
(NORMAL      ) IterTimerHook                      
(NORMAL      ) SegVisualizationHook               
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_test_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_test:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
after_run:
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
09/21 07:03:41 - mmengine - WARNING - The prefix is not set in metric class IoUMetric.
Loads checkpoint by local backend from path: ../checkpoint_files/ade20k/mask2former/mask2former_swin-s_8xb2-160k_ade20k-512x512_20221204_143905-e715144e.pth
09/21 07:03:42 - mmengine - INFO - Load checkpoint from ../checkpoint_files/ade20k/mask2former/mask2former_swin-s_8xb2-160k_ade20k-512x512_20221204_143905-e715144e.pth
09/21 07:04:00 - mmengine - INFO - Iter(test) [  50/2000]    eta: 0:11:39  time: 0.2509  data_time: 0.0016  memory: 12814  
09/21 07:04:07 - mmengine - INFO - Iter(test) [ 100/2000]    eta: 0:07:47  time: 0.1566  data_time: 0.0015  memory: 12795  
09/21 07:04:11 - mmengine - INFO - Iter(test) [ 150/2000]    eta: 0:05:51  time: 0.0788  data_time: 0.0014  memory: 935  
09/21 07:04:17 - mmengine - INFO - Iter(test) [ 200/2000]    eta: 0:05:14  time: 0.0905  data_time: 0.0014  memory: 12835  
09/21 07:04:23 - mmengine - INFO - Iter(test) [ 250/2000]    eta: 0:04:46  time: 0.0804  data_time: 0.0014  memory: 12838  
09/21 07:04:28 - mmengine - INFO - Iter(test) [ 300/2000]    eta: 0:04:18  time: 0.0801  data_time: 0.0015  memory: 12803  
09/21 07:04:33 - mmengine - INFO - Iter(test) [ 350/2000]    eta: 0:04:01  time: 0.0891  data_time: 0.0014  memory: 12810  
09/21 07:04:39 - mmengine - INFO - Iter(test) [ 400/2000]    eta: 0:03:46  time: 0.0923  data_time: 0.0020  memory: 12775  
09/21 07:04:43 - mmengine - INFO - Iter(test) [ 450/2000]    eta: 0:03:29  time: 0.0803  data_time: 0.0014  memory: 975  
09/21 07:04:47 - mmengine - INFO - Iter(test) [ 500/2000]    eta: 0:03:14  time: 0.0781  data_time: 0.0014  memory: 935  
09/21 07:04:51 - mmengine - INFO - Iter(test) [ 550/2000]    eta: 0:03:01  time: 0.0833  data_time: 0.0015  memory: 1042  
09/21 07:04:56 - mmengine - INFO - Iter(test) [ 600/2000]    eta: 0:02:51  time: 0.0939  data_time: 0.0017  memory: 1040  
09/21 07:05:01 - mmengine - INFO - Iter(test) [ 650/2000]    eta: 0:02:43  time: 0.1796  data_time: 0.0014  memory: 12816  
09/21 07:05:06 - mmengine - INFO - Iter(test) [ 700/2000]    eta: 0:02:35  time: 0.0808  data_time: 0.0016  memory: 12806  
09/21 07:05:10 - mmengine - INFO - Iter(test) [ 750/2000]    eta: 0:02:26  time: 0.0791  data_time: 0.0014  memory: 1096  
09/21 07:05:14 - mmengine - INFO - Iter(test) [ 800/2000]    eta: 0:02:18  time: 0.0937  data_time: 0.0017  memory: 935  
09/21 07:05:19 - mmengine - INFO - Iter(test) [ 850/2000]    eta: 0:02:11  time: 0.0943  data_time: 0.0017  memory: 908  
09/21 07:05:23 - mmengine - INFO - Iter(test) [ 900/2000]    eta: 0:02:03  time: 0.0749  data_time: 0.0014  memory: 987  
09/21 07:05:27 - mmengine - INFO - Iter(test) [ 950/2000]    eta: 0:01:56  time: 0.0785  data_time: 0.0015  memory: 1015  
09/21 07:05:31 - mmengine - INFO - Iter(test) [1000/2000]    eta: 0:01:49  time: 0.0853  data_time: 0.0015  memory: 1015  
09/21 07:05:37 - mmengine - INFO - Iter(test) [1050/2000]    eta: 0:01:43  time: 0.0929  data_time: 0.0015  memory: 12819  
09/21 07:05:42 - mmengine - INFO - Iter(test) [1100/2000]    eta: 0:01:37  time: 0.0922  data_time: 0.0015  memory: 1012  
09/21 07:05:46 - mmengine - INFO - Iter(test) [1150/2000]    eta: 0:01:31  time: 0.0783  data_time: 0.0014  memory: 985  
09/21 07:05:50 - mmengine - INFO - Iter(test) [1200/2000]    eta: 0:01:24  time: 0.0771  data_time: 0.0014  memory: 1921  
09/21 07:05:55 - mmengine - INFO - Iter(test) [1250/2000]    eta: 0:01:19  time: 0.0906  data_time: 0.0014  memory: 12797  
09/21 07:05:59 - mmengine - INFO - Iter(test) [1300/2000]    eta: 0:01:13  time: 0.0914  data_time: 0.0014  memory: 935  
09/21 07:06:03 - mmengine - INFO - Iter(test) [1350/2000]    eta: 0:01:08  time: 0.0751  data_time: 0.0014  memory: 935  
09/21 07:06:07 - mmengine - INFO - Iter(test) [1400/2000]    eta: 0:01:02  time: 0.0809  data_time: 0.0014  memory: 1012  
09/21 07:06:11 - mmengine - INFO - Iter(test) [1450/2000]    eta: 0:00:56  time: 0.0861  data_time: 0.0014  memory: 1015  
09/21 07:06:16 - mmengine - INFO - Iter(test) [1500/2000]    eta: 0:00:51  time: 0.0880  data_time: 0.0014  memory: 933  
09/21 07:06:20 - mmengine - INFO - Iter(test) [1550/2000]    eta: 0:00:45  time: 0.0930  data_time: 0.0015  memory: 1015  
09/21 07:06:25 - mmengine - INFO - Iter(test) [1600/2000]    eta: 0:00:40  time: 0.0782  data_time: 0.0015  memory: 908  
09/21 07:06:29 - mmengine - INFO - Iter(test) [1650/2000]    eta: 0:00:35  time: 0.0760  data_time: 0.0013  memory: 12807  
09/21 07:06:34 - mmengine - INFO - Iter(test) [1700/2000]    eta: 0:00:30  time: 0.0927  data_time: 0.0016  memory: 1012  
09/21 07:06:38 - mmengine - INFO - Iter(test) [1750/2000]    eta: 0:00:25  time: 0.0904  data_time: 0.0014  memory: 1039  
09/21 07:06:43 - mmengine - INFO - Iter(test) [1800/2000]    eta: 0:00:20  time: 0.0858  data_time: 0.0016  memory: 935  
09/21 07:06:47 - mmengine - INFO - Iter(test) [1850/2000]    eta: 0:00:14  time: 0.0806  data_time: 0.0015  memory: 854  
09/21 07:06:51 - mmengine - INFO - Iter(test) [1900/2000]    eta: 0:00:09  time: 0.0779  data_time: 0.0014  memory: 1068  
09/21 07:06:55 - mmengine - INFO - Iter(test) [1950/2000]    eta: 0:00:04  time: 0.0905  data_time: 0.0014  memory: 1306  
09/21 07:07:00 - mmengine - INFO - Iter(test) [2000/2000]    eta: 0:00:00  time: 0.0836  data_time: 0.0013  memory: 1094  
09/21 07:07:00 - mmengine - INFO - per class results:
09/21 07:07:00 - mmengine - INFO - 
+---------------------+-------+-------+
|        Class        |  IoU  |  Acc  |
+---------------------+-------+-------+
|         wall        | 76.58 | 88.09 |
|       building      | 83.47 | 93.53 |
|         sky         | 94.68 | 97.28 |
|        floor        |  80.4 | 90.11 |
|         tree        | 74.75 | 85.63 |
|       ceiling       | 82.31 |  88.5 |
|         road        | 82.59 | 90.39 |
|         bed         | 86.91 |  95.2 |
|      windowpane     | 58.88 | 77.88 |
|        grass        | 71.81 | 82.97 |
|       cabinet       | 57.73 | 72.25 |
|       sidewalk      | 62.76 | 77.93 |
|        person       | 81.54 | 88.32 |
|        earth        | 38.12 | 54.78 |
|         door        | 45.86 |  61.2 |
|        table        | 62.14 | 77.04 |
|       mountain      |  65.1 | 79.27 |
|        plant        | 49.28 | 62.38 |
|       curtain       |  69.5 | 79.79 |
|        chair        | 58.04 | 70.52 |
|         car         | 83.35 | 91.95 |
|        water        | 62.72 | 78.78 |
|       painting      | 69.15 | 83.08 |
|         sofa        | 64.06 | 77.04 |
|        shelf        | 40.33 | 58.54 |
|        house        | 53.19 | 70.94 |
|         sea         | 71.31 | 83.03 |
|        mirror       | 67.37 | 79.11 |
|         rug         |  60.4 | 67.24 |
|        field        | 27.07 | 45.44 |
|       armchair      |  41.9 | 65.41 |
|         seat        | 58.38 | 83.17 |
|        fence        | 44.62 | 58.14 |
|         desk        | 48.44 | 70.89 |
|         rock        | 51.38 | 71.88 |
|       wardrobe      | 45.22 | 67.54 |
|         lamp        | 66.72 | 77.96 |
|       bathtub       |  73.5 | 86.31 |
|       railing       | 32.93 | 50.58 |
|       cushion       | 57.51 | 71.64 |
|         base        |  32.9 | 50.61 |
|         box         | 21.61 | 29.23 |
|        column       | 47.39 | 57.03 |
|      signboard      | 35.53 | 47.15 |
|   chest of drawers  |  43.5 | 60.73 |
|       counter       | 20.55 | 32.09 |
|         sand        | 37.24 |  50.8 |
|         sink        | 75.33 | 82.85 |
|      skyscraper     | 47.17 | 59.41 |
|      fireplace      | 66.19 | 80.21 |
|     refrigerator    | 57.74 | 81.94 |
|      grandstand     |  39.6 | 63.53 |
|         path        | 19.11 | 33.52 |
|        stairs       | 24.64 |  31.4 |
|        runway       | 76.38 | 90.15 |
|         case        | 48.64 | 60.08 |
|      pool table     | 92.06 | 95.74 |
|        pillow       | 57.15 | 64.49 |
|     screen door     | 64.13 | 74.75 |
|       stairway      | 35.67 | 53.57 |
|        river        | 13.95 | 31.41 |
|        bridge       | 33.51 | 46.67 |
|       bookcase      | 30.65 | 60.22 |
|        blind        | 30.78 | 31.62 |
|     coffee table    | 62.01 | 81.65 |
|        toilet       | 86.37 | 90.45 |
|        flower       | 37.18 | 48.06 |
|         book        | 50.28 | 68.01 |
|         hill        |  16.5 | 26.59 |
|        bench        | 52.64 | 64.12 |
|      countertop     | 60.24 | 77.88 |
|        stove        | 71.82 | 82.16 |
|         palm        |  54.1 | 75.04 |
|    kitchen island   | 35.86 | 61.86 |
|       computer      | 61.95 | 70.75 |
|     swivel chair    | 54.47 | 75.85 |
|         boat        | 67.04 | 87.98 |
|         bar         | 57.49 | 76.79 |
|    arcade machine   | 44.11 | 47.89 |
|        hovel        | 38.79 | 48.45 |
|         bus         | 78.11 |  90.4 |
|        towel        | 68.09 | 74.69 |
|        light        |  59.0 | 74.76 |
|        truck        | 35.63 | 51.56 |
|        tower        | 44.89 | 63.32 |
|      chandelier     | 68.26 |  78.3 |
|        awning       | 31.24 | 43.36 |
|     streetlight     | 29.38 | 40.45 |
|        booth        | 29.47 | 38.49 |
| television receiver | 61.05 | 78.21 |
|       airplane      | 57.22 | 64.96 |
|      dirt track     |  2.98 |  4.75 |
|       apparel       | 27.06 | 43.12 |
|         pole        | 27.58 | 38.03 |
|         land        |  8.02 | 11.13 |
|      bannister      | 15.33 | 21.36 |
|      escalator      |  19.2 | 19.67 |
|       ottoman       | 46.92 | 59.52 |
|        bottle       | 18.46 | 21.88 |
|        buffet       | 40.17 |  42.3 |
|        poster       | 31.95 | 44.67 |
|        stage        | 16.41 | 28.26 |
|         van         | 53.26 | 76.22 |
|         ship        |  9.79 | 10.14 |
|       fountain      | 20.88 | 21.81 |
|    conveyer belt    |  54.7 | 67.92 |
|        canopy       | 26.14 | 34.53 |
|        washer       | 68.15 | 71.68 |
|      plaything      | 13.77 | 22.78 |
|    swimming pool    | 44.07 | 59.74 |
|        stool        | 43.51 | 55.23 |
|        barrel       |  47.8 | 51.09 |
|        basket       | 29.58 | 36.21 |
|      waterfall      | 60.75 | 87.55 |
|         tent        | 95.99 | 98.09 |
|         bag         | 17.28 | 21.76 |
|       minibike      | 73.22 | 84.01 |
|        cradle       | 77.73 | 96.65 |
|         oven        |  48.3 | 59.88 |
|         ball        | 28.93 | 72.12 |
|         food        | 56.05 | 70.02 |
|         step        | 11.26 | 15.77 |
|         tank        | 37.54 | 39.43 |
|      trade name     |  31.9 | 38.12 |
|      microwave      | 39.71 | 43.35 |
|         pot         | 50.84 |  61.5 |
|        animal       | 60.69 | 63.96 |
|       bicycle       | 58.73 |  74.6 |
|         lake        |  8.23 |  9.53 |
|      dishwasher     | 70.86 | 77.94 |
|        screen       | 80.05 |  89.0 |
|       blanket       |  7.97 |  9.56 |
|      sculpture      | 51.48 | 61.34 |
|         hood        | 63.76 |  67.5 |
|        sconce       | 48.78 |  59.9 |
|         vase        | 42.18 | 55.96 |
|    traffic light    | 32.55 | 56.88 |
|         tray        | 12.54 | 18.64 |
|        ashcan       | 40.44 | 61.37 |
|         fan         | 63.65 | 78.11 |
|         pier        | 38.36 | 59.01 |
|      crt screen     |  3.97 | 13.19 |
|        plate        | 56.21 | 71.49 |
|       monitor       |  2.99 |  4.62 |
|    bulletin board   | 54.22 | 60.93 |
|        shower       |  2.28 | 21.05 |
|       radiator      | 50.23 | 63.93 |
|        glass        | 16.82 | 18.33 |
|        clock        | 32.79 | 38.02 |
|         flag        | 33.28 | 36.29 |
+---------------------+-------+-------+
09/21 07:07:00 - mmengine - INFO - Iter(test) [2000/2000]    aAcc: 82.6500  mIoU: 47.9700  mAcc: 60.0300  data_time: 0.0017  time: 0.0987
Finished processing corruption type: jpeg_compression
Processing corruption type: elastic_transform
09/21 07:07:04 - mmengine - INFO - 
------------------------------------------------------------
System environment:
    sys.platform: linux
    Python: 3.10.13 | packaged by conda-forge | (main, Dec 23 2023, 15:36:39) [GCC 12.3.0]
    CUDA available: True
    MUSA available: False
    numpy_random_seed: 809257179
    GPU 0: Tesla V100-SXM2-32GB
    CUDA_HOME: /opt/bwhpc/common/devel/cuda/11.7
    NVCC: Cuda compilation tools, release 11.7, V11.7.99
    GCC: gcc (GCC) 8.5.0 20210514 (Red Hat 8.5.0-18)
    PyTorch: 1.13.1
    PyTorch compiling details: PyTorch built with:
  - GCC 9.3
  - C++ Version: 201402
  - Intel(R) oneAPI Math Kernel Library Version 2023.1-Product Build 20230303 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v2.6.0 (Git Hash 52b5f107dd9cf10910aaa19cb47f3abf9b349815)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - LAPACK is enabled (usually provided by MKL)
  - NNPACK is enabled
  - CPU capability usage: AVX2
  - CUDA Runtime 11.7
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_61,code=sm_61;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86;-gencode;arch=compute_37,code=compute_37
  - CuDNN 8.5
  - Magma 2.6.1
  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.7, CUDNN_VERSION=8.5.0, CXX_COMPILER=/opt/rh/devtoolset-9/root/usr/bin/c++, CXX_FLAGS= -fabi-version=11 -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -DEDGE_PROFILER_USE_KINETO -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Werror=non-virtual-dtor -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wunused-local-typedefs -Wno-unused-parameter -Wno-unused-function -Wno-unused-result -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Werror=cast-function-type -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.13.1, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, USE_ROCM=OFF, 

    TorchVision: 0.14.1
    OpenCV: 3.4.18
    MMEngine: 0.10.4

Runtime environment:
    cudnn_benchmark: True
    mp_cfg: {'mp_start_method': 'fork', 'opencv_num_threads': 0}
    dist_cfg: {'backend': 'nccl'}
    seed: 809257179
    Distributed launcher: none
    Distributed training: False
    GPU number: 1
------------------------------------------------------------

09/21 07:07:05 - mmengine - INFO - Config:
auto_scale_lr = dict(base_batch_size=16, enable=False)
backbone_embed_multi = dict(decay_mult=0.0, lr_mult=0.1)
backbone_norm_multi = dict(decay_mult=0.0, lr_mult=0.1)
crop_size = (
    512,
    512,
)
custom_imports = dict(allow_failed_imports=False, imports='mmdet.models')
custom_keys = dict({
    'absolute_pos_embed':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone':
    dict(decay_mult=1.0, lr_mult=0.1),
    'backbone.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.patch_embed.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.0.blocks.0.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.0.blocks.1.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.0.downsample.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.1.blocks.0.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.1.blocks.1.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.1.downsample.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.0.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.1.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.10.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.11.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.12.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.13.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.14.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.15.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.16.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.17.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.2.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.3.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.4.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.5.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.6.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.7.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.8.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.9.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.downsample.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.3.blocks.0.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.3.blocks.1.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'level_embed':
    dict(decay_mult=0.0, lr_mult=1.0),
    'query_embed':
    dict(decay_mult=0.0, lr_mult=1.0),
    'query_feat':
    dict(decay_mult=0.0, lr_mult=1.0),
    'relative_position_bias_table':
    dict(decay_mult=0.0, lr_mult=0.1)
})
data_root = 'data/ade/ADEChallengeData2016'
dataset_type = 'ADE20KDataset'
default_hooks = dict(
    checkpoint=dict(
        by_epoch=False, interval=5000, save_best='mIoU',
        type='CheckpointHook'),
    logger=dict(interval=50, log_metric_by_epoch=False, type='LoggerHook'),
    param_scheduler=dict(type='ParamSchedulerHook'),
    sampler_seed=dict(type='DistSamplerSeedHook'),
    timer=dict(type='IterTimerHook'),
    visualization=dict(type='SegVisualizationHook'))
default_scope = 'mmseg'
depths = [
    2,
    2,
    18,
    2,
]
embed_multi = dict(decay_mult=0.0, lr_mult=1.0)
env_cfg = dict(
    cudnn_benchmark=True,
    dist_cfg=dict(backend='nccl'),
    mp_cfg=dict(mp_start_method='fork', opencv_num_threads=0))
img_ratios = [
    0.5,
    0.75,
    1.0,
    1.25,
    1.5,
    1.75,
]
launcher = 'none'
load_from = '../checkpoint_files/ade20k/mask2former/mask2former_swin-s_8xb2-160k_ade20k-512x512_20221204_143905-e715144e.pth'
log_level = 'INFO'
log_processor = dict(by_epoch=False)
model = dict(
    backbone=dict(
        attn_drop_rate=0.0,
        depths=[
            2,
            2,
            18,
            2,
        ],
        drop_path_rate=0.3,
        drop_rate=0.0,
        embed_dims=96,
        frozen_stages=-1,
        init_cfg=dict(
            checkpoint=
            'https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/swin/swin_small_patch4_window7_224_20220317-7ba6d6dd.pth',
            type='Pretrained'),
        mlp_ratio=4,
        num_heads=[
            3,
            6,
            12,
            24,
        ],
        out_indices=(
            0,
            1,
            2,
            3,
        ),
        patch_norm=True,
        qk_scale=None,
        qkv_bias=True,
        type='SwinTransformer',
        window_size=7,
        with_cp=False),
    data_preprocessor=dict(
        bgr_to_rgb=True,
        corruption='elastic_transform',
        mean=[
            123.675,
            116.28,
            103.53,
        ],
        pad_val=0,
        seg_pad_val=255,
        size=(
            512,
            512,
        ),
        std=[
            58.395,
            57.12,
            57.375,
        ],
        test_cfg=dict(size_divisor=32),
        type='SegDataPreProcessor'),
    decode_head=dict(
        align_corners=False,
        enforce_decoder_input_project=False,
        feat_channels=256,
        in_channels=[
            96,
            192,
            384,
            768,
        ],
        loss_cls=dict(
            class_weight=[
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                0.1,
            ],
            loss_weight=2.0,
            reduction='mean',
            type='mmdet.CrossEntropyLoss',
            use_sigmoid=False),
        loss_dice=dict(
            activate=True,
            eps=1.0,
            loss_weight=5.0,
            naive_dice=True,
            reduction='mean',
            type='mmdet.DiceLoss',
            use_sigmoid=True),
        loss_mask=dict(
            loss_weight=5.0,
            reduction='mean',
            type='mmdet.CrossEntropyLoss',
            use_sigmoid=True),
        num_classes=150,
        num_queries=100,
        num_transformer_feat_level=3,
        out_channels=256,
        pixel_decoder=dict(
            act_cfg=dict(type='ReLU'),
            encoder=dict(
                init_cfg=None,
                layer_cfg=dict(
                    ffn_cfg=dict(
                        act_cfg=dict(inplace=True, type='ReLU'),
                        embed_dims=256,
                        feedforward_channels=1024,
                        ffn_drop=0.0,
                        num_fcs=2),
                    self_attn_cfg=dict(
                        batch_first=True,
                        dropout=0.0,
                        embed_dims=256,
                        im2col_step=64,
                        init_cfg=None,
                        norm_cfg=None,
                        num_heads=8,
                        num_levels=3,
                        num_points=4)),
                num_layers=6),
            init_cfg=None,
            norm_cfg=dict(num_groups=32, type='GN'),
            num_outs=3,
            positional_encoding=dict(normalize=True, num_feats=128),
            type='mmdet.MSDeformAttnPixelDecoder'),
        positional_encoding=dict(normalize=True, num_feats=128),
        strides=[
            4,
            8,
            16,
            32,
        ],
        train_cfg=dict(
            assigner=dict(
                match_costs=[
                    dict(type='mmdet.ClassificationCost', weight=2.0),
                    dict(
                        type='mmdet.CrossEntropyLossCost',
                        use_sigmoid=True,
                        weight=5.0),
                    dict(
                        eps=1.0,
                        pred_act=True,
                        type='mmdet.DiceCost',
                        weight=5.0),
                ],
                type='mmdet.HungarianAssigner'),
            importance_sample_ratio=0.75,
            num_points=12544,
            oversample_ratio=3.0,
            sampler=dict(type='mmdet.MaskPseudoSampler')),
        transformer_decoder=dict(
            init_cfg=None,
            layer_cfg=dict(
                cross_attn_cfg=dict(
                    attn_drop=0.0,
                    batch_first=True,
                    dropout_layer=None,
                    embed_dims=256,
                    num_heads=8,
                    proj_drop=0.0),
                ffn_cfg=dict(
                    act_cfg=dict(inplace=True, type='ReLU'),
                    add_identity=True,
                    dropout_layer=None,
                    embed_dims=256,
                    feedforward_channels=2048,
                    ffn_drop=0.0,
                    num_fcs=2),
                self_attn_cfg=dict(
                    attn_drop=0.0,
                    batch_first=True,
                    dropout_layer=None,
                    embed_dims=256,
                    num_heads=8,
                    proj_drop=0.0)),
            num_layers=9,
            return_intermediate=True),
        type='Mask2FormerHead'),
    test_cfg=dict(mode='whole'),
    train_cfg=dict(),
    type='EncoderDecoder')
num_classes = 150
optim_wrapper = dict(
    clip_grad=dict(max_norm=0.01, norm_type=2),
    optimizer=dict(
        betas=(
            0.9,
            0.999,
        ),
        eps=1e-08,
        lr=0.0001,
        type='AdamW',
        weight_decay=0.05),
    paramwise_cfg=dict(
        custom_keys=dict({
            'absolute_pos_embed':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone':
            dict(decay_mult=1.0, lr_mult=0.1),
            'backbone.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.patch_embed.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.0.blocks.0.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.0.blocks.1.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.0.downsample.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.1.blocks.0.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.1.blocks.1.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.1.downsample.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.0.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.1.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.10.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.11.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.12.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.13.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.14.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.15.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.16.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.17.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.2.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.3.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.4.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.5.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.6.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.7.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.8.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.9.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.downsample.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.3.blocks.0.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.3.blocks.1.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'level_embed':
            dict(decay_mult=0.0, lr_mult=1.0),
            'query_embed':
            dict(decay_mult=0.0, lr_mult=1.0),
            'query_feat':
            dict(decay_mult=0.0, lr_mult=1.0),
            'relative_position_bias_table':
            dict(decay_mult=0.0, lr_mult=0.1)
        }),
        norm_decay_mult=0.0),
    type='OptimWrapper')
optimizer = dict(
    betas=(
        0.9,
        0.999,
    ),
    eps=1e-08,
    lr=0.0001,
    type='AdamW',
    weight_decay=0.05)
param_scheduler = [
    dict(
        begin=0,
        by_epoch=False,
        end=160000,
        eta_min=0,
        power=0.9,
        type='PolyLR'),
]
pretrained = 'https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/swin/swin_small_patch4_window7_224_20220317-7ba6d6dd.pth'
resume = False
test_cfg = dict(type='TestLoop')
test_dataloader = dict(
    batch_size=1,
    dataset=dict(
        data_prefix=dict(
            img_path='images/validation',
            seg_map_path='annotations/validation'),
        data_root='data/ade/ADEChallengeData2016',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(keep_ratio=True, scale=(
                2048,
                512,
            ), type='Resize'),
            dict(reduce_zero_label=True, type='LoadAnnotations'),
            dict(type='PackSegInputs'),
        ],
        type='ADE20KDataset'),
    num_workers=4,
    persistent_workers=True,
    sampler=dict(shuffle=False, type='DefaultSampler'))
test_evaluator = dict(
    iou_metrics=[
        'mIoU',
    ], type='IoUMetric')
test_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(keep_ratio=True, scale=(
        2048,
        512,
    ), type='Resize'),
    dict(reduce_zero_label=True, type='LoadAnnotations'),
    dict(type='PackSegInputs'),
]
train_cfg = dict(
    max_iters=160000, type='IterBasedTrainLoop', val_interval=5000)
train_dataloader = dict(
    batch_size=2,
    dataset=dict(
        data_prefix=dict(
            img_path='images/training', seg_map_path='annotations/training'),
        data_root='data/ade/ADEChallengeData2016',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(reduce_zero_label=True, type='LoadAnnotations'),
            dict(
                max_size=2048,
                resize_type='ResizeShortestEdge',
                scales=[
                    256,
                    307,
                    358,
                    409,
                    460,
                    512,
                    563,
                    614,
                    665,
                    716,
                    768,
                    819,
                    870,
                    921,
                    972,
                    1024,
                ],
                type='RandomChoiceResize'),
            dict(
                cat_max_ratio=0.75, crop_size=(
                    512,
                    512,
                ), type='RandomCrop'),
            dict(prob=0.5, type='RandomFlip'),
            dict(type='PhotoMetricDistortion'),
            dict(type='PackSegInputs'),
        ],
        type='ADE20KDataset'),
    num_workers=4,
    persistent_workers=True,
    sampler=dict(shuffle=True, type='InfiniteSampler'))
train_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(reduce_zero_label=True, type='LoadAnnotations'),
    dict(
        max_size=2048,
        resize_type='ResizeShortestEdge',
        scales=[
            256,
            307,
            358,
            409,
            460,
            512,
            563,
            614,
            665,
            716,
            768,
            819,
            870,
            921,
            972,
            1024,
        ],
        type='RandomChoiceResize'),
    dict(cat_max_ratio=0.75, crop_size=(
        512,
        512,
    ), type='RandomCrop'),
    dict(prob=0.5, type='RandomFlip'),
    dict(type='PhotoMetricDistortion'),
    dict(type='PackSegInputs'),
]
tta_model = dict(type='SegTTAModel')
tta_pipeline = [
    dict(backend_args=None, type='LoadImageFromFile'),
    dict(
        transforms=[
            [
                dict(keep_ratio=True, scale_factor=0.5, type='Resize'),
                dict(keep_ratio=True, scale_factor=0.75, type='Resize'),
                dict(keep_ratio=True, scale_factor=1.0, type='Resize'),
                dict(keep_ratio=True, scale_factor=1.25, type='Resize'),
                dict(keep_ratio=True, scale_factor=1.5, type='Resize'),
                dict(keep_ratio=True, scale_factor=1.75, type='Resize'),
            ],
            [
                dict(direction='horizontal', prob=0.0, type='RandomFlip'),
                dict(direction='horizontal', prob=1.0, type='RandomFlip'),
            ],
            [
                dict(type='LoadAnnotations'),
            ],
            [
                dict(type='PackSegInputs'),
            ],
        ],
        type='TestTimeAug'),
]
val_cfg = dict(type='ValLoop')
val_dataloader = dict(
    batch_size=1,
    dataset=dict(
        data_prefix=dict(
            img_path='images/validation',
            seg_map_path='annotations/validation'),
        data_root='data/ade/ADEChallengeData2016',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(keep_ratio=True, scale=(
                2048,
                512,
            ), type='Resize'),
            dict(reduce_zero_label=True, type='LoadAnnotations'),
            dict(type='PackSegInputs'),
        ],
        type='ADE20KDataset'),
    num_workers=4,
    persistent_workers=True,
    sampler=dict(shuffle=False, type='DefaultSampler'))
val_evaluator = dict(
    iou_metrics=[
        'mIoU',
    ], type='IoUMetric')
vis_backends = [
    dict(type='LocalVisBackend'),
]
visualizer = dict(
    name='visualizer',
    type='SegLocalVisualizer',
    vis_backends=[
        dict(type='LocalVisBackend'),
    ])
work_dir = '../corruptions/work_dirs/ade20k/mask2former/mask2former_swin-s_8xb2-160k_ade20k-512x512/elastic_transform'

09/21 07:07:08 - mmengine - INFO - Distributed training is not used, all SyncBatchNorm (SyncBN) layers in the model will be automatically reverted to BatchNormXd layers if they are used.
09/21 07:07:08 - mmengine - INFO - Hooks will be executed in the following order:
before_run:
(VERY_HIGH   ) RuntimeInfoHook                    
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
before_train:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_train_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(NORMAL      ) DistSamplerSeedHook                
 -------------------- 
before_train_iter:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_train_iter:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(NORMAL      ) SegVisualizationHook               
(BELOW_NORMAL) LoggerHook                         
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
after_train_epoch:
(NORMAL      ) IterTimerHook                      
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_val:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
before_val_epoch:
(NORMAL      ) IterTimerHook                      
 -------------------- 
before_val_iter:
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_val_iter:
(NORMAL      ) IterTimerHook                      
(NORMAL      ) SegVisualizationHook               
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_val_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
after_val:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
after_train:
(VERY_HIGH   ) RuntimeInfoHook                    
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_test:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
before_test_epoch:
(NORMAL      ) IterTimerHook                      
 -------------------- 
before_test_iter:
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_test_iter:
(NORMAL      ) IterTimerHook                      
(NORMAL      ) SegVisualizationHook               
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_test_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_test:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
after_run:
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
09/21 07:07:08 - mmengine - WARNING - The prefix is not set in metric class IoUMetric.
Loads checkpoint by local backend from path: ../checkpoint_files/ade20k/mask2former/mask2former_swin-s_8xb2-160k_ade20k-512x512_20221204_143905-e715144e.pth
09/21 07:07:09 - mmengine - INFO - Load checkpoint from ../checkpoint_files/ade20k/mask2former/mask2former_swin-s_8xb2-160k_ade20k-512x512_20221204_143905-e715144e.pth
09/21 07:08:13 - mmengine - INFO - Iter(test) [  50/2000]    eta: 0:41:36  time: 1.2142  data_time: 0.0016  memory: 12814  
09/21 07:09:07 - mmengine - INFO - Iter(test) [ 100/2000]    eta: 0:37:11  time: 1.1304  data_time: 0.0016  memory: 12795  
09/21 07:09:58 - mmengine - INFO - Iter(test) [ 150/2000]    eta: 0:34:37  time: 1.0510  data_time: 0.0015  memory: 935  
09/21 07:10:51 - mmengine - INFO - Iter(test) [ 200/2000]    eta: 0:33:17  time: 0.9982  data_time: 0.0015  memory: 12835  
09/21 07:11:42 - mmengine - INFO - Iter(test) [ 250/2000]    eta: 0:31:51  time: 1.0141  data_time: 0.0015  memory: 12838  
09/21 07:12:32 - mmengine - INFO - Iter(test) [ 300/2000]    eta: 0:30:29  time: 1.0150  data_time: 0.0015  memory: 12803  
09/21 07:13:24 - mmengine - INFO - Iter(test) [ 350/2000]    eta: 0:29:26  time: 0.9734  data_time: 0.0015  memory: 12810  
09/21 07:14:15 - mmengine - INFO - Iter(test) [ 400/2000]    eta: 0:28:21  time: 1.0232  data_time: 0.0014  memory: 12775  
09/21 07:15:01 - mmengine - INFO - Iter(test) [ 450/2000]    eta: 0:27:03  time: 0.9448  data_time: 0.0014  memory: 975  
09/21 07:15:50 - mmengine - INFO - Iter(test) [ 500/2000]    eta: 0:26:03  time: 0.9582  data_time: 0.0014  memory: 935  
09/21 07:16:43 - mmengine - INFO - Iter(test) [ 550/2000]    eta: 0:25:13  time: 1.0656  data_time: 0.0016  memory: 1042  
09/21 07:17:33 - mmengine - INFO - Iter(test) [ 600/2000]    eta: 0:24:15  time: 1.0277  data_time: 0.0016  memory: 1040  
09/21 07:18:24 - mmengine - INFO - Iter(test) [ 650/2000]    eta: 0:23:20  time: 1.1131  data_time: 0.0014  memory: 12816  
09/21 07:19:17 - mmengine - INFO - Iter(test) [ 700/2000]    eta: 0:22:30  time: 1.0396  data_time: 0.0016  memory: 12806  
09/21 07:20:08 - mmengine - INFO - Iter(test) [ 750/2000]    eta: 0:21:37  time: 0.9793  data_time: 0.0015  memory: 1096  
09/21 07:20:55 - mmengine - INFO - Iter(test) [ 800/2000]    eta: 0:20:38  time: 1.0030  data_time: 0.0016  memory: 935  
09/21 07:21:46 - mmengine - INFO - Iter(test) [ 850/2000]    eta: 0:19:45  time: 1.0279  data_time: 0.0016  memory: 908  
09/21 07:22:32 - mmengine - INFO - Iter(test) [ 900/2000]    eta: 0:18:48  time: 0.8844  data_time: 0.0014  memory: 987  
09/21 07:23:24 - mmengine - INFO - Iter(test) [ 950/2000]    eta: 0:17:56  time: 1.0009  data_time: 0.0016  memory: 1015  
09/21 07:24:12 - mmengine - INFO - Iter(test) [1000/2000]    eta: 0:17:02  time: 0.9498  data_time: 0.0015  memory: 1015  
09/21 07:25:04 - mmengine - INFO - Iter(test) [1050/2000]    eta: 0:16:12  time: 1.0539  data_time: 0.0015  memory: 12819  
09/21 07:25:55 - mmengine - INFO - Iter(test) [1100/2000]    eta: 0:15:20  time: 0.9876  data_time: 0.0015  memory: 1012  
09/21 07:26:45 - mmengine - INFO - Iter(test) [1150/2000]    eta: 0:14:28  time: 1.0382  data_time: 0.0015  memory: 985  
09/21 07:27:37 - mmengine - INFO - Iter(test) [1200/2000]    eta: 0:13:38  time: 1.0064  data_time: 0.0015  memory: 1921  
09/21 07:28:27 - mmengine - INFO - Iter(test) [1250/2000]    eta: 0:12:46  time: 0.9888  data_time: 0.0015  memory: 12797  
09/21 07:29:15 - mmengine - INFO - Iter(test) [1300/2000]    eta: 0:11:53  time: 1.0434  data_time: 0.0015  memory: 935  
09/21 07:30:05 - mmengine - INFO - Iter(test) [1350/2000]    eta: 0:11:02  time: 0.9476  data_time: 0.0015  memory: 935  
09/21 07:30:56 - mmengine - INFO - Iter(test) [1400/2000]    eta: 0:10:11  time: 1.0474  data_time: 0.0014  memory: 1012  
09/21 07:31:44 - mmengine - INFO - Iter(test) [1450/2000]    eta: 0:09:19  time: 1.0677  data_time: 0.0014  memory: 1015  
09/21 07:32:33 - mmengine - INFO - Iter(test) [1500/2000]    eta: 0:08:27  time: 0.9284  data_time: 0.0014  memory: 933  
09/21 07:33:25 - mmengine - INFO - Iter(test) [1550/2000]    eta: 0:07:37  time: 1.0227  data_time: 0.0015  memory: 1015  
09/21 07:34:14 - mmengine - INFO - Iter(test) [1600/2000]    eta: 0:06:46  time: 0.9877  data_time: 0.0016  memory: 908  
09/21 07:35:04 - mmengine - INFO - Iter(test) [1650/2000]    eta: 0:05:55  time: 0.9370  data_time: 0.0014  memory: 12807  
09/21 07:35:55 - mmengine - INFO - Iter(test) [1700/2000]    eta: 0:05:04  time: 1.0044  data_time: 0.0017  memory: 1012  
09/21 07:36:46 - mmengine - INFO - Iter(test) [1750/2000]    eta: 0:04:13  time: 0.9993  data_time: 0.0014  memory: 1039  
09/21 07:37:35 - mmengine - INFO - Iter(test) [1800/2000]    eta: 0:03:22  time: 1.0262  data_time: 0.0016  memory: 935  
09/21 07:38:26 - mmengine - INFO - Iter(test) [1850/2000]    eta: 0:02:32  time: 1.0163  data_time: 0.0016  memory: 854  
09/21 07:39:14 - mmengine - INFO - Iter(test) [1900/2000]    eta: 0:01:41  time: 0.9776  data_time: 0.0014  memory: 1068  
09/21 07:40:05 - mmengine - INFO - Iter(test) [1950/2000]    eta: 0:00:50  time: 0.9929  data_time: 0.0014  memory: 1306  
09/21 07:40:52 - mmengine - INFO - Iter(test) [2000/2000]    eta: 0:00:00  time: 0.8905  data_time: 0.0013  memory: 1094  
09/21 07:40:52 - mmengine - INFO - per class results:
09/21 07:40:52 - mmengine - INFO - 
+---------------------+-------+-------+
|        Class        |  IoU  |  Acc  |
+---------------------+-------+-------+
|         wall        | 63.72 | 77.16 |
|       building      | 74.56 | 85.93 |
|         sky         | 84.45 | 91.37 |
|        floor        |  67.9 | 80.57 |
|         tree        | 63.89 | 79.29 |
|       ceiling       | 69.24 | 81.01 |
|         road        | 75.47 | 84.72 |
|         bed         | 77.25 | 88.67 |
|      windowpane     | 48.12 | 67.58 |
|        grass        | 64.36 | 76.03 |
|       cabinet       | 47.75 | 62.72 |
|       sidewalk      |  53.8 | 68.88 |
|        person       | 60.55 | 74.57 |
|        earth        | 34.54 | 53.96 |
|         door        | 36.94 |  51.7 |
|        table        | 42.74 | 59.63 |
|       mountain      | 51.49 | 73.15 |
|        plant        | 40.67 | 56.83 |
|       curtain       |  52.3 | 71.46 |
|        chair        | 39.91 | 56.64 |
|         car         |  61.5 | 76.24 |
|        water        | 59.26 | 78.22 |
|       painting      | 46.49 | 65.58 |
|         sofa        | 52.39 | 66.74 |
|        shelf        | 35.96 | 55.88 |
|        house        | 41.35 | 65.46 |
|         sea         | 63.45 | 81.16 |
|        mirror       | 54.68 |  71.4 |
|         rug         | 44.13 | 56.76 |
|        field        | 27.21 | 43.55 |
|       armchair      | 34.44 | 57.56 |
|         seat        | 54.07 | 77.72 |
|        fence        | 32.07 | 49.78 |
|         desk        | 36.55 | 58.97 |
|         rock        | 37.03 |  59.2 |
|       wardrobe      | 47.81 | 69.48 |
|         lamp        | 29.57 | 45.68 |
|       bathtub       | 63.61 | 77.14 |
|       railing       | 26.75 | 46.61 |
|       cushion       |  38.5 | 56.23 |
|         base        | 27.16 | 41.63 |
|         box         | 18.25 | 29.25 |
|        column       | 29.84 | 43.99 |
|      signboard      | 19.92 | 34.22 |
|   chest of drawers  | 24.88 |  47.5 |
|       counter       | 21.85 | 34.42 |
|         sand        | 36.35 | 50.05 |
|         sink        | 47.87 | 63.01 |
|      skyscraper     |  31.9 | 40.64 |
|      fireplace      | 57.95 | 79.86 |
|     refrigerator    |  59.0 | 72.83 |
|      grandstand     | 41.51 | 76.41 |
|         path        | 22.07 | 40.36 |
|        stairs       | 25.23 | 33.33 |
|        runway       | 55.42 | 65.51 |
|         case        | 44.85 | 55.78 |
|      pool table     | 77.69 | 86.36 |
|        pillow       | 41.58 |  56.0 |
|     screen door     | 51.42 |  64.8 |
|       stairway      | 26.28 | 37.39 |
|        river        | 15.27 |  19.2 |
|        bridge       | 46.74 | 68.71 |
|       bookcase      | 28.96 |  52.8 |
|        blind        | 35.14 | 43.64 |
|     coffee table    | 48.36 | 72.61 |
|        toilet       | 57.79 | 70.56 |
|        flower       | 24.56 | 38.82 |
|         book        | 32.86 | 50.73 |
|         hill        |  7.3  | 10.03 |
|        bench        | 38.87 | 57.49 |
|      countertop     | 39.48 | 61.25 |
|        stove        | 57.38 | 70.17 |
|         palm        | 37.31 | 56.51 |
|    kitchen island   | 29.77 | 61.84 |
|       computer      | 51.31 | 63.02 |
|     swivel chair    | 33.02 | 52.57 |
|         boat        | 52.35 |  77.5 |
|         bar         | 48.66 | 64.76 |
|    arcade machine   | 24.23 | 29.23 |
|        hovel        | 33.97 | 44.12 |
|         bus         | 71.54 | 89.81 |
|        towel        | 36.23 | 60.46 |
|        light        | 16.08 | 28.44 |
|        truck        |  25.6 | 44.37 |
|        tower        | 25.18 | 47.56 |
|      chandelier     | 44.89 | 61.08 |
|        awning       | 17.57 | 28.63 |
|     streetlight     | 10.33 | 17.87 |
|        booth        | 37.95 | 61.88 |
| television receiver | 39.92 | 61.68 |
|       airplane      | 34.51 | 49.62 |
|      dirt track     |  0.14 |  0.34 |
|       apparel       | 17.87 | 34.04 |
|         pole        |  8.85 | 16.79 |
|         land        |  6.61 |  8.39 |
|      bannister      | 20.29 | 29.23 |
|      escalator      | 19.56 | 20.45 |
|       ottoman       | 34.74 | 52.32 |
|        bottle       |  9.87 | 14.24 |
|        buffet       | 34.23 | 44.38 |
|        poster       |  23.0 | 38.84 |
|        stage        | 15.71 | 25.76 |
|         van         | 35.89 | 57.48 |
|         ship        |  0.15 |  0.15 |
|       fountain      | 40.86 | 43.64 |
|    conveyer belt    |  38.0 | 55.87 |
|        canopy       | 17.21 | 27.31 |
|        washer       | 62.16 |  71.6 |
|      plaything      |  9.92 |  25.0 |
|    swimming pool    |  36.5 | 58.06 |
|        stool        | 24.17 | 36.61 |
|        barrel       | 48.45 | 66.86 |
|        basket       | 23.84 | 32.07 |
|      waterfall      | 36.78 | 56.41 |
|         tent        | 79.92 | 87.47 |
|         bag         | 13.13 | 18.03 |
|       minibike      | 52.99 | 70.13 |
|        cradle       | 61.34 | 87.23 |
|         oven        | 46.54 | 56.78 |
|         ball        | 29.89 |  64.3 |
|         food        | 50.58 | 69.22 |
|         step        |  8.38 | 14.28 |
|         tank        | 42.21 | 46.04 |
|      trade name     | 17.61 | 22.71 |
|      microwave      | 69.63 | 81.15 |
|         pot         | 26.16 | 39.83 |
|        animal       | 55.59 | 65.82 |
|       bicycle       | 37.17 | 57.04 |
|         lake        | 54.68 | 62.72 |
|      dishwasher     | 42.41 |  62.0 |
|        screen       | 60.77 | 78.49 |
|       blanket       | 10.46 | 14.22 |
|      sculpture      | 23.49 |  45.8 |
|         hood        | 48.76 | 61.77 |
|        sconce       | 19.47 | 30.76 |
|         vase        | 16.89 | 33.84 |
|    traffic light    | 18.35 |  37.5 |
|         tray        |  6.37 | 11.94 |
|        ashcan       | 21.95 | 47.16 |
|         fan         | 25.81 | 42.27 |
|         pier        | 11.87 | 13.54 |
|      crt screen     |  1.85 |  4.93 |
|        plate        | 40.17 | 57.24 |
|       monitor       |  5.91 |  10.5 |
|    bulletin board   | 42.43 | 60.06 |
|        shower       |  3.73 | 14.89 |
|       radiator      | 41.98 | 55.56 |
|        glass        | 11.04 |  13.9 |
|        clock        | 14.35 | 23.01 |
|         flag        | 16.12 | 23.68 |
+---------------------+-------+-------+
09/21 07:40:52 - mmengine - INFO - Iter(test) [2000/2000]    aAcc: 74.3300  mIoU: 37.3000  mAcc: 51.8200  data_time: 0.0016  time: 1.0115
Finished processing corruption type: elastic_transform
Processing corruption type: pixelate
09/21 07:40:58 - mmengine - INFO - 
------------------------------------------------------------
System environment:
    sys.platform: linux
    Python: 3.10.13 | packaged by conda-forge | (main, Dec 23 2023, 15:36:39) [GCC 12.3.0]
    CUDA available: True
    MUSA available: False
    numpy_random_seed: 232603352
    GPU 0: Tesla V100-SXM2-32GB
    CUDA_HOME: /opt/bwhpc/common/devel/cuda/11.7
    NVCC: Cuda compilation tools, release 11.7, V11.7.99
    GCC: gcc (GCC) 8.5.0 20210514 (Red Hat 8.5.0-18)
    PyTorch: 1.13.1
    PyTorch compiling details: PyTorch built with:
  - GCC 9.3
  - C++ Version: 201402
  - Intel(R) oneAPI Math Kernel Library Version 2023.1-Product Build 20230303 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v2.6.0 (Git Hash 52b5f107dd9cf10910aaa19cb47f3abf9b349815)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - LAPACK is enabled (usually provided by MKL)
  - NNPACK is enabled
  - CPU capability usage: AVX2
  - CUDA Runtime 11.7
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_61,code=sm_61;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86;-gencode;arch=compute_37,code=compute_37
  - CuDNN 8.5
  - Magma 2.6.1
  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.7, CUDNN_VERSION=8.5.0, CXX_COMPILER=/opt/rh/devtoolset-9/root/usr/bin/c++, CXX_FLAGS= -fabi-version=11 -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -DEDGE_PROFILER_USE_KINETO -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Werror=non-virtual-dtor -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wunused-local-typedefs -Wno-unused-parameter -Wno-unused-function -Wno-unused-result -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Werror=cast-function-type -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.13.1, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, USE_ROCM=OFF, 

    TorchVision: 0.14.1
    OpenCV: 3.4.18
    MMEngine: 0.10.4

Runtime environment:
    cudnn_benchmark: True
    mp_cfg: {'mp_start_method': 'fork', 'opencv_num_threads': 0}
    dist_cfg: {'backend': 'nccl'}
    seed: 232603352
    Distributed launcher: none
    Distributed training: False
    GPU number: 1
------------------------------------------------------------

09/21 07:40:58 - mmengine - INFO - Config:
auto_scale_lr = dict(base_batch_size=16, enable=False)
backbone_embed_multi = dict(decay_mult=0.0, lr_mult=0.1)
backbone_norm_multi = dict(decay_mult=0.0, lr_mult=0.1)
crop_size = (
    512,
    512,
)
custom_imports = dict(allow_failed_imports=False, imports='mmdet.models')
custom_keys = dict({
    'absolute_pos_embed':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone':
    dict(decay_mult=1.0, lr_mult=0.1),
    'backbone.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.patch_embed.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.0.blocks.0.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.0.blocks.1.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.0.downsample.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.1.blocks.0.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.1.blocks.1.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.1.downsample.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.0.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.1.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.10.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.11.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.12.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.13.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.14.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.15.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.16.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.17.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.2.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.3.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.4.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.5.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.6.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.7.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.8.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.9.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.downsample.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.3.blocks.0.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.3.blocks.1.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'level_embed':
    dict(decay_mult=0.0, lr_mult=1.0),
    'query_embed':
    dict(decay_mult=0.0, lr_mult=1.0),
    'query_feat':
    dict(decay_mult=0.0, lr_mult=1.0),
    'relative_position_bias_table':
    dict(decay_mult=0.0, lr_mult=0.1)
})
data_root = 'data/ade/ADEChallengeData2016'
dataset_type = 'ADE20KDataset'
default_hooks = dict(
    checkpoint=dict(
        by_epoch=False, interval=5000, save_best='mIoU',
        type='CheckpointHook'),
    logger=dict(interval=50, log_metric_by_epoch=False, type='LoggerHook'),
    param_scheduler=dict(type='ParamSchedulerHook'),
    sampler_seed=dict(type='DistSamplerSeedHook'),
    timer=dict(type='IterTimerHook'),
    visualization=dict(type='SegVisualizationHook'))
default_scope = 'mmseg'
depths = [
    2,
    2,
    18,
    2,
]
embed_multi = dict(decay_mult=0.0, lr_mult=1.0)
env_cfg = dict(
    cudnn_benchmark=True,
    dist_cfg=dict(backend='nccl'),
    mp_cfg=dict(mp_start_method='fork', opencv_num_threads=0))
img_ratios = [
    0.5,
    0.75,
    1.0,
    1.25,
    1.5,
    1.75,
]
launcher = 'none'
load_from = '../checkpoint_files/ade20k/mask2former/mask2former_swin-s_8xb2-160k_ade20k-512x512_20221204_143905-e715144e.pth'
log_level = 'INFO'
log_processor = dict(by_epoch=False)
model = dict(
    backbone=dict(
        attn_drop_rate=0.0,
        depths=[
            2,
            2,
            18,
            2,
        ],
        drop_path_rate=0.3,
        drop_rate=0.0,
        embed_dims=96,
        frozen_stages=-1,
        init_cfg=dict(
            checkpoint=
            'https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/swin/swin_small_patch4_window7_224_20220317-7ba6d6dd.pth',
            type='Pretrained'),
        mlp_ratio=4,
        num_heads=[
            3,
            6,
            12,
            24,
        ],
        out_indices=(
            0,
            1,
            2,
            3,
        ),
        patch_norm=True,
        qk_scale=None,
        qkv_bias=True,
        type='SwinTransformer',
        window_size=7,
        with_cp=False),
    data_preprocessor=dict(
        bgr_to_rgb=True,
        corruption='pixelate',
        mean=[
            123.675,
            116.28,
            103.53,
        ],
        pad_val=0,
        seg_pad_val=255,
        size=(
            512,
            512,
        ),
        std=[
            58.395,
            57.12,
            57.375,
        ],
        test_cfg=dict(size_divisor=32),
        type='SegDataPreProcessor'),
    decode_head=dict(
        align_corners=False,
        enforce_decoder_input_project=False,
        feat_channels=256,
        in_channels=[
            96,
            192,
            384,
            768,
        ],
        loss_cls=dict(
            class_weight=[
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                0.1,
            ],
            loss_weight=2.0,
            reduction='mean',
            type='mmdet.CrossEntropyLoss',
            use_sigmoid=False),
        loss_dice=dict(
            activate=True,
            eps=1.0,
            loss_weight=5.0,
            naive_dice=True,
            reduction='mean',
            type='mmdet.DiceLoss',
            use_sigmoid=True),
        loss_mask=dict(
            loss_weight=5.0,
            reduction='mean',
            type='mmdet.CrossEntropyLoss',
            use_sigmoid=True),
        num_classes=150,
        num_queries=100,
        num_transformer_feat_level=3,
        out_channels=256,
        pixel_decoder=dict(
            act_cfg=dict(type='ReLU'),
            encoder=dict(
                init_cfg=None,
                layer_cfg=dict(
                    ffn_cfg=dict(
                        act_cfg=dict(inplace=True, type='ReLU'),
                        embed_dims=256,
                        feedforward_channels=1024,
                        ffn_drop=0.0,
                        num_fcs=2),
                    self_attn_cfg=dict(
                        batch_first=True,
                        dropout=0.0,
                        embed_dims=256,
                        im2col_step=64,
                        init_cfg=None,
                        norm_cfg=None,
                        num_heads=8,
                        num_levels=3,
                        num_points=4)),
                num_layers=6),
            init_cfg=None,
            norm_cfg=dict(num_groups=32, type='GN'),
            num_outs=3,
            positional_encoding=dict(normalize=True, num_feats=128),
            type='mmdet.MSDeformAttnPixelDecoder'),
        positional_encoding=dict(normalize=True, num_feats=128),
        strides=[
            4,
            8,
            16,
            32,
        ],
        train_cfg=dict(
            assigner=dict(
                match_costs=[
                    dict(type='mmdet.ClassificationCost', weight=2.0),
                    dict(
                        type='mmdet.CrossEntropyLossCost',
                        use_sigmoid=True,
                        weight=5.0),
                    dict(
                        eps=1.0,
                        pred_act=True,
                        type='mmdet.DiceCost',
                        weight=5.0),
                ],
                type='mmdet.HungarianAssigner'),
            importance_sample_ratio=0.75,
            num_points=12544,
            oversample_ratio=3.0,
            sampler=dict(type='mmdet.MaskPseudoSampler')),
        transformer_decoder=dict(
            init_cfg=None,
            layer_cfg=dict(
                cross_attn_cfg=dict(
                    attn_drop=0.0,
                    batch_first=True,
                    dropout_layer=None,
                    embed_dims=256,
                    num_heads=8,
                    proj_drop=0.0),
                ffn_cfg=dict(
                    act_cfg=dict(inplace=True, type='ReLU'),
                    add_identity=True,
                    dropout_layer=None,
                    embed_dims=256,
                    feedforward_channels=2048,
                    ffn_drop=0.0,
                    num_fcs=2),
                self_attn_cfg=dict(
                    attn_drop=0.0,
                    batch_first=True,
                    dropout_layer=None,
                    embed_dims=256,
                    num_heads=8,
                    proj_drop=0.0)),
            num_layers=9,
            return_intermediate=True),
        type='Mask2FormerHead'),
    test_cfg=dict(mode='whole'),
    train_cfg=dict(),
    type='EncoderDecoder')
num_classes = 150
optim_wrapper = dict(
    clip_grad=dict(max_norm=0.01, norm_type=2),
    optimizer=dict(
        betas=(
            0.9,
            0.999,
        ),
        eps=1e-08,
        lr=0.0001,
        type='AdamW',
        weight_decay=0.05),
    paramwise_cfg=dict(
        custom_keys=dict({
            'absolute_pos_embed':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone':
            dict(decay_mult=1.0, lr_mult=0.1),
            'backbone.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.patch_embed.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.0.blocks.0.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.0.blocks.1.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.0.downsample.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.1.blocks.0.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.1.blocks.1.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.1.downsample.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.0.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.1.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.10.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.11.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.12.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.13.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.14.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.15.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.16.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.17.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.2.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.3.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.4.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.5.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.6.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.7.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.8.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.9.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.downsample.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.3.blocks.0.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.3.blocks.1.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'level_embed':
            dict(decay_mult=0.0, lr_mult=1.0),
            'query_embed':
            dict(decay_mult=0.0, lr_mult=1.0),
            'query_feat':
            dict(decay_mult=0.0, lr_mult=1.0),
            'relative_position_bias_table':
            dict(decay_mult=0.0, lr_mult=0.1)
        }),
        norm_decay_mult=0.0),
    type='OptimWrapper')
optimizer = dict(
    betas=(
        0.9,
        0.999,
    ),
    eps=1e-08,
    lr=0.0001,
    type='AdamW',
    weight_decay=0.05)
param_scheduler = [
    dict(
        begin=0,
        by_epoch=False,
        end=160000,
        eta_min=0,
        power=0.9,
        type='PolyLR'),
]
pretrained = 'https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/swin/swin_small_patch4_window7_224_20220317-7ba6d6dd.pth'
resume = False
test_cfg = dict(type='TestLoop')
test_dataloader = dict(
    batch_size=1,
    dataset=dict(
        data_prefix=dict(
            img_path='images/validation',
            seg_map_path='annotations/validation'),
        data_root='data/ade/ADEChallengeData2016',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(keep_ratio=True, scale=(
                2048,
                512,
            ), type='Resize'),
            dict(reduce_zero_label=True, type='LoadAnnotations'),
            dict(type='PackSegInputs'),
        ],
        type='ADE20KDataset'),
    num_workers=4,
    persistent_workers=True,
    sampler=dict(shuffle=False, type='DefaultSampler'))
test_evaluator = dict(
    iou_metrics=[
        'mIoU',
    ], type='IoUMetric')
test_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(keep_ratio=True, scale=(
        2048,
        512,
    ), type='Resize'),
    dict(reduce_zero_label=True, type='LoadAnnotations'),
    dict(type='PackSegInputs'),
]
train_cfg = dict(
    max_iters=160000, type='IterBasedTrainLoop', val_interval=5000)
train_dataloader = dict(
    batch_size=2,
    dataset=dict(
        data_prefix=dict(
            img_path='images/training', seg_map_path='annotations/training'),
        data_root='data/ade/ADEChallengeData2016',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(reduce_zero_label=True, type='LoadAnnotations'),
            dict(
                max_size=2048,
                resize_type='ResizeShortestEdge',
                scales=[
                    256,
                    307,
                    358,
                    409,
                    460,
                    512,
                    563,
                    614,
                    665,
                    716,
                    768,
                    819,
                    870,
                    921,
                    972,
                    1024,
                ],
                type='RandomChoiceResize'),
            dict(
                cat_max_ratio=0.75, crop_size=(
                    512,
                    512,
                ), type='RandomCrop'),
            dict(prob=0.5, type='RandomFlip'),
            dict(type='PhotoMetricDistortion'),
            dict(type='PackSegInputs'),
        ],
        type='ADE20KDataset'),
    num_workers=4,
    persistent_workers=True,
    sampler=dict(shuffle=True, type='InfiniteSampler'))
train_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(reduce_zero_label=True, type='LoadAnnotations'),
    dict(
        max_size=2048,
        resize_type='ResizeShortestEdge',
        scales=[
            256,
            307,
            358,
            409,
            460,
            512,
            563,
            614,
            665,
            716,
            768,
            819,
            870,
            921,
            972,
            1024,
        ],
        type='RandomChoiceResize'),
    dict(cat_max_ratio=0.75, crop_size=(
        512,
        512,
    ), type='RandomCrop'),
    dict(prob=0.5, type='RandomFlip'),
    dict(type='PhotoMetricDistortion'),
    dict(type='PackSegInputs'),
]
tta_model = dict(type='SegTTAModel')
tta_pipeline = [
    dict(backend_args=None, type='LoadImageFromFile'),
    dict(
        transforms=[
            [
                dict(keep_ratio=True, scale_factor=0.5, type='Resize'),
                dict(keep_ratio=True, scale_factor=0.75, type='Resize'),
                dict(keep_ratio=True, scale_factor=1.0, type='Resize'),
                dict(keep_ratio=True, scale_factor=1.25, type='Resize'),
                dict(keep_ratio=True, scale_factor=1.5, type='Resize'),
                dict(keep_ratio=True, scale_factor=1.75, type='Resize'),
            ],
            [
                dict(direction='horizontal', prob=0.0, type='RandomFlip'),
                dict(direction='horizontal', prob=1.0, type='RandomFlip'),
            ],
            [
                dict(type='LoadAnnotations'),
            ],
            [
                dict(type='PackSegInputs'),
            ],
        ],
        type='TestTimeAug'),
]
val_cfg = dict(type='ValLoop')
val_dataloader = dict(
    batch_size=1,
    dataset=dict(
        data_prefix=dict(
            img_path='images/validation',
            seg_map_path='annotations/validation'),
        data_root='data/ade/ADEChallengeData2016',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(keep_ratio=True, scale=(
                2048,
                512,
            ), type='Resize'),
            dict(reduce_zero_label=True, type='LoadAnnotations'),
            dict(type='PackSegInputs'),
        ],
        type='ADE20KDataset'),
    num_workers=4,
    persistent_workers=True,
    sampler=dict(shuffle=False, type='DefaultSampler'))
val_evaluator = dict(
    iou_metrics=[
        'mIoU',
    ], type='IoUMetric')
vis_backends = [
    dict(type='LocalVisBackend'),
]
visualizer = dict(
    name='visualizer',
    type='SegLocalVisualizer',
    vis_backends=[
        dict(type='LocalVisBackend'),
    ])
work_dir = '../corruptions/work_dirs/ade20k/mask2former/mask2former_swin-s_8xb2-160k_ade20k-512x512/pixelate'

09/21 07:41:01 - mmengine - INFO - Distributed training is not used, all SyncBatchNorm (SyncBN) layers in the model will be automatically reverted to BatchNormXd layers if they are used.
09/21 07:41:01 - mmengine - INFO - Hooks will be executed in the following order:
before_run:
(VERY_HIGH   ) RuntimeInfoHook                    
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
before_train:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_train_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(NORMAL      ) DistSamplerSeedHook                
 -------------------- 
before_train_iter:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_train_iter:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(NORMAL      ) SegVisualizationHook               
(BELOW_NORMAL) LoggerHook                         
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
after_train_epoch:
(NORMAL      ) IterTimerHook                      
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_val:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
before_val_epoch:
(NORMAL      ) IterTimerHook                      
 -------------------- 
before_val_iter:
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_val_iter:
(NORMAL      ) IterTimerHook                      
(NORMAL      ) SegVisualizationHook               
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_val_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
after_val:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
after_train:
(VERY_HIGH   ) RuntimeInfoHook                    
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_test:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
before_test_epoch:
(NORMAL      ) IterTimerHook                      
 -------------------- 
before_test_iter:
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_test_iter:
(NORMAL      ) IterTimerHook                      
(NORMAL      ) SegVisualizationHook               
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_test_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_test:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
after_run:
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
09/21 07:41:02 - mmengine - WARNING - The prefix is not set in metric class IoUMetric.
Loads checkpoint by local backend from path: ../checkpoint_files/ade20k/mask2former/mask2former_swin-s_8xb2-160k_ade20k-512x512_20221204_143905-e715144e.pth
09/21 07:41:04 - mmengine - INFO - Load checkpoint from ../checkpoint_files/ade20k/mask2former/mask2former_swin-s_8xb2-160k_ade20k-512x512_20221204_143905-e715144e.pth
09/21 07:41:22 - mmengine - INFO - Iter(test) [  50/2000]    eta: 0:11:39  time: 0.2567  data_time: 0.0015  memory: 12814  
09/21 07:41:29 - mmengine - INFO - Iter(test) [ 100/2000]    eta: 0:07:37  time: 0.1512  data_time: 0.0015  memory: 12795  
09/21 07:41:32 - mmengine - INFO - Iter(test) [ 150/2000]    eta: 0:05:44  time: 0.0857  data_time: 0.0015  memory: 935  
09/21 07:41:39 - mmengine - INFO - Iter(test) [ 200/2000]    eta: 0:05:07  time: 0.0849  data_time: 0.0014  memory: 12835  
09/21 07:41:44 - mmengine - INFO - Iter(test) [ 250/2000]    eta: 0:04:38  time: 0.0747  data_time: 0.0014  memory: 12838  
09/21 07:41:49 - mmengine - INFO - Iter(test) [ 300/2000]    eta: 0:04:10  time: 0.0743  data_time: 0.0015  memory: 12803  
09/21 07:41:54 - mmengine - INFO - Iter(test) [ 350/2000]    eta: 0:03:54  time: 0.0861  data_time: 0.0015  memory: 12810  
09/21 07:41:59 - mmengine - INFO - Iter(test) [ 400/2000]    eta: 0:03:39  time: 0.0866  data_time: 0.0014  memory: 12775  
09/21 07:42:03 - mmengine - INFO - Iter(test) [ 450/2000]    eta: 0:03:22  time: 0.0711  data_time: 0.0014  memory: 975  
09/21 07:42:07 - mmengine - INFO - Iter(test) [ 500/2000]    eta: 0:03:07  time: 0.0722  data_time: 0.0014  memory: 935  
09/21 07:42:11 - mmengine - INFO - Iter(test) [ 550/2000]    eta: 0:02:54  time: 0.0741  data_time: 0.0014  memory: 1042  
09/21 07:42:15 - mmengine - INFO - Iter(test) [ 600/2000]    eta: 0:02:44  time: 0.0873  data_time: 0.0016  memory: 1040  
09/21 07:42:20 - mmengine - INFO - Iter(test) [ 650/2000]    eta: 0:02:36  time: 0.1709  data_time: 0.0013  memory: 12816  
09/21 07:42:25 - mmengine - INFO - Iter(test) [ 700/2000]    eta: 0:02:29  time: 0.0740  data_time: 0.0015  memory: 12806  
09/21 07:42:28 - mmengine - INFO - Iter(test) [ 750/2000]    eta: 0:02:19  time: 0.0726  data_time: 0.0014  memory: 1096  
09/21 07:42:32 - mmengine - INFO - Iter(test) [ 800/2000]    eta: 0:02:11  time: 0.0877  data_time: 0.0016  memory: 935  
09/21 07:42:37 - mmengine - INFO - Iter(test) [ 850/2000]    eta: 0:02:04  time: 0.0864  data_time: 0.0016  memory: 908  
09/21 07:42:41 - mmengine - INFO - Iter(test) [ 900/2000]    eta: 0:01:57  time: 0.0837  data_time: 0.0014  memory: 987  
09/21 07:42:45 - mmengine - INFO - Iter(test) [ 950/2000]    eta: 0:01:50  time: 0.0723  data_time: 0.0014  memory: 1015  
09/21 07:42:48 - mmengine - INFO - Iter(test) [1000/2000]    eta: 0:01:43  time: 0.0750  data_time: 0.0038  memory: 1015  
09/21 07:42:53 - mmengine - INFO - Iter(test) [1050/2000]    eta: 0:01:38  time: 0.0861  data_time: 0.0014  memory: 12819  
09/21 07:42:58 - mmengine - INFO - Iter(test) [1100/2000]    eta: 0:01:32  time: 0.0865  data_time: 0.0015  memory: 1012  
09/21 07:43:02 - mmengine - INFO - Iter(test) [1150/2000]    eta: 0:01:26  time: 0.0849  data_time: 0.0014  memory: 985  
09/21 07:43:06 - mmengine - INFO - Iter(test) [1200/2000]    eta: 0:01:20  time: 0.0717  data_time: 0.0014  memory: 1921  
09/21 07:43:10 - mmengine - INFO - Iter(test) [1250/2000]    eta: 0:01:15  time: 0.0718  data_time: 0.0014  memory: 12797  
09/21 07:43:14 - mmengine - INFO - Iter(test) [1300/2000]    eta: 0:01:09  time: 0.0853  data_time: 0.0014  memory: 935  
09/21 07:43:18 - mmengine - INFO - Iter(test) [1350/2000]    eta: 0:01:04  time: 0.0830  data_time: 0.0014  memory: 935  
09/21 07:43:23 - mmengine - INFO - Iter(test) [1400/2000]    eta: 0:00:59  time: 0.0824  data_time: 0.0014  memory: 1012  
09/21 07:43:26 - mmengine - INFO - Iter(test) [1450/2000]    eta: 0:00:53  time: 0.0733  data_time: 0.0014  memory: 1015  
09/21 07:43:30 - mmengine - INFO - Iter(test) [1500/2000]    eta: 0:00:48  time: 0.0709  data_time: 0.0013  memory: 933  
09/21 07:43:34 - mmengine - INFO - Iter(test) [1550/2000]    eta: 0:00:43  time: 0.0855  data_time: 0.0014  memory: 1015  
09/21 07:43:38 - mmengine - INFO - Iter(test) [1600/2000]    eta: 0:00:38  time: 0.0859  data_time: 0.0015  memory: 908  
09/21 07:43:43 - mmengine - INFO - Iter(test) [1650/2000]    eta: 0:00:33  time: 0.0712  data_time: 0.0013  memory: 12807  
09/21 07:43:47 - mmengine - INFO - Iter(test) [1700/2000]    eta: 0:00:28  time: 0.0742  data_time: 0.0015  memory: 1012  
09/21 07:43:50 - mmengine - INFO - Iter(test) [1750/2000]    eta: 0:00:23  time: 0.0726  data_time: 0.0014  memory: 1039  
09/21 07:43:55 - mmengine - INFO - Iter(test) [1800/2000]    eta: 0:00:18  time: 0.0865  data_time: 0.0016  memory: 935  
09/21 07:43:59 - mmengine - INFO - Iter(test) [1850/2000]    eta: 0:00:14  time: 0.0868  data_time: 0.0016  memory: 854  
09/21 07:44:03 - mmengine - INFO - Iter(test) [1900/2000]    eta: 0:00:09  time: 0.0720  data_time: 0.0014  memory: 1068  
09/21 07:44:07 - mmengine - INFO - Iter(test) [1950/2000]    eta: 0:00:04  time: 0.0723  data_time: 0.0014  memory: 1306  
09/21 07:44:10 - mmengine - INFO - Iter(test) [2000/2000]    eta: 0:00:00  time: 0.0694  data_time: 0.0013  memory: 1094  
09/21 07:44:11 - mmengine - INFO - per class results:
09/21 07:44:11 - mmengine - INFO - 
+---------------------+-------+-------+
|        Class        |  IoU  |  Acc  |
+---------------------+-------+-------+
|         wall        |  76.4 | 87.47 |
|       building      | 81.13 | 94.28 |
|         sky         | 94.03 | 96.62 |
|        floor        | 80.89 | 89.73 |
|         tree        |  73.4 | 86.56 |
|       ceiling       | 82.93 |  89.0 |
|         road        | 83.31 | 89.79 |
|         bed         | 88.12 | 95.37 |
|      windowpane     | 58.64 | 77.02 |
|        grass        | 70.52 | 84.65 |
|       cabinet       | 57.04 | 71.99 |
|       sidewalk      | 65.78 |  80.0 |
|        person       | 80.92 | 87.93 |
|        earth        | 33.67 | 49.17 |
|         door        | 41.43 | 55.94 |
|        table        | 62.56 | 78.12 |
|       mountain      | 49.35 | 64.85 |
|        plant        | 48.64 | 62.47 |
|       curtain       | 72.72 | 85.08 |
|        chair        | 55.63 | 68.18 |
|         car         | 81.56 | 89.16 |
|        water        | 57.69 | 81.63 |
|       painting      | 72.54 | 85.44 |
|         sofa        | 60.88 | 70.57 |
|        shelf        | 44.05 | 63.83 |
|        house        | 46.77 | 54.36 |
|         sea         | 62.51 | 74.21 |
|        mirror       | 62.25 | 73.93 |
|         rug         |  57.2 |  69.7 |
|        field        | 30.85 |  45.2 |
|       armchair      | 40.76 | 63.24 |
|         seat        | 53.66 | 77.62 |
|        fence        | 45.66 | 62.46 |
|         desk        | 52.01 | 72.24 |
|         rock        | 34.59 | 60.55 |
|       wardrobe      | 49.11 | 72.93 |
|         lamp        | 64.45 | 76.31 |
|       bathtub       | 78.38 | 91.68 |
|       railing       | 34.15 | 47.75 |
|       cushion       | 55.15 | 69.18 |
|         base        |  27.2 | 34.18 |
|         box         | 23.94 | 39.42 |
|        column       | 44.12 | 58.58 |
|      signboard      | 36.13 | 49.93 |
|   chest of drawers  |  38.3 |  56.5 |
|       counter       | 33.72 | 41.02 |
|         sand        | 34.47 | 50.71 |
|         sink        |  71.9 | 80.05 |
|      skyscraper     | 31.15 | 32.65 |
|      fireplace      | 58.71 | 73.55 |
|     refrigerator    | 58.17 | 78.12 |
|      grandstand     | 34.85 | 69.83 |
|         path        | 20.67 | 31.26 |
|        stairs       | 27.69 | 36.83 |
|        runway       | 74.19 | 96.34 |
|         case        |  58.8 | 68.29 |
|      pool table     | 93.66 | 96.26 |
|        pillow       | 55.89 | 63.93 |
|     screen door     |  61.0 | 76.99 |
|       stairway      | 37.34 | 51.19 |
|        river        | 12.31 | 13.88 |
|        bridge       | 68.82 | 79.26 |
|       bookcase      | 33.83 | 56.93 |
|        blind        |  37.1 | 43.81 |
|     coffee table    | 64.01 | 80.75 |
|        toilet       | 88.06 | 90.21 |
|        flower       | 36.15 |  50.7 |
|         book        |  47.9 |  70.1 |
|         hill        |  6.53 | 10.18 |
|        bench        | 43.03 | 58.06 |
|      countertop     | 54.71 | 69.58 |
|        stove        | 74.37 | 80.09 |
|         palm        | 49.14 | 63.08 |
|    kitchen island   | 46.24 | 78.05 |
|       computer      | 59.98 | 67.39 |
|     swivel chair    |  43.5 | 57.31 |
|         boat        | 43.08 | 45.96 |
|         bar         | 58.75 | 73.87 |
|    arcade machine   | 18.77 | 20.47 |
|        hovel        |  40.0 | 47.63 |
|         bus         | 86.42 | 95.83 |
|        towel        | 68.17 | 73.63 |
|        light        | 60.14 | 73.91 |
|        truck        | 29.46 | 51.35 |
|        tower        | 27.36 | 38.11 |
|      chandelier     | 65.34 |  73.3 |
|        awning       | 34.86 |  42.4 |
|     streetlight     | 32.17 | 41.23 |
|        booth        | 41.75 | 47.49 |
| television receiver | 58.15 | 81.23 |
|       airplane      | 51.72 | 59.74 |
|      dirt track     |  1.07 |  1.36 |
|       apparel       | 28.72 | 41.58 |
|         pole        | 34.67 | 57.01 |
|         land        |  7.92 | 11.29 |
|      bannister      |  7.98 | 11.07 |
|      escalator      | 19.05 | 20.59 |
|       ottoman       | 48.76 | 61.96 |
|        bottle       |  19.7 | 25.33 |
|        buffet       | 40.27 |  45.8 |
|        poster       | 34.66 | 45.37 |
|        stage        |  7.1  | 16.56 |
|         van         | 47.27 | 80.11 |
|         ship        |  4.98 |  7.23 |
|       fountain      |  39.8 | 43.39 |
|    conveyer belt    | 51.07 | 67.99 |
|        canopy       | 18.98 | 20.46 |
|        washer       | 63.91 | 64.14 |
|      plaything      | 17.32 | 23.01 |
|    swimming pool    | 70.39 | 72.48 |
|        stool        | 39.38 | 54.37 |
|        barrel       | 56.04 | 73.92 |
|        basket       | 28.34 | 32.31 |
|      waterfall      |  50.3 | 57.99 |
|         tent        | 94.61 | 98.26 |
|         bag         | 12.74 | 14.91 |
|       minibike      |  53.8 |  59.3 |
|        cradle       |  80.8 | 97.01 |
|         oven        | 55.28 |  66.9 |
|         ball        | 38.66 | 61.45 |
|         food        | 56.85 | 67.92 |
|         step        | 11.75 | 16.04 |
|         tank        | 24.28 | 28.69 |
|      trade name     | 28.83 | 34.34 |
|      microwave      |  39.4 | 43.98 |
|         pot         | 51.39 | 64.08 |
|        animal       | 60.02 | 61.55 |
|       bicycle       | 52.64 | 67.14 |
|         lake        | 65.55 | 72.87 |
|      dishwasher     | 66.65 |  74.1 |
|        screen       | 64.34 | 90.89 |
|       blanket       | 15.42 |  19.9 |
|      sculpture      | 45.56 | 62.05 |
|         hood        | 60.05 | 63.64 |
|        sconce       | 45.95 |  54.7 |
|         vase        | 39.16 | 54.87 |
|    traffic light    | 34.76 | 56.94 |
|         tray        | 15.47 | 23.55 |
|        ashcan       | 37.86 | 59.53 |
|         fan         | 61.53 | 76.29 |
|         pier        |  33.9 | 40.02 |
|      crt screen     |  3.08 | 12.67 |
|        plate        | 52.36 | 71.56 |
|       monitor       |  5.01 |  6.94 |
|    bulletin board   | 39.46 | 56.38 |
|        shower       |  4.36 | 18.33 |
|       radiator      | 61.52 | 75.47 |
|        glass        | 16.79 | 18.59 |
|        clock        | 33.89 | 41.25 |
|         flag        | 33.36 |  38.3 |
+---------------------+-------+-------+
09/21 07:44:11 - mmengine - INFO - Iter(test) [2000/2000]    aAcc: 82.0800  mIoU: 47.2000  mAcc: 58.8200  data_time: 0.0016  time: 0.0929
Finished processing corruption type: pixelate
Processing corruption type: jpeg_compression
09/21 07:44:15 - mmengine - INFO - 
------------------------------------------------------------
System environment:
    sys.platform: linux
    Python: 3.10.13 | packaged by conda-forge | (main, Dec 23 2023, 15:36:39) [GCC 12.3.0]
    CUDA available: True
    MUSA available: False
    numpy_random_seed: 1482538171
    GPU 0: Tesla V100-SXM2-32GB
    CUDA_HOME: /opt/bwhpc/common/devel/cuda/11.7
    NVCC: Cuda compilation tools, release 11.7, V11.7.99
    GCC: gcc (GCC) 8.5.0 20210514 (Red Hat 8.5.0-18)
    PyTorch: 1.13.1
    PyTorch compiling details: PyTorch built with:
  - GCC 9.3
  - C++ Version: 201402
  - Intel(R) oneAPI Math Kernel Library Version 2023.1-Product Build 20230303 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v2.6.0 (Git Hash 52b5f107dd9cf10910aaa19cb47f3abf9b349815)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - LAPACK is enabled (usually provided by MKL)
  - NNPACK is enabled
  - CPU capability usage: AVX2
  - CUDA Runtime 11.7
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_61,code=sm_61;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86;-gencode;arch=compute_37,code=compute_37
  - CuDNN 8.5
  - Magma 2.6.1
  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.7, CUDNN_VERSION=8.5.0, CXX_COMPILER=/opt/rh/devtoolset-9/root/usr/bin/c++, CXX_FLAGS= -fabi-version=11 -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -DEDGE_PROFILER_USE_KINETO -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Werror=non-virtual-dtor -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wunused-local-typedefs -Wno-unused-parameter -Wno-unused-function -Wno-unused-result -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Werror=cast-function-type -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.13.1, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, USE_ROCM=OFF, 

    TorchVision: 0.14.1
    OpenCV: 3.4.18
    MMEngine: 0.10.4

Runtime environment:
    cudnn_benchmark: True
    mp_cfg: {'mp_start_method': 'fork', 'opencv_num_threads': 0}
    dist_cfg: {'backend': 'nccl'}
    seed: 1482538171
    Distributed launcher: none
    Distributed training: False
    GPU number: 1
------------------------------------------------------------

09/21 07:44:16 - mmengine - INFO - Config:
auto_scale_lr = dict(base_batch_size=16, enable=False)
backbone_embed_multi = dict(decay_mult=0.0, lr_mult=0.1)
backbone_norm_multi = dict(decay_mult=0.0, lr_mult=0.1)
crop_size = (
    512,
    512,
)
custom_imports = dict(allow_failed_imports=False, imports='mmdet.models')
custom_keys = dict({
    'absolute_pos_embed':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone':
    dict(decay_mult=1.0, lr_mult=0.1),
    'backbone.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.patch_embed.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.0.blocks.0.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.0.blocks.1.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.0.downsample.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.1.blocks.0.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.1.blocks.1.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.1.downsample.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.0.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.1.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.10.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.11.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.12.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.13.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.14.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.15.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.16.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.17.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.2.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.3.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.4.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.5.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.6.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.7.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.8.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.9.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.downsample.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.3.blocks.0.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.3.blocks.1.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'level_embed':
    dict(decay_mult=0.0, lr_mult=1.0),
    'query_embed':
    dict(decay_mult=0.0, lr_mult=1.0),
    'query_feat':
    dict(decay_mult=0.0, lr_mult=1.0),
    'relative_position_bias_table':
    dict(decay_mult=0.0, lr_mult=0.1)
})
data_root = 'data/ade/ADEChallengeData2016'
dataset_type = 'ADE20KDataset'
default_hooks = dict(
    checkpoint=dict(
        by_epoch=False, interval=5000, save_best='mIoU',
        type='CheckpointHook'),
    logger=dict(interval=50, log_metric_by_epoch=False, type='LoggerHook'),
    param_scheduler=dict(type='ParamSchedulerHook'),
    sampler_seed=dict(type='DistSamplerSeedHook'),
    timer=dict(type='IterTimerHook'),
    visualization=dict(type='SegVisualizationHook'))
default_scope = 'mmseg'
depths = [
    2,
    2,
    18,
    2,
]
embed_multi = dict(decay_mult=0.0, lr_mult=1.0)
env_cfg = dict(
    cudnn_benchmark=True,
    dist_cfg=dict(backend='nccl'),
    mp_cfg=dict(mp_start_method='fork', opencv_num_threads=0))
img_ratios = [
    0.5,
    0.75,
    1.0,
    1.25,
    1.5,
    1.75,
]
launcher = 'none'
load_from = '../checkpoint_files/ade20k/mask2former/mask2former_swin-s_8xb2-160k_ade20k-512x512_20221204_143905-e715144e.pth'
log_level = 'INFO'
log_processor = dict(by_epoch=False)
model = dict(
    backbone=dict(
        attn_drop_rate=0.0,
        depths=[
            2,
            2,
            18,
            2,
        ],
        drop_path_rate=0.3,
        drop_rate=0.0,
        embed_dims=96,
        frozen_stages=-1,
        init_cfg=dict(
            checkpoint=
            'https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/swin/swin_small_patch4_window7_224_20220317-7ba6d6dd.pth',
            type='Pretrained'),
        mlp_ratio=4,
        num_heads=[
            3,
            6,
            12,
            24,
        ],
        out_indices=(
            0,
            1,
            2,
            3,
        ),
        patch_norm=True,
        qk_scale=None,
        qkv_bias=True,
        type='SwinTransformer',
        window_size=7,
        with_cp=False),
    data_preprocessor=dict(
        bgr_to_rgb=True,
        corruption='jpeg_compression',
        mean=[
            123.675,
            116.28,
            103.53,
        ],
        pad_val=0,
        seg_pad_val=255,
        size=(
            512,
            512,
        ),
        std=[
            58.395,
            57.12,
            57.375,
        ],
        test_cfg=dict(size_divisor=32),
        type='SegDataPreProcessor'),
    decode_head=dict(
        align_corners=False,
        enforce_decoder_input_project=False,
        feat_channels=256,
        in_channels=[
            96,
            192,
            384,
            768,
        ],
        loss_cls=dict(
            class_weight=[
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                0.1,
            ],
            loss_weight=2.0,
            reduction='mean',
            type='mmdet.CrossEntropyLoss',
            use_sigmoid=False),
        loss_dice=dict(
            activate=True,
            eps=1.0,
            loss_weight=5.0,
            naive_dice=True,
            reduction='mean',
            type='mmdet.DiceLoss',
            use_sigmoid=True),
        loss_mask=dict(
            loss_weight=5.0,
            reduction='mean',
            type='mmdet.CrossEntropyLoss',
            use_sigmoid=True),
        num_classes=150,
        num_queries=100,
        num_transformer_feat_level=3,
        out_channels=256,
        pixel_decoder=dict(
            act_cfg=dict(type='ReLU'),
            encoder=dict(
                init_cfg=None,
                layer_cfg=dict(
                    ffn_cfg=dict(
                        act_cfg=dict(inplace=True, type='ReLU'),
                        embed_dims=256,
                        feedforward_channels=1024,
                        ffn_drop=0.0,
                        num_fcs=2),
                    self_attn_cfg=dict(
                        batch_first=True,
                        dropout=0.0,
                        embed_dims=256,
                        im2col_step=64,
                        init_cfg=None,
                        norm_cfg=None,
                        num_heads=8,
                        num_levels=3,
                        num_points=4)),
                num_layers=6),
            init_cfg=None,
            norm_cfg=dict(num_groups=32, type='GN'),
            num_outs=3,
            positional_encoding=dict(normalize=True, num_feats=128),
            type='mmdet.MSDeformAttnPixelDecoder'),
        positional_encoding=dict(normalize=True, num_feats=128),
        strides=[
            4,
            8,
            16,
            32,
        ],
        train_cfg=dict(
            assigner=dict(
                match_costs=[
                    dict(type='mmdet.ClassificationCost', weight=2.0),
                    dict(
                        type='mmdet.CrossEntropyLossCost',
                        use_sigmoid=True,
                        weight=5.0),
                    dict(
                        eps=1.0,
                        pred_act=True,
                        type='mmdet.DiceCost',
                        weight=5.0),
                ],
                type='mmdet.HungarianAssigner'),
            importance_sample_ratio=0.75,
            num_points=12544,
            oversample_ratio=3.0,
            sampler=dict(type='mmdet.MaskPseudoSampler')),
        transformer_decoder=dict(
            init_cfg=None,
            layer_cfg=dict(
                cross_attn_cfg=dict(
                    attn_drop=0.0,
                    batch_first=True,
                    dropout_layer=None,
                    embed_dims=256,
                    num_heads=8,
                    proj_drop=0.0),
                ffn_cfg=dict(
                    act_cfg=dict(inplace=True, type='ReLU'),
                    add_identity=True,
                    dropout_layer=None,
                    embed_dims=256,
                    feedforward_channels=2048,
                    ffn_drop=0.0,
                    num_fcs=2),
                self_attn_cfg=dict(
                    attn_drop=0.0,
                    batch_first=True,
                    dropout_layer=None,
                    embed_dims=256,
                    num_heads=8,
                    proj_drop=0.0)),
            num_layers=9,
            return_intermediate=True),
        type='Mask2FormerHead'),
    test_cfg=dict(mode='whole'),
    train_cfg=dict(),
    type='EncoderDecoder')
num_classes = 150
optim_wrapper = dict(
    clip_grad=dict(max_norm=0.01, norm_type=2),
    optimizer=dict(
        betas=(
            0.9,
            0.999,
        ),
        eps=1e-08,
        lr=0.0001,
        type='AdamW',
        weight_decay=0.05),
    paramwise_cfg=dict(
        custom_keys=dict({
            'absolute_pos_embed':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone':
            dict(decay_mult=1.0, lr_mult=0.1),
            'backbone.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.patch_embed.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.0.blocks.0.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.0.blocks.1.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.0.downsample.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.1.blocks.0.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.1.blocks.1.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.1.downsample.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.0.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.1.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.10.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.11.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.12.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.13.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.14.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.15.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.16.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.17.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.2.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.3.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.4.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.5.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.6.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.7.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.8.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.9.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.downsample.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.3.blocks.0.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.3.blocks.1.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'level_embed':
            dict(decay_mult=0.0, lr_mult=1.0),
            'query_embed':
            dict(decay_mult=0.0, lr_mult=1.0),
            'query_feat':
            dict(decay_mult=0.0, lr_mult=1.0),
            'relative_position_bias_table':
            dict(decay_mult=0.0, lr_mult=0.1)
        }),
        norm_decay_mult=0.0),
    type='OptimWrapper')
optimizer = dict(
    betas=(
        0.9,
        0.999,
    ),
    eps=1e-08,
    lr=0.0001,
    type='AdamW',
    weight_decay=0.05)
param_scheduler = [
    dict(
        begin=0,
        by_epoch=False,
        end=160000,
        eta_min=0,
        power=0.9,
        type='PolyLR'),
]
pretrained = 'https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/swin/swin_small_patch4_window7_224_20220317-7ba6d6dd.pth'
resume = False
test_cfg = dict(type='TestLoop')
test_dataloader = dict(
    batch_size=1,
    dataset=dict(
        data_prefix=dict(
            img_path='images/validation',
            seg_map_path='annotations/validation'),
        data_root='data/ade/ADEChallengeData2016',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(keep_ratio=True, scale=(
                2048,
                512,
            ), type='Resize'),
            dict(reduce_zero_label=True, type='LoadAnnotations'),
            dict(type='PackSegInputs'),
        ],
        type='ADE20KDataset'),
    num_workers=4,
    persistent_workers=True,
    sampler=dict(shuffle=False, type='DefaultSampler'))
test_evaluator = dict(
    iou_metrics=[
        'mIoU',
    ], type='IoUMetric')
test_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(keep_ratio=True, scale=(
        2048,
        512,
    ), type='Resize'),
    dict(reduce_zero_label=True, type='LoadAnnotations'),
    dict(type='PackSegInputs'),
]
train_cfg = dict(
    max_iters=160000, type='IterBasedTrainLoop', val_interval=5000)
train_dataloader = dict(
    batch_size=2,
    dataset=dict(
        data_prefix=dict(
            img_path='images/training', seg_map_path='annotations/training'),
        data_root='data/ade/ADEChallengeData2016',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(reduce_zero_label=True, type='LoadAnnotations'),
            dict(
                max_size=2048,
                resize_type='ResizeShortestEdge',
                scales=[
                    256,
                    307,
                    358,
                    409,
                    460,
                    512,
                    563,
                    614,
                    665,
                    716,
                    768,
                    819,
                    870,
                    921,
                    972,
                    1024,
                ],
                type='RandomChoiceResize'),
            dict(
                cat_max_ratio=0.75, crop_size=(
                    512,
                    512,
                ), type='RandomCrop'),
            dict(prob=0.5, type='RandomFlip'),
            dict(type='PhotoMetricDistortion'),
            dict(type='PackSegInputs'),
        ],
        type='ADE20KDataset'),
    num_workers=4,
    persistent_workers=True,
    sampler=dict(shuffle=True, type='InfiniteSampler'))
train_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(reduce_zero_label=True, type='LoadAnnotations'),
    dict(
        max_size=2048,
        resize_type='ResizeShortestEdge',
        scales=[
            256,
            307,
            358,
            409,
            460,
            512,
            563,
            614,
            665,
            716,
            768,
            819,
            870,
            921,
            972,
            1024,
        ],
        type='RandomChoiceResize'),
    dict(cat_max_ratio=0.75, crop_size=(
        512,
        512,
    ), type='RandomCrop'),
    dict(prob=0.5, type='RandomFlip'),
    dict(type='PhotoMetricDistortion'),
    dict(type='PackSegInputs'),
]
tta_model = dict(type='SegTTAModel')
tta_pipeline = [
    dict(backend_args=None, type='LoadImageFromFile'),
    dict(
        transforms=[
            [
                dict(keep_ratio=True, scale_factor=0.5, type='Resize'),
                dict(keep_ratio=True, scale_factor=0.75, type='Resize'),
                dict(keep_ratio=True, scale_factor=1.0, type='Resize'),
                dict(keep_ratio=True, scale_factor=1.25, type='Resize'),
                dict(keep_ratio=True, scale_factor=1.5, type='Resize'),
                dict(keep_ratio=True, scale_factor=1.75, type='Resize'),
            ],
            [
                dict(direction='horizontal', prob=0.0, type='RandomFlip'),
                dict(direction='horizontal', prob=1.0, type='RandomFlip'),
            ],
            [
                dict(type='LoadAnnotations'),
            ],
            [
                dict(type='PackSegInputs'),
            ],
        ],
        type='TestTimeAug'),
]
val_cfg = dict(type='ValLoop')
val_dataloader = dict(
    batch_size=1,
    dataset=dict(
        data_prefix=dict(
            img_path='images/validation',
            seg_map_path='annotations/validation'),
        data_root='data/ade/ADEChallengeData2016',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(keep_ratio=True, scale=(
                2048,
                512,
            ), type='Resize'),
            dict(reduce_zero_label=True, type='LoadAnnotations'),
            dict(type='PackSegInputs'),
        ],
        type='ADE20KDataset'),
    num_workers=4,
    persistent_workers=True,
    sampler=dict(shuffle=False, type='DefaultSampler'))
val_evaluator = dict(
    iou_metrics=[
        'mIoU',
    ], type='IoUMetric')
vis_backends = [
    dict(type='LocalVisBackend'),
]
visualizer = dict(
    name='visualizer',
    type='SegLocalVisualizer',
    vis_backends=[
        dict(type='LocalVisBackend'),
    ])
work_dir = '../corruptions/work_dirs/ade20k/mask2former/mask2former_swin-s_8xb2-160k_ade20k-512x512/jpeg_compression'

09/21 07:44:19 - mmengine - INFO - Distributed training is not used, all SyncBatchNorm (SyncBN) layers in the model will be automatically reverted to BatchNormXd layers if they are used.
09/21 07:44:19 - mmengine - INFO - Hooks will be executed in the following order:
before_run:
(VERY_HIGH   ) RuntimeInfoHook                    
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
before_train:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_train_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(NORMAL      ) DistSamplerSeedHook                
 -------------------- 
before_train_iter:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_train_iter:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(NORMAL      ) SegVisualizationHook               
(BELOW_NORMAL) LoggerHook                         
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
after_train_epoch:
(NORMAL      ) IterTimerHook                      
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_val:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
before_val_epoch:
(NORMAL      ) IterTimerHook                      
 -------------------- 
before_val_iter:
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_val_iter:
(NORMAL      ) IterTimerHook                      
(NORMAL      ) SegVisualizationHook               
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_val_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
after_val:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
after_train:
(VERY_HIGH   ) RuntimeInfoHook                    
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_test:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
before_test_epoch:
(NORMAL      ) IterTimerHook                      
 -------------------- 
before_test_iter:
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_test_iter:
(NORMAL      ) IterTimerHook                      
(NORMAL      ) SegVisualizationHook               
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_test_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_test:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
after_run:
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
09/21 07:44:19 - mmengine - WARNING - The prefix is not set in metric class IoUMetric.
Loads checkpoint by local backend from path: ../checkpoint_files/ade20k/mask2former/mask2former_swin-s_8xb2-160k_ade20k-512x512_20221204_143905-e715144e.pth
09/21 07:44:20 - mmengine - INFO - Load checkpoint from ../checkpoint_files/ade20k/mask2former/mask2former_swin-s_8xb2-160k_ade20k-512x512_20221204_143905-e715144e.pth
09/21 07:44:38 - mmengine - INFO - Iter(test) [  50/2000]    eta: 0:11:34  time: 0.2502  data_time: 0.0015  memory: 12814  
09/21 07:44:45 - mmengine - INFO - Iter(test) [ 100/2000]    eta: 0:07:47  time: 0.1560  data_time: 0.0015  memory: 12795  
09/21 07:44:49 - mmengine - INFO - Iter(test) [ 150/2000]    eta: 0:05:52  time: 0.0786  data_time: 0.0014  memory: 935  
09/21 07:44:55 - mmengine - INFO - Iter(test) [ 200/2000]    eta: 0:05:14  time: 0.0929  data_time: 0.0015  memory: 12835  
09/21 07:45:01 - mmengine - INFO - Iter(test) [ 250/2000]    eta: 0:04:47  time: 0.0917  data_time: 0.0014  memory: 12838  
09/21 07:45:06 - mmengine - INFO - Iter(test) [ 300/2000]    eta: 0:04:19  time: 0.0788  data_time: 0.0015  memory: 12803  
09/21 07:45:12 - mmengine - INFO - Iter(test) [ 350/2000]    eta: 0:04:02  time: 0.0928  data_time: 0.0015  memory: 12810  
09/21 07:45:17 - mmengine - INFO - Iter(test) [ 400/2000]    eta: 0:03:46  time: 0.0961  data_time: 0.0014  memory: 12775  
09/21 07:45:22 - mmengine - INFO - Iter(test) [ 450/2000]    eta: 0:03:30  time: 0.0878  data_time: 0.0014  memory: 975  
09/21 07:45:26 - mmengine - INFO - Iter(test) [ 500/2000]    eta: 0:03:15  time: 0.0769  data_time: 0.0014  memory: 935  
09/21 07:45:30 - mmengine - INFO - Iter(test) [ 550/2000]    eta: 0:03:02  time: 0.0802  data_time: 0.0015  memory: 1042  
09/21 07:45:34 - mmengine - INFO - Iter(test) [ 600/2000]    eta: 0:02:51  time: 0.0920  data_time: 0.0015  memory: 1040  
09/21 07:45:39 - mmengine - INFO - Iter(test) [ 650/2000]    eta: 0:02:43  time: 0.1786  data_time: 0.0013  memory: 12816  
09/21 07:45:44 - mmengine - INFO - Iter(test) [ 700/2000]    eta: 0:02:35  time: 0.0790  data_time: 0.0015  memory: 12806  
09/21 07:45:48 - mmengine - INFO - Iter(test) [ 750/2000]    eta: 0:02:26  time: 0.0786  data_time: 0.0014  memory: 1096  
09/21 07:45:52 - mmengine - INFO - Iter(test) [ 800/2000]    eta: 0:02:17  time: 0.0916  data_time: 0.0015  memory: 935  
09/21 07:45:57 - mmengine - INFO - Iter(test) [ 850/2000]    eta: 0:02:10  time: 0.0917  data_time: 0.0016  memory: 908  
09/21 07:46:01 - mmengine - INFO - Iter(test) [ 900/2000]    eta: 0:02:03  time: 0.0858  data_time: 0.0013  memory: 987  
09/21 07:46:05 - mmengine - INFO - Iter(test) [ 950/2000]    eta: 0:01:55  time: 0.0771  data_time: 0.0014  memory: 1015  
09/21 07:46:09 - mmengine - INFO - Iter(test) [1000/2000]    eta: 0:01:48  time: 0.0753  data_time: 0.0014  memory: 1015  
09/21 07:46:15 - mmengine - INFO - Iter(test) [1050/2000]    eta: 0:01:43  time: 0.0920  data_time: 0.0014  memory: 12819  
09/21 07:46:19 - mmengine - INFO - Iter(test) [1100/2000]    eta: 0:01:36  time: 0.0905  data_time: 0.0016  memory: 1012  
09/21 07:46:23 - mmengine - INFO - Iter(test) [1150/2000]    eta: 0:01:30  time: 0.0781  data_time: 0.0014  memory: 985  
09/21 07:46:27 - mmengine - INFO - Iter(test) [1200/2000]    eta: 0:01:24  time: 0.0779  data_time: 0.0014  memory: 1921  
09/21 07:46:32 - mmengine - INFO - Iter(test) [1250/2000]    eta: 0:01:19  time: 0.0897  data_time: 0.0014  memory: 12797  
09/21 07:46:37 - mmengine - INFO - Iter(test) [1300/2000]    eta: 0:01:13  time: 0.0916  data_time: 0.0015  memory: 935  
09/21 07:46:41 - mmengine - INFO - Iter(test) [1350/2000]    eta: 0:01:07  time: 0.0910  data_time: 0.0015  memory: 935  
09/21 07:46:45 - mmengine - INFO - Iter(test) [1400/2000]    eta: 0:01:02  time: 0.0802  data_time: 0.0014  memory: 1012  
09/21 07:46:49 - mmengine - INFO - Iter(test) [1450/2000]    eta: 0:00:56  time: 0.0798  data_time: 0.0014  memory: 1015  
09/21 07:46:54 - mmengine - INFO - Iter(test) [1500/2000]    eta: 0:00:50  time: 0.0889  data_time: 0.0014  memory: 933  
09/21 07:46:58 - mmengine - INFO - Iter(test) [1550/2000]    eta: 0:00:45  time: 0.0953  data_time: 0.0029  memory: 1015  
09/21 07:47:03 - mmengine - INFO - Iter(test) [1600/2000]    eta: 0:00:40  time: 0.0832  data_time: 0.0015  memory: 908  
09/21 07:47:07 - mmengine - INFO - Iter(test) [1650/2000]    eta: 0:00:35  time: 0.0751  data_time: 0.0013  memory: 12807  
09/21 07:47:11 - mmengine - INFO - Iter(test) [1700/2000]    eta: 0:00:30  time: 0.0865  data_time: 0.0015  memory: 1012  
09/21 07:47:16 - mmengine - INFO - Iter(test) [1750/2000]    eta: 0:00:25  time: 0.0899  data_time: 0.0014  memory: 1039  
09/21 07:47:20 - mmengine - INFO - Iter(test) [1800/2000]    eta: 0:00:19  time: 0.0911  data_time: 0.0015  memory: 935  
09/21 07:47:25 - mmengine - INFO - Iter(test) [1850/2000]    eta: 0:00:14  time: 0.0794  data_time: 0.0015  memory: 854  
09/21 07:47:28 - mmengine - INFO - Iter(test) [1900/2000]    eta: 0:00:09  time: 0.0775  data_time: 0.0014  memory: 1068  
09/21 07:47:33 - mmengine - INFO - Iter(test) [1950/2000]    eta: 0:00:04  time: 0.0891  data_time: 0.0014  memory: 1306  
09/21 07:47:37 - mmengine - INFO - Iter(test) [2000/2000]    eta: 0:00:00  time: 0.0812  data_time: 0.0012  memory: 1094  
09/21 07:47:37 - mmengine - INFO - per class results:
09/21 07:47:37 - mmengine - INFO - 
+---------------------+-------+-------+
|        Class        |  IoU  |  Acc  |
+---------------------+-------+-------+
|         wall        | 76.58 | 88.09 |
|       building      | 83.47 | 93.53 |
|         sky         | 94.68 | 97.28 |
|        floor        |  80.4 | 90.11 |
|         tree        | 74.75 | 85.63 |
|       ceiling       | 82.31 |  88.5 |
|         road        | 82.59 | 90.39 |
|         bed         | 86.91 |  95.2 |
|      windowpane     | 58.88 | 77.88 |
|        grass        | 71.81 | 82.97 |
|       cabinet       | 57.73 | 72.25 |
|       sidewalk      | 62.76 | 77.93 |
|        person       | 81.54 | 88.32 |
|        earth        | 38.12 | 54.78 |
|         door        | 45.86 |  61.2 |
|        table        | 62.14 | 77.04 |
|       mountain      |  65.1 | 79.27 |
|        plant        | 49.28 | 62.38 |
|       curtain       |  69.5 | 79.79 |
|        chair        | 58.04 | 70.52 |
|         car         | 83.35 | 91.95 |
|        water        | 62.72 | 78.78 |
|       painting      | 69.15 | 83.08 |
|         sofa        | 64.06 | 77.04 |
|        shelf        | 40.33 | 58.54 |
|        house        | 53.19 | 70.94 |
|         sea         | 71.31 | 83.03 |
|        mirror       | 67.37 | 79.11 |
|         rug         |  60.4 | 67.24 |
|        field        | 27.07 | 45.44 |
|       armchair      |  41.9 | 65.41 |
|         seat        | 58.38 | 83.17 |
|        fence        | 44.62 | 58.14 |
|         desk        | 48.44 | 70.89 |
|         rock        | 51.38 | 71.88 |
|       wardrobe      | 45.22 | 67.54 |
|         lamp        | 66.72 | 77.96 |
|       bathtub       |  73.5 | 86.31 |
|       railing       | 32.93 | 50.58 |
|       cushion       | 57.51 | 71.64 |
|         base        |  32.9 | 50.61 |
|         box         | 21.61 | 29.23 |
|        column       | 47.39 | 57.03 |
|      signboard      | 35.53 | 47.15 |
|   chest of drawers  |  43.5 | 60.73 |
|       counter       | 20.55 | 32.09 |
|         sand        | 37.24 |  50.8 |
|         sink        | 75.33 | 82.85 |
|      skyscraper     | 47.17 | 59.41 |
|      fireplace      | 66.19 | 80.21 |
|     refrigerator    | 57.74 | 81.94 |
|      grandstand     |  39.6 | 63.53 |
|         path        | 19.11 | 33.52 |
|        stairs       | 24.64 |  31.4 |
|        runway       | 76.38 | 90.15 |
|         case        | 48.64 | 60.08 |
|      pool table     | 92.06 | 95.74 |
|        pillow       | 57.15 | 64.49 |
|     screen door     | 64.13 | 74.75 |
|       stairway      | 35.67 | 53.57 |
|        river        | 13.95 | 31.41 |
|        bridge       | 33.51 | 46.67 |
|       bookcase      | 30.65 | 60.22 |
|        blind        | 30.78 | 31.62 |
|     coffee table    | 62.01 | 81.65 |
|        toilet       | 86.37 | 90.45 |
|        flower       | 37.18 | 48.06 |
|         book        | 50.28 | 68.01 |
|         hill        |  16.5 | 26.59 |
|        bench        | 52.64 | 64.12 |
|      countertop     | 60.24 | 77.88 |
|        stove        | 71.82 | 82.16 |
|         palm        |  54.1 | 75.04 |
|    kitchen island   | 35.86 | 61.86 |
|       computer      | 61.95 | 70.75 |
|     swivel chair    | 54.47 | 75.85 |
|         boat        | 67.04 | 87.98 |
|         bar         | 57.49 | 76.79 |
|    arcade machine   | 44.11 | 47.89 |
|        hovel        | 38.79 | 48.45 |
|         bus         | 78.11 |  90.4 |
|        towel        | 68.09 | 74.69 |
|        light        |  59.0 | 74.76 |
|        truck        | 35.63 | 51.56 |
|        tower        | 44.89 | 63.32 |
|      chandelier     | 68.26 |  78.3 |
|        awning       | 31.24 | 43.36 |
|     streetlight     | 29.38 | 40.45 |
|        booth        | 29.47 | 38.49 |
| television receiver | 61.05 | 78.21 |
|       airplane      | 57.22 | 64.96 |
|      dirt track     |  2.98 |  4.75 |
|       apparel       | 27.06 | 43.12 |
|         pole        | 27.58 | 38.03 |
|         land        |  8.02 | 11.13 |
|      bannister      | 15.33 | 21.36 |
|      escalator      |  19.2 | 19.67 |
|       ottoman       | 46.92 | 59.52 |
|        bottle       | 18.46 | 21.88 |
|        buffet       | 40.17 |  42.3 |
|        poster       | 31.95 | 44.67 |
|        stage        | 16.41 | 28.26 |
|         van         | 53.26 | 76.22 |
|         ship        |  9.79 | 10.14 |
|       fountain      | 20.88 | 21.81 |
|    conveyer belt    |  54.7 | 67.92 |
|        canopy       | 26.14 | 34.53 |
|        washer       | 68.15 | 71.68 |
|      plaything      | 13.77 | 22.78 |
|    swimming pool    | 44.07 | 59.74 |
|        stool        | 43.51 | 55.23 |
|        barrel       |  47.8 | 51.09 |
|        basket       | 29.58 | 36.21 |
|      waterfall      | 60.75 | 87.55 |
|         tent        | 95.99 | 98.09 |
|         bag         | 17.28 | 21.76 |
|       minibike      | 73.22 | 84.01 |
|        cradle       | 77.73 | 96.65 |
|         oven        |  48.3 | 59.88 |
|         ball        | 28.93 | 72.12 |
|         food        | 56.05 | 70.02 |
|         step        | 11.26 | 15.77 |
|         tank        | 37.54 | 39.43 |
|      trade name     |  31.9 | 38.12 |
|      microwave      | 39.71 | 43.35 |
|         pot         | 50.84 |  61.5 |
|        animal       | 60.69 | 63.96 |
|       bicycle       | 58.73 |  74.6 |
|         lake        |  8.23 |  9.53 |
|      dishwasher     | 70.86 | 77.94 |
|        screen       | 80.05 |  89.0 |
|       blanket       |  7.97 |  9.56 |
|      sculpture      | 51.48 | 61.34 |
|         hood        | 63.76 |  67.5 |
|        sconce       | 48.78 |  59.9 |
|         vase        | 42.18 | 55.96 |
|    traffic light    | 32.55 | 56.88 |
|         tray        | 12.54 | 18.64 |
|        ashcan       | 40.44 | 61.37 |
|         fan         | 63.65 | 78.11 |
|         pier        | 38.36 | 59.01 |
|      crt screen     |  3.97 | 13.19 |
|        plate        | 56.21 | 71.49 |
|       monitor       |  2.99 |  4.62 |
|    bulletin board   | 54.22 | 60.93 |
|        shower       |  2.28 | 21.05 |
|       radiator      | 50.23 | 63.93 |
|        glass        | 16.82 | 18.33 |
|        clock        | 32.79 | 38.02 |
|         flag        | 33.28 | 36.29 |
+---------------------+-------+-------+
09/21 07:47:37 - mmengine - INFO - Iter(test) [2000/2000]    aAcc: 82.6500  mIoU: 47.9700  mAcc: 60.0300  data_time: 0.0016  time: 0.0982
Finished processing corruption type: jpeg_compression
Runtime: 1726897658

============================= JOB FEEDBACK =============================

NodeName=uc2n487
Job ID: 24247179
Cluster: uc2
User/Group: ma_mkacar/ma_ma
State: COMPLETED (exit code 0)
Nodes: 1
Cores per node: 16
CPU Utilized: 06:48:34
CPU Efficiency: 6.27% of 4-12:38:08 core-walltime
Job Wall-clock time: 06:47:23
Memory Utilized: 2.69 GB
Memory Efficiency: 2.69% of 100.00 GB
