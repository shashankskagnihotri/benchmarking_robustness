Started at Wed Nov 13 03:58:03 CET 2024
/pfs/work7/workspace/scratch/ma_dschader-team_project_fss2024/miniconda3/envs/py310/lib/python3.10/site-packages/torch/cuda/__init__.py:155: UserWarning: 
NVIDIA H100 PCIe with CUDA capability sm_90 is not compatible with the current PyTorch installation.
The current PyTorch install supports CUDA capabilities sm_37 sm_50 sm_60 sm_61 sm_70 sm_75 sm_80 sm_86 compute_37.
If you want to use the NVIDIA H100 PCIe GPU with PyTorch, please check the instructions at https://pytorch.org/get-started/locally/

  warnings.warn(incompatible_device_warn.format(device_name, capability, " ".join(arch_list), device_name))
11/13 03:58:05 - mmengine - INFO - 
------------------------------------------------------------
System environment:
    sys.platform: linux
    Python: 3.10.13 | packaged by conda-forge | (main, Dec 23 2023, 15:36:39) [GCC 12.3.0]
    CUDA available: True
    MUSA available: False
    numpy_random_seed: 1838240051
    GPU 0: NVIDIA H100 PCIe
    CUDA_HOME: None
    GCC: gcc (GCC) 8.5.0 20210514 (Red Hat 8.5.0-18)
    PyTorch: 1.13.1
    PyTorch compiling details: PyTorch built with:
  - GCC 9.3
  - C++ Version: 201402
  - Intel(R) oneAPI Math Kernel Library Version 2023.1-Product Build 20230303 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v2.6.0 (Git Hash 52b5f107dd9cf10910aaa19cb47f3abf9b349815)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - LAPACK is enabled (usually provided by MKL)
  - NNPACK is enabled
  - CPU capability usage: AVX2
  - CUDA Runtime 11.7
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_61,code=sm_61;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86;-gencode;arch=compute_37,code=compute_37
  - CuDNN 8.5
  - Magma 2.6.1
  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.7, CUDNN_VERSION=8.5.0, CXX_COMPILER=/opt/rh/devtoolset-9/root/usr/bin/c++, CXX_FLAGS= -fabi-version=11 -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -DEDGE_PROFILER_USE_KINETO -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Werror=non-virtual-dtor -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wunused-local-typedefs -Wno-unused-parameter -Wno-unused-function -Wno-unused-result -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Werror=cast-function-type -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.13.1, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, USE_ROCM=OFF, 

    TorchVision: 0.14.1
    OpenCV: 3.4.18
    MMEngine: 0.10.4

Runtime environment:
    cudnn_benchmark: True
    mp_cfg: {'mp_start_method': 'fork', 'opencv_num_threads': 0}
    dist_cfg: {'backend': 'nccl'}
    seed: 1838240051
    Distributed launcher: none
    Distributed training: False
    GPU number: 1
------------------------------------------------------------

11/13 03:58:06 - mmengine - INFO - Config:
checkpoint_config = dict(by_epoch=False, interval=1000, max_keep_ckpts=1)
crop_size = (
    896,
    896,
)
data = dict(
    samples_per_gpu=1,
    test=dict(pipeline=[
        dict(type='LoadImageFromFile'),
        dict(
            flip=False,
            img_scale=(
                3584,
                896,
            ),
            transforms=[
                dict(keep_ratio=True, type='Resize'),
                dict(size_divisor=32, type='ResizeToMultiple'),
                dict(type='RandomFlip'),
                dict(
                    mean=[
                        123.675,
                        116.28,
                        103.53,
                    ],
                    std=[
                        58.395,
                        57.12,
                        57.375,
                    ],
                    to_rgb=True,
                    type='Normalize'),
                dict(keys=[
                    'img',
                ], type='ImageToTensor'),
                dict(keys=[
                    'img',
                ], type='Collect'),
            ],
            type='MultiScaleFlipAug'),
    ]),
    train=dict(pipeline=[
        dict(type='LoadImageFromFile'),
        dict(reduce_zero_label=True, type='LoadAnnotations'),
        dict(img_scale=(
            3584,
            896,
        ), ratio_range=(
            0.5,
            2.0,
        ), type='Resize'),
        dict(cat_max_ratio=0.75, crop_size=(
            896,
            896,
        ), type='RandomCrop'),
        dict(prob=0.5, type='RandomFlip'),
        dict(type='PhotoMetricDistortion'),
        dict(
            mean=[
                123.675,
                116.28,
                103.53,
            ],
            std=[
                58.395,
                57.12,
                57.375,
            ],
            to_rgb=True,
            type='Normalize'),
        dict(pad_val=0, seg_pad_val=255, size=(
            896,
            896,
        ), type='Pad'),
        dict(type='DefaultFormatBundle'),
        dict(keys=[
            'img',
            'gt_semantic_seg',
        ], type='Collect'),
    ]),
    val=dict(pipeline=[
        dict(type='LoadImageFromFile'),
        dict(
            flip=False,
            img_scale=(
                3584,
                896,
            ),
            transforms=[
                dict(keep_ratio=True, type='Resize'),
                dict(size_divisor=32, type='ResizeToMultiple'),
                dict(type='RandomFlip'),
                dict(
                    mean=[
                        123.675,
                        116.28,
                        103.53,
                    ],
                    std=[
                        58.395,
                        57.12,
                        57.375,
                    ],
                    to_rgb=True,
                    type='Normalize'),
                dict(keys=[
                    'img',
                ], type='ImageToTensor'),
                dict(keys=[
                    'img',
                ], type='Collect'),
            ],
            type='MultiScaleFlipAug'),
    ]))
data_preprocessor = dict(
    bgr_to_rgb=True,
    corruption=None,
    enable_normalization=False,
    mean=[
        123.675,
        116.28,
        103.53,
    ],
    pad_val=0,
    seg_pad_val=255,
    std=[
        58.395,
        57.12,
        57.375,
    ],
    type='SegDataPreProcessor')
data_root = 'data/ade/ADEChallengeData2016'
dataset_type = 'ADE20KDataset'
default_hooks = dict(
    checkpoint=dict(by_epoch=False, interval=16000, type='CheckpointHook'),
    logger=dict(interval=50, log_metric_by_epoch=False, type='LoggerHook'),
    param_scheduler=dict(type='ParamSchedulerHook'),
    sampler_seed=dict(type='DistSamplerSeedHook'),
    timer=dict(type='IterTimerHook'),
    visualization=dict(draw=True, type='SegVisualizationHook'))
default_scope = 'mmseg'
env_cfg = dict(
    cudnn_benchmark=True,
    dist_cfg=dict(backend='nccl'),
    mp_cfg=dict(mp_start_method='fork', opencv_num_threads=0))
evaluation = dict(interval=16000, metric='mIoU', save_best='mIoU')
img_norm_cfg = dict(
    mean=[
        123.675,
        116.28,
        103.53,
    ],
    std=[
        58.395,
        57.12,
        57.375,
    ],
    to_rgb=True)
img_ratios = [
    0.5,
    0.75,
    1.0,
    1.25,
    1.5,
    1.75,
]
launcher = 'none'
load_from = '../checkpoint_files/upernet/upernet_internimage_h_896_160k_ade20k.pth'
log_level = 'INFO'
log_processor = dict(by_epoch=False)
lr_config = dict(
    _delete_=True,
    by_epoch=False,
    min_lr=0.0,
    policy='poly',
    power=1.0,
    warmup='linear',
    warmup_iters=1500,
    warmup_ratio=1e-06)
model = dict(
    attack_loss=dict(
        loss_weight=1.0,
        reduction='none',
        type='CrossEntropyLoss',
        use_sigmoid=False),
    auxiliary_head=dict(
        align_corners=False,
        channels=256,
        concat_input=False,
        dropout_ratio=0.1,
        in_channels=1280,
        in_index=2,
        loss_decode=dict(
            loss_weight=0.4, type='CrossEntropyLoss', use_sigmoid=False),
        norm_cfg=dict(requires_grad=True, type='SyncBN'),
        num_classes=150,
        num_convs=1,
        type='FCNHead'),
    backbone=dict(
        center_feature_scale=True,
        channels=320,
        core_op='DCNv3',
        depths=[
            6,
            6,
            32,
            6,
        ],
        drop_path_rate=0.5,
        dw_kernel_size=5,
        groups=[
            10,
            20,
            40,
            80,
        ],
        init_cfg=dict(
            checkpoint=
            'https://huggingface.co/OpenGVLab/InternImage/resolve/main/internimage_h_jointto22k_384.pth',
            type='Pretrained'),
        layer_scale=None,
        level2_post_norm=True,
        level2_post_norm_block_ids=[
            5,
            11,
            17,
            23,
            29,
        ],
        mlp_ratio=4.0,
        norm_layer='LN',
        offset_scale=1.0,
        out_indices=(
            0,
            1,
            2,
            3,
        ),
        post_norm=False,
        res_post_norm=True,
        type='InternImage',
        with_cp=False),
    data_preprocessor=dict(
        bgr_to_rgb=True,
        corruption=None,
        enable_normalization=False,
        mean=[
            123.675,
            116.28,
            103.53,
        ],
        pad_val=0,
        seg_pad_val=255,
        std=[
            58.395,
            57.12,
            57.375,
        ],
        type='SegDataPreProcessor'),
    decode_head=dict(
        align_corners=False,
        channels=512,
        dropout_ratio=0.1,
        in_channels=[
            320,
            640,
            1280,
            2560,
        ],
        in_index=[
            0,
            1,
            2,
            3,
        ],
        loss_decode=dict(
            loss_weight=1.0,
            reduction='none',
            type='CrossEntropyLoss',
            use_sigmoid=False),
        norm_cfg=dict(requires_grad=True, type='SyncBN'),
        num_classes=150,
        pool_scales=(
            1,
            2,
            3,
            6,
        ),
        type='UPerHead'),
    enable_normalization=False,
    normalize_mean_std=dict(
        mean=[
            123.675,
            116.28,
            103.53,
        ], std=[
            58.395,
            57.12,
            57.375,
        ]),
    perform_attack=False,
    pretrained='open-mmlab://resnet50_v1c',
    test_cfg=dict(mode='whole'),
    train_cfg=dict(),
    type='EncoderDecoder')
norm_cfg = dict(requires_grad=True, type='SyncBN')
optim_wrapper = dict(
    clip_grad=None,
    optimizer=dict(lr=0.01, momentum=0.9, type='SGD', weight_decay=0.0005),
    type='OptimWrapper')
optimizer = dict(
    betas=(
        0.9,
        0.999,
    ),
    constructor='CustomLayerDecayOptimizerConstructor',
    lr=2e-05,
    paramwise_cfg=dict(
        depths=[
            6,
            6,
            32,
            6,
        ],
        layer_decay_rate=0.95,
        num_layers=50,
        offset_lr_scale=1.0),
    type='AdamW',
    weight_decay=0.05)
optimizer_config = dict(
    _delete_=True, grad_clip=dict(max_norm=0.1, norm_type=2))
param_scheduler = [
    dict(
        begin=0,
        by_epoch=False,
        end=160000,
        eta_min=0.0001,
        power=0.9,
        type='PolyLR'),
]
pretrained = 'https://huggingface.co/OpenGVLab/InternImage/resolve/main/internimage_h_jointto22k_384.pth'
resume = False
runner = dict(type='IterBasedRunner')
test_cfg = dict(type='TestLoop')
test_dataloader = dict(
    batch_size=1,
    dataset=dict(
        data_prefix=dict(
            img_path='images/validation',
            seg_map_path='annotations/validation'),
        data_root='data/ade/ADEChallengeData2016',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(keep_ratio=True, scale=(
                2048,
                512,
            ), type='Resize'),
            dict(reduce_zero_label=True, type='LoadAnnotations'),
            dict(type='PackSegInputs'),
        ],
        type='ADE20KDataset'),
    num_workers=4,
    persistent_workers=True,
    sampler=dict(shuffle=False, type='DefaultSampler'))
test_evaluator = dict(
    iou_metrics=[
        'mIoU',
    ], type='IoUMetric')
test_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(
        flip=False,
        img_scale=(
            3584,
            896,
        ),
        transforms=[
            dict(keep_ratio=True, type='Resize'),
            dict(size_divisor=32, type='ResizeToMultiple'),
            dict(type='RandomFlip'),
            dict(
                mean=[
                    123.675,
                    116.28,
                    103.53,
                ],
                std=[
                    58.395,
                    57.12,
                    57.375,
                ],
                to_rgb=True,
                type='Normalize'),
            dict(keys=[
                'img',
            ], type='ImageToTensor'),
            dict(keys=[
                'img',
            ], type='Collect'),
        ],
        type='MultiScaleFlipAug'),
]
train_cfg = dict(
    max_iters=160000, type='IterBasedTrainLoop', val_interval=16000)
train_dataloader = dict(
    batch_size=4,
    dataset=dict(
        data_prefix=dict(
            img_path='images/training', seg_map_path='annotations/training'),
        data_root='data/ade/ADEChallengeData2016',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(reduce_zero_label=True, type='LoadAnnotations'),
            dict(
                keep_ratio=True,
                ratio_range=(
                    0.5,
                    2.0,
                ),
                scale=(
                    2048,
                    512,
                ),
                type='RandomResize'),
            dict(
                cat_max_ratio=0.75, crop_size=(
                    512,
                    512,
                ), type='RandomCrop'),
            dict(prob=0.5, type='RandomFlip'),
            dict(type='PhotoMetricDistortion'),
            dict(type='PackSegInputs'),
        ],
        type='ADE20KDataset'),
    num_workers=4,
    persistent_workers=True,
    sampler=dict(shuffle=True, type='InfiniteSampler'))
train_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(reduce_zero_label=True, type='LoadAnnotations'),
    dict(img_scale=(
        3584,
        896,
    ), ratio_range=(
        0.5,
        2.0,
    ), type='Resize'),
    dict(cat_max_ratio=0.75, crop_size=(
        896,
        896,
    ), type='RandomCrop'),
    dict(prob=0.5, type='RandomFlip'),
    dict(type='PhotoMetricDistortion'),
    dict(
        mean=[
            123.675,
            116.28,
            103.53,
        ],
        std=[
            58.395,
            57.12,
            57.375,
        ],
        to_rgb=True,
        type='Normalize'),
    dict(pad_val=0, seg_pad_val=255, size=(
        896,
        896,
    ), type='Pad'),
    dict(type='DefaultFormatBundle'),
    dict(keys=[
        'img',
        'gt_semantic_seg',
    ], type='Collect'),
]
tta_model = dict(type='SegTTAModel')
tta_pipeline = [
    dict(backend_args=None, type='LoadImageFromFile'),
    dict(
        transforms=[
            [
                dict(keep_ratio=True, scale_factor=0.5, type='Resize'),
                dict(keep_ratio=True, scale_factor=0.75, type='Resize'),
                dict(keep_ratio=True, scale_factor=1.0, type='Resize'),
                dict(keep_ratio=True, scale_factor=1.25, type='Resize'),
                dict(keep_ratio=True, scale_factor=1.5, type='Resize'),
                dict(keep_ratio=True, scale_factor=1.75, type='Resize'),
            ],
            [
                dict(direction='horizontal', prob=0.0, type='RandomFlip'),
                dict(direction='horizontal', prob=1.0, type='RandomFlip'),
            ],
            [
                dict(type='LoadAnnotations'),
            ],
            [
                dict(type='PackSegInputs'),
            ],
        ],
        type='TestTimeAug'),
]
val_cfg = dict(type='ValLoop')
val_dataloader = dict(
    batch_size=1,
    dataset=dict(
        data_prefix=dict(
            img_path='images/validation',
            seg_map_path='annotations/validation'),
        data_root='data/ade/ADEChallengeData2016',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(keep_ratio=True, scale=(
                2048,
                512,
            ), type='Resize'),
            dict(reduce_zero_label=True, type='LoadAnnotations'),
            dict(type='PackSegInputs'),
        ],
        type='ADE20KDataset'),
    num_workers=4,
    persistent_workers=True,
    sampler=dict(shuffle=False, type='DefaultSampler'))
val_evaluator = dict(
    iou_metrics=[
        'mIoU',
    ], type='IoUMetric')
vis_backends = [
    dict(type='LocalVisBackend'),
]
visualizer = dict(
    name='visualizer',
    save_dir=
    '../clean_workdir/ade20k/upernet/upernet_internimage_h_896_160k_ade20k/show_dir',
    type='SegLocalVisualizer',
    vis_backends=[
        dict(type='LocalVisBackend'),
    ])
work_dir = '../clean_workdir/ade20k/upernet/upernet_internimage_h_896_160k_ade20k'

/pfs/work7/workspace/scratch/ma_dschader-team_project_fss2024/benchmarking_robustness/semantic_segmentation/mmsegmentation/ops_dcnv3/modules/dcnv3.py:20: UserWarning: Now, we support DCNv4 in InternImage.
  warnings.warn('Now, we support DCNv4 in InternImage.')
2024-11-13 03:58:09,423 - mmseg - INFO - using core type: DCNv3
2024-11-13 03:58:09,423 - mmseg - INFO - using activation layer: GELU
2024-11-13 03:58:09,423 - mmseg - INFO - using main norm layer: LN
2024-11-13 03:58:09,423 - mmseg - INFO - using dpr: linear, 0.5
2024-11-13 03:58:09,423 - mmseg - INFO - level2_post_norm: True
2024-11-13 03:58:09,423 - mmseg - INFO - level2_post_norm_block_ids: [5, 11, 17, 23, 29]
2024-11-13 03:58:09,423 - mmseg - INFO - res_post_norm: True
2024-11-13 03:58:09,423 - mmseg - INFO - use_dcn_v4_op: False
Number of parameters:  1120338396
11/13 04:07:57 - mmengine - INFO - Distributed training is not used, all SyncBatchNorm (SyncBN) layers in the model will be automatically reverted to BatchNormXd layers if they are used.
11/13 04:07:57 - mmengine - INFO - Hooks will be executed in the following order:
before_run:
(VERY_HIGH   ) RuntimeInfoHook                    
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
before_train:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_train_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(NORMAL      ) DistSamplerSeedHook                
 -------------------- 
before_train_iter:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_train_iter:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(NORMAL      ) SegVisualizationHook               
(BELOW_NORMAL) LoggerHook                         
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
after_train_epoch:
(NORMAL      ) IterTimerHook                      
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_val:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
before_val_epoch:
(NORMAL      ) IterTimerHook                      
 -------------------- 
before_val_iter:
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_val_iter:
(NORMAL      ) IterTimerHook                      
(NORMAL      ) SegVisualizationHook               
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_val_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
after_val:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
after_train:
(VERY_HIGH   ) RuntimeInfoHook                    
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_test:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
before_test_epoch:
(NORMAL      ) IterTimerHook                      
 -------------------- 
before_test_iter:
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_test_iter:
(NORMAL      ) IterTimerHook                      
(NORMAL      ) SegVisualizationHook               
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_test_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_test:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
after_run:
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
11/13 04:07:58 - mmengine - WARNING - The prefix is not set in metric class IoUMetric.
Loads checkpoint by local backend from path: ../checkpoint_files/upernet/upernet_internimage_h_896_160k_ade20k.pth
11/13 04:08:05 - mmengine - INFO - Load checkpoint from ../checkpoint_files/upernet/upernet_internimage_h_896_160k_ade20k.pth
11/13 04:18:27 - mmengine - INFO - Iter(test) [  50/2000]    eta: 6:42:49  time: 0.5153  data_time: 0.0014  memory: 46164  
11/13 04:18:56 - mmengine - INFO - Iter(test) [ 100/2000]    eta: 3:25:41  time: 0.6552  data_time: 0.0015  memory: 43480  
11/13 04:19:18 - mmengine - INFO - Iter(test) [ 150/2000]    eta: 2:18:01  time: 0.3866  data_time: 0.0015  memory: 43458  
11/13 04:19:44 - mmengine - INFO - Iter(test) [ 200/2000]    eta: 1:44:49  time: 0.4730  data_time: 0.0014  memory: 43482  
11/13 04:20:09 - mmengine - INFO - Iter(test) [ 250/2000]    eta: 1:24:20  time: 0.3560  data_time: 0.0014  memory: 43478  
11/13 04:20:30 - mmengine - INFO - Iter(test) [ 300/2000]    eta: 1:10:18  time: 0.2820  data_time: 0.0015  memory: 43479  
11/13 04:20:53 - mmengine - INFO - Iter(test) [ 350/2000]    eta: 1:00:18  time: 0.3653  data_time: 0.0028  memory: 43478  
11/13 04:21:15 - mmengine - INFO - Iter(test) [ 400/2000]    eta: 0:52:37  time: 0.4007  data_time: 0.0014  memory: 43478  
11/13 04:21:33 - mmengine - INFO - Iter(test) [ 450/2000]    eta: 0:46:20  time: 0.3287  data_time: 0.0015  memory: 43456  
11/13 04:21:49 - mmengine - INFO - Iter(test) [ 500/2000]    eta: 0:41:09  time: 0.2703  data_time: 0.0014  memory: 43427  
11/13 04:22:07 - mmengine - INFO - Iter(test) [ 550/2000]    eta: 0:36:56  time: 0.3849  data_time: 0.0015  memory: 43477  
11/13 04:22:22 - mmengine - INFO - Iter(test) [ 600/2000]    eta: 0:33:18  time: 0.3729  data_time: 0.0015  memory: 43479  
11/13 04:22:41 - mmengine - INFO - Iter(test) [ 650/2000]    eta: 0:30:17  time: 0.3937  data_time: 0.0014  memory: 43487  
11/13 04:23:02 - mmengine - INFO - Iter(test) [ 700/2000]    eta: 0:27:43  time: 0.2910  data_time: 0.0015  memory: 43484  
11/13 04:23:23 - mmengine - INFO - Iter(test) [ 750/2000]    eta: 0:25:28  time: 0.6161  data_time: 0.0014  memory: 43491  
11/13 04:23:38 - mmengine - INFO - Iter(test) [ 800/2000]    eta: 0:23:17  time: 0.2787  data_time: 0.0015  memory: 43459  
11/13 04:23:54 - mmengine - INFO - Iter(test) [ 850/2000]    eta: 0:21:22  time: 0.2803  data_time: 0.0015  memory: 4882  
11/13 04:24:10 - mmengine - INFO - Iter(test) [ 900/2000]    eta: 0:19:38  time: 0.3138  data_time: 0.0014  memory: 43448  
11/13 04:24:30 - mmengine - INFO - Iter(test) [ 950/2000]    eta: 0:18:07  time: 0.4336  data_time: 0.0015  memory: 43475  
11/13 04:24:46 - mmengine - INFO - Iter(test) [1000/2000]    eta: 0:16:40  time: 0.2644  data_time: 0.0015  memory: 43476  
11/13 04:25:06 - mmengine - INFO - Iter(test) [1050/2000]    eta: 0:15:23  time: 0.5903  data_time: 0.0014  memory: 43491  
11/13 04:25:25 - mmengine - INFO - Iter(test) [1100/2000]    eta: 0:14:09  time: 0.2719  data_time: 0.0015  memory: 43460  
11/13 04:25:42 - mmengine - INFO - Iter(test) [1150/2000]    eta: 0:12:59  time: 0.3562  data_time: 0.0014  memory: 43439  
11/13 04:25:57 - mmengine - INFO - Iter(test) [1200/2000]    eta: 0:11:53  time: 0.2741  data_time: 0.0014  memory: 6023  
11/13 04:26:13 - mmengine - INFO - Iter(test) [1250/2000]    eta: 0:10:52  time: 0.3577  data_time: 0.0014  memory: 43463  
11/13 04:26:27 - mmengine - INFO - Iter(test) [1300/2000]    eta: 0:09:52  time: 0.2822  data_time: 0.0014  memory: 4961  
11/13 04:26:45 - mmengine - INFO - Iter(test) [1350/2000]    eta: 0:08:58  time: 0.2605  data_time: 0.0014  memory: 43422  
11/13 04:27:05 - mmengine - INFO - Iter(test) [1400/2000]    eta: 0:08:08  time: 0.4060  data_time: 0.0014  memory: 43468  
11/13 04:27:20 - mmengine - INFO - Iter(test) [1450/2000]    eta: 0:07:18  time: 0.3897  data_time: 0.0014  memory: 43448  
11/13 04:27:34 - mmengine - INFO - Iter(test) [1500/2000]    eta: 0:06:29  time: 0.2599  data_time: 0.0014  memory: 5032  
11/13 04:27:50 - mmengine - INFO - Iter(test) [1550/2000]    eta: 0:05:43  time: 0.2875  data_time: 0.0015  memory: 43472  
11/13 04:28:04 - mmengine - INFO - Iter(test) [1600/2000]    eta: 0:04:59  time: 0.2763  data_time: 0.0015  memory: 5032  
11/13 04:28:22 - mmengine - INFO - Iter(test) [1650/2000]    eta: 0:04:17  time: 0.2960  data_time: 0.0013  memory: 43476  
11/13 04:28:41 - mmengine - INFO - Iter(test) [1700/2000]    eta: 0:03:38  time: 0.4881  data_time: 0.0016  memory: 43451  
11/13 04:28:59 - mmengine - INFO - Iter(test) [1750/2000]    eta: 0:02:58  time: 0.2814  data_time: 0.0015  memory: 43468  
11/13 04:29:14 - mmengine - INFO - Iter(test) [1800/2000]    eta: 0:02:20  time: 0.2838  data_time: 0.0015  memory: 43427  
11/13 04:29:29 - mmengine - INFO - Iter(test) [1850/2000]    eta: 0:01:43  time: 0.2809  data_time: 0.0015  memory: 4826  
11/13 04:29:44 - mmengine - INFO - Iter(test) [1900/2000]    eta: 0:01:08  time: 0.2715  data_time: 0.0014  memory: 43485  
11/13 04:30:02 - mmengine - INFO - Iter(test) [1950/2000]    eta: 0:00:33  time: 0.2711  data_time: 0.0014  memory: 43435  
11/13 04:30:17 - mmengine - INFO - Iter(test) [2000/2000]    eta: 0:00:00  time: 0.2530  data_time: 0.0014  memory: 43487  
11/13 04:30:17 - mmengine - INFO - per class results:
11/13 04:30:17 - mmengine - INFO - 
+---------------------+-------+-------+
|        Class        |  IoU  |  Acc  |
+---------------------+-------+-------+
|         wall        | 81.76 |  90.2 |
|       building      | 84.33 | 92.38 |
|         sky         | 94.83 | 97.46 |
|        floor        | 83.82 | 91.71 |
|         tree        | 76.88 | 89.88 |
|       ceiling       |  86.6 | 93.64 |
|         road        | 85.45 | 90.89 |
|         bed         | 91.96 | 96.45 |
|      windowpane     | 66.47 | 80.38 |
|        grass        | 73.04 | 85.36 |
|       cabinet       | 67.82 | 78.06 |
|       sidewalk      | 68.84 | 83.37 |
|        person       | 83.29 | 92.33 |
|        earth        | 42.77 | 58.74 |
|         door        | 58.95 | 70.76 |
|        table        |  69.6 | 80.81 |
|       mountain      | 63.58 | 73.55 |
|        plant        | 52.91 | 62.32 |
|       curtain       | 77.22 | 86.84 |
|        chair        | 65.25 | 79.18 |
|         car         | 87.12 | 93.94 |
|        water        |  63.6 | 77.61 |
|       painting      | 76.54 | 89.77 |
|         sofa        | 83.43 | 92.42 |
|        shelf        | 51.91 | 70.59 |
|        house        | 54.94 | 73.98 |
|         sea         | 71.28 |  84.0 |
|        mirror       | 75.08 | 82.55 |
|         rug         | 69.63 | 78.91 |
|        field        | 36.71 | 53.42 |
|       armchair      |  61.0 | 75.59 |
|         seat        |  70.8 | 87.24 |
|        fence        | 49.79 | 61.77 |
|         desk        | 58.75 | 78.06 |
|         rock        | 56.27 | 83.61 |
|       wardrobe      |  65.1 | 82.98 |
|         lamp        | 72.63 | 84.96 |
|       bathtub       | 83.88 | 87.39 |
|       railing       | 40.33 | 59.18 |
|       cushion       | 72.25 | 83.63 |
|         base        | 37.46 | 49.81 |
|         box         | 41.86 | 53.02 |
|        column       |  54.1 | 63.37 |
|      signboard      |  37.8 | 49.34 |
|   chest of drawers  | 42.16 | 62.88 |
|       counter       | 56.66 | 66.77 |
|         sand        | 55.54 | 80.62 |
|         sink        | 83.67 | 89.73 |
|      skyscraper     | 46.46 | 54.84 |
|      fireplace      | 73.08 | 92.17 |
|     refrigerator    | 85.42 | 94.41 |
|      grandstand     | 52.78 | 85.21 |
|         path        | 29.81 |  48.9 |
|        stairs       | 43.96 | 54.92 |
|        runway       | 71.47 | 94.38 |
|         case        | 66.16 | 78.42 |
|      pool table     | 92.56 | 97.18 |
|        pillow       | 68.74 | 78.24 |
|     screen door     | 71.34 | 73.76 |
|       stairway      | 42.15 | 59.76 |
|        river        | 12.96 | 27.75 |
|        bridge       | 39.23 | 50.04 |
|       bookcase      | 56.34 | 76.94 |
|        blind        | 48.43 | 54.47 |
|     coffee table    | 66.97 | 85.15 |
|        toilet       | 87.13 | 93.07 |
|        flower       | 41.18 | 57.37 |
|         book        | 55.46 | 75.54 |
|         hill        |  9.09 | 12.89 |
|        bench        |  70.2 | 81.29 |
|      countertop     | 67.85 | 83.06 |
|        stove        | 84.66 |  91.4 |
|         palm        | 56.62 | 78.37 |
|    kitchen island   | 47.96 | 78.75 |
|       computer      | 79.72 | 90.62 |
|     swivel chair    | 46.05 | 64.89 |
|         boat        | 71.31 | 92.78 |
|         bar         | 61.29 |  79.0 |
|    arcade machine   | 89.14 | 94.79 |
|        hovel        | 42.37 | 46.67 |
|         bus         |  92.9 | 97.18 |
|        towel        |  72.7 | 88.52 |
|        light        | 56.94 | 65.25 |
|        truck        | 54.54 | 66.88 |
|        tower        | 18.53 | 37.27 |
|      chandelier     | 71.25 | 83.85 |
|        awning       |  37.6 | 45.15 |
|     streetlight     | 36.23 | 50.33 |
|        booth        |  53.0 | 76.21 |
| television receiver | 79.87 | 86.38 |
|       airplane      | 81.33 | 94.83 |
|      dirt track     |  7.35 |  25.6 |
|       apparel       | 53.42 |  73.8 |
|         pole        | 27.57 | 39.13 |
|         land        |  2.73 |  5.81 |
|      bannister      | 17.66 | 24.99 |
|      escalator      | 61.42 | 83.72 |
|       ottoman       | 55.55 | 73.38 |
|        bottle       | 43.33 | 70.52 |
|        buffet       | 48.85 | 55.07 |
|        poster       | 38.05 | 51.14 |
|        stage        | 23.29 | 33.79 |
|         van         | 50.53 | 71.98 |
|         ship        | 79.82 | 97.81 |
|       fountain      | 44.43 | 45.31 |
|    conveyer belt    | 77.95 | 91.36 |
|        canopy       | 50.76 | 74.09 |
|        washer       |  86.2 | 92.04 |
|      plaything      | 40.72 | 57.07 |
|    swimming pool    | 57.95 | 77.45 |
|        stool        |  50.6 | 68.74 |
|        barrel       | 62.24 | 86.31 |
|        basket       | 45.27 | 60.82 |
|      waterfall      | 50.49 | 55.77 |
|         tent        | 92.91 | 98.87 |
|         bag         | 28.57 | 31.68 |
|       minibike      | 75.33 | 90.51 |
|        cradle       | 88.07 | 97.57 |
|         oven        | 68.23 |  81.3 |
|         ball        | 51.21 | 53.98 |
|         food        | 58.06 | 66.47 |
|         step        |  14.8 |  16.3 |
|         tank        | 76.67 |  83.0 |
|      trade name     |  24.7 | 29.75 |
|      microwave      | 90.11 | 96.31 |
|         pot         | 58.58 | 67.69 |
|        animal       | 60.58 | 62.93 |
|       bicycle       | 62.29 | 79.06 |
|         lake        | 50.61 | 70.87 |
|      dishwasher     | 73.13 | 80.19 |
|        screen       | 66.46 | 82.63 |
|       blanket       | 30.58 |  36.4 |
|      sculpture      | 75.54 | 87.47 |
|         hood        | 62.77 |  74.9 |
|        sconce       | 58.61 | 70.62 |
|         vase        | 49.33 | 66.25 |
|    traffic light    |  43.2 | 60.79 |
|         tray        | 16.97 | 29.93 |
|        ashcan       |  53.6 | 68.54 |
|         fan         | 68.03 |  82.2 |
|         pier        | 39.54 | 42.96 |
|      crt screen     |  7.06 | 22.45 |
|        plate        | 60.97 | 81.42 |
|       monitor       | 12.39 | 13.79 |
|    bulletin board   |  56.1 | 67.39 |
|        shower       |  2.48 | 12.67 |
|       radiator      | 64.33 | 78.63 |
|        glass        | 22.73 | 25.78 |
|        clock        | 50.61 | 61.27 |
|         flag        | 66.48 | 76.66 |
+---------------------+-------+-------+
11/13 04:30:17 - mmengine - INFO - Iter(test) [2000/2000]    aAcc: 86.1000  mIoU: 57.8400  mAcc: 70.3700  data_time: 0.0137  time: 0.6659
Runtime: 1935

============================= JOB FEEDBACK =============================

NodeName=uc2n906
Job ID: 24668167
Array Job ID: 24668167_5
Cluster: uc2
User/Group: ma_dschader/ma_ma
State: COMPLETED (exit code 0)
Nodes: 1
Cores per node: 8
CPU Utilized: 00:28:41
CPU Efficiency: 10.93% of 04:22:24 core-walltime
Job Wall-clock time: 00:32:48
Memory Utilized: 6.32 GB
Memory Efficiency: 63.17% of 10.00 GB
