Started at Wed Nov 13 01:53:37 CET 2024
/pfs/work7/workspace/scratch/ma_dschader-team_project_fss2024/miniconda3/envs/py310/lib/python3.10/site-packages/torch/cuda/__init__.py:155: UserWarning: 
NVIDIA H100 PCIe with CUDA capability sm_90 is not compatible with the current PyTorch installation.
The current PyTorch install supports CUDA capabilities sm_37 sm_50 sm_60 sm_61 sm_70 sm_75 sm_80 sm_86 compute_37.
If you want to use the NVIDIA H100 PCIe GPU with PyTorch, please check the instructions at https://pytorch.org/get-started/locally/

  warnings.warn(incompatible_device_warn.format(device_name, capability, " ".join(arch_list), device_name))
11/13 01:53:41 - mmengine - INFO - 
------------------------------------------------------------
System environment:
    sys.platform: linux
    Python: 3.10.13 | packaged by conda-forge | (main, Dec 23 2023, 15:36:39) [GCC 12.3.0]
    CUDA available: True
    MUSA available: False
    numpy_random_seed: 155447408
    GPU 0: NVIDIA H100 PCIe
    CUDA_HOME: None
    GCC: gcc (GCC) 8.5.0 20210514 (Red Hat 8.5.0-18)
    PyTorch: 1.13.1
    PyTorch compiling details: PyTorch built with:
  - GCC 9.3
  - C++ Version: 201402
  - Intel(R) oneAPI Math Kernel Library Version 2023.1-Product Build 20230303 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v2.6.0 (Git Hash 52b5f107dd9cf10910aaa19cb47f3abf9b349815)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - LAPACK is enabled (usually provided by MKL)
  - NNPACK is enabled
  - CPU capability usage: AVX2
  - CUDA Runtime 11.7
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_61,code=sm_61;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86;-gencode;arch=compute_37,code=compute_37
  - CuDNN 8.5
  - Magma 2.6.1
  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.7, CUDNN_VERSION=8.5.0, CXX_COMPILER=/opt/rh/devtoolset-9/root/usr/bin/c++, CXX_FLAGS= -fabi-version=11 -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -DEDGE_PROFILER_USE_KINETO -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Werror=non-virtual-dtor -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wunused-local-typedefs -Wno-unused-parameter -Wno-unused-function -Wno-unused-result -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Werror=cast-function-type -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.13.1, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, USE_ROCM=OFF, 

    TorchVision: 0.14.1
    OpenCV: 3.4.18
    MMEngine: 0.10.4

Runtime environment:
    cudnn_benchmark: True
    mp_cfg: {'mp_start_method': 'fork', 'opencv_num_threads': 0}
    dist_cfg: {'backend': 'nccl'}
    seed: 155447408
    Distributed launcher: none
    Distributed training: False
    GPU number: 1
------------------------------------------------------------

11/13 01:53:42 - mmengine - INFO - Config:
auto_scale_lr = dict(base_batch_size=16, enable=False)
crop_size = (
    512,
    512,
)
custom_imports = dict(allow_failed_imports=False, imports='mmdet.models')
data_preprocessor = dict(
    bgr_to_rgb=True,
    corruption=None,
    enable_normalization=False,
    mean=[
        123.675,
        116.28,
        103.53,
    ],
    pad_val=0,
    seg_pad_val=255,
    size=(
        512,
        512,
    ),
    std=[
        58.395,
        57.12,
        57.375,
    ],
    test_cfg=dict(size_divisor=32),
    type='SegDataPreProcessor')
data_root = 'data/ade/ADEChallengeData2016'
dataset_type = 'ADE20KDataset'
default_hooks = dict(
    checkpoint=dict(
        by_epoch=False, interval=5000, save_best='mIoU',
        type='CheckpointHook'),
    logger=dict(interval=50, log_metric_by_epoch=False, type='LoggerHook'),
    param_scheduler=dict(type='ParamSchedulerHook'),
    sampler_seed=dict(type='DistSamplerSeedHook'),
    timer=dict(type='IterTimerHook'),
    visualization=dict(draw=True, type='SegVisualizationHook'))
default_scope = 'mmseg'
embed_multi = dict(decay_mult=0.0, lr_mult=1.0)
env_cfg = dict(
    cudnn_benchmark=True,
    dist_cfg=dict(backend='nccl'),
    mp_cfg=dict(mp_start_method='fork', opencv_num_threads=0))
img_ratios = [
    0.5,
    0.75,
    1.0,
    1.25,
    1.5,
    1.75,
]
launcher = 'none'
load_from = '../checkpoint_files/mask2former/mask2former_r101_8xb2-160k_ade20k-512x512_20221203_233905-b7135890.pth'
log_level = 'INFO'
log_processor = dict(by_epoch=False)
model = dict(
    attack_loss=dict(
        loss_weight=1.0,
        reduction='none',
        type='CrossEntropyLoss',
        use_sigmoid=False),
    backbone=dict(
        deep_stem=False,
        depth=101,
        frozen_stages=-1,
        init_cfg=dict(checkpoint='torchvision://resnet101', type='Pretrained'),
        norm_cfg=dict(requires_grad=False, type='SyncBN'),
        num_stages=4,
        out_indices=(
            0,
            1,
            2,
            3,
        ),
        style='pytorch',
        type='ResNet'),
    data_preprocessor=dict(
        bgr_to_rgb=True,
        corruption=None,
        enable_normalization=False,
        mean=[
            123.675,
            116.28,
            103.53,
        ],
        pad_val=0,
        seg_pad_val=255,
        size=(
            512,
            512,
        ),
        std=[
            58.395,
            57.12,
            57.375,
        ],
        test_cfg=dict(size_divisor=32),
        type='SegDataPreProcessor'),
    decode_head=dict(
        align_corners=False,
        enforce_decoder_input_project=False,
        feat_channels=256,
        in_channels=[
            256,
            512,
            1024,
            2048,
        ],
        loss_cls=dict(
            class_weight=[
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                0.1,
            ],
            loss_weight=2.0,
            reduction='none',
            type='mmdet.CrossEntropyLoss',
            use_sigmoid=False),
        loss_dice=dict(
            activate=True,
            eps=1.0,
            loss_weight=5.0,
            naive_dice=True,
            reduction='none',
            type='mmdet.DiceLoss',
            use_sigmoid=True),
        loss_mask=dict(
            loss_weight=5.0,
            reduction='none',
            type='mmdet.CrossEntropyLoss',
            use_sigmoid=True),
        num_classes=150,
        num_queries=100,
        num_transformer_feat_level=3,
        out_channels=256,
        pixel_decoder=dict(
            act_cfg=dict(type='ReLU'),
            encoder=dict(
                init_cfg=None,
                layer_cfg=dict(
                    ffn_cfg=dict(
                        act_cfg=dict(inplace=True, type='ReLU'),
                        embed_dims=256,
                        feedforward_channels=1024,
                        ffn_drop=0.0,
                        num_fcs=2),
                    self_attn_cfg=dict(
                        batch_first=True,
                        dropout=0.0,
                        embed_dims=256,
                        im2col_step=64,
                        init_cfg=None,
                        norm_cfg=None,
                        num_heads=8,
                        num_levels=3,
                        num_points=4)),
                num_layers=6),
            init_cfg=None,
            norm_cfg=dict(num_groups=32, type='GN'),
            num_outs=3,
            positional_encoding=dict(normalize=True, num_feats=128),
            type='mmdet.MSDeformAttnPixelDecoder'),
        positional_encoding=dict(normalize=True, num_feats=128),
        strides=[
            4,
            8,
            16,
            32,
        ],
        train_cfg=dict(
            assigner=dict(
                match_costs=[
                    dict(type='mmdet.ClassificationCost', weight=2.0),
                    dict(
                        type='mmdet.CrossEntropyLossCost',
                        use_sigmoid=True,
                        weight=5.0),
                    dict(
                        eps=1.0,
                        pred_act=True,
                        type='mmdet.DiceCost',
                        weight=5.0),
                ],
                type='mmdet.HungarianAssigner'),
            importance_sample_ratio=0.75,
            num_points=12544,
            oversample_ratio=3.0,
            sampler=dict(type='mmdet.MaskPseudoSampler')),
        transformer_decoder=dict(
            init_cfg=None,
            layer_cfg=dict(
                cross_attn_cfg=dict(
                    attn_drop=0.0,
                    batch_first=True,
                    dropout_layer=None,
                    embed_dims=256,
                    num_heads=8,
                    proj_drop=0.0),
                ffn_cfg=dict(
                    act_cfg=dict(inplace=True, type='ReLU'),
                    add_identity=True,
                    dropout_layer=None,
                    embed_dims=256,
                    feedforward_channels=2048,
                    ffn_drop=0.0,
                    num_fcs=2),
                self_attn_cfg=dict(
                    attn_drop=0.0,
                    batch_first=True,
                    dropout_layer=None,
                    embed_dims=256,
                    num_heads=8,
                    proj_drop=0.0)),
            num_layers=9,
            return_intermediate=True),
        type='Mask2FormerHead'),
    enable_normalization=False,
    normalize_mean_std=dict(
        mean=[
            123.675,
            116.28,
            103.53,
        ], std=[
            58.395,
            57.12,
            57.375,
        ]),
    perform_attack=False,
    test_cfg=dict(mode='whole'),
    train_cfg=dict(),
    type='EncoderDecoder')
num_classes = 150
optim_wrapper = dict(
    clip_grad=dict(max_norm=0.01, norm_type=2),
    optimizer=dict(
        betas=(
            0.9,
            0.999,
        ),
        eps=1e-08,
        lr=0.0001,
        type='AdamW',
        weight_decay=0.05),
    paramwise_cfg=dict(
        custom_keys=dict(
            backbone=dict(decay_mult=1.0, lr_mult=0.1),
            level_embed=dict(decay_mult=0.0, lr_mult=1.0),
            query_embed=dict(decay_mult=0.0, lr_mult=1.0),
            query_feat=dict(decay_mult=0.0, lr_mult=1.0)),
        norm_decay_mult=0.0),
    type='OptimWrapper')
optimizer = dict(
    betas=(
        0.9,
        0.999,
    ),
    eps=1e-08,
    lr=0.0001,
    type='AdamW',
    weight_decay=0.05)
param_scheduler = [
    dict(
        begin=0,
        by_epoch=False,
        end=160000,
        eta_min=0,
        power=0.9,
        type='PolyLR'),
]
resume = False
test_cfg = dict(type='TestLoop')
test_dataloader = dict(
    batch_size=1,
    dataset=dict(
        data_prefix=dict(
            img_path='images/validation',
            seg_map_path='annotations/validation'),
        data_root='data/ade/ADEChallengeData2016',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(keep_ratio=True, scale=(
                2048,
                512,
            ), type='Resize'),
            dict(reduce_zero_label=True, type='LoadAnnotations'),
            dict(type='PackSegInputs'),
        ],
        type='ADE20KDataset'),
    num_workers=4,
    persistent_workers=True,
    sampler=dict(shuffle=False, type='DefaultSampler'))
test_evaluator = dict(
    iou_metrics=[
        'mIoU',
    ], type='IoUMetric')
test_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(keep_ratio=True, scale=(
        2048,
        512,
    ), type='Resize'),
    dict(reduce_zero_label=True, type='LoadAnnotations'),
    dict(type='PackSegInputs'),
]
train_cfg = dict(
    max_iters=160000, type='IterBasedTrainLoop', val_interval=5000)
train_dataloader = dict(
    batch_size=2,
    dataset=dict(
        data_prefix=dict(
            img_path='images/training', seg_map_path='annotations/training'),
        data_root='data/ade/ADEChallengeData2016',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(reduce_zero_label=True, type='LoadAnnotations'),
            dict(
                max_size=2048,
                resize_type='ResizeShortestEdge',
                scales=[
                    256,
                    307,
                    358,
                    409,
                    460,
                    512,
                    563,
                    614,
                    665,
                    716,
                    768,
                    819,
                    870,
                    921,
                    972,
                    1024,
                ],
                type='RandomChoiceResize'),
            dict(
                cat_max_ratio=0.75, crop_size=(
                    512,
                    512,
                ), type='RandomCrop'),
            dict(prob=0.5, type='RandomFlip'),
            dict(type='PhotoMetricDistortion'),
            dict(type='PackSegInputs'),
        ],
        type='ADE20KDataset'),
    num_workers=4,
    persistent_workers=True,
    sampler=dict(shuffle=True, type='InfiniteSampler'))
train_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(reduce_zero_label=True, type='LoadAnnotations'),
    dict(
        max_size=2048,
        resize_type='ResizeShortestEdge',
        scales=[
            256,
            307,
            358,
            409,
            460,
            512,
            563,
            614,
            665,
            716,
            768,
            819,
            870,
            921,
            972,
            1024,
        ],
        type='RandomChoiceResize'),
    dict(cat_max_ratio=0.75, crop_size=(
        512,
        512,
    ), type='RandomCrop'),
    dict(prob=0.5, type='RandomFlip'),
    dict(type='PhotoMetricDistortion'),
    dict(type='PackSegInputs'),
]
tta_model = dict(type='SegTTAModel')
tta_pipeline = [
    dict(backend_args=None, type='LoadImageFromFile'),
    dict(
        transforms=[
            [
                dict(keep_ratio=True, scale_factor=0.5, type='Resize'),
                dict(keep_ratio=True, scale_factor=0.75, type='Resize'),
                dict(keep_ratio=True, scale_factor=1.0, type='Resize'),
                dict(keep_ratio=True, scale_factor=1.25, type='Resize'),
                dict(keep_ratio=True, scale_factor=1.5, type='Resize'),
                dict(keep_ratio=True, scale_factor=1.75, type='Resize'),
            ],
            [
                dict(direction='horizontal', prob=0.0, type='RandomFlip'),
                dict(direction='horizontal', prob=1.0, type='RandomFlip'),
            ],
            [
                dict(type='LoadAnnotations'),
            ],
            [
                dict(type='PackSegInputs'),
            ],
        ],
        type='TestTimeAug'),
]
val_cfg = dict(type='ValLoop')
val_dataloader = dict(
    batch_size=1,
    dataset=dict(
        data_prefix=dict(
            img_path='images/validation',
            seg_map_path='annotations/validation'),
        data_root='data/ade/ADEChallengeData2016',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(keep_ratio=True, scale=(
                2048,
                512,
            ), type='Resize'),
            dict(reduce_zero_label=True, type='LoadAnnotations'),
            dict(type='PackSegInputs'),
        ],
        type='ADE20KDataset'),
    num_workers=4,
    persistent_workers=True,
    sampler=dict(shuffle=False, type='DefaultSampler'))
val_evaluator = dict(
    iou_metrics=[
        'mIoU',
    ], type='IoUMetric')
vis_backends = [
    dict(type='LocalVisBackend'),
]
visualizer = dict(
    name='visualizer',
    save_dir=
    '../clean_workdir/ade20k/mask2former/mask2former_r101_8xb2-160k_ade20k-512x512/show_dir',
    type='SegLocalVisualizer',
    vis_backends=[
        dict(type='LocalVisBackend'),
    ])
work_dir = '../clean_workdir/ade20k/mask2former/mask2former_r101_8xb2-160k_ade20k-512x512'

/pfs/work7/workspace/scratch/ma_dschader-team_project_fss2024/benchmarking_robustness/semantic_segmentation/mmsegmentation/ops_dcnv3/modules/dcnv3.py:20: UserWarning: Now, we support DCNv4 in InternImage.
  warnings.warn('Now, we support DCNv4 in InternImage.')
Number of parameters:  62928151
11/13 02:04:58 - mmengine - INFO - Distributed training is not used, all SyncBatchNorm (SyncBN) layers in the model will be automatically reverted to BatchNormXd layers if they are used.
11/13 02:04:58 - mmengine - INFO - Hooks will be executed in the following order:
before_run:
(VERY_HIGH   ) RuntimeInfoHook                    
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
before_train:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_train_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(NORMAL      ) DistSamplerSeedHook                
 -------------------- 
before_train_iter:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_train_iter:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(NORMAL      ) SegVisualizationHook               
(BELOW_NORMAL) LoggerHook                         
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
after_train_epoch:
(NORMAL      ) IterTimerHook                      
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_val:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
before_val_epoch:
(NORMAL      ) IterTimerHook                      
 -------------------- 
before_val_iter:
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_val_iter:
(NORMAL      ) IterTimerHook                      
(NORMAL      ) SegVisualizationHook               
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_val_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
after_val:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
after_train:
(VERY_HIGH   ) RuntimeInfoHook                    
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_test:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
before_test_epoch:
(NORMAL      ) IterTimerHook                      
 -------------------- 
before_test_iter:
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_test_iter:
(NORMAL      ) IterTimerHook                      
(NORMAL      ) SegVisualizationHook               
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_test_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_test:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
after_run:
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
11/13 02:04:58 - mmengine - WARNING - The prefix is not set in metric class IoUMetric.
Loads checkpoint by local backend from path: ../checkpoint_files/mask2former/mask2former_r101_8xb2-160k_ade20k-512x512_20221203_233905-b7135890.pth
11/13 02:05:00 - mmengine - INFO - Load checkpoint from ../checkpoint_files/mask2former/mask2former_r101_8xb2-160k_ade20k-512x512_20221203_233905-b7135890.pth
11/13 02:13:03 - mmengine - INFO - Iter(test) [  50/2000]    eta: 5:12:44  time: 0.8935  data_time: 0.0016  memory: 33615  
11/13 02:13:22 - mmengine - INFO - Iter(test) [ 100/2000]    eta: 2:38:16  time: 0.5022  data_time: 0.0017  memory: 33581  
11/13 02:13:26 - mmengine - INFO - Iter(test) [ 150/2000]    eta: 1:43:46  time: 0.0489  data_time: 0.0015  memory: 948  
11/13 02:13:41 - mmengine - INFO - Iter(test) [ 200/2000]    eta: 1:18:05  time: 0.0493  data_time: 0.0015  memory: 34192  
11/13 02:13:56 - mmengine - INFO - Iter(test) [ 250/2000]    eta: 1:02:28  time: 0.0500  data_time: 0.0015  memory: 34199  
11/13 02:14:03 - mmengine - INFO - Iter(test) [ 300/2000]    eta: 0:51:12  time: 0.0495  data_time: 0.0016  memory: 33595  
11/13 02:14:15 - mmengine - INFO - Iter(test) [ 350/2000]    eta: 0:43:33  time: 0.0492  data_time: 0.0017  memory: 33610  
11/13 02:14:22 - mmengine - INFO - Iter(test) [ 400/2000]    eta: 0:37:23  time: 0.0501  data_time: 0.0016  memory: 33545  
11/13 02:14:24 - mmengine - INFO - Iter(test) [ 450/2000]    eta: 0:32:21  time: 0.0481  data_time: 0.0014  memory: 955  
11/13 02:14:28 - mmengine - INFO - Iter(test) [ 500/2000]    eta: 0:28:18  time: 0.0484  data_time: 0.0014  memory: 948  
11/13 02:14:31 - mmengine - INFO - Iter(test) [ 550/2000]    eta: 0:25:02  time: 0.0497  data_time: 0.0016  memory: 1060  
11/13 02:14:34 - mmengine - INFO - Iter(test) [ 600/2000]    eta: 0:22:17  time: 0.0494  data_time: 0.0016  memory: 1058  
11/13 02:14:41 - mmengine - INFO - Iter(test) [ 650/2000]    eta: 0:20:04  time: 0.4325  data_time: 0.0013  memory: 33623  
11/13 02:14:49 - mmengine - INFO - Iter(test) [ 700/2000]    eta: 0:18:09  time: 0.0497  data_time: 0.0016  memory: 33603  
11/13 02:14:51 - mmengine - INFO - Iter(test) [ 750/2000]    eta: 0:16:24  time: 0.0476  data_time: 0.0013  memory: 1118  
11/13 02:14:55 - mmengine - INFO - Iter(test) [ 800/2000]    eta: 0:14:49  time: 0.0503  data_time: 0.0016  memory: 948  
11/13 02:14:59 - mmengine - INFO - Iter(test) [ 850/2000]    eta: 0:13:28  time: 0.0513  data_time: 0.0018  memory: 920  
11/13 02:15:02 - mmengine - INFO - Iter(test) [ 900/2000]    eta: 0:12:14  time: 0.0485  data_time: 0.0015  memory: 1003  
11/13 02:15:06 - mmengine - INFO - Iter(test) [ 950/2000]    eta: 0:11:07  time: 0.0502  data_time: 0.0016  memory: 1032  
11/13 02:15:08 - mmengine - INFO - Iter(test) [1000/2000]    eta: 0:10:07  time: 0.0484  data_time: 0.0014  memory: 1032  
11/13 02:15:15 - mmengine - INFO - Iter(test) [1050/2000]    eta: 0:09:15  time: 0.0506  data_time: 0.0015  memory: 33563  
11/13 02:15:19 - mmengine - INFO - Iter(test) [1100/2000]    eta: 0:08:24  time: 0.0533  data_time: 0.0051  memory: 1032  
11/13 02:15:23 - mmengine - INFO - Iter(test) [1150/2000]    eta: 0:07:39  time: 0.1044  data_time: 0.0015  memory: 1003  
11/13 02:15:27 - mmengine - INFO - Iter(test) [1200/2000]    eta: 0:06:56  time: 0.0503  data_time: 0.0016  memory: 1901  
11/13 02:15:32 - mmengine - INFO - Iter(test) [1250/2000]    eta: 0:06:18  time: 0.0493  data_time: 0.0014  memory: 33586  
11/13 02:15:36 - mmengine - INFO - Iter(test) [1300/2000]    eta: 0:05:41  time: 0.0489  data_time: 0.0016  memory: 948  
11/13 02:15:39 - mmengine - INFO - Iter(test) [1350/2000]    eta: 0:05:07  time: 0.0474  data_time: 0.0014  memory: 948  
11/13 02:15:41 - mmengine - INFO - Iter(test) [1400/2000]    eta: 0:04:34  time: 0.0507  data_time: 0.0016  memory: 1031  
11/13 02:15:44 - mmengine - INFO - Iter(test) [1450/2000]    eta: 0:04:03  time: 0.0496  data_time: 0.0014  memory: 1032  
11/13 02:15:47 - mmengine - INFO - Iter(test) [1500/2000]    eta: 0:03:35  time: 0.0487  data_time: 0.0014  memory: 947  
11/13 02:15:50 - mmengine - INFO - Iter(test) [1550/2000]    eta: 0:03:08  time: 0.0491  data_time: 0.0015  memory: 1032  
11/13 02:15:52 - mmengine - INFO - Iter(test) [1600/2000]    eta: 0:02:42  time: 0.0505  data_time: 0.0016  memory: 920  
11/13 02:15:59 - mmengine - INFO - Iter(test) [1650/2000]    eta: 0:02:19  time: 0.0719  data_time: 0.0015  memory: 33603  
11/13 02:16:02 - mmengine - INFO - Iter(test) [1700/2000]    eta: 0:01:56  time: 0.0496  data_time: 0.0016  memory: 1032  
11/13 02:16:06 - mmengine - INFO - Iter(test) [1750/2000]    eta: 0:01:34  time: 0.0494  data_time: 0.0014  memory: 1059  
11/13 02:16:09 - mmengine - INFO - Iter(test) [1800/2000]    eta: 0:01:14  time: 0.0502  data_time: 0.0017  memory: 948  
11/13 02:16:13 - mmengine - INFO - Iter(test) [1850/2000]    eta: 0:00:54  time: 0.0506  data_time: 0.0018  memory: 864  
11/13 02:16:15 - mmengine - INFO - Iter(test) [1900/2000]    eta: 0:00:35  time: 0.0481  data_time: 0.0014  memory: 1090  
11/13 02:16:19 - mmengine - INFO - Iter(test) [1950/2000]    eta: 0:00:17  time: 0.0496  data_time: 0.0015  memory: 1338  
11/13 02:16:22 - mmengine - INFO - Iter(test) [2000/2000]    eta: 0:00:00  time: 0.0482  data_time: 0.0014  memory: 1116  
11/13 02:16:22 - mmengine - INFO - per class results:
11/13 02:16:22 - mmengine - INFO - 
+---------------------+-------+-------+
|        Class        |  IoU  |  Acc  |
+---------------------+-------+-------+
|         wall        | 77.31 | 87.25 |
|       building      | 81.54 | 91.13 |
|         sky         | 94.35 | 97.35 |
|        floor        | 80.71 | 90.74 |
|         tree        | 73.47 | 86.35 |
|       ceiling       | 82.52 | 90.82 |
|         road        | 84.11 | 92.41 |
|         bed         | 87.05 | 92.78 |
|      windowpane     | 60.55 | 77.34 |
|        grass        | 66.33 | 80.33 |
|       cabinet       | 59.25 | 69.88 |
|       sidewalk      | 66.23 |  74.4 |
|        person       | 82.54 | 90.37 |
|        earth        | 36.35 | 49.94 |
|         door        | 50.06 | 67.51 |
|        table        | 61.94 | 78.09 |
|       mountain      | 62.04 | 76.98 |
|        plant        | 50.88 | 62.18 |
|       curtain       |  70.5 |  82.5 |
|        chair        | 59.46 | 73.47 |
|         car         | 82.93 | 90.78 |
|        water        | 51.99 |  73.5 |
|       painting      |  70.6 | 84.56 |
|         sofa        | 66.85 | 82.91 |
|        shelf        | 41.07 | 64.24 |
|        house        | 38.12 | 51.33 |
|         sea         | 51.08 |  67.9 |
|        mirror       | 60.86 | 72.35 |
|         rug         |  63.6 | 70.65 |
|        field        | 25.57 | 45.42 |
|       armchair      | 46.64 | 64.04 |
|         seat        | 51.58 | 74.88 |
|        fence        | 37.69 | 57.84 |
|         desk        | 49.65 | 67.11 |
|         rock        | 43.42 | 68.89 |
|       wardrobe      | 42.52 | 64.78 |
|         lamp        | 65.74 | 77.47 |
|       bathtub       | 74.95 | 83.75 |
|       railing       | 32.16 | 52.88 |
|       cushion       | 57.74 | 69.17 |
|         base        | 28.05 | 45.46 |
|         box         | 25.72 | 38.98 |
|        column       | 48.18 | 62.75 |
|      signboard      | 33.07 | 52.25 |
|   chest of drawers  |  43.1 | 66.45 |
|       counter       | 28.89 | 36.19 |
|         sand        | 38.57 | 50.38 |
|         sink        | 77.14 | 81.82 |
|      skyscraper     | 46.54 | 60.64 |
|      fireplace      | 71.64 | 85.46 |
|     refrigerator    | 74.89 | 80.47 |
|      grandstand     | 44.33 | 76.38 |
|         path        | 26.77 | 44.21 |
|        stairs       | 30.03 | 42.62 |
|        runway       | 73.09 | 95.59 |
|         case        | 37.81 | 51.27 |
|      pool table     | 87.67 |  97.1 |
|        pillow       | 57.52 | 70.55 |
|     screen door     | 57.29 | 70.75 |
|       stairway      |  37.0 | 44.35 |
|        river        | 14.11 | 27.34 |
|        bridge       | 48.99 | 77.01 |
|       bookcase      | 27.04 |  40.7 |
|        blind        | 31.58 | 36.04 |
|     coffee table    | 65.21 | 81.56 |
|        toilet       | 84.94 | 89.65 |
|        flower       |  35.7 | 51.33 |
|         book        |  49.2 | 67.49 |
|         hill        |  9.01 | 14.36 |
|        bench        | 41.49 | 67.39 |
|      countertop     | 58.78 | 73.91 |
|        stove        | 75.36 | 85.99 |
|         palm        | 56.86 | 80.25 |
|    kitchen island   | 37.15 |  76.8 |
|       computer      | 65.04 | 71.98 |
|     swivel chair    | 46.97 | 65.89 |
|         boat        | 41.67 | 51.47 |
|         bar         | 43.47 | 57.31 |
|    arcade machine   | 40.41 | 45.61 |
|        hovel        | 29.35 | 49.22 |
|         bus         | 82.33 | 92.93 |
|        towel        | 64.34 | 77.63 |
|        light        | 63.44 | 76.63 |
|        truck        |  32.1 | 50.35 |
|        tower        | 47.09 | 77.31 |
|      chandelier     | 69.62 | 83.68 |
|        awning       | 22.17 | 32.62 |
|     streetlight     | 35.54 | 49.17 |
|        booth        | 50.83 | 63.02 |
| television receiver |  67.4 | 76.77 |
|       airplane      | 52.38 | 65.72 |
|      dirt track     |  7.14 | 13.82 |
|       apparel       |  42.6 | 58.91 |
|         pole        |  25.2 | 41.05 |
|         land        |  23.7 | 33.53 |
|      bannister      | 13.33 | 18.76 |
|      escalator      | 21.84 | 23.46 |
|       ottoman       | 49.31 | 67.68 |
|        bottle       |  18.3 | 22.98 |
|        buffet       | 38.94 | 44.54 |
|        poster       | 31.57 | 45.86 |
|        stage        |  7.8  |  15.7 |
|         van         | 40.68 | 59.51 |
|         ship        |  8.27 | 12.87 |
|       fountain      | 18.91 |  22.9 |
|    conveyer belt    | 64.59 |  72.6 |
|        canopy       | 19.07 |  29.5 |
|        washer       | 60.71 | 65.08 |
|      plaything      |  32.8 | 59.14 |
|    swimming pool    | 62.46 | 69.52 |
|        stool        |  44.6 | 61.57 |
|        barrel       | 42.11 | 74.81 |
|        basket       | 41.65 | 52.83 |
|      waterfall      | 61.06 | 80.51 |
|         tent        | 91.21 | 98.53 |
|         bag         | 19.09 | 27.38 |
|       minibike      | 61.52 | 70.29 |
|        cradle       | 88.43 | 97.05 |
|         oven        | 25.43 | 73.28 |
|         ball        | 47.83 | 60.13 |
|         food        | 60.08 | 74.51 |
|         step        | 19.33 | 25.75 |
|         tank        | 49.69 | 52.51 |
|      trade name     | 27.57 | 34.58 |
|      microwave      | 41.34 | 44.47 |
|         pot         | 44.16 | 53.24 |
|        animal       | 65.61 | 69.61 |
|       bicycle       | 53.38 | 76.36 |
|         lake        | 59.88 | 63.26 |
|      dishwasher     | 64.85 | 82.68 |
|        screen       | 48.32 | 66.18 |
|       blanket       | 25.47 | 29.92 |
|      sculpture      | 42.81 | 61.39 |
|         hood        | 73.71 | 81.57 |
|        sconce       | 51.66 | 64.68 |
|         vase        | 34.93 | 54.37 |
|    traffic light    | 33.53 | 62.26 |
|         tray        | 13.73 | 25.42 |
|        ashcan       | 39.47 | 57.37 |
|         fan         | 60.27 |  80.5 |
|         pier        |  26.7 | 41.92 |
|      crt screen     |  5.88 | 10.87 |
|        plate        | 51.54 | 69.24 |
|       monitor       | 51.38 | 69.33 |
|    bulletin board   | 34.77 | 40.16 |
|        shower       |  9.66 | 21.64 |
|       radiator      | 59.89 | 70.43 |
|        glass        | 18.42 | 20.54 |
|        clock        | 47.72 | 58.69 |
|         flag        | 42.01 | 47.71 |
+---------------------+-------+-------+
11/13 02:16:22 - mmengine - INFO - Iter(test) [2000/2000]    aAcc: 82.3800  mIoU: 48.4500  mAcc: 61.9500  data_time: 0.0159  time: 0.3405
Runtime: 1366

============================= JOB FEEDBACK =============================

NodeName=uc2n906
Job ID: 24668867
Array Job ID: 24668155_1
Cluster: uc2
User/Group: ma_dschader/ma_ma
State: COMPLETED (exit code 0)
Nodes: 1
Cores per node: 8
CPU Utilized: 00:20:34
CPU Efficiency: 11.03% of 03:06:32 core-walltime
Job Wall-clock time: 00:23:19
Memory Utilized: 5.34 GB
Memory Efficiency: 53.35% of 10.00 GB
