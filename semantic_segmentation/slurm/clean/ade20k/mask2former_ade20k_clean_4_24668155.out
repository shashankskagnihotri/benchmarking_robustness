Started at Wed Nov 13 02:17:45 CET 2024
/pfs/work7/workspace/scratch/ma_dschader-team_project_fss2024/miniconda3/envs/py310/lib/python3.10/site-packages/torch/cuda/__init__.py:155: UserWarning: 
NVIDIA H100 PCIe with CUDA capability sm_90 is not compatible with the current PyTorch installation.
The current PyTorch install supports CUDA capabilities sm_37 sm_50 sm_60 sm_61 sm_70 sm_75 sm_80 sm_86 compute_37.
If you want to use the NVIDIA H100 PCIe GPU with PyTorch, please check the instructions at https://pytorch.org/get-started/locally/

  warnings.warn(incompatible_device_warn.format(device_name, capability, " ".join(arch_list), device_name))
11/13 02:17:48 - mmengine - INFO - 
------------------------------------------------------------
System environment:
    sys.platform: linux
    Python: 3.10.13 | packaged by conda-forge | (main, Dec 23 2023, 15:36:39) [GCC 12.3.0]
    CUDA available: True
    MUSA available: False
    numpy_random_seed: 1863954432
    GPU 0: NVIDIA H100 PCIe
    CUDA_HOME: None
    GCC: gcc (GCC) 8.5.0 20210514 (Red Hat 8.5.0-18)
    PyTorch: 1.13.1
    PyTorch compiling details: PyTorch built with:
  - GCC 9.3
  - C++ Version: 201402
  - Intel(R) oneAPI Math Kernel Library Version 2023.1-Product Build 20230303 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v2.6.0 (Git Hash 52b5f107dd9cf10910aaa19cb47f3abf9b349815)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - LAPACK is enabled (usually provided by MKL)
  - NNPACK is enabled
  - CPU capability usage: AVX2
  - CUDA Runtime 11.7
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_61,code=sm_61;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86;-gencode;arch=compute_37,code=compute_37
  - CuDNN 8.5
  - Magma 2.6.1
  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.7, CUDNN_VERSION=8.5.0, CXX_COMPILER=/opt/rh/devtoolset-9/root/usr/bin/c++, CXX_FLAGS= -fabi-version=11 -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -DEDGE_PROFILER_USE_KINETO -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Werror=non-virtual-dtor -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wunused-local-typedefs -Wno-unused-parameter -Wno-unused-function -Wno-unused-result -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Werror=cast-function-type -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.13.1, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, USE_ROCM=OFF, 

    TorchVision: 0.14.1
    OpenCV: 3.4.18
    MMEngine: 0.10.4

Runtime environment:
    cudnn_benchmark: True
    mp_cfg: {'mp_start_method': 'fork', 'opencv_num_threads': 0}
    dist_cfg: {'backend': 'nccl'}
    seed: 1863954432
    Distributed launcher: none
    Distributed training: False
    GPU number: 1
------------------------------------------------------------

11/13 02:17:49 - mmengine - INFO - Config:
auto_scale_lr = dict(base_batch_size=16, enable=False)
backbone_embed_multi = dict(decay_mult=0.0, lr_mult=0.1)
backbone_norm_multi = dict(decay_mult=0.0, lr_mult=0.1)
crop_size = (
    640,
    640,
)
custom_keys = dict({
    'absolute_pos_embed':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone':
    dict(decay_mult=1.0, lr_mult=0.1),
    'backbone.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.patch_embed.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.0.blocks.0.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.0.blocks.1.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.0.downsample.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.1.blocks.0.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.1.blocks.1.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.1.downsample.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.0.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.1.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.10.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.11.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.12.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.13.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.14.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.15.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.16.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.17.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.2.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.3.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.4.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.5.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.6.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.7.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.8.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.9.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.downsample.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.3.blocks.0.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.3.blocks.1.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'level_embed':
    dict(decay_mult=0.0, lr_mult=1.0),
    'query_embed':
    dict(decay_mult=0.0, lr_mult=1.0),
    'query_feat':
    dict(decay_mult=0.0, lr_mult=1.0),
    'relative_position_bias_table':
    dict(decay_mult=0.0, lr_mult=0.1)
})
data_preprocessor = dict(
    bgr_to_rgb=True,
    corruption=None,
    enable_normalization=False,
    mean=[
        123.675,
        116.28,
        103.53,
    ],
    pad_val=0,
    seg_pad_val=255,
    size=(
        640,
        640,
    ),
    std=[
        58.395,
        57.12,
        57.375,
    ],
    type='SegDataPreProcessor')
data_root = 'data/ade/ADEChallengeData2016'
dataset_type = 'ADE20KDataset'
default_hooks = dict(
    checkpoint=dict(
        by_epoch=False, interval=5000, save_best='mIoU',
        type='CheckpointHook'),
    logger=dict(interval=50, log_metric_by_epoch=False, type='LoggerHook'),
    param_scheduler=dict(type='ParamSchedulerHook'),
    sampler_seed=dict(type='DistSamplerSeedHook'),
    timer=dict(type='IterTimerHook'),
    visualization=dict(draw=True, type='SegVisualizationHook'))
default_scope = 'mmseg'
depths = [
    2,
    2,
    18,
    2,
]
embed_multi = dict(decay_mult=0.0, lr_mult=1.0)
env_cfg = dict(
    cudnn_benchmark=True,
    dist_cfg=dict(backend='nccl'),
    mp_cfg=dict(mp_start_method='fork', opencv_num_threads=0))
img_ratios = [
    0.5,
    0.75,
    1.0,
    1.25,
    1.5,
    1.75,
]
launcher = 'none'
load_from = '../checkpoint_files/mask2former/mask2former_swin-b-in1k-384x384-pre_8xb2-160k_ade20k-640x640_20221129_125118-a4a086d2.pth'
log_level = 'INFO'
log_processor = dict(by_epoch=False)
model = dict(
    attack_loss=dict(
        loss_weight=1.0,
        reduction='none',
        type='CrossEntropyLoss',
        use_sigmoid=False),
    backbone=dict(
        attn_drop_rate=0.0,
        depths=[
            2,
            2,
            18,
            2,
        ],
        drop_path_rate=0.3,
        drop_rate=0.0,
        embed_dims=128,
        frozen_stages=-1,
        init_cfg=dict(
            checkpoint=
            'https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/swin/swin_base_patch4_window12_384_20220317-55b0104a.pth',
            type='Pretrained'),
        mlp_ratio=4,
        num_heads=[
            4,
            8,
            16,
            32,
        ],
        out_indices=(
            0,
            1,
            2,
            3,
        ),
        patch_norm=True,
        pretrain_img_size=384,
        qk_scale=None,
        qkv_bias=True,
        type='SwinTransformer',
        window_size=12,
        with_cp=False),
    data_preprocessor=dict(
        bgr_to_rgb=True,
        corruption=None,
        enable_normalization=False,
        mean=[
            123.675,
            116.28,
            103.53,
        ],
        pad_val=0,
        seg_pad_val=255,
        size=(
            640,
            640,
        ),
        std=[
            58.395,
            57.12,
            57.375,
        ],
        type='SegDataPreProcessor'),
    decode_head=dict(
        align_corners=False,
        enforce_decoder_input_project=False,
        feat_channels=256,
        in_channels=[
            128,
            256,
            512,
            1024,
        ],
        loss_cls=dict(
            class_weight=[
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                0.1,
            ],
            loss_weight=2.0,
            reduction='none',
            type='mmdet.CrossEntropyLoss',
            use_sigmoid=False),
        loss_dice=dict(
            activate=True,
            eps=1.0,
            loss_weight=5.0,
            naive_dice=True,
            reduction='none',
            type='mmdet.DiceLoss',
            use_sigmoid=True),
        loss_mask=dict(
            loss_weight=5.0,
            reduction='none',
            type='mmdet.CrossEntropyLoss',
            use_sigmoid=True),
        num_classes=150,
        num_queries=100,
        num_transformer_feat_level=3,
        out_channels=256,
        pixel_decoder=dict(
            act_cfg=dict(type='ReLU'),
            encoder=dict(
                init_cfg=None,
                layer_cfg=dict(
                    ffn_cfg=dict(
                        act_cfg=dict(inplace=True, type='ReLU'),
                        embed_dims=256,
                        feedforward_channels=1024,
                        ffn_drop=0.0,
                        num_fcs=2),
                    self_attn_cfg=dict(
                        batch_first=True,
                        dropout=0.0,
                        embed_dims=256,
                        im2col_step=64,
                        init_cfg=None,
                        norm_cfg=None,
                        num_heads=8,
                        num_levels=3,
                        num_points=4)),
                num_layers=6),
            init_cfg=None,
            norm_cfg=dict(num_groups=32, type='GN'),
            num_outs=3,
            positional_encoding=dict(normalize=True, num_feats=128),
            type='mmdet.MSDeformAttnPixelDecoder'),
        positional_encoding=dict(normalize=True, num_feats=128),
        strides=[
            4,
            8,
            16,
            32,
        ],
        train_cfg=dict(
            assigner=dict(
                match_costs=[
                    dict(type='mmdet.ClassificationCost', weight=2.0),
                    dict(
                        type='mmdet.CrossEntropyLossCost',
                        use_sigmoid=True,
                        weight=5.0),
                    dict(
                        eps=1.0,
                        pred_act=True,
                        type='mmdet.DiceCost',
                        weight=5.0),
                ],
                type='mmdet.HungarianAssigner'),
            importance_sample_ratio=0.75,
            num_points=12544,
            oversample_ratio=3.0,
            sampler=dict(type='mmdet.MaskPseudoSampler')),
        transformer_decoder=dict(
            init_cfg=None,
            layer_cfg=dict(
                cross_attn_cfg=dict(
                    attn_drop=0.0,
                    batch_first=True,
                    dropout_layer=None,
                    embed_dims=256,
                    num_heads=8,
                    proj_drop=0.0),
                ffn_cfg=dict(
                    act_cfg=dict(inplace=True, type='ReLU'),
                    add_identity=True,
                    dropout_layer=None,
                    embed_dims=256,
                    feedforward_channels=2048,
                    ffn_drop=0.0,
                    num_fcs=2),
                self_attn_cfg=dict(
                    attn_drop=0.0,
                    batch_first=True,
                    dropout_layer=None,
                    embed_dims=256,
                    num_heads=8,
                    proj_drop=0.0)),
            num_layers=9,
            return_intermediate=True),
        type='Mask2FormerHead'),
    enable_normalization=False,
    normalize_mean_std=dict(
        mean=[
            123.675,
            116.28,
            103.53,
        ], std=[
            58.395,
            57.12,
            57.375,
        ]),
    perform_attack=False,
    test_cfg=dict(mode='whole'),
    train_cfg=dict(),
    type='EncoderDecoder')
num_classes = 150
optim_wrapper = dict(
    clip_grad=dict(max_norm=0.01, norm_type=2),
    optimizer=dict(
        betas=(
            0.9,
            0.999,
        ),
        eps=1e-08,
        lr=0.0001,
        type='AdamW',
        weight_decay=0.05),
    paramwise_cfg=dict(
        custom_keys=dict({
            'absolute_pos_embed':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone':
            dict(decay_mult=1.0, lr_mult=0.1),
            'backbone.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.patch_embed.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.0.blocks.0.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.0.blocks.1.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.0.downsample.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.1.blocks.0.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.1.blocks.1.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.1.downsample.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.0.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.1.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.10.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.11.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.12.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.13.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.14.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.15.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.16.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.17.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.2.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.3.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.4.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.5.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.6.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.7.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.8.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.9.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.downsample.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.3.blocks.0.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.3.blocks.1.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'level_embed':
            dict(decay_mult=0.0, lr_mult=1.0),
            'query_embed':
            dict(decay_mult=0.0, lr_mult=1.0),
            'query_feat':
            dict(decay_mult=0.0, lr_mult=1.0),
            'relative_position_bias_table':
            dict(decay_mult=0.0, lr_mult=0.1)
        }),
        norm_decay_mult=0.0),
    type='OptimWrapper')
optimizer = dict(
    betas=(
        0.9,
        0.999,
    ),
    eps=1e-08,
    lr=0.0001,
    type='AdamW',
    weight_decay=0.05)
param_scheduler = [
    dict(
        begin=0,
        by_epoch=False,
        end=160000,
        eta_min=0,
        power=0.9,
        type='PolyLR'),
]
pretrained = 'https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/swin/swin_base_patch4_window12_384_20220317-55b0104a.pth'
resume = False
test_cfg = dict(type='TestLoop')
test_dataloader = dict(
    batch_size=1,
    dataset=dict(
        data_prefix=dict(
            img_path='images/validation',
            seg_map_path='annotations/validation'),
        data_root='data/ade/ADEChallengeData2016',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(keep_ratio=True, scale=(
                2560,
                640,
            ), type='Resize'),
            dict(reduce_zero_label=True, type='LoadAnnotations'),
            dict(type='PackSegInputs'),
        ],
        type='ADE20KDataset'),
    num_workers=4,
    persistent_workers=True,
    sampler=dict(shuffle=False, type='DefaultSampler'))
test_evaluator = dict(
    iou_metrics=[
        'mIoU',
    ], type='IoUMetric')
test_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(keep_ratio=True, scale=(
        2560,
        640,
    ), type='Resize'),
    dict(reduce_zero_label=True, type='LoadAnnotations'),
    dict(type='PackSegInputs'),
]
train_cfg = dict(
    max_iters=160000, type='IterBasedTrainLoop', val_interval=5000)
train_dataloader = dict(
    batch_size=2,
    dataset=dict(
        data_prefix=dict(
            img_path='images/training', seg_map_path='annotations/training'),
        data_root='data/ade/ADEChallengeData2016',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(reduce_zero_label=True, type='LoadAnnotations'),
            dict(
                max_size=2560,
                resize_type='ResizeShortestEdge',
                scales=[
                    320,
                    384,
                    448,
                    512,
                    576,
                    640,
                    704,
                    768,
                    832,
                    896,
                    960,
                    1024,
                    1088,
                    1152,
                    1216,
                    1280,
                ],
                type='RandomChoiceResize'),
            dict(
                cat_max_ratio=0.75, crop_size=(
                    640,
                    640,
                ), type='RandomCrop'),
            dict(prob=0.5, type='RandomFlip'),
            dict(type='PhotoMetricDistortion'),
            dict(type='PackSegInputs'),
        ],
        type='ADE20KDataset'),
    num_workers=4,
    persistent_workers=True,
    sampler=dict(shuffle=True, type='InfiniteSampler'))
train_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(reduce_zero_label=True, type='LoadAnnotations'),
    dict(
        max_size=2560,
        resize_type='ResizeShortestEdge',
        scales=[
            320,
            384,
            448,
            512,
            576,
            640,
            704,
            768,
            832,
            896,
            960,
            1024,
            1088,
            1152,
            1216,
            1280,
        ],
        type='RandomChoiceResize'),
    dict(cat_max_ratio=0.75, crop_size=(
        640,
        640,
    ), type='RandomCrop'),
    dict(prob=0.5, type='RandomFlip'),
    dict(type='PhotoMetricDistortion'),
    dict(type='PackSegInputs'),
]
tta_model = dict(type='SegTTAModel')
tta_pipeline = [
    dict(backend_args=None, type='LoadImageFromFile'),
    dict(
        transforms=[
            [
                dict(keep_ratio=True, scale_factor=0.5, type='Resize'),
                dict(keep_ratio=True, scale_factor=0.75, type='Resize'),
                dict(keep_ratio=True, scale_factor=1.0, type='Resize'),
                dict(keep_ratio=True, scale_factor=1.25, type='Resize'),
                dict(keep_ratio=True, scale_factor=1.5, type='Resize'),
                dict(keep_ratio=True, scale_factor=1.75, type='Resize'),
            ],
            [
                dict(direction='horizontal', prob=0.0, type='RandomFlip'),
                dict(direction='horizontal', prob=1.0, type='RandomFlip'),
            ],
            [
                dict(type='LoadAnnotations'),
            ],
            [
                dict(type='PackSegInputs'),
            ],
        ],
        type='TestTimeAug'),
]
val_cfg = dict(type='ValLoop')
val_dataloader = dict(
    batch_size=1,
    dataset=dict(
        data_prefix=dict(
            img_path='images/validation',
            seg_map_path='annotations/validation'),
        data_root='data/ade/ADEChallengeData2016',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(keep_ratio=True, scale=(
                2560,
                640,
            ), type='Resize'),
            dict(reduce_zero_label=True, type='LoadAnnotations'),
            dict(type='PackSegInputs'),
        ],
        type='ADE20KDataset'),
    num_workers=4,
    persistent_workers=True,
    sampler=dict(shuffle=False, type='DefaultSampler'))
val_evaluator = dict(
    iou_metrics=[
        'mIoU',
    ], type='IoUMetric')
vis_backends = [
    dict(type='LocalVisBackend'),
]
visualizer = dict(
    name='visualizer',
    save_dir=
    '../clean_workdir/ade20k/mask2former/mask2former_swin-b-in1k-384x384-pre_8xb2-160k_ade20k-640x640/show_dir',
    type='SegLocalVisualizer',
    vis_backends=[
        dict(type='LocalVisBackend'),
    ])
work_dir = '../clean_workdir/ade20k/mask2former/mask2former_swin-b-in1k-384x384-pre_8xb2-160k_ade20k-640x640'

/pfs/work7/workspace/scratch/ma_dschader-team_project_fss2024/benchmarking_robustness/semantic_segmentation/mmsegmentation/ops_dcnv3/modules/dcnv3.py:20: UserWarning: Now, we support DCNv4 in InternImage.
  warnings.warn('Now, we support DCNv4 in InternImage.')
Number of parameters:  106922191
11/13 02:29:10 - mmengine - INFO - Distributed training is not used, all SyncBatchNorm (SyncBN) layers in the model will be automatically reverted to BatchNormXd layers if they are used.
11/13 02:29:10 - mmengine - INFO - Hooks will be executed in the following order:
before_run:
(VERY_HIGH   ) RuntimeInfoHook                    
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
before_train:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_train_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(NORMAL      ) DistSamplerSeedHook                
 -------------------- 
before_train_iter:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_train_iter:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(NORMAL      ) SegVisualizationHook               
(BELOW_NORMAL) LoggerHook                         
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
after_train_epoch:
(NORMAL      ) IterTimerHook                      
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_val:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
before_val_epoch:
(NORMAL      ) IterTimerHook                      
 -------------------- 
before_val_iter:
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_val_iter:
(NORMAL      ) IterTimerHook                      
(NORMAL      ) SegVisualizationHook               
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_val_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
after_val:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
after_train:
(VERY_HIGH   ) RuntimeInfoHook                    
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_test:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
before_test_epoch:
(NORMAL      ) IterTimerHook                      
 -------------------- 
before_test_iter:
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_test_iter:
(NORMAL      ) IterTimerHook                      
(NORMAL      ) SegVisualizationHook               
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_test_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_test:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
after_run:
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
11/13 02:29:11 - mmengine - WARNING - The prefix is not set in metric class IoUMetric.
Loads checkpoint by local backend from path: ../checkpoint_files/mask2former/mask2former_swin-b-in1k-384x384-pre_8xb2-160k_ade20k-640x640_20221129_125118-a4a086d2.pth
11/13 02:29:14 - mmengine - INFO - Load checkpoint from ../checkpoint_files/mask2former/mask2former_swin-b-in1k-384x384-pre_8xb2-160k_ade20k-640x640_20221129_125118-a4a086d2.pth
11/13 02:40:15 - mmengine - INFO - Iter(test) [  50/2000]    eta: 7:07:55  time: 0.4250  data_time: 0.0018  memory: 33814  
11/13 02:40:36 - mmengine - INFO - Iter(test) [ 100/2000]    eta: 3:35:33  time: 0.4299  data_time: 0.0020  memory: 33809  
11/13 02:40:52 - mmengine - INFO - Iter(test) [ 150/2000]    eta: 2:23:13  time: 0.3101  data_time: 0.0018  memory: 33813  
11/13 02:41:07 - mmengine - INFO - Iter(test) [ 200/2000]    eta: 1:46:50  time: 0.4345  data_time: 0.0017  memory: 33818  
11/13 02:41:24 - mmengine - INFO - Iter(test) [ 250/2000]    eta: 1:25:00  time: 0.1919  data_time: 0.0018  memory: 33805  
11/13 02:41:38 - mmengine - INFO - Iter(test) [ 300/2000]    eta: 1:10:08  time: 0.0899  data_time: 0.0018  memory: 33799  
11/13 02:41:53 - mmengine - INFO - Iter(test) [ 350/2000]    eta: 0:59:36  time: 0.3636  data_time: 0.0016  memory: 33796  
11/13 02:42:03 - mmengine - INFO - Iter(test) [ 400/2000]    eta: 0:51:12  time: 0.1119  data_time: 0.0015  memory: 33772  
11/13 02:42:10 - mmengine - INFO - Iter(test) [ 450/2000]    eta: 0:44:30  time: 0.1914  data_time: 0.0017  memory: 33810  
11/13 02:42:19 - mmengine - INFO - Iter(test) [ 500/2000]    eta: 0:39:10  time: 0.1882  data_time: 0.0017  memory: 33813  
11/13 02:42:28 - mmengine - INFO - Iter(test) [ 550/2000]    eta: 0:34:49  time: 0.3056  data_time: 0.0017  memory: 33820  
11/13 02:42:33 - mmengine - INFO - Iter(test) [ 600/2000]    eta: 0:31:01  time: 0.0890  data_time: 0.0017  memory: 3946  
11/13 02:42:42 - mmengine - INFO - Iter(test) [ 650/2000]    eta: 0:27:55  time: 0.2388  data_time: 0.0016  memory: 33815  
11/13 02:42:56 - mmengine - INFO - Iter(test) [ 700/2000]    eta: 0:25:22  time: 0.1334  data_time: 0.0018  memory: 33817  
11/13 02:43:08 - mmengine - INFO - Iter(test) [ 750/2000]    eta: 0:23:07  time: 0.6790  data_time: 0.0053  memory: 33818  
11/13 02:43:15 - mmengine - INFO - Iter(test) [ 800/2000]    eta: 0:20:59  time: 0.0870  data_time: 0.0018  memory: 33814  
11/13 02:43:21 - mmengine - INFO - Iter(test) [ 850/2000]    eta: 0:19:03  time: 0.1377  data_time: 0.0018  memory: 1436  
11/13 02:43:31 - mmengine - INFO - Iter(test) [ 900/2000]    eta: 0:17:26  time: 0.2217  data_time: 0.0015  memory: 33797  
11/13 02:43:43 - mmengine - INFO - Iter(test) [ 950/2000]    eta: 0:15:57  time: 0.2906  data_time: 0.0016  memory: 33790  
11/13 02:43:48 - mmengine - INFO - Iter(test) [1000/2000]    eta: 0:14:33  time: 0.0848  data_time: 0.0016  memory: 33730  
11/13 02:43:55 - mmengine - INFO - Iter(test) [1050/2000]    eta: 0:13:16  time: 0.2216  data_time: 0.0016  memory: 33792  
11/13 02:44:04 - mmengine - INFO - Iter(test) [1100/2000]    eta: 0:12:06  time: 0.0866  data_time: 0.0016  memory: 33811  
11/13 02:44:11 - mmengine - INFO - Iter(test) [1150/2000]    eta: 0:11:01  time: 0.0871  data_time: 0.0017  memory: 33765  
11/13 02:44:20 - mmengine - INFO - Iter(test) [1200/2000]    eta: 0:10:02  time: 0.1392  data_time: 0.0016  memory: 33757  
11/13 02:44:28 - mmengine - INFO - Iter(test) [1250/2000]    eta: 0:09:07  time: 0.1313  data_time: 0.0015  memory: 33815  
11/13 02:44:33 - mmengine - INFO - Iter(test) [1300/2000]    eta: 0:08:13  time: 0.0870  data_time: 0.0015  memory: 1437  
11/13 02:44:40 - mmengine - INFO - Iter(test) [1350/2000]    eta: 0:07:25  time: 0.0821  data_time: 0.0016  memory: 33752  
11/13 02:44:51 - mmengine - INFO - Iter(test) [1400/2000]    eta: 0:06:41  time: 0.0980  data_time: 0.0015  memory: 33821  
11/13 02:44:56 - mmengine - INFO - Iter(test) [1450/2000]    eta: 0:05:56  time: 0.1275  data_time: 0.0016  memory: 33784  
11/13 02:45:01 - mmengine - INFO - Iter(test) [1500/2000]    eta: 0:05:15  time: 0.0828  data_time: 0.0015  memory: 33775  
11/13 02:45:07 - mmengine - INFO - Iter(test) [1550/2000]    eta: 0:04:36  time: 0.0886  data_time: 0.0016  memory: 33819  
11/13 02:45:11 - mmengine - INFO - Iter(test) [1600/2000]    eta: 0:03:59  time: 0.0861  data_time: 0.0018  memory: 1432  
11/13 02:45:19 - mmengine - INFO - Iter(test) [1650/2000]    eta: 0:03:24  time: 0.0818  data_time: 0.0015  memory: 33809  
11/13 02:45:29 - mmengine - INFO - Iter(test) [1700/2000]    eta: 0:02:51  time: 0.1061  data_time: 0.0018  memory: 33815  
11/13 02:45:36 - mmengine - INFO - Iter(test) [1750/2000]    eta: 0:02:20  time: 0.0903  data_time: 0.0061  memory: 33754  
11/13 02:45:42 - mmengine - INFO - Iter(test) [1800/2000]    eta: 0:01:49  time: 0.0881  data_time: 0.0019  memory: 33758  
11/13 02:45:48 - mmengine - INFO - Iter(test) [1850/2000]    eta: 0:01:20  time: 0.0876  data_time: 0.0018  memory: 1324  
11/13 02:45:54 - mmengine - INFO - Iter(test) [1900/2000]    eta: 0:00:52  time: 0.1635  data_time: 0.0015  memory: 33810  
11/13 02:46:01 - mmengine - INFO - Iter(test) [1950/2000]    eta: 0:00:25  time: 0.0854  data_time: 0.0016  memory: 33770  
11/13 02:46:09 - mmengine - INFO - Iter(test) [2000/2000]    eta: 0:00:00  time: 0.0822  data_time: 0.0015  memory: 33786  
11/13 02:46:09 - mmengine - INFO - per class results:
11/13 02:46:09 - mmengine - INFO - 
+---------------------+-------+-------+
|        Class        |  IoU  |  Acc  |
+---------------------+-------+-------+
|         wall        | 78.29 | 86.06 |
|       building      |  82.2 | 92.14 |
|         sky         | 94.17 | 97.61 |
|        floor        | 83.46 |  89.6 |
|         tree        | 75.28 | 85.85 |
|       ceiling       | 85.07 | 91.53 |
|         road        | 84.27 | 91.51 |
|         bed         | 89.44 | 95.82 |
|      windowpane     | 61.39 | 78.92 |
|        grass        | 70.79 | 84.06 |
|       cabinet       | 59.39 | 75.05 |
|       sidewalk      | 67.52 | 79.52 |
|        person       | 83.05 | 91.31 |
|        earth        | 40.96 | 56.47 |
|         door        | 49.13 | 65.78 |
|        table        | 64.46 | 76.66 |
|       mountain      | 59.69 | 76.38 |
|        plant        | 52.64 | 65.02 |
|       curtain       | 76.74 |  86.3 |
|        chair        | 60.42 | 72.96 |
|         car         | 86.42 | 93.14 |
|        water        | 58.37 | 71.41 |
|       painting      | 70.69 | 88.61 |
|         sofa        | 68.31 | 87.87 |
|        shelf        | 41.36 | 60.83 |
|        house        | 48.84 |  72.7 |
|         sea         | 61.76 | 83.52 |
|        mirror       | 65.65 | 82.42 |
|         rug         | 74.48 |  87.5 |
|        field        |  28.4 | 45.79 |
|       armchair      | 41.36 | 57.17 |
|         seat        | 59.97 | 82.18 |
|        fence        | 47.47 | 62.76 |
|         desk        | 51.39 |  73.2 |
|         rock        | 44.44 | 67.02 |
|       wardrobe      |  55.6 | 67.95 |
|         lamp        | 67.51 | 78.98 |
|       bathtub       |  76.7 |  85.3 |
|       railing       | 38.12 | 56.61 |
|       cushion       | 57.73 | 66.24 |
|         base        | 39.82 | 72.61 |
|         box         | 26.43 | 35.12 |
|        column       | 44.96 | 56.72 |
|      signboard      | 39.23 | 58.02 |
|   chest of drawers  | 42.22 | 64.23 |
|       counter       | 38.55 | 48.47 |
|         sand        | 42.23 | 63.98 |
|         sink        | 74.11 | 83.02 |
|      skyscraper     | 46.22 | 56.83 |
|      fireplace      | 65.45 | 80.68 |
|     refrigerator    | 72.46 | 81.08 |
|      grandstand     | 46.34 | 69.35 |
|         path        | 22.01 | 33.67 |
|        stairs       | 35.01 | 46.95 |
|        runway       | 64.26 | 80.58 |
|         case        | 57.36 |  77.5 |
|      pool table     |  93.5 | 96.45 |
|        pillow       | 61.37 | 79.85 |
|     screen door     | 61.29 | 70.23 |
|       stairway      | 33.54 | 53.04 |
|        river        | 10.63 |  25.0 |
|        bridge       |  72.6 |  84.7 |
|       bookcase      | 29.93 | 58.44 |
|        blind        | 43.65 | 49.17 |
|     coffee table    | 65.41 | 83.74 |
|        toilet       | 87.98 | 93.08 |
|        flower       | 46.41 |  60.6 |
|         book        | 48.91 | 69.76 |
|         hill        |  5.9  |  9.94 |
|        bench        | 39.44 | 56.55 |
|      countertop     | 62.04 | 78.03 |
|        stove        | 77.23 | 89.35 |
|         palm        | 49.34 | 67.87 |
|    kitchen island   | 46.86 | 78.03 |
|       computer      | 72.99 |  84.4 |
|     swivel chair    | 46.76 | 59.92 |
|         boat        |  69.5 | 89.23 |
|         bar         | 55.04 | 70.92 |
|    arcade machine   | 79.46 | 86.09 |
|        hovel        | 11.02 | 15.41 |
|         bus         | 92.91 | 96.68 |
|        towel        | 80.61 | 87.44 |
|        light        | 62.22 | 80.19 |
|        truck        | 41.43 | 61.86 |
|        tower        | 24.18 | 48.87 |
|      chandelier     |  70.8 | 81.08 |
|        awning       | 27.53 | 38.47 |
|     streetlight     | 36.86 | 56.21 |
|        booth        | 34.92 | 62.14 |
| television receiver | 70.22 | 79.75 |
|       airplane      | 66.06 | 74.27 |
|      dirt track     |  3.58 | 19.36 |
|       apparel       | 42.18 | 62.44 |
|         pole        | 31.21 | 46.06 |
|         land        |  6.74 |  8.13 |
|      bannister      | 23.72 | 37.54 |
|      escalator      | 45.37 | 60.01 |
|       ottoman       |  50.7 | 69.23 |
|        bottle       | 41.55 | 64.38 |
|        buffet       | 41.86 | 56.77 |
|        poster       | 28.96 |  41.3 |
|        stage        | 18.27 | 42.67 |
|         van         | 52.12 | 68.92 |
|         ship        | 86.99 | 96.57 |
|       fountain      | 26.73 |  28.9 |
|    conveyer belt    |  64.5 | 89.84 |
|        canopy       |  30.5 | 45.38 |
|        washer       | 71.18 |  73.5 |
|      plaything      | 29.26 | 53.37 |
|    swimming pool    |  60.2 | 64.26 |
|        stool        | 45.51 | 68.24 |
|        barrel       | 61.01 | 74.72 |
|        basket       | 39.15 | 51.66 |
|      waterfall      | 37.01 | 55.45 |
|         tent        | 89.37 | 98.14 |
|         bag         | 18.02 |  30.1 |
|       minibike      | 71.55 | 88.45 |
|        cradle       | 84.19 | 96.89 |
|         oven        | 41.97 | 49.12 |
|         ball        | 51.31 | 59.43 |
|         food        | 62.81 |  78.3 |
|         step        | 16.88 | 23.51 |
|         tank        | 55.04 | 63.98 |
|      trade name     |  30.2 | 40.34 |
|      microwave      | 84.95 | 95.57 |
|         pot         | 44.51 | 53.09 |
|        animal       | 69.58 | 72.15 |
|       bicycle       | 62.06 | 83.26 |
|         lake        |  45.6 | 63.66 |
|      dishwasher     | 66.31 | 82.91 |
|        screen       | 68.21 | 90.57 |
|       blanket       | 16.43 | 19.21 |
|      sculpture      | 62.62 | 86.14 |
|         hood        | 70.19 |  75.1 |
|        sconce       | 46.45 | 68.43 |
|         vase        |  40.7 | 63.37 |
|    traffic light    |  42.7 | 68.26 |
|         tray        | 17.23 | 26.87 |
|        ashcan       |  44.5 | 66.85 |
|         fan         | 66.39 | 84.21 |
|         pier        | 37.59 | 42.34 |
|      crt screen     |  5.2  | 13.69 |
|        plate        | 58.65 | 78.54 |
|       monitor       |  3.75 |  5.01 |
|    bulletin board   | 51.74 | 74.39 |
|        shower       | 11.79 |  22.2 |
|       radiator      | 66.28 | 77.29 |
|        glass        | 19.74 | 22.63 |
|        clock        | 32.76 | 46.12 |
|         flag        | 73.04 | 81.83 |
+---------------------+-------+-------+
11/13 02:46:09 - mmengine - INFO - Iter(test) [2000/2000]    aAcc: 83.6700  mIoU: 52.4400  mAcc: 66.4400  data_time: 0.0159  time: 0.5067
Runtime: 1705

============================= JOB FEEDBACK =============================

NodeName=uc2n906
Job ID: 24668871
Array Job ID: 24668155_4
Cluster: uc2
User/Group: ma_dschader/ma_ma
State: COMPLETED (exit code 0)
Nodes: 1
Cores per node: 8
CPU Utilized: 00:25:28
CPU Efficiency: 10.98% of 03:52:00 core-walltime
Job Wall-clock time: 00:29:00
Memory Utilized: 5.99 GB
Memory Efficiency: 59.88% of 10.00 GB
