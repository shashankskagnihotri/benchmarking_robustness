Started at Sat Sep 21 01:12:58 CEST 2024
Processing corruption type: gaussian_noise
09/21 01:13:43 - mmengine - INFO - 
------------------------------------------------------------
System environment:
    sys.platform: linux
    Python: 3.10.13 | packaged by conda-forge | (main, Dec 23 2023, 15:36:39) [GCC 12.3.0]
    CUDA available: True
    MUSA available: False
    numpy_random_seed: 1325551301
    GPU 0: Tesla V100-SXM2-32GB
    CUDA_HOME: /opt/bwhpc/common/devel/cuda/11.7
    NVCC: Cuda compilation tools, release 11.7, V11.7.99
    GCC: gcc (GCC) 8.5.0 20210514 (Red Hat 8.5.0-18)
    PyTorch: 1.13.1
    PyTorch compiling details: PyTorch built with:
  - GCC 9.3
  - C++ Version: 201402
  - Intel(R) oneAPI Math Kernel Library Version 2023.1-Product Build 20230303 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v2.6.0 (Git Hash 52b5f107dd9cf10910aaa19cb47f3abf9b349815)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - LAPACK is enabled (usually provided by MKL)
  - NNPACK is enabled
  - CPU capability usage: AVX2
  - CUDA Runtime 11.7
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_61,code=sm_61;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86;-gencode;arch=compute_37,code=compute_37
  - CuDNN 8.5
  - Magma 2.6.1
  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.7, CUDNN_VERSION=8.5.0, CXX_COMPILER=/opt/rh/devtoolset-9/root/usr/bin/c++, CXX_FLAGS= -fabi-version=11 -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -DEDGE_PROFILER_USE_KINETO -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Werror=non-virtual-dtor -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wunused-local-typedefs -Wno-unused-parameter -Wno-unused-function -Wno-unused-result -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Werror=cast-function-type -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.13.1, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, USE_ROCM=OFF, 

    TorchVision: 0.14.1
    OpenCV: 3.4.18
    MMEngine: 0.10.4

Runtime environment:
    cudnn_benchmark: True
    mp_cfg: {'mp_start_method': 'fork', 'opencv_num_threads': 0}
    dist_cfg: {'backend': 'nccl'}
    seed: 1325551301
    Distributed launcher: none
    Distributed training: False
    GPU number: 1
------------------------------------------------------------

09/21 01:13:44 - mmengine - INFO - Config:
auto_scale_lr = dict(base_batch_size=16, enable=False)
backbone_embed_multi = dict(decay_mult=0.0, lr_mult=0.1)
backbone_norm_multi = dict(decay_mult=0.0, lr_mult=0.1)
crop_size = (
    640,
    640,
)
custom_keys = dict({
    'absolute_pos_embed':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone':
    dict(decay_mult=1.0, lr_mult=0.1),
    'backbone.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.patch_embed.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.0.blocks.0.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.0.blocks.1.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.0.downsample.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.1.blocks.0.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.1.blocks.1.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.1.downsample.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.0.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.1.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.10.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.11.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.12.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.13.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.14.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.15.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.16.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.17.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.2.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.3.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.4.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.5.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.6.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.7.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.8.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.9.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.downsample.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.3.blocks.0.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.3.blocks.1.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'level_embed':
    dict(decay_mult=0.0, lr_mult=1.0),
    'query_embed':
    dict(decay_mult=0.0, lr_mult=1.0),
    'query_feat':
    dict(decay_mult=0.0, lr_mult=1.0),
    'relative_position_bias_table':
    dict(decay_mult=0.0, lr_mult=0.1)
})
data_root = 'data/ade/ADEChallengeData2016'
dataset_type = 'ADE20KDataset'
default_hooks = dict(
    checkpoint=dict(
        by_epoch=False, interval=5000, save_best='mIoU',
        type='CheckpointHook'),
    logger=dict(interval=50, log_metric_by_epoch=False, type='LoggerHook'),
    param_scheduler=dict(type='ParamSchedulerHook'),
    sampler_seed=dict(type='DistSamplerSeedHook'),
    timer=dict(type='IterTimerHook'),
    visualization=dict(type='SegVisualizationHook'))
default_scope = 'mmseg'
depths = [
    2,
    2,
    18,
    2,
]
embed_multi = dict(decay_mult=0.0, lr_mult=1.0)
env_cfg = dict(
    cudnn_benchmark=True,
    dist_cfg=dict(backend='nccl'),
    mp_cfg=dict(mp_start_method='fork', opencv_num_threads=0))
img_ratios = [
    0.5,
    0.75,
    1.0,
    1.25,
    1.5,
    1.75,
]
launcher = 'none'
load_from = '../checkpoint_files/ade20k/mask2former/mask2former_swin-b-in1k-384x384-pre_8xb2-160k_ade20k-640x640_20221129_125118-a4a086d2.pth'
log_level = 'INFO'
log_processor = dict(by_epoch=False)
model = dict(
    backbone=dict(
        attn_drop_rate=0.0,
        depths=[
            2,
            2,
            18,
            2,
        ],
        drop_path_rate=0.3,
        drop_rate=0.0,
        embed_dims=128,
        frozen_stages=-1,
        init_cfg=dict(
            checkpoint=
            'https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/swin/swin_base_patch4_window12_384_20220317-55b0104a.pth',
            type='Pretrained'),
        mlp_ratio=4,
        num_heads=[
            4,
            8,
            16,
            32,
        ],
        out_indices=(
            0,
            1,
            2,
            3,
        ),
        patch_norm=True,
        pretrain_img_size=384,
        qk_scale=None,
        qkv_bias=True,
        type='SwinTransformer',
        window_size=12,
        with_cp=False),
    data_preprocessor=dict(
        bgr_to_rgb=True,
        corruption='gaussian_noise',
        mean=[
            123.675,
            116.28,
            103.53,
        ],
        pad_val=0,
        seg_pad_val=255,
        size=(
            640,
            640,
        ),
        std=[
            58.395,
            57.12,
            57.375,
        ],
        type='SegDataPreProcessor'),
    decode_head=dict(
        align_corners=False,
        enforce_decoder_input_project=False,
        feat_channels=256,
        in_channels=[
            128,
            256,
            512,
            1024,
        ],
        loss_cls=dict(
            class_weight=[
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                0.1,
            ],
            loss_weight=2.0,
            reduction='mean',
            type='mmdet.CrossEntropyLoss',
            use_sigmoid=False),
        loss_dice=dict(
            activate=True,
            eps=1.0,
            loss_weight=5.0,
            naive_dice=True,
            reduction='mean',
            type='mmdet.DiceLoss',
            use_sigmoid=True),
        loss_mask=dict(
            loss_weight=5.0,
            reduction='mean',
            type='mmdet.CrossEntropyLoss',
            use_sigmoid=True),
        num_classes=150,
        num_queries=100,
        num_transformer_feat_level=3,
        out_channels=256,
        pixel_decoder=dict(
            act_cfg=dict(type='ReLU'),
            encoder=dict(
                init_cfg=None,
                layer_cfg=dict(
                    ffn_cfg=dict(
                        act_cfg=dict(inplace=True, type='ReLU'),
                        embed_dims=256,
                        feedforward_channels=1024,
                        ffn_drop=0.0,
                        num_fcs=2),
                    self_attn_cfg=dict(
                        batch_first=True,
                        dropout=0.0,
                        embed_dims=256,
                        im2col_step=64,
                        init_cfg=None,
                        norm_cfg=None,
                        num_heads=8,
                        num_levels=3,
                        num_points=4)),
                num_layers=6),
            init_cfg=None,
            norm_cfg=dict(num_groups=32, type='GN'),
            num_outs=3,
            positional_encoding=dict(normalize=True, num_feats=128),
            type='mmdet.MSDeformAttnPixelDecoder'),
        positional_encoding=dict(normalize=True, num_feats=128),
        strides=[
            4,
            8,
            16,
            32,
        ],
        train_cfg=dict(
            assigner=dict(
                match_costs=[
                    dict(type='mmdet.ClassificationCost', weight=2.0),
                    dict(
                        type='mmdet.CrossEntropyLossCost',
                        use_sigmoid=True,
                        weight=5.0),
                    dict(
                        eps=1.0,
                        pred_act=True,
                        type='mmdet.DiceCost',
                        weight=5.0),
                ],
                type='mmdet.HungarianAssigner'),
            importance_sample_ratio=0.75,
            num_points=12544,
            oversample_ratio=3.0,
            sampler=dict(type='mmdet.MaskPseudoSampler')),
        transformer_decoder=dict(
            init_cfg=None,
            layer_cfg=dict(
                cross_attn_cfg=dict(
                    attn_drop=0.0,
                    batch_first=True,
                    dropout_layer=None,
                    embed_dims=256,
                    num_heads=8,
                    proj_drop=0.0),
                ffn_cfg=dict(
                    act_cfg=dict(inplace=True, type='ReLU'),
                    add_identity=True,
                    dropout_layer=None,
                    embed_dims=256,
                    feedforward_channels=2048,
                    ffn_drop=0.0,
                    num_fcs=2),
                self_attn_cfg=dict(
                    attn_drop=0.0,
                    batch_first=True,
                    dropout_layer=None,
                    embed_dims=256,
                    num_heads=8,
                    proj_drop=0.0)),
            num_layers=9,
            return_intermediate=True),
        type='Mask2FormerHead'),
    test_cfg=dict(mode='whole'),
    train_cfg=dict(),
    type='EncoderDecoder')
num_classes = 150
optim_wrapper = dict(
    clip_grad=dict(max_norm=0.01, norm_type=2),
    optimizer=dict(
        betas=(
            0.9,
            0.999,
        ),
        eps=1e-08,
        lr=0.0001,
        type='AdamW',
        weight_decay=0.05),
    paramwise_cfg=dict(
        custom_keys=dict({
            'absolute_pos_embed':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone':
            dict(decay_mult=1.0, lr_mult=0.1),
            'backbone.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.patch_embed.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.0.blocks.0.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.0.blocks.1.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.0.downsample.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.1.blocks.0.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.1.blocks.1.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.1.downsample.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.0.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.1.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.10.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.11.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.12.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.13.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.14.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.15.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.16.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.17.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.2.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.3.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.4.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.5.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.6.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.7.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.8.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.9.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.downsample.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.3.blocks.0.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.3.blocks.1.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'level_embed':
            dict(decay_mult=0.0, lr_mult=1.0),
            'query_embed':
            dict(decay_mult=0.0, lr_mult=1.0),
            'query_feat':
            dict(decay_mult=0.0, lr_mult=1.0),
            'relative_position_bias_table':
            dict(decay_mult=0.0, lr_mult=0.1)
        }),
        norm_decay_mult=0.0),
    type='OptimWrapper')
optimizer = dict(
    betas=(
        0.9,
        0.999,
    ),
    eps=1e-08,
    lr=0.0001,
    type='AdamW',
    weight_decay=0.05)
param_scheduler = [
    dict(
        begin=0,
        by_epoch=False,
        end=160000,
        eta_min=0,
        power=0.9,
        type='PolyLR'),
]
pretrained = 'https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/swin/swin_base_patch4_window12_384_20220317-55b0104a.pth'
resume = False
test_cfg = dict(type='TestLoop')
test_dataloader = dict(
    batch_size=1,
    dataset=dict(
        data_prefix=dict(
            img_path='images/validation',
            seg_map_path='annotations/validation'),
        data_root='data/ade/ADEChallengeData2016',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(keep_ratio=True, scale=(
                2560,
                640,
            ), type='Resize'),
            dict(reduce_zero_label=True, type='LoadAnnotations'),
            dict(type='PackSegInputs'),
        ],
        type='ADE20KDataset'),
    num_workers=4,
    persistent_workers=True,
    sampler=dict(shuffle=False, type='DefaultSampler'))
test_evaluator = dict(
    iou_metrics=[
        'mIoU',
    ], type='IoUMetric')
test_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(keep_ratio=True, scale=(
        2560,
        640,
    ), type='Resize'),
    dict(reduce_zero_label=True, type='LoadAnnotations'),
    dict(type='PackSegInputs'),
]
train_cfg = dict(
    max_iters=160000, type='IterBasedTrainLoop', val_interval=5000)
train_dataloader = dict(
    batch_size=2,
    dataset=dict(
        data_prefix=dict(
            img_path='images/training', seg_map_path='annotations/training'),
        data_root='data/ade/ADEChallengeData2016',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(reduce_zero_label=True, type='LoadAnnotations'),
            dict(
                max_size=2560,
                resize_type='ResizeShortestEdge',
                scales=[
                    320,
                    384,
                    448,
                    512,
                    576,
                    640,
                    704,
                    768,
                    832,
                    896,
                    960,
                    1024,
                    1088,
                    1152,
                    1216,
                    1280,
                ],
                type='RandomChoiceResize'),
            dict(
                cat_max_ratio=0.75, crop_size=(
                    640,
                    640,
                ), type='RandomCrop'),
            dict(prob=0.5, type='RandomFlip'),
            dict(type='PhotoMetricDistortion'),
            dict(type='PackSegInputs'),
        ],
        type='ADE20KDataset'),
    num_workers=4,
    persistent_workers=True,
    sampler=dict(shuffle=True, type='InfiniteSampler'))
train_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(reduce_zero_label=True, type='LoadAnnotations'),
    dict(
        max_size=2560,
        resize_type='ResizeShortestEdge',
        scales=[
            320,
            384,
            448,
            512,
            576,
            640,
            704,
            768,
            832,
            896,
            960,
            1024,
            1088,
            1152,
            1216,
            1280,
        ],
        type='RandomChoiceResize'),
    dict(cat_max_ratio=0.75, crop_size=(
        640,
        640,
    ), type='RandomCrop'),
    dict(prob=0.5, type='RandomFlip'),
    dict(type='PhotoMetricDistortion'),
    dict(type='PackSegInputs'),
]
tta_model = dict(type='SegTTAModel')
tta_pipeline = [
    dict(backend_args=None, type='LoadImageFromFile'),
    dict(
        transforms=[
            [
                dict(keep_ratio=True, scale_factor=0.5, type='Resize'),
                dict(keep_ratio=True, scale_factor=0.75, type='Resize'),
                dict(keep_ratio=True, scale_factor=1.0, type='Resize'),
                dict(keep_ratio=True, scale_factor=1.25, type='Resize'),
                dict(keep_ratio=True, scale_factor=1.5, type='Resize'),
                dict(keep_ratio=True, scale_factor=1.75, type='Resize'),
            ],
            [
                dict(direction='horizontal', prob=0.0, type='RandomFlip'),
                dict(direction='horizontal', prob=1.0, type='RandomFlip'),
            ],
            [
                dict(type='LoadAnnotations'),
            ],
            [
                dict(type='PackSegInputs'),
            ],
        ],
        type='TestTimeAug'),
]
val_cfg = dict(type='ValLoop')
val_dataloader = dict(
    batch_size=1,
    dataset=dict(
        data_prefix=dict(
            img_path='images/validation',
            seg_map_path='annotations/validation'),
        data_root='data/ade/ADEChallengeData2016',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(keep_ratio=True, scale=(
                2560,
                640,
            ), type='Resize'),
            dict(reduce_zero_label=True, type='LoadAnnotations'),
            dict(type='PackSegInputs'),
        ],
        type='ADE20KDataset'),
    num_workers=4,
    persistent_workers=True,
    sampler=dict(shuffle=False, type='DefaultSampler'))
val_evaluator = dict(
    iou_metrics=[
        'mIoU',
    ], type='IoUMetric')
vis_backends = [
    dict(type='LocalVisBackend'),
]
visualizer = dict(
    name='visualizer',
    type='SegLocalVisualizer',
    vis_backends=[
        dict(type='LocalVisBackend'),
    ])
work_dir = '../corruptions/work_dirs/ade20k/mask2former/mask2former_swin-b-in1k-384x384-pre_8xb2-160k_ade20k-640x640/gaussian_noise'

09/21 01:14:01 - mmengine - INFO - Distributed training is not used, all SyncBatchNorm (SyncBN) layers in the model will be automatically reverted to BatchNormXd layers if they are used.
09/21 01:14:01 - mmengine - INFO - Hooks will be executed in the following order:
before_run:
(VERY_HIGH   ) RuntimeInfoHook                    
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
before_train:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_train_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(NORMAL      ) DistSamplerSeedHook                
 -------------------- 
before_train_iter:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_train_iter:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(NORMAL      ) SegVisualizationHook               
(BELOW_NORMAL) LoggerHook                         
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
after_train_epoch:
(NORMAL      ) IterTimerHook                      
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_val:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
before_val_epoch:
(NORMAL      ) IterTimerHook                      
 -------------------- 
before_val_iter:
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_val_iter:
(NORMAL      ) IterTimerHook                      
(NORMAL      ) SegVisualizationHook               
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_val_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
after_val:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
after_train:
(VERY_HIGH   ) RuntimeInfoHook                    
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_test:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
before_test_epoch:
(NORMAL      ) IterTimerHook                      
 -------------------- 
before_test_iter:
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_test_iter:
(NORMAL      ) IterTimerHook                      
(NORMAL      ) SegVisualizationHook               
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_test_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_test:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
after_run:
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
09/21 01:14:02 - mmengine - WARNING - The prefix is not set in metric class IoUMetric.
Loads checkpoint by local backend from path: ../checkpoint_files/ade20k/mask2former/mask2former_swin-b-in1k-384x384-pre_8xb2-160k_ade20k-640x640_20221129_125118-a4a086d2.pth
09/21 01:14:05 - mmengine - INFO - Load checkpoint from ../checkpoint_files/ade20k/mask2former/mask2former_swin-b-in1k-384x384-pre_8xb2-160k_ade20k-640x640_20221129_125118-a4a086d2.pth
09/21 01:15:09 - mmengine - INFO - Iter(test) [  50/2000]    eta: 0:41:32  time: 0.4493  data_time: 0.0018  memory: 17181  
09/21 01:15:31 - mmengine - INFO - Iter(test) [ 100/2000]    eta: 0:27:01  time: 0.4275  data_time: 0.0018  memory: 17180  
09/21 01:15:48 - mmengine - INFO - Iter(test) [ 150/2000]    eta: 0:21:02  time: 0.3460  data_time: 0.0041  memory: 17150  
09/21 01:16:05 - mmengine - INFO - Iter(test) [ 200/2000]    eta: 0:17:53  time: 0.3838  data_time: 0.0017  memory: 17194  
09/21 01:16:23 - mmengine - INFO - Iter(test) [ 250/2000]    eta: 0:16:05  time: 0.2785  data_time: 0.0017  memory: 17202  
09/21 01:16:40 - mmengine - INFO - Iter(test) [ 300/2000]    eta: 0:14:36  time: 0.1910  data_time: 0.0019  memory: 17180  
09/21 01:16:57 - mmengine - INFO - Iter(test) [ 350/2000]    eta: 0:13:27  time: 0.3218  data_time: 0.0018  memory: 17178  
09/21 01:17:09 - mmengine - INFO - Iter(test) [ 400/2000]    eta: 0:12:15  time: 0.2014  data_time: 0.0017  memory: 17177  
09/21 01:17:20 - mmengine - INFO - Iter(test) [ 450/2000]    eta: 0:11:09  time: 0.2342  data_time: 0.0018  memory: 17147  
09/21 01:17:32 - mmengine - INFO - Iter(test) [ 500/2000]    eta: 0:10:18  time: 0.2618  data_time: 0.0017  memory: 17149  
09/21 01:17:44 - mmengine - INFO - Iter(test) [ 550/2000]    eta: 0:09:35  time: 0.3101  data_time: 0.0033  memory: 17179  
09/21 01:17:53 - mmengine - INFO - Iter(test) [ 600/2000]    eta: 0:08:50  time: 0.1871  data_time: 0.0018  memory: 3938  
09/21 01:18:06 - mmengine - INFO - Iter(test) [ 650/2000]    eta: 0:08:19  time: 0.3094  data_time: 0.0016  memory: 17181  
09/21 01:18:21 - mmengine - INFO - Iter(test) [ 700/2000]    eta: 0:07:54  time: 0.2583  data_time: 0.0018  memory: 17177  
09/21 01:18:36 - mmengine - INFO - Iter(test) [ 750/2000]    eta: 0:07:30  time: 0.6016  data_time: 0.0016  memory: 17184  
09/21 01:18:46 - mmengine - INFO - Iter(test) [ 800/2000]    eta: 0:07:00  time: 0.2151  data_time: 0.0020  memory: 17151  
09/21 01:18:55 - mmengine - INFO - Iter(test) [ 850/2000]    eta: 0:06:31  time: 0.1834  data_time: 0.0018  memory: 1428  
09/21 01:19:06 - mmengine - INFO - Iter(test) [ 900/2000]    eta: 0:06:07  time: 0.2278  data_time: 0.0016  memory: 17138  
09/21 01:19:20 - mmengine - INFO - Iter(test) [ 950/2000]    eta: 0:05:47  time: 0.3419  data_time: 0.0030  memory: 17133  
09/21 01:19:30 - mmengine - INFO - Iter(test) [1000/2000]    eta: 0:05:24  time: 0.1781  data_time: 0.0020  memory: 17096  
09/21 01:19:41 - mmengine - INFO - Iter(test) [1050/2000]    eta: 0:05:03  time: 0.2804  data_time: 0.0028  memory: 17182  
09/21 01:19:52 - mmengine - INFO - Iter(test) [1100/2000]    eta: 0:04:43  time: 0.1672  data_time: 0.0015  memory: 17175  
09/21 01:20:02 - mmengine - INFO - Iter(test) [1150/2000]    eta: 0:04:23  time: 0.1718  data_time: 0.0015  memory: 17117  
09/21 01:20:11 - mmengine - INFO - Iter(test) [1200/2000]    eta: 0:04:03  time: 0.1670  data_time: 0.0016  memory: 17113  
09/21 01:20:22 - mmengine - INFO - Iter(test) [1250/2000]    eta: 0:03:45  time: 0.2463  data_time: 0.0016  memory: 17172  
09/21 01:20:30 - mmengine - INFO - Iter(test) [1300/2000]    eta: 0:03:26  time: 0.1724  data_time: 0.0016  memory: 1430  
09/21 01:20:41 - mmengine - INFO - Iter(test) [1350/2000]    eta: 0:03:10  time: 0.1705  data_time: 0.0017  memory: 17110  
09/21 01:20:53 - mmengine - INFO - Iter(test) [1400/2000]    eta: 0:02:54  time: 0.2102  data_time: 0.0017  memory: 17154  
09/21 01:21:03 - mmengine - INFO - Iter(test) [1450/2000]    eta: 0:02:38  time: 0.2535  data_time: 0.0017  memory: 17130  
09/21 01:21:13 - mmengine - INFO - Iter(test) [1500/2000]    eta: 0:02:22  time: 0.1710  data_time: 0.0017  memory: 17125  
09/21 01:21:23 - mmengine - INFO - Iter(test) [1550/2000]    eta: 0:02:06  time: 0.1891  data_time: 0.0018  memory: 17154  
09/21 01:21:32 - mmengine - INFO - Iter(test) [1600/2000]    eta: 0:01:51  time: 0.1787  data_time: 0.0018  memory: 1425  
09/21 01:21:43 - mmengine - INFO - Iter(test) [1650/2000]    eta: 0:01:36  time: 0.1710  data_time: 0.0021  memory: 17192  
09/21 01:21:57 - mmengine - INFO - Iter(test) [1700/2000]    eta: 0:01:23  time: 0.1838  data_time: 0.0019  memory: 17151  
09/21 01:22:07 - mmengine - INFO - Iter(test) [1750/2000]    eta: 0:01:08  time: 0.1839  data_time: 0.0016  memory: 17111  
09/21 01:22:17 - mmengine - INFO - Iter(test) [1800/2000]    eta: 0:00:54  time: 0.1854  data_time: 0.0019  memory: 17114  
09/21 01:22:26 - mmengine - INFO - Iter(test) [1850/2000]    eta: 0:00:40  time: 0.1829  data_time: 0.0019  memory: 1317  
09/21 01:22:36 - mmengine - INFO - Iter(test) [1900/2000]    eta: 0:00:26  time: 0.2435  data_time: 0.0017  memory: 17182  
09/21 01:22:47 - mmengine - INFO - Iter(test) [1950/2000]    eta: 0:00:13  time: 0.1775  data_time: 0.0017  memory: 17197  
09/21 01:22:57 - mmengine - INFO - Iter(test) [2000/2000]    eta: 0:00:00  time: 0.1668  data_time: 0.0016  memory: 17131  
09/21 01:22:58 - mmengine - INFO - per class results:
09/21 01:22:58 - mmengine - INFO - 
+---------------------+-------+-------+
|        Class        |  IoU  |  Acc  |
+---------------------+-------+-------+
|         wall        | 73.81 | 84.41 |
|       building      | 80.35 | 90.27 |
|         sky         | 93.06 |  97.0 |
|        floor        | 79.43 | 87.61 |
|         tree        | 71.97 | 86.96 |
|       ceiling       | 80.65 |  88.5 |
|         road        | 81.22 | 91.12 |
|         bed         | 87.24 | 94.73 |
|      windowpane     | 58.19 | 79.54 |
|        grass        | 68.29 | 81.05 |
|       cabinet       | 52.75 | 66.77 |
|       sidewalk      | 56.35 | 65.61 |
|        person       | 79.34 |  89.2 |
|        earth        | 36.18 | 61.66 |
|         door        |  42.8 | 58.95 |
|        table        | 57.93 | 71.64 |
|       mountain      | 47.84 | 61.39 |
|        plant        | 48.87 |  55.7 |
|       curtain       | 69.13 |  77.1 |
|        chair        | 54.31 | 67.08 |
|         car         | 84.68 | 92.39 |
|        water        | 44.54 | 53.64 |
|       painting      | 70.28 | 83.26 |
|         sofa        |  62.1 | 81.38 |
|        shelf        | 37.28 | 51.74 |
|        house        | 44.51 | 72.75 |
|         sea         | 51.28 | 82.62 |
|        mirror       | 66.63 | 78.19 |
|         rug         | 63.15 | 74.59 |
|        field        | 28.28 | 47.82 |
|       armchair      | 34.76 | 53.96 |
|         seat        | 62.52 | 79.09 |
|        fence        | 44.32 |  60.3 |
|         desk        | 40.21 | 73.26 |
|         rock        | 37.96 | 62.25 |
|       wardrobe      |  47.2 | 64.95 |
|         lamp        | 63.37 |  73.3 |
|       bathtub       | 67.87 | 79.38 |
|       railing       | 32.43 | 48.02 |
|       cushion       | 47.51 |  56.3 |
|         base        | 31.46 | 52.74 |
|         box         | 19.48 | 23.81 |
|        column       | 38.75 | 50.58 |
|      signboard      | 37.38 | 51.34 |
|   chest of drawers  | 29.07 | 52.73 |
|       counter       | 25.09 | 27.49 |
|         sand        | 29.16 | 48.96 |
|         sink        | 70.25 | 80.19 |
|      skyscraper     | 65.34 | 87.69 |
|      fireplace      | 61.67 |  77.7 |
|     refrigerator    | 62.96 | 81.54 |
|      grandstand     | 39.77 | 71.44 |
|         path        | 25.61 | 37.21 |
|        stairs       | 31.02 | 37.69 |
|        runway       | 74.53 | 79.11 |
|         case        | 54.88 |  76.5 |
|      pool table     | 91.38 | 95.86 |
|        pillow       |  54.9 | 68.64 |
|     screen door     | 32.54 | 36.84 |
|       stairway      | 32.86 | 50.75 |
|        river        |  6.68 | 17.43 |
|        bridge       | 53.92 | 70.81 |
|       bookcase      | 37.26 | 71.47 |
|        blind        | 34.49 | 37.01 |
|     coffee table    |  63.4 | 75.45 |
|        toilet       | 78.95 | 88.29 |
|        flower       | 37.87 | 50.52 |
|         book        | 47.47 | 65.63 |
|         hill        |  3.67 |  9.87 |
|        bench        | 51.63 | 66.65 |
|      countertop     | 57.19 | 72.87 |
|        stove        | 72.94 | 87.98 |
|         palm        | 50.72 | 58.76 |
|    kitchen island   | 31.13 | 69.05 |
|       computer      | 55.36 | 65.62 |
|     swivel chair    | 44.43 | 60.08 |
|         boat        | 37.15 |  49.9 |
|         bar         | 56.18 | 73.11 |
|    arcade machine   | 81.49 | 87.58 |
|        hovel        | 28.32 | 47.12 |
|         bus         | 83.84 | 96.28 |
|        towel        | 61.36 | 68.47 |
|        light        | 54.32 | 71.91 |
|        truck        | 40.62 | 57.86 |
|        tower        | 25.09 | 52.37 |
|      chandelier     | 64.83 | 77.95 |
|        awning       | 22.79 | 38.32 |
|     streetlight     | 29.04 | 42.03 |
|        booth        |  43.1 | 68.88 |
| television receiver |  64.8 | 75.33 |
|       airplane      | 58.82 | 68.58 |
|      dirt track     |  9.28 | 49.35 |
|       apparel       | 27.23 | 42.17 |
|         pole        | 22.31 | 36.48 |
|         land        |  2.4  |  3.49 |
|      bannister      | 19.45 | 27.51 |
|      escalator      | 18.04 | 19.45 |
|       ottoman       | 55.17 | 66.06 |
|        bottle       | 38.33 | 61.85 |
|        buffet       | 45.94 | 66.67 |
|        poster       | 27.44 | 34.95 |
|        stage        | 10.88 | 23.69 |
|         van         | 52.47 | 64.66 |
|         ship        |  7.03 | 10.45 |
|       fountain      | 33.44 | 39.27 |
|    conveyer belt    |  63.1 |  85.1 |
|        canopy       |  25.5 | 38.52 |
|        washer       | 67.34 | 74.06 |
|      plaything      | 16.16 | 17.38 |
|    swimming pool    | 31.62 | 38.94 |
|        stool        | 36.53 | 62.91 |
|        barrel       |  48.8 | 69.03 |
|        basket       | 24.44 | 31.88 |
|      waterfall      | 38.12 | 52.59 |
|         tent        | 94.53 | 98.09 |
|         bag         | 12.86 | 19.39 |
|       minibike      | 69.59 | 84.05 |
|        cradle       |  79.8 | 97.14 |
|         oven        |  29.9 | 32.12 |
|         ball        | 43.44 | 61.32 |
|         food        | 64.07 | 81.81 |
|         step        |  7.14 |  9.68 |
|         tank        | 37.32 | 49.07 |
|      trade name     | 25.07 | 31.03 |
|      microwave      | 84.47 | 93.64 |
|         pot         | 42.49 | 48.62 |
|        animal       | 64.15 | 71.28 |
|       bicycle       | 54.49 | 78.87 |
|         lake        | 55.17 | 63.21 |
|      dishwasher     |  60.2 | 70.03 |
|        screen       |  66.2 | 89.41 |
|       blanket       |  8.47 |  9.69 |
|      sculpture      | 40.49 | 61.06 |
|         hood        | 61.16 | 68.54 |
|        sconce       | 45.31 | 61.94 |
|         vase        | 40.29 | 60.65 |
|    traffic light    | 38.22 | 56.62 |
|         tray        | 14.68 | 20.83 |
|        ashcan       | 31.81 | 45.25 |
|         fan         | 56.01 | 79.38 |
|         pier        | 50.88 | 59.98 |
|      crt screen     |  3.25 | 10.73 |
|        plate        | 56.56 | 71.81 |
|       monitor       |  0.43 |  0.88 |
|    bulletin board   | 46.64 | 67.88 |
|        shower       |  8.11 | 14.95 |
|       radiator      |  47.1 | 56.75 |
|        glass        | 14.46 | 16.44 |
|        clock        | 30.29 | 38.37 |
|         flag        | 48.88 | 54.39 |
+---------------------+-------+-------+
09/21 01:22:58 - mmengine - INFO - Iter(test) [2000/2000]    aAcc: 80.6100  mIoU: 46.6200  mAcc: 60.0600  data_time: 0.0021  time: 0.2658
Finished processing corruption type: gaussian_noise
Processing corruption type: shot_noise
09/21 01:24:15 - mmengine - INFO - 
------------------------------------------------------------
System environment:
    sys.platform: linux
    Python: 3.10.13 | packaged by conda-forge | (main, Dec 23 2023, 15:36:39) [GCC 12.3.0]
    CUDA available: True
    MUSA available: False
    numpy_random_seed: 544651495
    GPU 0: Tesla V100-SXM2-32GB
    CUDA_HOME: /opt/bwhpc/common/devel/cuda/11.7
    NVCC: Cuda compilation tools, release 11.7, V11.7.99
    GCC: gcc (GCC) 8.5.0 20210514 (Red Hat 8.5.0-18)
    PyTorch: 1.13.1
    PyTorch compiling details: PyTorch built with:
  - GCC 9.3
  - C++ Version: 201402
  - Intel(R) oneAPI Math Kernel Library Version 2023.1-Product Build 20230303 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v2.6.0 (Git Hash 52b5f107dd9cf10910aaa19cb47f3abf9b349815)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - LAPACK is enabled (usually provided by MKL)
  - NNPACK is enabled
  - CPU capability usage: AVX2
  - CUDA Runtime 11.7
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_61,code=sm_61;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86;-gencode;arch=compute_37,code=compute_37
  - CuDNN 8.5
  - Magma 2.6.1
  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.7, CUDNN_VERSION=8.5.0, CXX_COMPILER=/opt/rh/devtoolset-9/root/usr/bin/c++, CXX_FLAGS= -fabi-version=11 -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -DEDGE_PROFILER_USE_KINETO -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Werror=non-virtual-dtor -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wunused-local-typedefs -Wno-unused-parameter -Wno-unused-function -Wno-unused-result -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Werror=cast-function-type -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.13.1, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, USE_ROCM=OFF, 

    TorchVision: 0.14.1
    OpenCV: 3.4.18
    MMEngine: 0.10.4

Runtime environment:
    cudnn_benchmark: True
    mp_cfg: {'mp_start_method': 'fork', 'opencv_num_threads': 0}
    dist_cfg: {'backend': 'nccl'}
    seed: 544651495
    Distributed launcher: none
    Distributed training: False
    GPU number: 1
------------------------------------------------------------

09/21 01:24:15 - mmengine - INFO - Config:
auto_scale_lr = dict(base_batch_size=16, enable=False)
backbone_embed_multi = dict(decay_mult=0.0, lr_mult=0.1)
backbone_norm_multi = dict(decay_mult=0.0, lr_mult=0.1)
crop_size = (
    640,
    640,
)
custom_keys = dict({
    'absolute_pos_embed':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone':
    dict(decay_mult=1.0, lr_mult=0.1),
    'backbone.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.patch_embed.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.0.blocks.0.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.0.blocks.1.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.0.downsample.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.1.blocks.0.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.1.blocks.1.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.1.downsample.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.0.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.1.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.10.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.11.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.12.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.13.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.14.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.15.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.16.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.17.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.2.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.3.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.4.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.5.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.6.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.7.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.8.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.9.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.downsample.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.3.blocks.0.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.3.blocks.1.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'level_embed':
    dict(decay_mult=0.0, lr_mult=1.0),
    'query_embed':
    dict(decay_mult=0.0, lr_mult=1.0),
    'query_feat':
    dict(decay_mult=0.0, lr_mult=1.0),
    'relative_position_bias_table':
    dict(decay_mult=0.0, lr_mult=0.1)
})
data_root = 'data/ade/ADEChallengeData2016'
dataset_type = 'ADE20KDataset'
default_hooks = dict(
    checkpoint=dict(
        by_epoch=False, interval=5000, save_best='mIoU',
        type='CheckpointHook'),
    logger=dict(interval=50, log_metric_by_epoch=False, type='LoggerHook'),
    param_scheduler=dict(type='ParamSchedulerHook'),
    sampler_seed=dict(type='DistSamplerSeedHook'),
    timer=dict(type='IterTimerHook'),
    visualization=dict(type='SegVisualizationHook'))
default_scope = 'mmseg'
depths = [
    2,
    2,
    18,
    2,
]
embed_multi = dict(decay_mult=0.0, lr_mult=1.0)
env_cfg = dict(
    cudnn_benchmark=True,
    dist_cfg=dict(backend='nccl'),
    mp_cfg=dict(mp_start_method='fork', opencv_num_threads=0))
img_ratios = [
    0.5,
    0.75,
    1.0,
    1.25,
    1.5,
    1.75,
]
launcher = 'none'
load_from = '../checkpoint_files/ade20k/mask2former/mask2former_swin-b-in1k-384x384-pre_8xb2-160k_ade20k-640x640_20221129_125118-a4a086d2.pth'
log_level = 'INFO'
log_processor = dict(by_epoch=False)
model = dict(
    backbone=dict(
        attn_drop_rate=0.0,
        depths=[
            2,
            2,
            18,
            2,
        ],
        drop_path_rate=0.3,
        drop_rate=0.0,
        embed_dims=128,
        frozen_stages=-1,
        init_cfg=dict(
            checkpoint=
            'https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/swin/swin_base_patch4_window12_384_20220317-55b0104a.pth',
            type='Pretrained'),
        mlp_ratio=4,
        num_heads=[
            4,
            8,
            16,
            32,
        ],
        out_indices=(
            0,
            1,
            2,
            3,
        ),
        patch_norm=True,
        pretrain_img_size=384,
        qk_scale=None,
        qkv_bias=True,
        type='SwinTransformer',
        window_size=12,
        with_cp=False),
    data_preprocessor=dict(
        bgr_to_rgb=True,
        corruption='shot_noise',
        mean=[
            123.675,
            116.28,
            103.53,
        ],
        pad_val=0,
        seg_pad_val=255,
        size=(
            640,
            640,
        ),
        std=[
            58.395,
            57.12,
            57.375,
        ],
        type='SegDataPreProcessor'),
    decode_head=dict(
        align_corners=False,
        enforce_decoder_input_project=False,
        feat_channels=256,
        in_channels=[
            128,
            256,
            512,
            1024,
        ],
        loss_cls=dict(
            class_weight=[
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                0.1,
            ],
            loss_weight=2.0,
            reduction='mean',
            type='mmdet.CrossEntropyLoss',
            use_sigmoid=False),
        loss_dice=dict(
            activate=True,
            eps=1.0,
            loss_weight=5.0,
            naive_dice=True,
            reduction='mean',
            type='mmdet.DiceLoss',
            use_sigmoid=True),
        loss_mask=dict(
            loss_weight=5.0,
            reduction='mean',
            type='mmdet.CrossEntropyLoss',
            use_sigmoid=True),
        num_classes=150,
        num_queries=100,
        num_transformer_feat_level=3,
        out_channels=256,
        pixel_decoder=dict(
            act_cfg=dict(type='ReLU'),
            encoder=dict(
                init_cfg=None,
                layer_cfg=dict(
                    ffn_cfg=dict(
                        act_cfg=dict(inplace=True, type='ReLU'),
                        embed_dims=256,
                        feedforward_channels=1024,
                        ffn_drop=0.0,
                        num_fcs=2),
                    self_attn_cfg=dict(
                        batch_first=True,
                        dropout=0.0,
                        embed_dims=256,
                        im2col_step=64,
                        init_cfg=None,
                        norm_cfg=None,
                        num_heads=8,
                        num_levels=3,
                        num_points=4)),
                num_layers=6),
            init_cfg=None,
            norm_cfg=dict(num_groups=32, type='GN'),
            num_outs=3,
            positional_encoding=dict(normalize=True, num_feats=128),
            type='mmdet.MSDeformAttnPixelDecoder'),
        positional_encoding=dict(normalize=True, num_feats=128),
        strides=[
            4,
            8,
            16,
            32,
        ],
        train_cfg=dict(
            assigner=dict(
                match_costs=[
                    dict(type='mmdet.ClassificationCost', weight=2.0),
                    dict(
                        type='mmdet.CrossEntropyLossCost',
                        use_sigmoid=True,
                        weight=5.0),
                    dict(
                        eps=1.0,
                        pred_act=True,
                        type='mmdet.DiceCost',
                        weight=5.0),
                ],
                type='mmdet.HungarianAssigner'),
            importance_sample_ratio=0.75,
            num_points=12544,
            oversample_ratio=3.0,
            sampler=dict(type='mmdet.MaskPseudoSampler')),
        transformer_decoder=dict(
            init_cfg=None,
            layer_cfg=dict(
                cross_attn_cfg=dict(
                    attn_drop=0.0,
                    batch_first=True,
                    dropout_layer=None,
                    embed_dims=256,
                    num_heads=8,
                    proj_drop=0.0),
                ffn_cfg=dict(
                    act_cfg=dict(inplace=True, type='ReLU'),
                    add_identity=True,
                    dropout_layer=None,
                    embed_dims=256,
                    feedforward_channels=2048,
                    ffn_drop=0.0,
                    num_fcs=2),
                self_attn_cfg=dict(
                    attn_drop=0.0,
                    batch_first=True,
                    dropout_layer=None,
                    embed_dims=256,
                    num_heads=8,
                    proj_drop=0.0)),
            num_layers=9,
            return_intermediate=True),
        type='Mask2FormerHead'),
    test_cfg=dict(mode='whole'),
    train_cfg=dict(),
    type='EncoderDecoder')
num_classes = 150
optim_wrapper = dict(
    clip_grad=dict(max_norm=0.01, norm_type=2),
    optimizer=dict(
        betas=(
            0.9,
            0.999,
        ),
        eps=1e-08,
        lr=0.0001,
        type='AdamW',
        weight_decay=0.05),
    paramwise_cfg=dict(
        custom_keys=dict({
            'absolute_pos_embed':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone':
            dict(decay_mult=1.0, lr_mult=0.1),
            'backbone.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.patch_embed.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.0.blocks.0.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.0.blocks.1.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.0.downsample.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.1.blocks.0.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.1.blocks.1.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.1.downsample.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.0.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.1.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.10.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.11.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.12.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.13.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.14.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.15.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.16.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.17.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.2.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.3.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.4.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.5.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.6.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.7.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.8.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.9.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.downsample.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.3.blocks.0.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.3.blocks.1.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'level_embed':
            dict(decay_mult=0.0, lr_mult=1.0),
            'query_embed':
            dict(decay_mult=0.0, lr_mult=1.0),
            'query_feat':
            dict(decay_mult=0.0, lr_mult=1.0),
            'relative_position_bias_table':
            dict(decay_mult=0.0, lr_mult=0.1)
        }),
        norm_decay_mult=0.0),
    type='OptimWrapper')
optimizer = dict(
    betas=(
        0.9,
        0.999,
    ),
    eps=1e-08,
    lr=0.0001,
    type='AdamW',
    weight_decay=0.05)
param_scheduler = [
    dict(
        begin=0,
        by_epoch=False,
        end=160000,
        eta_min=0,
        power=0.9,
        type='PolyLR'),
]
pretrained = 'https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/swin/swin_base_patch4_window12_384_20220317-55b0104a.pth'
resume = False
test_cfg = dict(type='TestLoop')
test_dataloader = dict(
    batch_size=1,
    dataset=dict(
        data_prefix=dict(
            img_path='images/validation',
            seg_map_path='annotations/validation'),
        data_root='data/ade/ADEChallengeData2016',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(keep_ratio=True, scale=(
                2560,
                640,
            ), type='Resize'),
            dict(reduce_zero_label=True, type='LoadAnnotations'),
            dict(type='PackSegInputs'),
        ],
        type='ADE20KDataset'),
    num_workers=4,
    persistent_workers=True,
    sampler=dict(shuffle=False, type='DefaultSampler'))
test_evaluator = dict(
    iou_metrics=[
        'mIoU',
    ], type='IoUMetric')
test_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(keep_ratio=True, scale=(
        2560,
        640,
    ), type='Resize'),
    dict(reduce_zero_label=True, type='LoadAnnotations'),
    dict(type='PackSegInputs'),
]
train_cfg = dict(
    max_iters=160000, type='IterBasedTrainLoop', val_interval=5000)
train_dataloader = dict(
    batch_size=2,
    dataset=dict(
        data_prefix=dict(
            img_path='images/training', seg_map_path='annotations/training'),
        data_root='data/ade/ADEChallengeData2016',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(reduce_zero_label=True, type='LoadAnnotations'),
            dict(
                max_size=2560,
                resize_type='ResizeShortestEdge',
                scales=[
                    320,
                    384,
                    448,
                    512,
                    576,
                    640,
                    704,
                    768,
                    832,
                    896,
                    960,
                    1024,
                    1088,
                    1152,
                    1216,
                    1280,
                ],
                type='RandomChoiceResize'),
            dict(
                cat_max_ratio=0.75, crop_size=(
                    640,
                    640,
                ), type='RandomCrop'),
            dict(prob=0.5, type='RandomFlip'),
            dict(type='PhotoMetricDistortion'),
            dict(type='PackSegInputs'),
        ],
        type='ADE20KDataset'),
    num_workers=4,
    persistent_workers=True,
    sampler=dict(shuffle=True, type='InfiniteSampler'))
train_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(reduce_zero_label=True, type='LoadAnnotations'),
    dict(
        max_size=2560,
        resize_type='ResizeShortestEdge',
        scales=[
            320,
            384,
            448,
            512,
            576,
            640,
            704,
            768,
            832,
            896,
            960,
            1024,
            1088,
            1152,
            1216,
            1280,
        ],
        type='RandomChoiceResize'),
    dict(cat_max_ratio=0.75, crop_size=(
        640,
        640,
    ), type='RandomCrop'),
    dict(prob=0.5, type='RandomFlip'),
    dict(type='PhotoMetricDistortion'),
    dict(type='PackSegInputs'),
]
tta_model = dict(type='SegTTAModel')
tta_pipeline = [
    dict(backend_args=None, type='LoadImageFromFile'),
    dict(
        transforms=[
            [
                dict(keep_ratio=True, scale_factor=0.5, type='Resize'),
                dict(keep_ratio=True, scale_factor=0.75, type='Resize'),
                dict(keep_ratio=True, scale_factor=1.0, type='Resize'),
                dict(keep_ratio=True, scale_factor=1.25, type='Resize'),
                dict(keep_ratio=True, scale_factor=1.5, type='Resize'),
                dict(keep_ratio=True, scale_factor=1.75, type='Resize'),
            ],
            [
                dict(direction='horizontal', prob=0.0, type='RandomFlip'),
                dict(direction='horizontal', prob=1.0, type='RandomFlip'),
            ],
            [
                dict(type='LoadAnnotations'),
            ],
            [
                dict(type='PackSegInputs'),
            ],
        ],
        type='TestTimeAug'),
]
val_cfg = dict(type='ValLoop')
val_dataloader = dict(
    batch_size=1,
    dataset=dict(
        data_prefix=dict(
            img_path='images/validation',
            seg_map_path='annotations/validation'),
        data_root='data/ade/ADEChallengeData2016',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(keep_ratio=True, scale=(
                2560,
                640,
            ), type='Resize'),
            dict(reduce_zero_label=True, type='LoadAnnotations'),
            dict(type='PackSegInputs'),
        ],
        type='ADE20KDataset'),
    num_workers=4,
    persistent_workers=True,
    sampler=dict(shuffle=False, type='DefaultSampler'))
val_evaluator = dict(
    iou_metrics=[
        'mIoU',
    ], type='IoUMetric')
vis_backends = [
    dict(type='LocalVisBackend'),
]
visualizer = dict(
    name='visualizer',
    type='SegLocalVisualizer',
    vis_backends=[
        dict(type='LocalVisBackend'),
    ])
work_dir = '../corruptions/work_dirs/ade20k/mask2former/mask2former_swin-b-in1k-384x384-pre_8xb2-160k_ade20k-640x640/shot_noise'

09/21 01:24:58 - mmengine - INFO - Distributed training is not used, all SyncBatchNorm (SyncBN) layers in the model will be automatically reverted to BatchNormXd layers if they are used.
09/21 01:24:58 - mmengine - INFO - Hooks will be executed in the following order:
before_run:
(VERY_HIGH   ) RuntimeInfoHook                    
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
before_train:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_train_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(NORMAL      ) DistSamplerSeedHook                
 -------------------- 
before_train_iter:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_train_iter:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(NORMAL      ) SegVisualizationHook               
(BELOW_NORMAL) LoggerHook                         
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
after_train_epoch:
(NORMAL      ) IterTimerHook                      
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_val:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
before_val_epoch:
(NORMAL      ) IterTimerHook                      
 -------------------- 
before_val_iter:
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_val_iter:
(NORMAL      ) IterTimerHook                      
(NORMAL      ) SegVisualizationHook               
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_val_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
after_val:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
after_train:
(VERY_HIGH   ) RuntimeInfoHook                    
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_test:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
before_test_epoch:
(NORMAL      ) IterTimerHook                      
 -------------------- 
before_test_iter:
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_test_iter:
(NORMAL      ) IterTimerHook                      
(NORMAL      ) SegVisualizationHook               
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_test_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_test:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
after_run:
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
09/21 01:24:59 - mmengine - WARNING - The prefix is not set in metric class IoUMetric.
Loads checkpoint by local backend from path: ../checkpoint_files/ade20k/mask2former/mask2former_swin-b-in1k-384x384-pre_8xb2-160k_ade20k-640x640_20221129_125118-a4a086d2.pth
09/21 01:25:02 - mmengine - INFO - Load checkpoint from ../checkpoint_files/ade20k/mask2former/mask2former_swin-b-in1k-384x384-pre_8xb2-160k_ade20k-640x640_20221129_125118-a4a086d2.pth
09/21 01:26:29 - mmengine - INFO - Iter(test) [  50/2000]    eta: 0:56:25  time: 0.5754  data_time: 0.0024  memory: 17181  
09/21 01:26:57 - mmengine - INFO - Iter(test) [ 100/2000]    eta: 0:36:16  time: 0.5584  data_time: 0.0019  memory: 17180  
09/21 01:27:20 - mmengine - INFO - Iter(test) [ 150/2000]    eta: 0:28:18  time: 0.4563  data_time: 0.0018  memory: 17150  
09/21 01:27:44 - mmengine - INFO - Iter(test) [ 200/2000]    eta: 0:24:12  time: 0.5195  data_time: 0.0018  memory: 17194  
09/21 01:28:08 - mmengine - INFO - Iter(test) [ 250/2000]    eta: 0:21:36  time: 0.4053  data_time: 0.0029  memory: 17202  
09/21 01:28:29 - mmengine - INFO - Iter(test) [ 300/2000]    eta: 0:19:28  time: 0.3172  data_time: 0.0018  memory: 17180  
09/21 01:28:52 - mmengine - INFO - Iter(test) [ 350/2000]    eta: 0:18:03  time: 0.4553  data_time: 0.0018  memory: 17178  
09/21 01:29:12 - mmengine - INFO - Iter(test) [ 400/2000]    eta: 0:16:38  time: 0.3424  data_time: 0.0017  memory: 17177  
09/21 01:29:29 - mmengine - INFO - Iter(test) [ 450/2000]    eta: 0:15:16  time: 0.3552  data_time: 0.0017  memory: 17147  
09/21 01:29:47 - mmengine - INFO - Iter(test) [ 500/2000]    eta: 0:14:14  time: 0.3908  data_time: 0.0017  memory: 17149  
09/21 01:30:06 - mmengine - INFO - Iter(test) [ 550/2000]    eta: 0:13:20  time: 0.4362  data_time: 0.0018  memory: 17179  
09/21 01:30:22 - mmengine - INFO - Iter(test) [ 600/2000]    eta: 0:12:25  time: 0.3326  data_time: 0.0019  memory: 3938  
09/21 01:30:42 - mmengine - INFO - Iter(test) [ 650/2000]    eta: 0:11:45  time: 0.4295  data_time: 0.0016  memory: 17181  
09/21 01:31:04 - mmengine - INFO - Iter(test) [ 700/2000]    eta: 0:11:11  time: 0.3930  data_time: 0.0019  memory: 17177  
09/21 01:31:25 - mmengine - INFO - Iter(test) [ 750/2000]    eta: 0:10:38  time: 0.7199  data_time: 0.0029  memory: 17184  
09/21 01:31:42 - mmengine - INFO - Iter(test) [ 800/2000]    eta: 0:09:58  time: 0.3281  data_time: 0.0019  memory: 17151  
09/21 01:31:58 - mmengine - INFO - Iter(test) [ 850/2000]    eta: 0:09:22  time: 0.3262  data_time: 0.0019  memory: 1428  
09/21 01:32:15 - mmengine - INFO - Iter(test) [ 900/2000]    eta: 0:08:48  time: 0.3445  data_time: 0.0016  memory: 17138  
09/21 01:32:36 - mmengine - INFO - Iter(test) [ 950/2000]    eta: 0:08:20  time: 0.4710  data_time: 0.0017  memory: 17133  
09/21 01:32:52 - mmengine - INFO - Iter(test) [1000/2000]    eta: 0:07:49  time: 0.3017  data_time: 0.0017  memory: 17096  
09/21 01:33:10 - mmengine - INFO - Iter(test) [1050/2000]    eta: 0:07:20  time: 0.4072  data_time: 0.0017  memory: 17182  
09/21 01:33:29 - mmengine - INFO - Iter(test) [1100/2000]    eta: 0:06:53  time: 0.3123  data_time: 0.0018  memory: 17175  
09/21 01:33:45 - mmengine - INFO - Iter(test) [1150/2000]    eta: 0:06:26  time: 0.3213  data_time: 0.0017  memory: 17117  
09/21 01:34:02 - mmengine - INFO - Iter(test) [1200/2000]    eta: 0:05:59  time: 0.3112  data_time: 0.0017  memory: 17113  
09/21 01:34:20 - mmengine - INFO - Iter(test) [1250/2000]    eta: 0:05:34  time: 0.4030  data_time: 0.0019  memory: 17172  
09/21 01:34:35 - mmengine - INFO - Iter(test) [1300/2000]    eta: 0:05:08  time: 0.3210  data_time: 0.0018  memory: 1430  
09/21 01:34:53 - mmengine - INFO - Iter(test) [1350/2000]    eta: 0:04:44  time: 0.2990  data_time: 0.0017  memory: 17110  
09/21 01:35:12 - mmengine - INFO - Iter(test) [1400/2000]    eta: 0:04:21  time: 0.3511  data_time: 0.0020  memory: 17154  
09/21 01:35:28 - mmengine - INFO - Iter(test) [1450/2000]    eta: 0:03:57  time: 0.3968  data_time: 0.0018  memory: 17130  
09/21 01:35:45 - mmengine - INFO - Iter(test) [1500/2000]    eta: 0:03:33  time: 0.2943  data_time: 0.0028  memory: 17125  
09/21 01:36:02 - mmengine - INFO - Iter(test) [1550/2000]    eta: 0:03:11  time: 0.3285  data_time: 0.0018  memory: 17154  
09/21 01:36:18 - mmengine - INFO - Iter(test) [1600/2000]    eta: 0:02:48  time: 0.3159  data_time: 0.0019  memory: 1425  
09/21 01:36:35 - mmengine - INFO - Iter(test) [1650/2000]    eta: 0:02:26  time: 0.3052  data_time: 0.0016  memory: 17192  
09/21 01:36:54 - mmengine - INFO - Iter(test) [1700/2000]    eta: 0:02:05  time: 0.2957  data_time: 0.0017  memory: 17151  
09/21 01:37:10 - mmengine - INFO - Iter(test) [1750/2000]    eta: 0:01:43  time: 0.2945  data_time: 0.0015  memory: 17111  
09/21 01:37:26 - mmengine - INFO - Iter(test) [1800/2000]    eta: 0:01:22  time: 0.3317  data_time: 0.0019  memory: 17114  
09/21 01:37:43 - mmengine - INFO - Iter(test) [1850/2000]    eta: 0:01:01  time: 0.3240  data_time: 0.0018  memory: 1317  
09/21 01:37:59 - mmengine - INFO - Iter(test) [1900/2000]    eta: 0:00:40  time: 0.3727  data_time: 0.0022  memory: 17182  
09/21 01:38:16 - mmengine - INFO - Iter(test) [1950/2000]    eta: 0:00:20  time: 0.3156  data_time: 0.0017  memory: 17197  
09/21 01:38:33 - mmengine - INFO - Iter(test) [2000/2000]    eta: 0:00:00  time: 0.2901  data_time: 0.0016  memory: 17131  
09/21 01:38:34 - mmengine - INFO - per class results:
09/21 01:38:34 - mmengine - INFO - 
+---------------------+-------+-------+
|        Class        |  IoU  |  Acc  |
+---------------------+-------+-------+
|         wall        | 73.59 |  84.6 |
|       building      |  80.7 | 90.41 |
|         sky         | 93.17 | 97.28 |
|        floor        | 79.87 | 87.95 |
|         tree        | 72.69 | 87.24 |
|       ceiling       | 79.73 | 87.49 |
|         road        | 80.51 | 91.92 |
|         bed         | 86.99 | 93.99 |
|      windowpane     | 57.01 | 79.25 |
|        grass        | 68.08 | 79.12 |
|       cabinet       | 55.79 | 68.94 |
|       sidewalk      | 56.84 |  65.0 |
|        person       | 79.88 | 89.66 |
|        earth        | 36.28 | 61.18 |
|         door        | 41.43 | 56.83 |
|        table        | 58.62 | 73.17 |
|       mountain      | 51.21 | 64.96 |
|        plant        | 50.24 | 57.33 |
|       curtain       | 65.85 |  74.1 |
|        chair        | 55.37 | 68.64 |
|         car         | 83.88 | 90.64 |
|        water        | 46.97 | 55.04 |
|       painting      | 71.35 | 83.95 |
|         sofa        | 65.46 | 84.35 |
|        shelf        | 34.59 | 48.91 |
|        house        | 46.14 | 71.28 |
|         sea         | 52.27 | 83.19 |
|        mirror       |  64.0 | 75.43 |
|         rug         | 61.88 | 73.56 |
|        field        | 26.51 | 47.87 |
|       armchair      |  39.8 | 60.17 |
|         seat        | 61.16 | 77.78 |
|        fence        | 43.85 | 62.79 |
|         desk        | 41.24 | 73.46 |
|         rock        | 35.89 | 59.38 |
|       wardrobe      | 47.78 | 65.74 |
|         lamp        | 59.33 | 71.83 |
|       bathtub       | 67.33 |  81.0 |
|       railing       | 33.84 | 47.91 |
|       cushion       | 50.69 | 58.38 |
|         base        | 32.87 |  51.6 |
|         box         | 20.17 | 25.19 |
|        column       | 39.43 | 56.48 |
|      signboard      | 36.96 | 51.19 |
|   chest of drawers  | 29.66 | 53.92 |
|       counter       | 21.28 | 22.63 |
|         sand        | 31.41 | 48.65 |
|         sink        | 71.86 | 78.84 |
|      skyscraper     |  66.2 | 86.91 |
|      fireplace      | 76.76 | 88.64 |
|     refrigerator    | 67.79 | 81.14 |
|      grandstand     | 39.89 | 70.22 |
|         path        | 25.98 | 36.64 |
|        stairs       |  33.0 | 40.93 |
|        runway       | 62.72 | 66.49 |
|         case        | 49.53 | 75.91 |
|      pool table     |  92.5 | 96.22 |
|        pillow       | 53.86 | 68.76 |
|     screen door     |  29.2 | 32.46 |
|       stairway      | 33.58 | 52.19 |
|        river        |  7.47 | 19.91 |
|        bridge       | 63.09 | 86.13 |
|       bookcase      | 32.23 | 60.94 |
|        blind        | 31.22 | 33.65 |
|     coffee table    | 64.76 | 78.02 |
|        toilet       | 81.38 | 86.76 |
|        flower       | 38.06 | 48.86 |
|         book        | 47.96 | 67.22 |
|         hill        |  4.0  |  9.31 |
|        bench        | 44.19 | 67.02 |
|      countertop     | 49.13 | 63.15 |
|        stove        | 70.26 | 83.52 |
|         palm        | 47.91 | 57.19 |
|    kitchen island   | 28.94 |  61.4 |
|       computer      | 55.87 | 66.63 |
|     swivel chair    | 43.88 | 59.02 |
|         boat        | 58.52 | 83.46 |
|         bar         | 53.43 | 76.89 |
|    arcade machine   | 83.18 |  88.9 |
|        hovel        | 25.09 | 47.71 |
|         bus         | 84.47 | 96.44 |
|        towel        |  57.6 | 64.42 |
|        light        |  51.7 | 68.69 |
|        truck        | 36.54 |  55.3 |
|        tower        | 25.79 | 48.97 |
|      chandelier     |  60.2 | 72.62 |
|        awning       | 22.15 | 36.19 |
|     streetlight     | 30.45 | 46.32 |
|        booth        | 37.69 | 75.15 |
| television receiver | 62.63 | 72.34 |
|       airplane      | 51.49 |  65.8 |
|      dirt track     |  9.35 | 58.87 |
|       apparel       | 29.39 | 44.68 |
|         pole        | 21.72 | 35.75 |
|         land        |  5.19 |  7.81 |
|      bannister      | 15.92 |  23.5 |
|      escalator      | 18.93 |  19.3 |
|       ottoman       | 54.35 | 65.57 |
|        bottle       | 35.22 | 55.87 |
|        buffet       | 52.04 | 69.98 |
|        poster       | 17.02 | 21.56 |
|        stage        |  9.69 | 29.12 |
|         van         | 41.05 | 64.75 |
|         ship        | 20.22 | 22.14 |
|       fountain      | 35.17 | 39.36 |
|    conveyer belt    | 48.55 | 65.35 |
|        canopy       | 32.32 |  42.7 |
|        washer       | 65.99 | 72.77 |
|      plaything      | 15.71 |  17.1 |
|    swimming pool    | 33.89 |  37.8 |
|        stool        | 42.12 | 67.61 |
|        barrel       |  51.5 | 74.62 |
|        basket       | 27.71 |  35.0 |
|      waterfall      | 63.38 | 88.49 |
|         tent        | 95.54 | 98.13 |
|         bag         | 12.47 | 17.89 |
|       minibike      | 73.55 | 84.98 |
|        cradle       | 75.89 | 94.89 |
|         oven        | 48.82 | 56.65 |
|         ball        | 46.83 | 57.08 |
|         food        | 60.59 | 81.72 |
|         step        |  8.15 | 11.12 |
|         tank        |  49.2 | 56.26 |
|      trade name     | 26.56 | 32.23 |
|      microwave      | 83.58 | 93.61 |
|         pot         | 40.69 | 46.38 |
|        animal       | 63.31 | 68.28 |
|       bicycle       | 53.41 |  79.9 |
|         lake        | 56.14 | 62.52 |
|      dishwasher     | 62.15 | 66.53 |
|        screen       |  66.9 | 90.15 |
|       blanket       |  5.18 |  6.16 |
|      sculpture      | 36.49 | 60.46 |
|         hood        | 56.77 | 64.13 |
|        sconce       | 41.42 | 58.88 |
|         vase        | 36.99 | 56.74 |
|    traffic light    | 35.47 |  53.0 |
|         tray        | 15.99 | 20.87 |
|        ashcan       | 33.78 | 46.42 |
|         fan         | 54.54 | 81.16 |
|         pier        |  16.9 | 18.64 |
|      crt screen     |  3.55 | 10.73 |
|        plate        | 58.42 | 75.07 |
|       monitor       |  1.86 |  2.87 |
|    bulletin board   | 37.66 | 54.48 |
|        shower       | 17.86 | 39.34 |
|       radiator      | 51.89 | 58.07 |
|        glass        | 12.24 | 15.32 |
|        clock        | 29.19 | 39.04 |
|         flag        | 45.41 | 51.09 |
+---------------------+-------+-------+
09/21 01:38:34 - mmengine - INFO - Iter(test) [2000/2000]    aAcc: 80.7200  mIoU: 46.5700  mAcc: 60.2300  data_time: 0.0023  time: 0.4053
Finished processing corruption type: shot_noise
Processing corruption type: impulse_noise
09/21 01:40:36 - mmengine - INFO - 
------------------------------------------------------------
System environment:
    sys.platform: linux
    Python: 3.10.13 | packaged by conda-forge | (main, Dec 23 2023, 15:36:39) [GCC 12.3.0]
    CUDA available: True
    MUSA available: False
    numpy_random_seed: 1992595330
    GPU 0: Tesla V100-SXM2-32GB
    CUDA_HOME: /opt/bwhpc/common/devel/cuda/11.7
    NVCC: Cuda compilation tools, release 11.7, V11.7.99
    GCC: gcc (GCC) 8.5.0 20210514 (Red Hat 8.5.0-18)
    PyTorch: 1.13.1
    PyTorch compiling details: PyTorch built with:
  - GCC 9.3
  - C++ Version: 201402
  - Intel(R) oneAPI Math Kernel Library Version 2023.1-Product Build 20230303 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v2.6.0 (Git Hash 52b5f107dd9cf10910aaa19cb47f3abf9b349815)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - LAPACK is enabled (usually provided by MKL)
  - NNPACK is enabled
  - CPU capability usage: AVX2
  - CUDA Runtime 11.7
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_61,code=sm_61;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86;-gencode;arch=compute_37,code=compute_37
  - CuDNN 8.5
  - Magma 2.6.1
  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.7, CUDNN_VERSION=8.5.0, CXX_COMPILER=/opt/rh/devtoolset-9/root/usr/bin/c++, CXX_FLAGS= -fabi-version=11 -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -DEDGE_PROFILER_USE_KINETO -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Werror=non-virtual-dtor -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wunused-local-typedefs -Wno-unused-parameter -Wno-unused-function -Wno-unused-result -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Werror=cast-function-type -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.13.1, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, USE_ROCM=OFF, 

    TorchVision: 0.14.1
    OpenCV: 3.4.18
    MMEngine: 0.10.4

Runtime environment:
    cudnn_benchmark: True
    mp_cfg: {'mp_start_method': 'fork', 'opencv_num_threads': 0}
    dist_cfg: {'backend': 'nccl'}
    seed: 1992595330
    Distributed launcher: none
    Distributed training: False
    GPU number: 1
------------------------------------------------------------

09/21 01:40:36 - mmengine - INFO - Config:
auto_scale_lr = dict(base_batch_size=16, enable=False)
backbone_embed_multi = dict(decay_mult=0.0, lr_mult=0.1)
backbone_norm_multi = dict(decay_mult=0.0, lr_mult=0.1)
crop_size = (
    640,
    640,
)
custom_keys = dict({
    'absolute_pos_embed':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone':
    dict(decay_mult=1.0, lr_mult=0.1),
    'backbone.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.patch_embed.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.0.blocks.0.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.0.blocks.1.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.0.downsample.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.1.blocks.0.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.1.blocks.1.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.1.downsample.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.0.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.1.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.10.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.11.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.12.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.13.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.14.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.15.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.16.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.17.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.2.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.3.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.4.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.5.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.6.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.7.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.8.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.9.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.downsample.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.3.blocks.0.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.3.blocks.1.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'level_embed':
    dict(decay_mult=0.0, lr_mult=1.0),
    'query_embed':
    dict(decay_mult=0.0, lr_mult=1.0),
    'query_feat':
    dict(decay_mult=0.0, lr_mult=1.0),
    'relative_position_bias_table':
    dict(decay_mult=0.0, lr_mult=0.1)
})
data_root = 'data/ade/ADEChallengeData2016'
dataset_type = 'ADE20KDataset'
default_hooks = dict(
    checkpoint=dict(
        by_epoch=False, interval=5000, save_best='mIoU',
        type='CheckpointHook'),
    logger=dict(interval=50, log_metric_by_epoch=False, type='LoggerHook'),
    param_scheduler=dict(type='ParamSchedulerHook'),
    sampler_seed=dict(type='DistSamplerSeedHook'),
    timer=dict(type='IterTimerHook'),
    visualization=dict(type='SegVisualizationHook'))
default_scope = 'mmseg'
depths = [
    2,
    2,
    18,
    2,
]
embed_multi = dict(decay_mult=0.0, lr_mult=1.0)
env_cfg = dict(
    cudnn_benchmark=True,
    dist_cfg=dict(backend='nccl'),
    mp_cfg=dict(mp_start_method='fork', opencv_num_threads=0))
img_ratios = [
    0.5,
    0.75,
    1.0,
    1.25,
    1.5,
    1.75,
]
launcher = 'none'
load_from = '../checkpoint_files/ade20k/mask2former/mask2former_swin-b-in1k-384x384-pre_8xb2-160k_ade20k-640x640_20221129_125118-a4a086d2.pth'
log_level = 'INFO'
log_processor = dict(by_epoch=False)
model = dict(
    backbone=dict(
        attn_drop_rate=0.0,
        depths=[
            2,
            2,
            18,
            2,
        ],
        drop_path_rate=0.3,
        drop_rate=0.0,
        embed_dims=128,
        frozen_stages=-1,
        init_cfg=dict(
            checkpoint=
            'https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/swin/swin_base_patch4_window12_384_20220317-55b0104a.pth',
            type='Pretrained'),
        mlp_ratio=4,
        num_heads=[
            4,
            8,
            16,
            32,
        ],
        out_indices=(
            0,
            1,
            2,
            3,
        ),
        patch_norm=True,
        pretrain_img_size=384,
        qk_scale=None,
        qkv_bias=True,
        type='SwinTransformer',
        window_size=12,
        with_cp=False),
    data_preprocessor=dict(
        bgr_to_rgb=True,
        corruption='impulse_noise',
        mean=[
            123.675,
            116.28,
            103.53,
        ],
        pad_val=0,
        seg_pad_val=255,
        size=(
            640,
            640,
        ),
        std=[
            58.395,
            57.12,
            57.375,
        ],
        type='SegDataPreProcessor'),
    decode_head=dict(
        align_corners=False,
        enforce_decoder_input_project=False,
        feat_channels=256,
        in_channels=[
            128,
            256,
            512,
            1024,
        ],
        loss_cls=dict(
            class_weight=[
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                0.1,
            ],
            loss_weight=2.0,
            reduction='mean',
            type='mmdet.CrossEntropyLoss',
            use_sigmoid=False),
        loss_dice=dict(
            activate=True,
            eps=1.0,
            loss_weight=5.0,
            naive_dice=True,
            reduction='mean',
            type='mmdet.DiceLoss',
            use_sigmoid=True),
        loss_mask=dict(
            loss_weight=5.0,
            reduction='mean',
            type='mmdet.CrossEntropyLoss',
            use_sigmoid=True),
        num_classes=150,
        num_queries=100,
        num_transformer_feat_level=3,
        out_channels=256,
        pixel_decoder=dict(
            act_cfg=dict(type='ReLU'),
            encoder=dict(
                init_cfg=None,
                layer_cfg=dict(
                    ffn_cfg=dict(
                        act_cfg=dict(inplace=True, type='ReLU'),
                        embed_dims=256,
                        feedforward_channels=1024,
                        ffn_drop=0.0,
                        num_fcs=2),
                    self_attn_cfg=dict(
                        batch_first=True,
                        dropout=0.0,
                        embed_dims=256,
                        im2col_step=64,
                        init_cfg=None,
                        norm_cfg=None,
                        num_heads=8,
                        num_levels=3,
                        num_points=4)),
                num_layers=6),
            init_cfg=None,
            norm_cfg=dict(num_groups=32, type='GN'),
            num_outs=3,
            positional_encoding=dict(normalize=True, num_feats=128),
            type='mmdet.MSDeformAttnPixelDecoder'),
        positional_encoding=dict(normalize=True, num_feats=128),
        strides=[
            4,
            8,
            16,
            32,
        ],
        train_cfg=dict(
            assigner=dict(
                match_costs=[
                    dict(type='mmdet.ClassificationCost', weight=2.0),
                    dict(
                        type='mmdet.CrossEntropyLossCost',
                        use_sigmoid=True,
                        weight=5.0),
                    dict(
                        eps=1.0,
                        pred_act=True,
                        type='mmdet.DiceCost',
                        weight=5.0),
                ],
                type='mmdet.HungarianAssigner'),
            importance_sample_ratio=0.75,
            num_points=12544,
            oversample_ratio=3.0,
            sampler=dict(type='mmdet.MaskPseudoSampler')),
        transformer_decoder=dict(
            init_cfg=None,
            layer_cfg=dict(
                cross_attn_cfg=dict(
                    attn_drop=0.0,
                    batch_first=True,
                    dropout_layer=None,
                    embed_dims=256,
                    num_heads=8,
                    proj_drop=0.0),
                ffn_cfg=dict(
                    act_cfg=dict(inplace=True, type='ReLU'),
                    add_identity=True,
                    dropout_layer=None,
                    embed_dims=256,
                    feedforward_channels=2048,
                    ffn_drop=0.0,
                    num_fcs=2),
                self_attn_cfg=dict(
                    attn_drop=0.0,
                    batch_first=True,
                    dropout_layer=None,
                    embed_dims=256,
                    num_heads=8,
                    proj_drop=0.0)),
            num_layers=9,
            return_intermediate=True),
        type='Mask2FormerHead'),
    test_cfg=dict(mode='whole'),
    train_cfg=dict(),
    type='EncoderDecoder')
num_classes = 150
optim_wrapper = dict(
    clip_grad=dict(max_norm=0.01, norm_type=2),
    optimizer=dict(
        betas=(
            0.9,
            0.999,
        ),
        eps=1e-08,
        lr=0.0001,
        type='AdamW',
        weight_decay=0.05),
    paramwise_cfg=dict(
        custom_keys=dict({
            'absolute_pos_embed':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone':
            dict(decay_mult=1.0, lr_mult=0.1),
            'backbone.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.patch_embed.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.0.blocks.0.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.0.blocks.1.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.0.downsample.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.1.blocks.0.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.1.blocks.1.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.1.downsample.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.0.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.1.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.10.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.11.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.12.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.13.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.14.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.15.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.16.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.17.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.2.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.3.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.4.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.5.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.6.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.7.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.8.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.9.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.downsample.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.3.blocks.0.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.3.blocks.1.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'level_embed':
            dict(decay_mult=0.0, lr_mult=1.0),
            'query_embed':
            dict(decay_mult=0.0, lr_mult=1.0),
            'query_feat':
            dict(decay_mult=0.0, lr_mult=1.0),
            'relative_position_bias_table':
            dict(decay_mult=0.0, lr_mult=0.1)
        }),
        norm_decay_mult=0.0),
    type='OptimWrapper')
optimizer = dict(
    betas=(
        0.9,
        0.999,
    ),
    eps=1e-08,
    lr=0.0001,
    type='AdamW',
    weight_decay=0.05)
param_scheduler = [
    dict(
        begin=0,
        by_epoch=False,
        end=160000,
        eta_min=0,
        power=0.9,
        type='PolyLR'),
]
pretrained = 'https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/swin/swin_base_patch4_window12_384_20220317-55b0104a.pth'
resume = False
test_cfg = dict(type='TestLoop')
test_dataloader = dict(
    batch_size=1,
    dataset=dict(
        data_prefix=dict(
            img_path='images/validation',
            seg_map_path='annotations/validation'),
        data_root='data/ade/ADEChallengeData2016',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(keep_ratio=True, scale=(
                2560,
                640,
            ), type='Resize'),
            dict(reduce_zero_label=True, type='LoadAnnotations'),
            dict(type='PackSegInputs'),
        ],
        type='ADE20KDataset'),
    num_workers=4,
    persistent_workers=True,
    sampler=dict(shuffle=False, type='DefaultSampler'))
test_evaluator = dict(
    iou_metrics=[
        'mIoU',
    ], type='IoUMetric')
test_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(keep_ratio=True, scale=(
        2560,
        640,
    ), type='Resize'),
    dict(reduce_zero_label=True, type='LoadAnnotations'),
    dict(type='PackSegInputs'),
]
train_cfg = dict(
    max_iters=160000, type='IterBasedTrainLoop', val_interval=5000)
train_dataloader = dict(
    batch_size=2,
    dataset=dict(
        data_prefix=dict(
            img_path='images/training', seg_map_path='annotations/training'),
        data_root='data/ade/ADEChallengeData2016',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(reduce_zero_label=True, type='LoadAnnotations'),
            dict(
                max_size=2560,
                resize_type='ResizeShortestEdge',
                scales=[
                    320,
                    384,
                    448,
                    512,
                    576,
                    640,
                    704,
                    768,
                    832,
                    896,
                    960,
                    1024,
                    1088,
                    1152,
                    1216,
                    1280,
                ],
                type='RandomChoiceResize'),
            dict(
                cat_max_ratio=0.75, crop_size=(
                    640,
                    640,
                ), type='RandomCrop'),
            dict(prob=0.5, type='RandomFlip'),
            dict(type='PhotoMetricDistortion'),
            dict(type='PackSegInputs'),
        ],
        type='ADE20KDataset'),
    num_workers=4,
    persistent_workers=True,
    sampler=dict(shuffle=True, type='InfiniteSampler'))
train_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(reduce_zero_label=True, type='LoadAnnotations'),
    dict(
        max_size=2560,
        resize_type='ResizeShortestEdge',
        scales=[
            320,
            384,
            448,
            512,
            576,
            640,
            704,
            768,
            832,
            896,
            960,
            1024,
            1088,
            1152,
            1216,
            1280,
        ],
        type='RandomChoiceResize'),
    dict(cat_max_ratio=0.75, crop_size=(
        640,
        640,
    ), type='RandomCrop'),
    dict(prob=0.5, type='RandomFlip'),
    dict(type='PhotoMetricDistortion'),
    dict(type='PackSegInputs'),
]
tta_model = dict(type='SegTTAModel')
tta_pipeline = [
    dict(backend_args=None, type='LoadImageFromFile'),
    dict(
        transforms=[
            [
                dict(keep_ratio=True, scale_factor=0.5, type='Resize'),
                dict(keep_ratio=True, scale_factor=0.75, type='Resize'),
                dict(keep_ratio=True, scale_factor=1.0, type='Resize'),
                dict(keep_ratio=True, scale_factor=1.25, type='Resize'),
                dict(keep_ratio=True, scale_factor=1.5, type='Resize'),
                dict(keep_ratio=True, scale_factor=1.75, type='Resize'),
            ],
            [
                dict(direction='horizontal', prob=0.0, type='RandomFlip'),
                dict(direction='horizontal', prob=1.0, type='RandomFlip'),
            ],
            [
                dict(type='LoadAnnotations'),
            ],
            [
                dict(type='PackSegInputs'),
            ],
        ],
        type='TestTimeAug'),
]
val_cfg = dict(type='ValLoop')
val_dataloader = dict(
    batch_size=1,
    dataset=dict(
        data_prefix=dict(
            img_path='images/validation',
            seg_map_path='annotations/validation'),
        data_root='data/ade/ADEChallengeData2016',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(keep_ratio=True, scale=(
                2560,
                640,
            ), type='Resize'),
            dict(reduce_zero_label=True, type='LoadAnnotations'),
            dict(type='PackSegInputs'),
        ],
        type='ADE20KDataset'),
    num_workers=4,
    persistent_workers=True,
    sampler=dict(shuffle=False, type='DefaultSampler'))
val_evaluator = dict(
    iou_metrics=[
        'mIoU',
    ], type='IoUMetric')
vis_backends = [
    dict(type='LocalVisBackend'),
]
visualizer = dict(
    name='visualizer',
    type='SegLocalVisualizer',
    vis_backends=[
        dict(type='LocalVisBackend'),
    ])
work_dir = '../corruptions/work_dirs/ade20k/mask2former/mask2former_swin-b-in1k-384x384-pre_8xb2-160k_ade20k-640x640/impulse_noise'

09/21 01:41:19 - mmengine - INFO - Distributed training is not used, all SyncBatchNorm (SyncBN) layers in the model will be automatically reverted to BatchNormXd layers if they are used.
09/21 01:41:20 - mmengine - INFO - Hooks will be executed in the following order:
before_run:
(VERY_HIGH   ) RuntimeInfoHook                    
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
before_train:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_train_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(NORMAL      ) DistSamplerSeedHook                
 -------------------- 
before_train_iter:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_train_iter:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(NORMAL      ) SegVisualizationHook               
(BELOW_NORMAL) LoggerHook                         
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
after_train_epoch:
(NORMAL      ) IterTimerHook                      
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_val:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
before_val_epoch:
(NORMAL      ) IterTimerHook                      
 -------------------- 
before_val_iter:
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_val_iter:
(NORMAL      ) IterTimerHook                      
(NORMAL      ) SegVisualizationHook               
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_val_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
after_val:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
after_train:
(VERY_HIGH   ) RuntimeInfoHook                    
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_test:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
before_test_epoch:
(NORMAL      ) IterTimerHook                      
 -------------------- 
before_test_iter:
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_test_iter:
(NORMAL      ) IterTimerHook                      
(NORMAL      ) SegVisualizationHook               
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_test_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_test:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
after_run:
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
09/21 01:41:21 - mmengine - WARNING - The prefix is not set in metric class IoUMetric.
Loads checkpoint by local backend from path: ../checkpoint_files/ade20k/mask2former/mask2former_swin-b-in1k-384x384-pre_8xb2-160k_ade20k-640x640_20221129_125118-a4a086d2.pth
09/21 01:41:24 - mmengine - INFO - Load checkpoint from ../checkpoint_files/ade20k/mask2former/mask2former_swin-b-in1k-384x384-pre_8xb2-160k_ade20k-640x640_20221129_125118-a4a086d2.pth
09/21 01:42:58 - mmengine - INFO - Iter(test) [  50/2000]    eta: 1:00:52  time: 0.4140  data_time: 0.0018  memory: 17181  
09/21 01:43:18 - mmengine - INFO - Iter(test) [ 100/2000]    eta: 0:36:01  time: 0.3960  data_time: 0.0050  memory: 17180  
09/21 01:43:34 - mmengine - INFO - Iter(test) [ 150/2000]    eta: 0:26:37  time: 0.3081  data_time: 0.0018  memory: 17150  
09/21 01:43:49 - mmengine - INFO - Iter(test) [ 200/2000]    eta: 0:21:47  time: 0.3601  data_time: 0.0018  memory: 17194  
09/21 01:44:07 - mmengine - INFO - Iter(test) [ 250/2000]    eta: 0:19:00  time: 0.2577  data_time: 0.0017  memory: 17202  
09/21 01:44:23 - mmengine - INFO - Iter(test) [ 300/2000]    eta: 0:16:51  time: 0.1697  data_time: 0.0019  memory: 17180  
09/21 01:44:38 - mmengine - INFO - Iter(test) [ 350/2000]    eta: 0:15:15  time: 0.3006  data_time: 0.0017  memory: 17178  
09/21 01:44:50 - mmengine - INFO - Iter(test) [ 400/2000]    eta: 0:13:42  time: 0.1843  data_time: 0.0037  memory: 17177  
09/21 01:44:59 - mmengine - INFO - Iter(test) [ 450/2000]    eta: 0:12:20  time: 0.2108  data_time: 0.0017  memory: 17147  
09/21 01:45:10 - mmengine - INFO - Iter(test) [ 500/2000]    eta: 0:11:18  time: 0.2434  data_time: 0.0017  memory: 17149  
09/21 01:45:21 - mmengine - INFO - Iter(test) [ 550/2000]    eta: 0:10:23  time: 0.2733  data_time: 0.0018  memory: 17179  
09/21 01:45:29 - mmengine - INFO - Iter(test) [ 600/2000]    eta: 0:09:31  time: 0.1691  data_time: 0.0019  memory: 3938  
09/21 01:45:41 - mmengine - INFO - Iter(test) [ 650/2000]    eta: 0:08:53  time: 0.2912  data_time: 0.0017  memory: 17181  
09/21 01:45:55 - mmengine - INFO - Iter(test) [ 700/2000]    eta: 0:08:23  time: 0.2303  data_time: 0.0018  memory: 17177  
09/21 01:46:08 - mmengine - INFO - Iter(test) [ 750/2000]    eta: 0:07:53  time: 0.5734  data_time: 0.0015  memory: 17184  
09/21 01:46:17 - mmengine - INFO - Iter(test) [ 800/2000]    eta: 0:07:19  time: 0.1513  data_time: 0.0016  memory: 17151  
09/21 01:46:25 - mmengine - INFO - Iter(test) [ 850/2000]    eta: 0:06:46  time: 0.1525  data_time: 0.0016  memory: 1428  
09/21 01:46:34 - mmengine - INFO - Iter(test) [ 900/2000]    eta: 0:06:18  time: 0.1938  data_time: 0.0014  memory: 17138  
09/21 01:46:46 - mmengine - INFO - Iter(test) [ 950/2000]    eta: 0:05:55  time: 0.3150  data_time: 0.0017  memory: 17133  
09/21 01:46:54 - mmengine - INFO - Iter(test) [1000/2000]    eta: 0:05:30  time: 0.1565  data_time: 0.0017  memory: 17096  
09/21 01:47:04 - mmengine - INFO - Iter(test) [1050/2000]    eta: 0:05:07  time: 0.2467  data_time: 0.0018  memory: 17182  
09/21 01:47:15 - mmengine - INFO - Iter(test) [1100/2000]    eta: 0:04:47  time: 0.1578  data_time: 0.0017  memory: 17175  
09/21 01:47:24 - mmengine - INFO - Iter(test) [1150/2000]    eta: 0:04:25  time: 0.1620  data_time: 0.0017  memory: 17117  
09/21 01:47:33 - mmengine - INFO - Iter(test) [1200/2000]    eta: 0:04:05  time: 0.1584  data_time: 0.0017  memory: 17113  
09/21 01:47:43 - mmengine - INFO - Iter(test) [1250/2000]    eta: 0:03:47  time: 0.2379  data_time: 0.0017  memory: 17172  
09/21 01:47:51 - mmengine - INFO - Iter(test) [1300/2000]    eta: 0:03:28  time: 0.1636  data_time: 0.0017  memory: 1430  
09/21 01:48:01 - mmengine - INFO - Iter(test) [1350/2000]    eta: 0:03:11  time: 0.1522  data_time: 0.0017  memory: 17110  
09/21 01:48:13 - mmengine - INFO - Iter(test) [1400/2000]    eta: 0:02:54  time: 0.1797  data_time: 0.0017  memory: 17154  
09/21 01:48:21 - mmengine - INFO - Iter(test) [1450/2000]    eta: 0:02:38  time: 0.2293  data_time: 0.0017  memory: 17130  
09/21 01:48:30 - mmengine - INFO - Iter(test) [1500/2000]    eta: 0:02:21  time: 0.1541  data_time: 0.0017  memory: 17125  
09/21 01:48:39 - mmengine - INFO - Iter(test) [1550/2000]    eta: 0:02:06  time: 0.1660  data_time: 0.0018  memory: 17154  
09/21 01:48:47 - mmengine - INFO - Iter(test) [1600/2000]    eta: 0:01:50  time: 0.1626  data_time: 0.0019  memory: 1425  
09/21 01:48:56 - mmengine - INFO - Iter(test) [1650/2000]    eta: 0:01:35  time: 0.1540  data_time: 0.0017  memory: 17192  
09/21 01:49:09 - mmengine - INFO - Iter(test) [1700/2000]    eta: 0:01:22  time: 0.1650  data_time: 0.0018  memory: 17151  
09/21 01:49:19 - mmengine - INFO - Iter(test) [1750/2000]    eta: 0:01:07  time: 0.1597  data_time: 0.0016  memory: 17111  
09/21 01:49:27 - mmengine - INFO - Iter(test) [1800/2000]    eta: 0:00:53  time: 0.1665  data_time: 0.0019  memory: 17114  
09/21 01:49:36 - mmengine - INFO - Iter(test) [1850/2000]    eta: 0:00:39  time: 0.1643  data_time: 0.0018  memory: 1317  
09/21 01:49:45 - mmengine - INFO - Iter(test) [1900/2000]    eta: 0:00:26  time: 0.2222  data_time: 0.0018  memory: 17182  
09/21 01:49:54 - mmengine - INFO - Iter(test) [1950/2000]    eta: 0:00:13  time: 0.1580  data_time: 0.0017  memory: 17197  
09/21 01:50:04 - mmengine - INFO - Iter(test) [2000/2000]    eta: 0:00:00  time: 0.1498  data_time: 0.0016  memory: 17131  
09/21 01:50:04 - mmengine - INFO - per class results:
09/21 01:50:04 - mmengine - INFO - 
+---------------------+-------+-------+
|        Class        |  IoU  |  Acc  |
+---------------------+-------+-------+
|         wall        | 74.99 | 86.02 |
|       building      | 80.85 | 90.63 |
|         sky         |  93.9 | 97.59 |
|        floor        | 80.79 | 88.33 |
|         tree        | 74.04 | 86.99 |
|       ceiling       |  80.7 | 87.32 |
|         road        | 80.65 | 89.71 |
|         bed         |  87.6 | 93.84 |
|      windowpane     | 60.38 | 79.67 |
|        grass        | 67.96 | 84.49 |
|       cabinet       | 55.08 | 70.06 |
|       sidewalk      | 60.38 | 71.09 |
|        person       | 80.05 | 90.38 |
|        earth        |  37.2 | 57.41 |
|         door        | 40.35 | 54.71 |
|        table        | 59.38 | 71.24 |
|       mountain      | 51.99 | 63.72 |
|        plant        | 50.47 | 60.48 |
|       curtain       | 67.85 | 77.73 |
|        chair        | 55.34 | 69.09 |
|         car         | 84.97 |  92.1 |
|        water        | 45.54 | 57.87 |
|       painting      | 72.02 | 82.34 |
|         sofa        | 63.01 | 84.42 |
|        shelf        | 35.34 | 50.74 |
|        house        | 43.82 |  70.1 |
|         sea         | 49.89 | 81.05 |
|        mirror       | 67.12 | 81.05 |
|         rug         | 59.49 | 73.04 |
|        field        | 25.78 | 39.36 |
|       armchair      | 38.13 | 55.58 |
|         seat        | 56.87 |  71.4 |
|        fence        |  35.9 |  49.3 |
|         desk        |  41.6 | 72.68 |
|         rock        | 35.91 | 62.39 |
|       wardrobe      | 48.24 | 66.63 |
|         lamp        | 62.97 | 74.08 |
|       bathtub       | 70.26 | 79.43 |
|       railing       | 34.96 | 55.03 |
|       cushion       | 57.62 | 64.09 |
|         base        | 35.28 | 56.81 |
|         box         | 22.82 | 29.73 |
|        column       | 39.45 | 55.64 |
|      signboard      | 35.81 | 53.46 |
|   chest of drawers  | 37.16 | 58.59 |
|       counter       | 20.78 | 22.73 |
|         sand        | 31.81 |  49.3 |
|         sink        | 71.43 | 77.47 |
|      skyscraper     | 50.32 | 62.31 |
|      fireplace      | 72.08 | 87.41 |
|     refrigerator    | 68.39 | 81.65 |
|      grandstand     | 54.16 | 70.11 |
|         path        | 22.78 | 35.65 |
|        stairs       | 44.32 |  60.5 |
|        runway       | 65.28 | 76.52 |
|         case        | 48.92 | 77.54 |
|      pool table     | 91.57 | 94.19 |
|        pillow       | 56.53 | 73.29 |
|     screen door     | 33.59 | 35.71 |
|       stairway      | 32.09 | 46.36 |
|        river        |  8.35 | 16.87 |
|        bridge       | 65.47 | 81.04 |
|       bookcase      | 28.57 | 46.62 |
|        blind        | 37.39 | 43.14 |
|     coffee table    | 60.56 | 78.27 |
|        toilet       | 82.01 | 87.32 |
|        flower       |  36.6 | 50.49 |
|         book        | 45.78 | 62.68 |
|         hill        |  5.12 | 15.37 |
|        bench        | 49.65 | 63.65 |
|      countertop     |  59.1 | 76.81 |
|        stove        | 76.66 | 87.48 |
|         palm        | 49.69 | 63.39 |
|    kitchen island   | 36.35 | 74.55 |
|       computer      | 61.95 |  73.7 |
|     swivel chair    | 44.16 | 59.98 |
|         boat        | 73.41 | 84.54 |
|         bar         | 56.15 | 80.13 |
|    arcade machine   | 47.91 | 52.54 |
|        hovel        |  7.52 | 15.42 |
|         bus         | 83.42 | 94.96 |
|        towel        | 64.55 | 71.11 |
|        light        | 58.42 | 74.19 |
|        truck        | 40.59 | 60.83 |
|        tower        | 26.13 | 52.69 |
|      chandelier     | 63.76 | 75.25 |
|        awning       | 28.98 | 39.31 |
|     streetlight     | 31.22 | 47.17 |
|        booth        |  44.5 | 68.98 |
| television receiver |  65.2 | 75.99 |
|       airplane      | 63.22 | 73.92 |
|      dirt track     |  5.35 | 47.03 |
|       apparel       |  27.2 | 38.29 |
|         pole        | 25.78 |  42.1 |
|         land        |  4.35 |  5.86 |
|      bannister      | 15.42 | 25.09 |
|      escalator      | 17.27 | 18.57 |
|       ottoman       | 47.68 | 62.93 |
|        bottle       | 33.31 | 42.97 |
|        buffet       | 48.77 | 71.41 |
|        poster       | 30.49 | 38.47 |
|        stage        | 15.46 | 22.67 |
|         van         |  49.0 | 70.07 |
|         ship        |  9.73 | 10.47 |
|       fountain      | 42.16 | 44.85 |
|    conveyer belt    | 46.98 | 61.07 |
|        canopy       |  28.7 | 40.98 |
|        washer       | 67.07 | 73.35 |
|      plaything      | 16.74 | 23.17 |
|    swimming pool    |  26.9 | 39.57 |
|        stool        | 36.44 |  67.7 |
|        barrel       | 48.73 | 74.56 |
|        basket       | 30.27 | 41.38 |
|      waterfall      |  46.3 | 50.99 |
|         tent        |  80.8 | 97.65 |
|         bag         | 17.63 | 28.61 |
|       minibike      | 68.03 | 85.47 |
|        cradle       | 83.61 | 95.57 |
|         oven        | 49.16 | 66.13 |
|         ball        | 48.71 | 63.46 |
|         food        | 60.19 | 78.41 |
|         step        |  9.41 | 12.07 |
|         tank        | 52.25 | 60.94 |
|      trade name     | 23.62 | 29.92 |
|      microwave      | 81.67 | 92.68 |
|         pot         | 44.01 | 52.65 |
|        animal       | 69.14 | 72.38 |
|       bicycle       | 56.61 | 82.03 |
|         lake        |  0.0  |  0.0  |
|      dishwasher     | 64.68 | 71.54 |
|        screen       | 66.89 | 86.73 |
|       blanket       | 10.45 | 13.49 |
|      sculpture      |  44.5 | 66.57 |
|         hood        | 60.65 | 72.93 |
|        sconce       | 41.49 | 65.21 |
|         vase        | 39.75 | 59.06 |
|    traffic light    | 35.25 |  57.3 |
|         tray        | 20.81 | 28.92 |
|        ashcan       | 31.97 | 49.06 |
|         fan         | 56.27 | 80.12 |
|         pier        | 53.21 | 61.53 |
|      crt screen     |  4.48 | 13.11 |
|        plate        | 57.84 | 75.63 |
|       monitor       |  1.88 |  3.52 |
|    bulletin board   | 39.14 | 64.21 |
|        shower       |  2.73 | 15.56 |
|       radiator      | 53.67 |  66.0 |
|        glass        | 15.93 | 18.03 |
|        clock        | 30.77 | 42.49 |
|         flag        |  68.9 | 77.94 |
+---------------------+-------+-------+
09/21 01:50:04 - mmengine - INFO - Iter(test) [2000/2000]    aAcc: 81.2000  mIoU: 47.1500  mAcc: 60.7100  data_time: 0.0024  time: 0.2597
Finished processing corruption type: impulse_noise
Processing corruption type: defocus_blur
09/21 01:51:49 - mmengine - INFO - 
------------------------------------------------------------
System environment:
    sys.platform: linux
    Python: 3.10.13 | packaged by conda-forge | (main, Dec 23 2023, 15:36:39) [GCC 12.3.0]
    CUDA available: True
    MUSA available: False
    numpy_random_seed: 836912296
    GPU 0: Tesla V100-SXM2-32GB
    CUDA_HOME: /opt/bwhpc/common/devel/cuda/11.7
    NVCC: Cuda compilation tools, release 11.7, V11.7.99
    GCC: gcc (GCC) 8.5.0 20210514 (Red Hat 8.5.0-18)
    PyTorch: 1.13.1
    PyTorch compiling details: PyTorch built with:
  - GCC 9.3
  - C++ Version: 201402
  - Intel(R) oneAPI Math Kernel Library Version 2023.1-Product Build 20230303 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v2.6.0 (Git Hash 52b5f107dd9cf10910aaa19cb47f3abf9b349815)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - LAPACK is enabled (usually provided by MKL)
  - NNPACK is enabled
  - CPU capability usage: AVX2
  - CUDA Runtime 11.7
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_61,code=sm_61;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86;-gencode;arch=compute_37,code=compute_37
  - CuDNN 8.5
  - Magma 2.6.1
  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.7, CUDNN_VERSION=8.5.0, CXX_COMPILER=/opt/rh/devtoolset-9/root/usr/bin/c++, CXX_FLAGS= -fabi-version=11 -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -DEDGE_PROFILER_USE_KINETO -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Werror=non-virtual-dtor -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wunused-local-typedefs -Wno-unused-parameter -Wno-unused-function -Wno-unused-result -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Werror=cast-function-type -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.13.1, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, USE_ROCM=OFF, 

    TorchVision: 0.14.1
    OpenCV: 3.4.18
    MMEngine: 0.10.4

Runtime environment:
    cudnn_benchmark: True
    mp_cfg: {'mp_start_method': 'fork', 'opencv_num_threads': 0}
    dist_cfg: {'backend': 'nccl'}
    seed: 836912296
    Distributed launcher: none
    Distributed training: False
    GPU number: 1
------------------------------------------------------------

09/21 01:51:50 - mmengine - INFO - Config:
auto_scale_lr = dict(base_batch_size=16, enable=False)
backbone_embed_multi = dict(decay_mult=0.0, lr_mult=0.1)
backbone_norm_multi = dict(decay_mult=0.0, lr_mult=0.1)
crop_size = (
    640,
    640,
)
custom_keys = dict({
    'absolute_pos_embed':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone':
    dict(decay_mult=1.0, lr_mult=0.1),
    'backbone.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.patch_embed.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.0.blocks.0.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.0.blocks.1.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.0.downsample.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.1.blocks.0.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.1.blocks.1.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.1.downsample.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.0.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.1.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.10.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.11.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.12.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.13.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.14.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.15.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.16.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.17.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.2.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.3.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.4.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.5.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.6.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.7.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.8.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.9.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.downsample.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.3.blocks.0.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.3.blocks.1.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'level_embed':
    dict(decay_mult=0.0, lr_mult=1.0),
    'query_embed':
    dict(decay_mult=0.0, lr_mult=1.0),
    'query_feat':
    dict(decay_mult=0.0, lr_mult=1.0),
    'relative_position_bias_table':
    dict(decay_mult=0.0, lr_mult=0.1)
})
data_root = 'data/ade/ADEChallengeData2016'
dataset_type = 'ADE20KDataset'
default_hooks = dict(
    checkpoint=dict(
        by_epoch=False, interval=5000, save_best='mIoU',
        type='CheckpointHook'),
    logger=dict(interval=50, log_metric_by_epoch=False, type='LoggerHook'),
    param_scheduler=dict(type='ParamSchedulerHook'),
    sampler_seed=dict(type='DistSamplerSeedHook'),
    timer=dict(type='IterTimerHook'),
    visualization=dict(type='SegVisualizationHook'))
default_scope = 'mmseg'
depths = [
    2,
    2,
    18,
    2,
]
embed_multi = dict(decay_mult=0.0, lr_mult=1.0)
env_cfg = dict(
    cudnn_benchmark=True,
    dist_cfg=dict(backend='nccl'),
    mp_cfg=dict(mp_start_method='fork', opencv_num_threads=0))
img_ratios = [
    0.5,
    0.75,
    1.0,
    1.25,
    1.5,
    1.75,
]
launcher = 'none'
load_from = '../checkpoint_files/ade20k/mask2former/mask2former_swin-b-in1k-384x384-pre_8xb2-160k_ade20k-640x640_20221129_125118-a4a086d2.pth'
log_level = 'INFO'
log_processor = dict(by_epoch=False)
model = dict(
    backbone=dict(
        attn_drop_rate=0.0,
        depths=[
            2,
            2,
            18,
            2,
        ],
        drop_path_rate=0.3,
        drop_rate=0.0,
        embed_dims=128,
        frozen_stages=-1,
        init_cfg=dict(
            checkpoint=
            'https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/swin/swin_base_patch4_window12_384_20220317-55b0104a.pth',
            type='Pretrained'),
        mlp_ratio=4,
        num_heads=[
            4,
            8,
            16,
            32,
        ],
        out_indices=(
            0,
            1,
            2,
            3,
        ),
        patch_norm=True,
        pretrain_img_size=384,
        qk_scale=None,
        qkv_bias=True,
        type='SwinTransformer',
        window_size=12,
        with_cp=False),
    data_preprocessor=dict(
        bgr_to_rgb=True,
        corruption='defocus_blur',
        mean=[
            123.675,
            116.28,
            103.53,
        ],
        pad_val=0,
        seg_pad_val=255,
        size=(
            640,
            640,
        ),
        std=[
            58.395,
            57.12,
            57.375,
        ],
        type='SegDataPreProcessor'),
    decode_head=dict(
        align_corners=False,
        enforce_decoder_input_project=False,
        feat_channels=256,
        in_channels=[
            128,
            256,
            512,
            1024,
        ],
        loss_cls=dict(
            class_weight=[
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                0.1,
            ],
            loss_weight=2.0,
            reduction='mean',
            type='mmdet.CrossEntropyLoss',
            use_sigmoid=False),
        loss_dice=dict(
            activate=True,
            eps=1.0,
            loss_weight=5.0,
            naive_dice=True,
            reduction='mean',
            type='mmdet.DiceLoss',
            use_sigmoid=True),
        loss_mask=dict(
            loss_weight=5.0,
            reduction='mean',
            type='mmdet.CrossEntropyLoss',
            use_sigmoid=True),
        num_classes=150,
        num_queries=100,
        num_transformer_feat_level=3,
        out_channels=256,
        pixel_decoder=dict(
            act_cfg=dict(type='ReLU'),
            encoder=dict(
                init_cfg=None,
                layer_cfg=dict(
                    ffn_cfg=dict(
                        act_cfg=dict(inplace=True, type='ReLU'),
                        embed_dims=256,
                        feedforward_channels=1024,
                        ffn_drop=0.0,
                        num_fcs=2),
                    self_attn_cfg=dict(
                        batch_first=True,
                        dropout=0.0,
                        embed_dims=256,
                        im2col_step=64,
                        init_cfg=None,
                        norm_cfg=None,
                        num_heads=8,
                        num_levels=3,
                        num_points=4)),
                num_layers=6),
            init_cfg=None,
            norm_cfg=dict(num_groups=32, type='GN'),
            num_outs=3,
            positional_encoding=dict(normalize=True, num_feats=128),
            type='mmdet.MSDeformAttnPixelDecoder'),
        positional_encoding=dict(normalize=True, num_feats=128),
        strides=[
            4,
            8,
            16,
            32,
        ],
        train_cfg=dict(
            assigner=dict(
                match_costs=[
                    dict(type='mmdet.ClassificationCost', weight=2.0),
                    dict(
                        type='mmdet.CrossEntropyLossCost',
                        use_sigmoid=True,
                        weight=5.0),
                    dict(
                        eps=1.0,
                        pred_act=True,
                        type='mmdet.DiceCost',
                        weight=5.0),
                ],
                type='mmdet.HungarianAssigner'),
            importance_sample_ratio=0.75,
            num_points=12544,
            oversample_ratio=3.0,
            sampler=dict(type='mmdet.MaskPseudoSampler')),
        transformer_decoder=dict(
            init_cfg=None,
            layer_cfg=dict(
                cross_attn_cfg=dict(
                    attn_drop=0.0,
                    batch_first=True,
                    dropout_layer=None,
                    embed_dims=256,
                    num_heads=8,
                    proj_drop=0.0),
                ffn_cfg=dict(
                    act_cfg=dict(inplace=True, type='ReLU'),
                    add_identity=True,
                    dropout_layer=None,
                    embed_dims=256,
                    feedforward_channels=2048,
                    ffn_drop=0.0,
                    num_fcs=2),
                self_attn_cfg=dict(
                    attn_drop=0.0,
                    batch_first=True,
                    dropout_layer=None,
                    embed_dims=256,
                    num_heads=8,
                    proj_drop=0.0)),
            num_layers=9,
            return_intermediate=True),
        type='Mask2FormerHead'),
    test_cfg=dict(mode='whole'),
    train_cfg=dict(),
    type='EncoderDecoder')
num_classes = 150
optim_wrapper = dict(
    clip_grad=dict(max_norm=0.01, norm_type=2),
    optimizer=dict(
        betas=(
            0.9,
            0.999,
        ),
        eps=1e-08,
        lr=0.0001,
        type='AdamW',
        weight_decay=0.05),
    paramwise_cfg=dict(
        custom_keys=dict({
            'absolute_pos_embed':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone':
            dict(decay_mult=1.0, lr_mult=0.1),
            'backbone.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.patch_embed.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.0.blocks.0.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.0.blocks.1.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.0.downsample.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.1.blocks.0.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.1.blocks.1.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.1.downsample.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.0.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.1.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.10.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.11.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.12.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.13.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.14.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.15.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.16.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.17.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.2.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.3.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.4.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.5.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.6.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.7.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.8.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.9.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.downsample.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.3.blocks.0.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.3.blocks.1.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'level_embed':
            dict(decay_mult=0.0, lr_mult=1.0),
            'query_embed':
            dict(decay_mult=0.0, lr_mult=1.0),
            'query_feat':
            dict(decay_mult=0.0, lr_mult=1.0),
            'relative_position_bias_table':
            dict(decay_mult=0.0, lr_mult=0.1)
        }),
        norm_decay_mult=0.0),
    type='OptimWrapper')
optimizer = dict(
    betas=(
        0.9,
        0.999,
    ),
    eps=1e-08,
    lr=0.0001,
    type='AdamW',
    weight_decay=0.05)
param_scheduler = [
    dict(
        begin=0,
        by_epoch=False,
        end=160000,
        eta_min=0,
        power=0.9,
        type='PolyLR'),
]
pretrained = 'https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/swin/swin_base_patch4_window12_384_20220317-55b0104a.pth'
resume = False
test_cfg = dict(type='TestLoop')
test_dataloader = dict(
    batch_size=1,
    dataset=dict(
        data_prefix=dict(
            img_path='images/validation',
            seg_map_path='annotations/validation'),
        data_root='data/ade/ADEChallengeData2016',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(keep_ratio=True, scale=(
                2560,
                640,
            ), type='Resize'),
            dict(reduce_zero_label=True, type='LoadAnnotations'),
            dict(type='PackSegInputs'),
        ],
        type='ADE20KDataset'),
    num_workers=4,
    persistent_workers=True,
    sampler=dict(shuffle=False, type='DefaultSampler'))
test_evaluator = dict(
    iou_metrics=[
        'mIoU',
    ], type='IoUMetric')
test_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(keep_ratio=True, scale=(
        2560,
        640,
    ), type='Resize'),
    dict(reduce_zero_label=True, type='LoadAnnotations'),
    dict(type='PackSegInputs'),
]
train_cfg = dict(
    max_iters=160000, type='IterBasedTrainLoop', val_interval=5000)
train_dataloader = dict(
    batch_size=2,
    dataset=dict(
        data_prefix=dict(
            img_path='images/training', seg_map_path='annotations/training'),
        data_root='data/ade/ADEChallengeData2016',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(reduce_zero_label=True, type='LoadAnnotations'),
            dict(
                max_size=2560,
                resize_type='ResizeShortestEdge',
                scales=[
                    320,
                    384,
                    448,
                    512,
                    576,
                    640,
                    704,
                    768,
                    832,
                    896,
                    960,
                    1024,
                    1088,
                    1152,
                    1216,
                    1280,
                ],
                type='RandomChoiceResize'),
            dict(
                cat_max_ratio=0.75, crop_size=(
                    640,
                    640,
                ), type='RandomCrop'),
            dict(prob=0.5, type='RandomFlip'),
            dict(type='PhotoMetricDistortion'),
            dict(type='PackSegInputs'),
        ],
        type='ADE20KDataset'),
    num_workers=4,
    persistent_workers=True,
    sampler=dict(shuffle=True, type='InfiniteSampler'))
train_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(reduce_zero_label=True, type='LoadAnnotations'),
    dict(
        max_size=2560,
        resize_type='ResizeShortestEdge',
        scales=[
            320,
            384,
            448,
            512,
            576,
            640,
            704,
            768,
            832,
            896,
            960,
            1024,
            1088,
            1152,
            1216,
            1280,
        ],
        type='RandomChoiceResize'),
    dict(cat_max_ratio=0.75, crop_size=(
        640,
        640,
    ), type='RandomCrop'),
    dict(prob=0.5, type='RandomFlip'),
    dict(type='PhotoMetricDistortion'),
    dict(type='PackSegInputs'),
]
tta_model = dict(type='SegTTAModel')
tta_pipeline = [
    dict(backend_args=None, type='LoadImageFromFile'),
    dict(
        transforms=[
            [
                dict(keep_ratio=True, scale_factor=0.5, type='Resize'),
                dict(keep_ratio=True, scale_factor=0.75, type='Resize'),
                dict(keep_ratio=True, scale_factor=1.0, type='Resize'),
                dict(keep_ratio=True, scale_factor=1.25, type='Resize'),
                dict(keep_ratio=True, scale_factor=1.5, type='Resize'),
                dict(keep_ratio=True, scale_factor=1.75, type='Resize'),
            ],
            [
                dict(direction='horizontal', prob=0.0, type='RandomFlip'),
                dict(direction='horizontal', prob=1.0, type='RandomFlip'),
            ],
            [
                dict(type='LoadAnnotations'),
            ],
            [
                dict(type='PackSegInputs'),
            ],
        ],
        type='TestTimeAug'),
]
val_cfg = dict(type='ValLoop')
val_dataloader = dict(
    batch_size=1,
    dataset=dict(
        data_prefix=dict(
            img_path='images/validation',
            seg_map_path='annotations/validation'),
        data_root='data/ade/ADEChallengeData2016',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(keep_ratio=True, scale=(
                2560,
                640,
            ), type='Resize'),
            dict(reduce_zero_label=True, type='LoadAnnotations'),
            dict(type='PackSegInputs'),
        ],
        type='ADE20KDataset'),
    num_workers=4,
    persistent_workers=True,
    sampler=dict(shuffle=False, type='DefaultSampler'))
val_evaluator = dict(
    iou_metrics=[
        'mIoU',
    ], type='IoUMetric')
vis_backends = [
    dict(type='LocalVisBackend'),
]
visualizer = dict(
    name='visualizer',
    type='SegLocalVisualizer',
    vis_backends=[
        dict(type='LocalVisBackend'),
    ])
work_dir = '../corruptions/work_dirs/ade20k/mask2former/mask2former_swin-b-in1k-384x384-pre_8xb2-160k_ade20k-640x640/defocus_blur'

09/21 01:52:54 - mmengine - INFO - Distributed training is not used, all SyncBatchNorm (SyncBN) layers in the model will be automatically reverted to BatchNormXd layers if they are used.
09/21 01:52:54 - mmengine - INFO - Hooks will be executed in the following order:
before_run:
(VERY_HIGH   ) RuntimeInfoHook                    
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
before_train:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_train_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(NORMAL      ) DistSamplerSeedHook                
 -------------------- 
before_train_iter:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_train_iter:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(NORMAL      ) SegVisualizationHook               
(BELOW_NORMAL) LoggerHook                         
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
after_train_epoch:
(NORMAL      ) IterTimerHook                      
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_val:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
before_val_epoch:
(NORMAL      ) IterTimerHook                      
 -------------------- 
before_val_iter:
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_val_iter:
(NORMAL      ) IterTimerHook                      
(NORMAL      ) SegVisualizationHook               
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_val_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
after_val:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
after_train:
(VERY_HIGH   ) RuntimeInfoHook                    
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_test:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
before_test_epoch:
(NORMAL      ) IterTimerHook                      
 -------------------- 
before_test_iter:
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_test_iter:
(NORMAL      ) IterTimerHook                      
(NORMAL      ) SegVisualizationHook               
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_test_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_test:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
after_run:
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
09/21 01:52:56 - mmengine - WARNING - The prefix is not set in metric class IoUMetric.
Loads checkpoint by local backend from path: ../checkpoint_files/ade20k/mask2former/mask2former_swin-b-in1k-384x384-pre_8xb2-160k_ade20k-640x640_20221129_125118-a4a086d2.pth
09/21 01:52:59 - mmengine - INFO - Load checkpoint from ../checkpoint_files/ade20k/mask2former/mask2former_swin-b-in1k-384x384-pre_8xb2-160k_ade20k-640x640_20221129_125118-a4a086d2.pth
09/21 01:54:46 - mmengine - INFO - Iter(test) [  50/2000]    eta: 1:09:31  time: 0.4325  data_time: 0.0019  memory: 17181  
09/21 01:55:07 - mmengine - INFO - Iter(test) [ 100/2000]    eta: 0:40:24  time: 0.4096  data_time: 0.0018  memory: 17180  
09/21 01:55:23 - mmengine - INFO - Iter(test) [ 150/2000]    eta: 0:29:31  time: 0.3205  data_time: 0.0019  memory: 17150  
09/21 01:55:39 - mmengine - INFO - Iter(test) [ 200/2000]    eta: 0:23:58  time: 0.3702  data_time: 0.0018  memory: 17194  
09/21 01:55:57 - mmengine - INFO - Iter(test) [ 250/2000]    eta: 0:20:44  time: 0.2617  data_time: 0.0018  memory: 17202  
09/21 01:56:12 - mmengine - INFO - Iter(test) [ 300/2000]    eta: 0:18:15  time: 0.1703  data_time: 0.0019  memory: 17180  
09/21 01:56:28 - mmengine - INFO - Iter(test) [ 350/2000]    eta: 0:16:26  time: 0.3038  data_time: 0.0018  memory: 17178  
09/21 01:56:39 - mmengine - INFO - Iter(test) [ 400/2000]    eta: 0:14:40  time: 0.1659  data_time: 0.0014  memory: 17177  
09/21 01:56:54 - mmengine - INFO - Iter(test) [ 450/2000]    eta: 0:13:30  time: 0.8284  data_time: 0.4746  memory: 17147  
09/21 01:57:05 - mmengine - INFO - Iter(test) [ 500/2000]    eta: 0:12:17  time: 0.2277  data_time: 0.0016  memory: 17149  
09/21 01:57:15 - mmengine - INFO - Iter(test) [ 550/2000]    eta: 0:11:15  time: 0.2716  data_time: 0.0018  memory: 17179  
09/21 01:57:25 - mmengine - INFO - Iter(test) [ 600/2000]    eta: 0:10:19  time: 0.1716  data_time: 0.0020  memory: 3938  
09/21 01:57:37 - mmengine - INFO - Iter(test) [ 650/2000]    eta: 0:09:37  time: 0.2938  data_time: 0.0017  memory: 17181  
09/21 01:57:51 - mmengine - INFO - Iter(test) [ 700/2000]    eta: 0:09:02  time: 0.2330  data_time: 0.0018  memory: 17177  
09/21 01:58:05 - mmengine - INFO - Iter(test) [ 750/2000]    eta: 0:08:30  time: 0.5905  data_time: 0.0018  memory: 17184  
09/21 01:58:14 - mmengine - INFO - Iter(test) [ 800/2000]    eta: 0:07:52  time: 0.1622  data_time: 0.0018  memory: 17151  
09/21 01:58:23 - mmengine - INFO - Iter(test) [ 850/2000]    eta: 0:07:18  time: 0.1636  data_time: 0.0019  memory: 1428  
09/21 01:58:33 - mmengine - INFO - Iter(test) [ 900/2000]    eta: 0:06:47  time: 0.2117  data_time: 0.0017  memory: 17138  
09/21 01:58:46 - mmengine - INFO - Iter(test) [ 950/2000]    eta: 0:06:23  time: 0.3236  data_time: 0.0019  memory: 17133  
09/21 01:58:55 - mmengine - INFO - Iter(test) [1000/2000]    eta: 0:05:55  time: 0.1599  data_time: 0.0017  memory: 17096  
09/21 01:59:05 - mmengine - INFO - Iter(test) [1050/2000]    eta: 0:05:30  time: 0.2504  data_time: 0.0017  memory: 17182  
09/21 01:59:16 - mmengine - INFO - Iter(test) [1100/2000]    eta: 0:05:08  time: 0.1633  data_time: 0.0018  memory: 17175  
09/21 01:59:25 - mmengine - INFO - Iter(test) [1150/2000]    eta: 0:04:45  time: 0.1655  data_time: 0.0017  memory: 17117  
09/21 01:59:34 - mmengine - INFO - Iter(test) [1200/2000]    eta: 0:04:23  time: 0.1647  data_time: 0.0018  memory: 17113  
09/21 01:59:45 - mmengine - INFO - Iter(test) [1250/2000]    eta: 0:04:03  time: 0.2461  data_time: 0.0017  memory: 17172  
09/21 01:59:53 - mmengine - INFO - Iter(test) [1300/2000]    eta: 0:03:42  time: 0.1662  data_time: 0.0018  memory: 1430  
09/21 02:00:03 - mmengine - INFO - Iter(test) [1350/2000]    eta: 0:03:24  time: 0.1550  data_time: 0.0018  memory: 17110  
09/21 02:00:15 - mmengine - INFO - Iter(test) [1400/2000]    eta: 0:03:06  time: 0.1863  data_time: 0.0017  memory: 17154  
09/21 02:00:23 - mmengine - INFO - Iter(test) [1450/2000]    eta: 0:02:48  time: 0.2327  data_time: 0.0017  memory: 17130  
09/21 02:00:32 - mmengine - INFO - Iter(test) [1500/2000]    eta: 0:02:30  time: 0.1542  data_time: 0.0017  memory: 17125  
09/21 02:00:41 - mmengine - INFO - Iter(test) [1550/2000]    eta: 0:02:14  time: 0.1671  data_time: 0.0017  memory: 17154  
09/21 02:00:50 - mmengine - INFO - Iter(test) [1600/2000]    eta: 0:01:57  time: 0.1637  data_time: 0.0019  memory: 1425  
09/21 02:01:00 - mmengine - INFO - Iter(test) [1650/2000]    eta: 0:01:41  time: 0.1549  data_time: 0.0017  memory: 17192  
09/21 02:01:13 - mmengine - INFO - Iter(test) [1700/2000]    eta: 0:01:27  time: 0.1631  data_time: 0.0018  memory: 17151  
09/21 02:01:22 - mmengine - INFO - Iter(test) [1750/2000]    eta: 0:01:11  time: 0.1630  data_time: 0.0017  memory: 17111  
09/21 02:01:31 - mmengine - INFO - Iter(test) [1800/2000]    eta: 0:00:56  time: 0.1667  data_time: 0.0019  memory: 17114  
09/21 02:01:39 - mmengine - INFO - Iter(test) [1850/2000]    eta: 0:00:42  time: 0.1662  data_time: 0.0020  memory: 1317  
09/21 02:01:48 - mmengine - INFO - Iter(test) [1900/2000]    eta: 0:00:27  time: 0.2296  data_time: 0.0017  memory: 17182  
09/21 02:01:58 - mmengine - INFO - Iter(test) [1950/2000]    eta: 0:00:13  time: 0.1602  data_time: 0.0017  memory: 17197  
09/21 02:02:08 - mmengine - INFO - Iter(test) [2000/2000]    eta: 0:00:00  time: 0.1487  data_time: 0.0016  memory: 17131  
09/21 02:02:08 - mmengine - INFO - per class results:
09/21 02:02:08 - mmengine - INFO - 
+---------------------+-------+-------+
|        Class        |  IoU  |  Acc  |
+---------------------+-------+-------+
|         wall        | 77.08 | 85.45 |
|       building      | 80.97 | 92.64 |
|         sky         | 93.83 | 97.07 |
|        floor        | 82.01 | 88.88 |
|         tree        | 74.17 | 84.16 |
|       ceiling       |  84.6 | 90.16 |
|         road        | 84.09 | 93.31 |
|         bed         | 89.85 | 95.85 |
|      windowpane     | 59.75 | 79.59 |
|        grass        | 70.09 | 82.82 |
|       cabinet       | 58.57 | 73.76 |
|       sidewalk      | 64.01 | 77.48 |
|        person       | 81.57 |  89.9 |
|        earth        | 38.61 | 53.14 |
|         door        | 46.96 | 61.84 |
|        table        | 61.68 | 76.06 |
|       mountain      | 57.08 | 75.38 |
|        plant        | 51.93 | 66.09 |
|       curtain       | 73.13 | 83.51 |
|        chair        | 54.86 | 69.58 |
|         car         | 85.32 | 92.82 |
|        water        | 53.77 |  65.8 |
|       painting      | 70.63 | 86.48 |
|         sofa        | 65.23 |  82.7 |
|        shelf        | 40.69 | 62.71 |
|        house        | 49.71 |  66.2 |
|         sea         |  60.0 | 84.08 |
|        mirror       | 67.75 | 84.41 |
|         rug         | 66.56 | 84.95 |
|        field        | 27.16 | 47.05 |
|       armchair      | 37.78 | 57.25 |
|         seat        | 56.25 | 78.64 |
|        fence        | 48.49 | 61.14 |
|         desk        | 50.52 | 74.04 |
|         rock        | 44.39 | 68.58 |
|       wardrobe      | 56.08 | 66.61 |
|         lamp        | 64.86 | 77.48 |
|       bathtub       | 75.54 | 84.24 |
|       railing       | 35.82 |  55.0 |
|       cushion       | 56.12 | 64.16 |
|         base        | 38.14 | 70.37 |
|         box         | 24.18 |  34.1 |
|        column       | 41.57 |  55.9 |
|      signboard      | 36.45 | 52.12 |
|   chest of drawers  | 30.76 | 54.18 |
|       counter       | 29.48 |  42.0 |
|         sand        | 31.23 | 49.31 |
|         sink        | 74.74 | 81.91 |
|      skyscraper     | 47.25 | 57.29 |
|      fireplace      | 68.79 | 84.63 |
|     refrigerator    | 72.55 | 78.43 |
|      grandstand     |  40.5 | 72.72 |
|         path        | 22.07 | 35.34 |
|        stairs       | 13.01 | 15.49 |
|        runway       | 73.26 | 76.36 |
|         case        | 47.24 | 60.24 |
|      pool table     | 92.05 | 96.65 |
|        pillow       | 59.93 |  75.7 |
|     screen door     |  58.4 | 67.35 |
|       stairway      | 27.76 | 51.56 |
|        river        |  9.27 | 20.96 |
|        bridge       |  60.7 | 80.72 |
|       bookcase      | 28.82 | 55.96 |
|        blind        |  33.4 | 34.79 |
|     coffee table    | 61.84 | 82.98 |
|        toilet       | 87.37 | 92.01 |
|        flower       | 45.74 | 59.32 |
|         book        | 47.36 | 65.51 |
|         hill        |  3.71 |  7.29 |
|        bench        | 40.39 | 58.58 |
|      countertop     | 65.38 | 81.22 |
|        stove        | 74.83 | 86.25 |
|         palm        | 43.07 | 56.47 |
|    kitchen island   | 42.57 | 76.11 |
|       computer      | 62.76 | 73.33 |
|     swivel chair    | 43.99 | 58.48 |
|         boat        | 68.06 |  88.7 |
|         bar         | 48.93 | 59.95 |
|    arcade machine   | 74.84 | 82.67 |
|        hovel        | 11.19 |  15.4 |
|         bus         | 91.02 | 95.71 |
|        towel        | 75.19 | 83.62 |
|        light        | 57.95 | 77.58 |
|        truck        | 38.82 | 60.16 |
|        tower        | 26.29 | 53.34 |
|      chandelier     | 65.99 | 79.78 |
|        awning       | 26.22 | 38.27 |
|     streetlight     | 29.68 | 50.81 |
|        booth        | 34.33 | 67.98 |
| television receiver |  67.0 | 76.02 |
|       airplane      | 63.46 | 74.79 |
|      dirt track     |  5.76 | 12.88 |
|       apparel       | 29.35 | 41.53 |
|         pole        | 28.33 | 35.78 |
|         land        |  4.44 |  6.09 |
|      bannister      | 18.93 | 33.39 |
|      escalator      |  39.0 |  51.9 |
|       ottoman       | 45.97 | 64.24 |
|        bottle       | 26.17 | 33.59 |
|        buffet       | 37.66 | 52.73 |
|        poster       | 26.48 | 38.59 |
|        stage        | 26.88 | 42.68 |
|         van         | 47.53 | 59.89 |
|         ship        | 87.32 | 90.94 |
|       fountain      | 21.63 | 22.56 |
|    conveyer belt    | 47.87 | 65.99 |
|        canopy       | 18.18 | 31.99 |
|        washer       |  71.8 | 73.67 |
|      plaything      |  17.2 | 42.36 |
|    swimming pool    | 60.66 | 72.12 |
|        stool        | 48.48 | 66.68 |
|        barrel       | 61.24 | 74.73 |
|        basket       | 26.15 | 34.81 |
|      waterfall      | 36.75 | 55.61 |
|         tent        | 83.47 |  98.4 |
|         bag         | 13.63 | 17.83 |
|       minibike      | 69.64 | 85.73 |
|        cradle       |  82.3 | 96.96 |
|         oven        | 20.13 | 58.11 |
|         ball        | 55.27 | 62.06 |
|         food        | 60.03 | 73.93 |
|         step        | 15.07 | 20.72 |
|         tank        | 59.09 | 65.32 |
|      trade name     | 26.85 | 35.93 |
|      microwave      | 40.27 | 45.24 |
|         pot         | 46.92 | 55.63 |
|        animal       | 61.05 | 63.25 |
|       bicycle       | 56.51 | 75.48 |
|         lake        | 34.12 |  69.2 |
|      dishwasher     | 62.98 | 75.25 |
|        screen       | 64.86 | 90.38 |
|       blanket       | 14.58 | 18.33 |
|      sculpture      | 51.83 |  68.2 |
|         hood        | 71.65 | 86.54 |
|        sconce       | 42.39 | 63.63 |
|         vase        | 40.28 | 59.72 |
|    traffic light    | 38.13 | 62.91 |
|         tray        | 17.16 | 21.78 |
|        ashcan       | 47.29 | 66.58 |
|         fan         | 65.59 | 84.24 |
|         pier        |  14.5 |  15.9 |
|      crt screen     |  1.17 |  3.44 |
|        plate        | 56.52 | 76.31 |
|       monitor       |  6.04 | 12.48 |
|    bulletin board   | 41.37 | 58.92 |
|        shower       |  9.95 | 19.55 |
|       radiator      | 50.34 | 53.89 |
|        glass        | 14.41 | 15.68 |
|        clock        | 47.78 | 58.22 |
|         flag        | 69.59 | 78.79 |
+---------------------+-------+-------+
09/21 02:02:08 - mmengine - INFO - Iter(test) [2000/2000]    aAcc: 82.4900  mIoU: 48.9600  mAcc: 62.5800  data_time: 0.0056  time: 0.2743
Finished processing corruption type: defocus_blur
Processing corruption type: glass_blur
09/21 02:04:11 - mmengine - INFO - 
------------------------------------------------------------
System environment:
    sys.platform: linux
    Python: 3.10.13 | packaged by conda-forge | (main, Dec 23 2023, 15:36:39) [GCC 12.3.0]
    CUDA available: True
    MUSA available: False
    numpy_random_seed: 1349281309
    GPU 0: Tesla V100-SXM2-32GB
    CUDA_HOME: /opt/bwhpc/common/devel/cuda/11.7
    NVCC: Cuda compilation tools, release 11.7, V11.7.99
    GCC: gcc (GCC) 8.5.0 20210514 (Red Hat 8.5.0-18)
    PyTorch: 1.13.1
    PyTorch compiling details: PyTorch built with:
  - GCC 9.3
  - C++ Version: 201402
  - Intel(R) oneAPI Math Kernel Library Version 2023.1-Product Build 20230303 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v2.6.0 (Git Hash 52b5f107dd9cf10910aaa19cb47f3abf9b349815)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - LAPACK is enabled (usually provided by MKL)
  - NNPACK is enabled
  - CPU capability usage: AVX2
  - CUDA Runtime 11.7
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_61,code=sm_61;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86;-gencode;arch=compute_37,code=compute_37
  - CuDNN 8.5
  - Magma 2.6.1
  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.7, CUDNN_VERSION=8.5.0, CXX_COMPILER=/opt/rh/devtoolset-9/root/usr/bin/c++, CXX_FLAGS= -fabi-version=11 -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -DEDGE_PROFILER_USE_KINETO -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Werror=non-virtual-dtor -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wunused-local-typedefs -Wno-unused-parameter -Wno-unused-function -Wno-unused-result -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Werror=cast-function-type -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.13.1, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, USE_ROCM=OFF, 

    TorchVision: 0.14.1
    OpenCV: 3.4.18
    MMEngine: 0.10.4

Runtime environment:
    cudnn_benchmark: True
    mp_cfg: {'mp_start_method': 'fork', 'opencv_num_threads': 0}
    dist_cfg: {'backend': 'nccl'}
    seed: 1349281309
    Distributed launcher: none
    Distributed training: False
    GPU number: 1
------------------------------------------------------------

09/21 02:04:12 - mmengine - INFO - Config:
auto_scale_lr = dict(base_batch_size=16, enable=False)
backbone_embed_multi = dict(decay_mult=0.0, lr_mult=0.1)
backbone_norm_multi = dict(decay_mult=0.0, lr_mult=0.1)
crop_size = (
    640,
    640,
)
custom_keys = dict({
    'absolute_pos_embed':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone':
    dict(decay_mult=1.0, lr_mult=0.1),
    'backbone.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.patch_embed.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.0.blocks.0.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.0.blocks.1.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.0.downsample.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.1.blocks.0.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.1.blocks.1.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.1.downsample.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.0.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.1.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.10.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.11.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.12.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.13.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.14.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.15.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.16.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.17.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.2.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.3.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.4.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.5.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.6.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.7.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.8.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.9.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.downsample.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.3.blocks.0.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.3.blocks.1.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'level_embed':
    dict(decay_mult=0.0, lr_mult=1.0),
    'query_embed':
    dict(decay_mult=0.0, lr_mult=1.0),
    'query_feat':
    dict(decay_mult=0.0, lr_mult=1.0),
    'relative_position_bias_table':
    dict(decay_mult=0.0, lr_mult=0.1)
})
data_root = 'data/ade/ADEChallengeData2016'
dataset_type = 'ADE20KDataset'
default_hooks = dict(
    checkpoint=dict(
        by_epoch=False, interval=5000, save_best='mIoU',
        type='CheckpointHook'),
    logger=dict(interval=50, log_metric_by_epoch=False, type='LoggerHook'),
    param_scheduler=dict(type='ParamSchedulerHook'),
    sampler_seed=dict(type='DistSamplerSeedHook'),
    timer=dict(type='IterTimerHook'),
    visualization=dict(type='SegVisualizationHook'))
default_scope = 'mmseg'
depths = [
    2,
    2,
    18,
    2,
]
embed_multi = dict(decay_mult=0.0, lr_mult=1.0)
env_cfg = dict(
    cudnn_benchmark=True,
    dist_cfg=dict(backend='nccl'),
    mp_cfg=dict(mp_start_method='fork', opencv_num_threads=0))
img_ratios = [
    0.5,
    0.75,
    1.0,
    1.25,
    1.5,
    1.75,
]
launcher = 'none'
load_from = '../checkpoint_files/ade20k/mask2former/mask2former_swin-b-in1k-384x384-pre_8xb2-160k_ade20k-640x640_20221129_125118-a4a086d2.pth'
log_level = 'INFO'
log_processor = dict(by_epoch=False)
model = dict(
    backbone=dict(
        attn_drop_rate=0.0,
        depths=[
            2,
            2,
            18,
            2,
        ],
        drop_path_rate=0.3,
        drop_rate=0.0,
        embed_dims=128,
        frozen_stages=-1,
        init_cfg=dict(
            checkpoint=
            'https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/swin/swin_base_patch4_window12_384_20220317-55b0104a.pth',
            type='Pretrained'),
        mlp_ratio=4,
        num_heads=[
            4,
            8,
            16,
            32,
        ],
        out_indices=(
            0,
            1,
            2,
            3,
        ),
        patch_norm=True,
        pretrain_img_size=384,
        qk_scale=None,
        qkv_bias=True,
        type='SwinTransformer',
        window_size=12,
        with_cp=False),
    data_preprocessor=dict(
        bgr_to_rgb=True,
        corruption='glass_blur',
        mean=[
            123.675,
            116.28,
            103.53,
        ],
        pad_val=0,
        seg_pad_val=255,
        size=(
            640,
            640,
        ),
        std=[
            58.395,
            57.12,
            57.375,
        ],
        type='SegDataPreProcessor'),
    decode_head=dict(
        align_corners=False,
        enforce_decoder_input_project=False,
        feat_channels=256,
        in_channels=[
            128,
            256,
            512,
            1024,
        ],
        loss_cls=dict(
            class_weight=[
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                0.1,
            ],
            loss_weight=2.0,
            reduction='mean',
            type='mmdet.CrossEntropyLoss',
            use_sigmoid=False),
        loss_dice=dict(
            activate=True,
            eps=1.0,
            loss_weight=5.0,
            naive_dice=True,
            reduction='mean',
            type='mmdet.DiceLoss',
            use_sigmoid=True),
        loss_mask=dict(
            loss_weight=5.0,
            reduction='mean',
            type='mmdet.CrossEntropyLoss',
            use_sigmoid=True),
        num_classes=150,
        num_queries=100,
        num_transformer_feat_level=3,
        out_channels=256,
        pixel_decoder=dict(
            act_cfg=dict(type='ReLU'),
            encoder=dict(
                init_cfg=None,
                layer_cfg=dict(
                    ffn_cfg=dict(
                        act_cfg=dict(inplace=True, type='ReLU'),
                        embed_dims=256,
                        feedforward_channels=1024,
                        ffn_drop=0.0,
                        num_fcs=2),
                    self_attn_cfg=dict(
                        batch_first=True,
                        dropout=0.0,
                        embed_dims=256,
                        im2col_step=64,
                        init_cfg=None,
                        norm_cfg=None,
                        num_heads=8,
                        num_levels=3,
                        num_points=4)),
                num_layers=6),
            init_cfg=None,
            norm_cfg=dict(num_groups=32, type='GN'),
            num_outs=3,
            positional_encoding=dict(normalize=True, num_feats=128),
            type='mmdet.MSDeformAttnPixelDecoder'),
        positional_encoding=dict(normalize=True, num_feats=128),
        strides=[
            4,
            8,
            16,
            32,
        ],
        train_cfg=dict(
            assigner=dict(
                match_costs=[
                    dict(type='mmdet.ClassificationCost', weight=2.0),
                    dict(
                        type='mmdet.CrossEntropyLossCost',
                        use_sigmoid=True,
                        weight=5.0),
                    dict(
                        eps=1.0,
                        pred_act=True,
                        type='mmdet.DiceCost',
                        weight=5.0),
                ],
                type='mmdet.HungarianAssigner'),
            importance_sample_ratio=0.75,
            num_points=12544,
            oversample_ratio=3.0,
            sampler=dict(type='mmdet.MaskPseudoSampler')),
        transformer_decoder=dict(
            init_cfg=None,
            layer_cfg=dict(
                cross_attn_cfg=dict(
                    attn_drop=0.0,
                    batch_first=True,
                    dropout_layer=None,
                    embed_dims=256,
                    num_heads=8,
                    proj_drop=0.0),
                ffn_cfg=dict(
                    act_cfg=dict(inplace=True, type='ReLU'),
                    add_identity=True,
                    dropout_layer=None,
                    embed_dims=256,
                    feedforward_channels=2048,
                    ffn_drop=0.0,
                    num_fcs=2),
                self_attn_cfg=dict(
                    attn_drop=0.0,
                    batch_first=True,
                    dropout_layer=None,
                    embed_dims=256,
                    num_heads=8,
                    proj_drop=0.0)),
            num_layers=9,
            return_intermediate=True),
        type='Mask2FormerHead'),
    test_cfg=dict(mode='whole'),
    train_cfg=dict(),
    type='EncoderDecoder')
num_classes = 150
optim_wrapper = dict(
    clip_grad=dict(max_norm=0.01, norm_type=2),
    optimizer=dict(
        betas=(
            0.9,
            0.999,
        ),
        eps=1e-08,
        lr=0.0001,
        type='AdamW',
        weight_decay=0.05),
    paramwise_cfg=dict(
        custom_keys=dict({
            'absolute_pos_embed':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone':
            dict(decay_mult=1.0, lr_mult=0.1),
            'backbone.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.patch_embed.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.0.blocks.0.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.0.blocks.1.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.0.downsample.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.1.blocks.0.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.1.blocks.1.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.1.downsample.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.0.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.1.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.10.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.11.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.12.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.13.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.14.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.15.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.16.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.17.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.2.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.3.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.4.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.5.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.6.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.7.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.8.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.9.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.downsample.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.3.blocks.0.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.3.blocks.1.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'level_embed':
            dict(decay_mult=0.0, lr_mult=1.0),
            'query_embed':
            dict(decay_mult=0.0, lr_mult=1.0),
            'query_feat':
            dict(decay_mult=0.0, lr_mult=1.0),
            'relative_position_bias_table':
            dict(decay_mult=0.0, lr_mult=0.1)
        }),
        norm_decay_mult=0.0),
    type='OptimWrapper')
optimizer = dict(
    betas=(
        0.9,
        0.999,
    ),
    eps=1e-08,
    lr=0.0001,
    type='AdamW',
    weight_decay=0.05)
param_scheduler = [
    dict(
        begin=0,
        by_epoch=False,
        end=160000,
        eta_min=0,
        power=0.9,
        type='PolyLR'),
]
pretrained = 'https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/swin/swin_base_patch4_window12_384_20220317-55b0104a.pth'
resume = False
test_cfg = dict(type='TestLoop')
test_dataloader = dict(
    batch_size=1,
    dataset=dict(
        data_prefix=dict(
            img_path='images/validation',
            seg_map_path='annotations/validation'),
        data_root='data/ade/ADEChallengeData2016',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(keep_ratio=True, scale=(
                2560,
                640,
            ), type='Resize'),
            dict(reduce_zero_label=True, type='LoadAnnotations'),
            dict(type='PackSegInputs'),
        ],
        type='ADE20KDataset'),
    num_workers=4,
    persistent_workers=True,
    sampler=dict(shuffle=False, type='DefaultSampler'))
test_evaluator = dict(
    iou_metrics=[
        'mIoU',
    ], type='IoUMetric')
test_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(keep_ratio=True, scale=(
        2560,
        640,
    ), type='Resize'),
    dict(reduce_zero_label=True, type='LoadAnnotations'),
    dict(type='PackSegInputs'),
]
train_cfg = dict(
    max_iters=160000, type='IterBasedTrainLoop', val_interval=5000)
train_dataloader = dict(
    batch_size=2,
    dataset=dict(
        data_prefix=dict(
            img_path='images/training', seg_map_path='annotations/training'),
        data_root='data/ade/ADEChallengeData2016',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(reduce_zero_label=True, type='LoadAnnotations'),
            dict(
                max_size=2560,
                resize_type='ResizeShortestEdge',
                scales=[
                    320,
                    384,
                    448,
                    512,
                    576,
                    640,
                    704,
                    768,
                    832,
                    896,
                    960,
                    1024,
                    1088,
                    1152,
                    1216,
                    1280,
                ],
                type='RandomChoiceResize'),
            dict(
                cat_max_ratio=0.75, crop_size=(
                    640,
                    640,
                ), type='RandomCrop'),
            dict(prob=0.5, type='RandomFlip'),
            dict(type='PhotoMetricDistortion'),
            dict(type='PackSegInputs'),
        ],
        type='ADE20KDataset'),
    num_workers=4,
    persistent_workers=True,
    sampler=dict(shuffle=True, type='InfiniteSampler'))
train_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(reduce_zero_label=True, type='LoadAnnotations'),
    dict(
        max_size=2560,
        resize_type='ResizeShortestEdge',
        scales=[
            320,
            384,
            448,
            512,
            576,
            640,
            704,
            768,
            832,
            896,
            960,
            1024,
            1088,
            1152,
            1216,
            1280,
        ],
        type='RandomChoiceResize'),
    dict(cat_max_ratio=0.75, crop_size=(
        640,
        640,
    ), type='RandomCrop'),
    dict(prob=0.5, type='RandomFlip'),
    dict(type='PhotoMetricDistortion'),
    dict(type='PackSegInputs'),
]
tta_model = dict(type='SegTTAModel')
tta_pipeline = [
    dict(backend_args=None, type='LoadImageFromFile'),
    dict(
        transforms=[
            [
                dict(keep_ratio=True, scale_factor=0.5, type='Resize'),
                dict(keep_ratio=True, scale_factor=0.75, type='Resize'),
                dict(keep_ratio=True, scale_factor=1.0, type='Resize'),
                dict(keep_ratio=True, scale_factor=1.25, type='Resize'),
                dict(keep_ratio=True, scale_factor=1.5, type='Resize'),
                dict(keep_ratio=True, scale_factor=1.75, type='Resize'),
            ],
            [
                dict(direction='horizontal', prob=0.0, type='RandomFlip'),
                dict(direction='horizontal', prob=1.0, type='RandomFlip'),
            ],
            [
                dict(type='LoadAnnotations'),
            ],
            [
                dict(type='PackSegInputs'),
            ],
        ],
        type='TestTimeAug'),
]
val_cfg = dict(type='ValLoop')
val_dataloader = dict(
    batch_size=1,
    dataset=dict(
        data_prefix=dict(
            img_path='images/validation',
            seg_map_path='annotations/validation'),
        data_root='data/ade/ADEChallengeData2016',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(keep_ratio=True, scale=(
                2560,
                640,
            ), type='Resize'),
            dict(reduce_zero_label=True, type='LoadAnnotations'),
            dict(type='PackSegInputs'),
        ],
        type='ADE20KDataset'),
    num_workers=4,
    persistent_workers=True,
    sampler=dict(shuffle=False, type='DefaultSampler'))
val_evaluator = dict(
    iou_metrics=[
        'mIoU',
    ], type='IoUMetric')
vis_backends = [
    dict(type='LocalVisBackend'),
]
visualizer = dict(
    name='visualizer',
    type='SegLocalVisualizer',
    vis_backends=[
        dict(type='LocalVisBackend'),
    ])
work_dir = '../corruptions/work_dirs/ade20k/mask2former/mask2former_swin-b-in1k-384x384-pre_8xb2-160k_ade20k-640x640/glass_blur'

09/21 02:05:16 - mmengine - INFO - Distributed training is not used, all SyncBatchNorm (SyncBN) layers in the model will be automatically reverted to BatchNormXd layers if they are used.
09/21 02:05:17 - mmengine - INFO - Hooks will be executed in the following order:
before_run:
(VERY_HIGH   ) RuntimeInfoHook                    
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
before_train:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_train_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(NORMAL      ) DistSamplerSeedHook                
 -------------------- 
before_train_iter:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_train_iter:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(NORMAL      ) SegVisualizationHook               
(BELOW_NORMAL) LoggerHook                         
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
after_train_epoch:
(NORMAL      ) IterTimerHook                      
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_val:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
before_val_epoch:
(NORMAL      ) IterTimerHook                      
 -------------------- 
before_val_iter:
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_val_iter:
(NORMAL      ) IterTimerHook                      
(NORMAL      ) SegVisualizationHook               
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_val_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
after_val:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
after_train:
(VERY_HIGH   ) RuntimeInfoHook                    
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_test:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
before_test_epoch:
(NORMAL      ) IterTimerHook                      
 -------------------- 
before_test_iter:
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_test_iter:
(NORMAL      ) IterTimerHook                      
(NORMAL      ) SegVisualizationHook               
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_test_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_test:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
after_run:
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
09/21 02:05:19 - mmengine - WARNING - The prefix is not set in metric class IoUMetric.
Loads checkpoint by local backend from path: ../checkpoint_files/ade20k/mask2former/mask2former_swin-b-in1k-384x384-pre_8xb2-160k_ade20k-640x640_20221129_125118-a4a086d2.pth
09/21 02:05:22 - mmengine - INFO - Load checkpoint from ../checkpoint_files/ade20k/mask2former/mask2former_swin-b-in1k-384x384-pre_8xb2-160k_ade20k-640x640_20221129_125118-a4a086d2.pth
09/21 02:16:33 - mmengine - INFO - Iter(test) [  50/2000]    eta: 7:16:26  time: 12.5351  data_time: 0.0054  memory: 17181  
09/21 02:27:09 - mmengine - INFO - Iter(test) [ 100/2000]    eta: 6:53:59  time: 12.2953  data_time: 0.0027  memory: 17180  
09/21 02:36:28 - mmengine - INFO - Iter(test) [ 150/2000]    eta: 6:23:41  time: 11.2857  data_time: 0.0194  memory: 17150  
09/21 02:46:03 - mmengine - INFO - Iter(test) [ 200/2000]    eta: 6:06:09  time: 11.5053  data_time: 0.0058  memory: 17194  
09/21 02:55:24 - mmengine - INFO - Iter(test) [ 250/2000]    eta: 5:50:16  time: 11.2173  data_time: 0.0067  memory: 17202  
09/21 03:04:33 - mmengine - INFO - Iter(test) [ 300/2000]    eta: 5:35:24  time: 11.5994  data_time: 0.0026  memory: 17180  
09/21 03:14:00 - mmengine - INFO - Iter(test) [ 350/2000]    eta: 5:23:34  time: 10.8279  data_time: 0.0022  memory: 17178  
09/21 03:23:17 - mmengine - INFO - Iter(test) [ 400/2000]    eta: 5:11:41  time: 11.4652  data_time: 0.0180  memory: 17177  
09/21 03:31:47 - mmengine - INFO - Iter(test) [ 450/2000]    eta: 4:57:40  time: 10.3780  data_time: 0.0038  memory: 17147  
09/21 03:40:57 - mmengine - INFO - Iter(test) [ 500/2000]    eta: 4:46:45  time: 10.8265  data_time: 0.0055  memory: 17149  
09/21 03:50:49 - mmengine - INFO - Iter(test) [ 550/2000]    eta: 4:38:00  time: 11.8629  data_time: 0.0046  memory: 17179  
09/21 03:59:56 - mmengine - INFO - Iter(test) [ 600/2000]    eta: 4:27:18  time: 11.4220  data_time: 0.0041  memory: 3938  
09/21 04:09:11 - mmengine - INFO - Iter(test) [ 650/2000]    eta: 4:17:10  time: 11.2832  data_time: 0.0039  memory: 17181  
09/21 04:19:00 - mmengine - INFO - Iter(test) [ 700/2000]    eta: 4:08:11  time: 11.6129  data_time: 0.0035  memory: 17177  
09/21 04:28:16 - mmengine - INFO - Iter(test) [ 750/2000]    eta: 3:58:10  time: 11.8850  data_time: 0.0125  memory: 17184  
09/21 04:37:15 - mmengine - INFO - Iter(test) [ 800/2000]    eta: 3:47:48  time: 11.2929  data_time: 0.0031  memory: 17151  
09/21 04:46:44 - mmengine - INFO - Iter(test) [ 850/2000]    eta: 3:38:18  time: 11.4404  data_time: 0.0031  memory: 1428  
09/21 04:55:28 - mmengine - INFO - Iter(test) [ 900/2000]    eta: 3:27:53  time: 10.2318  data_time: 0.0092  memory: 17138  
09/21 05:05:08 - mmengine - INFO - Iter(test) [ 950/2000]    eta: 3:18:41  time: 11.2509  data_time: 0.0022  memory: 17133  
09/21 05:14:08 - mmengine - INFO - Iter(test) [1000/2000]    eta: 3:08:45  time: 10.7548  data_time: 0.0067  memory: 17096  
09/21 05:23:33 - mmengine - INFO - Iter(test) [1050/2000]    eta: 2:59:18  time: 11.5957  data_time: 0.0034  memory: 17182  
09/21 05:32:50 - mmengine - INFO - Iter(test) [1100/2000]    eta: 2:49:44  time: 10.8301  data_time: 0.0035  memory: 17175  
09/21 05:41:57 - mmengine - INFO - Iter(test) [1150/2000]    eta: 2:40:04  time: 11.0371  data_time: 0.0104  memory: 17117  
09/21 05:51:22 - mmengine - INFO - Iter(test) [1200/2000]    eta: 2:30:39  time: 10.7621  data_time: 0.0036  memory: 17113  
09/21 06:00:29 - mmengine - INFO - Iter(test) [1250/2000]    eta: 2:21:03  time: 11.0199  data_time: 0.0040  memory: 17172  
09/21 06:08:56 - mmengine - INFO - Iter(test) [1300/2000]    eta: 2:11:08  time: 10.3308  data_time: 0.0018  memory: 1430  
09/21 06:18:03 - mmengine - INFO - Iter(test) [1350/2000]    eta: 2:01:39  time: 11.2182  data_time: 0.0601  memory: 17110  
09/21 06:27:24 - mmengine - INFO - Iter(test) [1400/2000]    eta: 1:52:17  time: 11.5326  data_time: 0.0140  memory: 17154  
09/21 06:36:29 - mmengine - INFO - Iter(test) [1450/2000]    eta: 1:42:50  time: 11.9749  data_time: 0.0107  memory: 17130  
09/21 06:45:42 - mmengine - INFO - Iter(test) [1500/2000]    eta: 1:33:26  time: 10.6298  data_time: 0.0071  memory: 17125  
09/21 06:55:38 - mmengine - INFO - Iter(test) [1550/2000]    eta: 1:24:15  time: 11.7202  data_time: 0.0103  memory: 17154  
09/21 07:04:46 - mmengine - INFO - Iter(test) [1600/2000]    eta: 1:14:50  time: 11.6608  data_time: 0.0279  memory: 1425  
09/21 07:14:09 - mmengine - INFO - Iter(test) [1650/2000]    eta: 1:05:29  time: 10.3730  data_time: 0.0107  memory: 17192  
09/21 07:23:55 - mmengine - INFO - Iter(test) [1700/2000]    eta: 0:56:12  time: 11.2287  data_time: 0.0036  memory: 17151  
09/21 07:33:31 - mmengine - INFO - Iter(test) [1750/2000]    eta: 0:46:52  time: 11.1063  data_time: 0.0048  memory: 17111  
09/21 07:42:22 - mmengine - INFO - Iter(test) [1800/2000]    eta: 0:37:26  time: 10.9763  data_time: 0.0119  memory: 17114  
09/21 07:51:50 - mmengine - INFO - Iter(test) [1850/2000]    eta: 0:28:05  time: 11.1209  data_time: 0.0045  memory: 1317  
09/21 08:00:13 - mmengine - INFO - Iter(test) [1900/2000]    eta: 0:18:40  time: 10.0772  data_time: 0.0018  memory: 17182  
09/21 08:09:50 - mmengine - INFO - Iter(test) [1950/2000]    eta: 0:09:20  time: 10.7829  data_time: 0.0140  memory: 17197  
09/21 08:18:51 - mmengine - INFO - Iter(test) [2000/2000]    eta: 0:00:00  time: 10.1813  data_time: 0.0048  memory: 17131  
09/21 08:18:52 - mmengine - INFO - per class results:
09/21 08:18:52 - mmengine - INFO - 
+---------------------+-------+-------+
|        Class        |  IoU  |  Acc  |
+---------------------+-------+-------+
|         wall        | 77.02 | 86.06 |
|       building      | 81.64 | 92.25 |
|         sky         | 94.29 | 97.95 |
|        floor        | 80.84 | 88.61 |
|         tree        | 74.66 | 86.05 |
|       ceiling       | 83.44 |  90.4 |
|         road        | 83.43 | 91.62 |
|         bed         | 89.84 | 95.38 |
|      windowpane     | 60.12 | 80.69 |
|        grass        | 70.49 | 82.83 |
|       cabinet       | 58.45 | 70.23 |
|       sidewalk      | 66.13 | 75.84 |
|        person       | 82.05 | 90.67 |
|        earth        | 39.93 | 56.58 |
|         door        |  44.4 | 58.85 |
|        table        | 60.95 | 73.74 |
|       mountain      | 53.86 | 72.05 |
|        plant        | 50.99 | 62.74 |
|       curtain       | 70.55 | 87.28 |
|        chair        | 55.48 | 69.97 |
|         car         | 83.69 | 90.78 |
|        water        |  51.2 | 65.32 |
|       painting      |  71.4 | 86.55 |
|         sofa        | 67.89 | 85.18 |
|        shelf        | 42.92 | 61.66 |
|        house        | 49.56 | 69.08 |
|         sea         | 54.88 | 81.59 |
|        mirror       | 61.49 | 82.09 |
|         rug         | 63.12 | 86.25 |
|        field        | 29.22 | 48.76 |
|       armchair      | 38.23 | 53.77 |
|         seat        | 55.76 | 77.43 |
|        fence        | 43.38 |  61.2 |
|         desk        | 46.87 | 69.07 |
|         rock        | 43.34 | 63.85 |
|       wardrobe      | 51.86 | 62.45 |
|         lamp        | 64.37 | 75.95 |
|       bathtub       | 73.74 | 84.22 |
|       railing       | 38.54 | 49.76 |
|       cushion       | 54.81 | 64.53 |
|         base        | 31.03 | 51.28 |
|         box         | 22.93 | 31.79 |
|        column       | 41.14 | 54.29 |
|      signboard      | 37.76 | 50.68 |
|   chest of drawers  | 33.76 | 61.52 |
|       counter       | 38.19 | 40.69 |
|         sand        | 43.04 | 64.78 |
|         sink        | 74.12 | 78.45 |
|      skyscraper     | 65.41 | 79.47 |
|      fireplace      | 66.99 | 90.76 |
|     refrigerator    | 69.35 | 71.95 |
|      grandstand     | 39.31 | 70.93 |
|         path        | 24.21 | 37.12 |
|        stairs       | 23.87 | 28.85 |
|        runway       | 87.66 | 88.62 |
|         case        | 55.63 | 77.97 |
|      pool table     | 93.47 | 96.32 |
|        pillow       | 60.33 |  77.6 |
|     screen door     | 40.08 | 44.94 |
|       stairway      | 31.85 | 45.77 |
|        river        |  8.43 | 14.66 |
|        bridge       |  67.3 | 78.22 |
|       bookcase      | 33.46 | 58.47 |
|        blind        | 22.32 | 23.67 |
|     coffee table    | 63.67 |  82.9 |
|        toilet       | 87.08 |  90.2 |
|        flower       | 38.91 | 61.39 |
|         book        | 49.68 | 67.56 |
|         hill        |  3.45 |  8.53 |
|        bench        | 38.52 | 47.53 |
|      countertop     | 53.36 | 71.74 |
|        stove        | 72.69 | 83.58 |
|         palm        | 44.99 | 58.29 |
|    kitchen island   | 43.05 | 75.06 |
|       computer      | 69.71 | 81.58 |
|     swivel chair    | 42.43 | 56.03 |
|         boat        | 51.27 |  85.4 |
|         bar         | 56.37 |  63.1 |
|    arcade machine   | 71.31 | 92.53 |
|        hovel        | 33.22 | 51.63 |
|         bus         | 92.09 | 95.25 |
|        towel        | 72.95 | 87.12 |
|        light        | 56.03 | 77.04 |
|        truck        | 37.55 | 58.72 |
|        tower        | 19.88 | 38.56 |
|      chandelier     | 67.21 | 80.47 |
|        awning       | 21.52 | 38.13 |
|     streetlight     | 33.36 | 49.05 |
|        booth        | 45.47 | 67.03 |
| television receiver | 58.44 | 69.62 |
|       airplane      | 67.81 | 74.64 |
|      dirt track     |  2.01 | 11.58 |
|       apparel       | 30.65 | 44.44 |
|         pole        | 28.17 | 42.49 |
|         land        |  5.53 |  7.52 |
|      bannister      | 23.51 | 34.35 |
|      escalator      | 35.67 | 48.59 |
|       ottoman       | 43.61 |  63.8 |
|        bottle       | 38.32 | 64.74 |
|        buffet       | 48.99 | 66.52 |
|        poster       | 32.83 | 42.66 |
|        stage        | 18.35 | 43.77 |
|         van         | 44.67 | 67.09 |
|         ship        | 88.71 | 92.72 |
|       fountain      | 26.59 |  31.1 |
|    conveyer belt    | 52.15 |  68.0 |
|        canopy       | 25.43 | 35.93 |
|        washer       | 70.34 | 70.91 |
|      plaything      | 22.66 | 45.27 |
|    swimming pool    | 27.35 | 52.65 |
|        stool        | 44.95 | 68.76 |
|        barrel       | 60.64 | 74.72 |
|        basket       | 29.37 |  40.8 |
|      waterfall      | 67.36 | 95.68 |
|         tent        | 89.84 | 98.16 |
|         bag         | 15.68 | 21.55 |
|       minibike      | 74.55 | 86.42 |
|        cradle       | 78.22 | 96.88 |
|         oven        | 35.06 | 39.55 |
|         ball        | 50.98 | 60.38 |
|         food        | 60.36 | 78.15 |
|         step        | 14.74 | 19.32 |
|         tank        | 55.44 | 63.98 |
|      trade name     | 23.16 | 28.37 |
|      microwave      | 85.54 | 93.01 |
|         pot         | 47.81 | 54.73 |
|        animal       | 57.17 | 58.71 |
|       bicycle       | 55.64 | 74.78 |
|         lake        | 48.03 | 69.37 |
|      dishwasher     | 60.18 | 67.79 |
|        screen       | 65.26 | 92.31 |
|       blanket       | 10.93 | 14.07 |
|      sculpture      | 36.82 | 61.35 |
|         hood        | 67.26 | 73.03 |
|        sconce       | 42.17 | 65.38 |
|         vase        | 38.93 | 59.07 |
|    traffic light    | 43.18 | 61.77 |
|         tray        | 18.23 | 22.64 |
|        ashcan       | 50.24 | 61.37 |
|         fan         | 61.89 | 81.69 |
|         pier        | 44.74 |  55.6 |
|      crt screen     |  1.09 |  3.2  |
|        plate        | 56.68 | 74.01 |
|       monitor       | 11.47 | 14.67 |
|    bulletin board   | 44.48 | 68.02 |
|        shower       |  3.37 | 21.03 |
|       radiator      |  65.5 | 70.79 |
|        glass        | 14.23 | 15.44 |
|        clock        | 33.04 | 40.12 |
|         flag        | 46.62 | 53.32 |
+---------------------+-------+-------+
09/21 08:18:52 - mmengine - INFO - Iter(test) [2000/2000]    aAcc: 82.5800  mIoU: 49.6300  mAcc: 63.3000  data_time: 0.0167  time: 11.2043
Finished processing corruption type: glass_blur
Processing corruption type: motion_blur
09/21 08:21:12 - mmengine - INFO - 
------------------------------------------------------------
System environment:
    sys.platform: linux
    Python: 3.10.13 | packaged by conda-forge | (main, Dec 23 2023, 15:36:39) [GCC 12.3.0]
    CUDA available: True
    MUSA available: False
    numpy_random_seed: 271869784
    GPU 0: Tesla V100-SXM2-32GB
    CUDA_HOME: /opt/bwhpc/common/devel/cuda/11.7
    NVCC: Cuda compilation tools, release 11.7, V11.7.99
    GCC: gcc (GCC) 8.5.0 20210514 (Red Hat 8.5.0-18)
    PyTorch: 1.13.1
    PyTorch compiling details: PyTorch built with:
  - GCC 9.3
  - C++ Version: 201402
  - Intel(R) oneAPI Math Kernel Library Version 2023.1-Product Build 20230303 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v2.6.0 (Git Hash 52b5f107dd9cf10910aaa19cb47f3abf9b349815)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - LAPACK is enabled (usually provided by MKL)
  - NNPACK is enabled
  - CPU capability usage: AVX2
  - CUDA Runtime 11.7
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_61,code=sm_61;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86;-gencode;arch=compute_37,code=compute_37
  - CuDNN 8.5
  - Magma 2.6.1
  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.7, CUDNN_VERSION=8.5.0, CXX_COMPILER=/opt/rh/devtoolset-9/root/usr/bin/c++, CXX_FLAGS= -fabi-version=11 -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -DEDGE_PROFILER_USE_KINETO -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Werror=non-virtual-dtor -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wunused-local-typedefs -Wno-unused-parameter -Wno-unused-function -Wno-unused-result -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Werror=cast-function-type -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.13.1, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, USE_ROCM=OFF, 

    TorchVision: 0.14.1
    OpenCV: 3.4.18
    MMEngine: 0.10.4

Runtime environment:
    cudnn_benchmark: True
    mp_cfg: {'mp_start_method': 'fork', 'opencv_num_threads': 0}
    dist_cfg: {'backend': 'nccl'}
    seed: 271869784
    Distributed launcher: none
    Distributed training: False
    GPU number: 1
------------------------------------------------------------

09/21 08:21:13 - mmengine - INFO - Config:
auto_scale_lr = dict(base_batch_size=16, enable=False)
backbone_embed_multi = dict(decay_mult=0.0, lr_mult=0.1)
backbone_norm_multi = dict(decay_mult=0.0, lr_mult=0.1)
crop_size = (
    640,
    640,
)
custom_keys = dict({
    'absolute_pos_embed':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone':
    dict(decay_mult=1.0, lr_mult=0.1),
    'backbone.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.patch_embed.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.0.blocks.0.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.0.blocks.1.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.0.downsample.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.1.blocks.0.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.1.blocks.1.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.1.downsample.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.0.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.1.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.10.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.11.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.12.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.13.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.14.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.15.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.16.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.17.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.2.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.3.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.4.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.5.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.6.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.7.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.8.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.9.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.downsample.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.3.blocks.0.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.3.blocks.1.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'level_embed':
    dict(decay_mult=0.0, lr_mult=1.0),
    'query_embed':
    dict(decay_mult=0.0, lr_mult=1.0),
    'query_feat':
    dict(decay_mult=0.0, lr_mult=1.0),
    'relative_position_bias_table':
    dict(decay_mult=0.0, lr_mult=0.1)
})
data_root = 'data/ade/ADEChallengeData2016'
dataset_type = 'ADE20KDataset'
default_hooks = dict(
    checkpoint=dict(
        by_epoch=False, interval=5000, save_best='mIoU',
        type='CheckpointHook'),
    logger=dict(interval=50, log_metric_by_epoch=False, type='LoggerHook'),
    param_scheduler=dict(type='ParamSchedulerHook'),
    sampler_seed=dict(type='DistSamplerSeedHook'),
    timer=dict(type='IterTimerHook'),
    visualization=dict(type='SegVisualizationHook'))
default_scope = 'mmseg'
depths = [
    2,
    2,
    18,
    2,
]
embed_multi = dict(decay_mult=0.0, lr_mult=1.0)
env_cfg = dict(
    cudnn_benchmark=True,
    dist_cfg=dict(backend='nccl'),
    mp_cfg=dict(mp_start_method='fork', opencv_num_threads=0))
img_ratios = [
    0.5,
    0.75,
    1.0,
    1.25,
    1.5,
    1.75,
]
launcher = 'none'
load_from = '../checkpoint_files/ade20k/mask2former/mask2former_swin-b-in1k-384x384-pre_8xb2-160k_ade20k-640x640_20221129_125118-a4a086d2.pth'
log_level = 'INFO'
log_processor = dict(by_epoch=False)
model = dict(
    backbone=dict(
        attn_drop_rate=0.0,
        depths=[
            2,
            2,
            18,
            2,
        ],
        drop_path_rate=0.3,
        drop_rate=0.0,
        embed_dims=128,
        frozen_stages=-1,
        init_cfg=dict(
            checkpoint=
            'https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/swin/swin_base_patch4_window12_384_20220317-55b0104a.pth',
            type='Pretrained'),
        mlp_ratio=4,
        num_heads=[
            4,
            8,
            16,
            32,
        ],
        out_indices=(
            0,
            1,
            2,
            3,
        ),
        patch_norm=True,
        pretrain_img_size=384,
        qk_scale=None,
        qkv_bias=True,
        type='SwinTransformer',
        window_size=12,
        with_cp=False),
    data_preprocessor=dict(
        bgr_to_rgb=True,
        corruption='motion_blur',
        mean=[
            123.675,
            116.28,
            103.53,
        ],
        pad_val=0,
        seg_pad_val=255,
        size=(
            640,
            640,
        ),
        std=[
            58.395,
            57.12,
            57.375,
        ],
        type='SegDataPreProcessor'),
    decode_head=dict(
        align_corners=False,
        enforce_decoder_input_project=False,
        feat_channels=256,
        in_channels=[
            128,
            256,
            512,
            1024,
        ],
        loss_cls=dict(
            class_weight=[
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                0.1,
            ],
            loss_weight=2.0,
            reduction='mean',
            type='mmdet.CrossEntropyLoss',
            use_sigmoid=False),
        loss_dice=dict(
            activate=True,
            eps=1.0,
            loss_weight=5.0,
            naive_dice=True,
            reduction='mean',
            type='mmdet.DiceLoss',
            use_sigmoid=True),
        loss_mask=dict(
            loss_weight=5.0,
            reduction='mean',
            type='mmdet.CrossEntropyLoss',
            use_sigmoid=True),
        num_classes=150,
        num_queries=100,
        num_transformer_feat_level=3,
        out_channels=256,
        pixel_decoder=dict(
            act_cfg=dict(type='ReLU'),
            encoder=dict(
                init_cfg=None,
                layer_cfg=dict(
                    ffn_cfg=dict(
                        act_cfg=dict(inplace=True, type='ReLU'),
                        embed_dims=256,
                        feedforward_channels=1024,
                        ffn_drop=0.0,
                        num_fcs=2),
                    self_attn_cfg=dict(
                        batch_first=True,
                        dropout=0.0,
                        embed_dims=256,
                        im2col_step=64,
                        init_cfg=None,
                        norm_cfg=None,
                        num_heads=8,
                        num_levels=3,
                        num_points=4)),
                num_layers=6),
            init_cfg=None,
            norm_cfg=dict(num_groups=32, type='GN'),
            num_outs=3,
            positional_encoding=dict(normalize=True, num_feats=128),
            type='mmdet.MSDeformAttnPixelDecoder'),
        positional_encoding=dict(normalize=True, num_feats=128),
        strides=[
            4,
            8,
            16,
            32,
        ],
        train_cfg=dict(
            assigner=dict(
                match_costs=[
                    dict(type='mmdet.ClassificationCost', weight=2.0),
                    dict(
                        type='mmdet.CrossEntropyLossCost',
                        use_sigmoid=True,
                        weight=5.0),
                    dict(
                        eps=1.0,
                        pred_act=True,
                        type='mmdet.DiceCost',
                        weight=5.0),
                ],
                type='mmdet.HungarianAssigner'),
            importance_sample_ratio=0.75,
            num_points=12544,
            oversample_ratio=3.0,
            sampler=dict(type='mmdet.MaskPseudoSampler')),
        transformer_decoder=dict(
            init_cfg=None,
            layer_cfg=dict(
                cross_attn_cfg=dict(
                    attn_drop=0.0,
                    batch_first=True,
                    dropout_layer=None,
                    embed_dims=256,
                    num_heads=8,
                    proj_drop=0.0),
                ffn_cfg=dict(
                    act_cfg=dict(inplace=True, type='ReLU'),
                    add_identity=True,
                    dropout_layer=None,
                    embed_dims=256,
                    feedforward_channels=2048,
                    ffn_drop=0.0,
                    num_fcs=2),
                self_attn_cfg=dict(
                    attn_drop=0.0,
                    batch_first=True,
                    dropout_layer=None,
                    embed_dims=256,
                    num_heads=8,
                    proj_drop=0.0)),
            num_layers=9,
            return_intermediate=True),
        type='Mask2FormerHead'),
    test_cfg=dict(mode='whole'),
    train_cfg=dict(),
    type='EncoderDecoder')
num_classes = 150
optim_wrapper = dict(
    clip_grad=dict(max_norm=0.01, norm_type=2),
    optimizer=dict(
        betas=(
            0.9,
            0.999,
        ),
        eps=1e-08,
        lr=0.0001,
        type='AdamW',
        weight_decay=0.05),
    paramwise_cfg=dict(
        custom_keys=dict({
            'absolute_pos_embed':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone':
            dict(decay_mult=1.0, lr_mult=0.1),
            'backbone.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.patch_embed.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.0.blocks.0.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.0.blocks.1.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.0.downsample.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.1.blocks.0.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.1.blocks.1.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.1.downsample.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.0.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.1.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.10.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.11.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.12.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.13.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.14.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.15.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.16.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.17.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.2.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.3.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.4.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.5.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.6.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.7.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.8.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.9.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.downsample.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.3.blocks.0.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.3.blocks.1.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'level_embed':
            dict(decay_mult=0.0, lr_mult=1.0),
            'query_embed':
            dict(decay_mult=0.0, lr_mult=1.0),
            'query_feat':
            dict(decay_mult=0.0, lr_mult=1.0),
            'relative_position_bias_table':
            dict(decay_mult=0.0, lr_mult=0.1)
        }),
        norm_decay_mult=0.0),
    type='OptimWrapper')
optimizer = dict(
    betas=(
        0.9,
        0.999,
    ),
    eps=1e-08,
    lr=0.0001,
    type='AdamW',
    weight_decay=0.05)
param_scheduler = [
    dict(
        begin=0,
        by_epoch=False,
        end=160000,
        eta_min=0,
        power=0.9,
        type='PolyLR'),
]
pretrained = 'https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/swin/swin_base_patch4_window12_384_20220317-55b0104a.pth'
resume = False
test_cfg = dict(type='TestLoop')
test_dataloader = dict(
    batch_size=1,
    dataset=dict(
        data_prefix=dict(
            img_path='images/validation',
            seg_map_path='annotations/validation'),
        data_root='data/ade/ADEChallengeData2016',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(keep_ratio=True, scale=(
                2560,
                640,
            ), type='Resize'),
            dict(reduce_zero_label=True, type='LoadAnnotations'),
            dict(type='PackSegInputs'),
        ],
        type='ADE20KDataset'),
    num_workers=4,
    persistent_workers=True,
    sampler=dict(shuffle=False, type='DefaultSampler'))
test_evaluator = dict(
    iou_metrics=[
        'mIoU',
    ], type='IoUMetric')
test_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(keep_ratio=True, scale=(
        2560,
        640,
    ), type='Resize'),
    dict(reduce_zero_label=True, type='LoadAnnotations'),
    dict(type='PackSegInputs'),
]
train_cfg = dict(
    max_iters=160000, type='IterBasedTrainLoop', val_interval=5000)
train_dataloader = dict(
    batch_size=2,
    dataset=dict(
        data_prefix=dict(
            img_path='images/training', seg_map_path='annotations/training'),
        data_root='data/ade/ADEChallengeData2016',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(reduce_zero_label=True, type='LoadAnnotations'),
            dict(
                max_size=2560,
                resize_type='ResizeShortestEdge',
                scales=[
                    320,
                    384,
                    448,
                    512,
                    576,
                    640,
                    704,
                    768,
                    832,
                    896,
                    960,
                    1024,
                    1088,
                    1152,
                    1216,
                    1280,
                ],
                type='RandomChoiceResize'),
            dict(
                cat_max_ratio=0.75, crop_size=(
                    640,
                    640,
                ), type='RandomCrop'),
            dict(prob=0.5, type='RandomFlip'),
            dict(type='PhotoMetricDistortion'),
            dict(type='PackSegInputs'),
        ],
        type='ADE20KDataset'),
    num_workers=4,
    persistent_workers=True,
    sampler=dict(shuffle=True, type='InfiniteSampler'))
train_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(reduce_zero_label=True, type='LoadAnnotations'),
    dict(
        max_size=2560,
        resize_type='ResizeShortestEdge',
        scales=[
            320,
            384,
            448,
            512,
            576,
            640,
            704,
            768,
            832,
            896,
            960,
            1024,
            1088,
            1152,
            1216,
            1280,
        ],
        type='RandomChoiceResize'),
    dict(cat_max_ratio=0.75, crop_size=(
        640,
        640,
    ), type='RandomCrop'),
    dict(prob=0.5, type='RandomFlip'),
    dict(type='PhotoMetricDistortion'),
    dict(type='PackSegInputs'),
]
tta_model = dict(type='SegTTAModel')
tta_pipeline = [
    dict(backend_args=None, type='LoadImageFromFile'),
    dict(
        transforms=[
            [
                dict(keep_ratio=True, scale_factor=0.5, type='Resize'),
                dict(keep_ratio=True, scale_factor=0.75, type='Resize'),
                dict(keep_ratio=True, scale_factor=1.0, type='Resize'),
                dict(keep_ratio=True, scale_factor=1.25, type='Resize'),
                dict(keep_ratio=True, scale_factor=1.5, type='Resize'),
                dict(keep_ratio=True, scale_factor=1.75, type='Resize'),
            ],
            [
                dict(direction='horizontal', prob=0.0, type='RandomFlip'),
                dict(direction='horizontal', prob=1.0, type='RandomFlip'),
            ],
            [
                dict(type='LoadAnnotations'),
            ],
            [
                dict(type='PackSegInputs'),
            ],
        ],
        type='TestTimeAug'),
]
val_cfg = dict(type='ValLoop')
val_dataloader = dict(
    batch_size=1,
    dataset=dict(
        data_prefix=dict(
            img_path='images/validation',
            seg_map_path='annotations/validation'),
        data_root='data/ade/ADEChallengeData2016',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(keep_ratio=True, scale=(
                2560,
                640,
            ), type='Resize'),
            dict(reduce_zero_label=True, type='LoadAnnotations'),
            dict(type='PackSegInputs'),
        ],
        type='ADE20KDataset'),
    num_workers=4,
    persistent_workers=True,
    sampler=dict(shuffle=False, type='DefaultSampler'))
val_evaluator = dict(
    iou_metrics=[
        'mIoU',
    ], type='IoUMetric')
vis_backends = [
    dict(type='LocalVisBackend'),
]
visualizer = dict(
    name='visualizer',
    type='SegLocalVisualizer',
    vis_backends=[
        dict(type='LocalVisBackend'),
    ])
work_dir = '../corruptions/work_dirs/ade20k/mask2former/mask2former_swin-b-in1k-384x384-pre_8xb2-160k_ade20k-640x640/motion_blur'

09/21 08:22:28 - mmengine - INFO - Distributed training is not used, all SyncBatchNorm (SyncBN) layers in the model will be automatically reverted to BatchNormXd layers if they are used.
09/21 08:22:28 - mmengine - INFO - Hooks will be executed in the following order:
before_run:
(VERY_HIGH   ) RuntimeInfoHook                    
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
before_train:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_train_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(NORMAL      ) DistSamplerSeedHook                
 -------------------- 
before_train_iter:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_train_iter:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(NORMAL      ) SegVisualizationHook               
(BELOW_NORMAL) LoggerHook                         
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
after_train_epoch:
(NORMAL      ) IterTimerHook                      
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_val:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
before_val_epoch:
(NORMAL      ) IterTimerHook                      
 -------------------- 
before_val_iter:
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_val_iter:
(NORMAL      ) IterTimerHook                      
(NORMAL      ) SegVisualizationHook               
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_val_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
after_val:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
after_train:
(VERY_HIGH   ) RuntimeInfoHook                    
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_test:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
before_test_epoch:
(NORMAL      ) IterTimerHook                      
 -------------------- 
before_test_iter:
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_test_iter:
(NORMAL      ) IterTimerHook                      
(NORMAL      ) SegVisualizationHook               
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_test_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_test:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
after_run:
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
09/21 08:22:30 - mmengine - WARNING - The prefix is not set in metric class IoUMetric.
Loads checkpoint by local backend from path: ../checkpoint_files/ade20k/mask2former/mask2former_swin-b-in1k-384x384-pre_8xb2-160k_ade20k-640x640_20221129_125118-a4a086d2.pth
09/21 08:22:34 - mmengine - INFO - Load checkpoint from ../checkpoint_files/ade20k/mask2former/mask2former_swin-b-in1k-384x384-pre_8xb2-160k_ade20k-640x640_20221129_125118-a4a086d2.pth
09/21 08:25:43 - mmengine - INFO - Iter(test) [  50/2000]    eta: 2:02:46  time: 1.7718  data_time: 0.0098  memory: 17181  
09/21 08:27:09 - mmengine - INFO - Iter(test) [ 100/2000]    eta: 1:26:58  time: 1.7315  data_time: 0.0046  memory: 17180  
09/21 08:28:29 - mmengine - INFO - Iter(test) [ 150/2000]    eta: 1:12:57  time: 1.5453  data_time: 0.0019  memory: 17150  
09/21 08:29:51 - mmengine - INFO - Iter(test) [ 200/2000]    eta: 1:05:35  time: 1.6256  data_time: 0.0019  memory: 17194  
09/21 08:31:12 - mmengine - INFO - Iter(test) [ 250/2000]    eta: 1:00:27  time: 1.5426  data_time: 0.0017  memory: 17202  
09/21 08:32:28 - mmengine - INFO - Iter(test) [ 300/2000]    eta: 0:56:05  time: 1.3484  data_time: 0.0016  memory: 17180  
09/21 08:33:52 - mmengine - INFO - Iter(test) [ 350/2000]    eta: 0:53:15  time: 2.1798  data_time: 0.0611  memory: 17178  
09/21 08:35:09 - mmengine - INFO - Iter(test) [ 400/2000]    eta: 0:50:19  time: 1.5529  data_time: 0.0018  memory: 17177  
09/21 08:36:18 - mmengine - INFO - Iter(test) [ 450/2000]    eta: 0:47:18  time: 1.6322  data_time: 0.0131  memory: 17147  
09/21 08:37:33 - mmengine - INFO - Iter(test) [ 500/2000]    eta: 0:44:55  time: 1.4488  data_time: 0.0020  memory: 17149  
09/21 08:38:50 - mmengine - INFO - Iter(test) [ 550/2000]    eta: 0:42:52  time: 1.6391  data_time: 0.0019  memory: 17179  
09/21 08:39:59 - mmengine - INFO - Iter(test) [ 600/2000]    eta: 0:40:38  time: 1.4185  data_time: 0.0019  memory: 3938  
09/21 08:41:15 - mmengine - INFO - Iter(test) [ 650/2000]    eta: 0:38:47  time: 1.5114  data_time: 0.0017  memory: 17181  
09/21 08:42:37 - mmengine - INFO - Iter(test) [ 700/2000]    eta: 0:37:12  time: 1.6772  data_time: 0.0027  memory: 17177  
09/21 08:43:55 - mmengine - INFO - Iter(test) [ 750/2000]    eta: 0:35:35  time: 1.7610  data_time: 0.0017  memory: 17184  
09/21 08:45:04 - mmengine - INFO - Iter(test) [ 800/2000]    eta: 0:33:44  time: 1.3902  data_time: 0.0029  memory: 17151  
09/21 08:46:15 - mmengine - INFO - Iter(test) [ 850/2000]    eta: 0:32:02  time: 1.4333  data_time: 0.0019  memory: 1428  
09/21 08:47:28 - mmengine - INFO - Iter(test) [ 900/2000]    eta: 0:30:25  time: 1.3239  data_time: 0.0018  memory: 17138  
09/21 08:48:45 - mmengine - INFO - Iter(test) [ 950/2000]    eta: 0:28:55  time: 1.5867  data_time: 0.0018  memory: 17133  
09/21 08:50:01 - mmengine - INFO - Iter(test) [1000/2000]    eta: 0:27:26  time: 1.4390  data_time: 0.0017  memory: 17096  
09/21 08:51:16 - mmengine - INFO - Iter(test) [1050/2000]    eta: 0:25:57  time: 1.6044  data_time: 0.0018  memory: 17182  
09/21 08:52:34 - mmengine - INFO - Iter(test) [1100/2000]    eta: 0:24:32  time: 1.4551  data_time: 0.0032  memory: 17175  
09/21 08:53:45 - mmengine - INFO - Iter(test) [1150/2000]    eta: 0:23:02  time: 1.4147  data_time: 0.0018  memory: 17117  
09/21 08:54:59 - mmengine - INFO - Iter(test) [1200/2000]    eta: 0:21:36  time: 1.4130  data_time: 0.0026  memory: 17113  
09/21 08:56:13 - mmengine - INFO - Iter(test) [1250/2000]    eta: 0:20:11  time: 1.5021  data_time: 0.0078  memory: 17172  
09/21 08:57:21 - mmengine - INFO - Iter(test) [1300/2000]    eta: 0:18:43  time: 1.4587  data_time: 0.0048  memory: 1430  
09/21 08:58:34 - mmengine - INFO - Iter(test) [1350/2000]    eta: 0:17:19  time: 1.3442  data_time: 0.0021  memory: 17110  
09/21 08:59:50 - mmengine - INFO - Iter(test) [1400/2000]    eta: 0:15:58  time: 1.5382  data_time: 0.0027  memory: 17154  
09/21 09:01:00 - mmengine - INFO - Iter(test) [1450/2000]    eta: 0:14:34  time: 1.5762  data_time: 0.0019  memory: 17130  
09/21 09:02:14 - mmengine - INFO - Iter(test) [1500/2000]    eta: 0:13:13  time: 1.3002  data_time: 0.0017  memory: 17125  
09/21 09:03:32 - mmengine - INFO - Iter(test) [1550/2000]    eta: 0:11:53  time: 1.5357  data_time: 0.0026  memory: 17154  
09/21 09:04:39 - mmengine - INFO - Iter(test) [1600/2000]    eta: 0:10:31  time: 1.3564  data_time: 0.0019  memory: 1425  
09/21 09:05:52 - mmengine - INFO - Iter(test) [1650/2000]    eta: 0:09:10  time: 1.3418  data_time: 0.0016  memory: 17192  
09/21 09:07:10 - mmengine - INFO - Iter(test) [1700/2000]    eta: 0:07:52  time: 1.5202  data_time: 0.0019  memory: 17151  
09/21 09:08:25 - mmengine - INFO - Iter(test) [1750/2000]    eta: 0:06:32  time: 1.4932  data_time: 0.0017  memory: 17111  
09/21 09:09:35 - mmengine - INFO - Iter(test) [1800/2000]    eta: 0:05:13  time: 1.4528  data_time: 0.0019  memory: 17114  
09/21 09:10:46 - mmengine - INFO - Iter(test) [1850/2000]    eta: 0:03:54  time: 1.4199  data_time: 0.0028  memory: 1317  
09/21 09:11:55 - mmengine - INFO - Iter(test) [1900/2000]    eta: 0:02:35  time: 1.4262  data_time: 0.0033  memory: 17182  
09/21 09:13:10 - mmengine - INFO - Iter(test) [1950/2000]    eta: 0:01:17  time: 1.4942  data_time: 0.0017  memory: 17197  
09/21 09:14:22 - mmengine - INFO - Iter(test) [2000/2000]    eta: 0:00:00  time: 1.2979  data_time: 0.0017  memory: 17131  
09/21 09:14:23 - mmengine - INFO - per class results:
09/21 09:14:23 - mmengine - INFO - 
+---------------------+-------+-------+
|        Class        |  IoU  |  Acc  |
+---------------------+-------+-------+
|         wall        | 75.93 | 84.55 |
|       building      | 80.71 | 93.02 |
|         sky         | 93.38 | 96.55 |
|        floor        | 82.03 | 88.54 |
|         tree        | 74.43 | 84.32 |
|       ceiling       | 84.45 | 91.42 |
|         road        | 83.55 | 91.08 |
|         bed         |  89.3 | 95.57 |
|      windowpane     | 59.77 | 78.96 |
|        grass        | 69.28 | 84.72 |
|       cabinet       | 57.54 |  71.8 |
|       sidewalk      | 65.55 | 78.59 |
|        person       | 81.04 |  89.5 |
|        earth        | 40.97 | 54.58 |
|         door        | 41.97 | 57.37 |
|        table        | 62.84 | 76.66 |
|       mountain      | 49.11 | 70.02 |
|        plant        | 51.43 |  63.4 |
|       curtain       | 73.96 | 82.57 |
|        chair        | 57.61 | 72.58 |
|         car         | 84.61 | 92.98 |
|        water        | 53.04 | 65.35 |
|       painting      | 67.87 | 84.83 |
|         sofa        | 64.07 | 83.19 |
|        shelf        | 42.84 | 67.69 |
|        house        | 52.46 | 68.55 |
|         sea         |  59.1 | 90.39 |
|        mirror       | 64.81 | 79.82 |
|         rug         | 64.05 | 86.28 |
|        field        | 29.23 | 44.96 |
|       armchair      | 41.13 |  57.3 |
|         seat        | 62.62 | 82.09 |
|        fence        | 41.96 | 51.72 |
|         desk        | 46.08 | 70.68 |
|         rock        | 34.68 | 60.51 |
|       wardrobe      |  55.4 | 66.46 |
|         lamp        | 62.11 | 75.84 |
|       bathtub       |  76.2 | 84.99 |
|       railing       | 39.57 | 60.69 |
|       cushion       | 55.55 | 64.36 |
|         base        | 31.01 | 62.03 |
|         box         | 24.23 | 35.86 |
|        column       | 42.59 | 55.28 |
|      signboard      | 37.52 | 54.95 |
|   chest of drawers  | 32.68 | 61.51 |
|       counter       | 32.77 | 46.65 |
|         sand        | 37.75 | 57.84 |
|         sink        | 72.15 | 81.87 |
|      skyscraper     | 36.88 |  43.2 |
|      fireplace      | 73.23 |  87.6 |
|     refrigerator    | 73.03 | 81.25 |
|      grandstand     |  38.1 | 65.43 |
|         path        | 23.57 | 35.28 |
|        stairs       | 24.74 | 31.94 |
|        runway       |  68.8 | 87.24 |
|         case        | 43.29 | 59.81 |
|      pool table     | 85.09 | 96.16 |
|        pillow       | 58.78 | 76.34 |
|     screen door     | 34.71 | 44.29 |
|       stairway      | 32.98 | 51.62 |
|        river        | 12.36 | 21.38 |
|        bridge       | 74.65 | 84.63 |
|       bookcase      | 32.25 | 50.03 |
|        blind        | 38.96 | 42.96 |
|     coffee table    | 64.92 | 82.33 |
|        toilet       | 86.01 | 90.33 |
|        flower       | 38.22 |  47.1 |
|         book        | 48.64 | 69.76 |
|         hill        |  3.69 |  7.56 |
|        bench        | 39.76 | 54.75 |
|      countertop     | 63.12 | 78.83 |
|        stove        | 70.97 | 85.55 |
|         palm        | 43.32 | 57.75 |
|    kitchen island   | 46.15 |  77.6 |
|       computer      | 65.07 | 74.63 |
|     swivel chair    | 44.35 | 58.85 |
|         boat        | 67.28 | 87.64 |
|         bar         | 32.55 | 40.74 |
|    arcade machine   | 67.88 | 78.06 |
|        hovel        | 10.46 | 15.38 |
|         bus         | 91.61 | 96.15 |
|        towel        |  71.4 | 80.74 |
|        light        | 57.52 | 77.23 |
|        truck        | 40.89 | 61.67 |
|        tower        | 25.85 | 52.65 |
|      chandelier     | 66.54 | 78.62 |
|        awning       | 23.31 | 37.69 |
|     streetlight     | 30.25 | 49.71 |
|        booth        | 42.93 | 65.18 |
| television receiver |  66.6 | 78.59 |
|       airplane      | 63.77 | 74.68 |
|      dirt track     |  1.73 | 10.83 |
|       apparel       | 30.98 | 44.37 |
|         pole        | 21.87 | 32.19 |
|         land        |  4.1  |  5.8  |
|      bannister      | 23.99 | 34.79 |
|      escalator      |  46.0 | 59.44 |
|       ottoman       | 46.09 | 63.69 |
|        bottle       | 33.94 | 44.97 |
|        buffet       | 29.04 | 42.68 |
|        poster       | 26.28 | 36.95 |
|        stage        | 13.95 |  28.9 |
|         van         | 44.01 | 55.48 |
|         ship        | 72.44 | 82.46 |
|       fountain      | 46.92 | 50.11 |
|    conveyer belt    | 48.52 |  67.8 |
|        canopy       | 30.81 | 42.87 |
|        washer       | 71.75 | 74.57 |
|      plaything      | 24.26 | 40.14 |
|    swimming pool    |  61.1 | 63.01 |
|        stool        | 46.16 | 66.83 |
|        barrel       | 60.12 |  74.6 |
|        basket       | 32.87 | 46.24 |
|      waterfall      | 35.65 | 53.91 |
|         tent        | 88.65 | 98.01 |
|         bag         | 14.73 | 21.45 |
|       minibike      | 67.98 | 87.33 |
|        cradle       | 78.91 |  96.5 |
|         oven        | 33.88 | 39.85 |
|         ball        | 50.95 | 60.82 |
|         food        | 61.15 | 74.48 |
|         step        | 20.23 | 25.72 |
|         tank        | 46.08 | 65.36 |
|      trade name     | 28.03 | 38.13 |
|      microwave      | 83.71 | 95.71 |
|         pot         | 49.29 | 59.42 |
|        animal       | 64.14 | 66.88 |
|       bicycle       | 56.43 |  80.3 |
|         lake        | 44.26 | 63.42 |
|      dishwasher     | 64.22 | 82.71 |
|        screen       | 66.99 | 90.03 |
|       blanket       | 14.74 | 17.26 |
|      sculpture      | 52.52 | 67.65 |
|         hood        | 80.06 | 89.02 |
|        sconce       | 42.63 | 65.35 |
|         vase        | 39.82 | 58.78 |
|    traffic light    | 34.74 | 65.54 |
|         tray        | 18.07 | 27.57 |
|        ashcan       | 41.12 | 68.14 |
|         fan         | 60.77 |  83.4 |
|         pier        | 32.74 | 41.75 |
|      crt screen     |  1.03 |  2.67 |
|        plate        | 58.63 | 78.97 |
|       monitor       |  3.23 |  5.85 |
|    bulletin board   | 59.02 |  78.3 |
|        shower       |  14.5 | 20.44 |
|       radiator      | 62.87 | 71.39 |
|        glass        | 13.94 | 16.43 |
|        clock        | 47.18 | 60.43 |
|         flag        | 69.25 | 78.75 |
+---------------------+-------+-------+
09/21 09:14:23 - mmengine - INFO - Iter(test) [2000/2000]    aAcc: 82.2600  mIoU: 49.5100  mAcc: 63.2400  data_time: 0.0050  time: 1.5535
Finished processing corruption type: motion_blur
Processing corruption type: zoom_blur
09/21 09:16:39 - mmengine - INFO - 
------------------------------------------------------------
System environment:
    sys.platform: linux
    Python: 3.10.13 | packaged by conda-forge | (main, Dec 23 2023, 15:36:39) [GCC 12.3.0]
    CUDA available: True
    MUSA available: False
    numpy_random_seed: 2018258529
    GPU 0: Tesla V100-SXM2-32GB
    CUDA_HOME: /opt/bwhpc/common/devel/cuda/11.7
    NVCC: Cuda compilation tools, release 11.7, V11.7.99
    GCC: gcc (GCC) 8.5.0 20210514 (Red Hat 8.5.0-18)
    PyTorch: 1.13.1
    PyTorch compiling details: PyTorch built with:
  - GCC 9.3
  - C++ Version: 201402
  - Intel(R) oneAPI Math Kernel Library Version 2023.1-Product Build 20230303 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v2.6.0 (Git Hash 52b5f107dd9cf10910aaa19cb47f3abf9b349815)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - LAPACK is enabled (usually provided by MKL)
  - NNPACK is enabled
  - CPU capability usage: AVX2
  - CUDA Runtime 11.7
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_61,code=sm_61;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86;-gencode;arch=compute_37,code=compute_37
  - CuDNN 8.5
  - Magma 2.6.1
  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.7, CUDNN_VERSION=8.5.0, CXX_COMPILER=/opt/rh/devtoolset-9/root/usr/bin/c++, CXX_FLAGS= -fabi-version=11 -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -DEDGE_PROFILER_USE_KINETO -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Werror=non-virtual-dtor -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wunused-local-typedefs -Wno-unused-parameter -Wno-unused-function -Wno-unused-result -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Werror=cast-function-type -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.13.1, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, USE_ROCM=OFF, 

    TorchVision: 0.14.1
    OpenCV: 3.4.18
    MMEngine: 0.10.4

Runtime environment:
    cudnn_benchmark: True
    mp_cfg: {'mp_start_method': 'fork', 'opencv_num_threads': 0}
    dist_cfg: {'backend': 'nccl'}
    seed: 2018258529
    Distributed launcher: none
    Distributed training: False
    GPU number: 1
------------------------------------------------------------

09/21 09:16:39 - mmengine - INFO - Config:
auto_scale_lr = dict(base_batch_size=16, enable=False)
backbone_embed_multi = dict(decay_mult=0.0, lr_mult=0.1)
backbone_norm_multi = dict(decay_mult=0.0, lr_mult=0.1)
crop_size = (
    640,
    640,
)
custom_keys = dict({
    'absolute_pos_embed':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone':
    dict(decay_mult=1.0, lr_mult=0.1),
    'backbone.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.patch_embed.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.0.blocks.0.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.0.blocks.1.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.0.downsample.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.1.blocks.0.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.1.blocks.1.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.1.downsample.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.0.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.1.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.10.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.11.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.12.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.13.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.14.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.15.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.16.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.17.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.2.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.3.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.4.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.5.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.6.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.7.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.8.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.9.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.downsample.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.3.blocks.0.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.3.blocks.1.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'level_embed':
    dict(decay_mult=0.0, lr_mult=1.0),
    'query_embed':
    dict(decay_mult=0.0, lr_mult=1.0),
    'query_feat':
    dict(decay_mult=0.0, lr_mult=1.0),
    'relative_position_bias_table':
    dict(decay_mult=0.0, lr_mult=0.1)
})
data_root = 'data/ade/ADEChallengeData2016'
dataset_type = 'ADE20KDataset'
default_hooks = dict(
    checkpoint=dict(
        by_epoch=False, interval=5000, save_best='mIoU',
        type='CheckpointHook'),
    logger=dict(interval=50, log_metric_by_epoch=False, type='LoggerHook'),
    param_scheduler=dict(type='ParamSchedulerHook'),
    sampler_seed=dict(type='DistSamplerSeedHook'),
    timer=dict(type='IterTimerHook'),
    visualization=dict(type='SegVisualizationHook'))
default_scope = 'mmseg'
depths = [
    2,
    2,
    18,
    2,
]
embed_multi = dict(decay_mult=0.0, lr_mult=1.0)
env_cfg = dict(
    cudnn_benchmark=True,
    dist_cfg=dict(backend='nccl'),
    mp_cfg=dict(mp_start_method='fork', opencv_num_threads=0))
img_ratios = [
    0.5,
    0.75,
    1.0,
    1.25,
    1.5,
    1.75,
]
launcher = 'none'
load_from = '../checkpoint_files/ade20k/mask2former/mask2former_swin-b-in1k-384x384-pre_8xb2-160k_ade20k-640x640_20221129_125118-a4a086d2.pth'
log_level = 'INFO'
log_processor = dict(by_epoch=False)
model = dict(
    backbone=dict(
        attn_drop_rate=0.0,
        depths=[
            2,
            2,
            18,
            2,
        ],
        drop_path_rate=0.3,
        drop_rate=0.0,
        embed_dims=128,
        frozen_stages=-1,
        init_cfg=dict(
            checkpoint=
            'https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/swin/swin_base_patch4_window12_384_20220317-55b0104a.pth',
            type='Pretrained'),
        mlp_ratio=4,
        num_heads=[
            4,
            8,
            16,
            32,
        ],
        out_indices=(
            0,
            1,
            2,
            3,
        ),
        patch_norm=True,
        pretrain_img_size=384,
        qk_scale=None,
        qkv_bias=True,
        type='SwinTransformer',
        window_size=12,
        with_cp=False),
    data_preprocessor=dict(
        bgr_to_rgb=True,
        corruption='zoom_blur',
        mean=[
            123.675,
            116.28,
            103.53,
        ],
        pad_val=0,
        seg_pad_val=255,
        size=(
            640,
            640,
        ),
        std=[
            58.395,
            57.12,
            57.375,
        ],
        type='SegDataPreProcessor'),
    decode_head=dict(
        align_corners=False,
        enforce_decoder_input_project=False,
        feat_channels=256,
        in_channels=[
            128,
            256,
            512,
            1024,
        ],
        loss_cls=dict(
            class_weight=[
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                0.1,
            ],
            loss_weight=2.0,
            reduction='mean',
            type='mmdet.CrossEntropyLoss',
            use_sigmoid=False),
        loss_dice=dict(
            activate=True,
            eps=1.0,
            loss_weight=5.0,
            naive_dice=True,
            reduction='mean',
            type='mmdet.DiceLoss',
            use_sigmoid=True),
        loss_mask=dict(
            loss_weight=5.0,
            reduction='mean',
            type='mmdet.CrossEntropyLoss',
            use_sigmoid=True),
        num_classes=150,
        num_queries=100,
        num_transformer_feat_level=3,
        out_channels=256,
        pixel_decoder=dict(
            act_cfg=dict(type='ReLU'),
            encoder=dict(
                init_cfg=None,
                layer_cfg=dict(
                    ffn_cfg=dict(
                        act_cfg=dict(inplace=True, type='ReLU'),
                        embed_dims=256,
                        feedforward_channels=1024,
                        ffn_drop=0.0,
                        num_fcs=2),
                    self_attn_cfg=dict(
                        batch_first=True,
                        dropout=0.0,
                        embed_dims=256,
                        im2col_step=64,
                        init_cfg=None,
                        norm_cfg=None,
                        num_heads=8,
                        num_levels=3,
                        num_points=4)),
                num_layers=6),
            init_cfg=None,
            norm_cfg=dict(num_groups=32, type='GN'),
            num_outs=3,
            positional_encoding=dict(normalize=True, num_feats=128),
            type='mmdet.MSDeformAttnPixelDecoder'),
        positional_encoding=dict(normalize=True, num_feats=128),
        strides=[
            4,
            8,
            16,
            32,
        ],
        train_cfg=dict(
            assigner=dict(
                match_costs=[
                    dict(type='mmdet.ClassificationCost', weight=2.0),
                    dict(
                        type='mmdet.CrossEntropyLossCost',
                        use_sigmoid=True,
                        weight=5.0),
                    dict(
                        eps=1.0,
                        pred_act=True,
                        type='mmdet.DiceCost',
                        weight=5.0),
                ],
                type='mmdet.HungarianAssigner'),
            importance_sample_ratio=0.75,
            num_points=12544,
            oversample_ratio=3.0,
            sampler=dict(type='mmdet.MaskPseudoSampler')),
        transformer_decoder=dict(
            init_cfg=None,
            layer_cfg=dict(
                cross_attn_cfg=dict(
                    attn_drop=0.0,
                    batch_first=True,
                    dropout_layer=None,
                    embed_dims=256,
                    num_heads=8,
                    proj_drop=0.0),
                ffn_cfg=dict(
                    act_cfg=dict(inplace=True, type='ReLU'),
                    add_identity=True,
                    dropout_layer=None,
                    embed_dims=256,
                    feedforward_channels=2048,
                    ffn_drop=0.0,
                    num_fcs=2),
                self_attn_cfg=dict(
                    attn_drop=0.0,
                    batch_first=True,
                    dropout_layer=None,
                    embed_dims=256,
                    num_heads=8,
                    proj_drop=0.0)),
            num_layers=9,
            return_intermediate=True),
        type='Mask2FormerHead'),
    test_cfg=dict(mode='whole'),
    train_cfg=dict(),
    type='EncoderDecoder')
num_classes = 150
optim_wrapper = dict(
    clip_grad=dict(max_norm=0.01, norm_type=2),
    optimizer=dict(
        betas=(
            0.9,
            0.999,
        ),
        eps=1e-08,
        lr=0.0001,
        type='AdamW',
        weight_decay=0.05),
    paramwise_cfg=dict(
        custom_keys=dict({
            'absolute_pos_embed':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone':
            dict(decay_mult=1.0, lr_mult=0.1),
            'backbone.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.patch_embed.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.0.blocks.0.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.0.blocks.1.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.0.downsample.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.1.blocks.0.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.1.blocks.1.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.1.downsample.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.0.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.1.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.10.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.11.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.12.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.13.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.14.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.15.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.16.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.17.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.2.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.3.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.4.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.5.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.6.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.7.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.8.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.9.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.downsample.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.3.blocks.0.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.3.blocks.1.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'level_embed':
            dict(decay_mult=0.0, lr_mult=1.0),
            'query_embed':
            dict(decay_mult=0.0, lr_mult=1.0),
            'query_feat':
            dict(decay_mult=0.0, lr_mult=1.0),
            'relative_position_bias_table':
            dict(decay_mult=0.0, lr_mult=0.1)
        }),
        norm_decay_mult=0.0),
    type='OptimWrapper')
optimizer = dict(
    betas=(
        0.9,
        0.999,
    ),
    eps=1e-08,
    lr=0.0001,
    type='AdamW',
    weight_decay=0.05)
param_scheduler = [
    dict(
        begin=0,
        by_epoch=False,
        end=160000,
        eta_min=0,
        power=0.9,
        type='PolyLR'),
]
pretrained = 'https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/swin/swin_base_patch4_window12_384_20220317-55b0104a.pth'
resume = False
test_cfg = dict(type='TestLoop')
test_dataloader = dict(
    batch_size=1,
    dataset=dict(
        data_prefix=dict(
            img_path='images/validation',
            seg_map_path='annotations/validation'),
        data_root='data/ade/ADEChallengeData2016',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(keep_ratio=True, scale=(
                2560,
                640,
            ), type='Resize'),
            dict(reduce_zero_label=True, type='LoadAnnotations'),
            dict(type='PackSegInputs'),
        ],
        type='ADE20KDataset'),
    num_workers=4,
    persistent_workers=True,
    sampler=dict(shuffle=False, type='DefaultSampler'))
test_evaluator = dict(
    iou_metrics=[
        'mIoU',
    ], type='IoUMetric')
test_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(keep_ratio=True, scale=(
        2560,
        640,
    ), type='Resize'),
    dict(reduce_zero_label=True, type='LoadAnnotations'),
    dict(type='PackSegInputs'),
]
train_cfg = dict(
    max_iters=160000, type='IterBasedTrainLoop', val_interval=5000)
train_dataloader = dict(
    batch_size=2,
    dataset=dict(
        data_prefix=dict(
            img_path='images/training', seg_map_path='annotations/training'),
        data_root='data/ade/ADEChallengeData2016',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(reduce_zero_label=True, type='LoadAnnotations'),
            dict(
                max_size=2560,
                resize_type='ResizeShortestEdge',
                scales=[
                    320,
                    384,
                    448,
                    512,
                    576,
                    640,
                    704,
                    768,
                    832,
                    896,
                    960,
                    1024,
                    1088,
                    1152,
                    1216,
                    1280,
                ],
                type='RandomChoiceResize'),
            dict(
                cat_max_ratio=0.75, crop_size=(
                    640,
                    640,
                ), type='RandomCrop'),
            dict(prob=0.5, type='RandomFlip'),
            dict(type='PhotoMetricDistortion'),
            dict(type='PackSegInputs'),
        ],
        type='ADE20KDataset'),
    num_workers=4,
    persistent_workers=True,
    sampler=dict(shuffle=True, type='InfiniteSampler'))
train_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(reduce_zero_label=True, type='LoadAnnotations'),
    dict(
        max_size=2560,
        resize_type='ResizeShortestEdge',
        scales=[
            320,
            384,
            448,
            512,
            576,
            640,
            704,
            768,
            832,
            896,
            960,
            1024,
            1088,
            1152,
            1216,
            1280,
        ],
        type='RandomChoiceResize'),
    dict(cat_max_ratio=0.75, crop_size=(
        640,
        640,
    ), type='RandomCrop'),
    dict(prob=0.5, type='RandomFlip'),
    dict(type='PhotoMetricDistortion'),
    dict(type='PackSegInputs'),
]
tta_model = dict(type='SegTTAModel')
tta_pipeline = [
    dict(backend_args=None, type='LoadImageFromFile'),
    dict(
        transforms=[
            [
                dict(keep_ratio=True, scale_factor=0.5, type='Resize'),
                dict(keep_ratio=True, scale_factor=0.75, type='Resize'),
                dict(keep_ratio=True, scale_factor=1.0, type='Resize'),
                dict(keep_ratio=True, scale_factor=1.25, type='Resize'),
                dict(keep_ratio=True, scale_factor=1.5, type='Resize'),
                dict(keep_ratio=True, scale_factor=1.75, type='Resize'),
            ],
            [
                dict(direction='horizontal', prob=0.0, type='RandomFlip'),
                dict(direction='horizontal', prob=1.0, type='RandomFlip'),
            ],
            [
                dict(type='LoadAnnotations'),
            ],
            [
                dict(type='PackSegInputs'),
            ],
        ],
        type='TestTimeAug'),
]
val_cfg = dict(type='ValLoop')
val_dataloader = dict(
    batch_size=1,
    dataset=dict(
        data_prefix=dict(
            img_path='images/validation',
            seg_map_path='annotations/validation'),
        data_root='data/ade/ADEChallengeData2016',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(keep_ratio=True, scale=(
                2560,
                640,
            ), type='Resize'),
            dict(reduce_zero_label=True, type='LoadAnnotations'),
            dict(type='PackSegInputs'),
        ],
        type='ADE20KDataset'),
    num_workers=4,
    persistent_workers=True,
    sampler=dict(shuffle=False, type='DefaultSampler'))
val_evaluator = dict(
    iou_metrics=[
        'mIoU',
    ], type='IoUMetric')
vis_backends = [
    dict(type='LocalVisBackend'),
]
visualizer = dict(
    name='visualizer',
    type='SegLocalVisualizer',
    vis_backends=[
        dict(type='LocalVisBackend'),
    ])
work_dir = '../corruptions/work_dirs/ade20k/mask2former/mask2former_swin-b-in1k-384x384-pre_8xb2-160k_ade20k-640x640/zoom_blur'

09/21 09:17:52 - mmengine - INFO - Distributed training is not used, all SyncBatchNorm (SyncBN) layers in the model will be automatically reverted to BatchNormXd layers if they are used.
09/21 09:17:53 - mmengine - INFO - Hooks will be executed in the following order:
before_run:
(VERY_HIGH   ) RuntimeInfoHook                    
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
before_train:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_train_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(NORMAL      ) DistSamplerSeedHook                
 -------------------- 
before_train_iter:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_train_iter:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(NORMAL      ) SegVisualizationHook               
(BELOW_NORMAL) LoggerHook                         
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
after_train_epoch:
(NORMAL      ) IterTimerHook                      
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_val:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
before_val_epoch:
(NORMAL      ) IterTimerHook                      
 -------------------- 
before_val_iter:
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_val_iter:
(NORMAL      ) IterTimerHook                      
(NORMAL      ) SegVisualizationHook               
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_val_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
after_val:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
after_train:
(VERY_HIGH   ) RuntimeInfoHook                    
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_test:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
before_test_epoch:
(NORMAL      ) IterTimerHook                      
 -------------------- 
before_test_iter:
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_test_iter:
(NORMAL      ) IterTimerHook                      
(NORMAL      ) SegVisualizationHook               
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_test_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_test:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
after_run:
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
09/21 09:17:54 - mmengine - WARNING - The prefix is not set in metric class IoUMetric.
Loads checkpoint by local backend from path: ../checkpoint_files/ade20k/mask2former/mask2former_swin-b-in1k-384x384-pre_8xb2-160k_ade20k-640x640_20221129_125118-a4a086d2.pth
09/21 09:17:58 - mmengine - INFO - Load checkpoint from ../checkpoint_files/ade20k/mask2former/mask2former_swin-b-in1k-384x384-pre_8xb2-160k_ade20k-640x640_20221129_125118-a4a086d2.pth
09/21 09:20:55 - mmengine - INFO - Iter(test) [  50/2000]    eta: 1:54:50  time: 1.5504  data_time: 0.0019  memory: 17181  
09/21 09:22:12 - mmengine - INFO - Iter(test) [ 100/2000]    eta: 1:20:15  time: 1.5433  data_time: 0.0066  memory: 17180  
09/21 09:23:25 - mmengine - INFO - Iter(test) [ 150/2000]    eta: 1:07:16  time: 1.4754  data_time: 0.0073  memory: 17150  
09/21 09:24:39 - mmengine - INFO - Iter(test) [ 200/2000]    eta: 1:00:09  time: 1.4501  data_time: 0.0018  memory: 17194  
09/21 09:25:51 - mmengine - INFO - Iter(test) [ 250/2000]    eta: 0:55:11  time: 1.3288  data_time: 0.0017  memory: 17202  
09/21 09:27:00 - mmengine - INFO - Iter(test) [ 300/2000]    eta: 0:51:10  time: 1.3831  data_time: 0.0027  memory: 17180  
09/21 09:28:10 - mmengine - INFO - Iter(test) [ 350/2000]    eta: 0:48:06  time: 1.3328  data_time: 0.0018  memory: 17178  
09/21 09:29:17 - mmengine - INFO - Iter(test) [ 400/2000]    eta: 0:45:14  time: 1.3408  data_time: 0.0084  memory: 17177  
09/21 09:30:17 - mmengine - INFO - Iter(test) [ 450/2000]    eta: 0:42:24  time: 1.2159  data_time: 0.0017  memory: 17147  
09/21 09:31:23 - mmengine - INFO - Iter(test) [ 500/2000]    eta: 0:40:13  time: 1.2987  data_time: 0.0017  memory: 17149  
09/21 09:32:31 - mmengine - INFO - Iter(test) [ 550/2000]    eta: 0:38:19  time: 1.4037  data_time: 0.0018  memory: 17179  
09/21 09:33:33 - mmengine - INFO - Iter(test) [ 600/2000]    eta: 0:36:22  time: 1.2812  data_time: 0.0018  memory: 3938  
09/21 09:34:40 - mmengine - INFO - Iter(test) [ 650/2000]    eta: 0:34:41  time: 1.4727  data_time: 0.0017  memory: 17181  
09/21 09:35:51 - mmengine - INFO - Iter(test) [ 700/2000]    eta: 0:33:12  time: 1.3831  data_time: 0.0023  memory: 17177  
09/21 09:37:00 - mmengine - INFO - Iter(test) [ 750/2000]    eta: 0:31:42  time: 1.5939  data_time: 0.0017  memory: 17184  
09/21 09:38:00 - mmengine - INFO - Iter(test) [ 800/2000]    eta: 0:30:02  time: 1.2528  data_time: 0.0020  memory: 17151  
09/21 09:39:06 - mmengine - INFO - Iter(test) [ 850/2000]    eta: 0:28:35  time: 1.2712  data_time: 0.0019  memory: 1428  
09/21 09:40:10 - mmengine - INFO - Iter(test) [ 900/2000]    eta: 0:27:07  time: 1.1971  data_time: 0.0022  memory: 17138  
09/21 09:41:17 - mmengine - INFO - Iter(test) [ 950/2000]    eta: 0:25:45  time: 1.2832  data_time: 0.0016  memory: 17133  
09/21 09:42:14 - mmengine - INFO - Iter(test) [1000/2000]    eta: 0:24:16  time: 1.1476  data_time: 0.0017  memory: 17096  
09/21 09:43:18 - mmengine - INFO - Iter(test) [1050/2000]    eta: 0:22:54  time: 1.2979  data_time: 0.0017  memory: 17182  
09/21 09:44:19 - mmengine - INFO - Iter(test) [1100/2000]    eta: 0:21:33  time: 1.1532  data_time: 0.0018  memory: 17175  
09/21 09:45:17 - mmengine - INFO - Iter(test) [1150/2000]    eta: 0:20:11  time: 1.1776  data_time: 0.0017  memory: 17117  
09/21 09:46:24 - mmengine - INFO - Iter(test) [1200/2000]    eta: 0:18:56  time: 1.1451  data_time: 0.0017  memory: 17113  
09/21 09:47:23 - mmengine - INFO - Iter(test) [1250/2000]    eta: 0:17:38  time: 1.2126  data_time: 0.0017  memory: 17172  
09/21 09:48:18 - mmengine - INFO - Iter(test) [1300/2000]    eta: 0:16:19  time: 1.1788  data_time: 0.0017  memory: 1430  
09/21 09:49:26 - mmengine - INFO - Iter(test) [1350/2000]    eta: 0:15:08  time: 2.0389  data_time: 0.0326  memory: 17110  
09/21 09:50:38 - mmengine - INFO - Iter(test) [1400/2000]    eta: 0:13:59  time: 1.4822  data_time: 0.0022  memory: 17154  
09/21 09:51:38 - mmengine - INFO - Iter(test) [1450/2000]    eta: 0:12:46  time: 1.3782  data_time: 0.0018  memory: 17130  
09/21 09:52:42 - mmengine - INFO - Iter(test) [1500/2000]    eta: 0:11:34  time: 1.1587  data_time: 0.0017  memory: 17125  
09/21 09:53:53 - mmengine - INFO - Iter(test) [1550/2000]    eta: 0:10:25  time: 1.2932  data_time: 0.0019  memory: 17154  
09/21 09:54:55 - mmengine - INFO - Iter(test) [1600/2000]    eta: 0:09:14  time: 1.2566  data_time: 0.0027  memory: 1425  
09/21 09:56:00 - mmengine - INFO - Iter(test) [1650/2000]    eta: 0:08:03  time: 1.1608  data_time: 0.0016  memory: 17192  
09/21 09:57:09 - mmengine - INFO - Iter(test) [1700/2000]    eta: 0:06:54  time: 1.2655  data_time: 0.0019  memory: 17151  
09/21 09:58:15 - mmengine - INFO - Iter(test) [1750/2000]    eta: 0:05:45  time: 1.2401  data_time: 0.0017  memory: 17111  
09/21 09:59:16 - mmengine - INFO - Iter(test) [1800/2000]    eta: 0:04:35  time: 1.3032  data_time: 0.0021  memory: 17114  
09/21 10:00:20 - mmengine - INFO - Iter(test) [1850/2000]    eta: 0:03:26  time: 1.2849  data_time: 0.0030  memory: 1317  
09/21 10:01:21 - mmengine - INFO - Iter(test) [1900/2000]    eta: 0:02:16  time: 1.2911  data_time: 0.0018  memory: 17182  
09/21 10:02:31 - mmengine - INFO - Iter(test) [1950/2000]    eta: 0:01:08  time: 1.2016  data_time: 0.0028  memory: 17197  
09/21 10:03:32 - mmengine - INFO - Iter(test) [2000/2000]    eta: 0:00:00  time: 1.1198  data_time: 0.0015  memory: 17131  
09/21 10:03:33 - mmengine - INFO - per class results:
09/21 10:03:33 - mmengine - INFO - 
+---------------------+-------+-------+
|        Class        |  IoU  |  Acc  |
+---------------------+-------+-------+
|         wall        | 54.89 |  82.5 |
|       building      | 67.34 | 84.69 |
|         sky         | 84.62 | 89.65 |
|        floor        | 61.25 | 82.46 |
|         tree        | 40.32 | 44.68 |
|       ceiling       | 57.33 | 89.08 |
|         road        | 65.78 |  75.7 |
|         bed         | 70.24 | 88.79 |
|      windowpane     | 41.45 | 55.74 |
|        grass        | 41.26 | 50.43 |
|       cabinet       | 41.02 | 50.57 |
|       sidewalk      | 39.43 | 58.65 |
|        person       | 57.84 | 70.62 |
|        earth        | 22.12 | 39.09 |
|         door        | 17.22 | 20.36 |
|        table        | 40.19 | 50.74 |
|       mountain      | 27.59 | 32.17 |
|        plant        | 14.91 | 18.02 |
|       curtain       | 40.82 | 49.35 |
|        chair        | 30.48 | 37.25 |
|         car         | 66.91 |  82.3 |
|        water        | 33.15 | 43.72 |
|       painting      | 50.15 | 64.96 |
|         sofa        | 39.18 | 48.28 |
|        shelf        | 25.36 | 53.23 |
|        house        | 22.48 |  23.9 |
|         sea         | 44.31 | 66.57 |
|        mirror       | 44.73 | 50.72 |
|         rug         | 22.84 | 24.78 |
|        field        | 14.36 | 57.58 |
|       armchair      | 26.24 | 36.04 |
|         seat        | 22.74 | 31.36 |
|        fence        | 16.97 | 33.98 |
|         desk        |  33.8 | 46.79 |
|         rock        | 19.02 | 21.17 |
|       wardrobe      | 26.61 | 36.18 |
|         lamp        | 35.48 | 46.74 |
|       bathtub       | 62.02 | 75.07 |
|       railing       | 11.84 | 16.52 |
|       cushion       | 21.92 | 24.44 |
|         base        | 17.33 | 37.99 |
|         box         |  6.54 | 10.91 |
|        column       | 22.81 |  29.9 |
|      signboard      | 18.64 | 24.77 |
|   chest of drawers  | 23.96 | 39.17 |
|       counter       | 13.35 | 23.12 |
|         sand        | 10.89 |  21.4 |
|         sink        | 52.36 | 65.59 |
|      skyscraper     | 21.59 | 25.72 |
|      fireplace      |  48.2 | 55.25 |
|     refrigerator    |  42.8 |  47.6 |
|      grandstand     | 26.02 | 70.91 |
|         path        |  8.95 | 10.96 |
|        stairs       |  8.19 |  9.53 |
|        runway       | 70.92 | 86.94 |
|         case        | 30.89 | 36.21 |
|      pool table     | 81.73 | 95.08 |
|        pillow       | 39.39 | 52.72 |
|     screen door     | 18.84 | 22.66 |
|       stairway      |  20.6 | 24.17 |
|        river        |  0.0  |  0.0  |
|        bridge       | 18.35 | 23.58 |
|       bookcase      | 28.32 | 39.82 |
|        blind        | 16.65 | 19.23 |
|     coffee table    | 48.36 |  53.9 |
|        toilet       | 69.56 | 77.96 |
|        flower       | 16.74 | 21.46 |
|         book        | 28.48 | 36.89 |
|         hill        |  5.23 | 14.51 |
|        bench        | 14.31 | 31.01 |
|      countertop     | 44.33 | 54.95 |
|        stove        | 57.26 | 70.87 |
|         palm        | 25.75 | 33.16 |
|    kitchen island   | 32.13 | 59.38 |
|       computer      |  40.3 | 45.59 |
|     swivel chair    | 10.68 | 11.13 |
|         boat        | 32.15 | 35.89 |
|         bar         |  4.41 |  5.19 |
|    arcade machine   |  0.0  |  0.0  |
|        hovel        | 14.67 | 19.66 |
|         bus         | 66.63 | 79.78 |
|        towel        | 25.76 | 30.46 |
|        light        |  24.5 | 47.23 |
|        truck        | 19.81 |  27.2 |
|        tower        | 34.68 | 77.01 |
|      chandelier     | 17.25 | 18.08 |
|        awning       |  9.73 | 11.88 |
|     streetlight     |  6.34 |  7.75 |
|        booth        | 34.05 | 35.11 |
| television receiver | 44.77 |  51.4 |
|       airplane      | 35.86 | 57.28 |
|      dirt track     |  1.88 | 18.04 |
|       apparel       |  7.3  |  9.39 |
|         pole        |  5.79 |  7.14 |
|         land        |  2.35 |  2.93 |
|      bannister      |  2.61 |  3.36 |
|      escalator      |  15.2 |  15.7 |
|       ottoman       | 33.84 |  39.8 |
|        bottle       |  3.33 |  3.5  |
|        buffet       | 25.98 | 28.68 |
|        poster       |  4.5  |  6.68 |
|        stage        |  7.21 |  9.53 |
|         van         |  18.6 | 29.18 |
|         ship        |  5.73 |  7.09 |
|       fountain      | 18.14 | 19.42 |
|    conveyer belt    | 21.09 |  60.6 |
|        canopy       |  4.31 |  4.41 |
|        washer       | 73.14 | 76.91 |
|      plaything      |  7.03 |  11.9 |
|    swimming pool    | 30.12 |  80.4 |
|        stool        | 20.91 | 31.12 |
|        barrel       |  0.0  |  0.0  |
|        basket       |  13.7 | 18.17 |
|      waterfall      |  37.5 | 63.74 |
|         tent        | 80.33 | 99.48 |
|         bag         |  2.88 |  5.44 |
|       minibike      | 43.36 | 62.96 |
|        cradle       | 60.71 | 80.46 |
|         oven        |  7.31 |  9.35 |
|         ball        |  3.79 |  9.44 |
|         food        | 16.21 | 17.48 |
|         step        |  3.63 |  7.23 |
|         tank        | 30.18 |  34.2 |
|      trade name     | 13.07 | 14.28 |
|      microwave      | 24.05 | 27.29 |
|         pot         |  10.2 |  10.9 |
|        animal       | 49.19 | 53.78 |
|       bicycle       |  7.36 |  31.5 |
|         lake        |  0.0  |  0.0  |
|      dishwasher     | 27.59 | 30.15 |
|        screen       | 57.36 | 80.54 |
|       blanket       |  0.06 |  0.07 |
|      sculpture      | 24.36 | 29.19 |
|         hood        | 31.57 | 46.96 |
|        sconce       | 17.95 | 24.49 |
|         vase        | 17.59 | 21.41 |
|    traffic light    | 10.51 | 14.28 |
|         tray        |  5.29 |  5.78 |
|        ashcan       | 21.06 | 26.45 |
|         fan         | 29.86 | 46.13 |
|         pier        | 33.58 | 40.89 |
|      crt screen     |  0.12 |  0.15 |
|        plate        | 20.81 | 27.02 |
|       monitor       | 39.61 | 54.77 |
|    bulletin board   | 14.95 | 15.08 |
|        shower       |  4.63 |  8.67 |
|       radiator      | 34.28 | 40.19 |
|        glass        |  2.19 |  2.46 |
|        clock        |  9.46 | 10.21 |
|         flag        | 17.46 | 21.37 |
+---------------------+-------+-------+
09/21 10:03:33 - mmengine - INFO - Iter(test) [2000/2000]    aAcc: 66.6600  mIoU: 27.3300  mAcc: 36.6700  data_time: 0.0052  time: 1.3668
Finished processing corruption type: zoom_blur
Processing corruption type: snow
09/21 10:05:48 - mmengine - INFO - 
------------------------------------------------------------
System environment:
    sys.platform: linux
    Python: 3.10.13 | packaged by conda-forge | (main, Dec 23 2023, 15:36:39) [GCC 12.3.0]
    CUDA available: True
    MUSA available: False
    numpy_random_seed: 340308974
    GPU 0: Tesla V100-SXM2-32GB
    CUDA_HOME: /opt/bwhpc/common/devel/cuda/11.7
    NVCC: Cuda compilation tools, release 11.7, V11.7.99
    GCC: gcc (GCC) 8.5.0 20210514 (Red Hat 8.5.0-18)
    PyTorch: 1.13.1
    PyTorch compiling details: PyTorch built with:
  - GCC 9.3
  - C++ Version: 201402
  - Intel(R) oneAPI Math Kernel Library Version 2023.1-Product Build 20230303 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v2.6.0 (Git Hash 52b5f107dd9cf10910aaa19cb47f3abf9b349815)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - LAPACK is enabled (usually provided by MKL)
  - NNPACK is enabled
  - CPU capability usage: AVX2
  - CUDA Runtime 11.7
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_61,code=sm_61;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86;-gencode;arch=compute_37,code=compute_37
  - CuDNN 8.5
  - Magma 2.6.1
  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.7, CUDNN_VERSION=8.5.0, CXX_COMPILER=/opt/rh/devtoolset-9/root/usr/bin/c++, CXX_FLAGS= -fabi-version=11 -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -DEDGE_PROFILER_USE_KINETO -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Werror=non-virtual-dtor -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wunused-local-typedefs -Wno-unused-parameter -Wno-unused-function -Wno-unused-result -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Werror=cast-function-type -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.13.1, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, USE_ROCM=OFF, 

    TorchVision: 0.14.1
    OpenCV: 3.4.18
    MMEngine: 0.10.4

Runtime environment:
    cudnn_benchmark: True
    mp_cfg: {'mp_start_method': 'fork', 'opencv_num_threads': 0}
    dist_cfg: {'backend': 'nccl'}
    seed: 340308974
    Distributed launcher: none
    Distributed training: False
    GPU number: 1
------------------------------------------------------------

09/21 10:05:48 - mmengine - INFO - Config:
auto_scale_lr = dict(base_batch_size=16, enable=False)
backbone_embed_multi = dict(decay_mult=0.0, lr_mult=0.1)
backbone_norm_multi = dict(decay_mult=0.0, lr_mult=0.1)
crop_size = (
    640,
    640,
)
custom_keys = dict({
    'absolute_pos_embed':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone':
    dict(decay_mult=1.0, lr_mult=0.1),
    'backbone.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.patch_embed.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.0.blocks.0.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.0.blocks.1.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.0.downsample.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.1.blocks.0.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.1.blocks.1.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.1.downsample.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.0.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.1.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.10.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.11.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.12.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.13.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.14.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.15.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.16.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.17.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.2.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.3.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.4.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.5.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.6.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.7.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.8.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.9.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.downsample.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.3.blocks.0.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.3.blocks.1.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'level_embed':
    dict(decay_mult=0.0, lr_mult=1.0),
    'query_embed':
    dict(decay_mult=0.0, lr_mult=1.0),
    'query_feat':
    dict(decay_mult=0.0, lr_mult=1.0),
    'relative_position_bias_table':
    dict(decay_mult=0.0, lr_mult=0.1)
})
data_root = 'data/ade/ADEChallengeData2016'
dataset_type = 'ADE20KDataset'
default_hooks = dict(
    checkpoint=dict(
        by_epoch=False, interval=5000, save_best='mIoU',
        type='CheckpointHook'),
    logger=dict(interval=50, log_metric_by_epoch=False, type='LoggerHook'),
    param_scheduler=dict(type='ParamSchedulerHook'),
    sampler_seed=dict(type='DistSamplerSeedHook'),
    timer=dict(type='IterTimerHook'),
    visualization=dict(type='SegVisualizationHook'))
default_scope = 'mmseg'
depths = [
    2,
    2,
    18,
    2,
]
embed_multi = dict(decay_mult=0.0, lr_mult=1.0)
env_cfg = dict(
    cudnn_benchmark=True,
    dist_cfg=dict(backend='nccl'),
    mp_cfg=dict(mp_start_method='fork', opencv_num_threads=0))
img_ratios = [
    0.5,
    0.75,
    1.0,
    1.25,
    1.5,
    1.75,
]
launcher = 'none'
load_from = '../checkpoint_files/ade20k/mask2former/mask2former_swin-b-in1k-384x384-pre_8xb2-160k_ade20k-640x640_20221129_125118-a4a086d2.pth'
log_level = 'INFO'
log_processor = dict(by_epoch=False)
model = dict(
    backbone=dict(
        attn_drop_rate=0.0,
        depths=[
            2,
            2,
            18,
            2,
        ],
        drop_path_rate=0.3,
        drop_rate=0.0,
        embed_dims=128,
        frozen_stages=-1,
        init_cfg=dict(
            checkpoint=
            'https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/swin/swin_base_patch4_window12_384_20220317-55b0104a.pth',
            type='Pretrained'),
        mlp_ratio=4,
        num_heads=[
            4,
            8,
            16,
            32,
        ],
        out_indices=(
            0,
            1,
            2,
            3,
        ),
        patch_norm=True,
        pretrain_img_size=384,
        qk_scale=None,
        qkv_bias=True,
        type='SwinTransformer',
        window_size=12,
        with_cp=False),
    data_preprocessor=dict(
        bgr_to_rgb=True,
        corruption='snow',
        mean=[
            123.675,
            116.28,
            103.53,
        ],
        pad_val=0,
        seg_pad_val=255,
        size=(
            640,
            640,
        ),
        std=[
            58.395,
            57.12,
            57.375,
        ],
        type='SegDataPreProcessor'),
    decode_head=dict(
        align_corners=False,
        enforce_decoder_input_project=False,
        feat_channels=256,
        in_channels=[
            128,
            256,
            512,
            1024,
        ],
        loss_cls=dict(
            class_weight=[
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                0.1,
            ],
            loss_weight=2.0,
            reduction='mean',
            type='mmdet.CrossEntropyLoss',
            use_sigmoid=False),
        loss_dice=dict(
            activate=True,
            eps=1.0,
            loss_weight=5.0,
            naive_dice=True,
            reduction='mean',
            type='mmdet.DiceLoss',
            use_sigmoid=True),
        loss_mask=dict(
            loss_weight=5.0,
            reduction='mean',
            type='mmdet.CrossEntropyLoss',
            use_sigmoid=True),
        num_classes=150,
        num_queries=100,
        num_transformer_feat_level=3,
        out_channels=256,
        pixel_decoder=dict(
            act_cfg=dict(type='ReLU'),
            encoder=dict(
                init_cfg=None,
                layer_cfg=dict(
                    ffn_cfg=dict(
                        act_cfg=dict(inplace=True, type='ReLU'),
                        embed_dims=256,
                        feedforward_channels=1024,
                        ffn_drop=0.0,
                        num_fcs=2),
                    self_attn_cfg=dict(
                        batch_first=True,
                        dropout=0.0,
                        embed_dims=256,
                        im2col_step=64,
                        init_cfg=None,
                        norm_cfg=None,
                        num_heads=8,
                        num_levels=3,
                        num_points=4)),
                num_layers=6),
            init_cfg=None,
            norm_cfg=dict(num_groups=32, type='GN'),
            num_outs=3,
            positional_encoding=dict(normalize=True, num_feats=128),
            type='mmdet.MSDeformAttnPixelDecoder'),
        positional_encoding=dict(normalize=True, num_feats=128),
        strides=[
            4,
            8,
            16,
            32,
        ],
        train_cfg=dict(
            assigner=dict(
                match_costs=[
                    dict(type='mmdet.ClassificationCost', weight=2.0),
                    dict(
                        type='mmdet.CrossEntropyLossCost',
                        use_sigmoid=True,
                        weight=5.0),
                    dict(
                        eps=1.0,
                        pred_act=True,
                        type='mmdet.DiceCost',
                        weight=5.0),
                ],
                type='mmdet.HungarianAssigner'),
            importance_sample_ratio=0.75,
            num_points=12544,
            oversample_ratio=3.0,
            sampler=dict(type='mmdet.MaskPseudoSampler')),
        transformer_decoder=dict(
            init_cfg=None,
            layer_cfg=dict(
                cross_attn_cfg=dict(
                    attn_drop=0.0,
                    batch_first=True,
                    dropout_layer=None,
                    embed_dims=256,
                    num_heads=8,
                    proj_drop=0.0),
                ffn_cfg=dict(
                    act_cfg=dict(inplace=True, type='ReLU'),
                    add_identity=True,
                    dropout_layer=None,
                    embed_dims=256,
                    feedforward_channels=2048,
                    ffn_drop=0.0,
                    num_fcs=2),
                self_attn_cfg=dict(
                    attn_drop=0.0,
                    batch_first=True,
                    dropout_layer=None,
                    embed_dims=256,
                    num_heads=8,
                    proj_drop=0.0)),
            num_layers=9,
            return_intermediate=True),
        type='Mask2FormerHead'),
    test_cfg=dict(mode='whole'),
    train_cfg=dict(),
    type='EncoderDecoder')
num_classes = 150
optim_wrapper = dict(
    clip_grad=dict(max_norm=0.01, norm_type=2),
    optimizer=dict(
        betas=(
            0.9,
            0.999,
        ),
        eps=1e-08,
        lr=0.0001,
        type='AdamW',
        weight_decay=0.05),
    paramwise_cfg=dict(
        custom_keys=dict({
            'absolute_pos_embed':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone':
            dict(decay_mult=1.0, lr_mult=0.1),
            'backbone.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.patch_embed.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.0.blocks.0.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.0.blocks.1.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.0.downsample.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.1.blocks.0.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.1.blocks.1.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.1.downsample.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.0.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.1.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.10.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.11.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.12.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.13.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.14.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.15.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.16.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.17.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.2.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.3.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.4.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.5.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.6.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.7.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.8.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.9.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.downsample.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.3.blocks.0.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.3.blocks.1.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'level_embed':
            dict(decay_mult=0.0, lr_mult=1.0),
            'query_embed':
            dict(decay_mult=0.0, lr_mult=1.0),
            'query_feat':
            dict(decay_mult=0.0, lr_mult=1.0),
            'relative_position_bias_table':
            dict(decay_mult=0.0, lr_mult=0.1)
        }),
        norm_decay_mult=0.0),
    type='OptimWrapper')
optimizer = dict(
    betas=(
        0.9,
        0.999,
    ),
    eps=1e-08,
    lr=0.0001,
    type='AdamW',
    weight_decay=0.05)
param_scheduler = [
    dict(
        begin=0,
        by_epoch=False,
        end=160000,
        eta_min=0,
        power=0.9,
        type='PolyLR'),
]
pretrained = 'https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/swin/swin_base_patch4_window12_384_20220317-55b0104a.pth'
resume = False
test_cfg = dict(type='TestLoop')
test_dataloader = dict(
    batch_size=1,
    dataset=dict(
        data_prefix=dict(
            img_path='images/validation',
            seg_map_path='annotations/validation'),
        data_root='data/ade/ADEChallengeData2016',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(keep_ratio=True, scale=(
                2560,
                640,
            ), type='Resize'),
            dict(reduce_zero_label=True, type='LoadAnnotations'),
            dict(type='PackSegInputs'),
        ],
        type='ADE20KDataset'),
    num_workers=4,
    persistent_workers=True,
    sampler=dict(shuffle=False, type='DefaultSampler'))
test_evaluator = dict(
    iou_metrics=[
        'mIoU',
    ], type='IoUMetric')
test_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(keep_ratio=True, scale=(
        2560,
        640,
    ), type='Resize'),
    dict(reduce_zero_label=True, type='LoadAnnotations'),
    dict(type='PackSegInputs'),
]
train_cfg = dict(
    max_iters=160000, type='IterBasedTrainLoop', val_interval=5000)
train_dataloader = dict(
    batch_size=2,
    dataset=dict(
        data_prefix=dict(
            img_path='images/training', seg_map_path='annotations/training'),
        data_root='data/ade/ADEChallengeData2016',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(reduce_zero_label=True, type='LoadAnnotations'),
            dict(
                max_size=2560,
                resize_type='ResizeShortestEdge',
                scales=[
                    320,
                    384,
                    448,
                    512,
                    576,
                    640,
                    704,
                    768,
                    832,
                    896,
                    960,
                    1024,
                    1088,
                    1152,
                    1216,
                    1280,
                ],
                type='RandomChoiceResize'),
            dict(
                cat_max_ratio=0.75, crop_size=(
                    640,
                    640,
                ), type='RandomCrop'),
            dict(prob=0.5, type='RandomFlip'),
            dict(type='PhotoMetricDistortion'),
            dict(type='PackSegInputs'),
        ],
        type='ADE20KDataset'),
    num_workers=4,
    persistent_workers=True,
    sampler=dict(shuffle=True, type='InfiniteSampler'))
train_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(reduce_zero_label=True, type='LoadAnnotations'),
    dict(
        max_size=2560,
        resize_type='ResizeShortestEdge',
        scales=[
            320,
            384,
            448,
            512,
            576,
            640,
            704,
            768,
            832,
            896,
            960,
            1024,
            1088,
            1152,
            1216,
            1280,
        ],
        type='RandomChoiceResize'),
    dict(cat_max_ratio=0.75, crop_size=(
        640,
        640,
    ), type='RandomCrop'),
    dict(prob=0.5, type='RandomFlip'),
    dict(type='PhotoMetricDistortion'),
    dict(type='PackSegInputs'),
]
tta_model = dict(type='SegTTAModel')
tta_pipeline = [
    dict(backend_args=None, type='LoadImageFromFile'),
    dict(
        transforms=[
            [
                dict(keep_ratio=True, scale_factor=0.5, type='Resize'),
                dict(keep_ratio=True, scale_factor=0.75, type='Resize'),
                dict(keep_ratio=True, scale_factor=1.0, type='Resize'),
                dict(keep_ratio=True, scale_factor=1.25, type='Resize'),
                dict(keep_ratio=True, scale_factor=1.5, type='Resize'),
                dict(keep_ratio=True, scale_factor=1.75, type='Resize'),
            ],
            [
                dict(direction='horizontal', prob=0.0, type='RandomFlip'),
                dict(direction='horizontal', prob=1.0, type='RandomFlip'),
            ],
            [
                dict(type='LoadAnnotations'),
            ],
            [
                dict(type='PackSegInputs'),
            ],
        ],
        type='TestTimeAug'),
]
val_cfg = dict(type='ValLoop')
val_dataloader = dict(
    batch_size=1,
    dataset=dict(
        data_prefix=dict(
            img_path='images/validation',
            seg_map_path='annotations/validation'),
        data_root='data/ade/ADEChallengeData2016',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(keep_ratio=True, scale=(
                2560,
                640,
            ), type='Resize'),
            dict(reduce_zero_label=True, type='LoadAnnotations'),
            dict(type='PackSegInputs'),
        ],
        type='ADE20KDataset'),
    num_workers=4,
    persistent_workers=True,
    sampler=dict(shuffle=False, type='DefaultSampler'))
val_evaluator = dict(
    iou_metrics=[
        'mIoU',
    ], type='IoUMetric')
vis_backends = [
    dict(type='LocalVisBackend'),
]
visualizer = dict(
    name='visualizer',
    type='SegLocalVisualizer',
    vis_backends=[
        dict(type='LocalVisBackend'),
    ])
work_dir = '../corruptions/work_dirs/ade20k/mask2former/mask2former_swin-b-in1k-384x384-pre_8xb2-160k_ade20k-640x640/snow'

09/21 10:07:04 - mmengine - INFO - Distributed training is not used, all SyncBatchNorm (SyncBN) layers in the model will be automatically reverted to BatchNormXd layers if they are used.
09/21 10:07:05 - mmengine - INFO - Hooks will be executed in the following order:
before_run:
(VERY_HIGH   ) RuntimeInfoHook                    
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
before_train:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_train_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(NORMAL      ) DistSamplerSeedHook                
 -------------------- 
before_train_iter:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_train_iter:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(NORMAL      ) SegVisualizationHook               
(BELOW_NORMAL) LoggerHook                         
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
after_train_epoch:
(NORMAL      ) IterTimerHook                      
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_val:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
before_val_epoch:
(NORMAL      ) IterTimerHook                      
 -------------------- 
before_val_iter:
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_val_iter:
(NORMAL      ) IterTimerHook                      
(NORMAL      ) SegVisualizationHook               
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_val_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
after_val:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
after_train:
(VERY_HIGH   ) RuntimeInfoHook                    
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_test:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
before_test_epoch:
(NORMAL      ) IterTimerHook                      
 -------------------- 
before_test_iter:
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_test_iter:
(NORMAL      ) IterTimerHook                      
(NORMAL      ) SegVisualizationHook               
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_test_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_test:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
after_run:
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
09/21 10:07:07 - mmengine - WARNING - The prefix is not set in metric class IoUMetric.
Loads checkpoint by local backend from path: ../checkpoint_files/ade20k/mask2former/mask2former_swin-b-in1k-384x384-pre_8xb2-160k_ade20k-640x640_20221129_125118-a4a086d2.pth
09/21 10:07:11 - mmengine - INFO - Load checkpoint from ../checkpoint_files/ade20k/mask2former/mask2former_swin-b-in1k-384x384-pre_8xb2-160k_ade20k-640x640_20221129_125118-a4a086d2.pth
09/21 10:09:38 - mmengine - INFO - Iter(test) [  50/2000]    eta: 1:35:53  time: 0.7860  data_time: 0.0019  memory: 17181  
09/21 10:10:17 - mmengine - INFO - Iter(test) [ 100/2000]    eta: 0:59:05  time: 0.7873  data_time: 0.0020  memory: 17180  
09/21 10:10:52 - mmengine - INFO - Iter(test) [ 150/2000]    eta: 0:45:30  time: 0.6632  data_time: 0.0018  memory: 17150  
09/21 10:11:26 - mmengine - INFO - Iter(test) [ 200/2000]    eta: 0:38:20  time: 0.7234  data_time: 0.0018  memory: 17194  
09/21 10:12:03 - mmengine - INFO - Iter(test) [ 250/2000]    eta: 0:34:07  time: 0.6427  data_time: 0.0035  memory: 17202  
09/21 10:12:35 - mmengine - INFO - Iter(test) [ 300/2000]    eta: 0:30:40  time: 0.5353  data_time: 0.0019  memory: 17180  
09/21 10:13:10 - mmengine - INFO - Iter(test) [ 350/2000]    eta: 0:28:12  time: 0.6441  data_time: 0.0018  memory: 17178  
09/21 10:13:39 - mmengine - INFO - Iter(test) [ 400/2000]    eta: 0:25:53  time: 0.5508  data_time: 0.0017  memory: 17177  
09/21 10:14:06 - mmengine - INFO - Iter(test) [ 450/2000]    eta: 0:23:49  time: 0.5416  data_time: 0.0017  memory: 17147  
09/21 10:14:35 - mmengine - INFO - Iter(test) [ 500/2000]    eta: 0:22:12  time: 0.5853  data_time: 0.0017  memory: 17149  
09/21 10:15:10 - mmengine - INFO - Iter(test) [ 550/2000]    eta: 0:21:04  time: 1.2300  data_time: 0.0018  memory: 17179  
09/21 10:15:37 - mmengine - INFO - Iter(test) [ 600/2000]    eta: 0:19:41  time: 0.5404  data_time: 0.0018  memory: 3938  
09/21 10:16:07 - mmengine - INFO - Iter(test) [ 650/2000]    eta: 0:18:34  time: 0.6266  data_time: 0.0017  memory: 17181  
09/21 10:16:40 - mmengine - INFO - Iter(test) [ 700/2000]    eta: 0:17:36  time: 0.5951  data_time: 0.0019  memory: 17177  
09/21 10:17:12 - mmengine - INFO - Iter(test) [ 750/2000]    eta: 0:16:42  time: 0.8677  data_time: 0.0017  memory: 17184  
09/21 10:17:38 - mmengine - INFO - Iter(test) [ 800/2000]    eta: 0:15:41  time: 0.5239  data_time: 0.0018  memory: 17151  
09/21 10:18:05 - mmengine - INFO - Iter(test) [ 850/2000]    eta: 0:14:45  time: 0.5362  data_time: 0.0019  memory: 1428  
09/21 10:18:32 - mmengine - INFO - Iter(test) [ 900/2000]    eta: 0:13:52  time: 0.5324  data_time: 0.0016  memory: 17138  
09/21 10:19:09 - mmengine - INFO - Iter(test) [ 950/2000]    eta: 0:13:14  time: 0.7051  data_time: 0.0017  memory: 17133  
09/21 10:19:34 - mmengine - INFO - Iter(test) [1000/2000]    eta: 0:12:23  time: 0.4551  data_time: 0.0015  memory: 17096  
09/21 10:20:01 - mmengine - INFO - Iter(test) [1050/2000]    eta: 0:11:36  time: 0.6227  data_time: 0.0018  memory: 17182  
09/21 10:20:30 - mmengine - INFO - Iter(test) [1100/2000]    eta: 0:10:54  time: 0.5693  data_time: 0.0018  memory: 17175  
09/21 10:20:58 - mmengine - INFO - Iter(test) [1150/2000]    eta: 0:10:11  time: 0.5266  data_time: 0.0018  memory: 17117  
09/21 10:21:26 - mmengine - INFO - Iter(test) [1200/2000]    eta: 0:09:30  time: 0.5132  data_time: 0.0018  memory: 17113  
09/21 10:21:54 - mmengine - INFO - Iter(test) [1250/2000]    eta: 0:08:50  time: 0.5936  data_time: 0.0022  memory: 17172  
09/21 10:22:19 - mmengine - INFO - Iter(test) [1300/2000]    eta: 0:08:09  time: 0.5200  data_time: 0.0018  memory: 1430  
09/21 10:22:47 - mmengine - INFO - Iter(test) [1350/2000]    eta: 0:07:30  time: 0.4883  data_time: 0.0017  memory: 17110  
09/21 10:23:17 - mmengine - INFO - Iter(test) [1400/2000]    eta: 0:06:54  time: 0.5866  data_time: 0.0017  memory: 17154  
09/21 10:23:43 - mmengine - INFO - Iter(test) [1450/2000]    eta: 0:06:16  time: 0.6112  data_time: 0.0018  memory: 17130  
09/21 10:24:13 - mmengine - INFO - Iter(test) [1500/2000]    eta: 0:05:40  time: 0.5009  data_time: 0.0017  memory: 17125  
09/21 10:24:42 - mmengine - INFO - Iter(test) [1550/2000]    eta: 0:05:04  time: 0.5709  data_time: 0.0023  memory: 17154  
09/21 10:25:07 - mmengine - INFO - Iter(test) [1600/2000]    eta: 0:04:28  time: 0.5147  data_time: 0.0018  memory: 1425  
09/21 10:25:35 - mmengine - INFO - Iter(test) [1650/2000]    eta: 0:03:54  time: 0.5194  data_time: 0.0019  memory: 17192  
09/21 10:26:06 - mmengine - INFO - Iter(test) [1700/2000]    eta: 0:03:20  time: 0.5291  data_time: 0.0019  memory: 17151  
09/21 10:26:34 - mmengine - INFO - Iter(test) [1750/2000]    eta: 0:02:46  time: 0.5160  data_time: 0.0016  memory: 17111  
09/21 10:27:01 - mmengine - INFO - Iter(test) [1800/2000]    eta: 0:02:12  time: 0.5365  data_time: 0.0036  memory: 17114  
09/21 10:27:28 - mmengine - INFO - Iter(test) [1850/2000]    eta: 0:01:38  time: 0.5341  data_time: 0.0019  memory: 1317  
09/21 10:27:54 - mmengine - INFO - Iter(test) [1900/2000]    eta: 0:01:05  time: 0.5783  data_time: 0.0018  memory: 17182  
09/21 10:28:22 - mmengine - INFO - Iter(test) [1950/2000]    eta: 0:00:32  time: 0.5219  data_time: 0.0037  memory: 17197  
09/21 10:28:49 - mmengine - INFO - Iter(test) [2000/2000]    eta: 0:00:00  time: 0.4777  data_time: 0.0016  memory: 17131  
09/21 10:28:50 - mmengine - INFO - per class results:
09/21 10:28:50 - mmengine - INFO - 
+---------------------+-------+-------+
|        Class        |  IoU  |  Acc  |
+---------------------+-------+-------+
|         wall        | 70.28 | 85.48 |
|       building      | 78.44 | 93.65 |
|         sky         |  83.6 | 86.52 |
|        floor        | 75.96 | 86.98 |
|         tree        | 70.47 | 82.62 |
|       ceiling       | 77.37 | 84.67 |
|         road        | 72.75 | 78.76 |
|         bed         | 84.74 | 91.54 |
|      windowpane     | 53.69 | 71.54 |
|        grass        | 61.67 | 81.56 |
|       cabinet       | 49.49 | 65.27 |
|       sidewalk      | 57.16 | 71.76 |
|        person       | 78.77 | 88.63 |
|        earth        | 32.41 | 40.39 |
|         door        | 22.62 | 27.21 |
|        table        |  53.4 | 64.89 |
|       mountain      | 48.32 | 59.91 |
|        plant        | 46.86 | 59.09 |
|       curtain       | 61.18 | 73.17 |
|        chair        | 50.01 | 60.12 |
|         car         | 80.43 | 89.09 |
|        water        |  33.0 | 76.36 |
|       painting      | 66.52 | 77.07 |
|         sofa        | 60.49 | 85.81 |
|        shelf        | 33.14 | 63.02 |
|        house        | 34.91 | 42.93 |
|         sea         | 36.08 | 77.39 |
|        mirror       |  52.3 | 76.15 |
|         rug         | 57.04 | 66.28 |
|        field        |  17.9 | 37.89 |
|       armchair      | 26.75 | 34.64 |
|         seat        | 38.93 |  71.5 |
|        fence        | 18.19 | 59.04 |
|         desk        |  39.6 |  55.2 |
|         rock        | 39.28 | 61.54 |
|       wardrobe      | 37.44 |  54.3 |
|         lamp        |  60.2 | 67.35 |
|       bathtub       |  56.4 | 66.31 |
|       railing       | 30.55 | 43.51 |
|       cushion       | 42.57 | 46.41 |
|         base        | 23.29 | 52.26 |
|         box         | 18.22 | 28.74 |
|        column       |  36.5 | 47.25 |
|      signboard      |  34.6 | 49.88 |
|   chest of drawers  | 37.65 | 56.74 |
|       counter       | 25.32 | 30.32 |
|         sand        | 29.84 | 43.03 |
|         sink        | 62.75 | 74.61 |
|      skyscraper     | 28.17 | 33.99 |
|      fireplace      | 54.45 | 66.58 |
|     refrigerator    | 71.68 | 74.96 |
|      grandstand     | 31.33 | 84.47 |
|         path        | 13.29 | 17.18 |
|        stairs       | 21.33 | 38.21 |
|        runway       | 40.74 | 41.02 |
|         case        | 37.59 | 47.73 |
|      pool table     | 89.04 | 94.58 |
|        pillow       | 47.01 | 62.56 |
|     screen door     | 46.07 | 67.08 |
|       stairway      | 24.12 | 40.14 |
|        river        |  1.55 |  1.64 |
|        bridge       | 63.43 | 69.86 |
|       bookcase      |  27.5 | 34.73 |
|        blind        | 29.35 | 32.42 |
|     coffee table    | 66.34 | 77.53 |
|        toilet       |  70.2 | 75.88 |
|        flower       | 36.92 | 46.51 |
|         book        | 42.24 | 51.38 |
|         hill        |  4.46 | 11.08 |
|        bench        | 20.05 | 26.86 |
|      countertop     |  48.9 | 66.18 |
|        stove        | 71.22 |  84.1 |
|         palm        | 43.32 | 53.52 |
|    kitchen island   | 36.24 | 67.39 |
|       computer      | 55.17 | 60.65 |
|     swivel chair    | 42.37 | 53.91 |
|         boat        | 66.29 | 87.36 |
|         bar         | 44.07 | 67.96 |
|    arcade machine   | 25.07 | 47.08 |
|        hovel        | 13.67 | 19.57 |
|         bus         | 74.73 | 95.36 |
|        towel        | 48.46 | 54.39 |
|        light        | 50.22 | 66.75 |
|        truck        | 30.12 | 48.42 |
|        tower        |  8.74 | 17.52 |
|      chandelier     | 60.98 | 68.96 |
|        awning       |  19.1 | 20.77 |
|     streetlight     | 28.44 | 37.78 |
|        booth        | 30.35 |  34.8 |
| television receiver | 51.87 | 58.81 |
|       airplane      | 43.24 | 64.74 |
|      dirt track     |  1.52 |  3.62 |
|       apparel       | 21.94 | 33.07 |
|         pole        | 22.97 | 38.02 |
|         land        |  2.68 |  3.24 |
|      bannister      |  17.2 | 23.81 |
|      escalator      |  0.26 |  0.27 |
|       ottoman       | 37.06 | 44.75 |
|        bottle       |  33.4 | 50.39 |
|        buffet       | 47.85 | 58.47 |
|        poster       | 27.93 | 37.31 |
|        stage        |  2.12 |  5.37 |
|         van         | 46.07 | 58.99 |
|         ship        |  5.74 |  6.46 |
|       fountain      | 26.78 | 35.69 |
|    conveyer belt    | 45.16 | 59.67 |
|        canopy       | 18.54 | 21.69 |
|        washer       | 65.07 | 72.66 |
|      plaything      | 20.84 | 33.68 |
|    swimming pool    | 22.19 | 44.96 |
|        stool        | 35.17 | 56.68 |
|        barrel       | 33.48 | 52.24 |
|        basket       | 26.93 | 38.98 |
|      waterfall      | 33.28 | 46.68 |
|         tent        | 85.99 | 97.39 |
|         bag         | 13.62 | 21.83 |
|       minibike      | 62.46 | 85.65 |
|        cradle       | 81.21 | 93.48 |
|         oven        |  22.4 | 57.63 |
|         ball        | 41.19 | 60.14 |
|         food        |  55.9 | 63.39 |
|         step        | 10.93 | 14.51 |
|         tank        | 21.48 |  39.0 |
|      trade name     | 19.96 | 25.47 |
|      microwave      | 35.74 | 38.62 |
|         pot         | 42.56 | 49.03 |
|        animal       | 56.07 | 62.72 |
|       bicycle       | 52.36 | 79.61 |
|         lake        |  0.0  |  0.0  |
|      dishwasher     | 42.37 | 43.35 |
|        screen       | 74.62 | 83.73 |
|       blanket       | 10.56 | 11.55 |
|      sculpture      | 46.07 | 68.53 |
|         hood        | 54.11 | 57.78 |
|        sconce       | 43.84 | 60.59 |
|         vase        | 39.56 | 57.54 |
|    traffic light    |  33.0 | 50.36 |
|         tray        | 10.99 | 14.64 |
|        ashcan       | 34.17 | 46.22 |
|         fan         | 57.06 | 73.62 |
|         pier        | 14.28 | 17.43 |
|      crt screen     | 11.51 | 26.91 |
|        plate        |  55.8 | 70.73 |
|       monitor       | 24.23 | 28.98 |
|    bulletin board   | 32.42 |  43.7 |
|        shower       |  4.85 | 22.03 |
|       radiator      | 33.95 | 35.18 |
|        glass        | 12.94 | 15.08 |
|        clock        | 29.35 | 40.52 |
|         flag        | 31.71 | 34.75 |
+---------------------+-------+-------+
09/21 10:28:50 - mmengine - INFO - Iter(test) [2000/2000]    aAcc: 76.8800  mIoU: 40.0800  mAcc: 52.5300  data_time: 0.0034  time: 0.6487
Finished processing corruption type: snow
Processing corruption type: frost
09/21 10:31:01 - mmengine - INFO - 
------------------------------------------------------------
System environment:
    sys.platform: linux
    Python: 3.10.13 | packaged by conda-forge | (main, Dec 23 2023, 15:36:39) [GCC 12.3.0]
    CUDA available: True
    MUSA available: False
    numpy_random_seed: 520942776
    GPU 0: Tesla V100-SXM2-32GB
    CUDA_HOME: /opt/bwhpc/common/devel/cuda/11.7
    NVCC: Cuda compilation tools, release 11.7, V11.7.99
    GCC: gcc (GCC) 8.5.0 20210514 (Red Hat 8.5.0-18)
    PyTorch: 1.13.1
    PyTorch compiling details: PyTorch built with:
  - GCC 9.3
  - C++ Version: 201402
  - Intel(R) oneAPI Math Kernel Library Version 2023.1-Product Build 20230303 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v2.6.0 (Git Hash 52b5f107dd9cf10910aaa19cb47f3abf9b349815)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - LAPACK is enabled (usually provided by MKL)
  - NNPACK is enabled
  - CPU capability usage: AVX2
  - CUDA Runtime 11.7
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_61,code=sm_61;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86;-gencode;arch=compute_37,code=compute_37
  - CuDNN 8.5
  - Magma 2.6.1
  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.7, CUDNN_VERSION=8.5.0, CXX_COMPILER=/opt/rh/devtoolset-9/root/usr/bin/c++, CXX_FLAGS= -fabi-version=11 -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -DEDGE_PROFILER_USE_KINETO -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Werror=non-virtual-dtor -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wunused-local-typedefs -Wno-unused-parameter -Wno-unused-function -Wno-unused-result -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Werror=cast-function-type -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.13.1, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, USE_ROCM=OFF, 

    TorchVision: 0.14.1
    OpenCV: 3.4.18
    MMEngine: 0.10.4

Runtime environment:
    cudnn_benchmark: True
    mp_cfg: {'mp_start_method': 'fork', 'opencv_num_threads': 0}
    dist_cfg: {'backend': 'nccl'}
    seed: 520942776
    Distributed launcher: none
    Distributed training: False
    GPU number: 1
------------------------------------------------------------

09/21 10:31:02 - mmengine - INFO - Config:
auto_scale_lr = dict(base_batch_size=16, enable=False)
backbone_embed_multi = dict(decay_mult=0.0, lr_mult=0.1)
backbone_norm_multi = dict(decay_mult=0.0, lr_mult=0.1)
crop_size = (
    640,
    640,
)
custom_keys = dict({
    'absolute_pos_embed':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone':
    dict(decay_mult=1.0, lr_mult=0.1),
    'backbone.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.patch_embed.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.0.blocks.0.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.0.blocks.1.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.0.downsample.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.1.blocks.0.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.1.blocks.1.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.1.downsample.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.0.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.1.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.10.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.11.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.12.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.13.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.14.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.15.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.16.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.17.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.2.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.3.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.4.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.5.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.6.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.7.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.8.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.9.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.downsample.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.3.blocks.0.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.3.blocks.1.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'level_embed':
    dict(decay_mult=0.0, lr_mult=1.0),
    'query_embed':
    dict(decay_mult=0.0, lr_mult=1.0),
    'query_feat':
    dict(decay_mult=0.0, lr_mult=1.0),
    'relative_position_bias_table':
    dict(decay_mult=0.0, lr_mult=0.1)
})
data_root = 'data/ade/ADEChallengeData2016'
dataset_type = 'ADE20KDataset'
default_hooks = dict(
    checkpoint=dict(
        by_epoch=False, interval=5000, save_best='mIoU',
        type='CheckpointHook'),
    logger=dict(interval=50, log_metric_by_epoch=False, type='LoggerHook'),
    param_scheduler=dict(type='ParamSchedulerHook'),
    sampler_seed=dict(type='DistSamplerSeedHook'),
    timer=dict(type='IterTimerHook'),
    visualization=dict(type='SegVisualizationHook'))
default_scope = 'mmseg'
depths = [
    2,
    2,
    18,
    2,
]
embed_multi = dict(decay_mult=0.0, lr_mult=1.0)
env_cfg = dict(
    cudnn_benchmark=True,
    dist_cfg=dict(backend='nccl'),
    mp_cfg=dict(mp_start_method='fork', opencv_num_threads=0))
img_ratios = [
    0.5,
    0.75,
    1.0,
    1.25,
    1.5,
    1.75,
]
launcher = 'none'
load_from = '../checkpoint_files/ade20k/mask2former/mask2former_swin-b-in1k-384x384-pre_8xb2-160k_ade20k-640x640_20221129_125118-a4a086d2.pth'
log_level = 'INFO'
log_processor = dict(by_epoch=False)
model = dict(
    backbone=dict(
        attn_drop_rate=0.0,
        depths=[
            2,
            2,
            18,
            2,
        ],
        drop_path_rate=0.3,
        drop_rate=0.0,
        embed_dims=128,
        frozen_stages=-1,
        init_cfg=dict(
            checkpoint=
            'https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/swin/swin_base_patch4_window12_384_20220317-55b0104a.pth',
            type='Pretrained'),
        mlp_ratio=4,
        num_heads=[
            4,
            8,
            16,
            32,
        ],
        out_indices=(
            0,
            1,
            2,
            3,
        ),
        patch_norm=True,
        pretrain_img_size=384,
        qk_scale=None,
        qkv_bias=True,
        type='SwinTransformer',
        window_size=12,
        with_cp=False),
    data_preprocessor=dict(
        bgr_to_rgb=True,
        corruption='frost',
        mean=[
            123.675,
            116.28,
            103.53,
        ],
        pad_val=0,
        seg_pad_val=255,
        size=(
            640,
            640,
        ),
        std=[
            58.395,
            57.12,
            57.375,
        ],
        type='SegDataPreProcessor'),
    decode_head=dict(
        align_corners=False,
        enforce_decoder_input_project=False,
        feat_channels=256,
        in_channels=[
            128,
            256,
            512,
            1024,
        ],
        loss_cls=dict(
            class_weight=[
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                0.1,
            ],
            loss_weight=2.0,
            reduction='mean',
            type='mmdet.CrossEntropyLoss',
            use_sigmoid=False),
        loss_dice=dict(
            activate=True,
            eps=1.0,
            loss_weight=5.0,
            naive_dice=True,
            reduction='mean',
            type='mmdet.DiceLoss',
            use_sigmoid=True),
        loss_mask=dict(
            loss_weight=5.0,
            reduction='mean',
            type='mmdet.CrossEntropyLoss',
            use_sigmoid=True),
        num_classes=150,
        num_queries=100,
        num_transformer_feat_level=3,
        out_channels=256,
        pixel_decoder=dict(
            act_cfg=dict(type='ReLU'),
            encoder=dict(
                init_cfg=None,
                layer_cfg=dict(
                    ffn_cfg=dict(
                        act_cfg=dict(inplace=True, type='ReLU'),
                        embed_dims=256,
                        feedforward_channels=1024,
                        ffn_drop=0.0,
                        num_fcs=2),
                    self_attn_cfg=dict(
                        batch_first=True,
                        dropout=0.0,
                        embed_dims=256,
                        im2col_step=64,
                        init_cfg=None,
                        norm_cfg=None,
                        num_heads=8,
                        num_levels=3,
                        num_points=4)),
                num_layers=6),
            init_cfg=None,
            norm_cfg=dict(num_groups=32, type='GN'),
            num_outs=3,
            positional_encoding=dict(normalize=True, num_feats=128),
            type='mmdet.MSDeformAttnPixelDecoder'),
        positional_encoding=dict(normalize=True, num_feats=128),
        strides=[
            4,
            8,
            16,
            32,
        ],
        train_cfg=dict(
            assigner=dict(
                match_costs=[
                    dict(type='mmdet.ClassificationCost', weight=2.0),
                    dict(
                        type='mmdet.CrossEntropyLossCost',
                        use_sigmoid=True,
                        weight=5.0),
                    dict(
                        eps=1.0,
                        pred_act=True,
                        type='mmdet.DiceCost',
                        weight=5.0),
                ],
                type='mmdet.HungarianAssigner'),
            importance_sample_ratio=0.75,
            num_points=12544,
            oversample_ratio=3.0,
            sampler=dict(type='mmdet.MaskPseudoSampler')),
        transformer_decoder=dict(
            init_cfg=None,
            layer_cfg=dict(
                cross_attn_cfg=dict(
                    attn_drop=0.0,
                    batch_first=True,
                    dropout_layer=None,
                    embed_dims=256,
                    num_heads=8,
                    proj_drop=0.0),
                ffn_cfg=dict(
                    act_cfg=dict(inplace=True, type='ReLU'),
                    add_identity=True,
                    dropout_layer=None,
                    embed_dims=256,
                    feedforward_channels=2048,
                    ffn_drop=0.0,
                    num_fcs=2),
                self_attn_cfg=dict(
                    attn_drop=0.0,
                    batch_first=True,
                    dropout_layer=None,
                    embed_dims=256,
                    num_heads=8,
                    proj_drop=0.0)),
            num_layers=9,
            return_intermediate=True),
        type='Mask2FormerHead'),
    test_cfg=dict(mode='whole'),
    train_cfg=dict(),
    type='EncoderDecoder')
num_classes = 150
optim_wrapper = dict(
    clip_grad=dict(max_norm=0.01, norm_type=2),
    optimizer=dict(
        betas=(
            0.9,
            0.999,
        ),
        eps=1e-08,
        lr=0.0001,
        type='AdamW',
        weight_decay=0.05),
    paramwise_cfg=dict(
        custom_keys=dict({
            'absolute_pos_embed':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone':
            dict(decay_mult=1.0, lr_mult=0.1),
            'backbone.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.patch_embed.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.0.blocks.0.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.0.blocks.1.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.0.downsample.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.1.blocks.0.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.1.blocks.1.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.1.downsample.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.0.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.1.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.10.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.11.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.12.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.13.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.14.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.15.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.16.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.17.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.2.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.3.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.4.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.5.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.6.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.7.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.8.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.9.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.downsample.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.3.blocks.0.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.3.blocks.1.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'level_embed':
            dict(decay_mult=0.0, lr_mult=1.0),
            'query_embed':
            dict(decay_mult=0.0, lr_mult=1.0),
            'query_feat':
            dict(decay_mult=0.0, lr_mult=1.0),
            'relative_position_bias_table':
            dict(decay_mult=0.0, lr_mult=0.1)
        }),
        norm_decay_mult=0.0),
    type='OptimWrapper')
optimizer = dict(
    betas=(
        0.9,
        0.999,
    ),
    eps=1e-08,
    lr=0.0001,
    type='AdamW',
    weight_decay=0.05)
param_scheduler = [
    dict(
        begin=0,
        by_epoch=False,
        end=160000,
        eta_min=0,
        power=0.9,
        type='PolyLR'),
]
pretrained = 'https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/swin/swin_base_patch4_window12_384_20220317-55b0104a.pth'
resume = False
test_cfg = dict(type='TestLoop')
test_dataloader = dict(
    batch_size=1,
    dataset=dict(
        data_prefix=dict(
            img_path='images/validation',
            seg_map_path='annotations/validation'),
        data_root='data/ade/ADEChallengeData2016',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(keep_ratio=True, scale=(
                2560,
                640,
            ), type='Resize'),
            dict(reduce_zero_label=True, type='LoadAnnotations'),
            dict(type='PackSegInputs'),
        ],
        type='ADE20KDataset'),
    num_workers=4,
    persistent_workers=True,
    sampler=dict(shuffle=False, type='DefaultSampler'))
test_evaluator = dict(
    iou_metrics=[
        'mIoU',
    ], type='IoUMetric')
test_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(keep_ratio=True, scale=(
        2560,
        640,
    ), type='Resize'),
    dict(reduce_zero_label=True, type='LoadAnnotations'),
    dict(type='PackSegInputs'),
]
train_cfg = dict(
    max_iters=160000, type='IterBasedTrainLoop', val_interval=5000)
train_dataloader = dict(
    batch_size=2,
    dataset=dict(
        data_prefix=dict(
            img_path='images/training', seg_map_path='annotations/training'),
        data_root='data/ade/ADEChallengeData2016',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(reduce_zero_label=True, type='LoadAnnotations'),
            dict(
                max_size=2560,
                resize_type='ResizeShortestEdge',
                scales=[
                    320,
                    384,
                    448,
                    512,
                    576,
                    640,
                    704,
                    768,
                    832,
                    896,
                    960,
                    1024,
                    1088,
                    1152,
                    1216,
                    1280,
                ],
                type='RandomChoiceResize'),
            dict(
                cat_max_ratio=0.75, crop_size=(
                    640,
                    640,
                ), type='RandomCrop'),
            dict(prob=0.5, type='RandomFlip'),
            dict(type='PhotoMetricDistortion'),
            dict(type='PackSegInputs'),
        ],
        type='ADE20KDataset'),
    num_workers=4,
    persistent_workers=True,
    sampler=dict(shuffle=True, type='InfiniteSampler'))
train_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(reduce_zero_label=True, type='LoadAnnotations'),
    dict(
        max_size=2560,
        resize_type='ResizeShortestEdge',
        scales=[
            320,
            384,
            448,
            512,
            576,
            640,
            704,
            768,
            832,
            896,
            960,
            1024,
            1088,
            1152,
            1216,
            1280,
        ],
        type='RandomChoiceResize'),
    dict(cat_max_ratio=0.75, crop_size=(
        640,
        640,
    ), type='RandomCrop'),
    dict(prob=0.5, type='RandomFlip'),
    dict(type='PhotoMetricDistortion'),
    dict(type='PackSegInputs'),
]
tta_model = dict(type='SegTTAModel')
tta_pipeline = [
    dict(backend_args=None, type='LoadImageFromFile'),
    dict(
        transforms=[
            [
                dict(keep_ratio=True, scale_factor=0.5, type='Resize'),
                dict(keep_ratio=True, scale_factor=0.75, type='Resize'),
                dict(keep_ratio=True, scale_factor=1.0, type='Resize'),
                dict(keep_ratio=True, scale_factor=1.25, type='Resize'),
                dict(keep_ratio=True, scale_factor=1.5, type='Resize'),
                dict(keep_ratio=True, scale_factor=1.75, type='Resize'),
            ],
            [
                dict(direction='horizontal', prob=0.0, type='RandomFlip'),
                dict(direction='horizontal', prob=1.0, type='RandomFlip'),
            ],
            [
                dict(type='LoadAnnotations'),
            ],
            [
                dict(type='PackSegInputs'),
            ],
        ],
        type='TestTimeAug'),
]
val_cfg = dict(type='ValLoop')
val_dataloader = dict(
    batch_size=1,
    dataset=dict(
        data_prefix=dict(
            img_path='images/validation',
            seg_map_path='annotations/validation'),
        data_root='data/ade/ADEChallengeData2016',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(keep_ratio=True, scale=(
                2560,
                640,
            ), type='Resize'),
            dict(reduce_zero_label=True, type='LoadAnnotations'),
            dict(type='PackSegInputs'),
        ],
        type='ADE20KDataset'),
    num_workers=4,
    persistent_workers=True,
    sampler=dict(shuffle=False, type='DefaultSampler'))
val_evaluator = dict(
    iou_metrics=[
        'mIoU',
    ], type='IoUMetric')
vis_backends = [
    dict(type='LocalVisBackend'),
]
visualizer = dict(
    name='visualizer',
    type='SegLocalVisualizer',
    vis_backends=[
        dict(type='LocalVisBackend'),
    ])
work_dir = '../corruptions/work_dirs/ade20k/mask2former/mask2former_swin-b-in1k-384x384-pre_8xb2-160k_ade20k-640x640/frost'

09/21 10:32:14 - mmengine - INFO - Distributed training is not used, all SyncBatchNorm (SyncBN) layers in the model will be automatically reverted to BatchNormXd layers if they are used.
09/21 10:32:14 - mmengine - INFO - Hooks will be executed in the following order:
before_run:
(VERY_HIGH   ) RuntimeInfoHook                    
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
before_train:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_train_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(NORMAL      ) DistSamplerSeedHook                
 -------------------- 
before_train_iter:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_train_iter:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(NORMAL      ) SegVisualizationHook               
(BELOW_NORMAL) LoggerHook                         
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
after_train_epoch:
(NORMAL      ) IterTimerHook                      
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_val:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
before_val_epoch:
(NORMAL      ) IterTimerHook                      
 -------------------- 
before_val_iter:
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_val_iter:
(NORMAL      ) IterTimerHook                      
(NORMAL      ) SegVisualizationHook               
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_val_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
after_val:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
after_train:
(VERY_HIGH   ) RuntimeInfoHook                    
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_test:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
before_test_epoch:
(NORMAL      ) IterTimerHook                      
 -------------------- 
before_test_iter:
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_test_iter:
(NORMAL      ) IterTimerHook                      
(NORMAL      ) SegVisualizationHook               
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_test_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_test:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
after_run:
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
09/21 10:32:16 - mmengine - WARNING - The prefix is not set in metric class IoUMetric.
Loads checkpoint by local backend from path: ../checkpoint_files/ade20k/mask2former/mask2former_swin-b-in1k-384x384-pre_8xb2-160k_ade20k-640x640_20221129_125118-a4a086d2.pth
09/21 10:32:19 - mmengine - INFO - Load checkpoint from ../checkpoint_files/ade20k/mask2former/mask2former_swin-b-in1k-384x384-pre_8xb2-160k_ade20k-640x640_20221129_125118-a4a086d2.pth
09/21 10:34:18 - mmengine - INFO - Iter(test) [  50/2000]    eta: 1:17:10  time: 0.4018  data_time: 0.0019  memory: 17181  
09/21 10:34:38 - mmengine - INFO - Iter(test) [ 100/2000]    eta: 0:43:51  time: 0.3878  data_time: 0.0020  memory: 17180  
09/21 10:34:53 - mmengine - INFO - Iter(test) [ 150/2000]    eta: 0:31:33  time: 0.3140  data_time: 0.0019  memory: 17150  
09/21 10:35:08 - mmengine - INFO - Iter(test) [ 200/2000]    eta: 0:25:13  time: 0.3466  data_time: 0.0018  memory: 17194  
09/21 10:35:25 - mmengine - INFO - Iter(test) [ 250/2000]    eta: 0:21:41  time: 0.2394  data_time: 0.0018  memory: 17202  
09/21 10:35:41 - mmengine - INFO - Iter(test) [ 300/2000]    eta: 0:19:02  time: 0.1483  data_time: 0.0020  memory: 17180  
09/21 10:35:56 - mmengine - INFO - Iter(test) [ 350/2000]    eta: 0:17:00  time: 0.2826  data_time: 0.0017  memory: 17178  
09/21 10:36:07 - mmengine - INFO - Iter(test) [ 400/2000]    eta: 0:15:10  time: 0.1605  data_time: 0.0017  memory: 17177  
09/21 10:36:16 - mmengine - INFO - Iter(test) [ 450/2000]    eta: 0:13:34  time: 0.1949  data_time: 0.0017  memory: 17147  
09/21 10:36:26 - mmengine - INFO - Iter(test) [ 500/2000]    eta: 0:12:18  time: 0.2263  data_time: 0.0017  memory: 17149  
09/21 10:36:35 - mmengine - INFO - Iter(test) [ 550/2000]    eta: 0:11:14  time: 0.2611  data_time: 0.0018  memory: 17179  
09/21 10:36:43 - mmengine - INFO - Iter(test) [ 600/2000]    eta: 0:10:14  time: 0.1446  data_time: 0.0020  memory: 3938  
09/21 10:36:54 - mmengine - INFO - Iter(test) [ 650/2000]    eta: 0:09:30  time: 0.2771  data_time: 0.0016  memory: 17181  
09/21 10:37:07 - mmengine - INFO - Iter(test) [ 700/2000]    eta: 0:08:53  time: 0.2105  data_time: 0.0018  memory: 17177  
09/21 10:37:20 - mmengine - INFO - Iter(test) [ 750/2000]    eta: 0:08:20  time: 0.5736  data_time: 0.0017  memory: 17184  
09/21 10:37:29 - mmengine - INFO - Iter(test) [ 800/2000]    eta: 0:07:43  time: 0.1418  data_time: 0.0019  memory: 17151  
09/21 10:37:36 - mmengine - INFO - Iter(test) [ 850/2000]    eta: 0:07:07  time: 0.1452  data_time: 0.0019  memory: 1428  
09/21 10:37:45 - mmengine - INFO - Iter(test) [ 900/2000]    eta: 0:06:37  time: 0.1925  data_time: 0.0017  memory: 17138  
09/21 10:37:57 - mmengine - INFO - Iter(test) [ 950/2000]    eta: 0:06:13  time: 0.3030  data_time: 0.0018  memory: 17133  
09/21 10:38:05 - mmengine - INFO - Iter(test) [1000/2000]    eta: 0:05:45  time: 0.1372  data_time: 0.0017  memory: 17096  
09/21 10:38:14 - mmengine - INFO - Iter(test) [1050/2000]    eta: 0:05:20  time: 0.2261  data_time: 0.0018  memory: 17182  
09/21 10:38:24 - mmengine - INFO - Iter(test) [1100/2000]    eta: 0:04:58  time: 0.1416  data_time: 0.0017  memory: 17175  
09/21 10:38:32 - mmengine - INFO - Iter(test) [1150/2000]    eta: 0:04:35  time: 0.1409  data_time: 0.0017  memory: 17117  
09/21 10:38:40 - mmengine - INFO - Iter(test) [1200/2000]    eta: 0:04:13  time: 0.1412  data_time: 0.0017  memory: 17113  
09/21 10:38:50 - mmengine - INFO - Iter(test) [1250/2000]    eta: 0:03:54  time: 0.2223  data_time: 0.0018  memory: 17172  
09/21 10:38:56 - mmengine - INFO - Iter(test) [1300/2000]    eta: 0:03:33  time: 0.1435  data_time: 0.0017  memory: 1430  
09/21 10:39:05 - mmengine - INFO - Iter(test) [1350/2000]    eta: 0:03:15  time: 0.1376  data_time: 0.0017  memory: 17110  
09/21 10:39:16 - mmengine - INFO - Iter(test) [1400/2000]    eta: 0:02:58  time: 0.1591  data_time: 0.0017  memory: 17154  
09/21 10:39:24 - mmengine - INFO - Iter(test) [1450/2000]    eta: 0:02:40  time: 0.2097  data_time: 0.0016  memory: 17130  
09/21 10:39:31 - mmengine - INFO - Iter(test) [1500/2000]    eta: 0:02:23  time: 0.1372  data_time: 0.0017  memory: 17125  
09/21 10:39:40 - mmengine - INFO - Iter(test) [1550/2000]    eta: 0:02:07  time: 0.1503  data_time: 0.0018  memory: 17154  
09/21 10:39:47 - mmengine - INFO - Iter(test) [1600/2000]    eta: 0:01:51  time: 0.1444  data_time: 0.0019  memory: 1425  
09/21 10:39:56 - mmengine - INFO - Iter(test) [1650/2000]    eta: 0:01:36  time: 0.1391  data_time: 0.0017  memory: 17192  
09/21 10:40:08 - mmengine - INFO - Iter(test) [1700/2000]    eta: 0:01:22  time: 0.1468  data_time: 0.0019  memory: 17151  
09/21 10:40:17 - mmengine - INFO - Iter(test) [1750/2000]    eta: 0:01:08  time: 0.1425  data_time: 0.0016  memory: 17111  
09/21 10:40:24 - mmengine - INFO - Iter(test) [1800/2000]    eta: 0:00:53  time: 0.1437  data_time: 0.0019  memory: 17114  
09/21 10:40:34 - mmengine - INFO - Iter(test) [1850/2000]    eta: 0:00:40  time: 0.1438  data_time: 0.0019  memory: 1317  
09/21 10:40:42 - mmengine - INFO - Iter(test) [1900/2000]    eta: 0:00:26  time: 0.2074  data_time: 0.0017  memory: 17182  
09/21 10:40:50 - mmengine - INFO - Iter(test) [1950/2000]    eta: 0:00:13  time: 0.1414  data_time: 0.0017  memory: 17197  
09/21 10:40:59 - mmengine - INFO - Iter(test) [2000/2000]    eta: 0:00:00  time: 0.1379  data_time: 0.0016  memory: 17131  
09/21 10:41:00 - mmengine - INFO - per class results:
09/21 10:41:00 - mmengine - INFO - 
+---------------------+-------+-------+
|        Class        |  IoU  |  Acc  |
+---------------------+-------+-------+
|         wall        | 69.88 | 87.24 |
|       building      | 80.39 | 92.17 |
|         sky         | 62.96 | 64.89 |
|        floor        | 78.71 |  88.7 |
|         tree        | 69.38 | 82.86 |
|       ceiling       | 73.05 | 79.95 |
|         road        | 76.11 | 81.58 |
|         bed         | 85.61 | 92.99 |
|      windowpane     | 55.99 | 72.73 |
|        grass        | 67.34 | 78.73 |
|       cabinet       | 53.83 | 66.14 |
|       sidewalk      | 59.82 | 70.09 |
|        person       | 79.63 | 86.86 |
|        earth        | 33.78 | 62.38 |
|         door        | 27.89 | 35.34 |
|        table        | 56.38 | 71.08 |
|       mountain      | 20.44 | 70.65 |
|        plant        |  50.0 | 61.85 |
|       curtain       | 63.42 | 72.37 |
|        chair        | 52.14 | 63.81 |
|         car         | 83.74 | 90.98 |
|        water        | 56.51 |  76.9 |
|       painting      | 62.76 | 84.84 |
|         sofa        | 63.26 | 80.99 |
|        shelf        | 37.76 | 54.22 |
|        house        | 44.24 | 61.37 |
|         sea         |  52.1 |  73.4 |
|        mirror       | 59.71 |  74.5 |
|         rug         | 61.19 |  71.4 |
|        field        | 24.98 | 40.49 |
|       armchair      | 37.22 |  56.9 |
|         seat        | 51.51 | 78.36 |
|        fence        | 39.91 |  57.6 |
|         desk        | 38.08 |  49.4 |
|         rock        |  34.9 | 54.69 |
|       wardrobe      | 36.41 | 43.91 |
|         lamp        | 61.07 | 72.03 |
|       bathtub       | 50.74 | 60.59 |
|       railing       | 36.21 | 47.05 |
|       cushion       | 53.92 | 62.22 |
|         base        | 30.95 | 56.77 |
|         box         | 24.05 | 33.63 |
|        column       | 36.16 | 46.51 |
|      signboard      | 36.28 | 48.44 |
|   chest of drawers  | 24.24 | 42.33 |
|       counter       | 21.88 | 30.94 |
|         sand        | 24.86 | 35.79 |
|         sink        | 61.78 | 73.63 |
|      skyscraper     | 38.47 | 50.56 |
|      fireplace      | 57.95 | 76.15 |
|     refrigerator    | 67.79 | 73.03 |
|      grandstand     | 41.18 | 74.46 |
|         path        | 22.05 | 34.39 |
|        stairs       | 25.22 | 39.18 |
|        runway       | 20.85 | 24.08 |
|         case        | 40.26 | 61.28 |
|      pool table     | 82.83 | 91.42 |
|        pillow       | 50.14 |  64.0 |
|     screen door     | 43.12 | 56.12 |
|       stairway      | 30.53 | 50.64 |
|        river        |  8.52 | 11.79 |
|        bridge       | 63.61 | 78.37 |
|       bookcase      | 30.41 | 47.25 |
|        blind        | 33.04 | 35.11 |
|     coffee table    | 57.22 | 80.79 |
|        toilet       | 70.02 |  73.1 |
|        flower       | 45.01 | 56.89 |
|         book        | 48.72 | 64.63 |
|         hill        |  5.65 | 10.77 |
|        bench        | 42.42 | 51.72 |
|      countertop     | 50.37 | 75.51 |
|        stove        |  68.1 | 77.91 |
|         palm        | 51.29 | 65.91 |
|    kitchen island   | 36.73 | 69.87 |
|       computer      | 54.45 | 58.29 |
|     swivel chair    | 43.31 | 51.69 |
|         boat        | 72.09 | 82.59 |
|         bar         | 52.39 | 61.67 |
|    arcade machine   | 28.09 |  29.7 |
|        hovel        | 31.41 | 47.94 |
|         bus         | 89.59 | 94.64 |
|        towel        | 57.78 | 67.05 |
|        light        | 54.55 | 67.17 |
|        truck        | 33.99 | 48.96 |
|        tower        | 32.14 | 53.32 |
|      chandelier     | 61.57 | 74.05 |
|        awning       | 27.48 | 32.17 |
|     streetlight     | 28.74 | 39.92 |
|        booth        | 35.17 |  54.8 |
| television receiver | 57.99 | 62.22 |
|       airplane      | 58.63 | 69.96 |
|      dirt track     |  3.78 | 30.82 |
|       apparel       |  30.3 | 46.92 |
|         pole        | 23.22 | 37.71 |
|         land        |  2.43 |  2.77 |
|      bannister      | 13.28 | 23.48 |
|      escalator      |  2.84 |  2.85 |
|       ottoman       |  49.5 | 71.95 |
|        bottle       | 40.45 | 61.27 |
|        buffet       | 36.13 |  50.9 |
|        poster       | 12.53 | 17.42 |
|        stage        |  4.76 | 14.18 |
|         van         | 35.29 | 51.77 |
|         ship        |  6.3  |  6.39 |
|       fountain      | 32.29 | 35.49 |
|    conveyer belt    |  80.8 | 83.91 |
|        canopy       | 25.61 | 36.54 |
|        washer       | 65.58 | 70.45 |
|      plaything      | 17.99 | 34.74 |
|    swimming pool    | 51.27 | 70.66 |
|        stool        | 45.15 | 58.31 |
|        barrel       |  3.1  | 41.45 |
|        basket       | 31.04 | 39.37 |
|      waterfall      | 29.11 | 34.91 |
|         tent        | 84.79 | 98.22 |
|         bag         | 14.03 | 23.88 |
|       minibike      | 71.95 |  85.7 |
|        cradle       |  83.3 | 95.64 |
|         oven        | 16.98 | 33.16 |
|         ball        | 41.92 | 49.11 |
|         food        |  62.3 | 79.53 |
|         step        |  6.61 | 13.03 |
|         tank        | 51.44 | 58.44 |
|      trade name     | 24.56 |  29.1 |
|      microwave      | 61.68 | 66.47 |
|         pot         | 39.46 | 45.35 |
|        animal       | 64.29 | 70.06 |
|       bicycle       | 56.46 | 76.21 |
|         lake        | 46.99 | 63.64 |
|      dishwasher     | 58.67 | 63.11 |
|        screen       | 74.57 | 79.54 |
|       blanket       |  9.43 | 11.58 |
|      sculpture      | 38.54 | 78.99 |
|         hood        | 57.37 | 59.42 |
|        sconce       | 40.21 | 53.44 |
|         vase        | 38.41 | 60.33 |
|    traffic light    | 34.72 | 51.46 |
|         tray        | 16.53 | 22.56 |
|        ashcan       | 33.09 | 41.71 |
|         fan         | 55.01 | 70.42 |
|         pier        | 32.22 | 36.67 |
|      crt screen     |  6.28 | 20.53 |
|        plate        | 57.42 | 72.85 |
|       monitor       |  1.7  |  1.88 |
|    bulletin board   | 34.03 | 45.96 |
|        shower       |  3.48 | 16.31 |
|       radiator      | 39.87 | 41.66 |
|        glass        | 18.03 | 20.11 |
|        clock        |  27.1 | 37.29 |
|         flag        | 50.64 | 54.75 |
+---------------------+-------+-------+
09/21 10:41:00 - mmengine - INFO - Iter(test) [2000/2000]    aAcc: 76.4100  mIoU: 43.4100  mAcc: 55.9000  data_time: 0.0026  time: 0.2597
Finished processing corruption type: frost
Processing corruption type: fog
09/21 10:42:49 - mmengine - INFO - 
------------------------------------------------------------
System environment:
    sys.platform: linux
    Python: 3.10.13 | packaged by conda-forge | (main, Dec 23 2023, 15:36:39) [GCC 12.3.0]
    CUDA available: True
    MUSA available: False
    numpy_random_seed: 1560557769
    GPU 0: Tesla V100-SXM2-32GB
    CUDA_HOME: /opt/bwhpc/common/devel/cuda/11.7
    NVCC: Cuda compilation tools, release 11.7, V11.7.99
    GCC: gcc (GCC) 8.5.0 20210514 (Red Hat 8.5.0-18)
    PyTorch: 1.13.1
    PyTorch compiling details: PyTorch built with:
  - GCC 9.3
  - C++ Version: 201402
  - Intel(R) oneAPI Math Kernel Library Version 2023.1-Product Build 20230303 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v2.6.0 (Git Hash 52b5f107dd9cf10910aaa19cb47f3abf9b349815)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - LAPACK is enabled (usually provided by MKL)
  - NNPACK is enabled
  - CPU capability usage: AVX2
  - CUDA Runtime 11.7
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_61,code=sm_61;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86;-gencode;arch=compute_37,code=compute_37
  - CuDNN 8.5
  - Magma 2.6.1
  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.7, CUDNN_VERSION=8.5.0, CXX_COMPILER=/opt/rh/devtoolset-9/root/usr/bin/c++, CXX_FLAGS= -fabi-version=11 -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -DEDGE_PROFILER_USE_KINETO -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Werror=non-virtual-dtor -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wunused-local-typedefs -Wno-unused-parameter -Wno-unused-function -Wno-unused-result -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Werror=cast-function-type -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.13.1, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, USE_ROCM=OFF, 

    TorchVision: 0.14.1
    OpenCV: 3.4.18
    MMEngine: 0.10.4

Runtime environment:
    cudnn_benchmark: True
    mp_cfg: {'mp_start_method': 'fork', 'opencv_num_threads': 0}
    dist_cfg: {'backend': 'nccl'}
    seed: 1560557769
    Distributed launcher: none
    Distributed training: False
    GPU number: 1
------------------------------------------------------------

09/21 10:42:50 - mmengine - INFO - Config:
auto_scale_lr = dict(base_batch_size=16, enable=False)
backbone_embed_multi = dict(decay_mult=0.0, lr_mult=0.1)
backbone_norm_multi = dict(decay_mult=0.0, lr_mult=0.1)
crop_size = (
    640,
    640,
)
custom_keys = dict({
    'absolute_pos_embed':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone':
    dict(decay_mult=1.0, lr_mult=0.1),
    'backbone.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.patch_embed.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.0.blocks.0.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.0.blocks.1.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.0.downsample.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.1.blocks.0.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.1.blocks.1.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.1.downsample.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.0.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.1.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.10.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.11.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.12.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.13.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.14.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.15.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.16.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.17.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.2.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.3.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.4.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.5.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.6.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.7.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.8.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.9.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.downsample.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.3.blocks.0.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.3.blocks.1.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'level_embed':
    dict(decay_mult=0.0, lr_mult=1.0),
    'query_embed':
    dict(decay_mult=0.0, lr_mult=1.0),
    'query_feat':
    dict(decay_mult=0.0, lr_mult=1.0),
    'relative_position_bias_table':
    dict(decay_mult=0.0, lr_mult=0.1)
})
data_root = 'data/ade/ADEChallengeData2016'
dataset_type = 'ADE20KDataset'
default_hooks = dict(
    checkpoint=dict(
        by_epoch=False, interval=5000, save_best='mIoU',
        type='CheckpointHook'),
    logger=dict(interval=50, log_metric_by_epoch=False, type='LoggerHook'),
    param_scheduler=dict(type='ParamSchedulerHook'),
    sampler_seed=dict(type='DistSamplerSeedHook'),
    timer=dict(type='IterTimerHook'),
    visualization=dict(type='SegVisualizationHook'))
default_scope = 'mmseg'
depths = [
    2,
    2,
    18,
    2,
]
embed_multi = dict(decay_mult=0.0, lr_mult=1.0)
env_cfg = dict(
    cudnn_benchmark=True,
    dist_cfg=dict(backend='nccl'),
    mp_cfg=dict(mp_start_method='fork', opencv_num_threads=0))
img_ratios = [
    0.5,
    0.75,
    1.0,
    1.25,
    1.5,
    1.75,
]
launcher = 'none'
load_from = '../checkpoint_files/ade20k/mask2former/mask2former_swin-b-in1k-384x384-pre_8xb2-160k_ade20k-640x640_20221129_125118-a4a086d2.pth'
log_level = 'INFO'
log_processor = dict(by_epoch=False)
model = dict(
    backbone=dict(
        attn_drop_rate=0.0,
        depths=[
            2,
            2,
            18,
            2,
        ],
        drop_path_rate=0.3,
        drop_rate=0.0,
        embed_dims=128,
        frozen_stages=-1,
        init_cfg=dict(
            checkpoint=
            'https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/swin/swin_base_patch4_window12_384_20220317-55b0104a.pth',
            type='Pretrained'),
        mlp_ratio=4,
        num_heads=[
            4,
            8,
            16,
            32,
        ],
        out_indices=(
            0,
            1,
            2,
            3,
        ),
        patch_norm=True,
        pretrain_img_size=384,
        qk_scale=None,
        qkv_bias=True,
        type='SwinTransformer',
        window_size=12,
        with_cp=False),
    data_preprocessor=dict(
        bgr_to_rgb=True,
        corruption='fog',
        mean=[
            123.675,
            116.28,
            103.53,
        ],
        pad_val=0,
        seg_pad_val=255,
        size=(
            640,
            640,
        ),
        std=[
            58.395,
            57.12,
            57.375,
        ],
        type='SegDataPreProcessor'),
    decode_head=dict(
        align_corners=False,
        enforce_decoder_input_project=False,
        feat_channels=256,
        in_channels=[
            128,
            256,
            512,
            1024,
        ],
        loss_cls=dict(
            class_weight=[
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                0.1,
            ],
            loss_weight=2.0,
            reduction='mean',
            type='mmdet.CrossEntropyLoss',
            use_sigmoid=False),
        loss_dice=dict(
            activate=True,
            eps=1.0,
            loss_weight=5.0,
            naive_dice=True,
            reduction='mean',
            type='mmdet.DiceLoss',
            use_sigmoid=True),
        loss_mask=dict(
            loss_weight=5.0,
            reduction='mean',
            type='mmdet.CrossEntropyLoss',
            use_sigmoid=True),
        num_classes=150,
        num_queries=100,
        num_transformer_feat_level=3,
        out_channels=256,
        pixel_decoder=dict(
            act_cfg=dict(type='ReLU'),
            encoder=dict(
                init_cfg=None,
                layer_cfg=dict(
                    ffn_cfg=dict(
                        act_cfg=dict(inplace=True, type='ReLU'),
                        embed_dims=256,
                        feedforward_channels=1024,
                        ffn_drop=0.0,
                        num_fcs=2),
                    self_attn_cfg=dict(
                        batch_first=True,
                        dropout=0.0,
                        embed_dims=256,
                        im2col_step=64,
                        init_cfg=None,
                        norm_cfg=None,
                        num_heads=8,
                        num_levels=3,
                        num_points=4)),
                num_layers=6),
            init_cfg=None,
            norm_cfg=dict(num_groups=32, type='GN'),
            num_outs=3,
            positional_encoding=dict(normalize=True, num_feats=128),
            type='mmdet.MSDeformAttnPixelDecoder'),
        positional_encoding=dict(normalize=True, num_feats=128),
        strides=[
            4,
            8,
            16,
            32,
        ],
        train_cfg=dict(
            assigner=dict(
                match_costs=[
                    dict(type='mmdet.ClassificationCost', weight=2.0),
                    dict(
                        type='mmdet.CrossEntropyLossCost',
                        use_sigmoid=True,
                        weight=5.0),
                    dict(
                        eps=1.0,
                        pred_act=True,
                        type='mmdet.DiceCost',
                        weight=5.0),
                ],
                type='mmdet.HungarianAssigner'),
            importance_sample_ratio=0.75,
            num_points=12544,
            oversample_ratio=3.0,
            sampler=dict(type='mmdet.MaskPseudoSampler')),
        transformer_decoder=dict(
            init_cfg=None,
            layer_cfg=dict(
                cross_attn_cfg=dict(
                    attn_drop=0.0,
                    batch_first=True,
                    dropout_layer=None,
                    embed_dims=256,
                    num_heads=8,
                    proj_drop=0.0),
                ffn_cfg=dict(
                    act_cfg=dict(inplace=True, type='ReLU'),
                    add_identity=True,
                    dropout_layer=None,
                    embed_dims=256,
                    feedforward_channels=2048,
                    ffn_drop=0.0,
                    num_fcs=2),
                self_attn_cfg=dict(
                    attn_drop=0.0,
                    batch_first=True,
                    dropout_layer=None,
                    embed_dims=256,
                    num_heads=8,
                    proj_drop=0.0)),
            num_layers=9,
            return_intermediate=True),
        type='Mask2FormerHead'),
    test_cfg=dict(mode='whole'),
    train_cfg=dict(),
    type='EncoderDecoder')
num_classes = 150
optim_wrapper = dict(
    clip_grad=dict(max_norm=0.01, norm_type=2),
    optimizer=dict(
        betas=(
            0.9,
            0.999,
        ),
        eps=1e-08,
        lr=0.0001,
        type='AdamW',
        weight_decay=0.05),
    paramwise_cfg=dict(
        custom_keys=dict({
            'absolute_pos_embed':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone':
            dict(decay_mult=1.0, lr_mult=0.1),
            'backbone.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.patch_embed.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.0.blocks.0.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.0.blocks.1.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.0.downsample.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.1.blocks.0.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.1.blocks.1.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.1.downsample.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.0.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.1.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.10.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.11.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.12.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.13.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.14.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.15.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.16.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.17.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.2.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.3.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.4.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.5.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.6.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.7.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.8.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.9.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.downsample.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.3.blocks.0.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.3.blocks.1.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'level_embed':
            dict(decay_mult=0.0, lr_mult=1.0),
            'query_embed':
            dict(decay_mult=0.0, lr_mult=1.0),
            'query_feat':
            dict(decay_mult=0.0, lr_mult=1.0),
            'relative_position_bias_table':
            dict(decay_mult=0.0, lr_mult=0.1)
        }),
        norm_decay_mult=0.0),
    type='OptimWrapper')
optimizer = dict(
    betas=(
        0.9,
        0.999,
    ),
    eps=1e-08,
    lr=0.0001,
    type='AdamW',
    weight_decay=0.05)
param_scheduler = [
    dict(
        begin=0,
        by_epoch=False,
        end=160000,
        eta_min=0,
        power=0.9,
        type='PolyLR'),
]
pretrained = 'https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/swin/swin_base_patch4_window12_384_20220317-55b0104a.pth'
resume = False
test_cfg = dict(type='TestLoop')
test_dataloader = dict(
    batch_size=1,
    dataset=dict(
        data_prefix=dict(
            img_path='images/validation',
            seg_map_path='annotations/validation'),
        data_root='data/ade/ADEChallengeData2016',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(keep_ratio=True, scale=(
                2560,
                640,
            ), type='Resize'),
            dict(reduce_zero_label=True, type='LoadAnnotations'),
            dict(type='PackSegInputs'),
        ],
        type='ADE20KDataset'),
    num_workers=4,
    persistent_workers=True,
    sampler=dict(shuffle=False, type='DefaultSampler'))
test_evaluator = dict(
    iou_metrics=[
        'mIoU',
    ], type='IoUMetric')
test_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(keep_ratio=True, scale=(
        2560,
        640,
    ), type='Resize'),
    dict(reduce_zero_label=True, type='LoadAnnotations'),
    dict(type='PackSegInputs'),
]
train_cfg = dict(
    max_iters=160000, type='IterBasedTrainLoop', val_interval=5000)
train_dataloader = dict(
    batch_size=2,
    dataset=dict(
        data_prefix=dict(
            img_path='images/training', seg_map_path='annotations/training'),
        data_root='data/ade/ADEChallengeData2016',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(reduce_zero_label=True, type='LoadAnnotations'),
            dict(
                max_size=2560,
                resize_type='ResizeShortestEdge',
                scales=[
                    320,
                    384,
                    448,
                    512,
                    576,
                    640,
                    704,
                    768,
                    832,
                    896,
                    960,
                    1024,
                    1088,
                    1152,
                    1216,
                    1280,
                ],
                type='RandomChoiceResize'),
            dict(
                cat_max_ratio=0.75, crop_size=(
                    640,
                    640,
                ), type='RandomCrop'),
            dict(prob=0.5, type='RandomFlip'),
            dict(type='PhotoMetricDistortion'),
            dict(type='PackSegInputs'),
        ],
        type='ADE20KDataset'),
    num_workers=4,
    persistent_workers=True,
    sampler=dict(shuffle=True, type='InfiniteSampler'))
train_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(reduce_zero_label=True, type='LoadAnnotations'),
    dict(
        max_size=2560,
        resize_type='ResizeShortestEdge',
        scales=[
            320,
            384,
            448,
            512,
            576,
            640,
            704,
            768,
            832,
            896,
            960,
            1024,
            1088,
            1152,
            1216,
            1280,
        ],
        type='RandomChoiceResize'),
    dict(cat_max_ratio=0.75, crop_size=(
        640,
        640,
    ), type='RandomCrop'),
    dict(prob=0.5, type='RandomFlip'),
    dict(type='PhotoMetricDistortion'),
    dict(type='PackSegInputs'),
]
tta_model = dict(type='SegTTAModel')
tta_pipeline = [
    dict(backend_args=None, type='LoadImageFromFile'),
    dict(
        transforms=[
            [
                dict(keep_ratio=True, scale_factor=0.5, type='Resize'),
                dict(keep_ratio=True, scale_factor=0.75, type='Resize'),
                dict(keep_ratio=True, scale_factor=1.0, type='Resize'),
                dict(keep_ratio=True, scale_factor=1.25, type='Resize'),
                dict(keep_ratio=True, scale_factor=1.5, type='Resize'),
                dict(keep_ratio=True, scale_factor=1.75, type='Resize'),
            ],
            [
                dict(direction='horizontal', prob=0.0, type='RandomFlip'),
                dict(direction='horizontal', prob=1.0, type='RandomFlip'),
            ],
            [
                dict(type='LoadAnnotations'),
            ],
            [
                dict(type='PackSegInputs'),
            ],
        ],
        type='TestTimeAug'),
]
val_cfg = dict(type='ValLoop')
val_dataloader = dict(
    batch_size=1,
    dataset=dict(
        data_prefix=dict(
            img_path='images/validation',
            seg_map_path='annotations/validation'),
        data_root='data/ade/ADEChallengeData2016',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(keep_ratio=True, scale=(
                2560,
                640,
            ), type='Resize'),
            dict(reduce_zero_label=True, type='LoadAnnotations'),
            dict(type='PackSegInputs'),
        ],
        type='ADE20KDataset'),
    num_workers=4,
    persistent_workers=True,
    sampler=dict(shuffle=False, type='DefaultSampler'))
val_evaluator = dict(
    iou_metrics=[
        'mIoU',
    ], type='IoUMetric')
vis_backends = [
    dict(type='LocalVisBackend'),
]
visualizer = dict(
    name='visualizer',
    type='SegLocalVisualizer',
    vis_backends=[
        dict(type='LocalVisBackend'),
    ])
work_dir = '../corruptions/work_dirs/ade20k/mask2former/mask2former_swin-b-in1k-384x384-pre_8xb2-160k_ade20k-640x640/fog'

09/21 10:43:38 - mmengine - INFO - Distributed training is not used, all SyncBatchNorm (SyncBN) layers in the model will be automatically reverted to BatchNormXd layers if they are used.
09/21 10:43:38 - mmengine - INFO - Hooks will be executed in the following order:
before_run:
(VERY_HIGH   ) RuntimeInfoHook                    
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
before_train:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_train_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(NORMAL      ) DistSamplerSeedHook                
 -------------------- 
before_train_iter:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_train_iter:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(NORMAL      ) SegVisualizationHook               
(BELOW_NORMAL) LoggerHook                         
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
after_train_epoch:
(NORMAL      ) IterTimerHook                      
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_val:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
before_val_epoch:
(NORMAL      ) IterTimerHook                      
 -------------------- 
before_val_iter:
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_val_iter:
(NORMAL      ) IterTimerHook                      
(NORMAL      ) SegVisualizationHook               
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_val_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
after_val:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
after_train:
(VERY_HIGH   ) RuntimeInfoHook                    
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_test:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
before_test_epoch:
(NORMAL      ) IterTimerHook                      
 -------------------- 
before_test_iter:
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_test_iter:
(NORMAL      ) IterTimerHook                      
(NORMAL      ) SegVisualizationHook               
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_test_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_test:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
after_run:
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
09/21 10:43:39 - mmengine - WARNING - The prefix is not set in metric class IoUMetric.
Loads checkpoint by local backend from path: ../checkpoint_files/ade20k/mask2former/mask2former_swin-b-in1k-384x384-pre_8xb2-160k_ade20k-640x640_20221129_125118-a4a086d2.pth
09/21 10:43:42 - mmengine - INFO - Load checkpoint from ../checkpoint_files/ade20k/mask2former/mask2former_swin-b-in1k-384x384-pre_8xb2-160k_ade20k-640x640_20221129_125118-a4a086d2.pth
09/21 10:45:54 - mmengine - INFO - Iter(test) [  50/2000]    eta: 1:25:39  time: 0.5569  data_time: 0.0054  memory: 17181  
09/21 10:46:21 - mmengine - INFO - Iter(test) [ 100/2000]    eta: 0:50:11  time: 0.5295  data_time: 0.0019  memory: 17180  
09/21 10:46:44 - mmengine - INFO - Iter(test) [ 150/2000]    eta: 0:37:13  time: 0.4291  data_time: 0.0018  memory: 17150  
09/21 10:47:06 - mmengine - INFO - Iter(test) [ 200/2000]    eta: 0:30:30  time: 0.5303  data_time: 0.0018  memory: 17194  
09/21 10:47:29 - mmengine - INFO - Iter(test) [ 250/2000]    eta: 0:26:29  time: 0.3826  data_time: 0.0018  memory: 17202  
09/21 10:47:52 - mmengine - INFO - Iter(test) [ 300/2000]    eta: 0:23:34  time: 0.2982  data_time: 0.0019  memory: 17180  
09/21 10:48:15 - mmengine - INFO - Iter(test) [ 350/2000]    eta: 0:21:22  time: 0.4239  data_time: 0.0018  memory: 17178  
09/21 10:48:32 - mmengine - INFO - Iter(test) [ 400/2000]    eta: 0:19:18  time: 0.3018  data_time: 0.0017  memory: 17177  
09/21 10:48:48 - mmengine - INFO - Iter(test) [ 450/2000]    eta: 0:17:32  time: 0.3367  data_time: 0.0017  memory: 17147  
09/21 10:49:05 - mmengine - INFO - Iter(test) [ 500/2000]    eta: 0:16:08  time: 0.3637  data_time: 0.0018  memory: 17149  
09/21 10:49:22 - mmengine - INFO - Iter(test) [ 550/2000]    eta: 0:14:55  time: 0.3854  data_time: 0.0018  memory: 17179  
09/21 10:49:36 - mmengine - INFO - Iter(test) [ 600/2000]    eta: 0:13:45  time: 0.2876  data_time: 0.0019  memory: 3938  
09/21 10:49:55 - mmengine - INFO - Iter(test) [ 650/2000]    eta: 0:12:53  time: 0.4050  data_time: 0.0017  memory: 17181  
09/21 10:50:15 - mmengine - INFO - Iter(test) [ 700/2000]    eta: 0:12:09  time: 0.3992  data_time: 0.0021  memory: 17177  
09/21 10:50:35 - mmengine - INFO - Iter(test) [ 750/2000]    eta: 0:11:27  time: 0.6817  data_time: 0.0017  memory: 17184  
09/21 10:50:51 - mmengine - INFO - Iter(test) [ 800/2000]    eta: 0:10:42  time: 0.2892  data_time: 0.0020  memory: 17151  
09/21 10:51:05 - mmengine - INFO - Iter(test) [ 850/2000]    eta: 0:09:58  time: 0.2806  data_time: 0.0020  memory: 1428  
09/21 10:51:21 - mmengine - INFO - Iter(test) [ 900/2000]    eta: 0:09:19  time: 0.3346  data_time: 0.0017  memory: 17138  
09/21 10:51:39 - mmengine - INFO - Iter(test) [ 950/2000]    eta: 0:08:46  time: 0.4621  data_time: 0.0030  memory: 17133  
09/21 10:51:54 - mmengine - INFO - Iter(test) [1000/2000]    eta: 0:08:11  time: 0.2793  data_time: 0.0017  memory: 17096  
09/21 10:52:10 - mmengine - INFO - Iter(test) [1050/2000]    eta: 0:07:39  time: 0.3651  data_time: 0.0017  memory: 17182  
09/21 10:52:28 - mmengine - INFO - Iter(test) [1100/2000]    eta: 0:07:09  time: 0.2839  data_time: 0.0019  memory: 17175  
09/21 10:52:43 - mmengine - INFO - Iter(test) [1150/2000]    eta: 0:06:39  time: 0.2875  data_time: 0.0017  memory: 17117  
09/21 10:52:58 - mmengine - INFO - Iter(test) [1200/2000]    eta: 0:06:10  time: 0.2826  data_time: 0.0017  memory: 17113  
09/21 10:53:14 - mmengine - INFO - Iter(test) [1250/2000]    eta: 0:05:43  time: 0.3634  data_time: 0.0017  memory: 17172  
09/21 10:53:28 - mmengine - INFO - Iter(test) [1300/2000]    eta: 0:05:15  time: 0.2848  data_time: 0.0017  memory: 1430  
09/21 10:53:44 - mmengine - INFO - Iter(test) [1350/2000]    eta: 0:04:49  time: 0.2744  data_time: 0.0017  memory: 17110  
09/21 10:54:02 - mmengine - INFO - Iter(test) [1400/2000]    eta: 0:04:25  time: 0.3068  data_time: 0.0018  memory: 17154  
09/21 10:54:17 - mmengine - INFO - Iter(test) [1450/2000]    eta: 0:04:00  time: 0.3538  data_time: 0.0017  memory: 17130  
09/21 10:54:32 - mmengine - INFO - Iter(test) [1500/2000]    eta: 0:03:36  time: 0.2718  data_time: 0.0017  memory: 17125  
09/21 10:54:47 - mmengine - INFO - Iter(test) [1550/2000]    eta: 0:03:12  time: 0.2827  data_time: 0.0017  memory: 17154  
09/21 10:55:01 - mmengine - INFO - Iter(test) [1600/2000]    eta: 0:02:49  time: 0.2787  data_time: 0.0018  memory: 1425  
09/21 10:55:17 - mmengine - INFO - Iter(test) [1650/2000]    eta: 0:02:27  time: 0.2718  data_time: 0.0016  memory: 17192  
09/21 10:55:36 - mmengine - INFO - Iter(test) [1700/2000]    eta: 0:02:05  time: 0.2863  data_time: 0.0020  memory: 17151  
09/21 10:55:52 - mmengine - INFO - Iter(test) [1750/2000]    eta: 0:01:44  time: 0.2850  data_time: 0.0016  memory: 17111  
09/21 10:56:07 - mmengine - INFO - Iter(test) [1800/2000]    eta: 0:01:22  time: 0.2964  data_time: 0.0023  memory: 17114  
09/21 10:56:21 - mmengine - INFO - Iter(test) [1850/2000]    eta: 0:01:01  time: 0.2849  data_time: 0.0018  memory: 1317  
09/21 10:56:36 - mmengine - INFO - Iter(test) [1900/2000]    eta: 0:00:40  time: 0.3432  data_time: 0.0018  memory: 17182  
09/21 10:56:52 - mmengine - INFO - Iter(test) [1950/2000]    eta: 0:00:20  time: 0.2847  data_time: 0.0017  memory: 17197  
09/21 10:57:08 - mmengine - INFO - Iter(test) [2000/2000]    eta: 0:00:00  time: 0.2738  data_time: 0.0016  memory: 17131  
09/21 10:57:09 - mmengine - INFO - per class results:
09/21 10:57:09 - mmengine - INFO - 
+---------------------+-------+-------+
|        Class        |  IoU  |  Acc  |
+---------------------+-------+-------+
|         wall        | 77.75 | 86.66 |
|       building      | 83.05 |  93.5 |
|         sky         | 94.23 |  97.8 |
|        floor        | 82.86 | 89.68 |
|         tree        | 74.73 | 84.93 |
|       ceiling       |  85.0 | 91.37 |
|         road        | 84.07 | 91.28 |
|         bed         | 88.52 | 95.42 |
|      windowpane     | 60.79 | 78.16 |
|        grass        | 69.41 | 83.48 |
|       cabinet       | 58.53 | 75.39 |
|       sidewalk      | 67.45 | 80.54 |
|        person       | 83.42 | 90.62 |
|        earth        | 40.42 | 56.23 |
|         door        | 46.73 | 60.61 |
|        table        | 62.55 | 75.26 |
|       mountain      | 59.12 | 77.06 |
|        plant        | 51.42 | 62.99 |
|       curtain       | 72.26 | 83.89 |
|        chair        | 58.03 | 71.26 |
|         car         | 86.52 | 92.66 |
|        water        | 60.65 | 75.41 |
|       painting      | 70.36 | 88.79 |
|         sofa        | 66.79 | 85.79 |
|        shelf        | 39.76 |  58.7 |
|        house        |  53.2 | 67.78 |
|         sea         | 68.64 | 83.38 |
|        mirror       | 64.06 | 81.05 |
|         rug         | 71.44 | 83.35 |
|        field        | 26.14 | 42.34 |
|       armchair      |  39.1 |  55.1 |
|         seat        | 62.86 | 83.78 |
|        fence        | 42.96 | 56.78 |
|         desk        | 50.84 | 71.45 |
|         rock        | 43.77 | 63.99 |
|       wardrobe      | 58.15 | 70.94 |
|         lamp        | 66.39 | 78.48 |
|       bathtub       | 72.93 | 82.91 |
|       railing       |  37.5 | 56.86 |
|       cushion       | 55.84 | 65.25 |
|         base        | 33.83 | 64.03 |
|         box         | 25.95 | 37.45 |
|        column       |  45.0 | 57.36 |
|      signboard      | 38.76 | 58.61 |
|   chest of drawers  |  38.5 | 57.15 |
|       counter       | 28.36 | 36.32 |
|         sand        | 42.03 | 64.94 |
|         sink        |  72.5 |  82.2 |
|      skyscraper     | 47.14 | 57.18 |
|      fireplace      |  74.7 | 90.19 |
|     refrigerator    | 74.28 | 79.24 |
|      grandstand     | 56.14 | 71.04 |
|         path        | 23.53 | 33.52 |
|        stairs       | 36.47 | 49.07 |
|        runway       | 60.07 | 75.37 |
|         case        | 52.39 | 78.59 |
|      pool table     | 85.99 | 95.77 |
|        pillow       | 58.73 | 79.73 |
|     screen door     | 61.48 | 65.41 |
|       stairway      | 29.94 | 48.82 |
|        river        |  7.63 | 17.25 |
|        bridge       | 68.49 | 82.21 |
|       bookcase      | 33.32 | 59.22 |
|        blind        | 38.74 | 45.36 |
|     coffee table    | 66.86 | 83.14 |
|        toilet       | 89.22 | 93.32 |
|        flower       | 45.87 | 58.14 |
|         book        | 49.02 | 71.19 |
|         hill        |  5.77 |  9.48 |
|        bench        | 39.93 | 53.78 |
|      countertop     | 61.48 | 75.93 |
|        stove        | 78.38 | 88.77 |
|         palm        | 50.32 | 69.14 |
|    kitchen island   | 47.15 | 77.85 |
|       computer      | 66.94 | 78.37 |
|     swivel chair    | 46.02 | 58.86 |
|         boat        | 72.25 | 88.33 |
|         bar         | 46.71 | 58.53 |
|    arcade machine   | 72.52 | 78.04 |
|        hovel        | 10.89 | 15.38 |
|         bus         | 92.43 | 95.92 |
|        towel        | 79.72 | 86.41 |
|        light        | 61.08 | 79.26 |
|        truck        | 42.67 |  60.9 |
|        tower        | 14.14 | 23.48 |
|      chandelier     |  70.0 | 81.05 |
|        awning       | 27.16 | 36.16 |
|     streetlight     | 32.96 | 50.12 |
|        booth        | 41.58 | 66.86 |
| television receiver | 68.56 | 79.68 |
|       airplane      | 62.25 |  73.5 |
|      dirt track     |  4.03 | 27.43 |
|       apparel       | 32.86 | 45.63 |
|         pole        | 25.77 | 38.75 |
|         land        |  7.26 |  8.97 |
|      bannister      | 18.29 | 34.54 |
|      escalator      | 51.89 | 61.56 |
|       ottoman       | 48.16 | 67.89 |
|        bottle       | 39.44 | 54.54 |
|        buffet       | 32.24 | 43.81 |
|        poster       | 27.72 | 41.14 |
|        stage        | 19.32 |  39.2 |
|         van         | 49.95 | 69.28 |
|         ship        | 89.73 | 93.36 |
|       fountain      | 24.72 |  25.8 |
|    conveyer belt    | 49.79 | 65.35 |
|        canopy       | 21.95 | 29.35 |
|        washer       | 72.02 | 74.94 |
|      plaything      | 25.64 | 39.67 |
|    swimming pool    | 57.66 | 65.29 |
|        stool        | 45.73 |  67.5 |
|        barrel       | 59.63 | 74.57 |
|        basket       | 38.39 | 49.63 |
|      waterfall      | 40.64 | 55.38 |
|         tent        | 85.11 | 98.22 |
|         bag         | 18.95 | 28.49 |
|       minibike      | 72.06 | 87.48 |
|        cradle       | 86.79 | 96.57 |
|         oven        | 44.65 | 51.21 |
|         ball        |  48.3 | 54.97 |
|         food        |  62.0 | 76.11 |
|         step        | 17.54 | 23.85 |
|         tank        | 56.59 | 63.94 |
|      trade name     | 30.82 | 39.94 |
|      microwave      | 85.59 | 95.89 |
|         pot         | 43.13 | 51.54 |
|        animal       | 70.12 | 72.86 |
|       bicycle       | 60.08 | 82.38 |
|         lake        | 48.66 | 68.98 |
|      dishwasher     | 63.47 | 75.41 |
|        screen       |  70.2 | 90.29 |
|       blanket       |  22.8 | 29.33 |
|      sculpture      | 56.25 | 79.92 |
|         hood        | 70.33 | 74.65 |
|        sconce       |  44.7 | 65.88 |
|         vase        | 40.96 | 62.08 |
|    traffic light    | 43.85 | 66.58 |
|         tray        | 17.25 |  25.7 |
|        ashcan       | 47.09 | 65.95 |
|         fan         | 61.65 | 80.65 |
|         pier        | 37.38 | 41.54 |
|      crt screen     |  4.97 | 13.83 |
|        plate        | 59.42 | 78.94 |
|       monitor       |  1.37 |  2.15 |
|    bulletin board   | 53.23 | 73.58 |
|        shower       | 11.07 | 20.66 |
|       radiator      | 66.34 |  73.6 |
|        glass        | 18.81 | 21.76 |
|        clock        | 31.53 | 43.48 |
|         flag        | 73.77 | 81.71 |
+---------------------+-------+-------+
09/21 10:57:09 - mmengine - INFO - Iter(test) [2000/2000]    aAcc: 83.4000  mIoU: 51.4900  mAcc: 64.5500  data_time: 0.0030  time: 0.4026
Finished processing corruption type: fog
Processing corruption type: brightness
09/21 10:59:19 - mmengine - INFO - 
------------------------------------------------------------
System environment:
    sys.platform: linux
    Python: 3.10.13 | packaged by conda-forge | (main, Dec 23 2023, 15:36:39) [GCC 12.3.0]
    CUDA available: True
    MUSA available: False
    numpy_random_seed: 1939944976
    GPU 0: Tesla V100-SXM2-32GB
    CUDA_HOME: /opt/bwhpc/common/devel/cuda/11.7
    NVCC: Cuda compilation tools, release 11.7, V11.7.99
    GCC: gcc (GCC) 8.5.0 20210514 (Red Hat 8.5.0-18)
    PyTorch: 1.13.1
    PyTorch compiling details: PyTorch built with:
  - GCC 9.3
  - C++ Version: 201402
  - Intel(R) oneAPI Math Kernel Library Version 2023.1-Product Build 20230303 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v2.6.0 (Git Hash 52b5f107dd9cf10910aaa19cb47f3abf9b349815)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - LAPACK is enabled (usually provided by MKL)
  - NNPACK is enabled
  - CPU capability usage: AVX2
  - CUDA Runtime 11.7
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_61,code=sm_61;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86;-gencode;arch=compute_37,code=compute_37
  - CuDNN 8.5
  - Magma 2.6.1
  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.7, CUDNN_VERSION=8.5.0, CXX_COMPILER=/opt/rh/devtoolset-9/root/usr/bin/c++, CXX_FLAGS= -fabi-version=11 -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -DEDGE_PROFILER_USE_KINETO -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Werror=non-virtual-dtor -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wunused-local-typedefs -Wno-unused-parameter -Wno-unused-function -Wno-unused-result -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Werror=cast-function-type -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.13.1, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, USE_ROCM=OFF, 

    TorchVision: 0.14.1
    OpenCV: 3.4.18
    MMEngine: 0.10.4

Runtime environment:
    cudnn_benchmark: True
    mp_cfg: {'mp_start_method': 'fork', 'opencv_num_threads': 0}
    dist_cfg: {'backend': 'nccl'}
    seed: 1939944976
    Distributed launcher: none
    Distributed training: False
    GPU number: 1
------------------------------------------------------------

09/21 10:59:20 - mmengine - INFO - Config:
auto_scale_lr = dict(base_batch_size=16, enable=False)
backbone_embed_multi = dict(decay_mult=0.0, lr_mult=0.1)
backbone_norm_multi = dict(decay_mult=0.0, lr_mult=0.1)
crop_size = (
    640,
    640,
)
custom_keys = dict({
    'absolute_pos_embed':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone':
    dict(decay_mult=1.0, lr_mult=0.1),
    'backbone.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.patch_embed.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.0.blocks.0.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.0.blocks.1.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.0.downsample.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.1.blocks.0.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.1.blocks.1.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.1.downsample.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.0.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.1.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.10.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.11.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.12.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.13.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.14.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.15.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.16.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.17.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.2.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.3.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.4.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.5.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.6.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.7.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.8.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.9.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.downsample.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.3.blocks.0.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.3.blocks.1.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'level_embed':
    dict(decay_mult=0.0, lr_mult=1.0),
    'query_embed':
    dict(decay_mult=0.0, lr_mult=1.0),
    'query_feat':
    dict(decay_mult=0.0, lr_mult=1.0),
    'relative_position_bias_table':
    dict(decay_mult=0.0, lr_mult=0.1)
})
data_root = 'data/ade/ADEChallengeData2016'
dataset_type = 'ADE20KDataset'
default_hooks = dict(
    checkpoint=dict(
        by_epoch=False, interval=5000, save_best='mIoU',
        type='CheckpointHook'),
    logger=dict(interval=50, log_metric_by_epoch=False, type='LoggerHook'),
    param_scheduler=dict(type='ParamSchedulerHook'),
    sampler_seed=dict(type='DistSamplerSeedHook'),
    timer=dict(type='IterTimerHook'),
    visualization=dict(type='SegVisualizationHook'))
default_scope = 'mmseg'
depths = [
    2,
    2,
    18,
    2,
]
embed_multi = dict(decay_mult=0.0, lr_mult=1.0)
env_cfg = dict(
    cudnn_benchmark=True,
    dist_cfg=dict(backend='nccl'),
    mp_cfg=dict(mp_start_method='fork', opencv_num_threads=0))
img_ratios = [
    0.5,
    0.75,
    1.0,
    1.25,
    1.5,
    1.75,
]
launcher = 'none'
load_from = '../checkpoint_files/ade20k/mask2former/mask2former_swin-b-in1k-384x384-pre_8xb2-160k_ade20k-640x640_20221129_125118-a4a086d2.pth'
log_level = 'INFO'
log_processor = dict(by_epoch=False)
model = dict(
    backbone=dict(
        attn_drop_rate=0.0,
        depths=[
            2,
            2,
            18,
            2,
        ],
        drop_path_rate=0.3,
        drop_rate=0.0,
        embed_dims=128,
        frozen_stages=-1,
        init_cfg=dict(
            checkpoint=
            'https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/swin/swin_base_patch4_window12_384_20220317-55b0104a.pth',
            type='Pretrained'),
        mlp_ratio=4,
        num_heads=[
            4,
            8,
            16,
            32,
        ],
        out_indices=(
            0,
            1,
            2,
            3,
        ),
        patch_norm=True,
        pretrain_img_size=384,
        qk_scale=None,
        qkv_bias=True,
        type='SwinTransformer',
        window_size=12,
        with_cp=False),
    data_preprocessor=dict(
        bgr_to_rgb=True,
        corruption='brightness',
        mean=[
            123.675,
            116.28,
            103.53,
        ],
        pad_val=0,
        seg_pad_val=255,
        size=(
            640,
            640,
        ),
        std=[
            58.395,
            57.12,
            57.375,
        ],
        type='SegDataPreProcessor'),
    decode_head=dict(
        align_corners=False,
        enforce_decoder_input_project=False,
        feat_channels=256,
        in_channels=[
            128,
            256,
            512,
            1024,
        ],
        loss_cls=dict(
            class_weight=[
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                0.1,
            ],
            loss_weight=2.0,
            reduction='mean',
            type='mmdet.CrossEntropyLoss',
            use_sigmoid=False),
        loss_dice=dict(
            activate=True,
            eps=1.0,
            loss_weight=5.0,
            naive_dice=True,
            reduction='mean',
            type='mmdet.DiceLoss',
            use_sigmoid=True),
        loss_mask=dict(
            loss_weight=5.0,
            reduction='mean',
            type='mmdet.CrossEntropyLoss',
            use_sigmoid=True),
        num_classes=150,
        num_queries=100,
        num_transformer_feat_level=3,
        out_channels=256,
        pixel_decoder=dict(
            act_cfg=dict(type='ReLU'),
            encoder=dict(
                init_cfg=None,
                layer_cfg=dict(
                    ffn_cfg=dict(
                        act_cfg=dict(inplace=True, type='ReLU'),
                        embed_dims=256,
                        feedforward_channels=1024,
                        ffn_drop=0.0,
                        num_fcs=2),
                    self_attn_cfg=dict(
                        batch_first=True,
                        dropout=0.0,
                        embed_dims=256,
                        im2col_step=64,
                        init_cfg=None,
                        norm_cfg=None,
                        num_heads=8,
                        num_levels=3,
                        num_points=4)),
                num_layers=6),
            init_cfg=None,
            norm_cfg=dict(num_groups=32, type='GN'),
            num_outs=3,
            positional_encoding=dict(normalize=True, num_feats=128),
            type='mmdet.MSDeformAttnPixelDecoder'),
        positional_encoding=dict(normalize=True, num_feats=128),
        strides=[
            4,
            8,
            16,
            32,
        ],
        train_cfg=dict(
            assigner=dict(
                match_costs=[
                    dict(type='mmdet.ClassificationCost', weight=2.0),
                    dict(
                        type='mmdet.CrossEntropyLossCost',
                        use_sigmoid=True,
                        weight=5.0),
                    dict(
                        eps=1.0,
                        pred_act=True,
                        type='mmdet.DiceCost',
                        weight=5.0),
                ],
                type='mmdet.HungarianAssigner'),
            importance_sample_ratio=0.75,
            num_points=12544,
            oversample_ratio=3.0,
            sampler=dict(type='mmdet.MaskPseudoSampler')),
        transformer_decoder=dict(
            init_cfg=None,
            layer_cfg=dict(
                cross_attn_cfg=dict(
                    attn_drop=0.0,
                    batch_first=True,
                    dropout_layer=None,
                    embed_dims=256,
                    num_heads=8,
                    proj_drop=0.0),
                ffn_cfg=dict(
                    act_cfg=dict(inplace=True, type='ReLU'),
                    add_identity=True,
                    dropout_layer=None,
                    embed_dims=256,
                    feedforward_channels=2048,
                    ffn_drop=0.0,
                    num_fcs=2),
                self_attn_cfg=dict(
                    attn_drop=0.0,
                    batch_first=True,
                    dropout_layer=None,
                    embed_dims=256,
                    num_heads=8,
                    proj_drop=0.0)),
            num_layers=9,
            return_intermediate=True),
        type='Mask2FormerHead'),
    test_cfg=dict(mode='whole'),
    train_cfg=dict(),
    type='EncoderDecoder')
num_classes = 150
optim_wrapper = dict(
    clip_grad=dict(max_norm=0.01, norm_type=2),
    optimizer=dict(
        betas=(
            0.9,
            0.999,
        ),
        eps=1e-08,
        lr=0.0001,
        type='AdamW',
        weight_decay=0.05),
    paramwise_cfg=dict(
        custom_keys=dict({
            'absolute_pos_embed':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone':
            dict(decay_mult=1.0, lr_mult=0.1),
            'backbone.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.patch_embed.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.0.blocks.0.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.0.blocks.1.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.0.downsample.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.1.blocks.0.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.1.blocks.1.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.1.downsample.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.0.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.1.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.10.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.11.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.12.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.13.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.14.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.15.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.16.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.17.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.2.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.3.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.4.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.5.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.6.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.7.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.8.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.9.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.downsample.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.3.blocks.0.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.3.blocks.1.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'level_embed':
            dict(decay_mult=0.0, lr_mult=1.0),
            'query_embed':
            dict(decay_mult=0.0, lr_mult=1.0),
            'query_feat':
            dict(decay_mult=0.0, lr_mult=1.0),
            'relative_position_bias_table':
            dict(decay_mult=0.0, lr_mult=0.1)
        }),
        norm_decay_mult=0.0),
    type='OptimWrapper')
optimizer = dict(
    betas=(
        0.9,
        0.999,
    ),
    eps=1e-08,
    lr=0.0001,
    type='AdamW',
    weight_decay=0.05)
param_scheduler = [
    dict(
        begin=0,
        by_epoch=False,
        end=160000,
        eta_min=0,
        power=0.9,
        type='PolyLR'),
]
pretrained = 'https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/swin/swin_base_patch4_window12_384_20220317-55b0104a.pth'
resume = False
test_cfg = dict(type='TestLoop')
test_dataloader = dict(
    batch_size=1,
    dataset=dict(
        data_prefix=dict(
            img_path='images/validation',
            seg_map_path='annotations/validation'),
        data_root='data/ade/ADEChallengeData2016',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(keep_ratio=True, scale=(
                2560,
                640,
            ), type='Resize'),
            dict(reduce_zero_label=True, type='LoadAnnotations'),
            dict(type='PackSegInputs'),
        ],
        type='ADE20KDataset'),
    num_workers=4,
    persistent_workers=True,
    sampler=dict(shuffle=False, type='DefaultSampler'))
test_evaluator = dict(
    iou_metrics=[
        'mIoU',
    ], type='IoUMetric')
test_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(keep_ratio=True, scale=(
        2560,
        640,
    ), type='Resize'),
    dict(reduce_zero_label=True, type='LoadAnnotations'),
    dict(type='PackSegInputs'),
]
train_cfg = dict(
    max_iters=160000, type='IterBasedTrainLoop', val_interval=5000)
train_dataloader = dict(
    batch_size=2,
    dataset=dict(
        data_prefix=dict(
            img_path='images/training', seg_map_path='annotations/training'),
        data_root='data/ade/ADEChallengeData2016',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(reduce_zero_label=True, type='LoadAnnotations'),
            dict(
                max_size=2560,
                resize_type='ResizeShortestEdge',
                scales=[
                    320,
                    384,
                    448,
                    512,
                    576,
                    640,
                    704,
                    768,
                    832,
                    896,
                    960,
                    1024,
                    1088,
                    1152,
                    1216,
                    1280,
                ],
                type='RandomChoiceResize'),
            dict(
                cat_max_ratio=0.75, crop_size=(
                    640,
                    640,
                ), type='RandomCrop'),
            dict(prob=0.5, type='RandomFlip'),
            dict(type='PhotoMetricDistortion'),
            dict(type='PackSegInputs'),
        ],
        type='ADE20KDataset'),
    num_workers=4,
    persistent_workers=True,
    sampler=dict(shuffle=True, type='InfiniteSampler'))
train_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(reduce_zero_label=True, type='LoadAnnotations'),
    dict(
        max_size=2560,
        resize_type='ResizeShortestEdge',
        scales=[
            320,
            384,
            448,
            512,
            576,
            640,
            704,
            768,
            832,
            896,
            960,
            1024,
            1088,
            1152,
            1216,
            1280,
        ],
        type='RandomChoiceResize'),
    dict(cat_max_ratio=0.75, crop_size=(
        640,
        640,
    ), type='RandomCrop'),
    dict(prob=0.5, type='RandomFlip'),
    dict(type='PhotoMetricDistortion'),
    dict(type='PackSegInputs'),
]
tta_model = dict(type='SegTTAModel')
tta_pipeline = [
    dict(backend_args=None, type='LoadImageFromFile'),
    dict(
        transforms=[
            [
                dict(keep_ratio=True, scale_factor=0.5, type='Resize'),
                dict(keep_ratio=True, scale_factor=0.75, type='Resize'),
                dict(keep_ratio=True, scale_factor=1.0, type='Resize'),
                dict(keep_ratio=True, scale_factor=1.25, type='Resize'),
                dict(keep_ratio=True, scale_factor=1.5, type='Resize'),
                dict(keep_ratio=True, scale_factor=1.75, type='Resize'),
            ],
            [
                dict(direction='horizontal', prob=0.0, type='RandomFlip'),
                dict(direction='horizontal', prob=1.0, type='RandomFlip'),
            ],
            [
                dict(type='LoadAnnotations'),
            ],
            [
                dict(type='PackSegInputs'),
            ],
        ],
        type='TestTimeAug'),
]
val_cfg = dict(type='ValLoop')
val_dataloader = dict(
    batch_size=1,
    dataset=dict(
        data_prefix=dict(
            img_path='images/validation',
            seg_map_path='annotations/validation'),
        data_root='data/ade/ADEChallengeData2016',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(keep_ratio=True, scale=(
                2560,
                640,
            ), type='Resize'),
            dict(reduce_zero_label=True, type='LoadAnnotations'),
            dict(type='PackSegInputs'),
        ],
        type='ADE20KDataset'),
    num_workers=4,
    persistent_workers=True,
    sampler=dict(shuffle=False, type='DefaultSampler'))
val_evaluator = dict(
    iou_metrics=[
        'mIoU',
    ], type='IoUMetric')
vis_backends = [
    dict(type='LocalVisBackend'),
]
visualizer = dict(
    name='visualizer',
    type='SegLocalVisualizer',
    vis_backends=[
        dict(type='LocalVisBackend'),
    ])
work_dir = '../corruptions/work_dirs/ade20k/mask2former/mask2former_swin-b-in1k-384x384-pre_8xb2-160k_ade20k-640x640/brightness'

09/21 11:00:25 - mmengine - INFO - Distributed training is not used, all SyncBatchNorm (SyncBN) layers in the model will be automatically reverted to BatchNormXd layers if they are used.
09/21 11:00:26 - mmengine - INFO - Hooks will be executed in the following order:
before_run:
(VERY_HIGH   ) RuntimeInfoHook                    
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
before_train:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_train_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(NORMAL      ) DistSamplerSeedHook                
 -------------------- 
before_train_iter:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_train_iter:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(NORMAL      ) SegVisualizationHook               
(BELOW_NORMAL) LoggerHook                         
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
after_train_epoch:
(NORMAL      ) IterTimerHook                      
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_val:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
before_val_epoch:
(NORMAL      ) IterTimerHook                      
 -------------------- 
before_val_iter:
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_val_iter:
(NORMAL      ) IterTimerHook                      
(NORMAL      ) SegVisualizationHook               
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_val_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
after_val:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
after_train:
(VERY_HIGH   ) RuntimeInfoHook                    
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_test:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
before_test_epoch:
(NORMAL      ) IterTimerHook                      
 -------------------- 
before_test_iter:
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_test_iter:
(NORMAL      ) IterTimerHook                      
(NORMAL      ) SegVisualizationHook               
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_test_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_test:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
after_run:
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
09/21 11:00:27 - mmengine - WARNING - The prefix is not set in metric class IoUMetric.
Loads checkpoint by local backend from path: ../checkpoint_files/ade20k/mask2former/mask2former_swin-b-in1k-384x384-pre_8xb2-160k_ade20k-640x640_20221129_125118-a4a086d2.pth
09/21 11:00:31 - mmengine - INFO - Load checkpoint from ../checkpoint_files/ade20k/mask2former/mask2former_swin-b-in1k-384x384-pre_8xb2-160k_ade20k-640x640_20221129_125118-a4a086d2.pth
09/21 11:02:38 - mmengine - INFO - Iter(test) [  50/2000]    eta: 1:22:43  time: 0.6263  data_time: 0.0019  memory: 17181  
09/21 11:03:09 - mmengine - INFO - Iter(test) [ 100/2000]    eta: 0:50:11  time: 0.6300  data_time: 0.0019  memory: 17180  
09/21 11:03:38 - mmengine - INFO - Iter(test) [ 150/2000]    eta: 0:38:33  time: 0.7633  data_time: 0.0071  memory: 17150  
09/21 11:04:05 - mmengine - INFO - Iter(test) [ 200/2000]    eta: 0:32:09  time: 0.5808  data_time: 0.0018  memory: 17194  
09/21 11:04:34 - mmengine - INFO - Iter(test) [ 250/2000]    eta: 0:28:22  time: 0.4744  data_time: 0.0017  memory: 17202  
09/21 11:04:59 - mmengine - INFO - Iter(test) [ 300/2000]    eta: 0:25:23  time: 0.3941  data_time: 0.0021  memory: 17180  
09/21 11:05:26 - mmengine - INFO - Iter(test) [ 350/2000]    eta: 0:23:13  time: 0.5105  data_time: 0.0017  memory: 17178  
09/21 11:05:50 - mmengine - INFO - Iter(test) [ 400/2000]    eta: 0:21:17  time: 0.4104  data_time: 0.0017  memory: 17177  
09/21 11:06:10 - mmengine - INFO - Iter(test) [ 450/2000]    eta: 0:19:27  time: 0.4150  data_time: 0.0017  memory: 17147  
09/21 11:06:31 - mmengine - INFO - Iter(test) [ 500/2000]    eta: 0:18:02  time: 0.4559  data_time: 0.0018  memory: 17149  
09/21 11:06:54 - mmengine - INFO - Iter(test) [ 550/2000]    eta: 0:16:49  time: 0.4924  data_time: 0.0018  memory: 17179  
09/21 11:07:13 - mmengine - INFO - Iter(test) [ 600/2000]    eta: 0:15:38  time: 0.3924  data_time: 0.0019  memory: 3938  
09/21 11:07:36 - mmengine - INFO - Iter(test) [ 650/2000]    eta: 0:14:42  time: 0.4918  data_time: 0.0016  memory: 17181  
09/21 11:08:02 - mmengine - INFO - Iter(test) [ 700/2000]    eta: 0:13:57  time: 0.4577  data_time: 0.0019  memory: 17177  
09/21 11:08:26 - mmengine - INFO - Iter(test) [ 750/2000]    eta: 0:13:12  time: 0.7458  data_time: 0.0017  memory: 17184  
09/21 11:08:47 - mmengine - INFO - Iter(test) [ 800/2000]    eta: 0:12:23  time: 0.3874  data_time: 0.0019  memory: 17151  
09/21 11:09:06 - mmengine - INFO - Iter(test) [ 850/2000]    eta: 0:11:37  time: 0.3912  data_time: 0.0019  memory: 1428  
09/21 11:09:26 - mmengine - INFO - Iter(test) [ 900/2000]    eta: 0:10:54  time: 0.4070  data_time: 0.0016  memory: 17138  
09/21 11:09:52 - mmengine - INFO - Iter(test) [ 950/2000]    eta: 0:10:20  time: 0.5335  data_time: 0.0018  memory: 17133  
09/21 11:10:12 - mmengine - INFO - Iter(test) [1000/2000]    eta: 0:09:41  time: 0.3728  data_time: 0.0018  memory: 17096  
09/21 11:10:33 - mmengine - INFO - Iter(test) [1050/2000]    eta: 0:09:04  time: 0.4748  data_time: 0.0017  memory: 17182  
09/21 11:10:55 - mmengine - INFO - Iter(test) [1100/2000]    eta: 0:08:30  time: 0.3910  data_time: 0.0031  memory: 17175  
09/21 11:11:15 - mmengine - INFO - Iter(test) [1150/2000]    eta: 0:07:55  time: 0.3817  data_time: 0.0018  memory: 17117  
09/21 11:11:35 - mmengine - INFO - Iter(test) [1200/2000]    eta: 0:07:22  time: 0.3818  data_time: 0.0020  memory: 17113  
09/21 11:11:56 - mmengine - INFO - Iter(test) [1250/2000]    eta: 0:06:51  time: 0.4494  data_time: 0.0018  memory: 17172  
09/21 11:12:15 - mmengine - INFO - Iter(test) [1300/2000]    eta: 0:06:18  time: 0.3847  data_time: 0.0017  memory: 1430  
09/21 11:12:35 - mmengine - INFO - Iter(test) [1350/2000]    eta: 0:05:48  time: 0.3636  data_time: 0.0028  memory: 17110  
09/21 11:12:58 - mmengine - INFO - Iter(test) [1400/2000]    eta: 0:05:20  time: 0.4083  data_time: 0.0017  memory: 17154  
09/21 11:13:17 - mmengine - INFO - Iter(test) [1450/2000]    eta: 0:04:50  time: 0.4537  data_time: 0.0017  memory: 17130  
09/21 11:13:36 - mmengine - INFO - Iter(test) [1500/2000]    eta: 0:04:21  time: 0.3616  data_time: 0.0017  memory: 17125  
09/21 11:13:57 - mmengine - INFO - Iter(test) [1550/2000]    eta: 0:03:54  time: 0.3902  data_time: 0.0017  memory: 17154  
09/21 11:14:16 - mmengine - INFO - Iter(test) [1600/2000]    eta: 0:03:26  time: 0.4077  data_time: 0.0020  memory: 1425  
09/21 11:14:36 - mmengine - INFO - Iter(test) [1650/2000]    eta: 0:02:59  time: 0.3520  data_time: 0.0016  memory: 17192  
09/21 11:15:00 - mmengine - INFO - Iter(test) [1700/2000]    eta: 0:02:33  time: 0.3839  data_time: 0.0041  memory: 17151  
09/21 11:15:21 - mmengine - INFO - Iter(test) [1750/2000]    eta: 0:02:07  time: 0.3802  data_time: 0.0017  memory: 17111  
09/21 11:15:39 - mmengine - INFO - Iter(test) [1800/2000]    eta: 0:01:40  time: 0.3535  data_time: 0.0016  memory: 17114  
09/21 11:15:57 - mmengine - INFO - Iter(test) [1850/2000]    eta: 0:01:15  time: 0.3501  data_time: 0.0017  memory: 1317  
09/21 11:16:15 - mmengine - INFO - Iter(test) [1900/2000]    eta: 0:00:49  time: 0.4362  data_time: 0.0017  memory: 17182  
09/21 11:16:36 - mmengine - INFO - Iter(test) [1950/2000]    eta: 0:00:24  time: 0.3717  data_time: 0.0017  memory: 17197  
09/21 11:16:56 - mmengine - INFO - Iter(test) [2000/2000]    eta: 0:00:00  time: 0.3533  data_time: 0.0016  memory: 17131  
09/21 11:16:57 - mmengine - INFO - per class results:
09/21 11:16:57 - mmengine - INFO - 
+---------------------+-------+-------+
|        Class        |  IoU  |  Acc  |
+---------------------+-------+-------+
|         wall        | 77.98 |  86.3 |
|       building      | 81.68 |  92.2 |
|         sky         | 94.11 | 97.84 |
|        floor        |  83.1 | 89.62 |
|         tree        | 74.87 | 84.98 |
|       ceiling       | 85.12 | 91.54 |
|         road        | 84.08 | 91.59 |
|         bed         | 88.72 | 95.61 |
|      windowpane     | 60.86 | 79.43 |
|        grass        | 70.82 | 83.69 |
|       cabinet       | 59.56 | 75.38 |
|       sidewalk      | 65.89 | 78.45 |
|        person       | 83.32 | 91.51 |
|        earth        |  40.2 | 56.26 |
|         door        | 46.19 | 61.74 |
|        table        | 63.95 | 76.02 |
|       mountain      | 59.46 | 74.88 |
|        plant        | 52.16 | 64.87 |
|       curtain       | 75.73 |  84.8 |
|        chair        | 59.28 | 72.51 |
|         car         | 86.51 | 93.02 |
|        water        | 58.86 | 71.59 |
|       painting      |  72.1 | 88.28 |
|         sofa        | 67.94 | 86.51 |
|        shelf        | 40.16 | 58.98 |
|        house        |  47.8 | 71.03 |
|         sea         |  63.7 | 83.37 |
|        mirror       | 64.47 | 81.62 |
|         rug         | 74.21 | 87.78 |
|        field        | 25.69 | 42.72 |
|       armchair      |  42.2 | 59.16 |
|         seat        | 62.55 |  81.6 |
|        fence        | 47.76 | 63.84 |
|         desk        | 51.18 | 71.09 |
|         rock        | 43.53 | 65.37 |
|       wardrobe      | 57.18 | 68.86 |
|         lamp        | 66.51 | 78.53 |
|       bathtub       | 75.15 | 83.27 |
|       railing       | 38.65 | 57.28 |
|       cushion       | 57.43 | 66.19 |
|         base        | 38.98 | 73.63 |
|         box         | 24.96 | 34.54 |
|        column       | 44.63 | 56.18 |
|      signboard      | 40.45 | 59.04 |
|   chest of drawers  | 40.82 | 60.67 |
|       counter       | 39.06 |  48.9 |
|         sand        | 31.96 | 50.77 |
|         sink        | 72.79 | 81.58 |
|      skyscraper     | 46.43 | 56.68 |
|      fireplace      | 66.94 | 79.84 |
|     refrigerator    | 71.32 | 81.51 |
|      grandstand     | 51.86 | 70.81 |
|         path        | 24.12 | 36.39 |
|        stairs       | 34.63 | 46.96 |
|        runway       | 69.78 | 80.72 |
|         case        | 54.88 | 77.69 |
|      pool table     | 93.63 | 96.38 |
|        pillow       | 61.17 | 80.02 |
|     screen door     | 55.05 | 63.08 |
|       stairway      | 34.15 | 52.91 |
|        river        |  8.75 |  20.6 |
|        bridge       | 70.03 | 83.89 |
|       bookcase      | 29.96 | 58.46 |
|        blind        | 43.52 | 48.16 |
|     coffee table    | 65.87 | 83.53 |
|        toilet       | 87.62 |  92.4 |
|        flower       | 46.07 | 59.94 |
|         book        | 48.03 |  68.1 |
|         hill        |  4.86 |  8.98 |
|        bench        | 39.29 | 55.78 |
|      countertop     | 60.95 | 77.74 |
|        stove        | 77.57 | 88.07 |
|         palm        | 49.52 | 67.87 |
|    kitchen island   |  50.7 | 78.65 |
|       computer      |  69.3 | 80.22 |
|     swivel chair    | 45.19 | 58.85 |
|         boat        | 66.09 | 88.51 |
|         bar         | 58.38 | 70.89 |
|    arcade machine   | 74.04 | 79.95 |
|        hovel        | 10.64 | 15.32 |
|         bus         | 92.74 | 96.48 |
|        towel        | 75.79 | 86.83 |
|        light        | 60.48 | 78.91 |
|        truck        | 41.97 | 60.99 |
|        tower        | 21.99 | 43.68 |
|      chandelier     | 68.42 | 79.59 |
|        awning       | 30.79 | 44.16 |
|     streetlight     | 36.15 | 54.92 |
|        booth        | 42.95 | 60.85 |
| television receiver |  67.8 |  79.6 |
|       airplane      |  66.1 | 74.13 |
|      dirt track     |  2.26 | 12.08 |
|       apparel       | 31.45 |  41.1 |
|         pole        | 28.81 | 42.98 |
|         land        |  6.38 |  7.76 |
|      bannister      | 23.06 | 35.28 |
|      escalator      | 38.63 | 43.85 |
|       ottoman       | 50.15 | 68.33 |
|        bottle       | 40.48 | 61.88 |
|        buffet       | 39.04 | 53.92 |
|        poster       | 29.46 | 40.76 |
|        stage        | 17.53 |  38.3 |
|         van         |  51.3 | 70.67 |
|         ship        | 88.85 | 96.97 |
|       fountain      | 22.53 | 25.57 |
|    conveyer belt    | 48.58 | 64.62 |
|        canopy       | 30.57 | 41.95 |
|        washer       | 71.23 | 74.59 |
|      plaything      | 25.11 | 47.95 |
|    swimming pool    | 55.39 | 67.55 |
|        stool        | 45.54 | 67.37 |
|        barrel       | 61.56 | 74.67 |
|        basket       | 36.09 | 50.98 |
|      waterfall      | 36.19 | 55.03 |
|         tent        |  88.6 | 98.02 |
|         bag         | 19.33 | 31.46 |
|       minibike      | 73.14 | 87.99 |
|        cradle       | 85.84 | 96.86 |
|         oven        | 40.86 | 49.37 |
|         ball        | 50.51 | 57.12 |
|         food        | 62.54 |  78.1 |
|         step        | 18.98 | 26.16 |
|         tank        | 55.55 | 63.97 |
|      trade name     | 32.13 | 41.71 |
|      microwave      | 85.22 | 95.53 |
|         pot         | 44.95 | 53.48 |
|        animal       | 69.36 | 71.83 |
|       bicycle       | 59.92 | 82.74 |
|         lake        | 44.49 | 63.65 |
|      dishwasher     | 69.85 | 84.63 |
|        screen       | 67.92 | 90.04 |
|       blanket       | 17.24 | 20.15 |
|      sculpture      | 63.77 | 86.33 |
|         hood        | 70.52 | 75.02 |
|        sconce       | 45.73 | 67.09 |
|         vase        | 40.71 | 63.14 |
|    traffic light    | 44.54 | 67.02 |
|         tray        | 19.64 | 27.91 |
|        ashcan       | 43.33 | 64.53 |
|         fan         | 64.25 | 83.11 |
|         pier        | 13.77 | 16.71 |
|      crt screen     |  1.02 |  2.71 |
|        plate        | 59.02 | 78.89 |
|       monitor       |  2.11 |  3.09 |
|    bulletin board   | 48.48 | 66.78 |
|        shower       | 11.52 | 21.91 |
|       radiator      | 64.84 | 76.58 |
|        glass        | 18.83 | 21.58 |
|        clock        | 32.36 |  45.1 |
|         flag        | 74.13 | 83.18 |
+---------------------+-------+-------+
09/21 11:16:57 - mmengine - INFO - Iter(test) [2000/2000]    aAcc: 83.4100  mIoU: 51.6300  mAcc: 65.0100  data_time: 0.0027  time: 0.4926
Finished processing corruption type: brightness
Processing corruption type: contrast
09/21 11:19:04 - mmengine - INFO - 
------------------------------------------------------------
System environment:
    sys.platform: linux
    Python: 3.10.13 | packaged by conda-forge | (main, Dec 23 2023, 15:36:39) [GCC 12.3.0]
    CUDA available: True
    MUSA available: False
    numpy_random_seed: 170058228
    GPU 0: Tesla V100-SXM2-32GB
    CUDA_HOME: /opt/bwhpc/common/devel/cuda/11.7
    NVCC: Cuda compilation tools, release 11.7, V11.7.99
    GCC: gcc (GCC) 8.5.0 20210514 (Red Hat 8.5.0-18)
    PyTorch: 1.13.1
    PyTorch compiling details: PyTorch built with:
  - GCC 9.3
  - C++ Version: 201402
  - Intel(R) oneAPI Math Kernel Library Version 2023.1-Product Build 20230303 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v2.6.0 (Git Hash 52b5f107dd9cf10910aaa19cb47f3abf9b349815)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - LAPACK is enabled (usually provided by MKL)
  - NNPACK is enabled
  - CPU capability usage: AVX2
  - CUDA Runtime 11.7
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_61,code=sm_61;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86;-gencode;arch=compute_37,code=compute_37
  - CuDNN 8.5
  - Magma 2.6.1
  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.7, CUDNN_VERSION=8.5.0, CXX_COMPILER=/opt/rh/devtoolset-9/root/usr/bin/c++, CXX_FLAGS= -fabi-version=11 -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -DEDGE_PROFILER_USE_KINETO -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Werror=non-virtual-dtor -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wunused-local-typedefs -Wno-unused-parameter -Wno-unused-function -Wno-unused-result -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Werror=cast-function-type -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.13.1, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, USE_ROCM=OFF, 

    TorchVision: 0.14.1
    OpenCV: 3.4.18
    MMEngine: 0.10.4

Runtime environment:
    cudnn_benchmark: True
    mp_cfg: {'mp_start_method': 'fork', 'opencv_num_threads': 0}
    dist_cfg: {'backend': 'nccl'}
    seed: 170058228
    Distributed launcher: none
    Distributed training: False
    GPU number: 1
------------------------------------------------------------

09/21 11:19:05 - mmengine - INFO - Config:
auto_scale_lr = dict(base_batch_size=16, enable=False)
backbone_embed_multi = dict(decay_mult=0.0, lr_mult=0.1)
backbone_norm_multi = dict(decay_mult=0.0, lr_mult=0.1)
crop_size = (
    640,
    640,
)
custom_keys = dict({
    'absolute_pos_embed':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone':
    dict(decay_mult=1.0, lr_mult=0.1),
    'backbone.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.patch_embed.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.0.blocks.0.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.0.blocks.1.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.0.downsample.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.1.blocks.0.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.1.blocks.1.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.1.downsample.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.0.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.1.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.10.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.11.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.12.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.13.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.14.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.15.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.16.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.17.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.2.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.3.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.4.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.5.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.6.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.7.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.8.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.9.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.downsample.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.3.blocks.0.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.3.blocks.1.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'level_embed':
    dict(decay_mult=0.0, lr_mult=1.0),
    'query_embed':
    dict(decay_mult=0.0, lr_mult=1.0),
    'query_feat':
    dict(decay_mult=0.0, lr_mult=1.0),
    'relative_position_bias_table':
    dict(decay_mult=0.0, lr_mult=0.1)
})
data_root = 'data/ade/ADEChallengeData2016'
dataset_type = 'ADE20KDataset'
default_hooks = dict(
    checkpoint=dict(
        by_epoch=False, interval=5000, save_best='mIoU',
        type='CheckpointHook'),
    logger=dict(interval=50, log_metric_by_epoch=False, type='LoggerHook'),
    param_scheduler=dict(type='ParamSchedulerHook'),
    sampler_seed=dict(type='DistSamplerSeedHook'),
    timer=dict(type='IterTimerHook'),
    visualization=dict(type='SegVisualizationHook'))
default_scope = 'mmseg'
depths = [
    2,
    2,
    18,
    2,
]
embed_multi = dict(decay_mult=0.0, lr_mult=1.0)
env_cfg = dict(
    cudnn_benchmark=True,
    dist_cfg=dict(backend='nccl'),
    mp_cfg=dict(mp_start_method='fork', opencv_num_threads=0))
img_ratios = [
    0.5,
    0.75,
    1.0,
    1.25,
    1.5,
    1.75,
]
launcher = 'none'
load_from = '../checkpoint_files/ade20k/mask2former/mask2former_swin-b-in1k-384x384-pre_8xb2-160k_ade20k-640x640_20221129_125118-a4a086d2.pth'
log_level = 'INFO'
log_processor = dict(by_epoch=False)
model = dict(
    backbone=dict(
        attn_drop_rate=0.0,
        depths=[
            2,
            2,
            18,
            2,
        ],
        drop_path_rate=0.3,
        drop_rate=0.0,
        embed_dims=128,
        frozen_stages=-1,
        init_cfg=dict(
            checkpoint=
            'https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/swin/swin_base_patch4_window12_384_20220317-55b0104a.pth',
            type='Pretrained'),
        mlp_ratio=4,
        num_heads=[
            4,
            8,
            16,
            32,
        ],
        out_indices=(
            0,
            1,
            2,
            3,
        ),
        patch_norm=True,
        pretrain_img_size=384,
        qk_scale=None,
        qkv_bias=True,
        type='SwinTransformer',
        window_size=12,
        with_cp=False),
    data_preprocessor=dict(
        bgr_to_rgb=True,
        corruption='contrast',
        mean=[
            123.675,
            116.28,
            103.53,
        ],
        pad_val=0,
        seg_pad_val=255,
        size=(
            640,
            640,
        ),
        std=[
            58.395,
            57.12,
            57.375,
        ],
        type='SegDataPreProcessor'),
    decode_head=dict(
        align_corners=False,
        enforce_decoder_input_project=False,
        feat_channels=256,
        in_channels=[
            128,
            256,
            512,
            1024,
        ],
        loss_cls=dict(
            class_weight=[
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                0.1,
            ],
            loss_weight=2.0,
            reduction='mean',
            type='mmdet.CrossEntropyLoss',
            use_sigmoid=False),
        loss_dice=dict(
            activate=True,
            eps=1.0,
            loss_weight=5.0,
            naive_dice=True,
            reduction='mean',
            type='mmdet.DiceLoss',
            use_sigmoid=True),
        loss_mask=dict(
            loss_weight=5.0,
            reduction='mean',
            type='mmdet.CrossEntropyLoss',
            use_sigmoid=True),
        num_classes=150,
        num_queries=100,
        num_transformer_feat_level=3,
        out_channels=256,
        pixel_decoder=dict(
            act_cfg=dict(type='ReLU'),
            encoder=dict(
                init_cfg=None,
                layer_cfg=dict(
                    ffn_cfg=dict(
                        act_cfg=dict(inplace=True, type='ReLU'),
                        embed_dims=256,
                        feedforward_channels=1024,
                        ffn_drop=0.0,
                        num_fcs=2),
                    self_attn_cfg=dict(
                        batch_first=True,
                        dropout=0.0,
                        embed_dims=256,
                        im2col_step=64,
                        init_cfg=None,
                        norm_cfg=None,
                        num_heads=8,
                        num_levels=3,
                        num_points=4)),
                num_layers=6),
            init_cfg=None,
            norm_cfg=dict(num_groups=32, type='GN'),
            num_outs=3,
            positional_encoding=dict(normalize=True, num_feats=128),
            type='mmdet.MSDeformAttnPixelDecoder'),
        positional_encoding=dict(normalize=True, num_feats=128),
        strides=[
            4,
            8,
            16,
            32,
        ],
        train_cfg=dict(
            assigner=dict(
                match_costs=[
                    dict(type='mmdet.ClassificationCost', weight=2.0),
                    dict(
                        type='mmdet.CrossEntropyLossCost',
                        use_sigmoid=True,
                        weight=5.0),
                    dict(
                        eps=1.0,
                        pred_act=True,
                        type='mmdet.DiceCost',
                        weight=5.0),
                ],
                type='mmdet.HungarianAssigner'),
            importance_sample_ratio=0.75,
            num_points=12544,
            oversample_ratio=3.0,
            sampler=dict(type='mmdet.MaskPseudoSampler')),
        transformer_decoder=dict(
            init_cfg=None,
            layer_cfg=dict(
                cross_attn_cfg=dict(
                    attn_drop=0.0,
                    batch_first=True,
                    dropout_layer=None,
                    embed_dims=256,
                    num_heads=8,
                    proj_drop=0.0),
                ffn_cfg=dict(
                    act_cfg=dict(inplace=True, type='ReLU'),
                    add_identity=True,
                    dropout_layer=None,
                    embed_dims=256,
                    feedforward_channels=2048,
                    ffn_drop=0.0,
                    num_fcs=2),
                self_attn_cfg=dict(
                    attn_drop=0.0,
                    batch_first=True,
                    dropout_layer=None,
                    embed_dims=256,
                    num_heads=8,
                    proj_drop=0.0)),
            num_layers=9,
            return_intermediate=True),
        type='Mask2FormerHead'),
    test_cfg=dict(mode='whole'),
    train_cfg=dict(),
    type='EncoderDecoder')
num_classes = 150
optim_wrapper = dict(
    clip_grad=dict(max_norm=0.01, norm_type=2),
    optimizer=dict(
        betas=(
            0.9,
            0.999,
        ),
        eps=1e-08,
        lr=0.0001,
        type='AdamW',
        weight_decay=0.05),
    paramwise_cfg=dict(
        custom_keys=dict({
            'absolute_pos_embed':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone':
            dict(decay_mult=1.0, lr_mult=0.1),
            'backbone.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.patch_embed.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.0.blocks.0.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.0.blocks.1.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.0.downsample.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.1.blocks.0.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.1.blocks.1.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.1.downsample.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.0.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.1.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.10.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.11.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.12.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.13.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.14.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.15.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.16.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.17.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.2.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.3.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.4.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.5.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.6.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.7.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.8.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.9.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.downsample.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.3.blocks.0.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.3.blocks.1.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'level_embed':
            dict(decay_mult=0.0, lr_mult=1.0),
            'query_embed':
            dict(decay_mult=0.0, lr_mult=1.0),
            'query_feat':
            dict(decay_mult=0.0, lr_mult=1.0),
            'relative_position_bias_table':
            dict(decay_mult=0.0, lr_mult=0.1)
        }),
        norm_decay_mult=0.0),
    type='OptimWrapper')
optimizer = dict(
    betas=(
        0.9,
        0.999,
    ),
    eps=1e-08,
    lr=0.0001,
    type='AdamW',
    weight_decay=0.05)
param_scheduler = [
    dict(
        begin=0,
        by_epoch=False,
        end=160000,
        eta_min=0,
        power=0.9,
        type='PolyLR'),
]
pretrained = 'https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/swin/swin_base_patch4_window12_384_20220317-55b0104a.pth'
resume = False
test_cfg = dict(type='TestLoop')
test_dataloader = dict(
    batch_size=1,
    dataset=dict(
        data_prefix=dict(
            img_path='images/validation',
            seg_map_path='annotations/validation'),
        data_root='data/ade/ADEChallengeData2016',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(keep_ratio=True, scale=(
                2560,
                640,
            ), type='Resize'),
            dict(reduce_zero_label=True, type='LoadAnnotations'),
            dict(type='PackSegInputs'),
        ],
        type='ADE20KDataset'),
    num_workers=4,
    persistent_workers=True,
    sampler=dict(shuffle=False, type='DefaultSampler'))
test_evaluator = dict(
    iou_metrics=[
        'mIoU',
    ], type='IoUMetric')
test_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(keep_ratio=True, scale=(
        2560,
        640,
    ), type='Resize'),
    dict(reduce_zero_label=True, type='LoadAnnotations'),
    dict(type='PackSegInputs'),
]
train_cfg = dict(
    max_iters=160000, type='IterBasedTrainLoop', val_interval=5000)
train_dataloader = dict(
    batch_size=2,
    dataset=dict(
        data_prefix=dict(
            img_path='images/training', seg_map_path='annotations/training'),
        data_root='data/ade/ADEChallengeData2016',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(reduce_zero_label=True, type='LoadAnnotations'),
            dict(
                max_size=2560,
                resize_type='ResizeShortestEdge',
                scales=[
                    320,
                    384,
                    448,
                    512,
                    576,
                    640,
                    704,
                    768,
                    832,
                    896,
                    960,
                    1024,
                    1088,
                    1152,
                    1216,
                    1280,
                ],
                type='RandomChoiceResize'),
            dict(
                cat_max_ratio=0.75, crop_size=(
                    640,
                    640,
                ), type='RandomCrop'),
            dict(prob=0.5, type='RandomFlip'),
            dict(type='PhotoMetricDistortion'),
            dict(type='PackSegInputs'),
        ],
        type='ADE20KDataset'),
    num_workers=4,
    persistent_workers=True,
    sampler=dict(shuffle=True, type='InfiniteSampler'))
train_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(reduce_zero_label=True, type='LoadAnnotations'),
    dict(
        max_size=2560,
        resize_type='ResizeShortestEdge',
        scales=[
            320,
            384,
            448,
            512,
            576,
            640,
            704,
            768,
            832,
            896,
            960,
            1024,
            1088,
            1152,
            1216,
            1280,
        ],
        type='RandomChoiceResize'),
    dict(cat_max_ratio=0.75, crop_size=(
        640,
        640,
    ), type='RandomCrop'),
    dict(prob=0.5, type='RandomFlip'),
    dict(type='PhotoMetricDistortion'),
    dict(type='PackSegInputs'),
]
tta_model = dict(type='SegTTAModel')
tta_pipeline = [
    dict(backend_args=None, type='LoadImageFromFile'),
    dict(
        transforms=[
            [
                dict(keep_ratio=True, scale_factor=0.5, type='Resize'),
                dict(keep_ratio=True, scale_factor=0.75, type='Resize'),
                dict(keep_ratio=True, scale_factor=1.0, type='Resize'),
                dict(keep_ratio=True, scale_factor=1.25, type='Resize'),
                dict(keep_ratio=True, scale_factor=1.5, type='Resize'),
                dict(keep_ratio=True, scale_factor=1.75, type='Resize'),
            ],
            [
                dict(direction='horizontal', prob=0.0, type='RandomFlip'),
                dict(direction='horizontal', prob=1.0, type='RandomFlip'),
            ],
            [
                dict(type='LoadAnnotations'),
            ],
            [
                dict(type='PackSegInputs'),
            ],
        ],
        type='TestTimeAug'),
]
val_cfg = dict(type='ValLoop')
val_dataloader = dict(
    batch_size=1,
    dataset=dict(
        data_prefix=dict(
            img_path='images/validation',
            seg_map_path='annotations/validation'),
        data_root='data/ade/ADEChallengeData2016',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(keep_ratio=True, scale=(
                2560,
                640,
            ), type='Resize'),
            dict(reduce_zero_label=True, type='LoadAnnotations'),
            dict(type='PackSegInputs'),
        ],
        type='ADE20KDataset'),
    num_workers=4,
    persistent_workers=True,
    sampler=dict(shuffle=False, type='DefaultSampler'))
val_evaluator = dict(
    iou_metrics=[
        'mIoU',
    ], type='IoUMetric')
vis_backends = [
    dict(type='LocalVisBackend'),
]
visualizer = dict(
    name='visualizer',
    type='SegLocalVisualizer',
    vis_backends=[
        dict(type='LocalVisBackend'),
    ])
work_dir = '../corruptions/work_dirs/ade20k/mask2former/mask2former_swin-b-in1k-384x384-pre_8xb2-160k_ade20k-640x640/contrast'

09/21 11:20:11 - mmengine - INFO - Distributed training is not used, all SyncBatchNorm (SyncBN) layers in the model will be automatically reverted to BatchNormXd layers if they are used.
09/21 11:20:11 - mmengine - INFO - Hooks will be executed in the following order:
before_run:
(VERY_HIGH   ) RuntimeInfoHook                    
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
before_train:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_train_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(NORMAL      ) DistSamplerSeedHook                
 -------------------- 
before_train_iter:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_train_iter:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(NORMAL      ) SegVisualizationHook               
(BELOW_NORMAL) LoggerHook                         
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
after_train_epoch:
(NORMAL      ) IterTimerHook                      
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_val:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
before_val_epoch:
(NORMAL      ) IterTimerHook                      
 -------------------- 
before_val_iter:
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_val_iter:
(NORMAL      ) IterTimerHook                      
(NORMAL      ) SegVisualizationHook               
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_val_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
after_val:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
after_train:
(VERY_HIGH   ) RuntimeInfoHook                    
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_test:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
before_test_epoch:
(NORMAL      ) IterTimerHook                      
 -------------------- 
before_test_iter:
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_test_iter:
(NORMAL      ) IterTimerHook                      
(NORMAL      ) SegVisualizationHook               
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_test_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_test:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
after_run:
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
09/21 11:20:13 - mmengine - WARNING - The prefix is not set in metric class IoUMetric.
Loads checkpoint by local backend from path: ../checkpoint_files/ade20k/mask2former/mask2former_swin-b-in1k-384x384-pre_8xb2-160k_ade20k-640x640_20221129_125118-a4a086d2.pth
09/21 11:20:17 - mmengine - INFO - Load checkpoint from ../checkpoint_files/ade20k/mask2former/mask2former_swin-b-in1k-384x384-pre_8xb2-160k_ade20k-640x640_20221129_125118-a4a086d2.pth
09/21 11:22:08 - mmengine - INFO - Iter(test) [  50/2000]    eta: 1:12:07  time: 0.4127  data_time: 0.0019  memory: 17181  
09/21 11:22:28 - mmengine - INFO - Iter(test) [ 100/2000]    eta: 0:41:26  time: 0.3948  data_time: 0.0020  memory: 17180  
09/21 11:22:43 - mmengine - INFO - Iter(test) [ 150/2000]    eta: 0:30:07  time: 0.3056  data_time: 0.0019  memory: 17150  
09/21 11:22:59 - mmengine - INFO - Iter(test) [ 200/2000]    eta: 0:24:19  time: 0.4145  data_time: 0.0021  memory: 17194  
09/21 11:23:16 - mmengine - INFO - Iter(test) [ 250/2000]    eta: 0:20:55  time: 0.2435  data_time: 0.0017  memory: 17202  
09/21 11:23:31 - mmengine - INFO - Iter(test) [ 300/2000]    eta: 0:18:20  time: 0.1532  data_time: 0.0019  memory: 17180  
09/21 11:23:46 - mmengine - INFO - Iter(test) [ 350/2000]    eta: 0:16:25  time: 0.2935  data_time: 0.0019  memory: 17178  
09/21 11:23:57 - mmengine - INFO - Iter(test) [ 400/2000]    eta: 0:14:39  time: 0.1626  data_time: 0.0017  memory: 17177  
09/21 11:24:06 - mmengine - INFO - Iter(test) [ 450/2000]    eta: 0:13:08  time: 0.1977  data_time: 0.0017  memory: 17147  
09/21 11:24:15 - mmengine - INFO - Iter(test) [ 500/2000]    eta: 0:11:56  time: 0.2271  data_time: 0.0018  memory: 17149  
09/21 11:24:25 - mmengine - INFO - Iter(test) [ 550/2000]    eta: 0:10:55  time: 0.2638  data_time: 0.0019  memory: 17179  
09/21 11:24:33 - mmengine - INFO - Iter(test) [ 600/2000]    eta: 0:09:57  time: 0.1490  data_time: 0.0019  memory: 3938  
09/21 11:24:44 - mmengine - INFO - Iter(test) [ 650/2000]    eta: 0:09:15  time: 0.2787  data_time: 0.0016  memory: 17181  
09/21 11:24:57 - mmengine - INFO - Iter(test) [ 700/2000]    eta: 0:08:41  time: 0.2165  data_time: 0.0019  memory: 17177  
09/21 11:25:10 - mmengine - INFO - Iter(test) [ 750/2000]    eta: 0:08:09  time: 0.5714  data_time: 0.0035  memory: 17184  
09/21 11:25:19 - mmengine - INFO - Iter(test) [ 800/2000]    eta: 0:07:32  time: 0.1431  data_time: 0.0019  memory: 17151  
09/21 11:25:27 - mmengine - INFO - Iter(test) [ 850/2000]    eta: 0:06:59  time: 0.2450  data_time: 0.0018  memory: 1428  
09/21 11:25:36 - mmengine - INFO - Iter(test) [ 900/2000]    eta: 0:06:29  time: 0.1956  data_time: 0.0017  memory: 17138  
09/21 11:25:48 - mmengine - INFO - Iter(test) [ 950/2000]    eta: 0:06:05  time: 0.3053  data_time: 0.0018  memory: 17133  
09/21 11:25:56 - mmengine - INFO - Iter(test) [1000/2000]    eta: 0:05:38  time: 0.1388  data_time: 0.0017  memory: 17096  
09/21 11:26:05 - mmengine - INFO - Iter(test) [1050/2000]    eta: 0:05:14  time: 0.2287  data_time: 0.0017  memory: 17182  
09/21 11:26:15 - mmengine - INFO - Iter(test) [1100/2000]    eta: 0:04:53  time: 0.1446  data_time: 0.0018  memory: 17175  
09/21 11:26:23 - mmengine - INFO - Iter(test) [1150/2000]    eta: 0:04:30  time: 0.1453  data_time: 0.0017  memory: 17117  
09/21 11:26:31 - mmengine - INFO - Iter(test) [1200/2000]    eta: 0:04:09  time: 0.1418  data_time: 0.0017  memory: 17113  
09/21 11:26:41 - mmengine - INFO - Iter(test) [1250/2000]    eta: 0:03:50  time: 0.2238  data_time: 0.0017  memory: 17172  
09/21 11:26:48 - mmengine - INFO - Iter(test) [1300/2000]    eta: 0:03:30  time: 0.1460  data_time: 0.0017  memory: 1430  
09/21 11:26:57 - mmengine - INFO - Iter(test) [1350/2000]    eta: 0:03:12  time: 0.1341  data_time: 0.0017  memory: 17110  
09/21 11:27:07 - mmengine - INFO - Iter(test) [1400/2000]    eta: 0:02:55  time: 0.1636  data_time: 0.0017  memory: 17154  
09/21 11:27:14 - mmengine - INFO - Iter(test) [1450/2000]    eta: 0:02:38  time: 0.2022  data_time: 0.0015  memory: 17130  
09/21 11:27:22 - mmengine - INFO - Iter(test) [1500/2000]    eta: 0:02:21  time: 0.1329  data_time: 0.0017  memory: 17125  
09/21 11:27:30 - mmengine - INFO - Iter(test) [1550/2000]    eta: 0:02:05  time: 0.1442  data_time: 0.0017  memory: 17154  
09/21 11:27:37 - mmengine - INFO - Iter(test) [1600/2000]    eta: 0:01:50  time: 0.1393  data_time: 0.0018  memory: 1425  
09/21 11:27:46 - mmengine - INFO - Iter(test) [1650/2000]    eta: 0:01:35  time: 0.1322  data_time: 0.0015  memory: 17192  
09/21 11:27:58 - mmengine - INFO - Iter(test) [1700/2000]    eta: 0:01:21  time: 0.1429  data_time: 0.0019  memory: 17151  
09/21 11:28:06 - mmengine - INFO - Iter(test) [1750/2000]    eta: 0:01:06  time: 0.1419  data_time: 0.0016  memory: 17111  
09/21 11:28:14 - mmengine - INFO - Iter(test) [1800/2000]    eta: 0:00:52  time: 0.1427  data_time: 0.0018  memory: 17114  
09/21 11:28:21 - mmengine - INFO - Iter(test) [1850/2000]    eta: 0:00:39  time: 0.1412  data_time: 0.0018  memory: 1317  
09/21 11:28:29 - mmengine - INFO - Iter(test) [1900/2000]    eta: 0:00:25  time: 0.2055  data_time: 0.0020  memory: 17182  
09/21 11:28:37 - mmengine - INFO - Iter(test) [1950/2000]    eta: 0:00:12  time: 0.1374  data_time: 0.0016  memory: 17197  
09/21 11:28:46 - mmengine - INFO - Iter(test) [2000/2000]    eta: 0:00:00  time: 0.1291  data_time: 0.0016  memory: 17131  
09/21 11:28:47 - mmengine - INFO - per class results:
09/21 11:28:47 - mmengine - INFO - 
+---------------------+-------+-------+
|        Class        |  IoU  |  Acc  |
+---------------------+-------+-------+
|         wall        | 77.34 | 86.45 |
|       building      |  82.0 | 92.36 |
|         sky         | 94.24 | 97.76 |
|        floor        | 82.78 | 89.55 |
|         tree        | 74.71 | 85.29 |
|       ceiling       | 84.58 | 90.88 |
|         road        | 83.49 | 90.34 |
|         bed         | 88.25 | 95.63 |
|      windowpane     | 61.52 |  78.9 |
|        grass        | 67.48 | 81.86 |
|       cabinet       | 57.69 | 72.71 |
|       sidewalk      | 65.87 | 79.12 |
|        person       | 83.32 | 90.53 |
|        earth        | 39.25 | 56.12 |
|         door        | 48.79 | 63.96 |
|        table        | 63.27 | 75.77 |
|       mountain      | 58.14 | 73.54 |
|        plant        | 52.12 | 62.21 |
|       curtain       | 73.65 | 84.55 |
|        chair        | 57.95 | 70.92 |
|         car         | 85.97 | 92.45 |
|        water        | 58.14 | 73.87 |
|       painting      | 70.99 | 88.23 |
|         sofa        | 69.05 | 86.13 |
|        shelf        | 36.33 | 53.28 |
|        house        | 47.15 | 68.55 |
|         sea         | 65.28 | 83.03 |
|        mirror       | 62.18 |  78.2 |
|         rug         | 70.97 | 82.94 |
|        field        | 25.89 | 47.98 |
|       armchair      | 44.53 | 61.92 |
|         seat        |  62.1 | 81.35 |
|        fence        | 47.44 | 64.31 |
|         desk        | 50.57 | 70.41 |
|         rock        | 48.12 | 68.55 |
|       wardrobe      | 51.05 | 68.71 |
|         lamp        | 67.02 | 78.96 |
|       bathtub       | 73.87 | 83.38 |
|       railing       | 38.86 | 58.52 |
|       cushion       | 56.29 | 65.74 |
|         base        | 33.06 | 57.61 |
|         box         | 25.05 | 36.62 |
|        column       | 43.54 | 57.85 |
|      signboard      | 39.63 | 58.69 |
|   chest of drawers  | 37.63 | 57.09 |
|       counter       | 28.92 |  42.9 |
|         sand        | 46.58 |  68.4 |
|         sink        | 72.59 | 81.61 |
|      skyscraper     | 46.57 |  56.9 |
|      fireplace      | 76.81 | 90.02 |
|     refrigerator    | 74.75 |  80.9 |
|      grandstand     | 50.83 | 74.12 |
|         path        | 22.81 | 32.67 |
|        stairs       | 33.15 | 45.15 |
|        runway       | 68.67 |  78.8 |
|         case        | 36.33 | 59.43 |
|      pool table     | 93.77 | 96.25 |
|        pillow       | 59.97 | 78.52 |
|     screen door     | 55.54 | 64.39 |
|       stairway      | 31.57 | 49.79 |
|        river        |  7.82 | 17.42 |
|        bridge       | 73.26 | 84.83 |
|       bookcase      | 27.98 | 51.83 |
|        blind        | 43.49 | 49.73 |
|     coffee table    | 63.44 | 83.08 |
|        toilet       | 87.68 | 91.84 |
|        flower       | 44.63 | 57.48 |
|         book        | 48.77 | 70.65 |
|         hill        |  6.79 | 10.73 |
|        bench        | 43.86 | 58.24 |
|      countertop     | 59.47 | 74.47 |
|        stove        | 77.02 | 87.84 |
|         palm        | 50.82 | 67.74 |
|    kitchen island   | 43.83 | 77.51 |
|       computer      | 69.66 | 81.04 |
|     swivel chair    | 45.05 |  57.8 |
|         boat        | 75.29 | 87.33 |
|         bar         | 56.35 | 67.66 |
|    arcade machine   | 45.75 | 48.62 |
|        hovel        | 10.54 | 15.37 |
|         bus         | 92.56 | 95.84 |
|        towel        | 76.68 | 87.76 |
|        light        | 62.63 | 78.08 |
|        truck        | 40.43 | 60.43 |
|        tower        | 26.14 | 52.45 |
|      chandelier     | 68.59 | 79.57 |
|        awning       | 28.51 | 38.23 |
|     streetlight     | 34.49 |  51.4 |
|        booth        | 36.19 | 66.19 |
| television receiver | 65.27 | 75.77 |
|       airplane      | 64.39 | 73.96 |
|      dirt track     |  2.74 |  21.4 |
|       apparel       | 32.77 | 45.79 |
|         pole        | 27.63 | 40.94 |
|         land        |  6.35 |  8.51 |
|      bannister      | 21.02 | 35.03 |
|      escalator      |  46.1 | 60.31 |
|       ottoman       | 49.33 | 68.06 |
|        bottle       | 42.42 | 69.37 |
|        buffet       | 37.44 | 49.76 |
|        poster       | 28.44 |  40.7 |
|        stage        | 16.96 | 33.25 |
|         van         |  47.9 | 66.38 |
|         ship        | 78.34 | 82.26 |
|       fountain      | 22.15 | 24.96 |
|    conveyer belt    | 63.99 | 86.41 |
|        canopy       | 20.87 | 28.48 |
|        washer       | 68.05 | 72.34 |
|      plaything      | 23.02 | 37.71 |
|    swimming pool    | 41.63 | 44.35 |
|        stool        | 50.18 | 67.59 |
|        barrel       | 59.55 |  74.6 |
|        basket       | 34.01 | 45.19 |
|      waterfall      | 36.63 | 54.16 |
|         tent        |  83.4 | 98.26 |
|         bag         | 18.68 | 27.48 |
|       minibike      | 72.86 | 87.54 |
|        cradle       | 87.29 | 96.55 |
|         oven        | 44.89 | 51.69 |
|         ball        | 40.97 | 45.53 |
|         food        | 64.96 | 81.54 |
|         step        | 14.54 | 23.83 |
|         tank        | 52.32 |  57.8 |
|      trade name     | 29.27 | 38.24 |
|      microwave      | 85.46 | 95.69 |
|         pot         | 42.38 | 51.23 |
|        animal       | 71.01 | 73.92 |
|       bicycle       |  59.8 | 81.89 |
|         lake        | 48.17 | 69.12 |
|      dishwasher     |  67.1 | 77.54 |
|        screen       | 75.36 | 89.65 |
|       blanket       | 19.57 | 23.74 |
|      sculpture      | 53.36 | 78.05 |
|         hood        | 71.54 | 75.42 |
|        sconce       | 50.19 | 65.64 |
|         vase        | 37.97 | 59.69 |
|    traffic light    | 41.36 | 65.69 |
|         tray        | 18.34 | 25.14 |
|        ashcan       | 40.65 | 56.97 |
|         fan         | 64.89 | 81.18 |
|         pier        | 36.94 | 40.71 |
|      crt screen     |  1.11 |  2.97 |
|        plate        | 60.29 | 76.99 |
|       monitor       |  2.08 |  2.96 |
|    bulletin board   | 53.27 | 73.35 |
|        shower       | 13.23 | 20.67 |
|       radiator      |  64.8 | 74.71 |
|        glass        | 18.66 | 21.65 |
|        clock        | 34.32 | 43.03 |
|         flag        | 74.21 | 82.03 |
+---------------------+-------+-------+
09/21 11:28:47 - mmengine - INFO - Iter(test) [2000/2000]    aAcc: 83.0700  mIoU: 51.0400  mAcc: 64.1300  data_time: 0.0024  time: 0.2545
Finished processing corruption type: contrast
Processing corruption type: elastic_transform
09/21 11:31:05 - mmengine - INFO - 
------------------------------------------------------------
System environment:
    sys.platform: linux
    Python: 3.10.13 | packaged by conda-forge | (main, Dec 23 2023, 15:36:39) [GCC 12.3.0]
    CUDA available: True
    MUSA available: False
    numpy_random_seed: 1844725918
    GPU 0: Tesla V100-SXM2-32GB
    CUDA_HOME: /opt/bwhpc/common/devel/cuda/11.7
    NVCC: Cuda compilation tools, release 11.7, V11.7.99
    GCC: gcc (GCC) 8.5.0 20210514 (Red Hat 8.5.0-18)
    PyTorch: 1.13.1
    PyTorch compiling details: PyTorch built with:
  - GCC 9.3
  - C++ Version: 201402
  - Intel(R) oneAPI Math Kernel Library Version 2023.1-Product Build 20230303 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v2.6.0 (Git Hash 52b5f107dd9cf10910aaa19cb47f3abf9b349815)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - LAPACK is enabled (usually provided by MKL)
  - NNPACK is enabled
  - CPU capability usage: AVX2
  - CUDA Runtime 11.7
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_61,code=sm_61;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86;-gencode;arch=compute_37,code=compute_37
  - CuDNN 8.5
  - Magma 2.6.1
  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.7, CUDNN_VERSION=8.5.0, CXX_COMPILER=/opt/rh/devtoolset-9/root/usr/bin/c++, CXX_FLAGS= -fabi-version=11 -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -DEDGE_PROFILER_USE_KINETO -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Werror=non-virtual-dtor -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wunused-local-typedefs -Wno-unused-parameter -Wno-unused-function -Wno-unused-result -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Werror=cast-function-type -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.13.1, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, USE_ROCM=OFF, 

    TorchVision: 0.14.1
    OpenCV: 3.4.18
    MMEngine: 0.10.4

Runtime environment:
    cudnn_benchmark: True
    mp_cfg: {'mp_start_method': 'fork', 'opencv_num_threads': 0}
    dist_cfg: {'backend': 'nccl'}
    seed: 1844725918
    Distributed launcher: none
    Distributed training: False
    GPU number: 1
------------------------------------------------------------

09/21 11:31:05 - mmengine - INFO - Config:
auto_scale_lr = dict(base_batch_size=16, enable=False)
backbone_embed_multi = dict(decay_mult=0.0, lr_mult=0.1)
backbone_norm_multi = dict(decay_mult=0.0, lr_mult=0.1)
crop_size = (
    640,
    640,
)
custom_keys = dict({
    'absolute_pos_embed':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone':
    dict(decay_mult=1.0, lr_mult=0.1),
    'backbone.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.patch_embed.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.0.blocks.0.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.0.blocks.1.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.0.downsample.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.1.blocks.0.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.1.blocks.1.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.1.downsample.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.0.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.1.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.10.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.11.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.12.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.13.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.14.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.15.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.16.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.17.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.2.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.3.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.4.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.5.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.6.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.7.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.8.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.9.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.downsample.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.3.blocks.0.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.3.blocks.1.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'level_embed':
    dict(decay_mult=0.0, lr_mult=1.0),
    'query_embed':
    dict(decay_mult=0.0, lr_mult=1.0),
    'query_feat':
    dict(decay_mult=0.0, lr_mult=1.0),
    'relative_position_bias_table':
    dict(decay_mult=0.0, lr_mult=0.1)
})
data_root = 'data/ade/ADEChallengeData2016'
dataset_type = 'ADE20KDataset'
default_hooks = dict(
    checkpoint=dict(
        by_epoch=False, interval=5000, save_best='mIoU',
        type='CheckpointHook'),
    logger=dict(interval=50, log_metric_by_epoch=False, type='LoggerHook'),
    param_scheduler=dict(type='ParamSchedulerHook'),
    sampler_seed=dict(type='DistSamplerSeedHook'),
    timer=dict(type='IterTimerHook'),
    visualization=dict(type='SegVisualizationHook'))
default_scope = 'mmseg'
depths = [
    2,
    2,
    18,
    2,
]
embed_multi = dict(decay_mult=0.0, lr_mult=1.0)
env_cfg = dict(
    cudnn_benchmark=True,
    dist_cfg=dict(backend='nccl'),
    mp_cfg=dict(mp_start_method='fork', opencv_num_threads=0))
img_ratios = [
    0.5,
    0.75,
    1.0,
    1.25,
    1.5,
    1.75,
]
launcher = 'none'
load_from = '../checkpoint_files/ade20k/mask2former/mask2former_swin-b-in1k-384x384-pre_8xb2-160k_ade20k-640x640_20221129_125118-a4a086d2.pth'
log_level = 'INFO'
log_processor = dict(by_epoch=False)
model = dict(
    backbone=dict(
        attn_drop_rate=0.0,
        depths=[
            2,
            2,
            18,
            2,
        ],
        drop_path_rate=0.3,
        drop_rate=0.0,
        embed_dims=128,
        frozen_stages=-1,
        init_cfg=dict(
            checkpoint=
            'https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/swin/swin_base_patch4_window12_384_20220317-55b0104a.pth',
            type='Pretrained'),
        mlp_ratio=4,
        num_heads=[
            4,
            8,
            16,
            32,
        ],
        out_indices=(
            0,
            1,
            2,
            3,
        ),
        patch_norm=True,
        pretrain_img_size=384,
        qk_scale=None,
        qkv_bias=True,
        type='SwinTransformer',
        window_size=12,
        with_cp=False),
    data_preprocessor=dict(
        bgr_to_rgb=True,
        corruption='elastic_transform',
        mean=[
            123.675,
            116.28,
            103.53,
        ],
        pad_val=0,
        seg_pad_val=255,
        size=(
            640,
            640,
        ),
        std=[
            58.395,
            57.12,
            57.375,
        ],
        type='SegDataPreProcessor'),
    decode_head=dict(
        align_corners=False,
        enforce_decoder_input_project=False,
        feat_channels=256,
        in_channels=[
            128,
            256,
            512,
            1024,
        ],
        loss_cls=dict(
            class_weight=[
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                0.1,
            ],
            loss_weight=2.0,
            reduction='mean',
            type='mmdet.CrossEntropyLoss',
            use_sigmoid=False),
        loss_dice=dict(
            activate=True,
            eps=1.0,
            loss_weight=5.0,
            naive_dice=True,
            reduction='mean',
            type='mmdet.DiceLoss',
            use_sigmoid=True),
        loss_mask=dict(
            loss_weight=5.0,
            reduction='mean',
            type='mmdet.CrossEntropyLoss',
            use_sigmoid=True),
        num_classes=150,
        num_queries=100,
        num_transformer_feat_level=3,
        out_channels=256,
        pixel_decoder=dict(
            act_cfg=dict(type='ReLU'),
            encoder=dict(
                init_cfg=None,
                layer_cfg=dict(
                    ffn_cfg=dict(
                        act_cfg=dict(inplace=True, type='ReLU'),
                        embed_dims=256,
                        feedforward_channels=1024,
                        ffn_drop=0.0,
                        num_fcs=2),
                    self_attn_cfg=dict(
                        batch_first=True,
                        dropout=0.0,
                        embed_dims=256,
                        im2col_step=64,
                        init_cfg=None,
                        norm_cfg=None,
                        num_heads=8,
                        num_levels=3,
                        num_points=4)),
                num_layers=6),
            init_cfg=None,
            norm_cfg=dict(num_groups=32, type='GN'),
            num_outs=3,
            positional_encoding=dict(normalize=True, num_feats=128),
            type='mmdet.MSDeformAttnPixelDecoder'),
        positional_encoding=dict(normalize=True, num_feats=128),
        strides=[
            4,
            8,
            16,
            32,
        ],
        train_cfg=dict(
            assigner=dict(
                match_costs=[
                    dict(type='mmdet.ClassificationCost', weight=2.0),
                    dict(
                        type='mmdet.CrossEntropyLossCost',
                        use_sigmoid=True,
                        weight=5.0),
                    dict(
                        eps=1.0,
                        pred_act=True,
                        type='mmdet.DiceCost',
                        weight=5.0),
                ],
                type='mmdet.HungarianAssigner'),
            importance_sample_ratio=0.75,
            num_points=12544,
            oversample_ratio=3.0,
            sampler=dict(type='mmdet.MaskPseudoSampler')),
        transformer_decoder=dict(
            init_cfg=None,
            layer_cfg=dict(
                cross_attn_cfg=dict(
                    attn_drop=0.0,
                    batch_first=True,
                    dropout_layer=None,
                    embed_dims=256,
                    num_heads=8,
                    proj_drop=0.0),
                ffn_cfg=dict(
                    act_cfg=dict(inplace=True, type='ReLU'),
                    add_identity=True,
                    dropout_layer=None,
                    embed_dims=256,
                    feedforward_channels=2048,
                    ffn_drop=0.0,
                    num_fcs=2),
                self_attn_cfg=dict(
                    attn_drop=0.0,
                    batch_first=True,
                    dropout_layer=None,
                    embed_dims=256,
                    num_heads=8,
                    proj_drop=0.0)),
            num_layers=9,
            return_intermediate=True),
        type='Mask2FormerHead'),
    test_cfg=dict(mode='whole'),
    train_cfg=dict(),
    type='EncoderDecoder')
num_classes = 150
optim_wrapper = dict(
    clip_grad=dict(max_norm=0.01, norm_type=2),
    optimizer=dict(
        betas=(
            0.9,
            0.999,
        ),
        eps=1e-08,
        lr=0.0001,
        type='AdamW',
        weight_decay=0.05),
    paramwise_cfg=dict(
        custom_keys=dict({
            'absolute_pos_embed':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone':
            dict(decay_mult=1.0, lr_mult=0.1),
            'backbone.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.patch_embed.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.0.blocks.0.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.0.blocks.1.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.0.downsample.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.1.blocks.0.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.1.blocks.1.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.1.downsample.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.0.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.1.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.10.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.11.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.12.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.13.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.14.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.15.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.16.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.17.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.2.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.3.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.4.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.5.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.6.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.7.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.8.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.9.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.downsample.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.3.blocks.0.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.3.blocks.1.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'level_embed':
            dict(decay_mult=0.0, lr_mult=1.0),
            'query_embed':
            dict(decay_mult=0.0, lr_mult=1.0),
            'query_feat':
            dict(decay_mult=0.0, lr_mult=1.0),
            'relative_position_bias_table':
            dict(decay_mult=0.0, lr_mult=0.1)
        }),
        norm_decay_mult=0.0),
    type='OptimWrapper')
optimizer = dict(
    betas=(
        0.9,
        0.999,
    ),
    eps=1e-08,
    lr=0.0001,
    type='AdamW',
    weight_decay=0.05)
param_scheduler = [
    dict(
        begin=0,
        by_epoch=False,
        end=160000,
        eta_min=0,
        power=0.9,
        type='PolyLR'),
]
pretrained = 'https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/swin/swin_base_patch4_window12_384_20220317-55b0104a.pth'
resume = False
test_cfg = dict(type='TestLoop')
test_dataloader = dict(
    batch_size=1,
    dataset=dict(
        data_prefix=dict(
            img_path='images/validation',
            seg_map_path='annotations/validation'),
        data_root='data/ade/ADEChallengeData2016',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(keep_ratio=True, scale=(
                2560,
                640,
            ), type='Resize'),
            dict(reduce_zero_label=True, type='LoadAnnotations'),
            dict(type='PackSegInputs'),
        ],
        type='ADE20KDataset'),
    num_workers=4,
    persistent_workers=True,
    sampler=dict(shuffle=False, type='DefaultSampler'))
test_evaluator = dict(
    iou_metrics=[
        'mIoU',
    ], type='IoUMetric')
test_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(keep_ratio=True, scale=(
        2560,
        640,
    ), type='Resize'),
    dict(reduce_zero_label=True, type='LoadAnnotations'),
    dict(type='PackSegInputs'),
]
train_cfg = dict(
    max_iters=160000, type='IterBasedTrainLoop', val_interval=5000)
train_dataloader = dict(
    batch_size=2,
    dataset=dict(
        data_prefix=dict(
            img_path='images/training', seg_map_path='annotations/training'),
        data_root='data/ade/ADEChallengeData2016',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(reduce_zero_label=True, type='LoadAnnotations'),
            dict(
                max_size=2560,
                resize_type='ResizeShortestEdge',
                scales=[
                    320,
                    384,
                    448,
                    512,
                    576,
                    640,
                    704,
                    768,
                    832,
                    896,
                    960,
                    1024,
                    1088,
                    1152,
                    1216,
                    1280,
                ],
                type='RandomChoiceResize'),
            dict(
                cat_max_ratio=0.75, crop_size=(
                    640,
                    640,
                ), type='RandomCrop'),
            dict(prob=0.5, type='RandomFlip'),
            dict(type='PhotoMetricDistortion'),
            dict(type='PackSegInputs'),
        ],
        type='ADE20KDataset'),
    num_workers=4,
    persistent_workers=True,
    sampler=dict(shuffle=True, type='InfiniteSampler'))
train_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(reduce_zero_label=True, type='LoadAnnotations'),
    dict(
        max_size=2560,
        resize_type='ResizeShortestEdge',
        scales=[
            320,
            384,
            448,
            512,
            576,
            640,
            704,
            768,
            832,
            896,
            960,
            1024,
            1088,
            1152,
            1216,
            1280,
        ],
        type='RandomChoiceResize'),
    dict(cat_max_ratio=0.75, crop_size=(
        640,
        640,
    ), type='RandomCrop'),
    dict(prob=0.5, type='RandomFlip'),
    dict(type='PhotoMetricDistortion'),
    dict(type='PackSegInputs'),
]
tta_model = dict(type='SegTTAModel')
tta_pipeline = [
    dict(backend_args=None, type='LoadImageFromFile'),
    dict(
        transforms=[
            [
                dict(keep_ratio=True, scale_factor=0.5, type='Resize'),
                dict(keep_ratio=True, scale_factor=0.75, type='Resize'),
                dict(keep_ratio=True, scale_factor=1.0, type='Resize'),
                dict(keep_ratio=True, scale_factor=1.25, type='Resize'),
                dict(keep_ratio=True, scale_factor=1.5, type='Resize'),
                dict(keep_ratio=True, scale_factor=1.75, type='Resize'),
            ],
            [
                dict(direction='horizontal', prob=0.0, type='RandomFlip'),
                dict(direction='horizontal', prob=1.0, type='RandomFlip'),
            ],
            [
                dict(type='LoadAnnotations'),
            ],
            [
                dict(type='PackSegInputs'),
            ],
        ],
        type='TestTimeAug'),
]
val_cfg = dict(type='ValLoop')
val_dataloader = dict(
    batch_size=1,
    dataset=dict(
        data_prefix=dict(
            img_path='images/validation',
            seg_map_path='annotations/validation'),
        data_root='data/ade/ADEChallengeData2016',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(keep_ratio=True, scale=(
                2560,
                640,
            ), type='Resize'),
            dict(reduce_zero_label=True, type='LoadAnnotations'),
            dict(type='PackSegInputs'),
        ],
        type='ADE20KDataset'),
    num_workers=4,
    persistent_workers=True,
    sampler=dict(shuffle=False, type='DefaultSampler'))
val_evaluator = dict(
    iou_metrics=[
        'mIoU',
    ], type='IoUMetric')
vis_backends = [
    dict(type='LocalVisBackend'),
]
visualizer = dict(
    name='visualizer',
    type='SegLocalVisualizer',
    vis_backends=[
        dict(type='LocalVisBackend'),
    ])
work_dir = '../corruptions/work_dirs/ade20k/mask2former/mask2former_swin-b-in1k-384x384-pre_8xb2-160k_ade20k-640x640/elastic_transform'

09/21 11:32:12 - mmengine - INFO - Distributed training is not used, all SyncBatchNorm (SyncBN) layers in the model will be automatically reverted to BatchNormXd layers if they are used.
09/21 11:32:12 - mmengine - INFO - Hooks will be executed in the following order:
before_run:
(VERY_HIGH   ) RuntimeInfoHook                    
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
before_train:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_train_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(NORMAL      ) DistSamplerSeedHook                
 -------------------- 
before_train_iter:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_train_iter:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(NORMAL      ) SegVisualizationHook               
(BELOW_NORMAL) LoggerHook                         
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
after_train_epoch:
(NORMAL      ) IterTimerHook                      
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_val:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
before_val_epoch:
(NORMAL      ) IterTimerHook                      
 -------------------- 
before_val_iter:
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_val_iter:
(NORMAL      ) IterTimerHook                      
(NORMAL      ) SegVisualizationHook               
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_val_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
after_val:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
after_train:
(VERY_HIGH   ) RuntimeInfoHook                    
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_test:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
before_test_epoch:
(NORMAL      ) IterTimerHook                      
 -------------------- 
before_test_iter:
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_test_iter:
(NORMAL      ) IterTimerHook                      
(NORMAL      ) SegVisualizationHook               
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_test_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_test:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
after_run:
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
09/21 11:32:13 - mmengine - WARNING - The prefix is not set in metric class IoUMetric.
Loads checkpoint by local backend from path: ../checkpoint_files/ade20k/mask2former/mask2former_swin-b-in1k-384x384-pre_8xb2-160k_ade20k-640x640_20221129_125118-a4a086d2.pth
09/21 11:32:17 - mmengine - INFO - Load checkpoint from ../checkpoint_files/ade20k/mask2former/mask2former_swin-b-in1k-384x384-pre_8xb2-160k_ade20k-640x640_20221129_125118-a4a086d2.pth
09/21 11:35:27 - mmengine - INFO - Iter(test) [  50/2000]    eta: 2:03:36  time: 2.2202  data_time: 0.0069  memory: 17181  
09/21 11:37:11 - mmengine - INFO - Iter(test) [ 100/2000]    eta: 1:32:54  time: 2.0466  data_time: 0.0020  memory: 17180  
09/21 11:38:50 - mmengine - INFO - Iter(test) [ 150/2000]    eta: 1:20:45  time: 1.9334  data_time: 0.0019  memory: 17150  
09/21 11:40:27 - mmengine - INFO - Iter(test) [ 200/2000]    eta: 1:13:27  time: 1.9587  data_time: 0.0029  memory: 17194  
09/21 11:42:01 - mmengine - INFO - Iter(test) [ 250/2000]    eta: 1:08:05  time: 1.7980  data_time: 0.0028  memory: 17202  
09/21 11:43:31 - mmengine - INFO - Iter(test) [ 300/2000]    eta: 1:03:42  time: 1.7602  data_time: 0.0019  memory: 17180  
09/21 11:45:05 - mmengine - INFO - Iter(test) [ 350/2000]    eta: 1:00:21  time: 1.7996  data_time: 0.0023  memory: 17178  
09/21 11:46:34 - mmengine - INFO - Iter(test) [ 400/2000]    eta: 0:57:07  time: 1.7591  data_time: 0.0023  memory: 17177  
09/21 11:47:54 - mmengine - INFO - Iter(test) [ 450/2000]    eta: 0:53:48  time: 1.6384  data_time: 0.0037  memory: 17147  
09/21 11:49:24 - mmengine - INFO - Iter(test) [ 500/2000]    eta: 0:51:20  time: 1.9067  data_time: 0.0017  memory: 17149  
09/21 11:50:57 - mmengine - INFO - Iter(test) [ 550/2000]    eta: 0:49:13  time: 1.8985  data_time: 0.0018  memory: 17179  
09/21 11:52:22 - mmengine - INFO - Iter(test) [ 600/2000]    eta: 0:46:52  time: 1.7580  data_time: 0.0019  memory: 3938  
09/21 11:53:51 - mmengine - INFO - Iter(test) [ 650/2000]    eta: 0:44:47  time: 1.8368  data_time: 0.0018  memory: 17181  
09/21 11:55:27 - mmengine - INFO - Iter(test) [ 700/2000]    eta: 0:43:00  time: 1.8421  data_time: 0.0028  memory: 17177  
09/21 11:57:05 - mmengine - INFO - Iter(test) [ 750/2000]    eta: 0:41:19  time: 2.0595  data_time: 0.0024  memory: 17184  
09/21 11:58:28 - mmengine - INFO - Iter(test) [ 800/2000]    eta: 0:39:15  time: 1.7771  data_time: 0.0058  memory: 17151  
09/21 11:59:55 - mmengine - INFO - Iter(test) [ 850/2000]    eta: 0:37:22  time: 1.7600  data_time: 0.0049  memory: 1428  
09/21 12:01:17 - mmengine - INFO - Iter(test) [ 900/2000]    eta: 0:35:26  time: 1.5929  data_time: 0.0018  memory: 17138  
09/21 12:02:50 - mmengine - INFO - Iter(test) [ 950/2000]    eta: 0:33:45  time: 1.9010  data_time: 0.0020  memory: 17133  
09/21 12:04:14 - mmengine - INFO - Iter(test) [1000/2000]    eta: 0:31:56  time: 1.6753  data_time: 0.0023  memory: 17096  
09/21 12:05:43 - mmengine - INFO - Iter(test) [1050/2000]    eta: 0:30:15  time: 1.8570  data_time: 0.0018  memory: 17182  
09/21 12:07:14 - mmengine - INFO - Iter(test) [1100/2000]    eta: 0:28:35  time: 1.6974  data_time: 0.0019  memory: 17175  
09/21 12:08:39 - mmengine - INFO - Iter(test) [1150/2000]    eta: 0:26:52  time: 1.7128  data_time: 0.0023  memory: 17117  
09/21 12:10:09 - mmengine - INFO - Iter(test) [1200/2000]    eta: 0:25:13  time: 1.6712  data_time: 0.0019  memory: 17113  
09/21 12:11:35 - mmengine - INFO - Iter(test) [1250/2000]    eta: 0:23:34  time: 1.7298  data_time: 0.0017  memory: 17172  
09/21 12:12:55 - mmengine - INFO - Iter(test) [1300/2000]    eta: 0:21:52  time: 1.7241  data_time: 0.0026  memory: 1430  
09/21 12:14:21 - mmengine - INFO - Iter(test) [1350/2000]    eta: 0:20:15  time: 1.5894  data_time: 0.0018  memory: 17110  
09/21 12:15:50 - mmengine - INFO - Iter(test) [1400/2000]    eta: 0:18:39  time: 1.7882  data_time: 0.0019  memory: 17154  
09/21 12:17:13 - mmengine - INFO - Iter(test) [1450/2000]    eta: 0:17:02  time: 1.8267  data_time: 0.0030  memory: 17130  
09/21 12:18:36 - mmengine - INFO - Iter(test) [1500/2000]    eta: 0:15:26  time: 1.5889  data_time: 0.0019  memory: 17125  
09/21 12:20:06 - mmengine - INFO - Iter(test) [1550/2000]    eta: 0:13:52  time: 1.7510  data_time: 0.0028  memory: 17154  
09/21 12:21:36 - mmengine - INFO - Iter(test) [1600/2000]    eta: 0:12:19  time: 1.7074  data_time: 0.0022  memory: 1425  
09/21 12:23:08 - mmengine - INFO - Iter(test) [1650/2000]    eta: 0:10:46  time: 1.6137  data_time: 0.0382  memory: 17192  
09/21 12:24:39 - mmengine - INFO - Iter(test) [1700/2000]    eta: 0:09:14  time: 1.7021  data_time: 0.0019  memory: 17151  
09/21 12:26:06 - mmengine - INFO - Iter(test) [1750/2000]    eta: 0:07:41  time: 1.6713  data_time: 0.0026  memory: 17111  
09/21 12:27:22 - mmengine - INFO - Iter(test) [1800/2000]    eta: 0:06:07  time: 1.7191  data_time: 0.0020  memory: 17114  
09/21 12:28:48 - mmengine - INFO - Iter(test) [1850/2000]    eta: 0:04:34  time: 1.6945  data_time: 0.0019  memory: 1317  
09/21 12:30:14 - mmengine - INFO - Iter(test) [1900/2000]    eta: 0:03:02  time: 1.7140  data_time: 0.0022  memory: 17182  
09/21 12:31:46 - mmengine - INFO - Iter(test) [1950/2000]    eta: 0:01:31  time: 1.6597  data_time: 0.0041  memory: 17197  
09/21 12:33:09 - mmengine - INFO - Iter(test) [2000/2000]    eta: 0:00:00  time: 1.5307  data_time: 0.0017  memory: 17131  
09/21 12:33:10 - mmengine - INFO - per class results:
09/21 12:33:10 - mmengine - INFO - 
+---------------------+-------+-------+
|        Class        |  IoU  |  Acc  |
+---------------------+-------+-------+
|         wall        | 65.21 | 77.22 |
|       building      |  75.4 | 88.53 |
|         sky         | 85.86 | 92.99 |
|        floor        | 71.74 | 82.25 |
|         tree        |  66.2 | 79.67 |
|       ceiling       | 72.54 | 83.57 |
|         road        | 77.09 | 87.27 |
|         bed         | 77.71 |  88.7 |
|      windowpane     | 49.79 | 69.29 |
|        grass        | 64.28 | 77.91 |
|       cabinet       |  52.1 | 69.31 |
|       sidewalk      | 53.59 | 68.39 |
|        person       | 65.71 | 78.88 |
|        earth        | 36.87 | 52.73 |
|         door        | 38.89 | 53.21 |
|        table        |  47.2 | 63.99 |
|       mountain      | 51.44 | 72.29 |
|        plant        | 46.32 | 59.58 |
|       curtain       | 58.57 | 74.15 |
|        chair        | 42.68 | 57.73 |
|         car         | 67.65 | 80.64 |
|        water        | 53.62 | 66.57 |
|       painting      | 50.07 | 68.84 |
|         sofa        | 57.63 |  78.9 |
|        shelf        | 32.32 | 51.26 |
|        house        | 53.12 | 70.14 |
|         sea         | 57.36 | 78.77 |
|        mirror       | 54.64 | 75.46 |
|         rug         | 56.44 | 73.77 |
|        field        | 26.34 | 43.38 |
|       armchair      | 35.52 |  51.3 |
|         seat        | 51.74 | 77.51 |
|        fence        |  37.8 | 54.46 |
|         desk        | 42.32 | 63.34 |
|         rock        | 38.59 |  58.8 |
|       wardrobe      |  49.7 | 61.55 |
|         lamp        | 33.89 | 51.75 |
|       bathtub       | 62.14 | 74.82 |
|       railing       | 31.56 | 50.84 |
|       cushion       | 42.08 | 54.42 |
|         base        | 32.79 | 65.77 |
|         box         | 20.58 | 31.56 |
|        column       | 28.01 | 45.06 |
|      signboard      | 24.58 | 41.99 |
|   chest of drawers  | 33.15 | 48.94 |
|       counter       | 29.31 | 36.23 |
|         sand        | 40.18 | 62.67 |
|         sink        | 53.53 | 66.66 |
|      skyscraper     | 43.12 | 54.76 |
|      fireplace      | 63.45 |  81.9 |
|     refrigerator    | 65.43 | 73.35 |
|      grandstand     | 37.63 | 67.45 |
|         path        | 19.03 | 30.74 |
|        stairs       | 22.79 | 30.64 |
|        runway       | 61.75 | 66.68 |
|         case        | 50.54 |  69.2 |
|      pool table     |  81.0 | 88.28 |
|        pillow       |  46.3 |  65.8 |
|     screen door     | 52.19 | 63.09 |
|       stairway      | 28.47 | 47.01 |
|        river        |  9.07 | 20.96 |
|        bridge       | 60.16 | 76.85 |
|       bookcase      | 26.28 | 47.58 |
|        blind        | 33.62 | 38.59 |
|     coffee table    | 53.46 |  71.6 |
|        toilet       | 64.02 | 76.42 |
|        flower       | 32.94 | 47.17 |
|         book        | 34.37 | 55.82 |
|         hill        |  3.65 |  7.72 |
|        bench        | 37.19 | 49.17 |
|      countertop     |  43.9 | 61.44 |
|        stove        | 63.01 | 77.12 |
|         palm        | 36.49 | 53.85 |
|    kitchen island   |  33.2 |  60.5 |
|       computer      | 62.21 | 78.66 |
|     swivel chair    | 31.07 | 47.18 |
|         boat        | 58.44 | 82.75 |
|         bar         | 41.81 | 55.32 |
|    arcade machine   | 75.24 | 88.11 |
|        hovel        | 13.45 | 14.79 |
|         bus         |  80.3 | 91.45 |
|        towel        | 53.89 | 69.82 |
|        light        | 19.17 | 33.94 |
|        truck        | 31.13 | 52.93 |
|        tower        | 23.87 | 49.96 |
|      chandelier     | 48.18 | 64.23 |
|        awning       | 22.05 | 32.66 |
|     streetlight     |  9.81 | 19.69 |
|        booth        | 35.53 |  60.4 |
| television receiver | 52.31 |  68.1 |
|       airplane      |  49.5 |  65.5 |
|      dirt track     |  1.81 | 11.06 |
|       apparel       | 30.72 | 54.26 |
|         pole        | 13.07 | 22.55 |
|         land        |  4.35 |  5.75 |
|      bannister      | 14.06 |  25.5 |
|      escalator      | 43.95 | 59.11 |
|       ottoman       | 37.33 | 60.43 |
|        bottle       | 31.52 | 59.83 |
|        buffet       | 33.18 | 45.15 |
|        poster       | 23.51 | 36.64 |
|        stage        | 12.45 | 26.96 |
|         van         | 40.25 | 59.04 |
|         ship        | 77.95 | 94.33 |
|       fountain      | 38.29 | 41.48 |
|    conveyer belt    |  65.2 | 82.06 |
|        canopy       | 23.87 | 38.21 |
|        washer       | 58.72 |  68.7 |
|      plaything      | 18.83 |  38.2 |
|    swimming pool    | 52.19 | 58.18 |
|        stool        | 26.19 | 46.67 |
|        barrel       | 62.62 |  89.5 |
|        basket       | 26.08 | 37.81 |
|      waterfall      | 47.83 | 72.23 |
|         tent        | 79.22 | 91.15 |
|         bag         | 13.76 | 24.15 |
|       minibike      | 54.13 | 71.52 |
|        cradle       | 70.62 | 88.34 |
|         oven        | 38.41 | 52.32 |
|         ball        | 39.43 | 51.58 |
|         food        | 53.15 |  69.8 |
|         step        | 15.61 | 21.77 |
|         tank        | 51.62 | 62.09 |
|      trade name     |  21.3 | 30.01 |
|      microwave      | 72.57 | 86.78 |
|         pot         | 25.18 | 35.01 |
|        animal       | 57.05 | 63.57 |
|       bicycle       | 36.11 | 66.01 |
|         lake        | 45.38 | 63.07 |
|      dishwasher     | 53.96 | 68.14 |
|        screen       | 52.48 | 81.29 |
|       blanket       | 19.89 | 24.31 |
|      sculpture      | 42.76 | 71.59 |
|         hood        | 43.39 | 60.39 |
|        sconce       | 20.28 | 35.59 |
|         vase        | 19.95 | 40.79 |
|    traffic light    | 22.19 | 40.71 |
|         tray        | 11.77 | 18.65 |
|        ashcan       | 24.55 | 47.21 |
|         fan         | 26.71 | 44.13 |
|         pier        | 37.15 | 41.43 |
|      crt screen     |  0.73 |  1.98 |
|        plate        | 39.94 | 59.71 |
|       monitor       |  1.58 |  2.12 |
|    bulletin board   | 35.99 | 63.35 |
|        shower       |  4.58 | 11.74 |
|       radiator      | 48.75 | 61.29 |
|        glass        | 12.45 | 15.42 |
|        clock        | 14.88 | 24.69 |
|         flag        | 30.79 | 40.74 |
+---------------------+-------+-------+
09/21 12:33:10 - mmengine - INFO - Iter(test) [2000/2000]    aAcc: 76.1800  mIoU: 41.5300  mAcc: 56.5900  data_time: 0.0048  time: 1.8256
Finished processing corruption type: elastic_transform
Processing corruption type: pixelate
09/21 12:35:18 - mmengine - INFO - 
------------------------------------------------------------
System environment:
    sys.platform: linux
    Python: 3.10.13 | packaged by conda-forge | (main, Dec 23 2023, 15:36:39) [GCC 12.3.0]
    CUDA available: True
    MUSA available: False
    numpy_random_seed: 2920121
    GPU 0: Tesla V100-SXM2-32GB
    CUDA_HOME: /opt/bwhpc/common/devel/cuda/11.7
    NVCC: Cuda compilation tools, release 11.7, V11.7.99
    GCC: gcc (GCC) 8.5.0 20210514 (Red Hat 8.5.0-18)
    PyTorch: 1.13.1
    PyTorch compiling details: PyTorch built with:
  - GCC 9.3
  - C++ Version: 201402
  - Intel(R) oneAPI Math Kernel Library Version 2023.1-Product Build 20230303 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v2.6.0 (Git Hash 52b5f107dd9cf10910aaa19cb47f3abf9b349815)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - LAPACK is enabled (usually provided by MKL)
  - NNPACK is enabled
  - CPU capability usage: AVX2
  - CUDA Runtime 11.7
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_61,code=sm_61;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86;-gencode;arch=compute_37,code=compute_37
  - CuDNN 8.5
  - Magma 2.6.1
  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.7, CUDNN_VERSION=8.5.0, CXX_COMPILER=/opt/rh/devtoolset-9/root/usr/bin/c++, CXX_FLAGS= -fabi-version=11 -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -DEDGE_PROFILER_USE_KINETO -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Werror=non-virtual-dtor -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wunused-local-typedefs -Wno-unused-parameter -Wno-unused-function -Wno-unused-result -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Werror=cast-function-type -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.13.1, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, USE_ROCM=OFF, 

    TorchVision: 0.14.1
    OpenCV: 3.4.18
    MMEngine: 0.10.4

Runtime environment:
    cudnn_benchmark: True
    mp_cfg: {'mp_start_method': 'fork', 'opencv_num_threads': 0}
    dist_cfg: {'backend': 'nccl'}
    seed: 2920121
    Distributed launcher: none
    Distributed training: False
    GPU number: 1
------------------------------------------------------------

09/21 12:35:18 - mmengine - INFO - Config:
auto_scale_lr = dict(base_batch_size=16, enable=False)
backbone_embed_multi = dict(decay_mult=0.0, lr_mult=0.1)
backbone_norm_multi = dict(decay_mult=0.0, lr_mult=0.1)
crop_size = (
    640,
    640,
)
custom_keys = dict({
    'absolute_pos_embed':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone':
    dict(decay_mult=1.0, lr_mult=0.1),
    'backbone.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.patch_embed.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.0.blocks.0.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.0.blocks.1.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.0.downsample.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.1.blocks.0.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.1.blocks.1.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.1.downsample.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.0.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.1.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.10.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.11.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.12.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.13.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.14.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.15.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.16.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.17.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.2.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.3.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.4.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.5.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.6.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.7.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.8.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.9.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.downsample.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.3.blocks.0.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.3.blocks.1.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'level_embed':
    dict(decay_mult=0.0, lr_mult=1.0),
    'query_embed':
    dict(decay_mult=0.0, lr_mult=1.0),
    'query_feat':
    dict(decay_mult=0.0, lr_mult=1.0),
    'relative_position_bias_table':
    dict(decay_mult=0.0, lr_mult=0.1)
})
data_root = 'data/ade/ADEChallengeData2016'
dataset_type = 'ADE20KDataset'
default_hooks = dict(
    checkpoint=dict(
        by_epoch=False, interval=5000, save_best='mIoU',
        type='CheckpointHook'),
    logger=dict(interval=50, log_metric_by_epoch=False, type='LoggerHook'),
    param_scheduler=dict(type='ParamSchedulerHook'),
    sampler_seed=dict(type='DistSamplerSeedHook'),
    timer=dict(type='IterTimerHook'),
    visualization=dict(type='SegVisualizationHook'))
default_scope = 'mmseg'
depths = [
    2,
    2,
    18,
    2,
]
embed_multi = dict(decay_mult=0.0, lr_mult=1.0)
env_cfg = dict(
    cudnn_benchmark=True,
    dist_cfg=dict(backend='nccl'),
    mp_cfg=dict(mp_start_method='fork', opencv_num_threads=0))
img_ratios = [
    0.5,
    0.75,
    1.0,
    1.25,
    1.5,
    1.75,
]
launcher = 'none'
load_from = '../checkpoint_files/ade20k/mask2former/mask2former_swin-b-in1k-384x384-pre_8xb2-160k_ade20k-640x640_20221129_125118-a4a086d2.pth'
log_level = 'INFO'
log_processor = dict(by_epoch=False)
model = dict(
    backbone=dict(
        attn_drop_rate=0.0,
        depths=[
            2,
            2,
            18,
            2,
        ],
        drop_path_rate=0.3,
        drop_rate=0.0,
        embed_dims=128,
        frozen_stages=-1,
        init_cfg=dict(
            checkpoint=
            'https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/swin/swin_base_patch4_window12_384_20220317-55b0104a.pth',
            type='Pretrained'),
        mlp_ratio=4,
        num_heads=[
            4,
            8,
            16,
            32,
        ],
        out_indices=(
            0,
            1,
            2,
            3,
        ),
        patch_norm=True,
        pretrain_img_size=384,
        qk_scale=None,
        qkv_bias=True,
        type='SwinTransformer',
        window_size=12,
        with_cp=False),
    data_preprocessor=dict(
        bgr_to_rgb=True,
        corruption='pixelate',
        mean=[
            123.675,
            116.28,
            103.53,
        ],
        pad_val=0,
        seg_pad_val=255,
        size=(
            640,
            640,
        ),
        std=[
            58.395,
            57.12,
            57.375,
        ],
        type='SegDataPreProcessor'),
    decode_head=dict(
        align_corners=False,
        enforce_decoder_input_project=False,
        feat_channels=256,
        in_channels=[
            128,
            256,
            512,
            1024,
        ],
        loss_cls=dict(
            class_weight=[
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                0.1,
            ],
            loss_weight=2.0,
            reduction='mean',
            type='mmdet.CrossEntropyLoss',
            use_sigmoid=False),
        loss_dice=dict(
            activate=True,
            eps=1.0,
            loss_weight=5.0,
            naive_dice=True,
            reduction='mean',
            type='mmdet.DiceLoss',
            use_sigmoid=True),
        loss_mask=dict(
            loss_weight=5.0,
            reduction='mean',
            type='mmdet.CrossEntropyLoss',
            use_sigmoid=True),
        num_classes=150,
        num_queries=100,
        num_transformer_feat_level=3,
        out_channels=256,
        pixel_decoder=dict(
            act_cfg=dict(type='ReLU'),
            encoder=dict(
                init_cfg=None,
                layer_cfg=dict(
                    ffn_cfg=dict(
                        act_cfg=dict(inplace=True, type='ReLU'),
                        embed_dims=256,
                        feedforward_channels=1024,
                        ffn_drop=0.0,
                        num_fcs=2),
                    self_attn_cfg=dict(
                        batch_first=True,
                        dropout=0.0,
                        embed_dims=256,
                        im2col_step=64,
                        init_cfg=None,
                        norm_cfg=None,
                        num_heads=8,
                        num_levels=3,
                        num_points=4)),
                num_layers=6),
            init_cfg=None,
            norm_cfg=dict(num_groups=32, type='GN'),
            num_outs=3,
            positional_encoding=dict(normalize=True, num_feats=128),
            type='mmdet.MSDeformAttnPixelDecoder'),
        positional_encoding=dict(normalize=True, num_feats=128),
        strides=[
            4,
            8,
            16,
            32,
        ],
        train_cfg=dict(
            assigner=dict(
                match_costs=[
                    dict(type='mmdet.ClassificationCost', weight=2.0),
                    dict(
                        type='mmdet.CrossEntropyLossCost',
                        use_sigmoid=True,
                        weight=5.0),
                    dict(
                        eps=1.0,
                        pred_act=True,
                        type='mmdet.DiceCost',
                        weight=5.0),
                ],
                type='mmdet.HungarianAssigner'),
            importance_sample_ratio=0.75,
            num_points=12544,
            oversample_ratio=3.0,
            sampler=dict(type='mmdet.MaskPseudoSampler')),
        transformer_decoder=dict(
            init_cfg=None,
            layer_cfg=dict(
                cross_attn_cfg=dict(
                    attn_drop=0.0,
                    batch_first=True,
                    dropout_layer=None,
                    embed_dims=256,
                    num_heads=8,
                    proj_drop=0.0),
                ffn_cfg=dict(
                    act_cfg=dict(inplace=True, type='ReLU'),
                    add_identity=True,
                    dropout_layer=None,
                    embed_dims=256,
                    feedforward_channels=2048,
                    ffn_drop=0.0,
                    num_fcs=2),
                self_attn_cfg=dict(
                    attn_drop=0.0,
                    batch_first=True,
                    dropout_layer=None,
                    embed_dims=256,
                    num_heads=8,
                    proj_drop=0.0)),
            num_layers=9,
            return_intermediate=True),
        type='Mask2FormerHead'),
    test_cfg=dict(mode='whole'),
    train_cfg=dict(),
    type='EncoderDecoder')
num_classes = 150
optim_wrapper = dict(
    clip_grad=dict(max_norm=0.01, norm_type=2),
    optimizer=dict(
        betas=(
            0.9,
            0.999,
        ),
        eps=1e-08,
        lr=0.0001,
        type='AdamW',
        weight_decay=0.05),
    paramwise_cfg=dict(
        custom_keys=dict({
            'absolute_pos_embed':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone':
            dict(decay_mult=1.0, lr_mult=0.1),
            'backbone.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.patch_embed.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.0.blocks.0.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.0.blocks.1.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.0.downsample.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.1.blocks.0.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.1.blocks.1.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.1.downsample.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.0.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.1.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.10.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.11.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.12.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.13.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.14.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.15.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.16.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.17.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.2.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.3.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.4.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.5.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.6.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.7.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.8.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.9.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.downsample.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.3.blocks.0.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.3.blocks.1.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'level_embed':
            dict(decay_mult=0.0, lr_mult=1.0),
            'query_embed':
            dict(decay_mult=0.0, lr_mult=1.0),
            'query_feat':
            dict(decay_mult=0.0, lr_mult=1.0),
            'relative_position_bias_table':
            dict(decay_mult=0.0, lr_mult=0.1)
        }),
        norm_decay_mult=0.0),
    type='OptimWrapper')
optimizer = dict(
    betas=(
        0.9,
        0.999,
    ),
    eps=1e-08,
    lr=0.0001,
    type='AdamW',
    weight_decay=0.05)
param_scheduler = [
    dict(
        begin=0,
        by_epoch=False,
        end=160000,
        eta_min=0,
        power=0.9,
        type='PolyLR'),
]
pretrained = 'https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/swin/swin_base_patch4_window12_384_20220317-55b0104a.pth'
resume = False
test_cfg = dict(type='TestLoop')
test_dataloader = dict(
    batch_size=1,
    dataset=dict(
        data_prefix=dict(
            img_path='images/validation',
            seg_map_path='annotations/validation'),
        data_root='data/ade/ADEChallengeData2016',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(keep_ratio=True, scale=(
                2560,
                640,
            ), type='Resize'),
            dict(reduce_zero_label=True, type='LoadAnnotations'),
            dict(type='PackSegInputs'),
        ],
        type='ADE20KDataset'),
    num_workers=4,
    persistent_workers=True,
    sampler=dict(shuffle=False, type='DefaultSampler'))
test_evaluator = dict(
    iou_metrics=[
        'mIoU',
    ], type='IoUMetric')
test_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(keep_ratio=True, scale=(
        2560,
        640,
    ), type='Resize'),
    dict(reduce_zero_label=True, type='LoadAnnotations'),
    dict(type='PackSegInputs'),
]
train_cfg = dict(
    max_iters=160000, type='IterBasedTrainLoop', val_interval=5000)
train_dataloader = dict(
    batch_size=2,
    dataset=dict(
        data_prefix=dict(
            img_path='images/training', seg_map_path='annotations/training'),
        data_root='data/ade/ADEChallengeData2016',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(reduce_zero_label=True, type='LoadAnnotations'),
            dict(
                max_size=2560,
                resize_type='ResizeShortestEdge',
                scales=[
                    320,
                    384,
                    448,
                    512,
                    576,
                    640,
                    704,
                    768,
                    832,
                    896,
                    960,
                    1024,
                    1088,
                    1152,
                    1216,
                    1280,
                ],
                type='RandomChoiceResize'),
            dict(
                cat_max_ratio=0.75, crop_size=(
                    640,
                    640,
                ), type='RandomCrop'),
            dict(prob=0.5, type='RandomFlip'),
            dict(type='PhotoMetricDistortion'),
            dict(type='PackSegInputs'),
        ],
        type='ADE20KDataset'),
    num_workers=4,
    persistent_workers=True,
    sampler=dict(shuffle=True, type='InfiniteSampler'))
train_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(reduce_zero_label=True, type='LoadAnnotations'),
    dict(
        max_size=2560,
        resize_type='ResizeShortestEdge',
        scales=[
            320,
            384,
            448,
            512,
            576,
            640,
            704,
            768,
            832,
            896,
            960,
            1024,
            1088,
            1152,
            1216,
            1280,
        ],
        type='RandomChoiceResize'),
    dict(cat_max_ratio=0.75, crop_size=(
        640,
        640,
    ), type='RandomCrop'),
    dict(prob=0.5, type='RandomFlip'),
    dict(type='PhotoMetricDistortion'),
    dict(type='PackSegInputs'),
]
tta_model = dict(type='SegTTAModel')
tta_pipeline = [
    dict(backend_args=None, type='LoadImageFromFile'),
    dict(
        transforms=[
            [
                dict(keep_ratio=True, scale_factor=0.5, type='Resize'),
                dict(keep_ratio=True, scale_factor=0.75, type='Resize'),
                dict(keep_ratio=True, scale_factor=1.0, type='Resize'),
                dict(keep_ratio=True, scale_factor=1.25, type='Resize'),
                dict(keep_ratio=True, scale_factor=1.5, type='Resize'),
                dict(keep_ratio=True, scale_factor=1.75, type='Resize'),
            ],
            [
                dict(direction='horizontal', prob=0.0, type='RandomFlip'),
                dict(direction='horizontal', prob=1.0, type='RandomFlip'),
            ],
            [
                dict(type='LoadAnnotations'),
            ],
            [
                dict(type='PackSegInputs'),
            ],
        ],
        type='TestTimeAug'),
]
val_cfg = dict(type='ValLoop')
val_dataloader = dict(
    batch_size=1,
    dataset=dict(
        data_prefix=dict(
            img_path='images/validation',
            seg_map_path='annotations/validation'),
        data_root='data/ade/ADEChallengeData2016',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(keep_ratio=True, scale=(
                2560,
                640,
            ), type='Resize'),
            dict(reduce_zero_label=True, type='LoadAnnotations'),
            dict(type='PackSegInputs'),
        ],
        type='ADE20KDataset'),
    num_workers=4,
    persistent_workers=True,
    sampler=dict(shuffle=False, type='DefaultSampler'))
val_evaluator = dict(
    iou_metrics=[
        'mIoU',
    ], type='IoUMetric')
vis_backends = [
    dict(type='LocalVisBackend'),
]
visualizer = dict(
    name='visualizer',
    type='SegLocalVisualizer',
    vis_backends=[
        dict(type='LocalVisBackend'),
    ])
work_dir = '../corruptions/work_dirs/ade20k/mask2former/mask2former_swin-b-in1k-384x384-pre_8xb2-160k_ade20k-640x640/pixelate'

09/21 12:36:27 - mmengine - INFO - Distributed training is not used, all SyncBatchNorm (SyncBN) layers in the model will be automatically reverted to BatchNormXd layers if they are used.
09/21 12:36:27 - mmengine - INFO - Hooks will be executed in the following order:
before_run:
(VERY_HIGH   ) RuntimeInfoHook                    
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
before_train:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_train_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(NORMAL      ) DistSamplerSeedHook                
 -------------------- 
before_train_iter:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_train_iter:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(NORMAL      ) SegVisualizationHook               
(BELOW_NORMAL) LoggerHook                         
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
after_train_epoch:
(NORMAL      ) IterTimerHook                      
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_val:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
before_val_epoch:
(NORMAL      ) IterTimerHook                      
 -------------------- 
before_val_iter:
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_val_iter:
(NORMAL      ) IterTimerHook                      
(NORMAL      ) SegVisualizationHook               
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_val_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
after_val:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
after_train:
(VERY_HIGH   ) RuntimeInfoHook                    
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_test:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
before_test_epoch:
(NORMAL      ) IterTimerHook                      
 -------------------- 
before_test_iter:
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_test_iter:
(NORMAL      ) IterTimerHook                      
(NORMAL      ) SegVisualizationHook               
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_test_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_test:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
after_run:
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
09/21 12:36:29 - mmengine - WARNING - The prefix is not set in metric class IoUMetric.
Loads checkpoint by local backend from path: ../checkpoint_files/ade20k/mask2former/mask2former_swin-b-in1k-384x384-pre_8xb2-160k_ade20k-640x640_20221129_125118-a4a086d2.pth
09/21 12:36:32 - mmengine - INFO - Load checkpoint from ../checkpoint_files/ade20k/mask2former/mask2former_swin-b-in1k-384x384-pre_8xb2-160k_ade20k-640x640_20221129_125118-a4a086d2.pth
09/21 12:38:32 - mmengine - INFO - Iter(test) [  50/2000]    eta: 1:17:31  time: 0.3809  data_time: 0.0018  memory: 17181  
09/21 12:38:51 - mmengine - INFO - Iter(test) [ 100/2000]    eta: 0:43:50  time: 0.3831  data_time: 0.0020  memory: 17180  
09/21 12:39:05 - mmengine - INFO - Iter(test) [ 150/2000]    eta: 0:31:19  time: 0.2794  data_time: 0.0018  memory: 17150  
09/21 12:39:19 - mmengine - INFO - Iter(test) [ 200/2000]    eta: 0:24:55  time: 0.3392  data_time: 0.0018  memory: 17194  
09/21 12:39:35 - mmengine - INFO - Iter(test) [ 250/2000]    eta: 0:21:17  time: 0.2210  data_time: 0.0017  memory: 17202  
09/21 12:39:49 - mmengine - INFO - Iter(test) [ 300/2000]    eta: 0:18:32  time: 0.1300  data_time: 0.0020  memory: 17180  
09/21 12:40:03 - mmengine - INFO - Iter(test) [ 350/2000]    eta: 0:16:32  time: 0.2640  data_time: 0.0018  memory: 17178  
09/21 12:40:15 - mmengine - INFO - Iter(test) [ 400/2000]    eta: 0:14:50  time: 0.1425  data_time: 0.0017  memory: 17177  
09/21 12:40:23 - mmengine - INFO - Iter(test) [ 450/2000]    eta: 0:13:13  time: 0.1774  data_time: 0.0017  memory: 17147  
09/21 12:40:32 - mmengine - INFO - Iter(test) [ 500/2000]    eta: 0:11:57  time: 0.2051  data_time: 0.0016  memory: 17149  
09/21 12:40:40 - mmengine - INFO - Iter(test) [ 550/2000]    eta: 0:10:53  time: 0.2414  data_time: 0.0018  memory: 17179  
09/21 12:40:47 - mmengine - INFO - Iter(test) [ 600/2000]    eta: 0:09:53  time: 0.1272  data_time: 0.0019  memory: 3938  
09/21 12:40:57 - mmengine - INFO - Iter(test) [ 650/2000]    eta: 0:09:09  time: 0.2584  data_time: 0.0016  memory: 17181  
09/21 12:41:09 - mmengine - INFO - Iter(test) [ 700/2000]    eta: 0:08:34  time: 0.1907  data_time: 0.0019  memory: 17177  
09/21 12:41:21 - mmengine - INFO - Iter(test) [ 750/2000]    eta: 0:08:01  time: 0.5529  data_time: 0.0017  memory: 17184  
09/21 12:41:29 - mmengine - INFO - Iter(test) [ 800/2000]    eta: 0:07:24  time: 0.1246  data_time: 0.0018  memory: 17151  
09/21 12:41:35 - mmengine - INFO - Iter(test) [ 850/2000]    eta: 0:06:49  time: 0.1255  data_time: 0.0018  memory: 1428  
09/21 12:41:43 - mmengine - INFO - Iter(test) [ 900/2000]    eta: 0:06:19  time: 0.1754  data_time: 0.0017  memory: 17138  
09/21 12:41:54 - mmengine - INFO - Iter(test) [ 950/2000]    eta: 0:05:54  time: 0.2876  data_time: 0.0019  memory: 17133  
09/21 12:42:01 - mmengine - INFO - Iter(test) [1000/2000]    eta: 0:05:28  time: 0.1206  data_time: 0.0017  memory: 17096  
09/21 12:42:09 - mmengine - INFO - Iter(test) [1050/2000]    eta: 0:05:04  time: 0.2064  data_time: 0.0017  memory: 17182  
09/21 12:42:18 - mmengine - INFO - Iter(test) [1100/2000]    eta: 0:04:42  time: 0.1242  data_time: 0.0018  memory: 17175  
09/21 12:42:26 - mmengine - INFO - Iter(test) [1150/2000]    eta: 0:04:20  time: 0.1234  data_time: 0.0017  memory: 17117  
09/21 12:42:33 - mmengine - INFO - Iter(test) [1200/2000]    eta: 0:03:59  time: 0.1224  data_time: 0.0017  memory: 17113  
09/21 12:42:41 - mmengine - INFO - Iter(test) [1250/2000]    eta: 0:03:41  time: 0.2012  data_time: 0.0017  memory: 17172  
09/21 12:42:48 - mmengine - INFO - Iter(test) [1300/2000]    eta: 0:03:21  time: 0.1250  data_time: 0.0017  memory: 1430  
09/21 12:42:55 - mmengine - INFO - Iter(test) [1350/2000]    eta: 0:03:04  time: 0.1182  data_time: 0.0017  memory: 17110  
09/21 12:43:05 - mmengine - INFO - Iter(test) [1400/2000]    eta: 0:02:48  time: 0.1486  data_time: 0.0018  memory: 17154  
09/21 12:43:12 - mmengine - INFO - Iter(test) [1450/2000]    eta: 0:02:31  time: 0.1895  data_time: 0.0017  memory: 17130  
09/21 12:43:19 - mmengine - INFO - Iter(test) [1500/2000]    eta: 0:02:15  time: 0.1189  data_time: 0.0017  memory: 17125  
09/21 12:43:26 - mmengine - INFO - Iter(test) [1550/2000]    eta: 0:01:59  time: 0.1263  data_time: 0.0017  memory: 17154  
09/21 12:43:32 - mmengine - INFO - Iter(test) [1600/2000]    eta: 0:01:44  time: 0.1236  data_time: 0.0018  memory: 1425  
09/21 12:43:40 - mmengine - INFO - Iter(test) [1650/2000]    eta: 0:01:30  time: 0.1187  data_time: 0.0016  memory: 17192  
09/21 12:43:51 - mmengine - INFO - Iter(test) [1700/2000]    eta: 0:01:17  time: 0.1248  data_time: 0.0018  memory: 17151  
09/21 12:44:00 - mmengine - INFO - Iter(test) [1750/2000]    eta: 0:01:03  time: 0.2242  data_time: 0.0030  memory: 17111  
09/21 12:44:06 - mmengine - INFO - Iter(test) [1800/2000]    eta: 0:00:50  time: 0.1257  data_time: 0.0019  memory: 17114  
09/21 12:44:13 - mmengine - INFO - Iter(test) [1850/2000]    eta: 0:00:37  time: 0.1249  data_time: 0.0019  memory: 1317  
09/21 12:44:20 - mmengine - INFO - Iter(test) [1900/2000]    eta: 0:00:24  time: 0.1874  data_time: 0.0017  memory: 17182  
09/21 12:44:27 - mmengine - INFO - Iter(test) [1950/2000]    eta: 0:00:12  time: 0.1247  data_time: 0.0016  memory: 17197  
09/21 12:44:35 - mmengine - INFO - Iter(test) [2000/2000]    eta: 0:00:00  time: 0.1155  data_time: 0.0016  memory: 17131  
09/21 12:44:36 - mmengine - INFO - per class results:
09/21 12:44:36 - mmengine - INFO - 
+---------------------+-------+-------+
|        Class        |  IoU  |  Acc  |
+---------------------+-------+-------+
|         wall        | 77.23 | 85.87 |
|       building      | 80.19 | 94.38 |
|         sky         | 93.93 | 96.93 |
|        floor        | 81.66 | 89.27 |
|         tree        | 74.07 | 85.68 |
|       ceiling       |  83.9 |  91.0 |
|         road        | 84.28 | 91.62 |
|         bed         | 89.14 | 95.19 |
|      windowpane     | 60.07 | 78.75 |
|        grass        | 66.96 | 80.51 |
|       cabinet       | 56.03 | 72.88 |
|       sidewalk      | 65.45 | 77.98 |
|        person       | 81.15 | 89.28 |
|        earth        | 34.88 | 50.07 |
|         door        | 40.73 | 54.92 |
|        table        | 60.21 | 74.29 |
|       mountain      | 53.34 | 65.81 |
|        plant        | 48.79 | 60.46 |
|       curtain       | 74.01 | 84.98 |
|        chair        | 56.56 |  70.6 |
|         car         | 84.02 | 90.81 |
|        water        |  57.4 | 77.67 |
|       painting      | 69.63 |  89.9 |
|         sofa        |  65.0 | 83.02 |
|        shelf        | 38.06 | 58.95 |
|        house        | 43.33 | 52.58 |
|         sea         | 54.89 |  70.6 |
|        mirror       | 64.43 | 76.33 |
|         rug         | 66.96 | 85.37 |
|        field        | 26.09 | 44.66 |
|       armchair      | 36.58 |  50.5 |
|         seat        | 55.64 | 69.84 |
|        fence        | 45.37 | 61.68 |
|         desk        | 48.84 |  68.4 |
|         rock        |  46.3 | 63.78 |
|       wardrobe      | 46.58 | 60.43 |
|         lamp        |  63.6 | 75.17 |
|       bathtub       | 77.29 | 83.73 |
|       railing       | 36.26 | 57.21 |
|       cushion       | 51.33 | 58.62 |
|         base        | 31.34 | 58.41 |
|         box         | 25.08 |  37.3 |
|        column       | 43.21 | 59.12 |
|      signboard      | 36.65 | 55.53 |
|   chest of drawers  | 36.58 | 57.44 |
|       counter       | 33.94 | 42.45 |
|         sand        | 32.49 | 49.42 |
|         sink        |  71.8 | 78.96 |
|      skyscraper     | 34.84 | 37.57 |
|      fireplace      |  71.5 | 83.32 |
|     refrigerator    | 72.59 | 80.18 |
|      grandstand     | 36.45 | 73.65 |
|         path        | 20.75 | 32.93 |
|        stairs       | 21.14 |  27.6 |
|        runway       | 66.73 | 79.49 |
|         case        |  57.0 | 79.43 |
|      pool table     | 93.58 | 96.05 |
|        pillow       |  55.2 | 73.21 |
|     screen door     | 63.02 | 71.12 |
|       stairway      | 29.65 |  51.2 |
|        river        | 11.21 | 21.01 |
|        bridge       | 61.76 | 74.22 |
|       bookcase      | 28.54 | 53.79 |
|        blind        | 43.98 | 49.79 |
|     coffee table    | 65.55 | 82.18 |
|        toilet       | 88.26 | 91.26 |
|        flower       | 36.61 | 46.95 |
|         book        | 44.39 | 68.87 |
|         hill        |  5.28 | 14.23 |
|        bench        | 42.47 | 64.92 |
|      countertop     | 55.88 | 64.57 |
|        stove        | 75.48 | 82.26 |
|         palm        | 48.74 | 64.49 |
|    kitchen island   | 43.21 |  78.5 |
|       computer      |  60.2 | 70.33 |
|     swivel chair    | 44.43 | 56.85 |
|         boat        | 67.21 | 83.09 |
|         bar         | 57.07 | 70.95 |
|    arcade machine   | 45.76 | 63.56 |
|        hovel        |  3.03 |  6.21 |
|         bus         | 89.29 |  96.4 |
|        towel        | 75.72 | 80.56 |
|        light        | 59.04 | 77.91 |
|        truck        | 32.63 | 57.49 |
|        tower        |  6.06 |  9.1  |
|      chandelier     | 65.15 | 75.39 |
|        awning       | 28.46 | 33.54 |
|     streetlight     | 31.69 | 49.94 |
|        booth        | 24.46 | 47.35 |
| television receiver | 68.02 | 78.07 |
|       airplane      |  57.5 | 70.57 |
|      dirt track     |  8.2  | 20.12 |
|       apparel       | 32.92 | 39.73 |
|         pole        | 27.87 | 45.27 |
|         land        |  4.91 |  7.62 |
|      bannister      | 21.85 | 32.73 |
|      escalator      | 39.46 | 52.13 |
|       ottoman       | 48.93 | 57.92 |
|        bottle       | 22.57 | 29.36 |
|        buffet       | 40.51 | 49.98 |
|        poster       | 29.04 | 40.69 |
|        stage        | 13.18 | 28.58 |
|         van         | 45.34 | 68.82 |
|         ship        | 72.91 | 79.02 |
|       fountain      | 19.23 | 22.09 |
|    conveyer belt    | 48.43 | 65.58 |
|        canopy       | 27.57 | 29.75 |
|        washer       | 66.16 | 69.96 |
|      plaything      | 26.51 | 35.27 |
|    swimming pool    | 35.37 | 38.67 |
|        stool        | 44.35 | 66.85 |
|        barrel       | 59.23 | 74.81 |
|        basket       | 23.68 | 30.36 |
|      waterfall      | 46.27 | 53.18 |
|         tent        | 89.68 | 97.62 |
|         bag         | 14.65 | 19.23 |
|       minibike      | 72.06 |  82.2 |
|        cradle       | 83.76 | 96.79 |
|         oven        | 23.65 | 65.29 |
|         ball        | 50.21 | 59.17 |
|         food        | 65.11 | 77.11 |
|         step        | 13.98 | 22.01 |
|         tank        |  39.3 | 55.18 |
|      trade name     | 23.03 | 28.83 |
|      microwave      | 39.68 | 45.36 |
|         pot         | 52.76 | 63.25 |
|        animal       | 60.06 |  63.5 |
|       bicycle       | 59.48 |  75.4 |
|         lake        | 62.54 |  69.0 |
|      dishwasher     | 65.03 | 77.11 |
|        screen       | 64.89 | 90.45 |
|       blanket       | 23.64 | 27.64 |
|      sculpture      | 59.32 | 73.96 |
|         hood        | 65.64 | 70.95 |
|        sconce       | 44.48 | 64.25 |
|         vase        | 36.78 | 56.52 |
|    traffic light    | 35.14 | 56.79 |
|         tray        | 18.67 | 27.58 |
|        ashcan       | 40.74 | 66.02 |
|         fan         | 66.04 | 81.52 |
|         pier        | 33.51 |  38.8 |
|      crt screen     |  0.98 |  2.8  |
|        plate        | 53.79 | 75.34 |
|       monitor       |  1.85 |  2.51 |
|    bulletin board   | 33.86 | 49.31 |
|        shower       | 12.78 | 17.66 |
|       radiator      | 57.96 | 62.61 |
|        glass        | 16.18 |  19.3 |
|        clock        | 43.15 |  55.1 |
|         flag        | 47.86 | 52.64 |
+---------------------+-------+-------+
09/21 12:44:36 - mmengine - INFO - Iter(test) [2000/2000]    aAcc: 82.0700  mIoU: 48.1200  mAcc: 60.7100  data_time: 0.0026  time: 0.2413
Finished processing corruption type: pixelate
Processing corruption type: jpeg_compression
09/21 12:46:35 - mmengine - INFO - 
------------------------------------------------------------
System environment:
    sys.platform: linux
    Python: 3.10.13 | packaged by conda-forge | (main, Dec 23 2023, 15:36:39) [GCC 12.3.0]
    CUDA available: True
    MUSA available: False
    numpy_random_seed: 260371974
    GPU 0: Tesla V100-SXM2-32GB
    CUDA_HOME: /opt/bwhpc/common/devel/cuda/11.7
    NVCC: Cuda compilation tools, release 11.7, V11.7.99
    GCC: gcc (GCC) 8.5.0 20210514 (Red Hat 8.5.0-18)
    PyTorch: 1.13.1
    PyTorch compiling details: PyTorch built with:
  - GCC 9.3
  - C++ Version: 201402
  - Intel(R) oneAPI Math Kernel Library Version 2023.1-Product Build 20230303 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v2.6.0 (Git Hash 52b5f107dd9cf10910aaa19cb47f3abf9b349815)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - LAPACK is enabled (usually provided by MKL)
  - NNPACK is enabled
  - CPU capability usage: AVX2
  - CUDA Runtime 11.7
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_61,code=sm_61;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86;-gencode;arch=compute_37,code=compute_37
  - CuDNN 8.5
  - Magma 2.6.1
  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.7, CUDNN_VERSION=8.5.0, CXX_COMPILER=/opt/rh/devtoolset-9/root/usr/bin/c++, CXX_FLAGS= -fabi-version=11 -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -DEDGE_PROFILER_USE_KINETO -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Werror=non-virtual-dtor -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wunused-local-typedefs -Wno-unused-parameter -Wno-unused-function -Wno-unused-result -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Werror=cast-function-type -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.13.1, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, USE_ROCM=OFF, 

    TorchVision: 0.14.1
    OpenCV: 3.4.18
    MMEngine: 0.10.4

Runtime environment:
    cudnn_benchmark: True
    mp_cfg: {'mp_start_method': 'fork', 'opencv_num_threads': 0}
    dist_cfg: {'backend': 'nccl'}
    seed: 260371974
    Distributed launcher: none
    Distributed training: False
    GPU number: 1
------------------------------------------------------------

09/21 12:46:35 - mmengine - INFO - Config:
auto_scale_lr = dict(base_batch_size=16, enable=False)
backbone_embed_multi = dict(decay_mult=0.0, lr_mult=0.1)
backbone_norm_multi = dict(decay_mult=0.0, lr_mult=0.1)
crop_size = (
    640,
    640,
)
custom_keys = dict({
    'absolute_pos_embed':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone':
    dict(decay_mult=1.0, lr_mult=0.1),
    'backbone.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.patch_embed.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.0.blocks.0.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.0.blocks.1.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.0.downsample.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.1.blocks.0.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.1.blocks.1.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.1.downsample.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.0.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.1.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.10.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.11.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.12.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.13.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.14.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.15.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.16.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.17.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.2.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.3.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.4.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.5.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.6.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.7.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.8.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.9.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.downsample.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.3.blocks.0.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.3.blocks.1.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'level_embed':
    dict(decay_mult=0.0, lr_mult=1.0),
    'query_embed':
    dict(decay_mult=0.0, lr_mult=1.0),
    'query_feat':
    dict(decay_mult=0.0, lr_mult=1.0),
    'relative_position_bias_table':
    dict(decay_mult=0.0, lr_mult=0.1)
})
data_root = 'data/ade/ADEChallengeData2016'
dataset_type = 'ADE20KDataset'
default_hooks = dict(
    checkpoint=dict(
        by_epoch=False, interval=5000, save_best='mIoU',
        type='CheckpointHook'),
    logger=dict(interval=50, log_metric_by_epoch=False, type='LoggerHook'),
    param_scheduler=dict(type='ParamSchedulerHook'),
    sampler_seed=dict(type='DistSamplerSeedHook'),
    timer=dict(type='IterTimerHook'),
    visualization=dict(type='SegVisualizationHook'))
default_scope = 'mmseg'
depths = [
    2,
    2,
    18,
    2,
]
embed_multi = dict(decay_mult=0.0, lr_mult=1.0)
env_cfg = dict(
    cudnn_benchmark=True,
    dist_cfg=dict(backend='nccl'),
    mp_cfg=dict(mp_start_method='fork', opencv_num_threads=0))
img_ratios = [
    0.5,
    0.75,
    1.0,
    1.25,
    1.5,
    1.75,
]
launcher = 'none'
load_from = '../checkpoint_files/ade20k/mask2former/mask2former_swin-b-in1k-384x384-pre_8xb2-160k_ade20k-640x640_20221129_125118-a4a086d2.pth'
log_level = 'INFO'
log_processor = dict(by_epoch=False)
model = dict(
    backbone=dict(
        attn_drop_rate=0.0,
        depths=[
            2,
            2,
            18,
            2,
        ],
        drop_path_rate=0.3,
        drop_rate=0.0,
        embed_dims=128,
        frozen_stages=-1,
        init_cfg=dict(
            checkpoint=
            'https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/swin/swin_base_patch4_window12_384_20220317-55b0104a.pth',
            type='Pretrained'),
        mlp_ratio=4,
        num_heads=[
            4,
            8,
            16,
            32,
        ],
        out_indices=(
            0,
            1,
            2,
            3,
        ),
        patch_norm=True,
        pretrain_img_size=384,
        qk_scale=None,
        qkv_bias=True,
        type='SwinTransformer',
        window_size=12,
        with_cp=False),
    data_preprocessor=dict(
        bgr_to_rgb=True,
        corruption='jpeg_compression',
        mean=[
            123.675,
            116.28,
            103.53,
        ],
        pad_val=0,
        seg_pad_val=255,
        size=(
            640,
            640,
        ),
        std=[
            58.395,
            57.12,
            57.375,
        ],
        type='SegDataPreProcessor'),
    decode_head=dict(
        align_corners=False,
        enforce_decoder_input_project=False,
        feat_channels=256,
        in_channels=[
            128,
            256,
            512,
            1024,
        ],
        loss_cls=dict(
            class_weight=[
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                0.1,
            ],
            loss_weight=2.0,
            reduction='mean',
            type='mmdet.CrossEntropyLoss',
            use_sigmoid=False),
        loss_dice=dict(
            activate=True,
            eps=1.0,
            loss_weight=5.0,
            naive_dice=True,
            reduction='mean',
            type='mmdet.DiceLoss',
            use_sigmoid=True),
        loss_mask=dict(
            loss_weight=5.0,
            reduction='mean',
            type='mmdet.CrossEntropyLoss',
            use_sigmoid=True),
        num_classes=150,
        num_queries=100,
        num_transformer_feat_level=3,
        out_channels=256,
        pixel_decoder=dict(
            act_cfg=dict(type='ReLU'),
            encoder=dict(
                init_cfg=None,
                layer_cfg=dict(
                    ffn_cfg=dict(
                        act_cfg=dict(inplace=True, type='ReLU'),
                        embed_dims=256,
                        feedforward_channels=1024,
                        ffn_drop=0.0,
                        num_fcs=2),
                    self_attn_cfg=dict(
                        batch_first=True,
                        dropout=0.0,
                        embed_dims=256,
                        im2col_step=64,
                        init_cfg=None,
                        norm_cfg=None,
                        num_heads=8,
                        num_levels=3,
                        num_points=4)),
                num_layers=6),
            init_cfg=None,
            norm_cfg=dict(num_groups=32, type='GN'),
            num_outs=3,
            positional_encoding=dict(normalize=True, num_feats=128),
            type='mmdet.MSDeformAttnPixelDecoder'),
        positional_encoding=dict(normalize=True, num_feats=128),
        strides=[
            4,
            8,
            16,
            32,
        ],
        train_cfg=dict(
            assigner=dict(
                match_costs=[
                    dict(type='mmdet.ClassificationCost', weight=2.0),
                    dict(
                        type='mmdet.CrossEntropyLossCost',
                        use_sigmoid=True,
                        weight=5.0),
                    dict(
                        eps=1.0,
                        pred_act=True,
                        type='mmdet.DiceCost',
                        weight=5.0),
                ],
                type='mmdet.HungarianAssigner'),
            importance_sample_ratio=0.75,
            num_points=12544,
            oversample_ratio=3.0,
            sampler=dict(type='mmdet.MaskPseudoSampler')),
        transformer_decoder=dict(
            init_cfg=None,
            layer_cfg=dict(
                cross_attn_cfg=dict(
                    attn_drop=0.0,
                    batch_first=True,
                    dropout_layer=None,
                    embed_dims=256,
                    num_heads=8,
                    proj_drop=0.0),
                ffn_cfg=dict(
                    act_cfg=dict(inplace=True, type='ReLU'),
                    add_identity=True,
                    dropout_layer=None,
                    embed_dims=256,
                    feedforward_channels=2048,
                    ffn_drop=0.0,
                    num_fcs=2),
                self_attn_cfg=dict(
                    attn_drop=0.0,
                    batch_first=True,
                    dropout_layer=None,
                    embed_dims=256,
                    num_heads=8,
                    proj_drop=0.0)),
            num_layers=9,
            return_intermediate=True),
        type='Mask2FormerHead'),
    test_cfg=dict(mode='whole'),
    train_cfg=dict(),
    type='EncoderDecoder')
num_classes = 150
optim_wrapper = dict(
    clip_grad=dict(max_norm=0.01, norm_type=2),
    optimizer=dict(
        betas=(
            0.9,
            0.999,
        ),
        eps=1e-08,
        lr=0.0001,
        type='AdamW',
        weight_decay=0.05),
    paramwise_cfg=dict(
        custom_keys=dict({
            'absolute_pos_embed':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone':
            dict(decay_mult=1.0, lr_mult=0.1),
            'backbone.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.patch_embed.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.0.blocks.0.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.0.blocks.1.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.0.downsample.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.1.blocks.0.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.1.blocks.1.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.1.downsample.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.0.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.1.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.10.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.11.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.12.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.13.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.14.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.15.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.16.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.17.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.2.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.3.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.4.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.5.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.6.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.7.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.8.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.9.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.downsample.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.3.blocks.0.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.3.blocks.1.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'level_embed':
            dict(decay_mult=0.0, lr_mult=1.0),
            'query_embed':
            dict(decay_mult=0.0, lr_mult=1.0),
            'query_feat':
            dict(decay_mult=0.0, lr_mult=1.0),
            'relative_position_bias_table':
            dict(decay_mult=0.0, lr_mult=0.1)
        }),
        norm_decay_mult=0.0),
    type='OptimWrapper')
optimizer = dict(
    betas=(
        0.9,
        0.999,
    ),
    eps=1e-08,
    lr=0.0001,
    type='AdamW',
    weight_decay=0.05)
param_scheduler = [
    dict(
        begin=0,
        by_epoch=False,
        end=160000,
        eta_min=0,
        power=0.9,
        type='PolyLR'),
]
pretrained = 'https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/swin/swin_base_patch4_window12_384_20220317-55b0104a.pth'
resume = False
test_cfg = dict(type='TestLoop')
test_dataloader = dict(
    batch_size=1,
    dataset=dict(
        data_prefix=dict(
            img_path='images/validation',
            seg_map_path='annotations/validation'),
        data_root='data/ade/ADEChallengeData2016',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(keep_ratio=True, scale=(
                2560,
                640,
            ), type='Resize'),
            dict(reduce_zero_label=True, type='LoadAnnotations'),
            dict(type='PackSegInputs'),
        ],
        type='ADE20KDataset'),
    num_workers=4,
    persistent_workers=True,
    sampler=dict(shuffle=False, type='DefaultSampler'))
test_evaluator = dict(
    iou_metrics=[
        'mIoU',
    ], type='IoUMetric')
test_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(keep_ratio=True, scale=(
        2560,
        640,
    ), type='Resize'),
    dict(reduce_zero_label=True, type='LoadAnnotations'),
    dict(type='PackSegInputs'),
]
train_cfg = dict(
    max_iters=160000, type='IterBasedTrainLoop', val_interval=5000)
train_dataloader = dict(
    batch_size=2,
    dataset=dict(
        data_prefix=dict(
            img_path='images/training', seg_map_path='annotations/training'),
        data_root='data/ade/ADEChallengeData2016',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(reduce_zero_label=True, type='LoadAnnotations'),
            dict(
                max_size=2560,
                resize_type='ResizeShortestEdge',
                scales=[
                    320,
                    384,
                    448,
                    512,
                    576,
                    640,
                    704,
                    768,
                    832,
                    896,
                    960,
                    1024,
                    1088,
                    1152,
                    1216,
                    1280,
                ],
                type='RandomChoiceResize'),
            dict(
                cat_max_ratio=0.75, crop_size=(
                    640,
                    640,
                ), type='RandomCrop'),
            dict(prob=0.5, type='RandomFlip'),
            dict(type='PhotoMetricDistortion'),
            dict(type='PackSegInputs'),
        ],
        type='ADE20KDataset'),
    num_workers=4,
    persistent_workers=True,
    sampler=dict(shuffle=True, type='InfiniteSampler'))
train_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(reduce_zero_label=True, type='LoadAnnotations'),
    dict(
        max_size=2560,
        resize_type='ResizeShortestEdge',
        scales=[
            320,
            384,
            448,
            512,
            576,
            640,
            704,
            768,
            832,
            896,
            960,
            1024,
            1088,
            1152,
            1216,
            1280,
        ],
        type='RandomChoiceResize'),
    dict(cat_max_ratio=0.75, crop_size=(
        640,
        640,
    ), type='RandomCrop'),
    dict(prob=0.5, type='RandomFlip'),
    dict(type='PhotoMetricDistortion'),
    dict(type='PackSegInputs'),
]
tta_model = dict(type='SegTTAModel')
tta_pipeline = [
    dict(backend_args=None, type='LoadImageFromFile'),
    dict(
        transforms=[
            [
                dict(keep_ratio=True, scale_factor=0.5, type='Resize'),
                dict(keep_ratio=True, scale_factor=0.75, type='Resize'),
                dict(keep_ratio=True, scale_factor=1.0, type='Resize'),
                dict(keep_ratio=True, scale_factor=1.25, type='Resize'),
                dict(keep_ratio=True, scale_factor=1.5, type='Resize'),
                dict(keep_ratio=True, scale_factor=1.75, type='Resize'),
            ],
            [
                dict(direction='horizontal', prob=0.0, type='RandomFlip'),
                dict(direction='horizontal', prob=1.0, type='RandomFlip'),
            ],
            [
                dict(type='LoadAnnotations'),
            ],
            [
                dict(type='PackSegInputs'),
            ],
        ],
        type='TestTimeAug'),
]
val_cfg = dict(type='ValLoop')
val_dataloader = dict(
    batch_size=1,
    dataset=dict(
        data_prefix=dict(
            img_path='images/validation',
            seg_map_path='annotations/validation'),
        data_root='data/ade/ADEChallengeData2016',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(keep_ratio=True, scale=(
                2560,
                640,
            ), type='Resize'),
            dict(reduce_zero_label=True, type='LoadAnnotations'),
            dict(type='PackSegInputs'),
        ],
        type='ADE20KDataset'),
    num_workers=4,
    persistent_workers=True,
    sampler=dict(shuffle=False, type='DefaultSampler'))
val_evaluator = dict(
    iou_metrics=[
        'mIoU',
    ], type='IoUMetric')
vis_backends = [
    dict(type='LocalVisBackend'),
]
visualizer = dict(
    name='visualizer',
    type='SegLocalVisualizer',
    vis_backends=[
        dict(type='LocalVisBackend'),
    ])
work_dir = '../corruptions/work_dirs/ade20k/mask2former/mask2former_swin-b-in1k-384x384-pre_8xb2-160k_ade20k-640x640/jpeg_compression'

09/21 12:47:41 - mmengine - INFO - Distributed training is not used, all SyncBatchNorm (SyncBN) layers in the model will be automatically reverted to BatchNormXd layers if they are used.
09/21 12:47:41 - mmengine - INFO - Hooks will be executed in the following order:
before_run:
(VERY_HIGH   ) RuntimeInfoHook                    
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
before_train:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_train_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(NORMAL      ) DistSamplerSeedHook                
 -------------------- 
before_train_iter:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_train_iter:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(NORMAL      ) SegVisualizationHook               
(BELOW_NORMAL) LoggerHook                         
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
after_train_epoch:
(NORMAL      ) IterTimerHook                      
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_val:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
before_val_epoch:
(NORMAL      ) IterTimerHook                      
 -------------------- 
before_val_iter:
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_val_iter:
(NORMAL      ) IterTimerHook                      
(NORMAL      ) SegVisualizationHook               
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_val_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
after_val:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
after_train:
(VERY_HIGH   ) RuntimeInfoHook                    
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_test:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
before_test_epoch:
(NORMAL      ) IterTimerHook                      
 -------------------- 
before_test_iter:
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_test_iter:
(NORMAL      ) IterTimerHook                      
(NORMAL      ) SegVisualizationHook               
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_test_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_test:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
after_run:
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
09/21 12:47:43 - mmengine - WARNING - The prefix is not set in metric class IoUMetric.
Loads checkpoint by local backend from path: ../checkpoint_files/ade20k/mask2former/mask2former_swin-b-in1k-384x384-pre_8xb2-160k_ade20k-640x640_20221129_125118-a4a086d2.pth
09/21 12:47:46 - mmengine - INFO - Load checkpoint from ../checkpoint_files/ade20k/mask2former/mask2former_swin-b-in1k-384x384-pre_8xb2-160k_ade20k-640x640_20221129_125118-a4a086d2.pth
09/21 12:49:47 - mmengine - INFO - Iter(test) [  50/2000]    eta: 1:18:12  time: 0.4021  data_time: 0.0018  memory: 17181  
09/21 12:50:06 - mmengine - INFO - Iter(test) [ 100/2000]    eta: 0:44:20  time: 0.4213  data_time: 0.0024  memory: 17180  
09/21 12:50:21 - mmengine - INFO - Iter(test) [ 150/2000]    eta: 0:31:43  time: 0.2874  data_time: 0.0018  memory: 17150  
09/21 12:50:35 - mmengine - INFO - Iter(test) [ 200/2000]    eta: 0:25:18  time: 0.3597  data_time: 0.0023  memory: 17194  
09/21 12:50:52 - mmengine - INFO - Iter(test) [ 250/2000]    eta: 0:21:37  time: 0.2311  data_time: 0.0017  memory: 17202  
09/21 12:51:07 - mmengine - INFO - Iter(test) [ 300/2000]    eta: 0:18:56  time: 0.1400  data_time: 0.0019  memory: 17180  
09/21 12:51:21 - mmengine - INFO - Iter(test) [ 350/2000]    eta: 0:16:52  time: 0.2744  data_time: 0.0017  memory: 17178  
09/21 12:51:31 - mmengine - INFO - Iter(test) [ 400/2000]    eta: 0:14:59  time: 0.1541  data_time: 0.0016  memory: 17177  
09/21 12:51:40 - mmengine - INFO - Iter(test) [ 450/2000]    eta: 0:13:22  time: 0.1857  data_time: 0.0017  memory: 17147  
09/21 12:51:49 - mmengine - INFO - Iter(test) [ 500/2000]    eta: 0:12:08  time: 0.2170  data_time: 0.0035  memory: 17149  
09/21 12:51:58 - mmengine - INFO - Iter(test) [ 550/2000]    eta: 0:11:04  time: 0.2566  data_time: 0.0019  memory: 17179  
09/21 12:52:05 - mmengine - INFO - Iter(test) [ 600/2000]    eta: 0:10:03  time: 0.1397  data_time: 0.0019  memory: 3938  
09/21 12:52:16 - mmengine - INFO - Iter(test) [ 650/2000]    eta: 0:09:20  time: 0.2659  data_time: 0.0015  memory: 17181  
09/21 12:52:29 - mmengine - INFO - Iter(test) [ 700/2000]    eta: 0:08:44  time: 0.2005  data_time: 0.0019  memory: 17177  
09/21 12:52:41 - mmengine - INFO - Iter(test) [ 750/2000]    eta: 0:08:10  time: 0.5614  data_time: 0.0017  memory: 17184  
09/21 12:52:50 - mmengine - INFO - Iter(test) [ 800/2000]    eta: 0:07:34  time: 0.1400  data_time: 0.0041  memory: 17151  
09/21 12:52:56 - mmengine - INFO - Iter(test) [ 850/2000]    eta: 0:06:59  time: 0.1379  data_time: 0.0019  memory: 1428  
09/21 12:53:05 - mmengine - INFO - Iter(test) [ 900/2000]    eta: 0:06:29  time: 0.1842  data_time: 0.0016  memory: 17138  
09/21 12:53:16 - mmengine - INFO - Iter(test) [ 950/2000]    eta: 0:06:04  time: 0.2983  data_time: 0.0018  memory: 17133  
09/21 12:53:23 - mmengine - INFO - Iter(test) [1000/2000]    eta: 0:05:36  time: 0.1306  data_time: 0.0017  memory: 17096  
09/21 12:53:32 - mmengine - INFO - Iter(test) [1050/2000]    eta: 0:05:12  time: 0.2183  data_time: 0.0017  memory: 17182  
09/21 12:53:42 - mmengine - INFO - Iter(test) [1100/2000]    eta: 0:04:50  time: 0.1340  data_time: 0.0018  memory: 17175  
09/21 12:53:49 - mmengine - INFO - Iter(test) [1150/2000]    eta: 0:04:27  time: 0.1343  data_time: 0.0017  memory: 17117  
09/21 12:53:56 - mmengine - INFO - Iter(test) [1200/2000]    eta: 0:04:06  time: 0.1313  data_time: 0.0016  memory: 17113  
09/21 12:54:10 - mmengine - INFO - Iter(test) [1250/2000]    eta: 0:03:49  time: 0.6177  data_time: 0.0224  memory: 17172  
09/21 12:54:17 - mmengine - INFO - Iter(test) [1300/2000]    eta: 0:03:29  time: 0.1349  data_time: 0.0017  memory: 1430  
09/21 12:54:25 - mmengine - INFO - Iter(test) [1350/2000]    eta: 0:03:11  time: 0.1279  data_time: 0.0017  memory: 17110  
09/21 12:54:35 - mmengine - INFO - Iter(test) [1400/2000]    eta: 0:02:54  time: 0.1545  data_time: 0.0016  memory: 17154  
09/21 12:54:43 - mmengine - INFO - Iter(test) [1450/2000]    eta: 0:02:37  time: 0.1985  data_time: 0.0017  memory: 17130  
09/21 12:54:50 - mmengine - INFO - Iter(test) [1500/2000]    eta: 0:02:21  time: 0.1292  data_time: 0.0017  memory: 17125  
09/21 12:54:58 - mmengine - INFO - Iter(test) [1550/2000]    eta: 0:02:05  time: 0.1373  data_time: 0.0017  memory: 17154  
09/21 12:55:05 - mmengine - INFO - Iter(test) [1600/2000]    eta: 0:01:49  time: 0.1315  data_time: 0.0017  memory: 1425  
09/21 12:55:13 - mmengine - INFO - Iter(test) [1650/2000]    eta: 0:01:34  time: 0.1264  data_time: 0.0016  memory: 17192  
09/21 12:55:24 - mmengine - INFO - Iter(test) [1700/2000]    eta: 0:01:20  time: 0.1360  data_time: 0.0019  memory: 17151  
09/21 12:55:32 - mmengine - INFO - Iter(test) [1750/2000]    eta: 0:01:06  time: 0.1324  data_time: 0.0016  memory: 17111  
09/21 12:55:40 - mmengine - INFO - Iter(test) [1800/2000]    eta: 0:00:52  time: 0.1369  data_time: 0.0019  memory: 17114  
09/21 12:55:47 - mmengine - INFO - Iter(test) [1850/2000]    eta: 0:00:38  time: 0.1366  data_time: 0.0019  memory: 1317  
09/21 12:55:54 - mmengine - INFO - Iter(test) [1900/2000]    eta: 0:00:25  time: 0.1961  data_time: 0.0017  memory: 17182  
09/21 12:56:05 - mmengine - INFO - Iter(test) [1950/2000]    eta: 0:00:12  time: 0.3857  data_time: 0.0038  memory: 17197  
09/21 12:56:14 - mmengine - INFO - Iter(test) [2000/2000]    eta: 0:00:00  time: 0.1240  data_time: 0.0016  memory: 17131  
09/21 12:56:14 - mmengine - INFO - per class results:
09/21 12:56:14 - mmengine - INFO - 
+---------------------+-------+-------+
|        Class        |  IoU  |  Acc  |
+---------------------+-------+-------+
|         wall        | 76.45 | 86.53 |
|       building      | 81.29 | 93.18 |
|         sky         | 93.65 | 97.21 |
|        floor        | 81.49 | 89.93 |
|         tree        |  74.1 | 84.47 |
|       ceiling       | 82.38 | 88.88 |
|         road        | 82.37 | 91.82 |
|         bed         | 87.93 | 95.36 |
|      windowpane     | 58.42 | 77.16 |
|        grass        | 70.24 | 82.07 |
|       cabinet       | 56.71 | 73.06 |
|       sidewalk      | 63.72 | 79.47 |
|        person       | 81.27 | 88.89 |
|        earth        | 38.31 | 53.11 |
|         door        | 41.05 | 54.31 |
|        table        | 60.98 | 75.17 |
|       mountain      | 54.85 | 72.31 |
|        plant        | 50.56 | 59.62 |
|       curtain       | 73.45 | 79.78 |
|        chair        | 56.13 | 68.04 |
|         car         | 84.57 | 90.88 |
|        water        | 50.01 | 61.45 |
|       painting      | 72.99 | 85.15 |
|         sofa        | 65.86 | 83.77 |
|        shelf        | 39.29 |  57.0 |
|        house        | 46.97 | 68.16 |
|         sea         | 55.67 | 84.31 |
|        mirror       | 65.85 |  78.7 |
|         rug         | 68.72 | 81.37 |
|        field        | 29.64 | 49.44 |
|       armchair      | 38.71 | 56.38 |
|         seat        | 59.53 | 83.18 |
|        fence        | 45.98 |  57.8 |
|         desk        | 48.65 | 74.63 |
|         rock        | 52.67 | 69.04 |
|       wardrobe      | 54.67 | 65.13 |
|         lamp        | 66.35 | 77.35 |
|       bathtub       | 72.49 | 83.01 |
|       railing       | 39.16 | 55.02 |
|       cushion       |  58.7 | 69.48 |
|         base        | 38.21 | 70.92 |
|         box         | 20.35 | 27.39 |
|        column       | 47.79 | 59.31 |
|      signboard      |  37.1 | 52.93 |
|   chest of drawers  | 29.65 | 52.27 |
|       counter       | 31.48 | 43.85 |
|         sand        | 35.88 | 51.69 |
|         sink        | 70.95 | 79.25 |
|      skyscraper     | 51.54 |  62.1 |
|      fireplace      | 69.62 | 84.29 |
|     refrigerator    |  71.0 | 81.55 |
|      grandstand     |  38.2 | 62.78 |
|         path        | 20.75 | 35.38 |
|        stairs       | 22.11 | 27.59 |
|        runway       | 66.64 | 78.01 |
|         case        | 44.24 | 61.55 |
|      pool table     | 84.38 | 95.28 |
|        pillow       | 59.23 | 69.56 |
|     screen door     |  53.2 | 54.27 |
|       stairway      | 29.86 | 50.21 |
|        river        |  8.19 | 20.44 |
|        bridge       | 66.42 | 84.88 |
|       bookcase      | 28.57 | 59.11 |
|        blind        |  30.7 | 31.93 |
|     coffee table    | 65.34 | 80.06 |
|        toilet       | 83.82 | 91.15 |
|        flower       | 36.95 | 44.84 |
|         book        | 49.21 | 67.77 |
|         hill        | 11.51 | 27.89 |
|        bench        | 44.08 | 55.54 |
|      countertop     | 61.11 | 76.74 |
|        stove        | 70.11 | 85.56 |
|         palm        | 47.92 | 60.95 |
|    kitchen island   | 41.43 | 72.06 |
|       computer      | 69.25 | 81.44 |
|     swivel chair    | 45.58 | 61.23 |
|         boat        | 61.02 | 88.06 |
|         bar         | 49.11 | 62.13 |
|    arcade machine   | 79.53 | 92.59 |
|        hovel        | 10.92 | 15.42 |
|         bus         | 89.36 | 95.89 |
|        towel        | 75.41 | 80.95 |
|        light        | 58.58 | 78.78 |
|        truck        |  42.0 | 57.96 |
|        tower        | 25.97 | 51.52 |
|      chandelier     | 69.91 |  80.5 |
|        awning       | 25.71 | 37.52 |
|     streetlight     | 29.52 | 45.77 |
|        booth        |  30.4 | 67.22 |
| television receiver | 60.43 | 72.92 |
|       airplane      | 47.58 | 72.13 |
|      dirt track     | 12.95 | 29.05 |
|       apparel       | 36.79 | 53.39 |
|         pole        | 26.86 | 37.38 |
|         land        |  5.78 |  7.34 |
|      bannister      |  15.8 | 26.97 |
|      escalator      | 38.86 | 43.57 |
|       ottoman       | 52.36 | 64.91 |
|        bottle       | 30.16 | 37.47 |
|        buffet       | 38.28 |  46.7 |
|        poster       | 36.05 | 50.16 |
|        stage        | 10.19 | 27.27 |
|         van         | 48.44 | 68.49 |
|         ship        | 88.14 | 95.33 |
|       fountain      | 26.57 |  29.7 |
|    conveyer belt    | 51.04 | 68.42 |
|        canopy       | 39.96 | 46.42 |
|        washer       | 67.99 | 74.54 |
|      plaything      | 13.52 | 27.49 |
|    swimming pool    | 31.17 | 47.21 |
|        stool        | 42.72 | 66.62 |
|        barrel       | 62.89 | 73.92 |
|        basket       | 32.98 | 41.95 |
|      waterfall      | 76.49 | 90.23 |
|         tent        | 80.84 | 98.49 |
|         bag         | 13.23 | 17.82 |
|       minibike      |  68.9 | 84.96 |
|        cradle       | 79.12 | 96.27 |
|         oven        | 25.93 |  31.6 |
|         ball        |  48.4 | 57.87 |
|         food        | 61.96 | 73.48 |
|         step        | 14.52 |  19.2 |
|         tank        | 45.77 | 51.04 |
|      trade name     |  29.0 | 37.61 |
|      microwave      |  85.1 | 94.82 |
|         pot         | 45.65 | 52.64 |
|        animal       | 59.88 | 61.65 |
|       bicycle       | 59.59 | 76.49 |
|         lake        | 44.35 | 63.73 |
|      dishwasher     |  60.6 | 70.41 |
|        screen       | 67.66 | 89.78 |
|       blanket       | 16.44 | 17.97 |
|      sculpture      | 42.83 | 61.68 |
|         hood        | 59.81 | 70.14 |
|        sconce       | 50.94 | 65.89 |
|         vase        | 40.28 | 58.15 |
|    traffic light    |  40.3 | 59.53 |
|         tray        | 16.82 | 19.32 |
|        ashcan       | 39.64 | 61.78 |
|         fan         | 59.97 | 80.56 |
|         pier        | 43.16 | 61.33 |
|      crt screen     |  1.04 |  2.73 |
|        plate        | 59.55 | 76.22 |
|       monitor       |  2.74 |  3.87 |
|    bulletin board   | 51.09 | 68.15 |
|        shower       |  3.08 | 18.93 |
|       radiator      |  62.3 | 72.19 |
|        glass        | 15.88 | 17.49 |
|        clock        | 28.69 | 36.78 |
|         flag        |  49.4 | 54.02 |
+---------------------+-------+-------+
09/21 12:56:15 - mmengine - INFO - Iter(test) [2000/2000]    aAcc: 82.2800  mIoU: 49.2000  mAcc: 62.4100  data_time: 0.0033  time: 0.2532
Finished processing corruption type: jpeg_compression
Processing corruption type: elastic_transform
09/21 12:58:37 - mmengine - INFO - 
------------------------------------------------------------
System environment:
    sys.platform: linux
    Python: 3.10.13 | packaged by conda-forge | (main, Dec 23 2023, 15:36:39) [GCC 12.3.0]
    CUDA available: True
    MUSA available: False
    numpy_random_seed: 1559995286
    GPU 0: Tesla V100-SXM2-32GB
    CUDA_HOME: /opt/bwhpc/common/devel/cuda/11.7
    NVCC: Cuda compilation tools, release 11.7, V11.7.99
    GCC: gcc (GCC) 8.5.0 20210514 (Red Hat 8.5.0-18)
    PyTorch: 1.13.1
    PyTorch compiling details: PyTorch built with:
  - GCC 9.3
  - C++ Version: 201402
  - Intel(R) oneAPI Math Kernel Library Version 2023.1-Product Build 20230303 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v2.6.0 (Git Hash 52b5f107dd9cf10910aaa19cb47f3abf9b349815)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - LAPACK is enabled (usually provided by MKL)
  - NNPACK is enabled
  - CPU capability usage: AVX2
  - CUDA Runtime 11.7
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_61,code=sm_61;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86;-gencode;arch=compute_37,code=compute_37
  - CuDNN 8.5
  - Magma 2.6.1
  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.7, CUDNN_VERSION=8.5.0, CXX_COMPILER=/opt/rh/devtoolset-9/root/usr/bin/c++, CXX_FLAGS= -fabi-version=11 -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -DEDGE_PROFILER_USE_KINETO -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Werror=non-virtual-dtor -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wunused-local-typedefs -Wno-unused-parameter -Wno-unused-function -Wno-unused-result -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Werror=cast-function-type -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.13.1, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, USE_ROCM=OFF, 

    TorchVision: 0.14.1
    OpenCV: 3.4.18
    MMEngine: 0.10.4

Runtime environment:
    cudnn_benchmark: True
    mp_cfg: {'mp_start_method': 'fork', 'opencv_num_threads': 0}
    dist_cfg: {'backend': 'nccl'}
    seed: 1559995286
    Distributed launcher: none
    Distributed training: False
    GPU number: 1
------------------------------------------------------------

09/21 12:58:38 - mmengine - INFO - Config:
auto_scale_lr = dict(base_batch_size=16, enable=False)
backbone_embed_multi = dict(decay_mult=0.0, lr_mult=0.1)
backbone_norm_multi = dict(decay_mult=0.0, lr_mult=0.1)
crop_size = (
    640,
    640,
)
custom_keys = dict({
    'absolute_pos_embed':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone':
    dict(decay_mult=1.0, lr_mult=0.1),
    'backbone.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.patch_embed.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.0.blocks.0.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.0.blocks.1.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.0.downsample.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.1.blocks.0.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.1.blocks.1.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.1.downsample.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.0.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.1.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.10.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.11.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.12.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.13.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.14.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.15.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.16.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.17.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.2.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.3.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.4.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.5.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.6.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.7.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.8.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.9.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.downsample.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.3.blocks.0.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.3.blocks.1.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'level_embed':
    dict(decay_mult=0.0, lr_mult=1.0),
    'query_embed':
    dict(decay_mult=0.0, lr_mult=1.0),
    'query_feat':
    dict(decay_mult=0.0, lr_mult=1.0),
    'relative_position_bias_table':
    dict(decay_mult=0.0, lr_mult=0.1)
})
data_root = 'data/ade/ADEChallengeData2016'
dataset_type = 'ADE20KDataset'
default_hooks = dict(
    checkpoint=dict(
        by_epoch=False, interval=5000, save_best='mIoU',
        type='CheckpointHook'),
    logger=dict(interval=50, log_metric_by_epoch=False, type='LoggerHook'),
    param_scheduler=dict(type='ParamSchedulerHook'),
    sampler_seed=dict(type='DistSamplerSeedHook'),
    timer=dict(type='IterTimerHook'),
    visualization=dict(type='SegVisualizationHook'))
default_scope = 'mmseg'
depths = [
    2,
    2,
    18,
    2,
]
embed_multi = dict(decay_mult=0.0, lr_mult=1.0)
env_cfg = dict(
    cudnn_benchmark=True,
    dist_cfg=dict(backend='nccl'),
    mp_cfg=dict(mp_start_method='fork', opencv_num_threads=0))
img_ratios = [
    0.5,
    0.75,
    1.0,
    1.25,
    1.5,
    1.75,
]
launcher = 'none'
load_from = '../checkpoint_files/ade20k/mask2former/mask2former_swin-b-in1k-384x384-pre_8xb2-160k_ade20k-640x640_20221129_125118-a4a086d2.pth'
log_level = 'INFO'
log_processor = dict(by_epoch=False)
model = dict(
    backbone=dict(
        attn_drop_rate=0.0,
        depths=[
            2,
            2,
            18,
            2,
        ],
        drop_path_rate=0.3,
        drop_rate=0.0,
        embed_dims=128,
        frozen_stages=-1,
        init_cfg=dict(
            checkpoint=
            'https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/swin/swin_base_patch4_window12_384_20220317-55b0104a.pth',
            type='Pretrained'),
        mlp_ratio=4,
        num_heads=[
            4,
            8,
            16,
            32,
        ],
        out_indices=(
            0,
            1,
            2,
            3,
        ),
        patch_norm=True,
        pretrain_img_size=384,
        qk_scale=None,
        qkv_bias=True,
        type='SwinTransformer',
        window_size=12,
        with_cp=False),
    data_preprocessor=dict(
        bgr_to_rgb=True,
        corruption='elastic_transform',
        mean=[
            123.675,
            116.28,
            103.53,
        ],
        pad_val=0,
        seg_pad_val=255,
        size=(
            640,
            640,
        ),
        std=[
            58.395,
            57.12,
            57.375,
        ],
        type='SegDataPreProcessor'),
    decode_head=dict(
        align_corners=False,
        enforce_decoder_input_project=False,
        feat_channels=256,
        in_channels=[
            128,
            256,
            512,
            1024,
        ],
        loss_cls=dict(
            class_weight=[
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                0.1,
            ],
            loss_weight=2.0,
            reduction='mean',
            type='mmdet.CrossEntropyLoss',
            use_sigmoid=False),
        loss_dice=dict(
            activate=True,
            eps=1.0,
            loss_weight=5.0,
            naive_dice=True,
            reduction='mean',
            type='mmdet.DiceLoss',
            use_sigmoid=True),
        loss_mask=dict(
            loss_weight=5.0,
            reduction='mean',
            type='mmdet.CrossEntropyLoss',
            use_sigmoid=True),
        num_classes=150,
        num_queries=100,
        num_transformer_feat_level=3,
        out_channels=256,
        pixel_decoder=dict(
            act_cfg=dict(type='ReLU'),
            encoder=dict(
                init_cfg=None,
                layer_cfg=dict(
                    ffn_cfg=dict(
                        act_cfg=dict(inplace=True, type='ReLU'),
                        embed_dims=256,
                        feedforward_channels=1024,
                        ffn_drop=0.0,
                        num_fcs=2),
                    self_attn_cfg=dict(
                        batch_first=True,
                        dropout=0.0,
                        embed_dims=256,
                        im2col_step=64,
                        init_cfg=None,
                        norm_cfg=None,
                        num_heads=8,
                        num_levels=3,
                        num_points=4)),
                num_layers=6),
            init_cfg=None,
            norm_cfg=dict(num_groups=32, type='GN'),
            num_outs=3,
            positional_encoding=dict(normalize=True, num_feats=128),
            type='mmdet.MSDeformAttnPixelDecoder'),
        positional_encoding=dict(normalize=True, num_feats=128),
        strides=[
            4,
            8,
            16,
            32,
        ],
        train_cfg=dict(
            assigner=dict(
                match_costs=[
                    dict(type='mmdet.ClassificationCost', weight=2.0),
                    dict(
                        type='mmdet.CrossEntropyLossCost',
                        use_sigmoid=True,
                        weight=5.0),
                    dict(
                        eps=1.0,
                        pred_act=True,
                        type='mmdet.DiceCost',
                        weight=5.0),
                ],
                type='mmdet.HungarianAssigner'),
            importance_sample_ratio=0.75,
            num_points=12544,
            oversample_ratio=3.0,
            sampler=dict(type='mmdet.MaskPseudoSampler')),
        transformer_decoder=dict(
            init_cfg=None,
            layer_cfg=dict(
                cross_attn_cfg=dict(
                    attn_drop=0.0,
                    batch_first=True,
                    dropout_layer=None,
                    embed_dims=256,
                    num_heads=8,
                    proj_drop=0.0),
                ffn_cfg=dict(
                    act_cfg=dict(inplace=True, type='ReLU'),
                    add_identity=True,
                    dropout_layer=None,
                    embed_dims=256,
                    feedforward_channels=2048,
                    ffn_drop=0.0,
                    num_fcs=2),
                self_attn_cfg=dict(
                    attn_drop=0.0,
                    batch_first=True,
                    dropout_layer=None,
                    embed_dims=256,
                    num_heads=8,
                    proj_drop=0.0)),
            num_layers=9,
            return_intermediate=True),
        type='Mask2FormerHead'),
    test_cfg=dict(mode='whole'),
    train_cfg=dict(),
    type='EncoderDecoder')
num_classes = 150
optim_wrapper = dict(
    clip_grad=dict(max_norm=0.01, norm_type=2),
    optimizer=dict(
        betas=(
            0.9,
            0.999,
        ),
        eps=1e-08,
        lr=0.0001,
        type='AdamW',
        weight_decay=0.05),
    paramwise_cfg=dict(
        custom_keys=dict({
            'absolute_pos_embed':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone':
            dict(decay_mult=1.0, lr_mult=0.1),
            'backbone.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.patch_embed.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.0.blocks.0.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.0.blocks.1.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.0.downsample.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.1.blocks.0.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.1.blocks.1.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.1.downsample.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.0.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.1.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.10.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.11.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.12.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.13.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.14.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.15.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.16.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.17.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.2.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.3.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.4.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.5.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.6.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.7.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.8.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.9.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.downsample.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.3.blocks.0.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.3.blocks.1.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'level_embed':
            dict(decay_mult=0.0, lr_mult=1.0),
            'query_embed':
            dict(decay_mult=0.0, lr_mult=1.0),
            'query_feat':
            dict(decay_mult=0.0, lr_mult=1.0),
            'relative_position_bias_table':
            dict(decay_mult=0.0, lr_mult=0.1)
        }),
        norm_decay_mult=0.0),
    type='OptimWrapper')
optimizer = dict(
    betas=(
        0.9,
        0.999,
    ),
    eps=1e-08,
    lr=0.0001,
    type='AdamW',
    weight_decay=0.05)
param_scheduler = [
    dict(
        begin=0,
        by_epoch=False,
        end=160000,
        eta_min=0,
        power=0.9,
        type='PolyLR'),
]
pretrained = 'https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/swin/swin_base_patch4_window12_384_20220317-55b0104a.pth'
resume = False
test_cfg = dict(type='TestLoop')
test_dataloader = dict(
    batch_size=1,
    dataset=dict(
        data_prefix=dict(
            img_path='images/validation',
            seg_map_path='annotations/validation'),
        data_root='data/ade/ADEChallengeData2016',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(keep_ratio=True, scale=(
                2560,
                640,
            ), type='Resize'),
            dict(reduce_zero_label=True, type='LoadAnnotations'),
            dict(type='PackSegInputs'),
        ],
        type='ADE20KDataset'),
    num_workers=4,
    persistent_workers=True,
    sampler=dict(shuffle=False, type='DefaultSampler'))
test_evaluator = dict(
    iou_metrics=[
        'mIoU',
    ], type='IoUMetric')
test_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(keep_ratio=True, scale=(
        2560,
        640,
    ), type='Resize'),
    dict(reduce_zero_label=True, type='LoadAnnotations'),
    dict(type='PackSegInputs'),
]
train_cfg = dict(
    max_iters=160000, type='IterBasedTrainLoop', val_interval=5000)
train_dataloader = dict(
    batch_size=2,
    dataset=dict(
        data_prefix=dict(
            img_path='images/training', seg_map_path='annotations/training'),
        data_root='data/ade/ADEChallengeData2016',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(reduce_zero_label=True, type='LoadAnnotations'),
            dict(
                max_size=2560,
                resize_type='ResizeShortestEdge',
                scales=[
                    320,
                    384,
                    448,
                    512,
                    576,
                    640,
                    704,
                    768,
                    832,
                    896,
                    960,
                    1024,
                    1088,
                    1152,
                    1216,
                    1280,
                ],
                type='RandomChoiceResize'),
            dict(
                cat_max_ratio=0.75, crop_size=(
                    640,
                    640,
                ), type='RandomCrop'),
            dict(prob=0.5, type='RandomFlip'),
            dict(type='PhotoMetricDistortion'),
            dict(type='PackSegInputs'),
        ],
        type='ADE20KDataset'),
    num_workers=4,
    persistent_workers=True,
    sampler=dict(shuffle=True, type='InfiniteSampler'))
train_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(reduce_zero_label=True, type='LoadAnnotations'),
    dict(
        max_size=2560,
        resize_type='ResizeShortestEdge',
        scales=[
            320,
            384,
            448,
            512,
            576,
            640,
            704,
            768,
            832,
            896,
            960,
            1024,
            1088,
            1152,
            1216,
            1280,
        ],
        type='RandomChoiceResize'),
    dict(cat_max_ratio=0.75, crop_size=(
        640,
        640,
    ), type='RandomCrop'),
    dict(prob=0.5, type='RandomFlip'),
    dict(type='PhotoMetricDistortion'),
    dict(type='PackSegInputs'),
]
tta_model = dict(type='SegTTAModel')
tta_pipeline = [
    dict(backend_args=None, type='LoadImageFromFile'),
    dict(
        transforms=[
            [
                dict(keep_ratio=True, scale_factor=0.5, type='Resize'),
                dict(keep_ratio=True, scale_factor=0.75, type='Resize'),
                dict(keep_ratio=True, scale_factor=1.0, type='Resize'),
                dict(keep_ratio=True, scale_factor=1.25, type='Resize'),
                dict(keep_ratio=True, scale_factor=1.5, type='Resize'),
                dict(keep_ratio=True, scale_factor=1.75, type='Resize'),
            ],
            [
                dict(direction='horizontal', prob=0.0, type='RandomFlip'),
                dict(direction='horizontal', prob=1.0, type='RandomFlip'),
            ],
            [
                dict(type='LoadAnnotations'),
            ],
            [
                dict(type='PackSegInputs'),
            ],
        ],
        type='TestTimeAug'),
]
val_cfg = dict(type='ValLoop')
val_dataloader = dict(
    batch_size=1,
    dataset=dict(
        data_prefix=dict(
            img_path='images/validation',
            seg_map_path='annotations/validation'),
        data_root='data/ade/ADEChallengeData2016',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(keep_ratio=True, scale=(
                2560,
                640,
            ), type='Resize'),
            dict(reduce_zero_label=True, type='LoadAnnotations'),
            dict(type='PackSegInputs'),
        ],
        type='ADE20KDataset'),
    num_workers=4,
    persistent_workers=True,
    sampler=dict(shuffle=False, type='DefaultSampler'))
val_evaluator = dict(
    iou_metrics=[
        'mIoU',
    ], type='IoUMetric')
vis_backends = [
    dict(type='LocalVisBackend'),
]
visualizer = dict(
    name='visualizer',
    type='SegLocalVisualizer',
    vis_backends=[
        dict(type='LocalVisBackend'),
    ])
work_dir = '../corruptions/work_dirs/ade20k/mask2former/mask2former_swin-b-in1k-384x384-pre_8xb2-160k_ade20k-640x640/elastic_transform'

09/21 12:59:49 - mmengine - INFO - Distributed training is not used, all SyncBatchNorm (SyncBN) layers in the model will be automatically reverted to BatchNormXd layers if they are used.
09/21 12:59:49 - mmengine - INFO - Hooks will be executed in the following order:
before_run:
(VERY_HIGH   ) RuntimeInfoHook                    
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
before_train:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_train_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(NORMAL      ) DistSamplerSeedHook                
 -------------------- 
before_train_iter:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_train_iter:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(NORMAL      ) SegVisualizationHook               
(BELOW_NORMAL) LoggerHook                         
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
after_train_epoch:
(NORMAL      ) IterTimerHook                      
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_val:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
before_val_epoch:
(NORMAL      ) IterTimerHook                      
 -------------------- 
before_val_iter:
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_val_iter:
(NORMAL      ) IterTimerHook                      
(NORMAL      ) SegVisualizationHook               
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_val_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
after_val:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
after_train:
(VERY_HIGH   ) RuntimeInfoHook                    
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_test:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
before_test_epoch:
(NORMAL      ) IterTimerHook                      
 -------------------- 
before_test_iter:
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_test_iter:
(NORMAL      ) IterTimerHook                      
(NORMAL      ) SegVisualizationHook               
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_test_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_test:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
after_run:
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
09/21 12:59:51 - mmengine - WARNING - The prefix is not set in metric class IoUMetric.
Loads checkpoint by local backend from path: ../checkpoint_files/ade20k/mask2former/mask2former_swin-b-in1k-384x384-pre_8xb2-160k_ade20k-640x640_20221129_125118-a4a086d2.pth
09/21 12:59:54 - mmengine - INFO - Load checkpoint from ../checkpoint_files/ade20k/mask2former/mask2former_swin-b-in1k-384x384-pre_8xb2-160k_ade20k-640x640_20221129_125118-a4a086d2.pth
09/21 13:03:07 - mmengine - INFO - Iter(test) [  50/2000]    eta: 2:05:05  time: 2.0631  data_time: 0.0019  memory: 17181  
09/21 13:04:52 - mmengine - INFO - Iter(test) [ 100/2000]    eta: 1:34:21  time: 2.0284  data_time: 0.0030  memory: 17180  
09/21 13:06:27 - mmengine - INFO - Iter(test) [ 150/2000]    eta: 1:20:41  time: 1.9503  data_time: 0.0021  memory: 17150  
09/21 13:08:03 - mmengine - INFO - Iter(test) [ 200/2000]    eta: 1:13:16  time: 1.9402  data_time: 0.0029  memory: 17194  
09/21 13:09:36 - mmengine - INFO - Iter(test) [ 250/2000]    eta: 1:07:54  time: 1.8004  data_time: 0.0017  memory: 17202  
09/21 13:11:07 - mmengine - INFO - Iter(test) [ 300/2000]    eta: 1:03:32  time: 1.7594  data_time: 0.0019  memory: 17180  
09/21 13:12:41 - mmengine - INFO - Iter(test) [ 350/2000]    eta: 1:00:14  time: 1.7709  data_time: 0.0017  memory: 17178  
09/21 13:14:04 - mmengine - INFO - Iter(test) [ 400/2000]    eta: 0:56:38  time: 1.6570  data_time: 0.0017  memory: 17177  
09/21 13:15:20 - mmengine - INFO - Iter(test) [ 450/2000]    eta: 0:53:06  time: 1.5441  data_time: 0.0017  memory: 17147  
09/21 13:16:41 - mmengine - INFO - Iter(test) [ 500/2000]    eta: 0:50:21  time: 1.6309  data_time: 0.0016  memory: 17149  
09/21 13:18:08 - mmengine - INFO - Iter(test) [ 550/2000]    eta: 0:48:02  time: 1.7681  data_time: 0.0018  memory: 17179  
09/21 13:19:36 - mmengine - INFO - Iter(test) [ 600/2000]    eta: 0:45:56  time: 1.6476  data_time: 0.0019  memory: 3938  
09/21 13:20:59 - mmengine - INFO - Iter(test) [ 650/2000]    eta: 0:43:45  time: 1.7327  data_time: 0.0016  memory: 17181  
09/21 13:22:52 - mmengine - INFO - Iter(test) [ 700/2000]    eta: 0:42:38  time: 2.7467  data_time: 0.0457  memory: 17177  
09/21 13:24:25 - mmengine - INFO - Iter(test) [ 750/2000]    eta: 0:40:50  time: 2.1149  data_time: 0.0051  memory: 17184  
09/21 13:25:48 - mmengine - INFO - Iter(test) [ 800/2000]    eta: 0:38:50  time: 1.7477  data_time: 0.0025  memory: 17151  
09/21 13:27:20 - mmengine - INFO - Iter(test) [ 850/2000]    eta: 0:37:06  time: 1.9264  data_time: 0.0057  memory: 1428  
09/21 13:28:43 - mmengine - INFO - Iter(test) [ 900/2000]    eta: 0:35:12  time: 1.6423  data_time: 0.0031  memory: 17138  
09/21 13:30:15 - mmengine - INFO - Iter(test) [ 950/2000]    eta: 0:33:32  time: 1.8532  data_time: 0.0019  memory: 17133  
09/21 13:31:39 - mmengine - INFO - Iter(test) [1000/2000]    eta: 0:31:44  time: 1.6546  data_time: 0.0018  memory: 17096  
09/21 13:33:08 - mmengine - INFO - Iter(test) [1050/2000]    eta: 0:30:03  time: 1.8542  data_time: 0.0018  memory: 17182  
09/21 13:34:38 - mmengine - INFO - Iter(test) [1100/2000]    eta: 0:28:24  time: 1.6966  data_time: 0.0019  memory: 17175  
09/21 13:36:03 - mmengine - INFO - Iter(test) [1150/2000]    eta: 0:26:43  time: 1.7673  data_time: 0.0019  memory: 17117  
09/21 13:37:32 - mmengine - INFO - Iter(test) [1200/2000]    eta: 0:25:04  time: 1.6693  data_time: 0.0036  memory: 17113  
09/21 13:38:58 - mmengine - INFO - Iter(test) [1250/2000]    eta: 0:23:25  time: 1.7716  data_time: 0.0019  memory: 17172  
09/21 13:40:19 - mmengine - INFO - Iter(test) [1300/2000]    eta: 0:21:45  time: 1.7505  data_time: 0.0027  memory: 1430  
09/21 13:41:46 - mmengine - INFO - Iter(test) [1350/2000]    eta: 0:20:08  time: 1.6338  data_time: 0.0058  memory: 17110  
09/21 13:43:14 - mmengine - INFO - Iter(test) [1400/2000]    eta: 0:18:34  time: 1.8121  data_time: 0.0023  memory: 17154  
09/21 13:44:33 - mmengine - INFO - Iter(test) [1450/2000]    eta: 0:16:55  time: 1.6473  data_time: 0.0016  memory: 17130  
09/21 13:45:58 - mmengine - INFO - Iter(test) [1500/2000]    eta: 0:15:21  time: 1.6335  data_time: 0.0019  memory: 17125  
09/21 13:47:29 - mmengine - INFO - Iter(test) [1550/2000]    eta: 0:13:48  time: 1.7348  data_time: 0.0018  memory: 17154  
09/21 13:48:59 - mmengine - INFO - Iter(test) [1600/2000]    eta: 0:12:16  time: 1.6908  data_time: 0.0019  memory: 1425  
09/21 13:50:25 - mmengine - INFO - Iter(test) [1650/2000]    eta: 0:10:42  time: 1.5802  data_time: 0.0016  memory: 17192  
09/21 13:51:59 - mmengine - INFO - Iter(test) [1700/2000]    eta: 0:09:11  time: 1.7293  data_time: 0.0029  memory: 17151  
09/21 13:53:27 - mmengine - INFO - Iter(test) [1750/2000]    eta: 0:07:38  time: 1.7297  data_time: 0.0019  memory: 17111  
09/21 13:54:50 - mmengine - INFO - Iter(test) [1800/2000]    eta: 0:06:06  time: 1.7381  data_time: 0.0023  memory: 17114  
09/21 13:56:17 - mmengine - INFO - Iter(test) [1850/2000]    eta: 0:04:34  time: 1.7141  data_time: 0.0019  memory: 1317  
09/21 13:57:41 - mmengine - INFO - Iter(test) [1900/2000]    eta: 0:03:02  time: 1.7154  data_time: 0.0017  memory: 17182  
09/21 13:59:09 - mmengine - INFO - Iter(test) [1950/2000]    eta: 0:01:31  time: 1.6497  data_time: 0.0040  memory: 17197  
09/21 14:00:33 - mmengine - INFO - Iter(test) [2000/2000]    eta: 0:00:00  time: 1.5385  data_time: 0.0015  memory: 17131  
09/21 14:00:33 - mmengine - INFO - per class results:
09/21 14:00:33 - mmengine - INFO - 
+---------------------+-------+-------+
|        Class        |  IoU  |  Acc  |
+---------------------+-------+-------+
|         wall        | 65.76 | 77.66 |
|       building      | 75.33 | 88.55 |
|         sky         | 85.67 | 92.49 |
|        floor        | 70.69 | 81.03 |
|         tree        | 65.03 | 78.54 |
|       ceiling       |  72.6 | 83.91 |
|         road        | 76.17 | 86.76 |
|         bed         | 77.76 | 89.28 |
|      windowpane     |  49.6 | 69.46 |
|        grass        | 64.42 | 78.13 |
|       cabinet       | 49.33 | 64.61 |
|       sidewalk      | 53.16 | 68.29 |
|        person       | 64.83 | 78.28 |
|        earth        | 35.81 | 51.58 |
|         door        | 37.61 | 50.72 |
|        table        | 46.25 | 63.45 |
|       mountain      | 55.84 | 71.86 |
|        plant        | 44.63 | 58.75 |
|       curtain       | 59.47 | 76.51 |
|        chair        | 42.82 | 58.78 |
|         car         | 66.24 | 79.23 |
|        water        | 52.33 | 66.31 |
|       painting      | 49.96 | 71.57 |
|         sofa        | 51.99 | 72.84 |
|        shelf        | 31.55 | 49.51 |
|        house        | 46.31 | 63.62 |
|         sea         | 55.04 | 78.28 |
|        mirror       | 55.25 | 77.15 |
|         rug         | 55.45 | 70.27 |
|        field        | 25.29 | 44.34 |
|       armchair      | 31.34 | 47.91 |
|         seat        |  56.4 | 77.53 |
|        fence        | 35.83 |  53.5 |
|         desk        | 43.09 | 63.46 |
|         rock        | 37.09 |  58.8 |
|       wardrobe      | 48.51 | 62.05 |
|         lamp        | 33.23 | 50.88 |
|       bathtub       | 67.21 | 77.98 |
|       railing       | 30.28 | 49.14 |
|       cushion       | 38.94 | 50.79 |
|         base        | 31.76 | 65.28 |
|         box         | 19.74 | 28.97 |
|        column       | 29.71 | 44.45 |
|      signboard      |  25.7 | 43.14 |
|   chest of drawers  | 26.19 | 52.21 |
|       counter       | 29.67 | 37.96 |
|         sand        |  32.1 | 49.56 |
|         sink        | 52.92 | 66.91 |
|      skyscraper     | 40.45 | 53.56 |
|      fireplace      |  60.4 | 78.89 |
|     refrigerator    | 65.15 | 74.23 |
|      grandstand     | 43.86 | 68.45 |
|         path        | 20.12 | 30.85 |
|        stairs       | 27.03 | 35.41 |
|        runway       | 64.03 |  76.8 |
|         case        |  49.7 | 73.58 |
|      pool table     | 81.28 | 90.58 |
|        pillow       | 44.37 | 63.23 |
|     screen door     | 64.81 | 74.21 |
|       stairway      | 25.65 | 46.35 |
|        river        |  9.21 | 22.73 |
|        bridge       | 54.23 | 68.02 |
|       bookcase      | 25.62 | 46.38 |
|        blind        | 32.11 | 36.69 |
|     coffee table    | 52.02 | 71.21 |
|        toilet       | 63.92 | 76.13 |
|        flower       | 29.81 | 41.81 |
|         book        | 35.72 | 57.41 |
|         hill        |  4.74 |  8.63 |
|        bench        | 37.34 | 48.55 |
|      countertop     | 42.36 | 59.33 |
|        stove        | 59.94 | 74.96 |
|         palm        | 34.07 | 50.01 |
|    kitchen island   | 35.88 | 63.56 |
|       computer      | 55.33 | 70.04 |
|     swivel chair    | 34.61 |  49.1 |
|         boat        | 52.02 |  82.0 |
|         bar         | 39.29 | 50.75 |
|    arcade machine   |  52.5 | 79.48 |
|        hovel        | 10.19 | 14.64 |
|         bus         | 77.04 | 89.81 |
|        towel        | 51.66 | 68.78 |
|        light        | 17.84 |  32.2 |
|        truck        | 27.64 | 49.54 |
|        tower        | 24.11 | 44.09 |
|      chandelier     | 47.83 |  63.6 |
|        awning       | 19.17 | 29.86 |
|     streetlight     | 10.89 | 20.78 |
|        booth        | 27.85 |  63.0 |
| television receiver | 49.06 | 66.36 |
|       airplane      | 46.14 | 60.01 |
|      dirt track     |  0.49 |  3.02 |
|       apparel       | 21.62 | 36.29 |
|         pole        | 13.82 | 25.33 |
|         land        |  0.41 |  0.53 |
|      bannister      |  9.23 | 20.15 |
|      escalator      | 42.76 | 57.47 |
|       ottoman       | 39.13 | 57.28 |
|        bottle       | 30.22 | 53.11 |
|        buffet       | 36.75 | 53.21 |
|        poster       | 24.69 | 37.81 |
|        stage        | 15.85 | 38.81 |
|         van         | 41.59 | 57.77 |
|         ship        | 81.54 | 89.58 |
|       fountain      | 31.21 | 35.76 |
|    conveyer belt    | 39.15 | 55.85 |
|        canopy       | 22.31 | 42.72 |
|        washer       | 58.02 | 70.57 |
|      plaything      | 21.47 | 40.56 |
|    swimming pool    | 51.59 |  66.7 |
|        stool        | 22.79 | 41.85 |
|        barrel       | 45.94 | 63.27 |
|        basket       | 28.84 | 39.67 |
|      waterfall      | 36.89 | 52.16 |
|         tent        | 71.22 | 92.83 |
|         bag         | 13.31 | 24.66 |
|       minibike      | 53.79 | 73.37 |
|        cradle       |  65.8 | 88.48 |
|         oven        | 42.59 | 53.61 |
|         ball        | 39.97 | 58.58 |
|         food        | 51.91 | 68.51 |
|         step        | 17.68 | 22.75 |
|         tank        | 43.19 | 57.71 |
|      trade name     | 20.23 |  29.5 |
|      microwave      | 71.92 | 88.13 |
|         pot         |  25.9 | 37.46 |
|        animal       | 54.99 | 61.55 |
|       bicycle       | 40.46 | 65.23 |
|         lake        |  46.1 | 67.21 |
|      dishwasher     | 51.15 | 67.88 |
|        screen       | 44.01 | 62.09 |
|       blanket       | 13.37 | 16.66 |
|      sculpture      | 48.12 | 75.16 |
|         hood        |  45.6 | 59.96 |
|        sconce       | 22.14 |  38.9 |
|         vase        | 22.61 | 43.87 |
|    traffic light    |  20.6 | 39.44 |
|         tray        |  9.99 | 15.94 |
|        ashcan       | 26.49 | 53.03 |
|         fan         | 29.25 | 52.93 |
|         pier        | 26.75 | 31.79 |
|      crt screen     |  1.06 |  3.61 |
|        plate        | 38.37 | 57.69 |
|       monitor       |  8.7  | 11.35 |
|    bulletin board   | 34.63 | 62.44 |
|        shower       |  3.3  |  10.8 |
|       radiator      | 46.48 | 60.83 |
|        glass        | 11.18 | 14.23 |
|        clock        | 15.57 | 26.27 |
|         flag        | 28.79 | 37.82 |
+---------------------+-------+-------+
09/21 14:00:33 - mmengine - INFO - Iter(test) [2000/2000]    aAcc: 75.7600  mIoU: 40.1500  mAcc: 55.4600  data_time: 0.0048  time: 1.8189
Finished processing corruption type: elastic_transform
Processing corruption type: pixelate
09/21 14:02:42 - mmengine - INFO - 
------------------------------------------------------------
System environment:
    sys.platform: linux
    Python: 3.10.13 | packaged by conda-forge | (main, Dec 23 2023, 15:36:39) [GCC 12.3.0]
    CUDA available: True
    MUSA available: False
    numpy_random_seed: 1304499817
    GPU 0: Tesla V100-SXM2-32GB
    CUDA_HOME: /opt/bwhpc/common/devel/cuda/11.7
    NVCC: Cuda compilation tools, release 11.7, V11.7.99
    GCC: gcc (GCC) 8.5.0 20210514 (Red Hat 8.5.0-18)
    PyTorch: 1.13.1
    PyTorch compiling details: PyTorch built with:
  - GCC 9.3
  - C++ Version: 201402
  - Intel(R) oneAPI Math Kernel Library Version 2023.1-Product Build 20230303 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v2.6.0 (Git Hash 52b5f107dd9cf10910aaa19cb47f3abf9b349815)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - LAPACK is enabled (usually provided by MKL)
  - NNPACK is enabled
  - CPU capability usage: AVX2
  - CUDA Runtime 11.7
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_61,code=sm_61;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86;-gencode;arch=compute_37,code=compute_37
  - CuDNN 8.5
  - Magma 2.6.1
  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.7, CUDNN_VERSION=8.5.0, CXX_COMPILER=/opt/rh/devtoolset-9/root/usr/bin/c++, CXX_FLAGS= -fabi-version=11 -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -DEDGE_PROFILER_USE_KINETO -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Werror=non-virtual-dtor -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wunused-local-typedefs -Wno-unused-parameter -Wno-unused-function -Wno-unused-result -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Werror=cast-function-type -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.13.1, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, USE_ROCM=OFF, 

    TorchVision: 0.14.1
    OpenCV: 3.4.18
    MMEngine: 0.10.4

Runtime environment:
    cudnn_benchmark: True
    mp_cfg: {'mp_start_method': 'fork', 'opencv_num_threads': 0}
    dist_cfg: {'backend': 'nccl'}
    seed: 1304499817
    Distributed launcher: none
    Distributed training: False
    GPU number: 1
------------------------------------------------------------

09/21 14:02:43 - mmengine - INFO - Config:
auto_scale_lr = dict(base_batch_size=16, enable=False)
backbone_embed_multi = dict(decay_mult=0.0, lr_mult=0.1)
backbone_norm_multi = dict(decay_mult=0.0, lr_mult=0.1)
crop_size = (
    640,
    640,
)
custom_keys = dict({
    'absolute_pos_embed':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone':
    dict(decay_mult=1.0, lr_mult=0.1),
    'backbone.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.patch_embed.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.0.blocks.0.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.0.blocks.1.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.0.downsample.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.1.blocks.0.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.1.blocks.1.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.1.downsample.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.0.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.1.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.10.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.11.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.12.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.13.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.14.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.15.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.16.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.17.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.2.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.3.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.4.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.5.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.6.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.7.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.8.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.9.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.downsample.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.3.blocks.0.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.3.blocks.1.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'level_embed':
    dict(decay_mult=0.0, lr_mult=1.0),
    'query_embed':
    dict(decay_mult=0.0, lr_mult=1.0),
    'query_feat':
    dict(decay_mult=0.0, lr_mult=1.0),
    'relative_position_bias_table':
    dict(decay_mult=0.0, lr_mult=0.1)
})
data_root = 'data/ade/ADEChallengeData2016'
dataset_type = 'ADE20KDataset'
default_hooks = dict(
    checkpoint=dict(
        by_epoch=False, interval=5000, save_best='mIoU',
        type='CheckpointHook'),
    logger=dict(interval=50, log_metric_by_epoch=False, type='LoggerHook'),
    param_scheduler=dict(type='ParamSchedulerHook'),
    sampler_seed=dict(type='DistSamplerSeedHook'),
    timer=dict(type='IterTimerHook'),
    visualization=dict(type='SegVisualizationHook'))
default_scope = 'mmseg'
depths = [
    2,
    2,
    18,
    2,
]
embed_multi = dict(decay_mult=0.0, lr_mult=1.0)
env_cfg = dict(
    cudnn_benchmark=True,
    dist_cfg=dict(backend='nccl'),
    mp_cfg=dict(mp_start_method='fork', opencv_num_threads=0))
img_ratios = [
    0.5,
    0.75,
    1.0,
    1.25,
    1.5,
    1.75,
]
launcher = 'none'
load_from = '../checkpoint_files/ade20k/mask2former/mask2former_swin-b-in1k-384x384-pre_8xb2-160k_ade20k-640x640_20221129_125118-a4a086d2.pth'
log_level = 'INFO'
log_processor = dict(by_epoch=False)
model = dict(
    backbone=dict(
        attn_drop_rate=0.0,
        depths=[
            2,
            2,
            18,
            2,
        ],
        drop_path_rate=0.3,
        drop_rate=0.0,
        embed_dims=128,
        frozen_stages=-1,
        init_cfg=dict(
            checkpoint=
            'https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/swin/swin_base_patch4_window12_384_20220317-55b0104a.pth',
            type='Pretrained'),
        mlp_ratio=4,
        num_heads=[
            4,
            8,
            16,
            32,
        ],
        out_indices=(
            0,
            1,
            2,
            3,
        ),
        patch_norm=True,
        pretrain_img_size=384,
        qk_scale=None,
        qkv_bias=True,
        type='SwinTransformer',
        window_size=12,
        with_cp=False),
    data_preprocessor=dict(
        bgr_to_rgb=True,
        corruption='pixelate',
        mean=[
            123.675,
            116.28,
            103.53,
        ],
        pad_val=0,
        seg_pad_val=255,
        size=(
            640,
            640,
        ),
        std=[
            58.395,
            57.12,
            57.375,
        ],
        type='SegDataPreProcessor'),
    decode_head=dict(
        align_corners=False,
        enforce_decoder_input_project=False,
        feat_channels=256,
        in_channels=[
            128,
            256,
            512,
            1024,
        ],
        loss_cls=dict(
            class_weight=[
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                0.1,
            ],
            loss_weight=2.0,
            reduction='mean',
            type='mmdet.CrossEntropyLoss',
            use_sigmoid=False),
        loss_dice=dict(
            activate=True,
            eps=1.0,
            loss_weight=5.0,
            naive_dice=True,
            reduction='mean',
            type='mmdet.DiceLoss',
            use_sigmoid=True),
        loss_mask=dict(
            loss_weight=5.0,
            reduction='mean',
            type='mmdet.CrossEntropyLoss',
            use_sigmoid=True),
        num_classes=150,
        num_queries=100,
        num_transformer_feat_level=3,
        out_channels=256,
        pixel_decoder=dict(
            act_cfg=dict(type='ReLU'),
            encoder=dict(
                init_cfg=None,
                layer_cfg=dict(
                    ffn_cfg=dict(
                        act_cfg=dict(inplace=True, type='ReLU'),
                        embed_dims=256,
                        feedforward_channels=1024,
                        ffn_drop=0.0,
                        num_fcs=2),
                    self_attn_cfg=dict(
                        batch_first=True,
                        dropout=0.0,
                        embed_dims=256,
                        im2col_step=64,
                        init_cfg=None,
                        norm_cfg=None,
                        num_heads=8,
                        num_levels=3,
                        num_points=4)),
                num_layers=6),
            init_cfg=None,
            norm_cfg=dict(num_groups=32, type='GN'),
            num_outs=3,
            positional_encoding=dict(normalize=True, num_feats=128),
            type='mmdet.MSDeformAttnPixelDecoder'),
        positional_encoding=dict(normalize=True, num_feats=128),
        strides=[
            4,
            8,
            16,
            32,
        ],
        train_cfg=dict(
            assigner=dict(
                match_costs=[
                    dict(type='mmdet.ClassificationCost', weight=2.0),
                    dict(
                        type='mmdet.CrossEntropyLossCost',
                        use_sigmoid=True,
                        weight=5.0),
                    dict(
                        eps=1.0,
                        pred_act=True,
                        type='mmdet.DiceCost',
                        weight=5.0),
                ],
                type='mmdet.HungarianAssigner'),
            importance_sample_ratio=0.75,
            num_points=12544,
            oversample_ratio=3.0,
            sampler=dict(type='mmdet.MaskPseudoSampler')),
        transformer_decoder=dict(
            init_cfg=None,
            layer_cfg=dict(
                cross_attn_cfg=dict(
                    attn_drop=0.0,
                    batch_first=True,
                    dropout_layer=None,
                    embed_dims=256,
                    num_heads=8,
                    proj_drop=0.0),
                ffn_cfg=dict(
                    act_cfg=dict(inplace=True, type='ReLU'),
                    add_identity=True,
                    dropout_layer=None,
                    embed_dims=256,
                    feedforward_channels=2048,
                    ffn_drop=0.0,
                    num_fcs=2),
                self_attn_cfg=dict(
                    attn_drop=0.0,
                    batch_first=True,
                    dropout_layer=None,
                    embed_dims=256,
                    num_heads=8,
                    proj_drop=0.0)),
            num_layers=9,
            return_intermediate=True),
        type='Mask2FormerHead'),
    test_cfg=dict(mode='whole'),
    train_cfg=dict(),
    type='EncoderDecoder')
num_classes = 150
optim_wrapper = dict(
    clip_grad=dict(max_norm=0.01, norm_type=2),
    optimizer=dict(
        betas=(
            0.9,
            0.999,
        ),
        eps=1e-08,
        lr=0.0001,
        type='AdamW',
        weight_decay=0.05),
    paramwise_cfg=dict(
        custom_keys=dict({
            'absolute_pos_embed':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone':
            dict(decay_mult=1.0, lr_mult=0.1),
            'backbone.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.patch_embed.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.0.blocks.0.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.0.blocks.1.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.0.downsample.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.1.blocks.0.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.1.blocks.1.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.1.downsample.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.0.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.1.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.10.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.11.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.12.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.13.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.14.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.15.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.16.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.17.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.2.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.3.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.4.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.5.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.6.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.7.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.8.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.9.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.downsample.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.3.blocks.0.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.3.blocks.1.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'level_embed':
            dict(decay_mult=0.0, lr_mult=1.0),
            'query_embed':
            dict(decay_mult=0.0, lr_mult=1.0),
            'query_feat':
            dict(decay_mult=0.0, lr_mult=1.0),
            'relative_position_bias_table':
            dict(decay_mult=0.0, lr_mult=0.1)
        }),
        norm_decay_mult=0.0),
    type='OptimWrapper')
optimizer = dict(
    betas=(
        0.9,
        0.999,
    ),
    eps=1e-08,
    lr=0.0001,
    type='AdamW',
    weight_decay=0.05)
param_scheduler = [
    dict(
        begin=0,
        by_epoch=False,
        end=160000,
        eta_min=0,
        power=0.9,
        type='PolyLR'),
]
pretrained = 'https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/swin/swin_base_patch4_window12_384_20220317-55b0104a.pth'
resume = False
test_cfg = dict(type='TestLoop')
test_dataloader = dict(
    batch_size=1,
    dataset=dict(
        data_prefix=dict(
            img_path='images/validation',
            seg_map_path='annotations/validation'),
        data_root='data/ade/ADEChallengeData2016',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(keep_ratio=True, scale=(
                2560,
                640,
            ), type='Resize'),
            dict(reduce_zero_label=True, type='LoadAnnotations'),
            dict(type='PackSegInputs'),
        ],
        type='ADE20KDataset'),
    num_workers=4,
    persistent_workers=True,
    sampler=dict(shuffle=False, type='DefaultSampler'))
test_evaluator = dict(
    iou_metrics=[
        'mIoU',
    ], type='IoUMetric')
test_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(keep_ratio=True, scale=(
        2560,
        640,
    ), type='Resize'),
    dict(reduce_zero_label=True, type='LoadAnnotations'),
    dict(type='PackSegInputs'),
]
train_cfg = dict(
    max_iters=160000, type='IterBasedTrainLoop', val_interval=5000)
train_dataloader = dict(
    batch_size=2,
    dataset=dict(
        data_prefix=dict(
            img_path='images/training', seg_map_path='annotations/training'),
        data_root='data/ade/ADEChallengeData2016',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(reduce_zero_label=True, type='LoadAnnotations'),
            dict(
                max_size=2560,
                resize_type='ResizeShortestEdge',
                scales=[
                    320,
                    384,
                    448,
                    512,
                    576,
                    640,
                    704,
                    768,
                    832,
                    896,
                    960,
                    1024,
                    1088,
                    1152,
                    1216,
                    1280,
                ],
                type='RandomChoiceResize'),
            dict(
                cat_max_ratio=0.75, crop_size=(
                    640,
                    640,
                ), type='RandomCrop'),
            dict(prob=0.5, type='RandomFlip'),
            dict(type='PhotoMetricDistortion'),
            dict(type='PackSegInputs'),
        ],
        type='ADE20KDataset'),
    num_workers=4,
    persistent_workers=True,
    sampler=dict(shuffle=True, type='InfiniteSampler'))
train_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(reduce_zero_label=True, type='LoadAnnotations'),
    dict(
        max_size=2560,
        resize_type='ResizeShortestEdge',
        scales=[
            320,
            384,
            448,
            512,
            576,
            640,
            704,
            768,
            832,
            896,
            960,
            1024,
            1088,
            1152,
            1216,
            1280,
        ],
        type='RandomChoiceResize'),
    dict(cat_max_ratio=0.75, crop_size=(
        640,
        640,
    ), type='RandomCrop'),
    dict(prob=0.5, type='RandomFlip'),
    dict(type='PhotoMetricDistortion'),
    dict(type='PackSegInputs'),
]
tta_model = dict(type='SegTTAModel')
tta_pipeline = [
    dict(backend_args=None, type='LoadImageFromFile'),
    dict(
        transforms=[
            [
                dict(keep_ratio=True, scale_factor=0.5, type='Resize'),
                dict(keep_ratio=True, scale_factor=0.75, type='Resize'),
                dict(keep_ratio=True, scale_factor=1.0, type='Resize'),
                dict(keep_ratio=True, scale_factor=1.25, type='Resize'),
                dict(keep_ratio=True, scale_factor=1.5, type='Resize'),
                dict(keep_ratio=True, scale_factor=1.75, type='Resize'),
            ],
            [
                dict(direction='horizontal', prob=0.0, type='RandomFlip'),
                dict(direction='horizontal', prob=1.0, type='RandomFlip'),
            ],
            [
                dict(type='LoadAnnotations'),
            ],
            [
                dict(type='PackSegInputs'),
            ],
        ],
        type='TestTimeAug'),
]
val_cfg = dict(type='ValLoop')
val_dataloader = dict(
    batch_size=1,
    dataset=dict(
        data_prefix=dict(
            img_path='images/validation',
            seg_map_path='annotations/validation'),
        data_root='data/ade/ADEChallengeData2016',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(keep_ratio=True, scale=(
                2560,
                640,
            ), type='Resize'),
            dict(reduce_zero_label=True, type='LoadAnnotations'),
            dict(type='PackSegInputs'),
        ],
        type='ADE20KDataset'),
    num_workers=4,
    persistent_workers=True,
    sampler=dict(shuffle=False, type='DefaultSampler'))
val_evaluator = dict(
    iou_metrics=[
        'mIoU',
    ], type='IoUMetric')
vis_backends = [
    dict(type='LocalVisBackend'),
]
visualizer = dict(
    name='visualizer',
    type='SegLocalVisualizer',
    vis_backends=[
        dict(type='LocalVisBackend'),
    ])
work_dir = '../corruptions/work_dirs/ade20k/mask2former/mask2former_swin-b-in1k-384x384-pre_8xb2-160k_ade20k-640x640/pixelate'

09/21 14:03:54 - mmengine - INFO - Distributed training is not used, all SyncBatchNorm (SyncBN) layers in the model will be automatically reverted to BatchNormXd layers if they are used.
09/21 14:03:54 - mmengine - INFO - Hooks will be executed in the following order:
before_run:
(VERY_HIGH   ) RuntimeInfoHook                    
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
before_train:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_train_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(NORMAL      ) DistSamplerSeedHook                
 -------------------- 
before_train_iter:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_train_iter:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(NORMAL      ) SegVisualizationHook               
(BELOW_NORMAL) LoggerHook                         
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
after_train_epoch:
(NORMAL      ) IterTimerHook                      
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_val:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
before_val_epoch:
(NORMAL      ) IterTimerHook                      
 -------------------- 
before_val_iter:
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_val_iter:
(NORMAL      ) IterTimerHook                      
(NORMAL      ) SegVisualizationHook               
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_val_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
after_val:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
after_train:
(VERY_HIGH   ) RuntimeInfoHook                    
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_test:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
before_test_epoch:
(NORMAL      ) IterTimerHook                      
 -------------------- 
before_test_iter:
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_test_iter:
(NORMAL      ) IterTimerHook                      
(NORMAL      ) SegVisualizationHook               
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_test_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_test:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
after_run:
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
09/21 14:03:55 - mmengine - WARNING - The prefix is not set in metric class IoUMetric.
Loads checkpoint by local backend from path: ../checkpoint_files/ade20k/mask2former/mask2former_swin-b-in1k-384x384-pre_8xb2-160k_ade20k-640x640_20221129_125118-a4a086d2.pth
09/21 14:03:59 - mmengine - INFO - Load checkpoint from ../checkpoint_files/ade20k/mask2former/mask2former_swin-b-in1k-384x384-pre_8xb2-160k_ade20k-640x640_20221129_125118-a4a086d2.pth
09/21 14:06:01 - mmengine - INFO - Iter(test) [  50/2000]    eta: 1:19:04  time: 0.3838  data_time: 0.0019  memory: 17181  
09/21 14:06:20 - mmengine - INFO - Iter(test) [ 100/2000]    eta: 0:44:32  time: 0.3894  data_time: 0.0019  memory: 17180  
09/21 14:06:34 - mmengine - INFO - Iter(test) [ 150/2000]    eta: 0:31:47  time: 0.2807  data_time: 0.0018  memory: 17150  
09/21 14:06:51 - mmengine - INFO - Iter(test) [ 200/2000]    eta: 0:25:37  time: 0.3324  data_time: 0.0018  memory: 17194  
09/21 14:07:07 - mmengine - INFO - Iter(test) [ 250/2000]    eta: 0:21:50  time: 0.2274  data_time: 0.0018  memory: 17202  
09/21 14:07:21 - mmengine - INFO - Iter(test) [ 300/2000]    eta: 0:18:58  time: 0.1307  data_time: 0.0020  memory: 17180  
09/21 14:07:35 - mmengine - INFO - Iter(test) [ 350/2000]    eta: 0:16:53  time: 0.2657  data_time: 0.0017  memory: 17178  
09/21 14:07:44 - mmengine - INFO - Iter(test) [ 400/2000]    eta: 0:14:58  time: 0.1429  data_time: 0.0017  memory: 17177  
09/21 14:07:55 - mmengine - INFO - Iter(test) [ 450/2000]    eta: 0:13:31  time: 0.1784  data_time: 0.0017  memory: 17147  
09/21 14:08:04 - mmengine - INFO - Iter(test) [ 500/2000]    eta: 0:12:12  time: 0.2064  data_time: 0.0017  memory: 17149  
09/21 14:08:13 - mmengine - INFO - Iter(test) [ 550/2000]    eta: 0:11:08  time: 0.2397  data_time: 0.0018  memory: 17179  
09/21 14:08:20 - mmengine - INFO - Iter(test) [ 600/2000]    eta: 0:10:06  time: 0.1308  data_time: 0.0028  memory: 3938  
09/21 14:08:30 - mmengine - INFO - Iter(test) [ 650/2000]    eta: 0:09:21  time: 0.2615  data_time: 0.0017  memory: 17181  
09/21 14:08:42 - mmengine - INFO - Iter(test) [ 700/2000]    eta: 0:08:43  time: 0.1929  data_time: 0.0019  memory: 17177  
09/21 14:08:56 - mmengine - INFO - Iter(test) [ 750/2000]    eta: 0:08:13  time: 0.5563  data_time: 0.0017  memory: 17184  
09/21 14:09:03 - mmengine - INFO - Iter(test) [ 800/2000]    eta: 0:07:35  time: 0.1249  data_time: 0.0018  memory: 17151  
09/21 14:09:10 - mmengine - INFO - Iter(test) [ 850/2000]    eta: 0:06:59  time: 0.1274  data_time: 0.0026  memory: 1428  
09/21 14:09:18 - mmengine - INFO - Iter(test) [ 900/2000]    eta: 0:06:28  time: 0.1773  data_time: 0.0017  memory: 17138  
09/21 14:09:29 - mmengine - INFO - Iter(test) [ 950/2000]    eta: 0:06:03  time: 0.2856  data_time: 0.0039  memory: 17133  
09/21 14:09:36 - mmengine - INFO - Iter(test) [1000/2000]    eta: 0:05:35  time: 0.1206  data_time: 0.0017  memory: 17096  
09/21 14:09:43 - mmengine - INFO - Iter(test) [1050/2000]    eta: 0:05:10  time: 0.2068  data_time: 0.0017  memory: 17182  
09/21 14:09:52 - mmengine - INFO - Iter(test) [1100/2000]    eta: 0:04:48  time: 0.1246  data_time: 0.0018  memory: 17175  
09/21 14:10:00 - mmengine - INFO - Iter(test) [1150/2000]    eta: 0:04:26  time: 0.1523  data_time: 0.0061  memory: 17117  
09/21 14:10:07 - mmengine - INFO - Iter(test) [1200/2000]    eta: 0:04:04  time: 0.1223  data_time: 0.0018  memory: 17113  
09/21 14:10:16 - mmengine - INFO - Iter(test) [1250/2000]    eta: 0:03:45  time: 0.2032  data_time: 0.0017  memory: 17172  
09/21 14:10:22 - mmengine - INFO - Iter(test) [1300/2000]    eta: 0:03:25  time: 0.1251  data_time: 0.0017  memory: 1430  
09/21 14:10:30 - mmengine - INFO - Iter(test) [1350/2000]    eta: 0:03:07  time: 0.1176  data_time: 0.0017  memory: 17110  
09/21 14:10:40 - mmengine - INFO - Iter(test) [1400/2000]    eta: 0:02:51  time: 0.1432  data_time: 0.0017  memory: 17154  
09/21 14:10:46 - mmengine - INFO - Iter(test) [1450/2000]    eta: 0:02:34  time: 0.1893  data_time: 0.0018  memory: 17130  
09/21 14:10:53 - mmengine - INFO - Iter(test) [1500/2000]    eta: 0:02:17  time: 0.1182  data_time: 0.0016  memory: 17125  
09/21 14:11:01 - mmengine - INFO - Iter(test) [1550/2000]    eta: 0:02:02  time: 0.1301  data_time: 0.0020  memory: 17154  
09/21 14:11:07 - mmengine - INFO - Iter(test) [1600/2000]    eta: 0:01:46  time: 0.1248  data_time: 0.0019  memory: 1425  
09/21 14:11:15 - mmengine - INFO - Iter(test) [1650/2000]    eta: 0:01:32  time: 0.1167  data_time: 0.0016  memory: 17192  
09/21 14:11:26 - mmengine - INFO - Iter(test) [1700/2000]    eta: 0:01:18  time: 0.1247  data_time: 0.0019  memory: 17151  
09/21 14:11:33 - mmengine - INFO - Iter(test) [1750/2000]    eta: 0:01:04  time: 0.1233  data_time: 0.0017  memory: 17111  
09/21 14:11:40 - mmengine - INFO - Iter(test) [1800/2000]    eta: 0:00:51  time: 0.1271  data_time: 0.0019  memory: 17114  
09/21 14:11:46 - mmengine - INFO - Iter(test) [1850/2000]    eta: 0:00:37  time: 0.1309  data_time: 0.0019  memory: 1317  
09/21 14:11:53 - mmengine - INFO - Iter(test) [1900/2000]    eta: 0:00:24  time: 0.1880  data_time: 0.0018  memory: 17182  
09/21 14:12:01 - mmengine - INFO - Iter(test) [1950/2000]    eta: 0:00:12  time: 0.1217  data_time: 0.0017  memory: 17197  
09/21 14:12:09 - mmengine - INFO - Iter(test) [2000/2000]    eta: 0:00:00  time: 0.1158  data_time: 0.0016  memory: 17131  
09/21 14:12:10 - mmengine - INFO - per class results:
09/21 14:12:10 - mmengine - INFO - 
+---------------------+-------+-------+
|        Class        |  IoU  |  Acc  |
+---------------------+-------+-------+
|         wall        | 77.23 | 85.87 |
|       building      | 80.19 | 94.38 |
|         sky         | 93.93 | 96.93 |
|        floor        | 81.66 | 89.27 |
|         tree        | 74.07 | 85.68 |
|       ceiling       |  83.9 |  91.0 |
|         road        | 84.28 | 91.62 |
|         bed         | 89.14 | 95.19 |
|      windowpane     | 60.07 | 78.75 |
|        grass        | 66.96 | 80.51 |
|       cabinet       | 56.03 | 72.88 |
|       sidewalk      | 65.45 | 77.98 |
|        person       | 81.15 | 89.28 |
|        earth        | 34.88 | 50.07 |
|         door        | 40.73 | 54.92 |
|        table        | 60.21 | 74.29 |
|       mountain      | 53.34 | 65.81 |
|        plant        | 48.79 | 60.46 |
|       curtain       | 74.01 | 84.98 |
|        chair        | 56.56 |  70.6 |
|         car         | 84.02 | 90.81 |
|        water        |  57.4 | 77.67 |
|       painting      | 69.63 |  89.9 |
|         sofa        |  65.0 | 83.02 |
|        shelf        | 38.06 | 58.95 |
|        house        | 43.33 | 52.58 |
|         sea         | 54.89 |  70.6 |
|        mirror       | 64.43 | 76.33 |
|         rug         | 66.96 | 85.37 |
|        field        | 26.09 | 44.66 |
|       armchair      | 36.58 |  50.5 |
|         seat        | 55.64 | 69.84 |
|        fence        | 45.37 | 61.68 |
|         desk        | 48.84 |  68.4 |
|         rock        |  46.3 | 63.78 |
|       wardrobe      | 46.58 | 60.43 |
|         lamp        |  63.6 | 75.17 |
|       bathtub       | 77.29 | 83.73 |
|       railing       | 36.26 | 57.21 |
|       cushion       | 51.33 | 58.62 |
|         base        | 31.34 | 58.41 |
|         box         | 25.08 |  37.3 |
|        column       | 43.21 | 59.12 |
|      signboard      | 36.65 | 55.53 |
|   chest of drawers  | 36.58 | 57.44 |
|       counter       | 33.94 | 42.45 |
|         sand        | 32.49 | 49.42 |
|         sink        |  71.8 | 78.96 |
|      skyscraper     | 34.84 | 37.57 |
|      fireplace      |  71.5 | 83.32 |
|     refrigerator    | 72.59 | 80.18 |
|      grandstand     | 36.45 | 73.65 |
|         path        | 20.75 | 32.93 |
|        stairs       | 21.14 |  27.6 |
|        runway       | 66.73 | 79.49 |
|         case        |  57.0 | 79.43 |
|      pool table     | 93.58 | 96.05 |
|        pillow       |  55.2 | 73.21 |
|     screen door     | 63.02 | 71.12 |
|       stairway      | 29.65 |  51.2 |
|        river        | 11.21 | 21.01 |
|        bridge       | 61.76 | 74.22 |
|       bookcase      | 28.54 | 53.79 |
|        blind        | 43.98 | 49.79 |
|     coffee table    | 65.55 | 82.18 |
|        toilet       | 88.26 | 91.26 |
|        flower       | 36.61 | 46.95 |
|         book        | 44.39 | 68.87 |
|         hill        |  5.28 | 14.23 |
|        bench        | 42.47 | 64.92 |
|      countertop     | 55.88 | 64.57 |
|        stove        | 75.48 | 82.26 |
|         palm        | 48.74 | 64.49 |
|    kitchen island   | 43.21 |  78.5 |
|       computer      |  60.2 | 70.33 |
|     swivel chair    | 44.43 | 56.85 |
|         boat        | 67.21 | 83.09 |
|         bar         | 57.07 | 70.95 |
|    arcade machine   | 45.76 | 63.56 |
|        hovel        |  3.03 |  6.21 |
|         bus         | 89.29 |  96.4 |
|        towel        | 75.72 | 80.56 |
|        light        | 59.04 | 77.91 |
|        truck        | 32.63 | 57.49 |
|        tower        |  6.06 |  9.1  |
|      chandelier     | 65.15 | 75.39 |
|        awning       | 28.46 | 33.54 |
|     streetlight     | 31.69 | 49.94 |
|        booth        | 24.46 | 47.35 |
| television receiver | 68.02 | 78.07 |
|       airplane      |  57.5 | 70.57 |
|      dirt track     |  8.2  | 20.12 |
|       apparel       | 32.92 | 39.73 |
|         pole        | 27.87 | 45.27 |
|         land        |  4.91 |  7.62 |
|      bannister      | 21.85 | 32.73 |
|      escalator      | 39.46 | 52.13 |
|       ottoman       | 48.93 | 57.92 |
|        bottle       | 22.57 | 29.36 |
|        buffet       | 40.51 | 49.98 |
|        poster       | 29.04 | 40.69 |
|        stage        | 13.18 | 28.58 |
|         van         | 45.34 | 68.82 |
|         ship        | 72.91 | 79.02 |
|       fountain      | 19.23 | 22.09 |
|    conveyer belt    | 48.43 | 65.58 |
|        canopy       | 27.57 | 29.75 |
|        washer       | 66.16 | 69.96 |
|      plaything      | 26.51 | 35.27 |
|    swimming pool    | 35.37 | 38.67 |
|        stool        | 44.35 | 66.85 |
|        barrel       | 59.23 | 74.81 |
|        basket       | 23.68 | 30.36 |
|      waterfall      | 46.27 | 53.18 |
|         tent        | 89.68 | 97.62 |
|         bag         | 14.65 | 19.23 |
|       minibike      | 72.06 |  82.2 |
|        cradle       | 83.76 | 96.79 |
|         oven        | 23.65 | 65.29 |
|         ball        | 50.21 | 59.17 |
|         food        | 65.11 | 77.11 |
|         step        | 13.98 | 22.01 |
|         tank        |  39.3 | 55.18 |
|      trade name     | 23.03 | 28.83 |
|      microwave      | 39.68 | 45.36 |
|         pot         | 52.76 | 63.25 |
|        animal       | 60.06 |  63.5 |
|       bicycle       | 59.48 |  75.4 |
|         lake        | 62.54 |  69.0 |
|      dishwasher     | 65.03 | 77.11 |
|        screen       | 64.89 | 90.45 |
|       blanket       | 23.64 | 27.64 |
|      sculpture      | 59.32 | 73.96 |
|         hood        | 65.64 | 70.95 |
|        sconce       | 44.48 | 64.25 |
|         vase        | 36.78 | 56.52 |
|    traffic light    | 35.14 | 56.79 |
|         tray        | 18.67 | 27.58 |
|        ashcan       | 40.74 | 66.02 |
|         fan         | 66.04 | 81.52 |
|         pier        | 33.51 |  38.8 |
|      crt screen     |  0.98 |  2.8  |
|        plate        | 53.79 | 75.34 |
|       monitor       |  1.85 |  2.51 |
|    bulletin board   | 33.86 | 49.31 |
|        shower       | 12.78 | 17.66 |
|       radiator      | 57.96 | 62.61 |
|        glass        | 16.18 |  19.3 |
|        clock        | 43.15 |  55.1 |
|         flag        | 47.86 | 52.64 |
+---------------------+-------+-------+
09/21 14:12:10 - mmengine - INFO - Iter(test) [2000/2000]    aAcc: 82.0700  mIoU: 48.1200  mAcc: 60.7100  data_time: 0.0032  time: 0.2446
Finished processing corruption type: pixelate
Processing corruption type: jpeg_compression
09/21 14:14:26 - mmengine - INFO - 
------------------------------------------------------------
System environment:
    sys.platform: linux
    Python: 3.10.13 | packaged by conda-forge | (main, Dec 23 2023, 15:36:39) [GCC 12.3.0]
    CUDA available: True
    MUSA available: False
    numpy_random_seed: 1803413908
    GPU 0: Tesla V100-SXM2-32GB
    CUDA_HOME: /opt/bwhpc/common/devel/cuda/11.7
    NVCC: Cuda compilation tools, release 11.7, V11.7.99
    GCC: gcc (GCC) 8.5.0 20210514 (Red Hat 8.5.0-18)
    PyTorch: 1.13.1
    PyTorch compiling details: PyTorch built with:
  - GCC 9.3
  - C++ Version: 201402
  - Intel(R) oneAPI Math Kernel Library Version 2023.1-Product Build 20230303 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v2.6.0 (Git Hash 52b5f107dd9cf10910aaa19cb47f3abf9b349815)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - LAPACK is enabled (usually provided by MKL)
  - NNPACK is enabled
  - CPU capability usage: AVX2
  - CUDA Runtime 11.7
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_61,code=sm_61;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86;-gencode;arch=compute_37,code=compute_37
  - CuDNN 8.5
  - Magma 2.6.1
  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.7, CUDNN_VERSION=8.5.0, CXX_COMPILER=/opt/rh/devtoolset-9/root/usr/bin/c++, CXX_FLAGS= -fabi-version=11 -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -DEDGE_PROFILER_USE_KINETO -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Werror=non-virtual-dtor -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wunused-local-typedefs -Wno-unused-parameter -Wno-unused-function -Wno-unused-result -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Werror=cast-function-type -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.13.1, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, USE_ROCM=OFF, 

    TorchVision: 0.14.1
    OpenCV: 3.4.18
    MMEngine: 0.10.4

Runtime environment:
    cudnn_benchmark: True
    mp_cfg: {'mp_start_method': 'fork', 'opencv_num_threads': 0}
    dist_cfg: {'backend': 'nccl'}
    seed: 1803413908
    Distributed launcher: none
    Distributed training: False
    GPU number: 1
------------------------------------------------------------

09/21 14:14:27 - mmengine - INFO - Config:
auto_scale_lr = dict(base_batch_size=16, enable=False)
backbone_embed_multi = dict(decay_mult=0.0, lr_mult=0.1)
backbone_norm_multi = dict(decay_mult=0.0, lr_mult=0.1)
crop_size = (
    640,
    640,
)
custom_keys = dict({
    'absolute_pos_embed':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone':
    dict(decay_mult=1.0, lr_mult=0.1),
    'backbone.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.patch_embed.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.0.blocks.0.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.0.blocks.1.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.0.downsample.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.1.blocks.0.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.1.blocks.1.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.1.downsample.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.0.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.1.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.10.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.11.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.12.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.13.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.14.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.15.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.16.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.17.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.2.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.3.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.4.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.5.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.6.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.7.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.8.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.9.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.downsample.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.3.blocks.0.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.3.blocks.1.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'level_embed':
    dict(decay_mult=0.0, lr_mult=1.0),
    'query_embed':
    dict(decay_mult=0.0, lr_mult=1.0),
    'query_feat':
    dict(decay_mult=0.0, lr_mult=1.0),
    'relative_position_bias_table':
    dict(decay_mult=0.0, lr_mult=0.1)
})
data_root = 'data/ade/ADEChallengeData2016'
dataset_type = 'ADE20KDataset'
default_hooks = dict(
    checkpoint=dict(
        by_epoch=False, interval=5000, save_best='mIoU',
        type='CheckpointHook'),
    logger=dict(interval=50, log_metric_by_epoch=False, type='LoggerHook'),
    param_scheduler=dict(type='ParamSchedulerHook'),
    sampler_seed=dict(type='DistSamplerSeedHook'),
    timer=dict(type='IterTimerHook'),
    visualization=dict(type='SegVisualizationHook'))
default_scope = 'mmseg'
depths = [
    2,
    2,
    18,
    2,
]
embed_multi = dict(decay_mult=0.0, lr_mult=1.0)
env_cfg = dict(
    cudnn_benchmark=True,
    dist_cfg=dict(backend='nccl'),
    mp_cfg=dict(mp_start_method='fork', opencv_num_threads=0))
img_ratios = [
    0.5,
    0.75,
    1.0,
    1.25,
    1.5,
    1.75,
]
launcher = 'none'
load_from = '../checkpoint_files/ade20k/mask2former/mask2former_swin-b-in1k-384x384-pre_8xb2-160k_ade20k-640x640_20221129_125118-a4a086d2.pth'
log_level = 'INFO'
log_processor = dict(by_epoch=False)
model = dict(
    backbone=dict(
        attn_drop_rate=0.0,
        depths=[
            2,
            2,
            18,
            2,
        ],
        drop_path_rate=0.3,
        drop_rate=0.0,
        embed_dims=128,
        frozen_stages=-1,
        init_cfg=dict(
            checkpoint=
            'https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/swin/swin_base_patch4_window12_384_20220317-55b0104a.pth',
            type='Pretrained'),
        mlp_ratio=4,
        num_heads=[
            4,
            8,
            16,
            32,
        ],
        out_indices=(
            0,
            1,
            2,
            3,
        ),
        patch_norm=True,
        pretrain_img_size=384,
        qk_scale=None,
        qkv_bias=True,
        type='SwinTransformer',
        window_size=12,
        with_cp=False),
    data_preprocessor=dict(
        bgr_to_rgb=True,
        corruption='jpeg_compression',
        mean=[
            123.675,
            116.28,
            103.53,
        ],
        pad_val=0,
        seg_pad_val=255,
        size=(
            640,
            640,
        ),
        std=[
            58.395,
            57.12,
            57.375,
        ],
        type='SegDataPreProcessor'),
    decode_head=dict(
        align_corners=False,
        enforce_decoder_input_project=False,
        feat_channels=256,
        in_channels=[
            128,
            256,
            512,
            1024,
        ],
        loss_cls=dict(
            class_weight=[
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                0.1,
            ],
            loss_weight=2.0,
            reduction='mean',
            type='mmdet.CrossEntropyLoss',
            use_sigmoid=False),
        loss_dice=dict(
            activate=True,
            eps=1.0,
            loss_weight=5.0,
            naive_dice=True,
            reduction='mean',
            type='mmdet.DiceLoss',
            use_sigmoid=True),
        loss_mask=dict(
            loss_weight=5.0,
            reduction='mean',
            type='mmdet.CrossEntropyLoss',
            use_sigmoid=True),
        num_classes=150,
        num_queries=100,
        num_transformer_feat_level=3,
        out_channels=256,
        pixel_decoder=dict(
            act_cfg=dict(type='ReLU'),
            encoder=dict(
                init_cfg=None,
                layer_cfg=dict(
                    ffn_cfg=dict(
                        act_cfg=dict(inplace=True, type='ReLU'),
                        embed_dims=256,
                        feedforward_channels=1024,
                        ffn_drop=0.0,
                        num_fcs=2),
                    self_attn_cfg=dict(
                        batch_first=True,
                        dropout=0.0,
                        embed_dims=256,
                        im2col_step=64,
                        init_cfg=None,
                        norm_cfg=None,
                        num_heads=8,
                        num_levels=3,
                        num_points=4)),
                num_layers=6),
            init_cfg=None,
            norm_cfg=dict(num_groups=32, type='GN'),
            num_outs=3,
            positional_encoding=dict(normalize=True, num_feats=128),
            type='mmdet.MSDeformAttnPixelDecoder'),
        positional_encoding=dict(normalize=True, num_feats=128),
        strides=[
            4,
            8,
            16,
            32,
        ],
        train_cfg=dict(
            assigner=dict(
                match_costs=[
                    dict(type='mmdet.ClassificationCost', weight=2.0),
                    dict(
                        type='mmdet.CrossEntropyLossCost',
                        use_sigmoid=True,
                        weight=5.0),
                    dict(
                        eps=1.0,
                        pred_act=True,
                        type='mmdet.DiceCost',
                        weight=5.0),
                ],
                type='mmdet.HungarianAssigner'),
            importance_sample_ratio=0.75,
            num_points=12544,
            oversample_ratio=3.0,
            sampler=dict(type='mmdet.MaskPseudoSampler')),
        transformer_decoder=dict(
            init_cfg=None,
            layer_cfg=dict(
                cross_attn_cfg=dict(
                    attn_drop=0.0,
                    batch_first=True,
                    dropout_layer=None,
                    embed_dims=256,
                    num_heads=8,
                    proj_drop=0.0),
                ffn_cfg=dict(
                    act_cfg=dict(inplace=True, type='ReLU'),
                    add_identity=True,
                    dropout_layer=None,
                    embed_dims=256,
                    feedforward_channels=2048,
                    ffn_drop=0.0,
                    num_fcs=2),
                self_attn_cfg=dict(
                    attn_drop=0.0,
                    batch_first=True,
                    dropout_layer=None,
                    embed_dims=256,
                    num_heads=8,
                    proj_drop=0.0)),
            num_layers=9,
            return_intermediate=True),
        type='Mask2FormerHead'),
    test_cfg=dict(mode='whole'),
    train_cfg=dict(),
    type='EncoderDecoder')
num_classes = 150
optim_wrapper = dict(
    clip_grad=dict(max_norm=0.01, norm_type=2),
    optimizer=dict(
        betas=(
            0.9,
            0.999,
        ),
        eps=1e-08,
        lr=0.0001,
        type='AdamW',
        weight_decay=0.05),
    paramwise_cfg=dict(
        custom_keys=dict({
            'absolute_pos_embed':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone':
            dict(decay_mult=1.0, lr_mult=0.1),
            'backbone.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.patch_embed.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.0.blocks.0.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.0.blocks.1.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.0.downsample.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.1.blocks.0.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.1.blocks.1.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.1.downsample.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.0.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.1.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.10.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.11.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.12.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.13.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.14.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.15.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.16.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.17.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.2.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.3.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.4.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.5.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.6.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.7.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.8.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.9.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.downsample.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.3.blocks.0.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.3.blocks.1.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'level_embed':
            dict(decay_mult=0.0, lr_mult=1.0),
            'query_embed':
            dict(decay_mult=0.0, lr_mult=1.0),
            'query_feat':
            dict(decay_mult=0.0, lr_mult=1.0),
            'relative_position_bias_table':
            dict(decay_mult=0.0, lr_mult=0.1)
        }),
        norm_decay_mult=0.0),
    type='OptimWrapper')
optimizer = dict(
    betas=(
        0.9,
        0.999,
    ),
    eps=1e-08,
    lr=0.0001,
    type='AdamW',
    weight_decay=0.05)
param_scheduler = [
    dict(
        begin=0,
        by_epoch=False,
        end=160000,
        eta_min=0,
        power=0.9,
        type='PolyLR'),
]
pretrained = 'https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/swin/swin_base_patch4_window12_384_20220317-55b0104a.pth'
resume = False
test_cfg = dict(type='TestLoop')
test_dataloader = dict(
    batch_size=1,
    dataset=dict(
        data_prefix=dict(
            img_path='images/validation',
            seg_map_path='annotations/validation'),
        data_root='data/ade/ADEChallengeData2016',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(keep_ratio=True, scale=(
                2560,
                640,
            ), type='Resize'),
            dict(reduce_zero_label=True, type='LoadAnnotations'),
            dict(type='PackSegInputs'),
        ],
        type='ADE20KDataset'),
    num_workers=4,
    persistent_workers=True,
    sampler=dict(shuffle=False, type='DefaultSampler'))
test_evaluator = dict(
    iou_metrics=[
        'mIoU',
    ], type='IoUMetric')
test_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(keep_ratio=True, scale=(
        2560,
        640,
    ), type='Resize'),
    dict(reduce_zero_label=True, type='LoadAnnotations'),
    dict(type='PackSegInputs'),
]
train_cfg = dict(
    max_iters=160000, type='IterBasedTrainLoop', val_interval=5000)
train_dataloader = dict(
    batch_size=2,
    dataset=dict(
        data_prefix=dict(
            img_path='images/training', seg_map_path='annotations/training'),
        data_root='data/ade/ADEChallengeData2016',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(reduce_zero_label=True, type='LoadAnnotations'),
            dict(
                max_size=2560,
                resize_type='ResizeShortestEdge',
                scales=[
                    320,
                    384,
                    448,
                    512,
                    576,
                    640,
                    704,
                    768,
                    832,
                    896,
                    960,
                    1024,
                    1088,
                    1152,
                    1216,
                    1280,
                ],
                type='RandomChoiceResize'),
            dict(
                cat_max_ratio=0.75, crop_size=(
                    640,
                    640,
                ), type='RandomCrop'),
            dict(prob=0.5, type='RandomFlip'),
            dict(type='PhotoMetricDistortion'),
            dict(type='PackSegInputs'),
        ],
        type='ADE20KDataset'),
    num_workers=4,
    persistent_workers=True,
    sampler=dict(shuffle=True, type='InfiniteSampler'))
train_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(reduce_zero_label=True, type='LoadAnnotations'),
    dict(
        max_size=2560,
        resize_type='ResizeShortestEdge',
        scales=[
            320,
            384,
            448,
            512,
            576,
            640,
            704,
            768,
            832,
            896,
            960,
            1024,
            1088,
            1152,
            1216,
            1280,
        ],
        type='RandomChoiceResize'),
    dict(cat_max_ratio=0.75, crop_size=(
        640,
        640,
    ), type='RandomCrop'),
    dict(prob=0.5, type='RandomFlip'),
    dict(type='PhotoMetricDistortion'),
    dict(type='PackSegInputs'),
]
tta_model = dict(type='SegTTAModel')
tta_pipeline = [
    dict(backend_args=None, type='LoadImageFromFile'),
    dict(
        transforms=[
            [
                dict(keep_ratio=True, scale_factor=0.5, type='Resize'),
                dict(keep_ratio=True, scale_factor=0.75, type='Resize'),
                dict(keep_ratio=True, scale_factor=1.0, type='Resize'),
                dict(keep_ratio=True, scale_factor=1.25, type='Resize'),
                dict(keep_ratio=True, scale_factor=1.5, type='Resize'),
                dict(keep_ratio=True, scale_factor=1.75, type='Resize'),
            ],
            [
                dict(direction='horizontal', prob=0.0, type='RandomFlip'),
                dict(direction='horizontal', prob=1.0, type='RandomFlip'),
            ],
            [
                dict(type='LoadAnnotations'),
            ],
            [
                dict(type='PackSegInputs'),
            ],
        ],
        type='TestTimeAug'),
]
val_cfg = dict(type='ValLoop')
val_dataloader = dict(
    batch_size=1,
    dataset=dict(
        data_prefix=dict(
            img_path='images/validation',
            seg_map_path='annotations/validation'),
        data_root='data/ade/ADEChallengeData2016',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(keep_ratio=True, scale=(
                2560,
                640,
            ), type='Resize'),
            dict(reduce_zero_label=True, type='LoadAnnotations'),
            dict(type='PackSegInputs'),
        ],
        type='ADE20KDataset'),
    num_workers=4,
    persistent_workers=True,
    sampler=dict(shuffle=False, type='DefaultSampler'))
val_evaluator = dict(
    iou_metrics=[
        'mIoU',
    ], type='IoUMetric')
vis_backends = [
    dict(type='LocalVisBackend'),
]
visualizer = dict(
    name='visualizer',
    type='SegLocalVisualizer',
    vis_backends=[
        dict(type='LocalVisBackend'),
    ])
work_dir = '../corruptions/work_dirs/ade20k/mask2former/mask2former_swin-b-in1k-384x384-pre_8xb2-160k_ade20k-640x640/jpeg_compression'

09/21 14:15:50 - mmengine - INFO - Distributed training is not used, all SyncBatchNorm (SyncBN) layers in the model will be automatically reverted to BatchNormXd layers if they are used.
09/21 14:15:50 - mmengine - INFO - Hooks will be executed in the following order:
before_run:
(VERY_HIGH   ) RuntimeInfoHook                    
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
before_train:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_train_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(NORMAL      ) DistSamplerSeedHook                
 -------------------- 
before_train_iter:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_train_iter:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(NORMAL      ) SegVisualizationHook               
(BELOW_NORMAL) LoggerHook                         
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
after_train_epoch:
(NORMAL      ) IterTimerHook                      
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_val:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
before_val_epoch:
(NORMAL      ) IterTimerHook                      
 -------------------- 
before_val_iter:
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_val_iter:
(NORMAL      ) IterTimerHook                      
(NORMAL      ) SegVisualizationHook               
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_val_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
after_val:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
after_train:
(VERY_HIGH   ) RuntimeInfoHook                    
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_test:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
before_test_epoch:
(NORMAL      ) IterTimerHook                      
 -------------------- 
before_test_iter:
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_test_iter:
(NORMAL      ) IterTimerHook                      
(NORMAL      ) SegVisualizationHook               
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_test_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_test:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
after_run:
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
09/21 14:15:52 - mmengine - WARNING - The prefix is not set in metric class IoUMetric.
Loads checkpoint by local backend from path: ../checkpoint_files/ade20k/mask2former/mask2former_swin-b-in1k-384x384-pre_8xb2-160k_ade20k-640x640_20221129_125118-a4a086d2.pth
09/21 14:15:56 - mmengine - INFO - Load checkpoint from ../checkpoint_files/ade20k/mask2former/mask2former_swin-b-in1k-384x384-pre_8xb2-160k_ade20k-640x640_20221129_125118-a4a086d2.pth
09/21 14:18:05 - mmengine - INFO - Iter(test) [  50/2000]    eta: 1:23:49  time: 0.3917  data_time: 0.0018  memory: 17181  
09/21 14:18:25 - mmengine - INFO - Iter(test) [ 100/2000]    eta: 0:47:22  time: 0.3907  data_time: 0.0020  memory: 17180  
09/21 14:18:40 - mmengine - INFO - Iter(test) [ 150/2000]    eta: 0:33:44  time: 0.3089  data_time: 0.0047  memory: 17150  
09/21 14:18:55 - mmengine - INFO - Iter(test) [ 200/2000]    eta: 0:26:47  time: 0.3462  data_time: 0.0018  memory: 17194  
09/21 14:19:12 - mmengine - INFO - Iter(test) [ 250/2000]    eta: 0:22:52  time: 0.2679  data_time: 0.0040  memory: 17202  
09/21 14:19:26 - mmengine - INFO - Iter(test) [ 300/2000]    eta: 0:19:51  time: 0.1393  data_time: 0.0019  memory: 17180  
09/21 14:19:40 - mmengine - INFO - Iter(test) [ 350/2000]    eta: 0:17:38  time: 0.2734  data_time: 0.0017  memory: 17178  
09/21 14:19:51 - mmengine - INFO - Iter(test) [ 400/2000]    eta: 0:15:38  time: 0.1536  data_time: 0.0017  memory: 17177  
09/21 14:19:59 - mmengine - INFO - Iter(test) [ 450/2000]    eta: 0:13:56  time: 0.1864  data_time: 0.0017  memory: 17147  
09/21 14:20:08 - mmengine - INFO - Iter(test) [ 500/2000]    eta: 0:12:36  time: 0.2147  data_time: 0.0017  memory: 17149  
09/21 14:20:18 - mmengine - INFO - Iter(test) [ 550/2000]    eta: 0:11:29  time: 0.2483  data_time: 0.0018  memory: 17179  
09/21 14:20:24 - mmengine - INFO - Iter(test) [ 600/2000]    eta: 0:10:26  time: 0.1377  data_time: 0.0018  memory: 3938  
09/21 14:20:35 - mmengine - INFO - Iter(test) [ 650/2000]    eta: 0:09:40  time: 0.2660  data_time: 0.0016  memory: 17181  
09/21 14:20:50 - mmengine - INFO - Iter(test) [ 700/2000]    eta: 0:09:05  time: 0.2014  data_time: 0.0019  memory: 17177  
09/21 14:21:02 - mmengine - INFO - Iter(test) [ 750/2000]    eta: 0:08:29  time: 0.5624  data_time: 0.0017  memory: 17184  
09/21 14:21:10 - mmengine - INFO - Iter(test) [ 800/2000]    eta: 0:07:50  time: 0.1352  data_time: 0.0018  memory: 17151  
09/21 14:21:17 - mmengine - INFO - Iter(test) [ 850/2000]    eta: 0:07:14  time: 0.1377  data_time: 0.0019  memory: 1428  
09/21 14:21:25 - mmengine - INFO - Iter(test) [ 900/2000]    eta: 0:06:42  time: 0.1839  data_time: 0.0016  memory: 17138  
09/21 14:21:37 - mmengine - INFO - Iter(test) [ 950/2000]    eta: 0:06:16  time: 0.3236  data_time: 0.0017  memory: 17133  
09/21 14:21:44 - mmengine - INFO - Iter(test) [1000/2000]    eta: 0:05:48  time: 0.1292  data_time: 0.0017  memory: 17096  
09/21 14:21:52 - mmengine - INFO - Iter(test) [1050/2000]    eta: 0:05:22  time: 0.2157  data_time: 0.0017  memory: 17182  
09/21 14:22:02 - mmengine - INFO - Iter(test) [1100/2000]    eta: 0:04:59  time: 0.1328  data_time: 0.0018  memory: 17175  
09/21 14:22:10 - mmengine - INFO - Iter(test) [1150/2000]    eta: 0:04:36  time: 0.1330  data_time: 0.0017  memory: 17117  
09/21 14:22:18 - mmengine - INFO - Iter(test) [1200/2000]    eta: 0:04:14  time: 0.2114  data_time: 0.0027  memory: 17113  
09/21 14:22:27 - mmengine - INFO - Iter(test) [1250/2000]    eta: 0:03:54  time: 0.2115  data_time: 0.0017  memory: 17172  
09/21 14:22:33 - mmengine - INFO - Iter(test) [1300/2000]    eta: 0:03:33  time: 0.1343  data_time: 0.0017  memory: 1430  
09/21 14:22:43 - mmengine - INFO - Iter(test) [1350/2000]    eta: 0:03:15  time: 0.1998  data_time: 0.0173  memory: 17110  
09/21 14:22:53 - mmengine - INFO - Iter(test) [1400/2000]    eta: 0:02:58  time: 0.1527  data_time: 0.0016  memory: 17154  
09/21 14:23:00 - mmengine - INFO - Iter(test) [1450/2000]    eta: 0:02:40  time: 0.1985  data_time: 0.0016  memory: 17130  
09/21 14:23:08 - mmengine - INFO - Iter(test) [1500/2000]    eta: 0:02:23  time: 0.1295  data_time: 0.0017  memory: 17125  
09/21 14:23:16 - mmengine - INFO - Iter(test) [1550/2000]    eta: 0:02:07  time: 0.1831  data_time: 0.0029  memory: 17154  
09/21 14:23:22 - mmengine - INFO - Iter(test) [1600/2000]    eta: 0:01:51  time: 0.1336  data_time: 0.0019  memory: 1425  
09/21 14:23:31 - mmengine - INFO - Iter(test) [1650/2000]    eta: 0:01:36  time: 0.1267  data_time: 0.0015  memory: 17192  
09/21 14:23:42 - mmengine - INFO - Iter(test) [1700/2000]    eta: 0:01:22  time: 0.1361  data_time: 0.0019  memory: 17151  
09/21 14:23:50 - mmengine - INFO - Iter(test) [1750/2000]    eta: 0:01:07  time: 0.1331  data_time: 0.0016  memory: 17111  
09/21 14:23:58 - mmengine - INFO - Iter(test) [1800/2000]    eta: 0:00:53  time: 0.1375  data_time: 0.0019  memory: 17114  
09/21 14:24:04 - mmengine - INFO - Iter(test) [1850/2000]    eta: 0:00:39  time: 0.1361  data_time: 0.0018  memory: 1317  
09/21 14:24:12 - mmengine - INFO - Iter(test) [1900/2000]    eta: 0:00:26  time: 0.1962  data_time: 0.0017  memory: 17182  
09/21 14:24:20 - mmengine - INFO - Iter(test) [1950/2000]    eta: 0:00:12  time: 0.1323  data_time: 0.0017  memory: 17197  
09/21 14:24:29 - mmengine - INFO - Iter(test) [2000/2000]    eta: 0:00:00  time: 0.1243  data_time: 0.0016  memory: 17131  
09/21 14:24:29 - mmengine - INFO - per class results:
09/21 14:24:30 - mmengine - INFO - 
+---------------------+-------+-------+
|        Class        |  IoU  |  Acc  |
+---------------------+-------+-------+
|         wall        | 76.45 | 86.53 |
|       building      | 81.29 | 93.18 |
|         sky         | 93.65 | 97.21 |
|        floor        | 81.49 | 89.93 |
|         tree        |  74.1 | 84.47 |
|       ceiling       | 82.38 | 88.88 |
|         road        | 82.37 | 91.82 |
|         bed         | 87.93 | 95.36 |
|      windowpane     | 58.42 | 77.16 |
|        grass        | 70.24 | 82.07 |
|       cabinet       | 56.71 | 73.06 |
|       sidewalk      | 63.72 | 79.47 |
|        person       | 81.27 | 88.89 |
|        earth        | 38.31 | 53.11 |
|         door        | 41.05 | 54.31 |
|        table        | 60.98 | 75.17 |
|       mountain      | 54.85 | 72.31 |
|        plant        | 50.56 | 59.62 |
|       curtain       | 73.45 | 79.78 |
|        chair        | 56.13 | 68.04 |
|         car         | 84.57 | 90.88 |
|        water        | 50.01 | 61.45 |
|       painting      | 72.99 | 85.15 |
|         sofa        | 65.86 | 83.77 |
|        shelf        | 39.29 |  57.0 |
|        house        | 46.97 | 68.16 |
|         sea         | 55.67 | 84.31 |
|        mirror       | 65.85 |  78.7 |
|         rug         | 68.72 | 81.37 |
|        field        | 29.64 | 49.44 |
|       armchair      | 38.71 | 56.38 |
|         seat        | 59.53 | 83.18 |
|        fence        | 45.98 |  57.8 |
|         desk        | 48.65 | 74.63 |
|         rock        | 52.67 | 69.04 |
|       wardrobe      | 54.67 | 65.13 |
|         lamp        | 66.35 | 77.35 |
|       bathtub       | 72.49 | 83.01 |
|       railing       | 39.16 | 55.02 |
|       cushion       |  58.7 | 69.48 |
|         base        | 38.21 | 70.92 |
|         box         | 20.35 | 27.39 |
|        column       | 47.79 | 59.31 |
|      signboard      |  37.1 | 52.93 |
|   chest of drawers  | 29.65 | 52.27 |
|       counter       | 31.48 | 43.85 |
|         sand        | 35.88 | 51.69 |
|         sink        | 70.95 | 79.25 |
|      skyscraper     | 51.54 |  62.1 |
|      fireplace      | 69.62 | 84.29 |
|     refrigerator    |  71.0 | 81.55 |
|      grandstand     |  38.2 | 62.78 |
|         path        | 20.75 | 35.38 |
|        stairs       | 22.11 | 27.59 |
|        runway       | 66.64 | 78.01 |
|         case        | 44.24 | 61.55 |
|      pool table     | 84.38 | 95.28 |
|        pillow       | 59.23 | 69.56 |
|     screen door     |  53.2 | 54.27 |
|       stairway      | 29.86 | 50.21 |
|        river        |  8.19 | 20.44 |
|        bridge       | 66.42 | 84.88 |
|       bookcase      | 28.57 | 59.11 |
|        blind        |  30.7 | 31.93 |
|     coffee table    | 65.34 | 80.06 |
|        toilet       | 83.82 | 91.15 |
|        flower       | 36.95 | 44.84 |
|         book        | 49.21 | 67.77 |
|         hill        | 11.51 | 27.89 |
|        bench        | 44.08 | 55.54 |
|      countertop     | 61.11 | 76.74 |
|        stove        | 70.11 | 85.56 |
|         palm        | 47.92 | 60.95 |
|    kitchen island   | 41.43 | 72.06 |
|       computer      | 69.25 | 81.44 |
|     swivel chair    | 45.58 | 61.23 |
|         boat        | 61.02 | 88.06 |
|         bar         | 49.11 | 62.13 |
|    arcade machine   | 79.53 | 92.59 |
|        hovel        | 10.92 | 15.42 |
|         bus         | 89.36 | 95.89 |
|        towel        | 75.41 | 80.95 |
|        light        | 58.58 | 78.78 |
|        truck        |  42.0 | 57.96 |
|        tower        | 25.97 | 51.52 |
|      chandelier     | 69.91 |  80.5 |
|        awning       | 25.71 | 37.52 |
|     streetlight     | 29.52 | 45.77 |
|        booth        |  30.4 | 67.22 |
| television receiver | 60.43 | 72.92 |
|       airplane      | 47.58 | 72.13 |
|      dirt track     | 12.95 | 29.05 |
|       apparel       | 36.79 | 53.39 |
|         pole        | 26.86 | 37.38 |
|         land        |  5.78 |  7.34 |
|      bannister      |  15.8 | 26.97 |
|      escalator      | 38.86 | 43.57 |
|       ottoman       | 52.36 | 64.91 |
|        bottle       | 30.16 | 37.47 |
|        buffet       | 38.28 |  46.7 |
|        poster       | 36.05 | 50.16 |
|        stage        | 10.19 | 27.27 |
|         van         | 48.44 | 68.49 |
|         ship        | 88.14 | 95.33 |
|       fountain      | 26.57 |  29.7 |
|    conveyer belt    | 51.03 | 68.42 |
|        canopy       | 39.96 | 46.42 |
|        washer       | 67.99 | 74.54 |
|      plaything      | 13.52 | 27.49 |
|    swimming pool    | 31.17 | 47.21 |
|        stool        | 42.72 | 66.62 |
|        barrel       | 62.89 | 73.92 |
|        basket       | 32.98 | 41.95 |
|      waterfall      | 76.49 | 90.23 |
|         tent        | 80.84 | 98.49 |
|         bag         | 13.23 | 17.82 |
|       minibike      |  68.9 | 84.96 |
|        cradle       | 79.12 | 96.27 |
|         oven        | 25.93 |  31.6 |
|         ball        |  48.4 | 57.87 |
|         food        | 61.96 | 73.48 |
|         step        | 14.52 |  19.2 |
|         tank        | 45.77 | 51.04 |
|      trade name     |  29.0 | 37.61 |
|      microwave      |  85.1 | 94.82 |
|         pot         | 45.65 | 52.64 |
|        animal       | 59.88 | 61.65 |
|       bicycle       | 59.59 | 76.49 |
|         lake        | 44.35 | 63.73 |
|      dishwasher     |  60.6 | 70.41 |
|        screen       | 67.66 | 89.78 |
|       blanket       | 16.44 | 17.97 |
|      sculpture      | 42.83 | 61.68 |
|         hood        | 59.81 | 70.14 |
|        sconce       | 50.94 | 65.89 |
|         vase        | 40.28 | 58.15 |
|    traffic light    |  40.3 | 59.53 |
|         tray        | 16.82 | 19.32 |
|        ashcan       | 39.64 | 61.78 |
|         fan         | 59.97 | 80.56 |
|         pier        | 43.16 | 61.33 |
|      crt screen     |  1.04 |  2.73 |
|        plate        | 59.55 | 76.22 |
|       monitor       |  2.74 |  3.87 |
|    bulletin board   | 51.09 | 68.15 |
|        shower       |  3.08 | 18.93 |
|       radiator      |  62.3 | 72.19 |
|        glass        | 15.88 | 17.49 |
|        clock        | 28.69 | 36.78 |
|         flag        |  49.4 | 54.02 |
+---------------------+-------+-------+
09/21 14:24:30 - mmengine - INFO - Iter(test) [2000/2000]    aAcc: 82.2800  mIoU: 49.2000  mAcc: 62.4100  data_time: 0.0031  time: 0.2559
Finished processing corruption type: jpeg_compression
Runtime: 1726921504

============================= JOB FEEDBACK =============================

NodeName=uc2n482
Job ID: 24247184
Cluster: uc2
User/Group: ma_mkacar/ma_ma
State: COMPLETED (exit code 0)
Nodes: 1
Cores per node: 16
CPU Utilized: 11:31:44
CPU Efficiency: 5.45% of 8-19:21:52 core-walltime
Job Wall-clock time: 13:12:37
Memory Utilized: 3.89 GB
Memory Efficiency: 3.89% of 100.00 GB
