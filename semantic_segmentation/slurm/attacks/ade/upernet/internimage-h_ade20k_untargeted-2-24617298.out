Started at Wed Nov  6 18:59:09 CET 2024
/pfs/work7/workspace/scratch/ma_dschader-team_project_fss2024/miniconda3/envs/py310/lib/python3.10/site-packages/torch/cuda/__init__.py:155: UserWarning: 
NVIDIA H100 PCIe with CUDA capability sm_90 is not compatible with the current PyTorch installation.
The current PyTorch install supports CUDA capabilities sm_37 sm_50 sm_60 sm_61 sm_70 sm_75 sm_80 sm_86 compute_37.
If you want to use the NVIDIA H100 PCIe GPU with PyTorch, please check the instructions at https://pytorch.org/get-started/locally/

  warnings.warn(incompatible_device_warn.format(device_name, capability, " ".join(arch_list), device_name))
11/06 19:01:50 - mmengine - INFO - 
------------------------------------------------------------
System environment:
    sys.platform: linux
    Python: 3.10.13 | packaged by conda-forge | (main, Dec 23 2023, 15:36:39) [GCC 12.3.0]
    CUDA available: True
    MUSA available: False
    numpy_random_seed: 1276988900
    GPU 0: NVIDIA H100 PCIe
    CUDA_HOME: None
    GCC: gcc (GCC) 8.5.0 20210514 (Red Hat 8.5.0-18)
    PyTorch: 1.13.1
    PyTorch compiling details: PyTorch built with:
  - GCC 9.3
  - C++ Version: 201402
  - Intel(R) oneAPI Math Kernel Library Version 2023.1-Product Build 20230303 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v2.6.0 (Git Hash 52b5f107dd9cf10910aaa19cb47f3abf9b349815)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - LAPACK is enabled (usually provided by MKL)
  - NNPACK is enabled
  - CPU capability usage: AVX2
  - CUDA Runtime 11.7
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_61,code=sm_61;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86;-gencode;arch=compute_37,code=compute_37
  - CuDNN 8.5
  - Magma 2.6.1
  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.7, CUDNN_VERSION=8.5.0, CXX_COMPILER=/opt/rh/devtoolset-9/root/usr/bin/c++, CXX_FLAGS= -fabi-version=11 -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -DEDGE_PROFILER_USE_KINETO -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Werror=non-virtual-dtor -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wunused-local-typedefs -Wno-unused-parameter -Wno-unused-function -Wno-unused-result -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Werror=cast-function-type -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.13.1, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, USE_ROCM=OFF, 

    TorchVision: 0.14.1
    OpenCV: 3.4.18
    MMEngine: 0.10.4

Runtime environment:
    cudnn_benchmark: True
    mp_cfg: {'mp_start_method': 'fork', 'opencv_num_threads': 0}
    dist_cfg: {'backend': 'nccl'}
    seed: 1276988900
    Distributed launcher: none
    Distributed training: False
    GPU number: 1
------------------------------------------------------------

11/06 19:01:51 - mmengine - INFO - Config:
checkpoint_config = dict(by_epoch=False, interval=1000, max_keep_ckpts=1)
crop_size = (
    896,
    896,
)
data = dict(
    samples_per_gpu=1,
    test=dict(pipeline=[
        dict(type='LoadImageFromFile'),
        dict(
            flip=False,
            img_scale=(
                3584,
                896,
            ),
            transforms=[
                dict(keep_ratio=True, type='Resize'),
                dict(size_divisor=32, type='ResizeToMultiple'),
                dict(type='RandomFlip'),
                dict(
                    mean=[
                        123.675,
                        116.28,
                        103.53,
                    ],
                    std=[
                        58.395,
                        57.12,
                        57.375,
                    ],
                    to_rgb=True,
                    type='Normalize'),
                dict(keys=[
                    'img',
                ], type='ImageToTensor'),
                dict(keys=[
                    'img',
                ], type='Collect'),
            ],
            type='MultiScaleFlipAug'),
    ]),
    train=dict(pipeline=[
        dict(type='LoadImageFromFile'),
        dict(reduce_zero_label=True, type='LoadAnnotations'),
        dict(img_scale=(
            3584,
            896,
        ), ratio_range=(
            0.5,
            2.0,
        ), type='Resize'),
        dict(cat_max_ratio=0.75, crop_size=(
            896,
            896,
        ), type='RandomCrop'),
        dict(prob=0.5, type='RandomFlip'),
        dict(type='PhotoMetricDistortion'),
        dict(
            mean=[
                123.675,
                116.28,
                103.53,
            ],
            std=[
                58.395,
                57.12,
                57.375,
            ],
            to_rgb=True,
            type='Normalize'),
        dict(pad_val=0, seg_pad_val=255, size=(
            896,
            896,
        ), type='Pad'),
        dict(type='DefaultFormatBundle'),
        dict(keys=[
            'img',
            'gt_semantic_seg',
        ], type='Collect'),
    ]),
    val=dict(pipeline=[
        dict(type='LoadImageFromFile'),
        dict(
            flip=False,
            img_scale=(
                3584,
                896,
            ),
            transforms=[
                dict(keep_ratio=True, type='Resize'),
                dict(size_divisor=32, type='ResizeToMultiple'),
                dict(type='RandomFlip'),
                dict(
                    mean=[
                        123.675,
                        116.28,
                        103.53,
                    ],
                    std=[
                        58.395,
                        57.12,
                        57.375,
                    ],
                    to_rgb=True,
                    type='Normalize'),
                dict(keys=[
                    'img',
                ], type='ImageToTensor'),
                dict(keys=[
                    'img',
                ], type='Collect'),
            ],
            type='MultiScaleFlipAug'),
    ]))
data_preprocessor = dict(
    bgr_to_rgb=True,
    corruption=None,
    enable_normalization=False,
    mean=[
        123.675,
        116.28,
        103.53,
    ],
    pad_val=0,
    seg_pad_val=255,
    std=[
        58.395,
        57.12,
        57.375,
    ],
    type='SegDataPreProcessor')
data_root = 'data/ade/ADEChallengeData2016'
dataset_type = 'ADE20KDataset'
default_hooks = dict(
    checkpoint=dict(by_epoch=False, interval=16000, type='CheckpointHook'),
    logger=dict(interval=50, log_metric_by_epoch=False, type='LoggerHook'),
    param_scheduler=dict(type='ParamSchedulerHook'),
    sampler_seed=dict(type='DistSamplerSeedHook'),
    timer=dict(type='IterTimerHook'),
    visualization=dict(draw=True, type='SegVisualizationHook'))
default_scope = 'mmseg'
env_cfg = dict(
    cudnn_benchmark=True,
    dist_cfg=dict(backend='nccl'),
    mp_cfg=dict(mp_start_method='fork', opencv_num_threads=0))
evaluation = dict(interval=16000, metric='mIoU', save_best='mIoU')
img_norm_cfg = dict(
    mean=[
        123.675,
        116.28,
        103.53,
    ],
    std=[
        58.395,
        57.12,
        57.375,
    ],
    to_rgb=True)
img_ratios = [
    0.5,
    0.75,
    1.0,
    1.25,
    1.5,
    1.75,
]
launcher = 'none'
load_from = '../checkpoint_files/upernet/upernet_internimage_h_896_160k_ade20k.pth'
log_level = 'INFO'
log_processor = dict(by_epoch=False)
lr_config = dict(
    _delete_=True,
    by_epoch=False,
    min_lr=0.0,
    policy='poly',
    power=1.0,
    warmup='linear',
    warmup_iters=1500,
    warmup_ratio=1e-06)
model = dict(
    attack_cfg=dict(
        alpha=0.01, epsilon=8, iterations=20, name='segpgd', norm='linf'),
    attack_loss=dict(
        loss_weight=1.0,
        reduction='none',
        type='CrossEntropyLoss',
        use_sigmoid=False),
    auxiliary_head=dict(
        align_corners=False,
        channels=256,
        concat_input=False,
        dropout_ratio=0.1,
        in_channels=1280,
        in_index=2,
        loss_decode=dict(
            loss_weight=0.4, type='CrossEntropyLoss', use_sigmoid=False),
        norm_cfg=dict(requires_grad=True, type='SyncBN'),
        num_classes=150,
        num_convs=1,
        type='FCNHead'),
    backbone=dict(
        center_feature_scale=True,
        channels=320,
        core_op='DCNv3',
        depths=[
            6,
            6,
            32,
            6,
        ],
        drop_path_rate=0.5,
        dw_kernel_size=5,
        groups=[
            10,
            20,
            40,
            80,
        ],
        init_cfg=dict(
            checkpoint=
            'https://huggingface.co/OpenGVLab/InternImage/resolve/main/internimage_h_jointto22k_384.pth',
            type='Pretrained'),
        layer_scale=None,
        level2_post_norm=True,
        level2_post_norm_block_ids=[
            5,
            11,
            17,
            23,
            29,
        ],
        mlp_ratio=4.0,
        norm_layer='LN',
        offset_scale=1.0,
        out_indices=(
            0,
            1,
            2,
            3,
        ),
        post_norm=False,
        res_post_norm=True,
        type='InternImage',
        with_cp=False),
    data_preprocessor=dict(
        bgr_to_rgb=True,
        corruption=None,
        enable_normalization=False,
        mean=[
            123.675,
            116.28,
            103.53,
        ],
        pad_val=0,
        seg_pad_val=255,
        std=[
            58.395,
            57.12,
            57.375,
        ],
        type='SegDataPreProcessor'),
    decode_head=dict(
        align_corners=False,
        channels=512,
        dropout_ratio=0.1,
        in_channels=[
            320,
            640,
            1280,
            2560,
        ],
        in_index=[
            0,
            1,
            2,
            3,
        ],
        loss_decode=dict(
            loss_weight=1.0,
            reduction='none',
            type='CrossEntropyLoss',
            use_sigmoid=False),
        norm_cfg=dict(requires_grad=True, type='SyncBN'),
        num_classes=150,
        pool_scales=(
            1,
            2,
            3,
            6,
        ),
        type='UPerHead'),
    enable_normalization=False,
    normalize_mean_std=dict(
        mean=[
            123.675,
            116.28,
            103.53,
        ], std=[
            58.395,
            57.12,
            57.375,
        ]),
    perform_attack=True,
    pretrained='open-mmlab://resnet50_v1c',
    test_cfg=dict(mode='whole'),
    train_cfg=dict(),
    type='EncoderDecoder')
norm_cfg = dict(requires_grad=True, type='SyncBN')
optim_wrapper = dict(
    clip_grad=None,
    optimizer=dict(lr=0.01, momentum=0.9, type='SGD', weight_decay=0.0005),
    type='OptimWrapper')
optimizer = dict(
    betas=(
        0.9,
        0.999,
    ),
    constructor='CustomLayerDecayOptimizerConstructor',
    lr=2e-05,
    paramwise_cfg=dict(
        depths=[
            6,
            6,
            32,
            6,
        ],
        layer_decay_rate=0.95,
        num_layers=50,
        offset_lr_scale=1.0),
    type='AdamW',
    weight_decay=0.05)
optimizer_config = dict(
    _delete_=True, grad_clip=dict(max_norm=0.1, norm_type=2))
param_scheduler = [
    dict(
        begin=0,
        by_epoch=False,
        end=160000,
        eta_min=0.0001,
        power=0.9,
        type='PolyLR'),
]
pretrained = 'https://huggingface.co/OpenGVLab/InternImage/resolve/main/internimage_h_jointto22k_384.pth'
resume = False
runner = dict(type='IterBasedRunner')
test_cfg = dict(type='TestLoop')
test_dataloader = dict(
    batch_size=1,
    dataset=dict(
        data_prefix=dict(
            img_path='images/validation',
            seg_map_path='annotations/validation'),
        data_root='data/ade/ADEChallengeData2016',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(keep_ratio=True, scale=(
                2048,
                512,
            ), type='Resize'),
            dict(reduce_zero_label=True, type='LoadAnnotations'),
            dict(type='PackSegInputs'),
        ],
        type='ADE20KDataset'),
    num_workers=4,
    persistent_workers=True,
    sampler=dict(shuffle=False, type='DefaultSampler'))
test_evaluator = dict(
    iou_metrics=[
        'mIoU',
    ], type='IoUMetric')
test_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(
        flip=False,
        img_scale=(
            3584,
            896,
        ),
        transforms=[
            dict(keep_ratio=True, type='Resize'),
            dict(size_divisor=32, type='ResizeToMultiple'),
            dict(type='RandomFlip'),
            dict(
                mean=[
                    123.675,
                    116.28,
                    103.53,
                ],
                std=[
                    58.395,
                    57.12,
                    57.375,
                ],
                to_rgb=True,
                type='Normalize'),
            dict(keys=[
                'img',
            ], type='ImageToTensor'),
            dict(keys=[
                'img',
            ], type='Collect'),
        ],
        type='MultiScaleFlipAug'),
]
train_cfg = dict(
    max_iters=160000, type='IterBasedTrainLoop', val_interval=16000)
train_dataloader = dict(
    batch_size=4,
    dataset=dict(
        data_prefix=dict(
            img_path='images/training', seg_map_path='annotations/training'),
        data_root='data/ade/ADEChallengeData2016',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(reduce_zero_label=True, type='LoadAnnotations'),
            dict(
                keep_ratio=True,
                ratio_range=(
                    0.5,
                    2.0,
                ),
                scale=(
                    2048,
                    512,
                ),
                type='RandomResize'),
            dict(
                cat_max_ratio=0.75, crop_size=(
                    512,
                    512,
                ), type='RandomCrop'),
            dict(prob=0.5, type='RandomFlip'),
            dict(type='PhotoMetricDistortion'),
            dict(type='PackSegInputs'),
        ],
        type='ADE20KDataset'),
    num_workers=4,
    persistent_workers=True,
    sampler=dict(shuffle=True, type='InfiniteSampler'))
train_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(reduce_zero_label=True, type='LoadAnnotations'),
    dict(img_scale=(
        3584,
        896,
    ), ratio_range=(
        0.5,
        2.0,
    ), type='Resize'),
    dict(cat_max_ratio=0.75, crop_size=(
        896,
        896,
    ), type='RandomCrop'),
    dict(prob=0.5, type='RandomFlip'),
    dict(type='PhotoMetricDistortion'),
    dict(
        mean=[
            123.675,
            116.28,
            103.53,
        ],
        std=[
            58.395,
            57.12,
            57.375,
        ],
        to_rgb=True,
        type='Normalize'),
    dict(pad_val=0, seg_pad_val=255, size=(
        896,
        896,
    ), type='Pad'),
    dict(type='DefaultFormatBundle'),
    dict(keys=[
        'img',
        'gt_semantic_seg',
    ], type='Collect'),
]
tta_model = dict(type='SegTTAModel')
tta_pipeline = [
    dict(backend_args=None, type='LoadImageFromFile'),
    dict(
        transforms=[
            [
                dict(keep_ratio=True, scale_factor=0.5, type='Resize'),
                dict(keep_ratio=True, scale_factor=0.75, type='Resize'),
                dict(keep_ratio=True, scale_factor=1.0, type='Resize'),
                dict(keep_ratio=True, scale_factor=1.25, type='Resize'),
                dict(keep_ratio=True, scale_factor=1.5, type='Resize'),
                dict(keep_ratio=True, scale_factor=1.75, type='Resize'),
            ],
            [
                dict(direction='horizontal', prob=0.0, type='RandomFlip'),
                dict(direction='horizontal', prob=1.0, type='RandomFlip'),
            ],
            [
                dict(type='LoadAnnotations'),
            ],
            [
                dict(type='PackSegInputs'),
            ],
        ],
        type='TestTimeAug'),
]
val_cfg = dict(type='ValLoop')
val_dataloader = dict(
    batch_size=1,
    dataset=dict(
        data_prefix=dict(
            img_path='images/validation',
            seg_map_path='annotations/validation'),
        data_root='data/ade/ADEChallengeData2016',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(keep_ratio=True, scale=(
                2048,
                512,
            ), type='Resize'),
            dict(reduce_zero_label=True, type='LoadAnnotations'),
            dict(type='PackSegInputs'),
        ],
        type='ADE20KDataset'),
    num_workers=4,
    persistent_workers=True,
    sampler=dict(shuffle=False, type='DefaultSampler'))
val_evaluator = dict(
    iou_metrics=[
        'mIoU',
    ], type='IoUMetric')
vis_backends = [
    dict(type='LocalVisBackend'),
]
visualizer = dict(
    name='visualizer',
    save_dir=
    '../aa_workdir/ade/upernet/upernet_internimage_h_896_160k_ade20k/attack_segpgd/norm_linf/iterations_20/epsilon_8/alpha_0.01/show_dir',
    type='SegLocalVisualizer',
    vis_backends=[
        dict(type='LocalVisBackend'),
    ])
work_dir = '../aa_workdir/ade/upernet/upernet_internimage_h_896_160k_ade20k/attack_segpgd/norm_linf/iterations_20/epsilon_8/alpha_0.01'

/pfs/work7/workspace/scratch/ma_dschader-team_project_fss2024/benchmarking_robustness/semantic_segmentation/mmsegmentation/ops_dcnv3/modules/dcnv3.py:20: UserWarning: Now, we support DCNv4 in InternImage.
  warnings.warn('Now, we support DCNv4 in InternImage.')
2024-11-06 19:03:18,246 - mmseg - INFO - using core type: DCNv3
2024-11-06 19:03:18,261 - mmseg - INFO - using activation layer: GELU
2024-11-06 19:03:18,261 - mmseg - INFO - using main norm layer: LN
2024-11-06 19:03:18,261 - mmseg - INFO - using dpr: linear, 0.5
2024-11-06 19:03:18,262 - mmseg - INFO - level2_post_norm: True
2024-11-06 19:03:18,262 - mmseg - INFO - level2_post_norm_block_ids: [5, 11, 17, 23, 29]
2024-11-06 19:03:18,262 - mmseg - INFO - res_post_norm: True
2024-11-06 19:03:18,262 - mmseg - INFO - use_dcn_v4_op: False
Number of parameters:  1120338396
11/06 19:21:56 - mmengine - INFO - Distributed training is not used, all SyncBatchNorm (SyncBN) layers in the model will be automatically reverted to BatchNormXd layers if they are used.
11/06 19:22:01 - mmengine - INFO - Hooks will be executed in the following order:
before_run:
(VERY_HIGH   ) RuntimeInfoHook                    
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
before_train:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_train_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(NORMAL      ) DistSamplerSeedHook                
 -------------------- 
before_train_iter:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_train_iter:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(NORMAL      ) SegVisualizationHook               
(BELOW_NORMAL) LoggerHook                         
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
after_train_epoch:
(NORMAL      ) IterTimerHook                      
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_val:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
before_val_epoch:
(NORMAL      ) IterTimerHook                      
 -------------------- 
before_val_iter:
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_val_iter:
(NORMAL      ) IterTimerHook                      
(NORMAL      ) SegVisualizationHook               
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_val_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
after_val:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
after_train:
(VERY_HIGH   ) RuntimeInfoHook                    
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_test:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
before_test_epoch:
(NORMAL      ) IterTimerHook                      
 -------------------- 
before_test_iter:
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_test_iter:
(NORMAL      ) IterTimerHook                      
(NORMAL      ) SegVisualizationHook               
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_test_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_test:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
after_run:
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
11/06 19:22:08 - mmengine - WARNING - The prefix is not set in metric class IoUMetric.
Loads checkpoint by local backend from path: ../checkpoint_files/upernet/upernet_internimage_h_896_160k_ade20k.pth
11/06 19:22:41 - mmengine - INFO - Load checkpoint from ../checkpoint_files/upernet/upernet_internimage_h_896_160k_ade20k.pth
11/06 20:04:25 - mmengine - INFO - Iter(test) [  50/2000]    eta: 1 day, 3:04:04  time: 25.7854  data_time: 0.0099  memory: 62848  
11/06 20:24:40 - mmengine - INFO - Iter(test) [ 100/2000]    eta: 19:36:28  time: 25.3046  data_time: 0.1305  memory: 62171  
11/06 20:44:32 - mmengine - INFO - Iter(test) [ 150/2000]    eta: 16:48:42  time: 24.0128  data_time: 0.0019  memory: 54826  
11/06 21:05:04 - mmengine - INFO - Iter(test) [ 200/2000]    eta: 15:20:51  time: 23.4744  data_time: 0.0019  memory: 70130  
11/06 21:24:05 - mmengine - INFO - Iter(test) [ 250/2000]    eta: 14:09:37  time: 22.7701  data_time: 0.0018  memory: 75896  
11/06 21:43:03 - mmengine - INFO - Iter(test) [ 300/2000]    eta: 13:15:09  time: 23.5930  data_time: 0.0020  memory: 59264  
11/06 22:02:22 - mmengine - INFO - Iter(test) [ 350/2000]    eta: 12:32:40  time: 22.1074  data_time: 0.0018  memory: 61425  
11/06 22:22:22 - mmengine - INFO - Iter(test) [ 400/2000]    eta: 11:58:26  time: 25.7229  data_time: 0.0558  memory: 59982  
11/06 22:39:51 - mmengine - INFO - Iter(test) [ 450/2000]    eta: 11:18:58  time: 21.3286  data_time: 0.0017  memory: 50543  
11/06 22:58:52 - mmengine - INFO - Iter(test) [ 500/2000]    eta: 10:48:22  time: 22.3807  data_time: 0.0016  memory: 51035  
11/06 23:19:00 - mmengine - INFO - Iter(test) [ 550/2000]    eta: 10:22:53  time: 24.2340  data_time: 0.0017  memory: 57641  
11/06 23:38:24 - mmengine - INFO - Iter(test) [ 600/2000]    eta: 9:56:26  time: 24.2484  data_time: 0.0017  memory: 57706  
11/06 23:57:23 - mmengine - INFO - Iter(test) [ 650/2000]    eta: 9:30:24  time: 23.2436  data_time: 0.0016  memory: 63304  
11/07 00:17:30 - mmengine - INFO - Iter(test) [ 700/2000]    eta: 9:07:23  time: 23.6979  data_time: 0.0018  memory: 60865  
11/07 00:37:34 - mmengine - INFO - Iter(test) [ 750/2000]    eta: 8:44:37  time: 23.4178  data_time: 0.0016  memory: 64193  
11/07 00:55:33 - mmengine - INFO - Iter(test) [ 800/2000]    eta: 8:19:09  time: 23.0241  data_time: 0.0017  memory: 51611  
11/07 01:14:51 - mmengine - INFO - Iter(test) [ 850/2000]    eta: 7:56:21  time: 23.2517  data_time: 0.0018  memory: 50110  
11/07 01:32:33 - mmengine - INFO - Iter(test) [ 900/2000]    eta: 7:31:58  time: 20.6371  data_time: 0.0016  memory: 53671  
11/07 01:52:27 - mmengine - INFO - Iter(test) [ 950/2000]    eta: 7:10:39  time: 22.6819  data_time: 0.0017  memory: 56829  
11/07 02:10:47 - mmengine - INFO - Iter(test) [1000/2000]    eta: 6:48:01  time: 21.9421  data_time: 0.0017  memory: 56985  
11/07 02:30:54 - mmengine - INFO - Iter(test) [1050/2000]    eta: 6:27:18  time: 26.4828  data_time: 0.1260  memory: 64390  
11/07 02:50:27 - mmengine - INFO - Iter(test) [1100/2000]    eta: 6:06:15  time: 22.3229  data_time: 0.0016  memory: 55464  
11/07 03:09:10 - mmengine - INFO - Iter(test) [1150/2000]    eta: 5:44:43  time: 23.1013  data_time: 0.0016  memory: 54165  
11/07 03:28:29 - mmengine - INFO - Iter(test) [1200/2000]    eta: 5:23:47  time: 22.3106  data_time: 0.0016  memory: 57535  
11/07 03:47:12 - mmengine - INFO - Iter(test) [1250/2000]    eta: 5:02:37  time: 22.4331  data_time: 0.0016  memory: 58449  
11/07 04:05:04 - mmengine - INFO - Iter(test) [1300/2000]    eta: 4:41:13  time: 23.0685  data_time: 0.0015  memory: 50716  
11/07 04:23:47 - mmengine - INFO - Iter(test) [1350/2000]    eta: 4:20:28  time: 21.1137  data_time: 0.0016  memory: 50673  
11/07 04:42:54 - mmengine - INFO - Iter(test) [1400/2000]    eta: 4:00:02  time: 24.7268  data_time: 0.0806  memory: 58209  
11/07 05:01:21 - mmengine - INFO - Iter(test) [1450/2000]    eta: 3:39:25  time: 23.7425  data_time: 0.0015  memory: 56832  
11/07 05:19:51 - mmengine - INFO - Iter(test) [1500/2000]    eta: 3:19:00  time: 21.2359  data_time: 0.0034  memory: 50127  
11/07 05:39:33 - mmengine - INFO - Iter(test) [1550/2000]    eta: 2:59:03  time: 23.2222  data_time: 0.0016  memory: 55930  
11/07 05:58:13 - mmengine - INFO - Iter(test) [1600/2000]    eta: 2:38:51  time: 22.5759  data_time: 0.0017  memory: 49783  
11/07 06:16:53 - mmengine - INFO - Iter(test) [1650/2000]    eta: 2:18:44  time: 20.9786  data_time: 0.0015  memory: 70308  
11/07 06:36:11 - mmengine - INFO - Iter(test) [1700/2000]    eta: 1:58:49  time: 22.9377  data_time: 0.0036  memory: 55843  
11/07 06:55:38 - mmengine - INFO - Iter(test) [1750/2000]    eta: 1:38:58  time: 22.5573  data_time: 0.0047  memory: 56695  
11/07 07:13:58 - mmengine - INFO - Iter(test) [1800/2000]    eta: 1:19:00  time: 23.3178  data_time: 0.0018  memory: 51245  
11/07 07:33:11 - mmengine - INFO - Iter(test) [1850/2000]    eta: 0:59:12  time: 23.1843  data_time: 0.0052  memory: 45728  
11/07 07:51:03 - mmengine - INFO - Iter(test) [1900/2000]    eta: 0:39:22  time: 22.0423  data_time: 0.0042  memory: 60195  
11/07 08:10:25 - mmengine - INFO - Iter(test) [1950/2000]    eta: 0:19:40  time: 22.2591  data_time: 0.0016  memory: 73630  
11/07 08:29:09 - mmengine - INFO - Iter(test) [2000/2000]    eta: 0:00:00  time: 20.8008  data_time: 0.0014  memory: 60825  
11/07 08:29:09 - mmengine - INFO - per class results:
11/07 08:29:09 - mmengine - INFO - 
+---------------------+-------+-------+
|        Class        |  IoU  |  Acc  |
+---------------------+-------+-------+
|         wall        |  4.31 |  7.46 |
|       building      |  1.91 |  2.68 |
|         sky         |  6.41 |  6.57 |
|        floor        |  3.96 |  5.62 |
|         tree        |  1.06 |  1.27 |
|       ceiling       |  4.27 |  6.46 |
|         road        |  0.28 |  0.29 |
|         bed         |  3.14 |  4.33 |
|      windowpane     |  1.0  |  3.63 |
|        grass        |  1.13 |  1.82 |
|       cabinet       |  1.09 |  2.49 |
|       sidewalk      |  0.4  |  0.54 |
|        person       | 10.74 | 13.19 |
|        earth        |  0.08 |  0.17 |
|         door        |  0.54 |  1.41 |
|        table        |  0.43 |  1.04 |
|       mountain      |  0.41 |  0.66 |
|        plant        |  0.17 |  0.31 |
|       curtain       |  0.36 |  1.11 |
|        chair        |  0.39 |  0.98 |
|         car         | 18.84 | 24.27 |
|        water        |  0.52 |  0.95 |
|       painting      |  1.03 |  1.98 |
|         sofa        |  1.9  |  8.37 |
|        shelf        |  0.19 |  0.3  |
|        house        |  0.12 |  0.32 |
|         sea         |  0.0  |  0.0  |
|        mirror       |  0.16 |  1.6  |
|         rug         |  0.0  |  0.0  |
|        field        |  1.8  |  5.41 |
|       armchair      |  0.01 |  0.02 |
|         seat        |  0.0  |  0.0  |
|        fence        |  0.27 |  0.76 |
|         desk        |  0.88 |  3.1  |
|         rock        |  0.91 |  1.26 |
|       wardrobe      |  0.75 |  4.41 |
|         lamp        |  4.68 |  9.76 |
|       bathtub       |  0.03 |  0.06 |
|       railing       |  1.07 |  4.72 |
|       cushion       |  0.79 |  1.66 |
|         base        |  0.02 |  0.25 |
|         box         |  0.08 |  0.38 |
|        column       |  0.77 |  1.89 |
|      signboard      |  1.82 |  3.65 |
|   chest of drawers  |  0.0  |  0.0  |
|       counter       |  0.0  |  0.0  |
|         sand        |  0.0  |  0.0  |
|         sink        |  1.87 |  3.24 |
|      skyscraper     |  0.49 |  1.46 |
|      fireplace      |  2.32 |  6.3  |
|     refrigerator    |  1.69 |  3.27 |
|      grandstand     |  0.0  |  0.0  |
|         path        |  0.0  |  0.0  |
|        stairs       |  0.28 |  1.89 |
|        runway       |  0.0  |  0.0  |
|         case        |  0.0  |  0.0  |
|      pool table     | 14.93 | 18.95 |
|        pillow       |  0.84 |  1.17 |
|     screen door     |  0.0  |  0.0  |
|       stairway      |  0.01 |  0.03 |
|        river        |  0.0  |  0.0  |
|        bridge       |  1.81 | 11.72 |
|       bookcase      |  0.26 |  0.52 |
|        blind        |  0.0  |  0.0  |
|     coffee table    |  0.47 |  0.62 |
|        toilet       |  3.27 |  4.03 |
|        flower       |  0.41 |  1.4  |
|         book        |  0.95 |  1.6  |
|         hill        |  0.03 |  0.13 |
|        bench        |  0.0  |  0.0  |
|      countertop     |  1.23 |  3.2  |
|        stove        |  8.85 | 10.08 |
|         palm        |  5.01 | 11.16 |
|    kitchen island   |  0.0  |  0.0  |
|       computer      |  2.15 |  2.96 |
|     swivel chair    |  0.0  |  0.01 |
|         boat        |  0.35 |  3.18 |
|         bar         |  0.61 |  1.19 |
|    arcade machine   |  0.0  |  0.0  |
|        hovel        |  0.0  |  0.0  |
|         bus         |  3.78 |  3.92 |
|        towel        |  0.48 |  2.28 |
|        light        |  1.36 |  2.15 |
|        truck        |  0.05 |  0.26 |
|        tower        |  0.0  |  0.0  |
|      chandelier     |  1.32 |  1.9  |
|        awning       |  0.06 |  0.55 |
|     streetlight     |  0.68 |  1.05 |
|        booth        |  0.0  |  0.0  |
| television receiver |  0.95 |  4.05 |
|       airplane      |  6.55 | 20.11 |
|      dirt track     |  0.0  |  0.0  |
|       apparel       |  0.07 |  0.51 |
|         pole        |  0.41 |  0.52 |
|         land        |  0.0  |  0.0  |
|      bannister      |  0.0  |  0.0  |
|      escalator      |  0.0  |  0.0  |
|       ottoman       |  0.0  |  0.0  |
|        bottle       |  0.34 |  0.85 |
|        buffet       |  0.0  |  0.0  |
|        poster       |  0.0  |  0.0  |
|        stage        |  0.0  |  0.0  |
|         van         |  0.0  |  0.0  |
|         ship        |  0.0  |  0.0  |
|       fountain      |  0.0  |  0.0  |
|    conveyer belt    |  0.0  |  0.0  |
|        canopy       |  0.17 |  3.98 |
|        washer       |  0.0  |  0.0  |
|      plaything      |  0.35 |  6.36 |
|    swimming pool    |  0.0  |  0.0  |
|        stool        |  0.21 |  0.83 |
|        barrel       |  3.34 | 23.51 |
|        basket       |  0.12 |  2.41 |
|      waterfall      |  0.0  |  0.0  |
|         tent        |  0.13 |  2.77 |
|         bag         |  0.03 |  0.25 |
|       minibike      |  0.61 |  1.04 |
|        cradle       |  1.11 | 24.47 |
|         oven        |  0.0  |  0.06 |
|         ball        |  0.0  |  0.0  |
|         food        |  0.0  |  0.0  |
|         step        |  0.01 |  0.03 |
|         tank        |  0.0  |  0.0  |
|      trade name     |  0.0  |  0.0  |
|      microwave      |  0.0  |  0.01 |
|         pot         |  0.12 |  0.4  |
|        animal       |  4.96 |  8.73 |
|       bicycle       |  0.62 |  4.67 |
|         lake        |  0.0  |  0.0  |
|      dishwasher     |  1.04 |  2.05 |
|        screen       |  0.0  |  0.0  |
|       blanket       |  0.0  |  0.0  |
|      sculpture      |  0.0  |  0.0  |
|         hood        |  4.2  |  5.48 |
|        sconce       |  0.25 |  0.86 |
|         vase        |  0.1  |  1.53 |
|    traffic light    |  0.0  |  0.0  |
|         tray        |  0.04 |  0.41 |
|        ashcan       |  0.0  |  0.0  |
|         fan         |  1.47 |  9.15 |
|         pier        |  0.0  |  0.0  |
|      crt screen     |  0.12 |  1.38 |
|        plate        |  0.0  |  0.0  |
|       monitor       |  0.0  |  0.0  |
|    bulletin board   |  0.01 |  0.04 |
|        shower       |  0.08 |  8.65 |
|       radiator      |  0.0  |  0.0  |
|        glass        |  0.46 |  3.18 |
|        clock        |  0.6  |  4.69 |
|         flag        |  0.18 |  0.63 |
+---------------------+-------+-------+
11/07 08:29:09 - mmengine - INFO - Iter(test) [2000/2000]    aAcc: 4.2100  mIoU: 1.0900  mAcc: 2.5400  data_time: 0.0483  time: 23.5880
/pfs/work7/workspace/scratch/ma_dschader-team_project_fss2024/miniconda3/envs/py310/lib/python3.10/site-packages/torch/cuda/__init__.py:155: UserWarning: 
NVIDIA H100 PCIe with CUDA capability sm_90 is not compatible with the current PyTorch installation.
The current PyTorch install supports CUDA capabilities sm_37 sm_50 sm_60 sm_61 sm_70 sm_75 sm_80 sm_86 compute_37.
If you want to use the NVIDIA H100 PCIe GPU with PyTorch, please check the instructions at https://pytorch.org/get-started/locally/

  warnings.warn(incompatible_device_warn.format(device_name, capability, " ".join(arch_list), device_name))
11/07 08:31:42 - mmengine - INFO - 
------------------------------------------------------------
System environment:
    sys.platform: linux
    Python: 3.10.13 | packaged by conda-forge | (main, Dec 23 2023, 15:36:39) [GCC 12.3.0]
    CUDA available: True
    MUSA available: False
    numpy_random_seed: 1616806811
    GPU 0: NVIDIA H100 PCIe
    CUDA_HOME: None
    GCC: gcc (GCC) 8.5.0 20210514 (Red Hat 8.5.0-18)
    PyTorch: 1.13.1
    PyTorch compiling details: PyTorch built with:
  - GCC 9.3
  - C++ Version: 201402
  - Intel(R) oneAPI Math Kernel Library Version 2023.1-Product Build 20230303 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v2.6.0 (Git Hash 52b5f107dd9cf10910aaa19cb47f3abf9b349815)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - LAPACK is enabled (usually provided by MKL)
  - NNPACK is enabled
  - CPU capability usage: AVX2
  - CUDA Runtime 11.7
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_61,code=sm_61;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86;-gencode;arch=compute_37,code=compute_37
  - CuDNN 8.5
  - Magma 2.6.1
  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.7, CUDNN_VERSION=8.5.0, CXX_COMPILER=/opt/rh/devtoolset-9/root/usr/bin/c++, CXX_FLAGS= -fabi-version=11 -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -DEDGE_PROFILER_USE_KINETO -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Werror=non-virtual-dtor -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wunused-local-typedefs -Wno-unused-parameter -Wno-unused-function -Wno-unused-result -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Werror=cast-function-type -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.13.1, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, USE_ROCM=OFF, 

    TorchVision: 0.14.1
    OpenCV: 3.4.18
    MMEngine: 0.10.4

Runtime environment:
    cudnn_benchmark: True
    mp_cfg: {'mp_start_method': 'fork', 'opencv_num_threads': 0}
    dist_cfg: {'backend': 'nccl'}
    seed: 1616806811
    Distributed launcher: none
    Distributed training: False
    GPU number: 1
------------------------------------------------------------

11/07 08:31:43 - mmengine - INFO - Config:
checkpoint_config = dict(by_epoch=False, interval=1000, max_keep_ckpts=1)
crop_size = (
    896,
    896,
)
data = dict(
    samples_per_gpu=1,
    test=dict(pipeline=[
        dict(type='LoadImageFromFile'),
        dict(
            flip=False,
            img_scale=(
                3584,
                896,
            ),
            transforms=[
                dict(keep_ratio=True, type='Resize'),
                dict(size_divisor=32, type='ResizeToMultiple'),
                dict(type='RandomFlip'),
                dict(
                    mean=[
                        123.675,
                        116.28,
                        103.53,
                    ],
                    std=[
                        58.395,
                        57.12,
                        57.375,
                    ],
                    to_rgb=True,
                    type='Normalize'),
                dict(keys=[
                    'img',
                ], type='ImageToTensor'),
                dict(keys=[
                    'img',
                ], type='Collect'),
            ],
            type='MultiScaleFlipAug'),
    ]),
    train=dict(pipeline=[
        dict(type='LoadImageFromFile'),
        dict(reduce_zero_label=True, type='LoadAnnotations'),
        dict(img_scale=(
            3584,
            896,
        ), ratio_range=(
            0.5,
            2.0,
        ), type='Resize'),
        dict(cat_max_ratio=0.75, crop_size=(
            896,
            896,
        ), type='RandomCrop'),
        dict(prob=0.5, type='RandomFlip'),
        dict(type='PhotoMetricDistortion'),
        dict(
            mean=[
                123.675,
                116.28,
                103.53,
            ],
            std=[
                58.395,
                57.12,
                57.375,
            ],
            to_rgb=True,
            type='Normalize'),
        dict(pad_val=0, seg_pad_val=255, size=(
            896,
            896,
        ), type='Pad'),
        dict(type='DefaultFormatBundle'),
        dict(keys=[
            'img',
            'gt_semantic_seg',
        ], type='Collect'),
    ]),
    val=dict(pipeline=[
        dict(type='LoadImageFromFile'),
        dict(
            flip=False,
            img_scale=(
                3584,
                896,
            ),
            transforms=[
                dict(keep_ratio=True, type='Resize'),
                dict(size_divisor=32, type='ResizeToMultiple'),
                dict(type='RandomFlip'),
                dict(
                    mean=[
                        123.675,
                        116.28,
                        103.53,
                    ],
                    std=[
                        58.395,
                        57.12,
                        57.375,
                    ],
                    to_rgb=True,
                    type='Normalize'),
                dict(keys=[
                    'img',
                ], type='ImageToTensor'),
                dict(keys=[
                    'img',
                ], type='Collect'),
            ],
            type='MultiScaleFlipAug'),
    ]))
data_preprocessor = dict(
    bgr_to_rgb=True,
    corruption=None,
    enable_normalization=False,
    mean=[
        123.675,
        116.28,
        103.53,
    ],
    pad_val=0,
    seg_pad_val=255,
    std=[
        58.395,
        57.12,
        57.375,
    ],
    type='SegDataPreProcessor')
data_root = 'data/ade/ADEChallengeData2016'
dataset_type = 'ADE20KDataset'
default_hooks = dict(
    checkpoint=dict(by_epoch=False, interval=16000, type='CheckpointHook'),
    logger=dict(interval=50, log_metric_by_epoch=False, type='LoggerHook'),
    param_scheduler=dict(type='ParamSchedulerHook'),
    sampler_seed=dict(type='DistSamplerSeedHook'),
    timer=dict(type='IterTimerHook'),
    visualization=dict(draw=True, type='SegVisualizationHook'))
default_scope = 'mmseg'
env_cfg = dict(
    cudnn_benchmark=True,
    dist_cfg=dict(backend='nccl'),
    mp_cfg=dict(mp_start_method='fork', opencv_num_threads=0))
evaluation = dict(interval=16000, metric='mIoU', save_best='mIoU')
img_norm_cfg = dict(
    mean=[
        123.675,
        116.28,
        103.53,
    ],
    std=[
        58.395,
        57.12,
        57.375,
    ],
    to_rgb=True)
img_ratios = [
    0.5,
    0.75,
    1.0,
    1.25,
    1.5,
    1.75,
]
launcher = 'none'
load_from = '../checkpoint_files/upernet/upernet_internimage_h_896_160k_ade20k.pth'
log_level = 'INFO'
log_processor = dict(by_epoch=False)
lr_config = dict(
    _delete_=True,
    by_epoch=False,
    min_lr=0.0,
    policy='poly',
    power=1.0,
    warmup='linear',
    warmup_iters=1500,
    warmup_ratio=1e-06)
model = dict(
    attack_cfg=dict(
        alpha=0.1, epsilon=64, iterations=20, name='segpgd', norm='l2'),
    attack_loss=dict(
        loss_weight=1.0,
        reduction='none',
        type='CrossEntropyLoss',
        use_sigmoid=False),
    auxiliary_head=dict(
        align_corners=False,
        channels=256,
        concat_input=False,
        dropout_ratio=0.1,
        in_channels=1280,
        in_index=2,
        loss_decode=dict(
            loss_weight=0.4, type='CrossEntropyLoss', use_sigmoid=False),
        norm_cfg=dict(requires_grad=True, type='SyncBN'),
        num_classes=150,
        num_convs=1,
        type='FCNHead'),
    backbone=dict(
        center_feature_scale=True,
        channels=320,
        core_op='DCNv3',
        depths=[
            6,
            6,
            32,
            6,
        ],
        drop_path_rate=0.5,
        dw_kernel_size=5,
        groups=[
            10,
            20,
            40,
            80,
        ],
        init_cfg=dict(
            checkpoint=
            'https://huggingface.co/OpenGVLab/InternImage/resolve/main/internimage_h_jointto22k_384.pth',
            type='Pretrained'),
        layer_scale=None,
        level2_post_norm=True,
        level2_post_norm_block_ids=[
            5,
            11,
            17,
            23,
            29,
        ],
        mlp_ratio=4.0,
        norm_layer='LN',
        offset_scale=1.0,
        out_indices=(
            0,
            1,
            2,
            3,
        ),
        post_norm=False,
        res_post_norm=True,
        type='InternImage',
        with_cp=False),
    data_preprocessor=dict(
        bgr_to_rgb=True,
        corruption=None,
        enable_normalization=False,
        mean=[
            123.675,
            116.28,
            103.53,
        ],
        pad_val=0,
        seg_pad_val=255,
        std=[
            58.395,
            57.12,
            57.375,
        ],
        type='SegDataPreProcessor'),
    decode_head=dict(
        align_corners=False,
        channels=512,
        dropout_ratio=0.1,
        in_channels=[
            320,
            640,
            1280,
            2560,
        ],
        in_index=[
            0,
            1,
            2,
            3,
        ],
        loss_decode=dict(
            loss_weight=1.0,
            reduction='none',
            type='CrossEntropyLoss',
            use_sigmoid=False),
        norm_cfg=dict(requires_grad=True, type='SyncBN'),
        num_classes=150,
        pool_scales=(
            1,
            2,
            3,
            6,
        ),
        type='UPerHead'),
    enable_normalization=False,
    normalize_mean_std=dict(
        mean=[
            123.675,
            116.28,
            103.53,
        ], std=[
            58.395,
            57.12,
            57.375,
        ]),
    perform_attack=True,
    pretrained='open-mmlab://resnet50_v1c',
    test_cfg=dict(mode='whole'),
    train_cfg=dict(),
    type='EncoderDecoder')
norm_cfg = dict(requires_grad=True, type='SyncBN')
optim_wrapper = dict(
    clip_grad=None,
    optimizer=dict(lr=0.01, momentum=0.9, type='SGD', weight_decay=0.0005),
    type='OptimWrapper')
optimizer = dict(
    betas=(
        0.9,
        0.999,
    ),
    constructor='CustomLayerDecayOptimizerConstructor',
    lr=2e-05,
    paramwise_cfg=dict(
        depths=[
            6,
            6,
            32,
            6,
        ],
        layer_decay_rate=0.95,
        num_layers=50,
        offset_lr_scale=1.0),
    type='AdamW',
    weight_decay=0.05)
optimizer_config = dict(
    _delete_=True, grad_clip=dict(max_norm=0.1, norm_type=2))
param_scheduler = [
    dict(
        begin=0,
        by_epoch=False,
        end=160000,
        eta_min=0.0001,
        power=0.9,
        type='PolyLR'),
]
pretrained = 'https://huggingface.co/OpenGVLab/InternImage/resolve/main/internimage_h_jointto22k_384.pth'
resume = False
runner = dict(type='IterBasedRunner')
test_cfg = dict(type='TestLoop')
test_dataloader = dict(
    batch_size=1,
    dataset=dict(
        data_prefix=dict(
            img_path='images/validation',
            seg_map_path='annotations/validation'),
        data_root='data/ade/ADEChallengeData2016',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(keep_ratio=True, scale=(
                2048,
                512,
            ), type='Resize'),
            dict(reduce_zero_label=True, type='LoadAnnotations'),
            dict(type='PackSegInputs'),
        ],
        type='ADE20KDataset'),
    num_workers=4,
    persistent_workers=True,
    sampler=dict(shuffle=False, type='DefaultSampler'))
test_evaluator = dict(
    iou_metrics=[
        'mIoU',
    ], type='IoUMetric')
test_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(
        flip=False,
        img_scale=(
            3584,
            896,
        ),
        transforms=[
            dict(keep_ratio=True, type='Resize'),
            dict(size_divisor=32, type='ResizeToMultiple'),
            dict(type='RandomFlip'),
            dict(
                mean=[
                    123.675,
                    116.28,
                    103.53,
                ],
                std=[
                    58.395,
                    57.12,
                    57.375,
                ],
                to_rgb=True,
                type='Normalize'),
            dict(keys=[
                'img',
            ], type='ImageToTensor'),
            dict(keys=[
                'img',
            ], type='Collect'),
        ],
        type='MultiScaleFlipAug'),
]
train_cfg = dict(
    max_iters=160000, type='IterBasedTrainLoop', val_interval=16000)
train_dataloader = dict(
    batch_size=4,
    dataset=dict(
        data_prefix=dict(
            img_path='images/training', seg_map_path='annotations/training'),
        data_root='data/ade/ADEChallengeData2016',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(reduce_zero_label=True, type='LoadAnnotations'),
            dict(
                keep_ratio=True,
                ratio_range=(
                    0.5,
                    2.0,
                ),
                scale=(
                    2048,
                    512,
                ),
                type='RandomResize'),
            dict(
                cat_max_ratio=0.75, crop_size=(
                    512,
                    512,
                ), type='RandomCrop'),
            dict(prob=0.5, type='RandomFlip'),
            dict(type='PhotoMetricDistortion'),
            dict(type='PackSegInputs'),
        ],
        type='ADE20KDataset'),
    num_workers=4,
    persistent_workers=True,
    sampler=dict(shuffle=True, type='InfiniteSampler'))
train_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(reduce_zero_label=True, type='LoadAnnotations'),
    dict(img_scale=(
        3584,
        896,
    ), ratio_range=(
        0.5,
        2.0,
    ), type='Resize'),
    dict(cat_max_ratio=0.75, crop_size=(
        896,
        896,
    ), type='RandomCrop'),
    dict(prob=0.5, type='RandomFlip'),
    dict(type='PhotoMetricDistortion'),
    dict(
        mean=[
            123.675,
            116.28,
            103.53,
        ],
        std=[
            58.395,
            57.12,
            57.375,
        ],
        to_rgb=True,
        type='Normalize'),
    dict(pad_val=0, seg_pad_val=255, size=(
        896,
        896,
    ), type='Pad'),
    dict(type='DefaultFormatBundle'),
    dict(keys=[
        'img',
        'gt_semantic_seg',
    ], type='Collect'),
]
tta_model = dict(type='SegTTAModel')
tta_pipeline = [
    dict(backend_args=None, type='LoadImageFromFile'),
    dict(
        transforms=[
            [
                dict(keep_ratio=True, scale_factor=0.5, type='Resize'),
                dict(keep_ratio=True, scale_factor=0.75, type='Resize'),
                dict(keep_ratio=True, scale_factor=1.0, type='Resize'),
                dict(keep_ratio=True, scale_factor=1.25, type='Resize'),
                dict(keep_ratio=True, scale_factor=1.5, type='Resize'),
                dict(keep_ratio=True, scale_factor=1.75, type='Resize'),
            ],
            [
                dict(direction='horizontal', prob=0.0, type='RandomFlip'),
                dict(direction='horizontal', prob=1.0, type='RandomFlip'),
            ],
            [
                dict(type='LoadAnnotations'),
            ],
            [
                dict(type='PackSegInputs'),
            ],
        ],
        type='TestTimeAug'),
]
val_cfg = dict(type='ValLoop')
val_dataloader = dict(
    batch_size=1,
    dataset=dict(
        data_prefix=dict(
            img_path='images/validation',
            seg_map_path='annotations/validation'),
        data_root='data/ade/ADEChallengeData2016',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(keep_ratio=True, scale=(
                2048,
                512,
            ), type='Resize'),
            dict(reduce_zero_label=True, type='LoadAnnotations'),
            dict(type='PackSegInputs'),
        ],
        type='ADE20KDataset'),
    num_workers=4,
    persistent_workers=True,
    sampler=dict(shuffle=False, type='DefaultSampler'))
val_evaluator = dict(
    iou_metrics=[
        'mIoU',
    ], type='IoUMetric')
vis_backends = [
    dict(type='LocalVisBackend'),
]
visualizer = dict(
    name='visualizer',
    save_dir=
    '../aa_workdir/ade/upernet/upernet_internimage_h_896_160k_ade20k/attack_segpgd/norm_l2/iterations_20/epsilon_64/alpha_0.1/show_dir',
    type='SegLocalVisualizer',
    vis_backends=[
        dict(type='LocalVisBackend'),
    ])
work_dir = '../aa_workdir/ade/upernet/upernet_internimage_h_896_160k_ade20k/attack_segpgd/norm_l2/iterations_20/epsilon_64/alpha_0.1'

/pfs/work7/workspace/scratch/ma_dschader-team_project_fss2024/benchmarking_robustness/semantic_segmentation/mmsegmentation/ops_dcnv3/modules/dcnv3.py:20: UserWarning: Now, we support DCNv4 in InternImage.
  warnings.warn('Now, we support DCNv4 in InternImage.')
2024-11-07 08:33:04,009 - mmseg - INFO - using core type: DCNv3
2024-11-07 08:33:04,009 - mmseg - INFO - using activation layer: GELU
2024-11-07 08:33:04,010 - mmseg - INFO - using main norm layer: LN
2024-11-07 08:33:04,010 - mmseg - INFO - using dpr: linear, 0.5
2024-11-07 08:33:04,010 - mmseg - INFO - level2_post_norm: True
2024-11-07 08:33:04,010 - mmseg - INFO - level2_post_norm_block_ids: [5, 11, 17, 23, 29]
2024-11-07 08:33:04,010 - mmseg - INFO - res_post_norm: True
2024-11-07 08:33:04,010 - mmseg - INFO - use_dcn_v4_op: False
Number of parameters:  1120338396
11/07 08:50:47 - mmengine - INFO - Distributed training is not used, all SyncBatchNorm (SyncBN) layers in the model will be automatically reverted to BatchNormXd layers if they are used.
11/07 08:50:47 - mmengine - INFO - Hooks will be executed in the following order:
before_run:
(VERY_HIGH   ) RuntimeInfoHook                    
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
before_train:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_train_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(NORMAL      ) DistSamplerSeedHook                
 -------------------- 
before_train_iter:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_train_iter:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(NORMAL      ) SegVisualizationHook               
(BELOW_NORMAL) LoggerHook                         
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
after_train_epoch:
(NORMAL      ) IterTimerHook                      
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_val:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
before_val_epoch:
(NORMAL      ) IterTimerHook                      
 -------------------- 
before_val_iter:
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_val_iter:
(NORMAL      ) IterTimerHook                      
(NORMAL      ) SegVisualizationHook               
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_val_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
after_val:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
after_train:
(VERY_HIGH   ) RuntimeInfoHook                    
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_test:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
before_test_epoch:
(NORMAL      ) IterTimerHook                      
 -------------------- 
before_test_iter:
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_test_iter:
(NORMAL      ) IterTimerHook                      
(NORMAL      ) SegVisualizationHook               
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_test_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_test:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
after_run:
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
11/07 08:50:50 - mmengine - WARNING - The prefix is not set in metric class IoUMetric.
Loads checkpoint by local backend from path: ../checkpoint_files/upernet/upernet_internimage_h_896_160k_ade20k.pth
11/07 08:50:59 - mmengine - INFO - Load checkpoint from ../checkpoint_files/upernet/upernet_internimage_h_896_160k_ade20k.pth
11/07 09:28:53 - mmengine - INFO - Iter(test) [  50/2000]    eta: 1 day, 0:33:57  time: 25.4321  data_time: 0.0028  memory: 62847  
11/07 09:48:42 - mmengine - INFO - Iter(test) [ 100/2000]    eta: 18:16:18  time: 24.7966  data_time: 0.0031  memory: 62171  
11/07 10:08:11 - mmengine - INFO - Iter(test) [ 150/2000]    eta: 15:51:50  time: 23.9371  data_time: 0.0019  memory: 54826  
11/07 10:28:13 - mmengine - INFO - Iter(test) [ 200/2000]    eta: 14:35:08  time: 23.5073  data_time: 0.0019  memory: 70130  
11/07 10:47:44 - mmengine - INFO - Iter(test) [ 250/2000]    eta: 13:36:51  time: 22.7787  data_time: 0.0019  memory: 75896  
11/07 11:06:38 - mmengine - INFO - Iter(test) [ 300/2000]    eta: 12:48:35  time: 23.4884  data_time: 0.0020  memory: 59264  
11/07 11:25:58 - mmengine - INFO - Iter(test) [ 350/2000]    eta: 12:10:33  time: 21.9260  data_time: 0.0019  memory: 61425  
11/07 11:45:11 - mmengine - INFO - Iter(test) [ 400/2000]    eta: 11:36:39  time: 23.4203  data_time: 0.0018  memory: 59982  
11/07 12:02:34 - mmengine - INFO - Iter(test) [ 450/2000]    eta: 10:59:50  time: 21.2275  data_time: 0.0017  memory: 50539  
11/07 12:21:25 - mmengine - INFO - Iter(test) [ 500/2000]    eta: 10:31:11  time: 22.0594  data_time: 0.0017  memory: 51035  
11/07 12:41:30 - mmengine - INFO - Iter(test) [ 550/2000]    eta: 10:07:38  time: 24.0362  data_time: 0.0018  memory: 57631  
11/07 13:00:25 - mmengine - INFO - Iter(test) [ 600/2000]    eta: 9:41:54  time: 23.7191  data_time: 0.0132  memory: 57706  
11/07 13:19:19 - mmengine - INFO - Iter(test) [ 650/2000]    eta: 9:17:15  time: 23.1831  data_time: 0.0038  memory: 63304  
11/07 13:39:28 - mmengine - INFO - Iter(test) [ 700/2000]    eta: 8:55:39  time: 23.6619  data_time: 0.0018  memory: 60865  
11/07 13:59:04 - mmengine - INFO - Iter(test) [ 750/2000]    eta: 8:33:23  time: 23.1572  data_time: 0.0016  memory: 64193  
11/07 14:17:02 - mmengine - INFO - Iter(test) [ 800/2000]    eta: 8:08:59  time: 22.9369  data_time: 0.0138  memory: 51615  
11/07 14:36:13 - mmengine - INFO - Iter(test) [ 850/2000]    eta: 7:46:58  time: 23.1252  data_time: 0.0017  memory: 50108  
11/07 14:53:54 - mmengine - INFO - Iter(test) [ 900/2000]    eta: 7:23:31  time: 20.5212  data_time: 0.0036  memory: 53678  
11/07 15:13:23 - mmengine - INFO - Iter(test) [ 950/2000]    eta: 7:02:35  time: 22.6140  data_time: 0.0160  memory: 56829  
11/07 15:31:39 - mmengine - INFO - Iter(test) [1000/2000]    eta: 6:40:35  time: 21.7945  data_time: 0.0016  memory: 56985  
11/07 15:51:16 - mmengine - INFO - Iter(test) [1050/2000]    eta: 6:20:12  time: 24.1993  data_time: 0.0150  memory: 64391  
11/07 16:10:45 - mmengine - INFO - Iter(test) [1100/2000]    eta: 5:59:42  time: 22.3436  data_time: 0.0017  memory: 55464  
11/07 16:29:28 - mmengine - INFO - Iter(test) [1150/2000]    eta: 5:38:49  time: 22.9926  data_time: 0.0015  memory: 54164  
11/07 16:48:42 - mmengine - INFO - Iter(test) [1200/2000]    eta: 5:18:25  time: 22.1932  data_time: 0.0015  memory: 57535  
11/07 17:07:01 - mmengine - INFO - Iter(test) [1250/2000]    eta: 4:57:35  time: 22.2934  data_time: 0.0015  memory: 58449  
11/07 17:24:58 - mmengine - INFO - Iter(test) [1300/2000]    eta: 4:36:42  time: 22.8845  data_time: 0.0015  memory: 50716  
11/07 17:43:40 - mmengine - INFO - Iter(test) [1350/2000]    eta: 4:16:26  time: 21.1068  data_time: 0.0015  memory: 50676  
11/07 18:02:38 - mmengine - INFO - Iter(test) [1400/2000]    eta: 3:56:23  time: 24.0622  data_time: 0.0029  memory: 58209  
11/07 18:20:54 - mmengine - INFO - Iter(test) [1450/2000]    eta: 3:36:08  time: 23.8226  data_time: 0.0015  memory: 56832  
11/07 18:39:23 - mmengine - INFO - Iter(test) [1500/2000]    eta: 3:16:06  time: 21.1634  data_time: 0.0015  memory: 50120  
11/07 18:59:10 - mmengine - INFO - Iter(test) [1550/2000]    eta: 2:56:32  time: 23.2794  data_time: 0.0015  memory: 55931  
11/07 19:17:35 - mmengine - INFO - Iter(test) [1600/2000]    eta: 2:36:37  time: 22.4334  data_time: 0.0016  memory: 49781  
11/07 19:36:18 - mmengine - INFO - Iter(test) [1650/2000]    eta: 2:16:51  time: 21.0083  data_time: 0.0014  memory: 70308  
11/07 19:55:38 - mmengine - INFO - Iter(test) [1700/2000]    eta: 1:57:16  time: 22.8597  data_time: 0.0016  memory: 55843  
slurmstepd: error: *** JOB 24617298 ON uc2n915 CANCELLED AT 2024-11-07T19:58:40 DUE TO TIME LIMIT ***

============================= JOB FEEDBACK =============================

NodeName=uc2n915
Job ID: 24617298
Array Job ID: 24617298_2
Cluster: uc2
User/Group: ma_dschader/ma_ma
State: TIMEOUT (exit code 0)
Nodes: 1
Cores per node: 8
CPU Utilized: 13:02:42
CPU Efficiency: 6.52% of 8-08:00:00 core-walltime
Job Wall-clock time: 1-01:00:00
Memory Utilized: 9.01 GB
Memory Efficiency: 45.06% of 20.00 GB
