Started at Sat Oct 26 01:45:59 CEST 2024
10/26 01:47:54 - mmengine - INFO - 
------------------------------------------------------------
System environment:
    sys.platform: linux
    Python: 3.10.13 | packaged by conda-forge | (main, Dec 23 2023, 15:36:39) [GCC 12.3.0]
    CUDA available: True
    MUSA available: False
    numpy_random_seed: 611579730
    GPU 0: Tesla V100-SXM2-32GB
    CUDA_HOME: None
    GCC: gcc (GCC) 8.5.0 20210514 (Red Hat 8.5.0-18)
    PyTorch: 1.13.1
    PyTorch compiling details: PyTorch built with:
  - GCC 9.3
  - C++ Version: 201402
  - Intel(R) oneAPI Math Kernel Library Version 2023.1-Product Build 20230303 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v2.6.0 (Git Hash 52b5f107dd9cf10910aaa19cb47f3abf9b349815)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - LAPACK is enabled (usually provided by MKL)
  - NNPACK is enabled
  - CPU capability usage: AVX2
  - CUDA Runtime 11.7
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_61,code=sm_61;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86;-gencode;arch=compute_37,code=compute_37
  - CuDNN 8.5
  - Magma 2.6.1
  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.7, CUDNN_VERSION=8.5.0, CXX_COMPILER=/opt/rh/devtoolset-9/root/usr/bin/c++, CXX_FLAGS= -fabi-version=11 -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -DEDGE_PROFILER_USE_KINETO -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Werror=non-virtual-dtor -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wunused-local-typedefs -Wno-unused-parameter -Wno-unused-function -Wno-unused-result -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Werror=cast-function-type -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.13.1, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, USE_ROCM=OFF, 

    TorchVision: 0.14.1
    OpenCV: 3.4.18
    MMEngine: 0.10.4

Runtime environment:
    cudnn_benchmark: True
    mp_cfg: {'mp_start_method': 'fork', 'opencv_num_threads': 0}
    dist_cfg: {'backend': 'nccl'}
    seed: 611579730
    Distributed launcher: none
    Distributed training: False
    GPU number: 1
------------------------------------------------------------

10/26 01:47:55 - mmengine - INFO - Config:
checkpoint_config = dict(by_epoch=False, interval=1000, max_keep_ckpts=1)
crop_size = (
    512,
    512,
)
data = dict(
    samples_per_gpu=2,
    test=dict(pipeline=[
        dict(type='LoadImageFromFile'),
        dict(
            flip=False,
            img_scale=(
                2048,
                512,
            ),
            transforms=[
                dict(keep_ratio=True, type='Resize'),
                dict(size_divisor=32, type='ResizeToMultiple'),
                dict(type='RandomFlip'),
                dict(
                    mean=[
                        123.675,
                        116.28,
                        103.53,
                    ],
                    std=[
                        58.395,
                        57.12,
                        57.375,
                    ],
                    to_rgb=True,
                    type='Normalize'),
                dict(keys=[
                    'img',
                ], type='ImageToTensor'),
                dict(keys=[
                    'img',
                ], type='Collect'),
            ],
            type='MultiScaleFlipAug'),
    ]),
    val=dict(pipeline=[
        dict(type='LoadImageFromFile'),
        dict(
            flip=False,
            img_scale=(
                2048,
                512,
            ),
            transforms=[
                dict(keep_ratio=True, type='Resize'),
                dict(size_divisor=32, type='ResizeToMultiple'),
                dict(type='RandomFlip'),
                dict(
                    mean=[
                        123.675,
                        116.28,
                        103.53,
                    ],
                    std=[
                        58.395,
                        57.12,
                        57.375,
                    ],
                    to_rgb=True,
                    type='Normalize'),
                dict(keys=[
                    'img',
                ], type='ImageToTensor'),
                dict(keys=[
                    'img',
                ], type='Collect'),
            ],
            type='MultiScaleFlipAug'),
    ]))
data_preprocessor = dict(
    bgr_to_rgb=True,
    corruption=None,
    enable_normalization=False,
    mean=[
        123.675,
        116.28,
        103.53,
    ],
    pad_val=0,
    seg_pad_val=255,
    std=[
        58.395,
        57.12,
        57.375,
    ],
    type='SegDataPreProcessor')
data_root = 'data/ade/ADEChallengeData2016'
dataset_type = 'ADE20KDataset'
default_hooks = dict(
    checkpoint=dict(by_epoch=False, interval=16000, type='CheckpointHook'),
    logger=dict(interval=50, log_metric_by_epoch=False, type='LoggerHook'),
    param_scheduler=dict(type='ParamSchedulerHook'),
    sampler_seed=dict(type='DistSamplerSeedHook'),
    timer=dict(type='IterTimerHook'),
    visualization=dict(draw=True, type='SegVisualizationHook'))
default_scope = 'mmseg'
env_cfg = dict(
    cudnn_benchmark=True,
    dist_cfg=dict(backend='nccl'),
    mp_cfg=dict(mp_start_method='fork', opencv_num_threads=0))
evaluation = dict(interval=16000, metric='mIoU', save_best='mIoU')
img_norm_cfg = dict(
    mean=[
        123.675,
        116.28,
        103.53,
    ],
    std=[
        58.395,
        57.12,
        57.375,
    ],
    to_rgb=True)
img_ratios = [
    0.5,
    0.75,
    1.0,
    1.25,
    1.5,
    1.75,
]
launcher = 'none'
load_from = '../checkpoint_files/upernet/upernet_internimage_t_512_160k_ade20k.pth'
log_level = 'INFO'
log_processor = dict(by_epoch=False)
lr_config = dict(
    _delete_=True,
    by_epoch=False,
    min_lr=0.0,
    policy='poly',
    power=1.0,
    warmup='linear',
    warmup_iters=1500,
    warmup_ratio=1e-06)
model = dict(
    attack_cfg=dict(
        alpha=0.1, epsilon=64, iterations=20, name='segpgd', norm='l2'),
    attack_loss=dict(
        loss_weight=1.0,
        reduction='none',
        type='CrossEntropyLoss',
        use_sigmoid=False),
    auxiliary_head=dict(
        align_corners=False,
        channels=256,
        concat_input=False,
        dropout_ratio=0.1,
        in_channels=256,
        in_index=2,
        loss_decode=dict(
            loss_weight=0.4, type='CrossEntropyLoss', use_sigmoid=False),
        norm_cfg=dict(requires_grad=True, type='SyncBN'),
        num_classes=150,
        num_convs=1,
        type='FCNHead'),
    backbone=dict(
        channels=64,
        core_op='DCNv3',
        depths=[
            4,
            4,
            18,
            4,
        ],
        drop_path_rate=0.2,
        groups=[
            4,
            8,
            16,
            32,
        ],
        init_cfg=dict(
            checkpoint=
            'https://huggingface.co/OpenGVLab/InternImage/resolve/main/internimage_t_1k_224.pth',
            type='Pretrained'),
        layer_scale=1.0,
        mlp_ratio=4.0,
        norm_layer='LN',
        offset_scale=1.0,
        out_indices=(
            0,
            1,
            2,
            3,
        ),
        post_norm=False,
        type='InternImage',
        with_cp=False),
    data_preprocessor=dict(
        bgr_to_rgb=True,
        corruption=None,
        enable_normalization=False,
        mean=[
            123.675,
            116.28,
            103.53,
        ],
        pad_val=0,
        seg_pad_val=255,
        std=[
            58.395,
            57.12,
            57.375,
        ],
        type='SegDataPreProcessor'),
    decode_head=dict(
        align_corners=False,
        channels=512,
        dropout_ratio=0.1,
        in_channels=[
            64,
            128,
            256,
            512,
        ],
        in_index=[
            0,
            1,
            2,
            3,
        ],
        loss_decode=dict(
            loss_weight=1.0,
            reduction='none',
            type='CrossEntropyLoss',
            use_sigmoid=False),
        norm_cfg=dict(requires_grad=True, type='SyncBN'),
        num_classes=150,
        pool_scales=(
            1,
            2,
            3,
            6,
        ),
        type='UPerHead'),
    enable_normalization=False,
    normalize_mean_std=dict(
        mean=[
            123.675,
            116.28,
            103.53,
        ], std=[
            58.395,
            57.12,
            57.375,
        ]),
    perform_attack=True,
    pretrained='open-mmlab://resnet50_v1c',
    test_cfg=dict(mode='whole'),
    train_cfg=dict(),
    type='EncoderDecoder')
norm_cfg = dict(requires_grad=True, type='SyncBN')
optim_wrapper = dict(
    clip_grad=None,
    optimizer=dict(lr=0.01, momentum=0.9, type='SGD', weight_decay=0.0005),
    type='OptimWrapper')
optimizer = dict(
    betas=(
        0.9,
        0.999,
    ),
    constructor='CustomLayerDecayOptimizerConstructor',
    lr=6e-05,
    paramwise_cfg=dict(
        depths=[
            4,
            4,
            18,
            4,
        ], layer_decay_rate=1.0, num_layers=30),
    type='AdamW',
    weight_decay=0.05)
param_scheduler = [
    dict(
        begin=0,
        by_epoch=False,
        end=160000,
        eta_min=0.0001,
        power=0.9,
        type='PolyLR'),
]
pretrained = 'https://huggingface.co/OpenGVLab/InternImage/resolve/main/internimage_t_1k_224.pth'
resume = False
runner = dict(type='IterBasedRunner')
test_cfg = dict(type='TestLoop')
test_dataloader = dict(
    batch_size=1,
    dataset=dict(
        data_prefix=dict(
            img_path='images/validation',
            seg_map_path='annotations/validation'),
        data_root='data/ade/ADEChallengeData2016',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(keep_ratio=True, scale=(
                2048,
                512,
            ), type='Resize'),
            dict(reduce_zero_label=True, type='LoadAnnotations'),
            dict(type='PackSegInputs'),
        ],
        type='ADE20KDataset'),
    num_workers=4,
    persistent_workers=True,
    sampler=dict(shuffle=False, type='DefaultSampler'))
test_evaluator = dict(
    iou_metrics=[
        'mIoU',
    ], type='IoUMetric')
test_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(
        flip=False,
        img_scale=(
            2048,
            512,
        ),
        transforms=[
            dict(keep_ratio=True, type='Resize'),
            dict(size_divisor=32, type='ResizeToMultiple'),
            dict(type='RandomFlip'),
            dict(
                mean=[
                    123.675,
                    116.28,
                    103.53,
                ],
                std=[
                    58.395,
                    57.12,
                    57.375,
                ],
                to_rgb=True,
                type='Normalize'),
            dict(keys=[
                'img',
            ], type='ImageToTensor'),
            dict(keys=[
                'img',
            ], type='Collect'),
        ],
        type='MultiScaleFlipAug'),
]
train_cfg = dict(
    max_iters=160000, type='IterBasedTrainLoop', val_interval=16000)
train_dataloader = dict(
    batch_size=4,
    dataset=dict(
        data_prefix=dict(
            img_path='images/training', seg_map_path='annotations/training'),
        data_root='data/ade/ADEChallengeData2016',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(reduce_zero_label=True, type='LoadAnnotations'),
            dict(
                keep_ratio=True,
                ratio_range=(
                    0.5,
                    2.0,
                ),
                scale=(
                    2048,
                    512,
                ),
                type='RandomResize'),
            dict(
                cat_max_ratio=0.75, crop_size=(
                    512,
                    512,
                ), type='RandomCrop'),
            dict(prob=0.5, type='RandomFlip'),
            dict(type='PhotoMetricDistortion'),
            dict(type='PackSegInputs'),
        ],
        type='ADE20KDataset'),
    num_workers=4,
    persistent_workers=True,
    sampler=dict(shuffle=True, type='InfiniteSampler'))
train_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(reduce_zero_label=True, type='LoadAnnotations'),
    dict(
        keep_ratio=True,
        ratio_range=(
            0.5,
            2.0,
        ),
        scale=(
            2048,
            512,
        ),
        type='RandomResize'),
    dict(cat_max_ratio=0.75, crop_size=(
        512,
        512,
    ), type='RandomCrop'),
    dict(prob=0.5, type='RandomFlip'),
    dict(type='PhotoMetricDistortion'),
    dict(type='PackSegInputs'),
]
tta_model = dict(type='SegTTAModel')
tta_pipeline = [
    dict(backend_args=None, type='LoadImageFromFile'),
    dict(
        transforms=[
            [
                dict(keep_ratio=True, scale_factor=0.5, type='Resize'),
                dict(keep_ratio=True, scale_factor=0.75, type='Resize'),
                dict(keep_ratio=True, scale_factor=1.0, type='Resize'),
                dict(keep_ratio=True, scale_factor=1.25, type='Resize'),
                dict(keep_ratio=True, scale_factor=1.5, type='Resize'),
                dict(keep_ratio=True, scale_factor=1.75, type='Resize'),
            ],
            [
                dict(direction='horizontal', prob=0.0, type='RandomFlip'),
                dict(direction='horizontal', prob=1.0, type='RandomFlip'),
            ],
            [
                dict(type='LoadAnnotations'),
            ],
            [
                dict(type='PackSegInputs'),
            ],
        ],
        type='TestTimeAug'),
]
val_cfg = dict(type='ValLoop')
val_dataloader = dict(
    batch_size=1,
    dataset=dict(
        data_prefix=dict(
            img_path='images/validation',
            seg_map_path='annotations/validation'),
        data_root='data/ade/ADEChallengeData2016',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(keep_ratio=True, scale=(
                2048,
                512,
            ), type='Resize'),
            dict(reduce_zero_label=True, type='LoadAnnotations'),
            dict(type='PackSegInputs'),
        ],
        type='ADE20KDataset'),
    num_workers=4,
    persistent_workers=True,
    sampler=dict(shuffle=False, type='DefaultSampler'))
val_evaluator = dict(
    iou_metrics=[
        'mIoU',
    ], type='IoUMetric')
vis_backends = [
    dict(type='LocalVisBackend'),
]
visualizer = dict(
    name='visualizer',
    save_dir=
    '../aa_workdir/ade/upernet/upernet_internimage_t_512_160k_ade20k/attack_segpgd/norm_l2/iterations_20/epsilon_64/alpha_0.1/show_dir',
    type='SegLocalVisualizer',
    vis_backends=[
        dict(type='LocalVisBackend'),
    ])
work_dir = '../aa_workdir/ade/upernet/upernet_internimage_t_512_160k_ade20k/attack_segpgd/norm_l2/iterations_20/epsilon_64/alpha_0.1'

/pfs/work7/workspace/scratch/ma_dschader-team_project_fss2024/benchmarking_robustness/semantic_segmentation/mmsegmentation/ops_dcnv3/modules/dcnv3.py:20: UserWarning: Now, we support DCNv4 in InternImage.
  warnings.warn('Now, we support DCNv4 in InternImage.')
2024-10-26 01:49:04,671 - mmseg - INFO - using core type: DCNv3
2024-10-26 01:49:04,671 - mmseg - INFO - using activation layer: GELU
2024-10-26 01:49:04,671 - mmseg - INFO - using main norm layer: LN
2024-10-26 01:49:04,671 - mmseg - INFO - using dpr: linear, 0.2
2024-10-26 01:49:04,671 - mmseg - INFO - level2_post_norm: False
2024-10-26 01:49:04,671 - mmseg - INFO - level2_post_norm_block_ids: None
2024-10-26 01:49:04,671 - mmseg - INFO - res_post_norm: False
2024-10-26 01:49:04,671 - mmseg - INFO - use_dcn_v4_op: False
10/26 01:49:14 - mmengine - INFO - Distributed training is not used, all SyncBatchNorm (SyncBN) layers in the model will be automatically reverted to BatchNormXd layers if they are used.
10/26 01:49:15 - mmengine - INFO - Hooks will be executed in the following order:
before_run:
(VERY_HIGH   ) RuntimeInfoHook                    
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
before_train:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_train_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(NORMAL      ) DistSamplerSeedHook                
 -------------------- 
before_train_iter:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_train_iter:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(NORMAL      ) SegVisualizationHook               
(BELOW_NORMAL) LoggerHook                         
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
after_train_epoch:
(NORMAL      ) IterTimerHook                      
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_val:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
before_val_epoch:
(NORMAL      ) IterTimerHook                      
 -------------------- 
before_val_iter:
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_val_iter:
(NORMAL      ) IterTimerHook                      
(NORMAL      ) SegVisualizationHook               
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_val_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
after_val:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
after_train:
(VERY_HIGH   ) RuntimeInfoHook                    
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_test:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
before_test_epoch:
(NORMAL      ) IterTimerHook                      
 -------------------- 
before_test_iter:
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_test_iter:
(NORMAL      ) IterTimerHook                      
(NORMAL      ) SegVisualizationHook               
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_test_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_test:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
after_run:
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
10/26 01:49:17 - mmengine - WARNING - The prefix is not set in metric class IoUMetric.
Loads checkpoint by local backend from path: ../checkpoint_files/upernet/upernet_internimage_t_512_160k_ade20k.pth
10/26 01:49:19 - mmengine - INFO - Load checkpoint from ../checkpoint_files/upernet/upernet_internimage_t_512_160k_ade20k.pth
10/26 01:55:23 - mmengine - INFO - Iter(test) [  50/2000]    eta: 3:55:49  time: 5.4452  data_time: 0.0025  memory: 18142  
10/26 01:59:51 - mmengine - INFO - Iter(test) [ 100/2000]    eta: 3:19:43  time: 5.7575  data_time: 0.0027  memory: 15616  
10/26 02:03:58 - mmengine - INFO - Iter(test) [ 150/2000]    eta: 3:00:24  time: 4.9812  data_time: 0.0021  memory: 14481  
10/26 02:08:21 - mmengine - INFO - Iter(test) [ 200/2000]    eta: 2:51:12  time: 5.0189  data_time: 0.0020  memory: 15789  
10/26 02:12:31 - mmengine - INFO - Iter(test) [ 250/2000]    eta: 2:42:18  time: 4.6227  data_time: 0.0020  memory: 16277  
10/26 02:16:37 - mmengine - INFO - Iter(test) [ 300/2000]    eta: 2:34:33  time: 4.5686  data_time: 0.0021  memory: 15951  
10/26 02:20:47 - mmengine - INFO - Iter(test) [ 350/2000]    eta: 2:28:19  time: 4.5230  data_time: 0.0019  memory: 16252  
10/26 02:24:47 - mmengine - INFO - Iter(test) [ 400/2000]    eta: 2:21:49  time: 4.7079  data_time: 0.0019  memory: 15645  
10/26 02:28:18 - mmengine - INFO - Iter(test) [ 450/2000]    eta: 2:14:13  time: 4.2855  data_time: 0.0018  memory: 14166  
10/26 02:32:02 - mmengine - INFO - Iter(test) [ 500/2000]    eta: 2:08:04  time: 4.2392  data_time: 0.0021  memory: 12301  
10/26 02:36:01 - mmengine - INFO - Iter(test) [ 550/2000]    eta: 2:03:03  time: 4.9413  data_time: 0.0020  memory: 14664  
10/26 02:39:46 - mmengine - INFO - Iter(test) [ 600/2000]    eta: 1:57:39  time: 4.8800  data_time: 0.0020  memory: 14333  
10/26 02:43:34 - mmengine - INFO - Iter(test) [ 650/2000]    eta: 1:52:37  time: 4.6954  data_time: 0.0018  memory: 14503  
10/26 02:47:40 - mmengine - INFO - Iter(test) [ 700/2000]    eta: 1:48:18  time: 4.5256  data_time: 0.0020  memory: 16163  
10/26 02:51:40 - mmengine - INFO - Iter(test) [ 750/2000]    eta: 1:43:53  time: 5.4249  data_time: 0.0020  memory: 14711  
10/26 02:55:13 - mmengine - INFO - Iter(test) [ 800/2000]    eta: 1:38:47  time: 4.4661  data_time: 0.0021  memory: 14495  
10/26 02:58:58 - mmengine - INFO - Iter(test) [ 850/2000]    eta: 1:34:11  time: 4.5222  data_time: 0.0021  memory: 8074  
10/26 03:02:28 - mmengine - INFO - Iter(test) [ 900/2000]    eta: 1:29:22  time: 4.1172  data_time: 0.0015  memory: 13303  
10/26 03:06:28 - mmengine - INFO - Iter(test) [ 950/2000]    eta: 1:25:14  time: 4.8690  data_time: 0.0016  memory: 16168  
10/26 03:10:06 - mmengine - INFO - Iter(test) [1000/2000]    eta: 1:20:45  time: 4.1602  data_time: 0.0015  memory: 16191  
10/26 03:14:02 - mmengine - INFO - Iter(test) [1050/2000]    eta: 1:16:37  time: 5.1727  data_time: 0.0015  memory: 15675  
10/26 03:17:51 - mmengine - INFO - Iter(test) [1100/2000]    eta: 1:12:24  time: 4.2754  data_time: 0.0016  memory: 14629  
10/26 03:21:30 - mmengine - INFO - Iter(test) [1150/2000]    eta: 1:08:06  time: 4.5693  data_time: 0.0015  memory: 12580  
10/26 03:25:15 - mmengine - INFO - Iter(test) [1200/2000]    eta: 1:03:55  time: 4.2233  data_time: 0.0014  memory: 10963  
10/26 03:28:50 - mmengine - INFO - Iter(test) [1250/2000]    eta: 0:59:41  time: 4.5038  data_time: 0.0015  memory: 15712  
10/26 03:32:15 - mmengine - INFO - Iter(test) [1300/2000]    eta: 0:55:24  time: 4.3229  data_time: 0.0015  memory: 8147  
10/26 03:35:51 - mmengine - INFO - Iter(test) [1350/2000]    eta: 0:51:17  time: 4.0504  data_time: 0.0015  memory: 11894  
10/26 03:39:39 - mmengine - INFO - Iter(test) [1400/2000]    eta: 0:47:16  time: 4.7841  data_time: 0.0015  memory: 15516  
10/26 03:43:10 - mmengine - INFO - Iter(test) [1450/2000]    eta: 0:43:10  time: 4.7026  data_time: 0.0015  memory: 13333  
10/26 03:46:40 - mmengine - INFO - Iter(test) [1500/2000]    eta: 0:39:06  time: 3.9903  data_time: 0.0014  memory: 8074  
10/26 03:50:28 - mmengine - INFO - Iter(test) [1550/2000]    eta: 0:35:09  time: 4.3838  data_time: 0.0031  memory: 15877  
10/26 03:54:02 - mmengine - INFO - Iter(test) [1600/2000]    eta: 0:31:10  time: 4.3499  data_time: 0.0016  memory: 7982  
10/26 03:57:42 - mmengine - INFO - Iter(test) [1650/2000]    eta: 0:27:13  time: 3.9471  data_time: 0.0016  memory: 16267  
10/26 04:01:27 - mmengine - INFO - Iter(test) [1700/2000]    eta: 0:23:18  time: 4.3991  data_time: 0.0017  memory: 13684  
10/26 04:05:13 - mmengine - INFO - Iter(test) [1750/2000]    eta: 0:19:24  time: 4.2035  data_time: 0.0014  memory: 15358  
10/26 04:08:44 - mmengine - INFO - Iter(test) [1800/2000]    eta: 0:15:29  time: 4.4751  data_time: 0.0017  memory: 12036  
10/26 04:12:27 - mmengine - INFO - Iter(test) [1850/2000]    eta: 0:11:36  time: 4.4276  data_time: 0.0016  memory: 7260  
10/26 04:15:53 - mmengine - INFO - Iter(test) [1900/2000]    eta: 0:07:42  time: 4.0982  data_time: 0.0015  memory: 13980  
10/26 04:19:37 - mmengine - INFO - Iter(test) [1950/2000]    eta: 0:03:51  time: 4.1778  data_time: 0.0016  memory: 15891  
10/26 04:23:14 - mmengine - INFO - Iter(test) [2000/2000]    eta: 0:00:00  time: 3.9308  data_time: 0.0013  memory: 12728  
10/26 04:23:14 - mmengine - INFO - per class results:
10/26 04:23:14 - mmengine - INFO - 
+---------------------+-------+-------+
|        Class        |  IoU  |  Acc  |
+---------------------+-------+-------+
|         wall        | 63.84 | 79.33 |
|       building      | 70.69 | 84.86 |
|         sky         | 89.67 | 93.37 |
|        floor        | 70.54 |  83.8 |
|         tree        | 67.51 | 83.78 |
|       ceiling       | 68.45 | 80.29 |
|         road        | 66.15 | 78.13 |
|         bed         | 78.83 | 87.51 |
|      windowpane     |  48.9 | 67.59 |
|        grass        | 58.12 |  74.6 |
|       cabinet       |  42.2 |  58.8 |
|       sidewalk      | 40.11 | 59.71 |
|        person       | 74.92 | 89.45 |
|        earth        | 18.05 | 27.78 |
|         door        | 19.33 | 33.27 |
|        table        | 48.13 |  67.1 |
|       mountain      | 40.79 | 60.37 |
|        plant        | 42.29 |  54.2 |
|       curtain       | 54.01 | 72.53 |
|        chair        | 44.55 | 59.49 |
|         car         | 78.27 | 88.89 |
|        water        | 35.14 | 49.78 |
|       painting      | 59.02 | 80.24 |
|         sofa        | 45.17 | 64.45 |
|        shelf        |  29.0 | 46.53 |
|        house        |  9.12 | 16.98 |
|         sea         | 35.73 | 57.16 |
|        mirror       | 45.39 | 55.94 |
|         rug         | 39.98 | 55.69 |
|        field        | 14.84 | 31.05 |
|       armchair      | 23.83 | 41.79 |
|         seat        | 42.21 | 67.61 |
|        fence        | 33.67 | 49.53 |
|         desk        | 31.41 | 47.95 |
|         rock        | 18.69 | 29.95 |
|       wardrobe      |  23.7 | 40.49 |
|         lamp        | 55.53 | 69.08 |
|       bathtub       | 53.53 | 65.72 |
|       railing       |  22.6 | 32.37 |
|       cushion       | 48.43 | 60.86 |
|         base        |  4.46 |  7.02 |
|         box         | 13.98 | 21.12 |
|        column       | 26.99 | 36.44 |
|      signboard      | 31.73 | 47.41 |
|   chest of drawers  | 17.05 | 29.13 |
|       counter       | 10.09 | 14.66 |
|         sand        | 14.62 | 22.17 |
|         sink        | 59.87 | 74.49 |
|      skyscraper     | 33.78 |  44.7 |
|      fireplace      | 57.69 | 77.14 |
|     refrigerator    | 47.39 | 66.64 |
|      grandstand     | 38.26 | 67.89 |
|         path        |  9.33 | 14.95 |
|        stairs       | 29.76 | 39.49 |
|        runway       | 57.23 | 76.29 |
|         case        | 34.38 | 44.78 |
|      pool table     | 87.22 | 94.54 |
|        pillow       | 44.72 |  60.3 |
|     screen door     | 26.35 | 39.84 |
|       stairway      | 24.39 |  30.4 |
|        river        |  5.96 | 17.24 |
|        bridge       | 19.81 | 36.68 |
|       bookcase      |  27.7 | 42.35 |
|        blind        | 11.53 | 14.72 |
|     coffee table    | 45.34 |  75.2 |
|        toilet       | 76.78 | 83.14 |
|        flower       | 39.52 | 55.53 |
|         book        | 47.25 | 68.68 |
|         hill        |  6.21 | 11.53 |
|        bench        | 32.71 |  45.7 |
|      countertop     | 42.32 |  63.0 |
|        stove        | 60.12 | 73.66 |
|         palm        | 46.42 | 69.33 |
|    kitchen island   |  13.9 | 29.44 |
|       computer      | 52.92 | 61.49 |
|     swivel chair    | 31.25 | 44.92 |
|         boat        | 32.49 | 45.96 |
|         bar         | 13.49 | 18.74 |
|    arcade machine   | 19.62 | 21.67 |
|        hovel        |  0.0  |  0.0  |
|         bus         | 72.47 | 86.46 |
|        towel        | 44.87 | 59.03 |
|        light        | 50.59 | 57.22 |
|        truck        | 24.82 | 39.68 |
|        tower        |  6.73 | 14.05 |
|      chandelier     | 61.36 | 76.13 |
|        awning       | 15.88 | 24.27 |
|     streetlight     | 22.93 | 33.54 |
|        booth        | 30.92 | 35.44 |
| television receiver | 41.69 | 53.64 |
|       airplane      | 52.54 | 63.39 |
|      dirt track     |  0.0  |  0.0  |
|       apparel       |  26.2 | 42.15 |
|         pole        | 15.19 | 22.74 |
|         land        |  0.27 |  0.4  |
|      bannister      |  6.41 |  7.86 |
|      escalator      | 19.19 | 21.82 |
|       ottoman       | 24.82 | 43.36 |
|        bottle       | 33.04 | 48.27 |
|        buffet       | 27.87 | 33.37 |
|        poster       | 19.35 | 32.71 |
|        stage        |  2.68 |  3.79 |
|         van         | 32.97 | 49.61 |
|         ship        |  4.2  |  7.25 |
|       fountain      |  1.48 |  1.52 |
|    conveyer belt    | 44.39 | 65.29 |
|        canopy       |  7.19 | 11.99 |
|        washer       | 58.29 | 68.93 |
|      plaything      | 17.49 | 30.45 |
|    swimming pool    | 16.86 | 26.91 |
|        stool        | 31.73 | 47.99 |
|        barrel       | 18.44 | 65.09 |
|        basket       | 25.49 | 35.37 |
|      waterfall      | 33.89 | 38.47 |
|         tent        | 93.32 | 97.68 |
|         bag         |  6.9  |  10.6 |
|       minibike      | 46.55 | 51.56 |
|        cradle       | 63.45 | 81.13 |
|         oven        | 19.55 | 23.45 |
|         ball        | 29.54 | 32.75 |
|         food        | 37.02 |  42.2 |
|         step        |  5.31 |  7.78 |
|         tank        |  3.24 |  3.45 |
|      trade name     |  23.0 | 30.04 |
|      microwave      | 30.83 | 36.41 |
|         pot         | 35.39 | 42.76 |
|        animal       | 45.09 | 48.11 |
|       bicycle       | 53.32 | 76.85 |
|         lake        | 39.75 | 51.37 |
|      dishwasher     | 39.73 | 56.96 |
|        screen       | 41.77 | 63.39 |
|       blanket       |  6.45 |  8.01 |
|      sculpture      | 38.24 |  61.5 |
|         hood        | 50.28 | 53.49 |
|        sconce       | 39.24 | 52.53 |
|         vase        |  32.4 |  45.7 |
|    traffic light    | 23.28 | 41.32 |
|         tray        |  9.89 | 22.34 |
|        ashcan       | 24.97 | 36.87 |
|         fan         | 58.02 |  70.9 |
|         pier        | 31.25 | 39.42 |
|      crt screen     |  4.01 | 10.16 |
|        plate        | 52.38 | 64.08 |
|       monitor       |  7.23 |  8.59 |
|    bulletin board   |  31.6 | 37.12 |
|        shower       |  1.09 | 10.56 |
|       radiator      | 48.05 | 56.37 |
|        glass        |  9.91 | 10.45 |
|        clock        | 18.21 | 22.63 |
|         flag        | 37.14 | 43.49 |
+---------------------+-------+-------+
10/26 04:23:14 - mmengine - INFO - Iter(test) [2000/2000]    aAcc: 72.4100  mIoU: 34.5100  mAcc: 46.2400  data_time: 0.0171  time: 4.6166
Runtime: 9438

============================= JOB FEEDBACK =============================

NodeName=uc2n485
Job ID: 24523761
Array Job ID: 24523761_2
Cluster: uc2
User/Group: ma_dschader/ma_ma
State: COMPLETED (exit code 0)
Nodes: 1
Cores per node: 8
CPU Utilized: 02:23:25
CPU Efficiency: 11.36% of 21:02:16 core-walltime
Job Wall-clock time: 02:37:47
Memory Utilized: 4.16 GB
Memory Efficiency: 41.59% of 10.00 GB
