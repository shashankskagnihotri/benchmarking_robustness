Started at Tue Oct 29 06:57:41 CET 2024
/pfs/work7/workspace/scratch/ma_dschader-team_project_fss2024/miniconda3/envs/py310/lib/python3.10/site-packages/torch/cuda/__init__.py:155: UserWarning: 
NVIDIA H100 PCIe with CUDA capability sm_90 is not compatible with the current PyTorch installation.
The current PyTorch install supports CUDA capabilities sm_37 sm_50 sm_60 sm_61 sm_70 sm_75 sm_80 sm_86 compute_37.
If you want to use the NVIDIA H100 PCIe GPU with PyTorch, please check the instructions at https://pytorch.org/get-started/locally/

  warnings.warn(incompatible_device_warn.format(device_name, capability, " ".join(arch_list), device_name))
10/29 06:57:43 - mmengine - INFO - 
------------------------------------------------------------
System environment:
    sys.platform: linux
    Python: 3.10.13 | packaged by conda-forge | (main, Dec 23 2023, 15:36:39) [GCC 12.3.0]
    CUDA available: True
    MUSA available: False
    numpy_random_seed: 148972710
    GPU 0: NVIDIA H100 PCIe
    CUDA_HOME: None
    GCC: gcc (GCC) 8.5.0 20210514 (Red Hat 8.5.0-18)
    PyTorch: 1.13.1
    PyTorch compiling details: PyTorch built with:
  - GCC 9.3
  - C++ Version: 201402
  - Intel(R) oneAPI Math Kernel Library Version 2023.1-Product Build 20230303 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v2.6.0 (Git Hash 52b5f107dd9cf10910aaa19cb47f3abf9b349815)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - LAPACK is enabled (usually provided by MKL)
  - NNPACK is enabled
  - CPU capability usage: AVX2
  - CUDA Runtime 11.7
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_61,code=sm_61;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86;-gencode;arch=compute_37,code=compute_37
  - CuDNN 8.5
  - Magma 2.6.1
  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.7, CUDNN_VERSION=8.5.0, CXX_COMPILER=/opt/rh/devtoolset-9/root/usr/bin/c++, CXX_FLAGS= -fabi-version=11 -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -DEDGE_PROFILER_USE_KINETO -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Werror=non-virtual-dtor -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wunused-local-typedefs -Wno-unused-parameter -Wno-unused-function -Wno-unused-result -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Werror=cast-function-type -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.13.1, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, USE_ROCM=OFF, 

    TorchVision: 0.14.1
    OpenCV: 3.4.18
    MMEngine: 0.10.4

Runtime environment:
    cudnn_benchmark: True
    mp_cfg: {'mp_start_method': 'fork', 'opencv_num_threads': 0}
    dist_cfg: {'backend': 'nccl'}
    seed: 148972710
    Distributed launcher: none
    Distributed training: False
    GPU number: 1
------------------------------------------------------------

10/29 06:57:44 - mmengine - INFO - Config:
checkpoint_config = dict(by_epoch=False, interval=1000, max_keep_ckpts=1)
crop_size = (
    512,
    512,
)
data = dict(
    samples_per_gpu=2,
    test=dict(pipeline=[
        dict(type='LoadImageFromFile'),
        dict(
            flip=False,
            img_scale=(
                2048,
                512,
            ),
            transforms=[
                dict(keep_ratio=True, type='Resize'),
                dict(size_divisor=32, type='ResizeToMultiple'),
                dict(type='RandomFlip'),
                dict(
                    mean=[
                        123.675,
                        116.28,
                        103.53,
                    ],
                    std=[
                        58.395,
                        57.12,
                        57.375,
                    ],
                    to_rgb=True,
                    type='Normalize'),
                dict(keys=[
                    'img',
                ], type='ImageToTensor'),
                dict(keys=[
                    'img',
                ], type='Collect'),
            ],
            type='MultiScaleFlipAug'),
    ]),
    val=dict(pipeline=[
        dict(type='LoadImageFromFile'),
        dict(
            flip=False,
            img_scale=(
                2048,
                512,
            ),
            transforms=[
                dict(keep_ratio=True, type='Resize'),
                dict(size_divisor=32, type='ResizeToMultiple'),
                dict(type='RandomFlip'),
                dict(
                    mean=[
                        123.675,
                        116.28,
                        103.53,
                    ],
                    std=[
                        58.395,
                        57.12,
                        57.375,
                    ],
                    to_rgb=True,
                    type='Normalize'),
                dict(keys=[
                    'img',
                ], type='ImageToTensor'),
                dict(keys=[
                    'img',
                ], type='Collect'),
            ],
            type='MultiScaleFlipAug'),
    ]))
data_preprocessor = dict(
    bgr_to_rgb=True,
    corruption=None,
    enable_normalization=False,
    mean=[
        123.675,
        116.28,
        103.53,
    ],
    pad_val=0,
    seg_pad_val=255,
    std=[
        58.395,
        57.12,
        57.375,
    ],
    type='SegDataPreProcessor')
data_root = 'data/ade/ADEChallengeData2016'
dataset_type = 'ADE20KDataset'
default_hooks = dict(
    checkpoint=dict(by_epoch=False, interval=16000, type='CheckpointHook'),
    logger=dict(interval=50, log_metric_by_epoch=False, type='LoggerHook'),
    param_scheduler=dict(type='ParamSchedulerHook'),
    sampler_seed=dict(type='DistSamplerSeedHook'),
    timer=dict(type='IterTimerHook'),
    visualization=dict(draw=True, type='SegVisualizationHook'))
default_scope = 'mmseg'
env_cfg = dict(
    cudnn_benchmark=True,
    dist_cfg=dict(backend='nccl'),
    mp_cfg=dict(mp_start_method='fork', opencv_num_threads=0))
evaluation = dict(interval=16000, metric='mIoU', save_best='mIoU')
img_norm_cfg = dict(
    mean=[
        123.675,
        116.28,
        103.53,
    ],
    std=[
        58.395,
        57.12,
        57.375,
    ],
    to_rgb=True)
img_ratios = [
    0.5,
    0.75,
    1.0,
    1.25,
    1.5,
    1.75,
]
launcher = 'none'
load_from = '../checkpoint_files/upernet/upernet_internimage_b_512_160k_ade20k.pth'
log_level = 'INFO'
log_processor = dict(by_epoch=False)
lr_config = dict(
    _delete_=True,
    by_epoch=False,
    min_lr=0.0,
    policy='poly',
    power=1.0,
    warmup='linear',
    warmup_iters=1500,
    warmup_ratio=1e-06)
model = dict(
    attack_cfg=dict(
        alpha=0.01, epsilon=8, iterations=20, name='segpgd', norm='linf'),
    attack_loss=dict(
        loss_weight=1.0,
        reduction='none',
        type='CrossEntropyLoss',
        use_sigmoid=False),
    auxiliary_head=dict(
        align_corners=False,
        channels=256,
        concat_input=False,
        dropout_ratio=0.1,
        in_channels=448,
        in_index=2,
        loss_decode=dict(
            loss_weight=0.4, type='CrossEntropyLoss', use_sigmoid=False),
        norm_cfg=dict(requires_grad=True, type='SyncBN'),
        num_classes=150,
        num_convs=1,
        type='FCNHead'),
    backbone=dict(
        channels=112,
        core_op='DCNv3',
        depths=[
            4,
            4,
            21,
            4,
        ],
        drop_path_rate=0.4,
        groups=[
            7,
            14,
            28,
            56,
        ],
        init_cfg=dict(
            checkpoint=
            'https://huggingface.co/OpenGVLab/InternImage/resolve/main/internimage_b_1k_224.pth',
            type='Pretrained'),
        layer_scale=1.0,
        mlp_ratio=4.0,
        norm_layer='LN',
        offset_scale=1.0,
        out_indices=(
            0,
            1,
            2,
            3,
        ),
        post_norm=True,
        type='InternImage',
        with_cp=False),
    data_preprocessor=dict(
        bgr_to_rgb=True,
        corruption=None,
        enable_normalization=False,
        mean=[
            123.675,
            116.28,
            103.53,
        ],
        pad_val=0,
        seg_pad_val=255,
        std=[
            58.395,
            57.12,
            57.375,
        ],
        type='SegDataPreProcessor'),
    decode_head=dict(
        align_corners=False,
        channels=512,
        dropout_ratio=0.1,
        in_channels=[
            112,
            224,
            448,
            896,
        ],
        in_index=[
            0,
            1,
            2,
            3,
        ],
        loss_decode=dict(
            loss_weight=1.0,
            reduction='none',
            type='CrossEntropyLoss',
            use_sigmoid=False),
        norm_cfg=dict(requires_grad=True, type='SyncBN'),
        num_classes=150,
        pool_scales=(
            1,
            2,
            3,
            6,
        ),
        type='UPerHead'),
    enable_normalization=False,
    normalize_mean_std=dict(
        mean=[
            123.675,
            116.28,
            103.53,
        ], std=[
            58.395,
            57.12,
            57.375,
        ]),
    perform_attack=True,
    pretrained='open-mmlab://resnet50_v1c',
    test_cfg=dict(mode='whole'),
    train_cfg=dict(),
    type='EncoderDecoder')
norm_cfg = dict(requires_grad=True, type='SyncBN')
optim_wrapper = dict(
    clip_grad=None,
    optimizer=dict(lr=0.01, momentum=0.9, type='SGD', weight_decay=0.0005),
    type='OptimWrapper')
optimizer = dict(
    betas=(
        0.9,
        0.999,
    ),
    constructor='CustomLayerDecayOptimizerConstructor',
    lr=6e-05,
    paramwise_cfg=dict(
        depths=[
            4,
            4,
            21,
            4,
        ], layer_decay_rate=1.0, num_layers=33),
    type='AdamW',
    weight_decay=0.05)
param_scheduler = [
    dict(
        begin=0,
        by_epoch=False,
        end=160000,
        eta_min=0.0001,
        power=0.9,
        type='PolyLR'),
]
pretrained = 'https://huggingface.co/OpenGVLab/InternImage/resolve/main/internimage_b_1k_224.pth'
resume = False
runner = dict(type='IterBasedRunner')
test_cfg = dict(type='TestLoop')
test_dataloader = dict(
    batch_size=1,
    dataset=dict(
        data_prefix=dict(
            img_path='images/validation',
            seg_map_path='annotations/validation'),
        data_root='data/ade/ADEChallengeData2016',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(keep_ratio=True, scale=(
                2048,
                512,
            ), type='Resize'),
            dict(reduce_zero_label=True, type='LoadAnnotations'),
            dict(type='PackSegInputs'),
        ],
        type='ADE20KDataset'),
    num_workers=4,
    persistent_workers=True,
    sampler=dict(shuffle=False, type='DefaultSampler'))
test_evaluator = dict(
    iou_metrics=[
        'mIoU',
    ], type='IoUMetric')
test_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(
        flip=False,
        img_scale=(
            2048,
            512,
        ),
        transforms=[
            dict(keep_ratio=True, type='Resize'),
            dict(size_divisor=32, type='ResizeToMultiple'),
            dict(type='RandomFlip'),
            dict(
                mean=[
                    123.675,
                    116.28,
                    103.53,
                ],
                std=[
                    58.395,
                    57.12,
                    57.375,
                ],
                to_rgb=True,
                type='Normalize'),
            dict(keys=[
                'img',
            ], type='ImageToTensor'),
            dict(keys=[
                'img',
            ], type='Collect'),
        ],
        type='MultiScaleFlipAug'),
]
train_cfg = dict(
    max_iters=160000, type='IterBasedTrainLoop', val_interval=16000)
train_dataloader = dict(
    batch_size=4,
    dataset=dict(
        data_prefix=dict(
            img_path='images/training', seg_map_path='annotations/training'),
        data_root='data/ade/ADEChallengeData2016',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(reduce_zero_label=True, type='LoadAnnotations'),
            dict(
                keep_ratio=True,
                ratio_range=(
                    0.5,
                    2.0,
                ),
                scale=(
                    2048,
                    512,
                ),
                type='RandomResize'),
            dict(
                cat_max_ratio=0.75, crop_size=(
                    512,
                    512,
                ), type='RandomCrop'),
            dict(prob=0.5, type='RandomFlip'),
            dict(type='PhotoMetricDistortion'),
            dict(type='PackSegInputs'),
        ],
        type='ADE20KDataset'),
    num_workers=4,
    persistent_workers=True,
    sampler=dict(shuffle=True, type='InfiniteSampler'))
train_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(reduce_zero_label=True, type='LoadAnnotations'),
    dict(
        keep_ratio=True,
        ratio_range=(
            0.5,
            2.0,
        ),
        scale=(
            2048,
            512,
        ),
        type='RandomResize'),
    dict(cat_max_ratio=0.75, crop_size=(
        512,
        512,
    ), type='RandomCrop'),
    dict(prob=0.5, type='RandomFlip'),
    dict(type='PhotoMetricDistortion'),
    dict(type='PackSegInputs'),
]
tta_model = dict(type='SegTTAModel')
tta_pipeline = [
    dict(backend_args=None, type='LoadImageFromFile'),
    dict(
        transforms=[
            [
                dict(keep_ratio=True, scale_factor=0.5, type='Resize'),
                dict(keep_ratio=True, scale_factor=0.75, type='Resize'),
                dict(keep_ratio=True, scale_factor=1.0, type='Resize'),
                dict(keep_ratio=True, scale_factor=1.25, type='Resize'),
                dict(keep_ratio=True, scale_factor=1.5, type='Resize'),
                dict(keep_ratio=True, scale_factor=1.75, type='Resize'),
            ],
            [
                dict(direction='horizontal', prob=0.0, type='RandomFlip'),
                dict(direction='horizontal', prob=1.0, type='RandomFlip'),
            ],
            [
                dict(type='LoadAnnotations'),
            ],
            [
                dict(type='PackSegInputs'),
            ],
        ],
        type='TestTimeAug'),
]
val_cfg = dict(type='ValLoop')
val_dataloader = dict(
    batch_size=1,
    dataset=dict(
        data_prefix=dict(
            img_path='images/validation',
            seg_map_path='annotations/validation'),
        data_root='data/ade/ADEChallengeData2016',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(keep_ratio=True, scale=(
                2048,
                512,
            ), type='Resize'),
            dict(reduce_zero_label=True, type='LoadAnnotations'),
            dict(type='PackSegInputs'),
        ],
        type='ADE20KDataset'),
    num_workers=4,
    persistent_workers=True,
    sampler=dict(shuffle=False, type='DefaultSampler'))
val_evaluator = dict(
    iou_metrics=[
        'mIoU',
    ], type='IoUMetric')
vis_backends = [
    dict(type='LocalVisBackend'),
]
visualizer = dict(
    name='visualizer',
    save_dir=
    '../aa_workdir/ade/upernet/upernet_internimage_b_512_160k_ade20k/attack_segpgd/norm_linf/iterations_20/epsilon_8/alpha_0.01/show_dir',
    type='SegLocalVisualizer',
    vis_backends=[
        dict(type='LocalVisBackend'),
    ])
work_dir = '../aa_workdir/ade/upernet/upernet_internimage_b_512_160k_ade20k/attack_segpgd/norm_linf/iterations_20/epsilon_8/alpha_0.01'

/pfs/work7/workspace/scratch/ma_dschader-team_project_fss2024/benchmarking_robustness/semantic_segmentation/mmsegmentation/ops_dcnv3/modules/dcnv3.py:20: UserWarning: Now, we support DCNv4 in InternImage.
  warnings.warn('Now, we support DCNv4 in InternImage.')
2024-10-29 06:57:46,694 - mmseg - INFO - using core type: DCNv3
2024-10-29 06:57:46,694 - mmseg - INFO - using activation layer: GELU
2024-10-29 06:57:46,694 - mmseg - INFO - using main norm layer: LN
2024-10-29 06:57:46,694 - mmseg - INFO - using dpr: linear, 0.4
2024-10-29 06:57:46,694 - mmseg - INFO - level2_post_norm: False
2024-10-29 06:57:46,695 - mmseg - INFO - level2_post_norm_block_ids: None
2024-10-29 06:57:46,695 - mmseg - INFO - res_post_norm: False
2024-10-29 06:57:46,695 - mmseg - INFO - use_dcn_v4_op: False
10/29 07:15:06 - mmengine - INFO - Distributed training is not used, all SyncBatchNorm (SyncBN) layers in the model will be automatically reverted to BatchNormXd layers if they are used.
10/29 07:15:06 - mmengine - INFO - Hooks will be executed in the following order:
before_run:
(VERY_HIGH   ) RuntimeInfoHook                    
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
before_train:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_train_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(NORMAL      ) DistSamplerSeedHook                
 -------------------- 
before_train_iter:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_train_iter:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(NORMAL      ) SegVisualizationHook               
(BELOW_NORMAL) LoggerHook                         
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
after_train_epoch:
(NORMAL      ) IterTimerHook                      
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_val:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
before_val_epoch:
(NORMAL      ) IterTimerHook                      
 -------------------- 
before_val_iter:
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_val_iter:
(NORMAL      ) IterTimerHook                      
(NORMAL      ) SegVisualizationHook               
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_val_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
after_val:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
after_train:
(VERY_HIGH   ) RuntimeInfoHook                    
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_test:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
before_test_epoch:
(NORMAL      ) IterTimerHook                      
 -------------------- 
before_test_iter:
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_test_iter:
(NORMAL      ) IterTimerHook                      
(NORMAL      ) SegVisualizationHook               
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_test_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_test:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
after_run:
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
10/29 07:15:07 - mmengine - WARNING - The prefix is not set in metric class IoUMetric.
Loads checkpoint by local backend from path: ../checkpoint_files/upernet/upernet_internimage_b_512_160k_ade20k.pth
10/29 07:15:08 - mmengine - INFO - Load checkpoint from ../checkpoint_files/upernet/upernet_internimage_b_512_160k_ade20k.pth
10/29 07:37:02 - mmengine - INFO - Iter(test) [  50/2000]    eta: 14:13:16  time: 6.2796  data_time: 0.0021  memory: 48451  
10/29 07:42:15 - mmengine - INFO - Iter(test) [ 100/2000]    eta: 8:34:41  time: 6.5011  data_time: 0.0022  memory: 48251  
10/29 07:46:44 - mmengine - INFO - Iter(test) [ 150/2000]    eta: 6:29:35  time: 5.4726  data_time: 0.0016  memory: 47109  
10/29 07:51:40 - mmengine - INFO - Iter(test) [ 200/2000]    eta: 5:28:42  time: 5.7917  data_time: 0.0016  memory: 59418  
10/29 07:56:23 - mmengine - INFO - Iter(test) [ 250/2000]    eta: 4:48:40  time: 5.2372  data_time: 0.0015  memory: 60407  
10/29 08:00:58 - mmengine - INFO - Iter(test) [ 300/2000]    eta: 4:19:40  time: 4.9446  data_time: 0.0017  memory: 48194  
10/29 08:05:43 - mmengine - INFO - Iter(test) [ 350/2000]    eta: 3:58:27  time: 5.1208  data_time: 0.0015  memory: 48106  
10/29 08:10:16 - mmengine - INFO - Iter(test) [ 400/2000]    eta: 3:40:28  time: 5.4440  data_time: 0.0013  memory: 48108  
10/29 08:14:05 - mmengine - INFO - Iter(test) [ 450/2000]    eta: 3:23:01  time: 4.7410  data_time: 0.0013  memory: 46935  
10/29 08:18:15 - mmengine - INFO - Iter(test) [ 500/2000]    eta: 3:09:17  time: 4.6477  data_time: 0.0014  memory: 45344  
10/29 08:22:39 - mmengine - INFO - Iter(test) [ 550/2000]    eta: 2:57:56  time: 5.6626  data_time: 0.0015  memory: 48147  
10/29 08:26:43 - mmengine - INFO - Iter(test) [ 600/2000]    eta: 2:46:58  time: 5.2498  data_time: 0.0015  memory: 48152  
10/29 08:31:00 - mmengine - INFO - Iter(test) [ 650/2000]    eta: 2:37:31  time: 5.4013  data_time: 0.0014  memory: 57840  
10/29 08:35:35 - mmengine - INFO - Iter(test) [ 700/2000]    eta: 2:29:21  time: 4.9380  data_time: 0.0016  memory: 48489  
10/29 08:40:07 - mmengine - INFO - Iter(test) [ 750/2000]    eta: 2:21:36  time: 6.4650  data_time: 0.0016  memory: 48884  
10/29 08:44:00 - mmengine - INFO - Iter(test) [ 800/2000]    eta: 2:13:14  time: 4.8424  data_time: 0.0016  memory: 47126  
10/29 08:48:04 - mmengine - INFO - Iter(test) [ 850/2000]    eta: 2:05:41  time: 4.8982  data_time: 0.0016  memory: 12297  
10/29 08:51:55 - mmengine - INFO - Iter(test) [ 900/2000]    eta: 1:58:16  time: 4.5953  data_time: 0.0014  memory: 46463  
10/29 08:56:23 - mmengine - INFO - Iter(test) [ 950/2000]    eta: 1:51:52  time: 5.2796  data_time: 0.0016  memory: 48013  
10/29 09:00:25 - mmengine - INFO - Iter(test) [1000/2000]    eta: 1:45:15  time: 4.6152  data_time: 0.0016  memory: 48043  
10/29 09:04:49 - mmengine - INFO - Iter(test) [1050/2000]    eta: 1:39:13  time: 5.8315  data_time: 0.0016  memory: 58076  
10/29 09:09:04 - mmengine - INFO - Iter(test) [1100/2000]    eta: 1:33:11  time: 4.7103  data_time: 0.0017  memory: 47136  
10/29 09:13:09 - mmengine - INFO - Iter(test) [1150/2000]    eta: 1:27:12  time: 5.0745  data_time: 0.0016  memory: 45988  
10/29 09:17:14 - mmengine - INFO - Iter(test) [1200/2000]    eta: 1:21:22  time: 4.6608  data_time: 0.0015  memory: 13959  
10/29 09:21:13 - mmengine - INFO - Iter(test) [1250/2000]    eta: 1:15:38  time: 4.8982  data_time: 0.0027  memory: 47265  
10/29 09:24:58 - mmengine - INFO - Iter(test) [1300/2000]    eta: 1:09:53  time: 4.7602  data_time: 0.0016  memory: 12435  
10/29 09:28:58 - mmengine - INFO - Iter(test) [1350/2000]    eta: 1:04:25  time: 4.4690  data_time: 0.0016  memory: 45106  
10/29 09:33:16 - mmengine - INFO - Iter(test) [1400/2000]    eta: 0:59:11  time: 5.4645  data_time: 0.0015  memory: 47618  
10/29 09:37:12 - mmengine - INFO - Iter(test) [1450/2000]    eta: 0:53:52  time: 5.4324  data_time: 0.0014  memory: 46493  
10/29 09:41:04 - mmengine - INFO - Iter(test) [1500/2000]    eta: 0:48:38  time: 4.4642  data_time: 0.0014  memory: 12297  
10/29 09:45:14 - mmengine - INFO - Iter(test) [1550/2000]    eta: 0:43:34  time: 4.8662  data_time: 0.0014  memory: 47852  
10/29 09:49:08 - mmengine - INFO - Iter(test) [1600/2000]    eta: 0:38:29  time: 4.7426  data_time: 0.0014  memory: 12190  
10/29 09:53:11 - mmengine - INFO - Iter(test) [1650/2000]    eta: 0:33:31  time: 4.4154  data_time: 0.0013  memory: 48062  
10/29 09:57:23 - mmengine - INFO - Iter(test) [1700/2000]    eta: 0:28:37  time: 4.8418  data_time: 0.0015  memory: 46716  
10/29 10:01:37 - mmengine - INFO - Iter(test) [1750/2000]    eta: 0:23:46  time: 4.7978  data_time: 0.0013  memory: 47605  
10/29 10:05:36 - mmengine - INFO - Iter(test) [1800/2000]    eta: 0:18:56  time: 5.0243  data_time: 0.0015  memory: 45350  
10/29 10:09:42 - mmengine - INFO - Iter(test) [1850/2000]    eta: 0:14:09  time: 4.8457  data_time: 0.0015  memory: 11097  
10/29 10:13:32 - mmengine - INFO - Iter(test) [1900/2000]    eta: 0:09:23  time: 4.6674  data_time: 0.0014  memory: 48588  
10/29 10:17:42 - mmengine - INFO - Iter(test) [1950/2000]    eta: 0:04:40  time: 4.6297  data_time: 0.0014  memory: 45794  
10/29 10:21:41 - mmengine - INFO - Iter(test) [2000/2000]    eta: 0:00:00  time: 4.3903  data_time: 0.0012  memory: 48668  
10/29 10:21:41 - mmengine - INFO - per class results:
10/29 10:21:41 - mmengine - INFO - 
+---------------------+------+------+
|        Class        | IoU  | Acc  |
+---------------------+------+------+
|         wall        | 1.31 | 2.8  |
|       building      | 0.08 | 0.1  |
|         sky         | 0.22 | 0.23 |
|        floor        | 0.21 | 0.4  |
|         tree        | 0.38 | 0.58 |
|       ceiling       | 0.44 | 0.59 |
|         road        | 0.0  | 0.0  |
|         bed         | 0.04 | 0.09 |
|      windowpane     | 0.08 | 0.09 |
|        grass        | 0.0  | 0.0  |
|       cabinet       | 0.15 | 0.36 |
|       sidewalk      | 0.01 | 0.01 |
|        person       | 1.06 | 1.99 |
|        earth        | 0.03 | 0.07 |
|         door        | 0.09 | 0.19 |
|        table        | 0.15 | 0.64 |
|       mountain      | 0.09 | 0.1  |
|        plant        | 0.11 | 0.15 |
|       curtain       | 0.19 | 0.5  |
|        chair        | 0.13 | 0.35 |
|         car         | 0.02 | 0.03 |
|        water        | 0.0  | 0.0  |
|       painting      | 0.02 | 0.03 |
|         sofa        | 0.0  | 0.0  |
|        shelf        | 0.43 | 1.2  |
|        house        | 0.0  | 0.0  |
|         sea         | 0.0  | 0.0  |
|        mirror       | 0.21 | 0.61 |
|         rug         | 0.01 | 0.01 |
|        field        | 0.07 | 0.16 |
|       armchair      | 0.04 | 0.23 |
|         seat        | 0.0  | 0.0  |
|        fence        | 0.15 | 0.71 |
|         desk        | 0.13 | 0.24 |
|         rock        | 0.04 | 0.07 |
|       wardrobe      | 0.0  | 0.0  |
|         lamp        | 0.16 | 0.44 |
|       bathtub       | 0.0  | 0.0  |
|       railing       | 0.0  | 0.0  |
|       cushion       | 0.09 | 2.07 |
|         base        | 0.0  | 0.0  |
|         box         | 0.26 | 2.45 |
|        column       | 0.0  | 0.0  |
|      signboard      | 0.1  | 0.73 |
|   chest of drawers  | 0.0  | 0.0  |
|       counter       | 0.0  | 0.0  |
|         sand        | 0.0  | 0.0  |
|         sink        | 0.0  | 0.0  |
|      skyscraper     | 0.0  | 0.0  |
|      fireplace      | 0.22 | 0.28 |
|     refrigerator    | 0.0  | 0.0  |
|      grandstand     | 0.0  | 0.0  |
|         path        | 0.0  | 0.0  |
|        stairs       | 0.0  | 0.0  |
|        runway       | 0.0  | 0.0  |
|         case        | 0.0  | 0.0  |
|      pool table     | 0.0  | 0.0  |
|        pillow       | 0.06 | 0.37 |
|     screen door     | 0.7  | 1.88 |
|       stairway      | 0.0  | 0.0  |
|        river        | 0.0  | 0.0  |
|        bridge       | 0.0  | 0.0  |
|       bookcase      | 0.0  | 0.0  |
|        blind        | 0.0  | 0.0  |
|     coffee table    | 0.01 | 0.01 |
|        toilet       | 0.0  | 0.0  |
|        flower       | 0.03 | 0.06 |
|         book        | 0.04 | 0.79 |
|         hill        | 0.0  | 0.0  |
|        bench        | 0.0  | 0.0  |
|      countertop     | 0.0  | 0.0  |
|        stove        | 0.0  | 0.0  |
|         palm        | 0.0  | 0.0  |
|    kitchen island   | 0.0  | 0.0  |
|       computer      | 0.0  | 0.0  |
|     swivel chair    | 0.0  | 0.0  |
|         boat        | 0.0  | 0.0  |
|         bar         | 0.0  | 0.0  |
|    arcade machine   | 0.0  | 0.0  |
|        hovel        | 0.0  | 0.0  |
|         bus         | 0.0  | 0.0  |
|        towel        | 0.0  | 0.0  |
|        light        | 0.0  | 0.0  |
|        truck        | 0.0  | 0.0  |
|        tower        | 0.0  | 0.0  |
|      chandelier     | 0.0  | 0.0  |
|        awning       | 0.08 | 1.56 |
|     streetlight     | 0.0  | 0.0  |
|        booth        | 0.0  | 0.0  |
| television receiver | 0.0  | 0.0  |
|       airplane      | 0.0  | 0.0  |
|      dirt track     | 0.0  | 0.0  |
|       apparel       | 0.0  | 0.0  |
|         pole        | 0.0  | 0.01 |
|         land        | 0.0  | 0.0  |
|      bannister      | 0.0  | 0.0  |
|      escalator      | 0.0  | 0.0  |
|       ottoman       | 0.0  | 0.0  |
|        bottle       | 0.27 | 0.9  |
|        buffet       | 0.0  | 0.0  |
|        poster       | 0.0  | 0.0  |
|        stage        | 0.29 | 3.02 |
|         van         | 0.0  | 0.0  |
|         ship        | 0.0  | 0.0  |
|       fountain      | 0.0  | 0.0  |
|    conveyer belt    | 0.0  | 0.0  |
|        canopy       | 0.06 | 0.91 |
|        washer       | 0.0  | 0.0  |
|      plaything      | 0.0  | 0.0  |
|    swimming pool    | 0.0  | 0.0  |
|        stool        | 0.0  | 0.0  |
|        barrel       | 0.0  | 0.0  |
|        basket       | 0.0  | 0.0  |
|      waterfall      | 0.0  | 0.0  |
|         tent        | 0.0  | 0.0  |
|         bag         | 0.0  | 0.0  |
|       minibike      | 0.0  | 0.0  |
|        cradle       | 0.0  | 0.0  |
|         oven        | 0.0  | 0.0  |
|         ball        | 0.0  | 0.0  |
|         food        | 0.0  | 0.0  |
|         step        | 0.0  | 0.0  |
|         tank        | 0.0  | 0.0  |
|      trade name     | 0.0  | 0.0  |
|      microwave      | 0.0  | 0.0  |
|         pot         | 0.0  | 0.0  |
|        animal       | 0.0  | 0.0  |
|       bicycle       | 0.0  | 0.0  |
|         lake        | 0.0  | 0.0  |
|      dishwasher     | 0.0  | 0.0  |
|        screen       | 0.0  | 0.0  |
|       blanket       | 0.0  | 0.0  |
|      sculpture      | 0.0  | 0.0  |
|         hood        | 0.0  | 0.0  |
|        sconce       | 0.0  | 0.0  |
|         vase        | 0.21 | 0.3  |
|    traffic light    | 0.0  | 0.0  |
|         tray        | 0.04 | 1.84 |
|        ashcan       | 0.0  | 0.0  |
|         fan         | 0.0  | 0.0  |
|         pier        | 0.0  | 0.0  |
|      crt screen     | 0.3  | 1.39 |
|        plate        | 0.04 | 0.08 |
|       monitor       | 0.0  | 0.0  |
|    bulletin board   | 0.0  | 0.0  |
|        shower       | 0.02 | 0.88 |
|       radiator      | 0.0  | 0.0  |
|        glass        | 0.0  | 0.0  |
|        clock        | 0.91 | 1.35 |
|         flag        | 0.0  | 0.0  |
+---------------------+------+------+
10/29 10:21:41 - mmengine - INFO - Iter(test) [2000/2000]    aAcc: 0.7200  mIoU: 0.0700  mAcc: 0.2300  data_time: 0.0136  time: 5.5954
/pfs/work7/workspace/scratch/ma_dschader-team_project_fss2024/miniconda3/envs/py310/lib/python3.10/site-packages/torch/cuda/__init__.py:155: UserWarning: 
NVIDIA H100 PCIe with CUDA capability sm_90 is not compatible with the current PyTorch installation.
The current PyTorch install supports CUDA capabilities sm_37 sm_50 sm_60 sm_61 sm_70 sm_75 sm_80 sm_86 compute_37.
If you want to use the NVIDIA H100 PCIe GPU with PyTorch, please check the instructions at https://pytorch.org/get-started/locally/

  warnings.warn(incompatible_device_warn.format(device_name, capability, " ".join(arch_list), device_name))
10/29 10:21:44 - mmengine - INFO - 
------------------------------------------------------------
System environment:
    sys.platform: linux
    Python: 3.10.13 | packaged by conda-forge | (main, Dec 23 2023, 15:36:39) [GCC 12.3.0]
    CUDA available: True
    MUSA available: False
    numpy_random_seed: 526490220
    GPU 0: NVIDIA H100 PCIe
    CUDA_HOME: None
    GCC: gcc (GCC) 8.5.0 20210514 (Red Hat 8.5.0-18)
    PyTorch: 1.13.1
    PyTorch compiling details: PyTorch built with:
  - GCC 9.3
  - C++ Version: 201402
  - Intel(R) oneAPI Math Kernel Library Version 2023.1-Product Build 20230303 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v2.6.0 (Git Hash 52b5f107dd9cf10910aaa19cb47f3abf9b349815)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - LAPACK is enabled (usually provided by MKL)
  - NNPACK is enabled
  - CPU capability usage: AVX2
  - CUDA Runtime 11.7
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_61,code=sm_61;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86;-gencode;arch=compute_37,code=compute_37
  - CuDNN 8.5
  - Magma 2.6.1
  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.7, CUDNN_VERSION=8.5.0, CXX_COMPILER=/opt/rh/devtoolset-9/root/usr/bin/c++, CXX_FLAGS= -fabi-version=11 -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -DEDGE_PROFILER_USE_KINETO -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Werror=non-virtual-dtor -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wunused-local-typedefs -Wno-unused-parameter -Wno-unused-function -Wno-unused-result -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Werror=cast-function-type -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.13.1, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, USE_ROCM=OFF, 

    TorchVision: 0.14.1
    OpenCV: 3.4.18
    MMEngine: 0.10.4

Runtime environment:
    cudnn_benchmark: True
    mp_cfg: {'mp_start_method': 'fork', 'opencv_num_threads': 0}
    dist_cfg: {'backend': 'nccl'}
    seed: 526490220
    Distributed launcher: none
    Distributed training: False
    GPU number: 1
------------------------------------------------------------

10/29 10:21:45 - mmengine - INFO - Config:
checkpoint_config = dict(by_epoch=False, interval=1000, max_keep_ckpts=1)
crop_size = (
    512,
    512,
)
data = dict(
    samples_per_gpu=2,
    test=dict(pipeline=[
        dict(type='LoadImageFromFile'),
        dict(
            flip=False,
            img_scale=(
                2048,
                512,
            ),
            transforms=[
                dict(keep_ratio=True, type='Resize'),
                dict(size_divisor=32, type='ResizeToMultiple'),
                dict(type='RandomFlip'),
                dict(
                    mean=[
                        123.675,
                        116.28,
                        103.53,
                    ],
                    std=[
                        58.395,
                        57.12,
                        57.375,
                    ],
                    to_rgb=True,
                    type='Normalize'),
                dict(keys=[
                    'img',
                ], type='ImageToTensor'),
                dict(keys=[
                    'img',
                ], type='Collect'),
            ],
            type='MultiScaleFlipAug'),
    ]),
    val=dict(pipeline=[
        dict(type='LoadImageFromFile'),
        dict(
            flip=False,
            img_scale=(
                2048,
                512,
            ),
            transforms=[
                dict(keep_ratio=True, type='Resize'),
                dict(size_divisor=32, type='ResizeToMultiple'),
                dict(type='RandomFlip'),
                dict(
                    mean=[
                        123.675,
                        116.28,
                        103.53,
                    ],
                    std=[
                        58.395,
                        57.12,
                        57.375,
                    ],
                    to_rgb=True,
                    type='Normalize'),
                dict(keys=[
                    'img',
                ], type='ImageToTensor'),
                dict(keys=[
                    'img',
                ], type='Collect'),
            ],
            type='MultiScaleFlipAug'),
    ]))
data_preprocessor = dict(
    bgr_to_rgb=True,
    corruption=None,
    enable_normalization=False,
    mean=[
        123.675,
        116.28,
        103.53,
    ],
    pad_val=0,
    seg_pad_val=255,
    std=[
        58.395,
        57.12,
        57.375,
    ],
    type='SegDataPreProcessor')
data_root = 'data/ade/ADEChallengeData2016'
dataset_type = 'ADE20KDataset'
default_hooks = dict(
    checkpoint=dict(by_epoch=False, interval=16000, type='CheckpointHook'),
    logger=dict(interval=50, log_metric_by_epoch=False, type='LoggerHook'),
    param_scheduler=dict(type='ParamSchedulerHook'),
    sampler_seed=dict(type='DistSamplerSeedHook'),
    timer=dict(type='IterTimerHook'),
    visualization=dict(draw=True, type='SegVisualizationHook'))
default_scope = 'mmseg'
env_cfg = dict(
    cudnn_benchmark=True,
    dist_cfg=dict(backend='nccl'),
    mp_cfg=dict(mp_start_method='fork', opencv_num_threads=0))
evaluation = dict(interval=16000, metric='mIoU', save_best='mIoU')
img_norm_cfg = dict(
    mean=[
        123.675,
        116.28,
        103.53,
    ],
    std=[
        58.395,
        57.12,
        57.375,
    ],
    to_rgb=True)
img_ratios = [
    0.5,
    0.75,
    1.0,
    1.25,
    1.5,
    1.75,
]
launcher = 'none'
load_from = '../checkpoint_files/upernet/upernet_internimage_b_512_160k_ade20k.pth'
log_level = 'INFO'
log_processor = dict(by_epoch=False)
lr_config = dict(
    _delete_=True,
    by_epoch=False,
    min_lr=0.0,
    policy='poly',
    power=1.0,
    warmup='linear',
    warmup_iters=1500,
    warmup_ratio=1e-06)
model = dict(
    attack_cfg=dict(
        alpha=0.1, epsilon=64, iterations=20, name='segpgd', norm='l2'),
    attack_loss=dict(
        loss_weight=1.0,
        reduction='none',
        type='CrossEntropyLoss',
        use_sigmoid=False),
    auxiliary_head=dict(
        align_corners=False,
        channels=256,
        concat_input=False,
        dropout_ratio=0.1,
        in_channels=448,
        in_index=2,
        loss_decode=dict(
            loss_weight=0.4, type='CrossEntropyLoss', use_sigmoid=False),
        norm_cfg=dict(requires_grad=True, type='SyncBN'),
        num_classes=150,
        num_convs=1,
        type='FCNHead'),
    backbone=dict(
        channels=112,
        core_op='DCNv3',
        depths=[
            4,
            4,
            21,
            4,
        ],
        drop_path_rate=0.4,
        groups=[
            7,
            14,
            28,
            56,
        ],
        init_cfg=dict(
            checkpoint=
            'https://huggingface.co/OpenGVLab/InternImage/resolve/main/internimage_b_1k_224.pth',
            type='Pretrained'),
        layer_scale=1.0,
        mlp_ratio=4.0,
        norm_layer='LN',
        offset_scale=1.0,
        out_indices=(
            0,
            1,
            2,
            3,
        ),
        post_norm=True,
        type='InternImage',
        with_cp=False),
    data_preprocessor=dict(
        bgr_to_rgb=True,
        corruption=None,
        enable_normalization=False,
        mean=[
            123.675,
            116.28,
            103.53,
        ],
        pad_val=0,
        seg_pad_val=255,
        std=[
            58.395,
            57.12,
            57.375,
        ],
        type='SegDataPreProcessor'),
    decode_head=dict(
        align_corners=False,
        channels=512,
        dropout_ratio=0.1,
        in_channels=[
            112,
            224,
            448,
            896,
        ],
        in_index=[
            0,
            1,
            2,
            3,
        ],
        loss_decode=dict(
            loss_weight=1.0,
            reduction='none',
            type='CrossEntropyLoss',
            use_sigmoid=False),
        norm_cfg=dict(requires_grad=True, type='SyncBN'),
        num_classes=150,
        pool_scales=(
            1,
            2,
            3,
            6,
        ),
        type='UPerHead'),
    enable_normalization=False,
    normalize_mean_std=dict(
        mean=[
            123.675,
            116.28,
            103.53,
        ], std=[
            58.395,
            57.12,
            57.375,
        ]),
    perform_attack=True,
    pretrained='open-mmlab://resnet50_v1c',
    test_cfg=dict(mode='whole'),
    train_cfg=dict(),
    type='EncoderDecoder')
norm_cfg = dict(requires_grad=True, type='SyncBN')
optim_wrapper = dict(
    clip_grad=None,
    optimizer=dict(lr=0.01, momentum=0.9, type='SGD', weight_decay=0.0005),
    type='OptimWrapper')
optimizer = dict(
    betas=(
        0.9,
        0.999,
    ),
    constructor='CustomLayerDecayOptimizerConstructor',
    lr=6e-05,
    paramwise_cfg=dict(
        depths=[
            4,
            4,
            21,
            4,
        ], layer_decay_rate=1.0, num_layers=33),
    type='AdamW',
    weight_decay=0.05)
param_scheduler = [
    dict(
        begin=0,
        by_epoch=False,
        end=160000,
        eta_min=0.0001,
        power=0.9,
        type='PolyLR'),
]
pretrained = 'https://huggingface.co/OpenGVLab/InternImage/resolve/main/internimage_b_1k_224.pth'
resume = False
runner = dict(type='IterBasedRunner')
test_cfg = dict(type='TestLoop')
test_dataloader = dict(
    batch_size=1,
    dataset=dict(
        data_prefix=dict(
            img_path='images/validation',
            seg_map_path='annotations/validation'),
        data_root='data/ade/ADEChallengeData2016',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(keep_ratio=True, scale=(
                2048,
                512,
            ), type='Resize'),
            dict(reduce_zero_label=True, type='LoadAnnotations'),
            dict(type='PackSegInputs'),
        ],
        type='ADE20KDataset'),
    num_workers=4,
    persistent_workers=True,
    sampler=dict(shuffle=False, type='DefaultSampler'))
test_evaluator = dict(
    iou_metrics=[
        'mIoU',
    ], type='IoUMetric')
test_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(
        flip=False,
        img_scale=(
            2048,
            512,
        ),
        transforms=[
            dict(keep_ratio=True, type='Resize'),
            dict(size_divisor=32, type='ResizeToMultiple'),
            dict(type='RandomFlip'),
            dict(
                mean=[
                    123.675,
                    116.28,
                    103.53,
                ],
                std=[
                    58.395,
                    57.12,
                    57.375,
                ],
                to_rgb=True,
                type='Normalize'),
            dict(keys=[
                'img',
            ], type='ImageToTensor'),
            dict(keys=[
                'img',
            ], type='Collect'),
        ],
        type='MultiScaleFlipAug'),
]
train_cfg = dict(
    max_iters=160000, type='IterBasedTrainLoop', val_interval=16000)
train_dataloader = dict(
    batch_size=4,
    dataset=dict(
        data_prefix=dict(
            img_path='images/training', seg_map_path='annotations/training'),
        data_root='data/ade/ADEChallengeData2016',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(reduce_zero_label=True, type='LoadAnnotations'),
            dict(
                keep_ratio=True,
                ratio_range=(
                    0.5,
                    2.0,
                ),
                scale=(
                    2048,
                    512,
                ),
                type='RandomResize'),
            dict(
                cat_max_ratio=0.75, crop_size=(
                    512,
                    512,
                ), type='RandomCrop'),
            dict(prob=0.5, type='RandomFlip'),
            dict(type='PhotoMetricDistortion'),
            dict(type='PackSegInputs'),
        ],
        type='ADE20KDataset'),
    num_workers=4,
    persistent_workers=True,
    sampler=dict(shuffle=True, type='InfiniteSampler'))
train_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(reduce_zero_label=True, type='LoadAnnotations'),
    dict(
        keep_ratio=True,
        ratio_range=(
            0.5,
            2.0,
        ),
        scale=(
            2048,
            512,
        ),
        type='RandomResize'),
    dict(cat_max_ratio=0.75, crop_size=(
        512,
        512,
    ), type='RandomCrop'),
    dict(prob=0.5, type='RandomFlip'),
    dict(type='PhotoMetricDistortion'),
    dict(type='PackSegInputs'),
]
tta_model = dict(type='SegTTAModel')
tta_pipeline = [
    dict(backend_args=None, type='LoadImageFromFile'),
    dict(
        transforms=[
            [
                dict(keep_ratio=True, scale_factor=0.5, type='Resize'),
                dict(keep_ratio=True, scale_factor=0.75, type='Resize'),
                dict(keep_ratio=True, scale_factor=1.0, type='Resize'),
                dict(keep_ratio=True, scale_factor=1.25, type='Resize'),
                dict(keep_ratio=True, scale_factor=1.5, type='Resize'),
                dict(keep_ratio=True, scale_factor=1.75, type='Resize'),
            ],
            [
                dict(direction='horizontal', prob=0.0, type='RandomFlip'),
                dict(direction='horizontal', prob=1.0, type='RandomFlip'),
            ],
            [
                dict(type='LoadAnnotations'),
            ],
            [
                dict(type='PackSegInputs'),
            ],
        ],
        type='TestTimeAug'),
]
val_cfg = dict(type='ValLoop')
val_dataloader = dict(
    batch_size=1,
    dataset=dict(
        data_prefix=dict(
            img_path='images/validation',
            seg_map_path='annotations/validation'),
        data_root='data/ade/ADEChallengeData2016',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(keep_ratio=True, scale=(
                2048,
                512,
            ), type='Resize'),
            dict(reduce_zero_label=True, type='LoadAnnotations'),
            dict(type='PackSegInputs'),
        ],
        type='ADE20KDataset'),
    num_workers=4,
    persistent_workers=True,
    sampler=dict(shuffle=False, type='DefaultSampler'))
val_evaluator = dict(
    iou_metrics=[
        'mIoU',
    ], type='IoUMetric')
vis_backends = [
    dict(type='LocalVisBackend'),
]
visualizer = dict(
    name='visualizer',
    save_dir=
    '../aa_workdir/ade/upernet/upernet_internimage_b_512_160k_ade20k/attack_segpgd/norm_l2/iterations_20/epsilon_64/alpha_0.1/show_dir',
    type='SegLocalVisualizer',
    vis_backends=[
        dict(type='LocalVisBackend'),
    ])
work_dir = '../aa_workdir/ade/upernet/upernet_internimage_b_512_160k_ade20k/attack_segpgd/norm_l2/iterations_20/epsilon_64/alpha_0.1'

/pfs/work7/workspace/scratch/ma_dschader-team_project_fss2024/benchmarking_robustness/semantic_segmentation/mmsegmentation/ops_dcnv3/modules/dcnv3.py:20: UserWarning: Now, we support DCNv4 in InternImage.
  warnings.warn('Now, we support DCNv4 in InternImage.')
2024-10-29 10:21:47,682 - mmseg - INFO - using core type: DCNv3
2024-10-29 10:21:47,682 - mmseg - INFO - using activation layer: GELU
2024-10-29 10:21:47,682 - mmseg - INFO - using main norm layer: LN
2024-10-29 10:21:47,682 - mmseg - INFO - using dpr: linear, 0.4
2024-10-29 10:21:47,682 - mmseg - INFO - level2_post_norm: False
2024-10-29 10:21:47,682 - mmseg - INFO - level2_post_norm_block_ids: None
2024-10-29 10:21:47,682 - mmseg - INFO - res_post_norm: False
2024-10-29 10:21:47,682 - mmseg - INFO - use_dcn_v4_op: False
10/29 10:39:03 - mmengine - INFO - Distributed training is not used, all SyncBatchNorm (SyncBN) layers in the model will be automatically reverted to BatchNormXd layers if they are used.
10/29 10:39:03 - mmengine - INFO - Hooks will be executed in the following order:
before_run:
(VERY_HIGH   ) RuntimeInfoHook                    
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
before_train:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_train_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(NORMAL      ) DistSamplerSeedHook                
 -------------------- 
before_train_iter:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_train_iter:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(NORMAL      ) SegVisualizationHook               
(BELOW_NORMAL) LoggerHook                         
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
after_train_epoch:
(NORMAL      ) IterTimerHook                      
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_val:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
before_val_epoch:
(NORMAL      ) IterTimerHook                      
 -------------------- 
before_val_iter:
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_val_iter:
(NORMAL      ) IterTimerHook                      
(NORMAL      ) SegVisualizationHook               
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_val_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
after_val:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
after_train:
(VERY_HIGH   ) RuntimeInfoHook                    
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_test:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
before_test_epoch:
(NORMAL      ) IterTimerHook                      
 -------------------- 
before_test_iter:
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_test_iter:
(NORMAL      ) IterTimerHook                      
(NORMAL      ) SegVisualizationHook               
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_test_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_test:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
after_run:
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
10/29 10:39:04 - mmengine - WARNING - The prefix is not set in metric class IoUMetric.
Loads checkpoint by local backend from path: ../checkpoint_files/upernet/upernet_internimage_b_512_160k_ade20k.pth
10/29 10:39:05 - mmengine - INFO - Load checkpoint from ../checkpoint_files/upernet/upernet_internimage_b_512_160k_ade20k.pth
10/29 11:00:57 - mmengine - INFO - Iter(test) [  50/2000]    eta: 14:11:50  time: 6.4211  data_time: 0.0021  memory: 48451  
10/29 11:06:07 - mmengine - INFO - Iter(test) [ 100/2000]    eta: 8:33:20  time: 6.5312  data_time: 0.0040  memory: 48251  
10/29 11:10:39 - mmengine - INFO - Iter(test) [ 150/2000]    eta: 6:29:03  time: 5.5090  data_time: 0.0017  memory: 47109  
10/29 11:15:33 - mmengine - INFO - Iter(test) [ 200/2000]    eta: 5:28:06  time: 5.6422  data_time: 0.0016  memory: 59418  
10/29 11:20:13 - mmengine - INFO - Iter(test) [ 250/2000]    eta: 4:47:49  time: 5.2153  data_time: 0.0016  memory: 60407  
10/29 11:24:46 - mmengine - INFO - Iter(test) [ 300/2000]    eta: 4:18:46  time: 4.8625  data_time: 0.0028  memory: 48194  
10/29 11:29:30 - mmengine - INFO - Iter(test) [ 350/2000]    eta: 3:57:35  time: 5.0798  data_time: 0.0017  memory: 48106  
10/29 11:33:56 - mmengine - INFO - Iter(test) [ 400/2000]    eta: 3:39:22  time: 5.2964  data_time: 0.0015  memory: 48108  
10/29 11:37:44 - mmengine - INFO - Iter(test) [ 450/2000]    eta: 3:21:58  time: 4.7337  data_time: 0.0015  memory: 46935  
10/29 11:41:51 - mmengine - INFO - Iter(test) [ 500/2000]    eta: 3:08:14  time: 4.6028  data_time: 0.0015  memory: 45344  
10/29 11:46:12 - mmengine - INFO - Iter(test) [ 550/2000]    eta: 2:56:53  time: 5.4807  data_time: 0.0016  memory: 48147  
10/29 11:50:13 - mmengine - INFO - Iter(test) [ 600/2000]    eta: 2:45:56  time: 5.2078  data_time: 0.0017  memory: 48152  
10/29 11:54:28 - mmengine - INFO - Iter(test) [ 650/2000]    eta: 2:36:30  time: 5.3699  data_time: 0.0015  memory: 57840  
10/29 11:59:02 - mmengine - INFO - Iter(test) [ 700/2000]    eta: 2:28:25  time: 4.8869  data_time: 0.0016  memory: 48489  
10/29 12:03:31 - mmengine - INFO - Iter(test) [ 750/2000]    eta: 2:20:42  time: 6.3485  data_time: 0.0015  memory: 48884  
10/29 12:07:24 - mmengine - INFO - Iter(test) [ 800/2000]    eta: 2:12:25  time: 4.7833  data_time: 0.0016  memory: 47126  
10/29 12:11:26 - mmengine - INFO - Iter(test) [ 850/2000]    eta: 2:04:54  time: 4.8449  data_time: 0.0016  memory: 12299  
10/29 12:15:16 - mmengine - INFO - Iter(test) [ 900/2000]    eta: 1:57:31  time: 4.5618  data_time: 0.0014  memory: 46463  
10/29 12:19:42 - mmengine - INFO - Iter(test) [ 950/2000]    eta: 1:51:10  time: 5.2423  data_time: 0.0016  memory: 48013  
10/29 12:23:41 - mmengine - INFO - Iter(test) [1000/2000]    eta: 1:44:34  time: 4.5937  data_time: 0.0015  memory: 48043  
10/29 12:28:05 - mmengine - INFO - Iter(test) [1050/2000]    eta: 1:38:35  time: 5.8822  data_time: 0.0015  memory: 58076  
10/29 12:32:18 - mmengine - INFO - Iter(test) [1100/2000]    eta: 1:32:36  time: 4.6560  data_time: 0.0018  memory: 47136  
10/29 12:36:21 - mmengine - INFO - Iter(test) [1150/2000]    eta: 1:26:38  time: 5.0637  data_time: 0.0015  memory: 45988  
10/29 12:40:23 - mmengine - INFO - Iter(test) [1200/2000]    eta: 1:20:50  time: 4.6320  data_time: 0.0015  memory: 13952  
10/29 12:44:21 - mmengine - INFO - Iter(test) [1250/2000]    eta: 1:15:08  time: 5.0040  data_time: 0.0014  memory: 47265  
10/29 12:48:06 - mmengine - INFO - Iter(test) [1300/2000]    eta: 1:09:26  time: 4.7515  data_time: 0.0015  memory: 12432  
10/29 12:52:04 - mmengine - INFO - Iter(test) [1350/2000]    eta: 1:04:01  time: 4.4175  data_time: 0.0015  memory: 45106  
10/29 12:56:24 - mmengine - INFO - Iter(test) [1400/2000]    eta: 0:58:50  time: 5.4976  data_time: 0.0015  memory: 47618  
10/29 13:00:15 - mmengine - INFO - Iter(test) [1450/2000]    eta: 0:53:32  time: 5.3488  data_time: 0.0015  memory: 46493  
10/29 13:04:04 - mmengine - INFO - Iter(test) [1500/2000]    eta: 0:48:19  time: 4.3943  data_time: 0.0014  memory: 12299  
10/29 13:08:14 - mmengine - INFO - Iter(test) [1550/2000]    eta: 0:43:17  time: 4.8281  data_time: 0.0014  memory: 47852  
10/29 13:12:05 - mmengine - INFO - Iter(test) [1600/2000]    eta: 0:38:14  time: 4.6913  data_time: 0.0020  memory: 12192  
10/29 13:16:06 - mmengine - INFO - Iter(test) [1650/2000]    eta: 0:33:18  time: 4.3850  data_time: 0.0013  memory: 48062  
10/29 13:20:18 - mmengine - INFO - Iter(test) [1700/2000]    eta: 0:28:26  time: 4.7725  data_time: 0.0015  memory: 46716  
10/29 13:24:25 - mmengine - INFO - Iter(test) [1750/2000]    eta: 0:23:36  time: 4.6050  data_time: 0.0015  memory: 47605  
10/29 13:28:18 - mmengine - INFO - Iter(test) [1800/2000]    eta: 0:18:47  time: 4.8848  data_time: 0.0017  memory: 45350  
10/29 13:32:18 - mmengine - INFO - Iter(test) [1850/2000]    eta: 0:14:02  time: 4.7668  data_time: 0.0017  memory: 11098  
10/29 13:36:05 - mmengine - INFO - Iter(test) [1900/2000]    eta: 0:09:18  time: 4.5748  data_time: 0.0014  memory: 48588  
10/29 13:40:13 - mmengine - INFO - Iter(test) [1950/2000]    eta: 0:04:38  time: 4.6585  data_time: 0.0014  memory: 45794  
10/29 13:44:09 - mmengine - INFO - Iter(test) [2000/2000]    eta: 0:00:00  time: 4.2897  data_time: 0.0013  memory: 48668  
10/29 13:44:09 - mmengine - INFO - per class results:
10/29 13:44:09 - mmengine - INFO - 
+---------------------+-------+-------+
|        Class        |  IoU  |  Acc  |
+---------------------+-------+-------+
|         wall        | 67.23 | 79.55 |
|       building      | 72.85 | 86.87 |
|         sky         | 90.48 | 94.19 |
|        floor        | 75.02 | 85.42 |
|         tree        | 68.71 | 83.94 |
|       ceiling       |  73.9 | 87.04 |
|         road        | 71.82 | 80.51 |
|         bed         | 83.05 | 93.32 |
|      windowpane     | 51.25 | 71.64 |
|        grass        |  56.2 | 69.76 |
|       cabinet       | 46.48 | 62.83 |
|       sidewalk      | 47.76 | 69.23 |
|        person       |  77.7 | 91.21 |
|        earth        |  24.9 | 38.13 |
|         door        |  25.9 | 41.77 |
|        table        | 50.46 | 67.53 |
|       mountain      | 43.11 | 60.86 |
|        plant        | 43.17 | 54.54 |
|       curtain       |  58.9 | 73.66 |
|        chair        | 49.93 | 64.06 |
|         car         | 78.86 | 88.02 |
|        water        | 40.41 | 54.05 |
|       painting      | 64.81 | 82.96 |
|         sofa        | 50.42 |  69.4 |
|        shelf        | 29.13 | 44.51 |
|        house        | 16.01 | 26.39 |
|         sea         |  46.6 | 67.73 |
|        mirror       | 53.12 | 63.46 |
|         rug         | 49.48 | 67.31 |
|        field        | 16.02 | 36.95 |
|       armchair      | 26.25 | 41.67 |
|         seat        | 48.28 | 70.81 |
|        fence        | 32.79 | 44.14 |
|         desk        | 35.82 | 56.45 |
|         rock        | 29.72 | 51.82 |
|       wardrobe      | 26.23 | 46.41 |
|         lamp        | 60.24 |  74.2 |
|       bathtub       | 67.85 | 77.22 |
|       railing       | 25.07 | 40.06 |
|       cushion       | 48.67 | 64.34 |
|         base        | 17.58 | 26.87 |
|         box         | 22.67 | 31.98 |
|        column       | 29.12 | 46.58 |
|      signboard      | 33.53 | 48.75 |
|   chest of drawers  | 24.67 | 45.82 |
|       counter       |  6.6  |  8.9  |
|         sand        | 29.19 | 42.05 |
|         sink        | 61.59 | 78.88 |
|      skyscraper     | 24.91 | 33.26 |
|      fireplace      | 57.99 | 84.23 |
|     refrigerator    | 61.02 | 77.35 |
|      grandstand     | 30.45 | 62.17 |
|         path        |  9.86 | 17.69 |
|        stairs       | 28.55 | 37.69 |
|        runway       | 58.56 | 83.62 |
|         case        | 27.56 | 43.74 |
|      pool table     | 87.81 | 95.18 |
|        pillow       | 46.76 | 60.23 |
|     screen door     | 35.79 | 47.03 |
|       stairway      | 28.97 | 36.56 |
|        river        |  3.25 | 10.53 |
|        bridge       | 32.92 | 46.85 |
|       bookcase      | 30.52 | 50.63 |
|        blind        | 32.34 |  39.4 |
|     coffee table    | 55.03 | 79.97 |
|        toilet       | 76.71 | 85.43 |
|        flower       | 42.93 | 58.74 |
|         book        | 45.27 |  69.7 |
|         hill        |  3.59 |  4.82 |
|        bench        | 35.93 | 45.14 |
|      countertop     | 49.11 | 63.28 |
|        stove        | 63.48 | 73.07 |
|         palm        | 46.47 | 62.87 |
|    kitchen island   | 20.17 | 48.56 |
|       computer      | 56.25 | 64.24 |
|     swivel chair    |  30.7 | 47.58 |
|         boat        | 37.75 | 48.54 |
|         bar         | 16.05 | 21.75 |
|    arcade machine   | 17.02 | 17.75 |
|        hovel        | 15.79 | 19.46 |
|         bus         | 85.05 |  96.3 |
|        towel        | 53.82 | 71.69 |
|        light        | 53.66 | 62.84 |
|        truck        |  8.33 | 14.31 |
|        tower        |  9.92 |  17.4 |
|      chandelier     | 64.79 | 77.58 |
|        awning       | 19.35 | 28.84 |
|     streetlight     |  24.6 | 34.57 |
|        booth        | 25.63 |  34.8 |
| television receiver | 58.59 | 73.17 |
|       airplane      | 58.63 |  69.3 |
|      dirt track     |  0.0  |  0.0  |
|       apparel       | 28.36 | 39.69 |
|         pole        |  19.8 | 28.25 |
|         land        |  0.0  |  0.01 |
|      bannister      | 10.67 | 13.64 |
|      escalator      | 15.58 | 19.64 |
|       ottoman       | 34.61 | 48.86 |
|        bottle       | 36.13 | 60.53 |
|        buffet       | 28.36 |  39.4 |
|        poster       | 10.77 |  16.2 |
|        stage        | 11.51 | 20.38 |
|         van         | 33.35 | 56.07 |
|         ship        | 32.57 | 54.44 |
|       fountain      | 12.27 | 13.56 |
|    conveyer belt    | 46.02 | 69.84 |
|        canopy       |  9.43 | 16.45 |
|        washer       | 67.05 | 70.17 |
|      plaything      | 23.05 | 36.53 |
|    swimming pool    | 30.04 | 57.56 |
|        stool        | 32.84 |  47.9 |
|        barrel       | 21.92 |  65.1 |
|        basket       | 29.34 | 44.99 |
|      waterfall      | 40.55 | 49.87 |
|         tent        | 83.83 | 98.69 |
|         bag         | 12.91 | 15.69 |
|       minibike      | 70.33 | 84.15 |
|        cradle       | 74.19 | 82.91 |
|         oven        | 18.59 |  56.9 |
|         ball        | 43.72 | 47.26 |
|         food        | 40.83 | 48.82 |
|         step        | 10.94 | 13.79 |
|         tank        | 39.17 | 50.29 |
|      trade name     | 23.05 | 29.81 |
|      microwave      | 38.86 | 46.81 |
|         pot         | 37.66 | 46.36 |
|        animal       | 53.21 | 55.31 |
|       bicycle       | 54.15 | 71.18 |
|         lake        | 51.98 | 57.08 |
|      dishwasher     | 50.19 | 67.12 |
|        screen       | 38.95 | 61.77 |
|       blanket       |  8.11 | 10.15 |
|      sculpture      | 53.68 | 69.61 |
|         hood        | 33.46 | 44.04 |
|        sconce       | 37.61 | 50.85 |
|         vase        | 41.98 | 55.85 |
|    traffic light    | 30.89 | 48.36 |
|         tray        |  6.98 |  17.9 |
|        ashcan       | 26.52 | 36.59 |
|         fan         | 60.79 |  73.4 |
|         pier        | 36.16 | 78.44 |
|      crt screen     |  3.2  | 10.75 |
|        plate        | 52.62 | 66.38 |
|       monitor       |  3.75 |  6.56 |
|    bulletin board   |  49.4 | 69.58 |
|        shower       |  1.71 |  6.04 |
|       radiator      | 45.74 | 62.63 |
|        glass        | 14.98 | 15.76 |
|        clock        | 34.71 | 50.17 |
|         flag        | 43.64 | 47.08 |
+---------------------+-------+-------+
10/29 13:44:09 - mmengine - INFO - Iter(test) [2000/2000]    aAcc: 75.2000  mIoU: 38.8300  mAcc: 51.9700  data_time: 0.0141  time: 5.5509
Runtime: 24389

============================= JOB FEEDBACK =============================

NodeName=uc2n916
Job ID: 24533825
Array Job ID: 24533825_2
Cluster: uc2
User/Group: ma_dschader/ma_ma
State: COMPLETED (exit code 0)
Nodes: 1
Cores per node: 8
CPU Utilized: 06:19:39
CPU Efficiency: 11.66% of 2-06:15:36 core-walltime
Job Wall-clock time: 06:46:57
Memory Utilized: 7.75 GB
Memory Efficiency: 38.77% of 20.00 GB
