Started at Wed Nov  6 16:55:44 CET 2024
/pfs/work7/workspace/scratch/ma_dschader-team_project_fss2024/miniconda3/envs/py310/lib/python3.10/site-packages/torch/cuda/__init__.py:155: UserWarning: 
NVIDIA H100 PCIe with CUDA capability sm_90 is not compatible with the current PyTorch installation.
The current PyTorch install supports CUDA capabilities sm_37 sm_50 sm_60 sm_61 sm_70 sm_75 sm_80 sm_86 compute_37.
If you want to use the NVIDIA H100 PCIe GPU with PyTorch, please check the instructions at https://pytorch.org/get-started/locally/

  warnings.warn(incompatible_device_warn.format(device_name, capability, " ".join(arch_list), device_name))
11/06 16:57:47 - mmengine - INFO - 
------------------------------------------------------------
System environment:
    sys.platform: linux
    Python: 3.10.13 | packaged by conda-forge | (main, Dec 23 2023, 15:36:39) [GCC 12.3.0]
    CUDA available: True
    MUSA available: False
    numpy_random_seed: 1574802927
    GPU 0: NVIDIA H100 PCIe
    CUDA_HOME: None
    GCC: gcc (GCC) 8.5.0 20210514 (Red Hat 8.5.0-18)
    PyTorch: 1.13.1
    PyTorch compiling details: PyTorch built with:
  - GCC 9.3
  - C++ Version: 201402
  - Intel(R) oneAPI Math Kernel Library Version 2023.1-Product Build 20230303 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v2.6.0 (Git Hash 52b5f107dd9cf10910aaa19cb47f3abf9b349815)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - LAPACK is enabled (usually provided by MKL)
  - NNPACK is enabled
  - CPU capability usage: AVX2
  - CUDA Runtime 11.7
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_61,code=sm_61;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86;-gencode;arch=compute_37,code=compute_37
  - CuDNN 8.5
  - Magma 2.6.1
  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.7, CUDNN_VERSION=8.5.0, CXX_COMPILER=/opt/rh/devtoolset-9/root/usr/bin/c++, CXX_FLAGS= -fabi-version=11 -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -DEDGE_PROFILER_USE_KINETO -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Werror=non-virtual-dtor -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wunused-local-typedefs -Wno-unused-parameter -Wno-unused-function -Wno-unused-result -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Werror=cast-function-type -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.13.1, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, USE_ROCM=OFF, 

    TorchVision: 0.14.1
    OpenCV: 3.4.18
    MMEngine: 0.10.4

Runtime environment:
    cudnn_benchmark: True
    mp_cfg: {'mp_start_method': 'fork', 'opencv_num_threads': 0}
    dist_cfg: {'backend': 'nccl'}
    seed: 1574802927
    Distributed launcher: none
    Distributed training: False
    GPU number: 1
------------------------------------------------------------

11/06 16:57:48 - mmengine - INFO - Config:
checkpoint_config = dict(by_epoch=False, interval=1000, max_keep_ckpts=1)
crop_size = (
    896,
    896,
)
data = dict(
    samples_per_gpu=1,
    test=dict(pipeline=[
        dict(type='LoadImageFromFile'),
        dict(
            flip=False,
            img_scale=(
                3584,
                896,
            ),
            transforms=[
                dict(keep_ratio=True, type='Resize'),
                dict(size_divisor=32, type='ResizeToMultiple'),
                dict(type='RandomFlip'),
                dict(
                    mean=[
                        123.675,
                        116.28,
                        103.53,
                    ],
                    std=[
                        58.395,
                        57.12,
                        57.375,
                    ],
                    to_rgb=True,
                    type='Normalize'),
                dict(keys=[
                    'img',
                ], type='ImageToTensor'),
                dict(keys=[
                    'img',
                ], type='Collect'),
            ],
            type='MultiScaleFlipAug'),
    ]),
    train=dict(pipeline=[
        dict(type='LoadImageFromFile'),
        dict(reduce_zero_label=True, type='LoadAnnotations'),
        dict(img_scale=(
            3584,
            896,
        ), ratio_range=(
            0.5,
            2.0,
        ), type='Resize'),
        dict(cat_max_ratio=0.75, crop_size=(
            896,
            896,
        ), type='RandomCrop'),
        dict(prob=0.5, type='RandomFlip'),
        dict(type='PhotoMetricDistortion'),
        dict(
            mean=[
                123.675,
                116.28,
                103.53,
            ],
            std=[
                58.395,
                57.12,
                57.375,
            ],
            to_rgb=True,
            type='Normalize'),
        dict(pad_val=0, seg_pad_val=255, size=(
            896,
            896,
        ), type='Pad'),
        dict(type='DefaultFormatBundle'),
        dict(keys=[
            'img',
            'gt_semantic_seg',
        ], type='Collect'),
    ]),
    val=dict(pipeline=[
        dict(type='LoadImageFromFile'),
        dict(
            flip=False,
            img_scale=(
                3584,
                896,
            ),
            transforms=[
                dict(keep_ratio=True, type='Resize'),
                dict(size_divisor=32, type='ResizeToMultiple'),
                dict(type='RandomFlip'),
                dict(
                    mean=[
                        123.675,
                        116.28,
                        103.53,
                    ],
                    std=[
                        58.395,
                        57.12,
                        57.375,
                    ],
                    to_rgb=True,
                    type='Normalize'),
                dict(keys=[
                    'img',
                ], type='ImageToTensor'),
                dict(keys=[
                    'img',
                ], type='Collect'),
            ],
            type='MultiScaleFlipAug'),
    ]))
data_preprocessor = dict(
    bgr_to_rgb=True,
    corruption=None,
    enable_normalization=False,
    mean=[
        123.675,
        116.28,
        103.53,
    ],
    pad_val=0,
    seg_pad_val=255,
    std=[
        58.395,
        57.12,
        57.375,
    ],
    type='SegDataPreProcessor')
data_root = 'data/ade/ADEChallengeData2016'
dataset_type = 'ADE20KDataset'
default_hooks = dict(
    checkpoint=dict(by_epoch=False, interval=16000, type='CheckpointHook'),
    logger=dict(interval=50, log_metric_by_epoch=False, type='LoggerHook'),
    param_scheduler=dict(type='ParamSchedulerHook'),
    sampler_seed=dict(type='DistSamplerSeedHook'),
    timer=dict(type='IterTimerHook'),
    visualization=dict(draw=True, type='SegVisualizationHook'))
default_scope = 'mmseg'
env_cfg = dict(
    cudnn_benchmark=True,
    dist_cfg=dict(backend='nccl'),
    mp_cfg=dict(mp_start_method='fork', opencv_num_threads=0))
evaluation = dict(interval=16000, metric='mIoU', save_best='mIoU')
img_norm_cfg = dict(
    mean=[
        123.675,
        116.28,
        103.53,
    ],
    std=[
        58.395,
        57.12,
        57.375,
    ],
    to_rgb=True)
img_ratios = [
    0.5,
    0.75,
    1.0,
    1.25,
    1.5,
    1.75,
]
launcher = 'none'
load_from = '../checkpoint_files/upernet/upernet_internimage_h_896_160k_ade20k.pth'
log_level = 'INFO'
log_processor = dict(by_epoch=False)
lr_config = dict(
    _delete_=True,
    by_epoch=False,
    min_lr=0.0,
    policy='poly',
    power=1.0,
    warmup='linear',
    warmup_iters=1500,
    warmup_ratio=1e-06)
model = dict(
    attack_cfg=dict(
        alpha=0.01, epsilon=8, iterations=20, name='pgd', norm='linf'),
    attack_loss=dict(
        loss_weight=1.0,
        reduction='none',
        type='CrossEntropyLoss',
        use_sigmoid=False),
    auxiliary_head=dict(
        align_corners=False,
        channels=256,
        concat_input=False,
        dropout_ratio=0.1,
        in_channels=1280,
        in_index=2,
        loss_decode=dict(
            loss_weight=0.4, type='CrossEntropyLoss', use_sigmoid=False),
        norm_cfg=dict(requires_grad=True, type='SyncBN'),
        num_classes=150,
        num_convs=1,
        type='FCNHead'),
    backbone=dict(
        center_feature_scale=True,
        channels=320,
        core_op='DCNv3',
        depths=[
            6,
            6,
            32,
            6,
        ],
        drop_path_rate=0.5,
        dw_kernel_size=5,
        groups=[
            10,
            20,
            40,
            80,
        ],
        init_cfg=dict(
            checkpoint=
            'https://huggingface.co/OpenGVLab/InternImage/resolve/main/internimage_h_jointto22k_384.pth',
            type='Pretrained'),
        layer_scale=None,
        level2_post_norm=True,
        level2_post_norm_block_ids=[
            5,
            11,
            17,
            23,
            29,
        ],
        mlp_ratio=4.0,
        norm_layer='LN',
        offset_scale=1.0,
        out_indices=(
            0,
            1,
            2,
            3,
        ),
        post_norm=False,
        res_post_norm=True,
        type='InternImage',
        with_cp=False),
    data_preprocessor=dict(
        bgr_to_rgb=True,
        corruption=None,
        enable_normalization=False,
        mean=[
            123.675,
            116.28,
            103.53,
        ],
        pad_val=0,
        seg_pad_val=255,
        std=[
            58.395,
            57.12,
            57.375,
        ],
        type='SegDataPreProcessor'),
    decode_head=dict(
        align_corners=False,
        channels=512,
        dropout_ratio=0.1,
        in_channels=[
            320,
            640,
            1280,
            2560,
        ],
        in_index=[
            0,
            1,
            2,
            3,
        ],
        loss_decode=dict(
            loss_weight=1.0,
            reduction='none',
            type='CrossEntropyLoss',
            use_sigmoid=False),
        norm_cfg=dict(requires_grad=True, type='SyncBN'),
        num_classes=150,
        pool_scales=(
            1,
            2,
            3,
            6,
        ),
        type='UPerHead'),
    enable_normalization=False,
    normalize_mean_std=dict(
        mean=[
            123.675,
            116.28,
            103.53,
        ], std=[
            58.395,
            57.12,
            57.375,
        ]),
    perform_attack=True,
    pretrained='open-mmlab://resnet50_v1c',
    test_cfg=dict(mode='whole'),
    train_cfg=dict(),
    type='EncoderDecoder')
norm_cfg = dict(requires_grad=True, type='SyncBN')
optim_wrapper = dict(
    clip_grad=None,
    optimizer=dict(lr=0.01, momentum=0.9, type='SGD', weight_decay=0.0005),
    type='OptimWrapper')
optimizer = dict(
    betas=(
        0.9,
        0.999,
    ),
    constructor='CustomLayerDecayOptimizerConstructor',
    lr=2e-05,
    paramwise_cfg=dict(
        depths=[
            6,
            6,
            32,
            6,
        ],
        layer_decay_rate=0.95,
        num_layers=50,
        offset_lr_scale=1.0),
    type='AdamW',
    weight_decay=0.05)
optimizer_config = dict(
    _delete_=True, grad_clip=dict(max_norm=0.1, norm_type=2))
param_scheduler = [
    dict(
        begin=0,
        by_epoch=False,
        end=160000,
        eta_min=0.0001,
        power=0.9,
        type='PolyLR'),
]
pretrained = 'https://huggingface.co/OpenGVLab/InternImage/resolve/main/internimage_h_jointto22k_384.pth'
resume = False
runner = dict(type='IterBasedRunner')
test_cfg = dict(type='TestLoop')
test_dataloader = dict(
    batch_size=1,
    dataset=dict(
        data_prefix=dict(
            img_path='images/validation',
            seg_map_path='annotations/validation'),
        data_root='data/ade/ADEChallengeData2016',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(keep_ratio=True, scale=(
                2048,
                512,
            ), type='Resize'),
            dict(reduce_zero_label=True, type='LoadAnnotations'),
            dict(type='PackSegInputs'),
        ],
        type='ADE20KDataset'),
    num_workers=4,
    persistent_workers=True,
    sampler=dict(shuffle=False, type='DefaultSampler'))
test_evaluator = dict(
    iou_metrics=[
        'mIoU',
    ], type='IoUMetric')
test_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(
        flip=False,
        img_scale=(
            3584,
            896,
        ),
        transforms=[
            dict(keep_ratio=True, type='Resize'),
            dict(size_divisor=32, type='ResizeToMultiple'),
            dict(type='RandomFlip'),
            dict(
                mean=[
                    123.675,
                    116.28,
                    103.53,
                ],
                std=[
                    58.395,
                    57.12,
                    57.375,
                ],
                to_rgb=True,
                type='Normalize'),
            dict(keys=[
                'img',
            ], type='ImageToTensor'),
            dict(keys=[
                'img',
            ], type='Collect'),
        ],
        type='MultiScaleFlipAug'),
]
train_cfg = dict(
    max_iters=160000, type='IterBasedTrainLoop', val_interval=16000)
train_dataloader = dict(
    batch_size=4,
    dataset=dict(
        data_prefix=dict(
            img_path='images/training', seg_map_path='annotations/training'),
        data_root='data/ade/ADEChallengeData2016',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(reduce_zero_label=True, type='LoadAnnotations'),
            dict(
                keep_ratio=True,
                ratio_range=(
                    0.5,
                    2.0,
                ),
                scale=(
                    2048,
                    512,
                ),
                type='RandomResize'),
            dict(
                cat_max_ratio=0.75, crop_size=(
                    512,
                    512,
                ), type='RandomCrop'),
            dict(prob=0.5, type='RandomFlip'),
            dict(type='PhotoMetricDistortion'),
            dict(type='PackSegInputs'),
        ],
        type='ADE20KDataset'),
    num_workers=4,
    persistent_workers=True,
    sampler=dict(shuffle=True, type='InfiniteSampler'))
train_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(reduce_zero_label=True, type='LoadAnnotations'),
    dict(img_scale=(
        3584,
        896,
    ), ratio_range=(
        0.5,
        2.0,
    ), type='Resize'),
    dict(cat_max_ratio=0.75, crop_size=(
        896,
        896,
    ), type='RandomCrop'),
    dict(prob=0.5, type='RandomFlip'),
    dict(type='PhotoMetricDistortion'),
    dict(
        mean=[
            123.675,
            116.28,
            103.53,
        ],
        std=[
            58.395,
            57.12,
            57.375,
        ],
        to_rgb=True,
        type='Normalize'),
    dict(pad_val=0, seg_pad_val=255, size=(
        896,
        896,
    ), type='Pad'),
    dict(type='DefaultFormatBundle'),
    dict(keys=[
        'img',
        'gt_semantic_seg',
    ], type='Collect'),
]
tta_model = dict(type='SegTTAModel')
tta_pipeline = [
    dict(backend_args=None, type='LoadImageFromFile'),
    dict(
        transforms=[
            [
                dict(keep_ratio=True, scale_factor=0.5, type='Resize'),
                dict(keep_ratio=True, scale_factor=0.75, type='Resize'),
                dict(keep_ratio=True, scale_factor=1.0, type='Resize'),
                dict(keep_ratio=True, scale_factor=1.25, type='Resize'),
                dict(keep_ratio=True, scale_factor=1.5, type='Resize'),
                dict(keep_ratio=True, scale_factor=1.75, type='Resize'),
            ],
            [
                dict(direction='horizontal', prob=0.0, type='RandomFlip'),
                dict(direction='horizontal', prob=1.0, type='RandomFlip'),
            ],
            [
                dict(type='LoadAnnotations'),
            ],
            [
                dict(type='PackSegInputs'),
            ],
        ],
        type='TestTimeAug'),
]
val_cfg = dict(type='ValLoop')
val_dataloader = dict(
    batch_size=1,
    dataset=dict(
        data_prefix=dict(
            img_path='images/validation',
            seg_map_path='annotations/validation'),
        data_root='data/ade/ADEChallengeData2016',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(keep_ratio=True, scale=(
                2048,
                512,
            ), type='Resize'),
            dict(reduce_zero_label=True, type='LoadAnnotations'),
            dict(type='PackSegInputs'),
        ],
        type='ADE20KDataset'),
    num_workers=4,
    persistent_workers=True,
    sampler=dict(shuffle=False, type='DefaultSampler'))
val_evaluator = dict(
    iou_metrics=[
        'mIoU',
    ], type='IoUMetric')
vis_backends = [
    dict(type='LocalVisBackend'),
]
visualizer = dict(
    name='visualizer',
    save_dir=
    '../aa_workdir/ade/upernet/upernet_internimage_h_896_160k_ade20k/attack_pgd/norm_linf/iterations_20/epsilon_8/alpha_0.01/show_dir',
    type='SegLocalVisualizer',
    vis_backends=[
        dict(type='LocalVisBackend'),
    ])
work_dir = '../aa_workdir/ade/upernet/upernet_internimage_h_896_160k_ade20k/attack_pgd/norm_linf/iterations_20/epsilon_8/alpha_0.01'

/pfs/work7/workspace/scratch/ma_dschader-team_project_fss2024/benchmarking_robustness/semantic_segmentation/mmsegmentation/ops_dcnv3/modules/dcnv3.py:20: UserWarning: Now, we support DCNv4 in InternImage.
  warnings.warn('Now, we support DCNv4 in InternImage.')
2024-11-06 16:58:49,690 - mmseg - INFO - using core type: DCNv3
2024-11-06 16:58:49,690 - mmseg - INFO - using activation layer: GELU
2024-11-06 16:58:49,690 - mmseg - INFO - using main norm layer: LN
2024-11-06 16:58:49,690 - mmseg - INFO - using dpr: linear, 0.5
2024-11-06 16:58:49,690 - mmseg - INFO - level2_post_norm: True
2024-11-06 16:58:49,690 - mmseg - INFO - level2_post_norm_block_ids: [5, 11, 17, 23, 29]
2024-11-06 16:58:49,690 - mmseg - INFO - res_post_norm: True
2024-11-06 16:58:49,690 - mmseg - INFO - use_dcn_v4_op: False
Number of parameters:  1120338396
11/06 17:05:32 - mmengine - INFO - Distributed training is not used, all SyncBatchNorm (SyncBN) layers in the model will be automatically reverted to BatchNormXd layers if they are used.
11/06 17:05:32 - mmengine - INFO - Hooks will be executed in the following order:
before_run:
(VERY_HIGH   ) RuntimeInfoHook                    
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
before_train:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_train_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(NORMAL      ) DistSamplerSeedHook                
 -------------------- 
before_train_iter:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_train_iter:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(NORMAL      ) SegVisualizationHook               
(BELOW_NORMAL) LoggerHook                         
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
after_train_epoch:
(NORMAL      ) IterTimerHook                      
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_val:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
before_val_epoch:
(NORMAL      ) IterTimerHook                      
 -------------------- 
before_val_iter:
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_val_iter:
(NORMAL      ) IterTimerHook                      
(NORMAL      ) SegVisualizationHook               
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_val_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
after_val:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
after_train:
(VERY_HIGH   ) RuntimeInfoHook                    
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_test:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
before_test_epoch:
(NORMAL      ) IterTimerHook                      
 -------------------- 
before_test_iter:
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_test_iter:
(NORMAL      ) IterTimerHook                      
(NORMAL      ) SegVisualizationHook               
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_test_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_test:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
after_run:
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
11/06 17:05:33 - mmengine - WARNING - The prefix is not set in metric class IoUMetric.
Loads checkpoint by local backend from path: ../checkpoint_files/upernet/upernet_internimage_h_896_160k_ade20k.pth
11/06 17:05:36 - mmengine - INFO - Load checkpoint from ../checkpoint_files/upernet/upernet_internimage_h_896_160k_ade20k.pth
11/06 17:32:52 - mmengine - INFO - Iter(test) [  50/2000]    eta: 17:42:32  time: 24.9937  data_time: 0.0030  memory: 62848  
11/06 17:52:22 - mmengine - INFO - Iter(test) [ 100/2000]    eta: 14:48:09  time: 24.5190  data_time: 0.0029  memory: 62171  
11/06 18:11:30 - mmengine - INFO - Iter(test) [ 150/2000]    eta: 13:32:33  time: 23.4946  data_time: 0.0030  memory: 54826  
11/06 18:31:09 - mmengine - INFO - Iter(test) [ 200/2000]    eta: 12:49:49  time: 23.0533  data_time: 0.0019  memory: 70130  
11/06 18:49:50 - mmengine - INFO - Iter(test) [ 250/2000]    eta: 12:09:33  time: 22.3220  data_time: 0.0018  memory: 75896  
11/06 19:08:29 - mmengine - INFO - Iter(test) [ 300/2000]    eta: 11:36:10  time: 23.3000  data_time: 0.0019  memory: 59264  
11/06 19:27:33 - mmengine - INFO - Iter(test) [ 350/2000]    eta: 11:09:08  time: 21.6393  data_time: 0.0024  memory: 61425  
11/06 19:46:28 - mmengine - INFO - Iter(test) [ 400/2000]    eta: 10:43:25  time: 23.1882  data_time: 0.0018  memory: 59982  
11/06 20:03:42 - mmengine - INFO - Iter(test) [ 450/2000]    eta: 10:13:22  time: 21.0228  data_time: 0.0016  memory: 50543  
11/06 20:22:26 - mmengine - INFO - Iter(test) [ 500/2000]    eta: 9:50:24  time: 21.7913  data_time: 0.0017  memory: 51035  
11/06 20:42:15 - mmengine - INFO - Iter(test) [ 550/2000]    eta: 9:31:07  time: 23.8471  data_time: 0.0018  memory: 57641  
11/06 21:00:49 - mmengine - INFO - Iter(test) [ 600/2000]    eta: 9:08:47  time: 23.3909  data_time: 0.0033  memory: 57706  
11/06 21:19:30 - mmengine - INFO - Iter(test) [ 650/2000]    eta: 8:47:16  time: 22.8706  data_time: 0.0016  memory: 63304  
11/06 21:39:17 - mmengine - INFO - Iter(test) [ 700/2000]    eta: 8:28:13  time: 23.4000  data_time: 0.0039  memory: 60865  
11/06 21:58:32 - mmengine - INFO - Iter(test) [ 750/2000]    eta: 8:08:11  time: 22.8138  data_time: 0.0016  memory: 64193  
11/06 22:16:15 - mmengine - INFO - Iter(test) [ 800/2000]    eta: 7:45:55  time: 22.5427  data_time: 0.0028  memory: 51611  
11/06 22:35:22 - mmengine - INFO - Iter(test) [ 850/2000]    eta: 7:25:50  time: 23.0509  data_time: 0.0018  memory: 50111  
11/06 22:52:49 - mmengine - INFO - Iter(test) [ 900/2000]    eta: 7:04:21  time: 20.3190  data_time: 0.0016  memory: 53671  
11/06 23:12:03 - mmengine - INFO - Iter(test) [ 950/2000]    eta: 6:44:58  time: 22.3856  data_time: 0.0018  memory: 56829  
11/06 23:30:02 - mmengine - INFO - Iter(test) [1000/2000]    eta: 6:24:24  time: 21.4198  data_time: 0.0017  memory: 56985  
11/06 23:49:18 - mmengine - INFO - Iter(test) [1050/2000]    eta: 6:05:13  time: 23.7900  data_time: 0.0016  memory: 64390  
11/07 00:08:07 - mmengine - INFO - Iter(test) [1100/2000]    eta: 5:45:39  time: 21.9407  data_time: 0.0016  memory: 55464  
11/07 00:26:30 - mmengine - INFO - Iter(test) [1150/2000]    eta: 5:25:50  time: 22.6016  data_time: 0.0125  memory: 54165  
11/07 00:45:22 - mmengine - INFO - Iter(test) [1200/2000]    eta: 5:06:28  time: 21.7698  data_time: 0.0077  memory: 57535  
11/07 01:03:22 - mmengine - INFO - Iter(test) [1250/2000]    eta: 4:46:37  time: 21.8782  data_time: 0.0017  memory: 58449  
11/07 01:20:52 - mmengine - INFO - Iter(test) [1300/2000]    eta: 4:26:39  time: 22.4239  data_time: 0.0166  memory: 50716  
11/07 01:39:12 - mmengine - INFO - Iter(test) [1350/2000]    eta: 4:07:16  time: 20.7488  data_time: 0.0016  memory: 50673  
11/07 01:57:47 - mmengine - INFO - Iter(test) [1400/2000]    eta: 3:48:03  time: 23.5266  data_time: 0.0015  memory: 58209  
11/07 02:15:33 - mmengine - INFO - Iter(test) [1450/2000]    eta: 3:28:35  time: 23.4835  data_time: 0.0041  memory: 56832  
11/07 02:33:34 - mmengine - INFO - Iter(test) [1500/2000]    eta: 3:09:18  time: 20.7308  data_time: 0.0048  memory: 50127  
11/07 02:52:54 - mmengine - INFO - Iter(test) [1550/2000]    eta: 2:50:29  time: 22.7805  data_time: 0.0032  memory: 55930  
11/07 03:10:56 - mmengine - INFO - Iter(test) [1600/2000]    eta: 2:31:19  time: 22.0470  data_time: 0.0169  memory: 49783  
11/07 03:29:18 - mmengine - INFO - Iter(test) [1650/2000]    eta: 2:12:17  time: 20.6990  data_time: 0.0015  memory: 70308  
11/07 03:48:17 - mmengine - INFO - Iter(test) [1700/2000]    eta: 1:53:24  time: 22.5111  data_time: 0.0017  memory: 55843  
11/07 04:07:22 - mmengine - INFO - Iter(test) [1750/2000]    eta: 1:34:31  time: 22.1425  data_time: 0.0016  memory: 56695  
11/07 04:25:19 - mmengine - INFO - Iter(test) [1800/2000]    eta: 1:15:30  time: 22.8131  data_time: 0.0017  memory: 51245  
11/07 04:44:08 - mmengine - INFO - Iter(test) [1850/2000]    eta: 0:56:37  time: 22.5449  data_time: 0.0017  memory: 45728  
11/07 05:01:44 - mmengine - INFO - Iter(test) [1900/2000]    eta: 0:37:41  time: 21.7566  data_time: 0.0015  memory: 60195  
11/07 05:20:37 - mmengine - INFO - Iter(test) [1950/2000]    eta: 0:18:50  time: 21.7178  data_time: 0.0015  memory: 73630  
11/07 05:38:35 - mmengine - INFO - Iter(test) [2000/2000]    eta: 0:00:00  time: 20.3754  data_time: 0.0015  memory: 60825  
11/07 05:38:35 - mmengine - INFO - per class results:
11/07 05:38:35 - mmengine - INFO - 
+---------------------+-------+-------+
|        Class        |  IoU  |  Acc  |
+---------------------+-------+-------+
|         wall        |  6.99 | 11.96 |
|       building      |  4.14 |  6.07 |
|         sky         | 10.83 | 11.24 |
|        floor        |  6.19 |  8.92 |
|         tree        |  3.62 |  4.32 |
|       ceiling       |  9.82 | 15.26 |
|         road        |  0.96 |  1.01 |
|         bed         |  3.63 |  5.39 |
|      windowpane     |  1.42 |  3.81 |
|        grass        |  1.29 |  1.82 |
|       cabinet       |  1.88 |  3.85 |
|       sidewalk      |  0.12 |  0.17 |
|        person       | 19.31 | 24.41 |
|        earth        |  0.07 |  0.16 |
|         door        |  0.99 |  2.41 |
|        table        |  1.52 |  3.63 |
|       mountain      |  3.57 |  5.32 |
|        plant        |  0.59 |  1.03 |
|       curtain       |  1.22 |  4.14 |
|        chair        |  0.64 |  1.62 |
|         car         | 23.51 | 30.67 |
|        water        |  1.28 |  2.36 |
|       painting      |  1.61 |  3.41 |
|         sofa        |  2.49 | 10.79 |
|        shelf        |  0.55 |  0.9  |
|        house        |  0.6  |  1.72 |
|         sea         |  0.25 |  0.47 |
|        mirror       |  0.89 |  7.96 |
|         rug         |  1.69 |  2.35 |
|        field        |  0.0  |  0.0  |
|       armchair      |  1.3  |  5.02 |
|         seat        |  0.62 |  2.62 |
|        fence        |  1.85 |  6.58 |
|         desk        |  1.49 |  4.59 |
|         rock        |  0.04 |  0.08 |
|       wardrobe      |  0.77 |  3.5  |
|         lamp        |  7.07 | 15.84 |
|       bathtub       |  1.33 |  2.27 |
|       railing       |  2.37 |  8.4  |
|       cushion       |  1.98 |  4.58 |
|         base        |  0.06 |  0.86 |
|         box         |  0.19 |  1.03 |
|        column       |  0.0  |  0.0  |
|      signboard      |  1.37 |  2.88 |
|   chest of drawers  |  0.32 |  1.37 |
|       counter       |  0.0  |  0.0  |
|         sand        |  0.78 |  1.69 |
|         sink        |  4.57 | 10.22 |
|      skyscraper     |  2.11 |  5.14 |
|      fireplace      |  2.21 |  5.67 |
|     refrigerator    |  1.05 |  1.99 |
|      grandstand     |  0.0  |  0.0  |
|         path        |  0.0  |  0.0  |
|        stairs       |  0.41 |  3.14 |
|        runway       |  0.0  |  0.0  |
|         case        |  0.0  |  0.0  |
|      pool table     | 13.41 | 14.68 |
|        pillow       |  0.81 |  1.28 |
|     screen door     |  3.45 | 15.66 |
|       stairway      |  1.79 |  6.03 |
|        river        |  0.0  |  0.0  |
|        bridge       |  0.45 |  2.61 |
|       bookcase      |  0.0  |  0.0  |
|        blind        |  0.0  |  0.0  |
|     coffee table    |  0.5  |  0.73 |
|        toilet       |  2.61 |  3.31 |
|        flower       |  1.17 |  4.09 |
|         book        |  0.89 |  2.11 |
|         hill        |  0.0  |  0.0  |
|        bench        |  0.06 |  0.2  |
|      countertop     |  1.23 |  3.54 |
|        stove        | 10.79 | 13.23 |
|         palm        |  4.95 | 12.04 |
|    kitchen island   |  3.23 |  7.83 |
|       computer      |  2.57 |  3.65 |
|     swivel chair    |  1.92 |  3.97 |
|         boat        |  0.81 |  3.91 |
|         bar         |  0.0  |  0.0  |
|    arcade machine   |  0.0  |  0.0  |
|        hovel        |  0.0  |  0.0  |
|         bus         |  0.0  |  0.0  |
|        towel        |  1.29 |  7.47 |
|        light        |  2.39 |  3.45 |
|        truck        |  0.0  |  0.0  |
|        tower        |  0.39 |  1.39 |
|      chandelier     |  2.22 |  5.34 |
|        awning       |  0.13 |  1.17 |
|     streetlight     |  1.5  |  2.17 |
|        booth        |  0.0  |  0.0  |
| television receiver |  0.79 |  3.97 |
|       airplane      |  3.38 | 27.75 |
|      dirt track     |  0.0  |  0.0  |
|       apparel       |  0.0  |  0.0  |
|         pole        |  0.17 |  0.22 |
|         land        |  0.0  |  0.0  |
|      bannister      |  0.03 |  0.18 |
|      escalator      |  0.0  |  0.0  |
|       ottoman       |  0.0  |  0.0  |
|        bottle       |  1.61 |  4.24 |
|        buffet       |  0.0  |  0.0  |
|        poster       |  0.36 |  7.73 |
|        stage        |  0.0  |  0.0  |
|         van         |  0.0  |  0.0  |
|         ship        |  0.0  |  0.0  |
|       fountain      |  0.0  |  0.0  |
|    conveyer belt    |  0.0  |  0.0  |
|        canopy       |  0.0  |  0.0  |
|        washer       |  1.86 |  2.96 |
|      plaything      |  0.47 |  5.45 |
|    swimming pool    |  0.0  |  0.0  |
|        stool        |  0.75 |  1.98 |
|        barrel       |  0.0  |  0.0  |
|        basket       |  0.11 |  1.76 |
|      waterfall      |  0.0  |  0.0  |
|         tent        |  0.0  |  0.0  |
|         bag         |  0.0  |  0.01 |
|       minibike      |  0.35 |  0.67 |
|        cradle       |  2.22 | 24.63 |
|         oven        |  0.0  |  0.0  |
|         ball        |  0.46 |  0.94 |
|         food        |  0.0  |  0.0  |
|         step        |  0.0  |  0.0  |
|         tank        |  0.0  |  0.0  |
|      trade name     |  0.0  |  0.0  |
|      microwave      |  2.44 |  5.31 |
|         pot         |  0.79 |  1.5  |
|        animal       |  0.49 |  0.92 |
|       bicycle       |  2.36 | 10.42 |
|         lake        |  0.0  |  0.0  |
|      dishwasher     |  4.65 |  7.55 |
|        screen       |  0.0  |  0.0  |
|       blanket       |  0.0  |  0.0  |
|      sculpture      |  1.15 |  9.06 |
|         hood        |  7.6  | 11.26 |
|        sconce       |  0.09 |  0.24 |
|         vase        |  0.28 |  4.85 |
|    traffic light    |  0.07 |  0.08 |
|         tray        |  0.14 |  1.71 |
|        ashcan       |  0.0  |  0.01 |
|         fan         |  1.51 | 11.85 |
|         pier        |  0.0  |  0.0  |
|      crt screen     |  0.04 |  0.44 |
|        plate        |  5.63 |  8.2  |
|       monitor       |  0.5  |  1.1  |
|    bulletin board   |  0.0  |  0.0  |
|        shower       |  0.01 |  0.88 |
|       radiator      |  0.0  |  0.0  |
|        glass        |  0.31 |  2.44 |
|        clock        |  0.81 |  5.94 |
|         flag        |  0.22 |  0.55 |
+---------------------+-------+-------+
11/07 05:38:35 - mmengine - INFO - Iter(test) [2000/2000]    aAcc: 7.3500  mIoU: 1.6200  mAcc: 3.6800  data_time: 0.0219  time: 22.5872
/pfs/work7/workspace/scratch/ma_dschader-team_project_fss2024/miniconda3/envs/py310/lib/python3.10/site-packages/torch/cuda/__init__.py:155: UserWarning: 
NVIDIA H100 PCIe with CUDA capability sm_90 is not compatible with the current PyTorch installation.
The current PyTorch install supports CUDA capabilities sm_37 sm_50 sm_60 sm_61 sm_70 sm_75 sm_80 sm_86 compute_37.
If you want to use the NVIDIA H100 PCIe GPU with PyTorch, please check the instructions at https://pytorch.org/get-started/locally/

  warnings.warn(incompatible_device_warn.format(device_name, capability, " ".join(arch_list), device_name))
11/07 05:38:38 - mmengine - INFO - 
------------------------------------------------------------
System environment:
    sys.platform: linux
    Python: 3.10.13 | packaged by conda-forge | (main, Dec 23 2023, 15:36:39) [GCC 12.3.0]
    CUDA available: True
    MUSA available: False
    numpy_random_seed: 1588153151
    GPU 0: NVIDIA H100 PCIe
    CUDA_HOME: None
    GCC: gcc (GCC) 8.5.0 20210514 (Red Hat 8.5.0-18)
    PyTorch: 1.13.1
    PyTorch compiling details: PyTorch built with:
  - GCC 9.3
  - C++ Version: 201402
  - Intel(R) oneAPI Math Kernel Library Version 2023.1-Product Build 20230303 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v2.6.0 (Git Hash 52b5f107dd9cf10910aaa19cb47f3abf9b349815)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - LAPACK is enabled (usually provided by MKL)
  - NNPACK is enabled
  - CPU capability usage: AVX2
  - CUDA Runtime 11.7
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_61,code=sm_61;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86;-gencode;arch=compute_37,code=compute_37
  - CuDNN 8.5
  - Magma 2.6.1
  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.7, CUDNN_VERSION=8.5.0, CXX_COMPILER=/opt/rh/devtoolset-9/root/usr/bin/c++, CXX_FLAGS= -fabi-version=11 -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -DEDGE_PROFILER_USE_KINETO -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Werror=non-virtual-dtor -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wunused-local-typedefs -Wno-unused-parameter -Wno-unused-function -Wno-unused-result -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Werror=cast-function-type -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.13.1, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, USE_ROCM=OFF, 

    TorchVision: 0.14.1
    OpenCV: 3.4.18
    MMEngine: 0.10.4

Runtime environment:
    cudnn_benchmark: True
    mp_cfg: {'mp_start_method': 'fork', 'opencv_num_threads': 0}
    dist_cfg: {'backend': 'nccl'}
    seed: 1588153151
    Distributed launcher: none
    Distributed training: False
    GPU number: 1
------------------------------------------------------------

11/07 05:38:39 - mmengine - INFO - Config:
checkpoint_config = dict(by_epoch=False, interval=1000, max_keep_ckpts=1)
crop_size = (
    896,
    896,
)
data = dict(
    samples_per_gpu=1,
    test=dict(pipeline=[
        dict(type='LoadImageFromFile'),
        dict(
            flip=False,
            img_scale=(
                3584,
                896,
            ),
            transforms=[
                dict(keep_ratio=True, type='Resize'),
                dict(size_divisor=32, type='ResizeToMultiple'),
                dict(type='RandomFlip'),
                dict(
                    mean=[
                        123.675,
                        116.28,
                        103.53,
                    ],
                    std=[
                        58.395,
                        57.12,
                        57.375,
                    ],
                    to_rgb=True,
                    type='Normalize'),
                dict(keys=[
                    'img',
                ], type='ImageToTensor'),
                dict(keys=[
                    'img',
                ], type='Collect'),
            ],
            type='MultiScaleFlipAug'),
    ]),
    train=dict(pipeline=[
        dict(type='LoadImageFromFile'),
        dict(reduce_zero_label=True, type='LoadAnnotations'),
        dict(img_scale=(
            3584,
            896,
        ), ratio_range=(
            0.5,
            2.0,
        ), type='Resize'),
        dict(cat_max_ratio=0.75, crop_size=(
            896,
            896,
        ), type='RandomCrop'),
        dict(prob=0.5, type='RandomFlip'),
        dict(type='PhotoMetricDistortion'),
        dict(
            mean=[
                123.675,
                116.28,
                103.53,
            ],
            std=[
                58.395,
                57.12,
                57.375,
            ],
            to_rgb=True,
            type='Normalize'),
        dict(pad_val=0, seg_pad_val=255, size=(
            896,
            896,
        ), type='Pad'),
        dict(type='DefaultFormatBundle'),
        dict(keys=[
            'img',
            'gt_semantic_seg',
        ], type='Collect'),
    ]),
    val=dict(pipeline=[
        dict(type='LoadImageFromFile'),
        dict(
            flip=False,
            img_scale=(
                3584,
                896,
            ),
            transforms=[
                dict(keep_ratio=True, type='Resize'),
                dict(size_divisor=32, type='ResizeToMultiple'),
                dict(type='RandomFlip'),
                dict(
                    mean=[
                        123.675,
                        116.28,
                        103.53,
                    ],
                    std=[
                        58.395,
                        57.12,
                        57.375,
                    ],
                    to_rgb=True,
                    type='Normalize'),
                dict(keys=[
                    'img',
                ], type='ImageToTensor'),
                dict(keys=[
                    'img',
                ], type='Collect'),
            ],
            type='MultiScaleFlipAug'),
    ]))
data_preprocessor = dict(
    bgr_to_rgb=True,
    corruption=None,
    enable_normalization=False,
    mean=[
        123.675,
        116.28,
        103.53,
    ],
    pad_val=0,
    seg_pad_val=255,
    std=[
        58.395,
        57.12,
        57.375,
    ],
    type='SegDataPreProcessor')
data_root = 'data/ade/ADEChallengeData2016'
dataset_type = 'ADE20KDataset'
default_hooks = dict(
    checkpoint=dict(by_epoch=False, interval=16000, type='CheckpointHook'),
    logger=dict(interval=50, log_metric_by_epoch=False, type='LoggerHook'),
    param_scheduler=dict(type='ParamSchedulerHook'),
    sampler_seed=dict(type='DistSamplerSeedHook'),
    timer=dict(type='IterTimerHook'),
    visualization=dict(draw=True, type='SegVisualizationHook'))
default_scope = 'mmseg'
env_cfg = dict(
    cudnn_benchmark=True,
    dist_cfg=dict(backend='nccl'),
    mp_cfg=dict(mp_start_method='fork', opencv_num_threads=0))
evaluation = dict(interval=16000, metric='mIoU', save_best='mIoU')
img_norm_cfg = dict(
    mean=[
        123.675,
        116.28,
        103.53,
    ],
    std=[
        58.395,
        57.12,
        57.375,
    ],
    to_rgb=True)
img_ratios = [
    0.5,
    0.75,
    1.0,
    1.25,
    1.5,
    1.75,
]
launcher = 'none'
load_from = '../checkpoint_files/upernet/upernet_internimage_h_896_160k_ade20k.pth'
log_level = 'INFO'
log_processor = dict(by_epoch=False)
lr_config = dict(
    _delete_=True,
    by_epoch=False,
    min_lr=0.0,
    policy='poly',
    power=1.0,
    warmup='linear',
    warmup_iters=1500,
    warmup_ratio=1e-06)
model = dict(
    attack_cfg=dict(
        alpha=0.1, epsilon=64, iterations=20, name='pgd', norm='l2'),
    attack_loss=dict(
        loss_weight=1.0,
        reduction='none',
        type='CrossEntropyLoss',
        use_sigmoid=False),
    auxiliary_head=dict(
        align_corners=False,
        channels=256,
        concat_input=False,
        dropout_ratio=0.1,
        in_channels=1280,
        in_index=2,
        loss_decode=dict(
            loss_weight=0.4, type='CrossEntropyLoss', use_sigmoid=False),
        norm_cfg=dict(requires_grad=True, type='SyncBN'),
        num_classes=150,
        num_convs=1,
        type='FCNHead'),
    backbone=dict(
        center_feature_scale=True,
        channels=320,
        core_op='DCNv3',
        depths=[
            6,
            6,
            32,
            6,
        ],
        drop_path_rate=0.5,
        dw_kernel_size=5,
        groups=[
            10,
            20,
            40,
            80,
        ],
        init_cfg=dict(
            checkpoint=
            'https://huggingface.co/OpenGVLab/InternImage/resolve/main/internimage_h_jointto22k_384.pth',
            type='Pretrained'),
        layer_scale=None,
        level2_post_norm=True,
        level2_post_norm_block_ids=[
            5,
            11,
            17,
            23,
            29,
        ],
        mlp_ratio=4.0,
        norm_layer='LN',
        offset_scale=1.0,
        out_indices=(
            0,
            1,
            2,
            3,
        ),
        post_norm=False,
        res_post_norm=True,
        type='InternImage',
        with_cp=False),
    data_preprocessor=dict(
        bgr_to_rgb=True,
        corruption=None,
        enable_normalization=False,
        mean=[
            123.675,
            116.28,
            103.53,
        ],
        pad_val=0,
        seg_pad_val=255,
        std=[
            58.395,
            57.12,
            57.375,
        ],
        type='SegDataPreProcessor'),
    decode_head=dict(
        align_corners=False,
        channels=512,
        dropout_ratio=0.1,
        in_channels=[
            320,
            640,
            1280,
            2560,
        ],
        in_index=[
            0,
            1,
            2,
            3,
        ],
        loss_decode=dict(
            loss_weight=1.0,
            reduction='none',
            type='CrossEntropyLoss',
            use_sigmoid=False),
        norm_cfg=dict(requires_grad=True, type='SyncBN'),
        num_classes=150,
        pool_scales=(
            1,
            2,
            3,
            6,
        ),
        type='UPerHead'),
    enable_normalization=False,
    normalize_mean_std=dict(
        mean=[
            123.675,
            116.28,
            103.53,
        ], std=[
            58.395,
            57.12,
            57.375,
        ]),
    perform_attack=True,
    pretrained='open-mmlab://resnet50_v1c',
    test_cfg=dict(mode='whole'),
    train_cfg=dict(),
    type='EncoderDecoder')
norm_cfg = dict(requires_grad=True, type='SyncBN')
optim_wrapper = dict(
    clip_grad=None,
    optimizer=dict(lr=0.01, momentum=0.9, type='SGD', weight_decay=0.0005),
    type='OptimWrapper')
optimizer = dict(
    betas=(
        0.9,
        0.999,
    ),
    constructor='CustomLayerDecayOptimizerConstructor',
    lr=2e-05,
    paramwise_cfg=dict(
        depths=[
            6,
            6,
            32,
            6,
        ],
        layer_decay_rate=0.95,
        num_layers=50,
        offset_lr_scale=1.0),
    type='AdamW',
    weight_decay=0.05)
optimizer_config = dict(
    _delete_=True, grad_clip=dict(max_norm=0.1, norm_type=2))
param_scheduler = [
    dict(
        begin=0,
        by_epoch=False,
        end=160000,
        eta_min=0.0001,
        power=0.9,
        type='PolyLR'),
]
pretrained = 'https://huggingface.co/OpenGVLab/InternImage/resolve/main/internimage_h_jointto22k_384.pth'
resume = False
runner = dict(type='IterBasedRunner')
test_cfg = dict(type='TestLoop')
test_dataloader = dict(
    batch_size=1,
    dataset=dict(
        data_prefix=dict(
            img_path='images/validation',
            seg_map_path='annotations/validation'),
        data_root='data/ade/ADEChallengeData2016',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(keep_ratio=True, scale=(
                2048,
                512,
            ), type='Resize'),
            dict(reduce_zero_label=True, type='LoadAnnotations'),
            dict(type='PackSegInputs'),
        ],
        type='ADE20KDataset'),
    num_workers=4,
    persistent_workers=True,
    sampler=dict(shuffle=False, type='DefaultSampler'))
test_evaluator = dict(
    iou_metrics=[
        'mIoU',
    ], type='IoUMetric')
test_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(
        flip=False,
        img_scale=(
            3584,
            896,
        ),
        transforms=[
            dict(keep_ratio=True, type='Resize'),
            dict(size_divisor=32, type='ResizeToMultiple'),
            dict(type='RandomFlip'),
            dict(
                mean=[
                    123.675,
                    116.28,
                    103.53,
                ],
                std=[
                    58.395,
                    57.12,
                    57.375,
                ],
                to_rgb=True,
                type='Normalize'),
            dict(keys=[
                'img',
            ], type='ImageToTensor'),
            dict(keys=[
                'img',
            ], type='Collect'),
        ],
        type='MultiScaleFlipAug'),
]
train_cfg = dict(
    max_iters=160000, type='IterBasedTrainLoop', val_interval=16000)
train_dataloader = dict(
    batch_size=4,
    dataset=dict(
        data_prefix=dict(
            img_path='images/training', seg_map_path='annotations/training'),
        data_root='data/ade/ADEChallengeData2016',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(reduce_zero_label=True, type='LoadAnnotations'),
            dict(
                keep_ratio=True,
                ratio_range=(
                    0.5,
                    2.0,
                ),
                scale=(
                    2048,
                    512,
                ),
                type='RandomResize'),
            dict(
                cat_max_ratio=0.75, crop_size=(
                    512,
                    512,
                ), type='RandomCrop'),
            dict(prob=0.5, type='RandomFlip'),
            dict(type='PhotoMetricDistortion'),
            dict(type='PackSegInputs'),
        ],
        type='ADE20KDataset'),
    num_workers=4,
    persistent_workers=True,
    sampler=dict(shuffle=True, type='InfiniteSampler'))
train_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(reduce_zero_label=True, type='LoadAnnotations'),
    dict(img_scale=(
        3584,
        896,
    ), ratio_range=(
        0.5,
        2.0,
    ), type='Resize'),
    dict(cat_max_ratio=0.75, crop_size=(
        896,
        896,
    ), type='RandomCrop'),
    dict(prob=0.5, type='RandomFlip'),
    dict(type='PhotoMetricDistortion'),
    dict(
        mean=[
            123.675,
            116.28,
            103.53,
        ],
        std=[
            58.395,
            57.12,
            57.375,
        ],
        to_rgb=True,
        type='Normalize'),
    dict(pad_val=0, seg_pad_val=255, size=(
        896,
        896,
    ), type='Pad'),
    dict(type='DefaultFormatBundle'),
    dict(keys=[
        'img',
        'gt_semantic_seg',
    ], type='Collect'),
]
tta_model = dict(type='SegTTAModel')
tta_pipeline = [
    dict(backend_args=None, type='LoadImageFromFile'),
    dict(
        transforms=[
            [
                dict(keep_ratio=True, scale_factor=0.5, type='Resize'),
                dict(keep_ratio=True, scale_factor=0.75, type='Resize'),
                dict(keep_ratio=True, scale_factor=1.0, type='Resize'),
                dict(keep_ratio=True, scale_factor=1.25, type='Resize'),
                dict(keep_ratio=True, scale_factor=1.5, type='Resize'),
                dict(keep_ratio=True, scale_factor=1.75, type='Resize'),
            ],
            [
                dict(direction='horizontal', prob=0.0, type='RandomFlip'),
                dict(direction='horizontal', prob=1.0, type='RandomFlip'),
            ],
            [
                dict(type='LoadAnnotations'),
            ],
            [
                dict(type='PackSegInputs'),
            ],
        ],
        type='TestTimeAug'),
]
val_cfg = dict(type='ValLoop')
val_dataloader = dict(
    batch_size=1,
    dataset=dict(
        data_prefix=dict(
            img_path='images/validation',
            seg_map_path='annotations/validation'),
        data_root='data/ade/ADEChallengeData2016',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(keep_ratio=True, scale=(
                2048,
                512,
            ), type='Resize'),
            dict(reduce_zero_label=True, type='LoadAnnotations'),
            dict(type='PackSegInputs'),
        ],
        type='ADE20KDataset'),
    num_workers=4,
    persistent_workers=True,
    sampler=dict(shuffle=False, type='DefaultSampler'))
val_evaluator = dict(
    iou_metrics=[
        'mIoU',
    ], type='IoUMetric')
vis_backends = [
    dict(type='LocalVisBackend'),
]
visualizer = dict(
    name='visualizer',
    save_dir=
    '../aa_workdir/ade/upernet/upernet_internimage_h_896_160k_ade20k/attack_pgd/norm_l2/iterations_20/epsilon_64/alpha_0.1/show_dir',
    type='SegLocalVisualizer',
    vis_backends=[
        dict(type='LocalVisBackend'),
    ])
work_dir = '../aa_workdir/ade/upernet/upernet_internimage_h_896_160k_ade20k/attack_pgd/norm_l2/iterations_20/epsilon_64/alpha_0.1'

/pfs/work7/workspace/scratch/ma_dschader-team_project_fss2024/benchmarking_robustness/semantic_segmentation/mmsegmentation/ops_dcnv3/modules/dcnv3.py:20: UserWarning: Now, we support DCNv4 in InternImage.
  warnings.warn('Now, we support DCNv4 in InternImage.')
2024-11-07 05:38:41,838 - mmseg - INFO - using core type: DCNv3
2024-11-07 05:38:41,838 - mmseg - INFO - using activation layer: GELU
2024-11-07 05:38:41,838 - mmseg - INFO - using main norm layer: LN
2024-11-07 05:38:41,838 - mmseg - INFO - using dpr: linear, 0.5
2024-11-07 05:38:41,838 - mmseg - INFO - level2_post_norm: True
2024-11-07 05:38:41,838 - mmseg - INFO - level2_post_norm_block_ids: [5, 11, 17, 23, 29]
2024-11-07 05:38:41,838 - mmseg - INFO - res_post_norm: True
2024-11-07 05:38:41,838 - mmseg - INFO - use_dcn_v4_op: False
Number of parameters:  1120338396
11/07 05:47:51 - mmengine - INFO - Distributed training is not used, all SyncBatchNorm (SyncBN) layers in the model will be automatically reverted to BatchNormXd layers if they are used.
11/07 05:47:52 - mmengine - INFO - Hooks will be executed in the following order:
before_run:
(VERY_HIGH   ) RuntimeInfoHook                    
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
before_train:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_train_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(NORMAL      ) DistSamplerSeedHook                
 -------------------- 
before_train_iter:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_train_iter:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(NORMAL      ) SegVisualizationHook               
(BELOW_NORMAL) LoggerHook                         
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
after_train_epoch:
(NORMAL      ) IterTimerHook                      
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_val:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
before_val_epoch:
(NORMAL      ) IterTimerHook                      
 -------------------- 
before_val_iter:
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_val_iter:
(NORMAL      ) IterTimerHook                      
(NORMAL      ) SegVisualizationHook               
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_val_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
after_val:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
after_train:
(VERY_HIGH   ) RuntimeInfoHook                    
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_test:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
before_test_epoch:
(NORMAL      ) IterTimerHook                      
 -------------------- 
before_test_iter:
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_test_iter:
(NORMAL      ) IterTimerHook                      
(NORMAL      ) SegVisualizationHook               
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_test_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_test:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
after_run:
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
11/07 05:47:55 - mmengine - WARNING - The prefix is not set in metric class IoUMetric.
Loads checkpoint by local backend from path: ../checkpoint_files/upernet/upernet_internimage_h_896_160k_ade20k.pth
11/07 05:48:02 - mmengine - INFO - Load checkpoint from ../checkpoint_files/upernet/upernet_internimage_h_896_160k_ade20k.pth
11/07 06:18:38 - mmengine - INFO - Iter(test) [  50/2000]    eta: 19:52:27  time: 24.8456  data_time: 0.0029  memory: 62847  
11/07 06:38:04 - mmengine - INFO - Iter(test) [ 100/2000]    eta: 15:50:21  time: 24.3685  data_time: 0.0030  memory: 62171  
11/07 06:57:14 - mmengine - INFO - Iter(test) [ 150/2000]    eta: 14:13:05  time: 23.5216  data_time: 0.0191  memory: 54826  
11/07 07:16:52 - mmengine - INFO - Iter(test) [ 200/2000]    eta: 13:19:23  time: 23.0330  data_time: 0.0020  memory: 70130  
11/07 07:35:35 - mmengine - INFO - Iter(test) [ 250/2000]    eta: 12:32:41  time: 22.3604  data_time: 0.0020  memory: 75896  
11/07 07:54:08 - mmengine - INFO - Iter(test) [ 300/2000]    eta: 11:54:25  time: 23.0307  data_time: 0.0041  memory: 59264  
11/07 08:13:09 - mmengine - INFO - Iter(test) [ 350/2000]    eta: 11:24:02  time: 21.7206  data_time: 0.0017  memory: 61425  
11/07 08:31:58 - mmengine - INFO - Iter(test) [ 400/2000]    eta: 10:55:38  time: 23.0676  data_time: 0.0016  memory: 59982  
11/07 08:49:05 - mmengine - INFO - Iter(test) [ 450/2000]    eta: 10:23:31  time: 20.9103  data_time: 0.0017  memory: 50539  
11/07 09:07:38 - mmengine - INFO - Iter(test) [ 500/2000]    eta: 9:58:41  time: 21.6523  data_time: 0.0017  memory: 51035  
11/07 09:27:19 - mmengine - INFO - Iter(test) [ 550/2000]    eta: 9:38:02  time: 23.6810  data_time: 0.0017  memory: 57641  
11/07 09:45:46 - mmengine - INFO - Iter(test) [ 600/2000]    eta: 9:14:38  time: 23.2497  data_time: 0.0016  memory: 57706  
11/07 10:04:21 - mmengine - INFO - Iter(test) [ 650/2000]    eta: 8:52:17  time: 22.8429  data_time: 0.0015  memory: 63304  
11/07 10:24:02 - mmengine - INFO - Iter(test) [ 700/2000]    eta: 8:32:30  time: 23.1527  data_time: 0.0019  memory: 60865  
11/07 10:43:10 - mmengine - INFO - Iter(test) [ 750/2000]    eta: 8:11:50  time: 22.7096  data_time: 0.0015  memory: 64193  
11/07 11:00:47 - mmengine - INFO - Iter(test) [ 800/2000]    eta: 7:49:02  time: 22.4903  data_time: 0.0019  memory: 51615  
11/07 11:19:34 - mmengine - INFO - Iter(test) [ 850/2000]    eta: 7:28:28  time: 22.6622  data_time: 0.0074  memory: 50112  
11/07 11:36:58 - mmengine - INFO - Iter(test) [ 900/2000]    eta: 7:06:25  time: 20.1964  data_time: 0.0015  memory: 53678  
11/07 11:56:06 - mmengine - INFO - Iter(test) [ 950/2000]    eta: 6:46:45  time: 22.2759  data_time: 0.0017  memory: 56829  
11/07 12:14:02 - mmengine - INFO - Iter(test) [1000/2000]    eta: 6:25:57  time: 21.4589  data_time: 0.0015  memory: 56985  
11/07 12:33:21 - mmengine - INFO - Iter(test) [1050/2000]    eta: 6:06:40  time: 23.8179  data_time: 0.0016  memory: 64391  
11/07 12:52:13 - mmengine - INFO - Iter(test) [1100/2000]    eta: 5:47:00  time: 22.0306  data_time: 0.0016  memory: 55464  
11/07 13:10:40 - mmengine - INFO - Iter(test) [1150/2000]    eta: 5:27:06  time: 22.6667  data_time: 0.0016  memory: 54164  
11/07 13:29:38 - mmengine - INFO - Iter(test) [1200/2000]    eta: 5:07:41  time: 21.8648  data_time: 0.0045  memory: 57535  
11/07 13:47:41 - mmengine - INFO - Iter(test) [1250/2000]    eta: 4:47:45  time: 21.7629  data_time: 0.0016  memory: 58449  
11/07 14:05:14 - mmengine - INFO - Iter(test) [1300/2000]    eta: 4:27:41  time: 22.4859  data_time: 0.0016  memory: 50716  
11/07 14:23:40 - mmengine - INFO - Iter(test) [1350/2000]    eta: 4:08:14  time: 20.7834  data_time: 0.0030  memory: 50680  
11/07 14:42:18 - mmengine - INFO - Iter(test) [1400/2000]    eta: 3:48:56  time: 23.5924  data_time: 0.0015  memory: 58209  
11/07 15:00:09 - mmengine - INFO - Iter(test) [1450/2000]    eta: 3:29:23  time: 23.4148  data_time: 0.0016  memory: 56832  
11/07 15:18:15 - mmengine - INFO - Iter(test) [1500/2000]    eta: 3:10:02  time: 20.8168  data_time: 0.0015  memory: 50120  
11/07 15:37:39 - mmengine - INFO - Iter(test) [1550/2000]    eta: 2:51:09  time: 22.8538  data_time: 0.0016  memory: 55931  
11/07 15:55:45 - mmengine - INFO - Iter(test) [1600/2000]    eta: 2:31:54  time: 22.0779  data_time: 0.0030  memory: 49781  
11/07 16:14:04 - mmengine - INFO - Iter(test) [1650/2000]    eta: 2:12:46  time: 20.6948  data_time: 0.0014  memory: 70308  
11/07 16:33:03 - mmengine - INFO - Iter(test) [1700/2000]    eta: 1:53:48  time: 22.5056  data_time: 0.0016  memory: 55843  
11/07 16:52:10 - mmengine - INFO - Iter(test) [1750/2000]    eta: 1:34:51  time: 22.1122  data_time: 0.0015  memory: 56692  
11/07 17:10:06 - mmengine - INFO - Iter(test) [1800/2000]    eta: 1:15:46  time: 22.8663  data_time: 0.0250  memory: 51237  
11/07 17:28:54 - mmengine - INFO - Iter(test) [1850/2000]    eta: 0:56:49  time: 22.5349  data_time: 0.0017  memory: 45730  
11/07 17:46:27 - mmengine - INFO - Iter(test) [1900/2000]    eta: 0:37:48  time: 21.6469  data_time: 0.0041  memory: 60195  
slurmstepd: error: *** JOB 24635401 ON uc2n908 CANCELLED AT 2024-11-07T17:55:26 DUE TO TIME LIMIT ***

============================= JOB FEEDBACK =============================

NodeName=uc2n908
Job ID: 24635401
Array Job ID: 24617298_0
Cluster: uc2
User/Group: ma_dschader/ma_ma
State: TIMEOUT (exit code 0)
Nodes: 1
Cores per node: 8
CPU Utilized: 12:28:27
CPU Efficiency: 6.24% of 8-08:01:52 core-walltime
Job Wall-clock time: 1-01:00:14
Memory Utilized: 8.45 GB
Memory Efficiency: 42.25% of 20.00 GB
