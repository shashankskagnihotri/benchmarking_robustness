Started at Tue Oct 29 06:13:22 CET 2024
/pfs/work7/workspace/scratch/ma_dschader-team_project_fss2024/miniconda3/envs/py310/lib/python3.10/site-packages/torch/cuda/__init__.py:155: UserWarning: 
NVIDIA H100 PCIe with CUDA capability sm_90 is not compatible with the current PyTorch installation.
The current PyTorch install supports CUDA capabilities sm_37 sm_50 sm_60 sm_61 sm_70 sm_75 sm_80 sm_86 compute_37.
If you want to use the NVIDIA H100 PCIe GPU with PyTorch, please check the instructions at https://pytorch.org/get-started/locally/

  warnings.warn(incompatible_device_warn.format(device_name, capability, " ".join(arch_list), device_name))
10/29 06:13:27 - mmengine - INFO - 
------------------------------------------------------------
System environment:
    sys.platform: linux
    Python: 3.10.13 | packaged by conda-forge | (main, Dec 23 2023, 15:36:39) [GCC 12.3.0]
    CUDA available: True
    MUSA available: False
    numpy_random_seed: 252418140
    GPU 0: NVIDIA H100 PCIe
    CUDA_HOME: None
    GCC: gcc (GCC) 8.5.0 20210514 (Red Hat 8.5.0-18)
    PyTorch: 1.13.1
    PyTorch compiling details: PyTorch built with:
  - GCC 9.3
  - C++ Version: 201402
  - Intel(R) oneAPI Math Kernel Library Version 2023.1-Product Build 20230303 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v2.6.0 (Git Hash 52b5f107dd9cf10910aaa19cb47f3abf9b349815)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - LAPACK is enabled (usually provided by MKL)
  - NNPACK is enabled
  - CPU capability usage: AVX2
  - CUDA Runtime 11.7
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_61,code=sm_61;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86;-gencode;arch=compute_37,code=compute_37
  - CuDNN 8.5
  - Magma 2.6.1
  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.7, CUDNN_VERSION=8.5.0, CXX_COMPILER=/opt/rh/devtoolset-9/root/usr/bin/c++, CXX_FLAGS= -fabi-version=11 -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -DEDGE_PROFILER_USE_KINETO -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Werror=non-virtual-dtor -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wunused-local-typedefs -Wno-unused-parameter -Wno-unused-function -Wno-unused-result -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Werror=cast-function-type -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.13.1, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, USE_ROCM=OFF, 

    TorchVision: 0.14.1
    OpenCV: 3.4.18
    MMEngine: 0.10.4

Runtime environment:
    cudnn_benchmark: True
    mp_cfg: {'mp_start_method': 'fork', 'opencv_num_threads': 0}
    dist_cfg: {'backend': 'nccl'}
    seed: 252418140
    Distributed launcher: none
    Distributed training: False
    GPU number: 1
------------------------------------------------------------

10/29 06:13:28 - mmengine - INFO - Config:
checkpoint_config = dict(by_epoch=False, interval=1000, max_keep_ckpts=1)
crop_size = (
    512,
    512,
)
data = dict(
    samples_per_gpu=2,
    test=dict(pipeline=[
        dict(type='LoadImageFromFile'),
        dict(
            flip=False,
            img_scale=(
                2048,
                512,
            ),
            transforms=[
                dict(keep_ratio=True, type='Resize'),
                dict(size_divisor=32, type='ResizeToMultiple'),
                dict(type='RandomFlip'),
                dict(
                    mean=[
                        123.675,
                        116.28,
                        103.53,
                    ],
                    std=[
                        58.395,
                        57.12,
                        57.375,
                    ],
                    to_rgb=True,
                    type='Normalize'),
                dict(keys=[
                    'img',
                ], type='ImageToTensor'),
                dict(keys=[
                    'img',
                ], type='Collect'),
            ],
            type='MultiScaleFlipAug'),
    ]),
    val=dict(pipeline=[
        dict(type='LoadImageFromFile'),
        dict(
            flip=False,
            img_scale=(
                2048,
                512,
            ),
            transforms=[
                dict(keep_ratio=True, type='Resize'),
                dict(size_divisor=32, type='ResizeToMultiple'),
                dict(type='RandomFlip'),
                dict(
                    mean=[
                        123.675,
                        116.28,
                        103.53,
                    ],
                    std=[
                        58.395,
                        57.12,
                        57.375,
                    ],
                    to_rgb=True,
                    type='Normalize'),
                dict(keys=[
                    'img',
                ], type='ImageToTensor'),
                dict(keys=[
                    'img',
                ], type='Collect'),
            ],
            type='MultiScaleFlipAug'),
    ]))
data_preprocessor = dict(
    bgr_to_rgb=True,
    corruption=None,
    enable_normalization=False,
    mean=[
        123.675,
        116.28,
        103.53,
    ],
    pad_val=0,
    seg_pad_val=255,
    std=[
        58.395,
        57.12,
        57.375,
    ],
    type='SegDataPreProcessor')
data_root = 'data/ade/ADEChallengeData2016'
dataset_type = 'ADE20KDataset'
default_hooks = dict(
    checkpoint=dict(by_epoch=False, interval=16000, type='CheckpointHook'),
    logger=dict(interval=50, log_metric_by_epoch=False, type='LoggerHook'),
    param_scheduler=dict(type='ParamSchedulerHook'),
    sampler_seed=dict(type='DistSamplerSeedHook'),
    timer=dict(type='IterTimerHook'),
    visualization=dict(draw=True, type='SegVisualizationHook'))
default_scope = 'mmseg'
env_cfg = dict(
    cudnn_benchmark=True,
    dist_cfg=dict(backend='nccl'),
    mp_cfg=dict(mp_start_method='fork', opencv_num_threads=0))
evaluation = dict(interval=16000, metric='mIoU', save_best='mIoU')
img_norm_cfg = dict(
    mean=[
        123.675,
        116.28,
        103.53,
    ],
    std=[
        58.395,
        57.12,
        57.375,
    ],
    to_rgb=True)
img_ratios = [
    0.5,
    0.75,
    1.0,
    1.25,
    1.5,
    1.75,
]
launcher = 'none'
load_from = '../checkpoint_files/upernet/upernet_internimage_b_512_160k_ade20k.pth'
log_level = 'INFO'
log_processor = dict(by_epoch=False)
lr_config = dict(
    _delete_=True,
    by_epoch=False,
    min_lr=0.0,
    policy='poly',
    power=1.0,
    warmup='linear',
    warmup_iters=1500,
    warmup_ratio=1e-06)
model = dict(
    attack_cfg=dict(
        alpha=0.01, epsilon=8, iterations=20, name='cospgd', norm='linf'),
    attack_loss=dict(
        loss_weight=1.0,
        reduction='none',
        type='CrossEntropyLoss',
        use_sigmoid=False),
    auxiliary_head=dict(
        align_corners=False,
        channels=256,
        concat_input=False,
        dropout_ratio=0.1,
        in_channels=448,
        in_index=2,
        loss_decode=dict(
            loss_weight=0.4, type='CrossEntropyLoss', use_sigmoid=False),
        norm_cfg=dict(requires_grad=True, type='SyncBN'),
        num_classes=150,
        num_convs=1,
        type='FCNHead'),
    backbone=dict(
        channels=112,
        core_op='DCNv3',
        depths=[
            4,
            4,
            21,
            4,
        ],
        drop_path_rate=0.4,
        groups=[
            7,
            14,
            28,
            56,
        ],
        init_cfg=dict(
            checkpoint=
            'https://huggingface.co/OpenGVLab/InternImage/resolve/main/internimage_b_1k_224.pth',
            type='Pretrained'),
        layer_scale=1.0,
        mlp_ratio=4.0,
        norm_layer='LN',
        offset_scale=1.0,
        out_indices=(
            0,
            1,
            2,
            3,
        ),
        post_norm=True,
        type='InternImage',
        with_cp=False),
    data_preprocessor=dict(
        bgr_to_rgb=True,
        corruption=None,
        enable_normalization=False,
        mean=[
            123.675,
            116.28,
            103.53,
        ],
        pad_val=0,
        seg_pad_val=255,
        std=[
            58.395,
            57.12,
            57.375,
        ],
        type='SegDataPreProcessor'),
    decode_head=dict(
        align_corners=False,
        channels=512,
        dropout_ratio=0.1,
        in_channels=[
            112,
            224,
            448,
            896,
        ],
        in_index=[
            0,
            1,
            2,
            3,
        ],
        loss_decode=dict(
            loss_weight=1.0,
            reduction='none',
            type='CrossEntropyLoss',
            use_sigmoid=False),
        norm_cfg=dict(requires_grad=True, type='SyncBN'),
        num_classes=150,
        pool_scales=(
            1,
            2,
            3,
            6,
        ),
        type='UPerHead'),
    enable_normalization=False,
    normalize_mean_std=dict(
        mean=[
            123.675,
            116.28,
            103.53,
        ], std=[
            58.395,
            57.12,
            57.375,
        ]),
    perform_attack=True,
    pretrained='open-mmlab://resnet50_v1c',
    test_cfg=dict(mode='whole'),
    train_cfg=dict(),
    type='EncoderDecoder')
norm_cfg = dict(requires_grad=True, type='SyncBN')
optim_wrapper = dict(
    clip_grad=None,
    optimizer=dict(lr=0.01, momentum=0.9, type='SGD', weight_decay=0.0005),
    type='OptimWrapper')
optimizer = dict(
    betas=(
        0.9,
        0.999,
    ),
    constructor='CustomLayerDecayOptimizerConstructor',
    lr=6e-05,
    paramwise_cfg=dict(
        depths=[
            4,
            4,
            21,
            4,
        ], layer_decay_rate=1.0, num_layers=33),
    type='AdamW',
    weight_decay=0.05)
param_scheduler = [
    dict(
        begin=0,
        by_epoch=False,
        end=160000,
        eta_min=0.0001,
        power=0.9,
        type='PolyLR'),
]
pretrained = 'https://huggingface.co/OpenGVLab/InternImage/resolve/main/internimage_b_1k_224.pth'
resume = False
runner = dict(type='IterBasedRunner')
test_cfg = dict(type='TestLoop')
test_dataloader = dict(
    batch_size=1,
    dataset=dict(
        data_prefix=dict(
            img_path='images/validation',
            seg_map_path='annotations/validation'),
        data_root='data/ade/ADEChallengeData2016',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(keep_ratio=True, scale=(
                2048,
                512,
            ), type='Resize'),
            dict(reduce_zero_label=True, type='LoadAnnotations'),
            dict(type='PackSegInputs'),
        ],
        type='ADE20KDataset'),
    num_workers=4,
    persistent_workers=True,
    sampler=dict(shuffle=False, type='DefaultSampler'))
test_evaluator = dict(
    iou_metrics=[
        'mIoU',
    ], type='IoUMetric')
test_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(
        flip=False,
        img_scale=(
            2048,
            512,
        ),
        transforms=[
            dict(keep_ratio=True, type='Resize'),
            dict(size_divisor=32, type='ResizeToMultiple'),
            dict(type='RandomFlip'),
            dict(
                mean=[
                    123.675,
                    116.28,
                    103.53,
                ],
                std=[
                    58.395,
                    57.12,
                    57.375,
                ],
                to_rgb=True,
                type='Normalize'),
            dict(keys=[
                'img',
            ], type='ImageToTensor'),
            dict(keys=[
                'img',
            ], type='Collect'),
        ],
        type='MultiScaleFlipAug'),
]
train_cfg = dict(
    max_iters=160000, type='IterBasedTrainLoop', val_interval=16000)
train_dataloader = dict(
    batch_size=4,
    dataset=dict(
        data_prefix=dict(
            img_path='images/training', seg_map_path='annotations/training'),
        data_root='data/ade/ADEChallengeData2016',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(reduce_zero_label=True, type='LoadAnnotations'),
            dict(
                keep_ratio=True,
                ratio_range=(
                    0.5,
                    2.0,
                ),
                scale=(
                    2048,
                    512,
                ),
                type='RandomResize'),
            dict(
                cat_max_ratio=0.75, crop_size=(
                    512,
                    512,
                ), type='RandomCrop'),
            dict(prob=0.5, type='RandomFlip'),
            dict(type='PhotoMetricDistortion'),
            dict(type='PackSegInputs'),
        ],
        type='ADE20KDataset'),
    num_workers=4,
    persistent_workers=True,
    sampler=dict(shuffle=True, type='InfiniteSampler'))
train_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(reduce_zero_label=True, type='LoadAnnotations'),
    dict(
        keep_ratio=True,
        ratio_range=(
            0.5,
            2.0,
        ),
        scale=(
            2048,
            512,
        ),
        type='RandomResize'),
    dict(cat_max_ratio=0.75, crop_size=(
        512,
        512,
    ), type='RandomCrop'),
    dict(prob=0.5, type='RandomFlip'),
    dict(type='PhotoMetricDistortion'),
    dict(type='PackSegInputs'),
]
tta_model = dict(type='SegTTAModel')
tta_pipeline = [
    dict(backend_args=None, type='LoadImageFromFile'),
    dict(
        transforms=[
            [
                dict(keep_ratio=True, scale_factor=0.5, type='Resize'),
                dict(keep_ratio=True, scale_factor=0.75, type='Resize'),
                dict(keep_ratio=True, scale_factor=1.0, type='Resize'),
                dict(keep_ratio=True, scale_factor=1.25, type='Resize'),
                dict(keep_ratio=True, scale_factor=1.5, type='Resize'),
                dict(keep_ratio=True, scale_factor=1.75, type='Resize'),
            ],
            [
                dict(direction='horizontal', prob=0.0, type='RandomFlip'),
                dict(direction='horizontal', prob=1.0, type='RandomFlip'),
            ],
            [
                dict(type='LoadAnnotations'),
            ],
            [
                dict(type='PackSegInputs'),
            ],
        ],
        type='TestTimeAug'),
]
val_cfg = dict(type='ValLoop')
val_dataloader = dict(
    batch_size=1,
    dataset=dict(
        data_prefix=dict(
            img_path='images/validation',
            seg_map_path='annotations/validation'),
        data_root='data/ade/ADEChallengeData2016',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(keep_ratio=True, scale=(
                2048,
                512,
            ), type='Resize'),
            dict(reduce_zero_label=True, type='LoadAnnotations'),
            dict(type='PackSegInputs'),
        ],
        type='ADE20KDataset'),
    num_workers=4,
    persistent_workers=True,
    sampler=dict(shuffle=False, type='DefaultSampler'))
val_evaluator = dict(
    iou_metrics=[
        'mIoU',
    ], type='IoUMetric')
vis_backends = [
    dict(type='LocalVisBackend'),
]
visualizer = dict(
    name='visualizer',
    save_dir=
    '../aa_workdir/ade/upernet/upernet_internimage_b_512_160k_ade20k/attack_cospgd/norm_linf/iterations_20/epsilon_8/alpha_0.01/show_dir',
    type='SegLocalVisualizer',
    vis_backends=[
        dict(type='LocalVisBackend'),
    ])
work_dir = '../aa_workdir/ade/upernet/upernet_internimage_b_512_160k_ade20k/attack_cospgd/norm_linf/iterations_20/epsilon_8/alpha_0.01'

/pfs/work7/workspace/scratch/ma_dschader-team_project_fss2024/benchmarking_robustness/semantic_segmentation/mmsegmentation/ops_dcnv3/modules/dcnv3.py:20: UserWarning: Now, we support DCNv4 in InternImage.
  warnings.warn('Now, we support DCNv4 in InternImage.')
2024-10-29 06:13:32,374 - mmseg - INFO - using core type: DCNv3
2024-10-29 06:13:32,374 - mmseg - INFO - using activation layer: GELU
2024-10-29 06:13:32,374 - mmseg - INFO - using main norm layer: LN
2024-10-29 06:13:32,374 - mmseg - INFO - using dpr: linear, 0.4
2024-10-29 06:13:32,374 - mmseg - INFO - level2_post_norm: False
2024-10-29 06:13:32,374 - mmseg - INFO - level2_post_norm_block_ids: None
2024-10-29 06:13:32,374 - mmseg - INFO - res_post_norm: False
2024-10-29 06:13:32,374 - mmseg - INFO - use_dcn_v4_op: False
10/29 06:20:18 - mmengine - INFO - Distributed training is not used, all SyncBatchNorm (SyncBN) layers in the model will be automatically reverted to BatchNormXd layers if they are used.
10/29 06:20:18 - mmengine - INFO - Hooks will be executed in the following order:
before_run:
(VERY_HIGH   ) RuntimeInfoHook                    
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
before_train:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_train_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(NORMAL      ) DistSamplerSeedHook                
 -------------------- 
before_train_iter:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_train_iter:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(NORMAL      ) SegVisualizationHook               
(BELOW_NORMAL) LoggerHook                         
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
after_train_epoch:
(NORMAL      ) IterTimerHook                      
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_val:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
before_val_epoch:
(NORMAL      ) IterTimerHook                      
 -------------------- 
before_val_iter:
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_val_iter:
(NORMAL      ) IterTimerHook                      
(NORMAL      ) SegVisualizationHook               
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_val_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
after_val:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
after_train:
(VERY_HIGH   ) RuntimeInfoHook                    
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_test:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
before_test_epoch:
(NORMAL      ) IterTimerHook                      
 -------------------- 
before_test_iter:
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_test_iter:
(NORMAL      ) IterTimerHook                      
(NORMAL      ) SegVisualizationHook               
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_test_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_test:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
after_run:
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
10/29 06:20:19 - mmengine - WARNING - The prefix is not set in metric class IoUMetric.
Loads checkpoint by local backend from path: ../checkpoint_files/upernet/upernet_internimage_b_512_160k_ade20k.pth
10/29 06:20:21 - mmengine - INFO - Load checkpoint from ../checkpoint_files/upernet/upernet_internimage_b_512_160k_ade20k.pth
10/29 06:35:07 - mmengine - INFO - Iter(test) [  50/2000]    eta: 9:34:55  time: 6.3144  data_time: 0.0020  memory: 48454  
10/29 06:40:23 - mmengine - INFO - Iter(test) [ 100/2000]    eta: 6:20:17  time: 6.6710  data_time: 0.0021  memory: 48255  
10/29 06:45:01 - mmengine - INFO - Iter(test) [ 150/2000]    eta: 5:04:02  time: 5.6454  data_time: 0.0016  memory: 47111  
10/29 06:50:03 - mmengine - INFO - Iter(test) [ 200/2000]    eta: 4:27:13  time: 5.7944  data_time: 0.0016  memory: 59422  
10/29 06:54:49 - mmengine - INFO - Iter(test) [ 250/2000]    eta: 4:01:13  time: 5.3711  data_time: 0.0016  memory: 60411  
10/29 06:59:32 - mmengine - INFO - Iter(test) [ 300/2000]    eta: 3:41:56  time: 4.9829  data_time: 0.0025  memory: 48199  
10/29 07:04:24 - mmengine - INFO - Iter(test) [ 350/2000]    eta: 3:27:40  time: 5.2502  data_time: 0.0015  memory: 48112  
10/29 07:09:00 - mmengine - INFO - Iter(test) [ 400/2000]    eta: 3:14:34  time: 5.4818  data_time: 0.0015  memory: 48111  
10/29 07:12:54 - mmengine - INFO - Iter(test) [ 450/2000]    eta: 3:00:59  time: 4.8490  data_time: 0.0014  memory: 46936  
10/29 07:17:08 - mmengine - INFO - Iter(test) [ 500/2000]    eta: 2:50:16  time: 4.6963  data_time: 0.0014  memory: 45348  
10/29 07:21:36 - mmengine - INFO - Iter(test) [ 550/2000]    eta: 2:41:26  time: 5.7495  data_time: 0.0016  memory: 48154  
10/29 07:25:44 - mmengine - INFO - Iter(test) [ 600/2000]    eta: 2:32:31  time: 5.4050  data_time: 0.0016  memory: 48157  
10/29 07:30:05 - mmengine - INFO - Iter(test) [ 650/2000]    eta: 2:24:46  time: 5.5105  data_time: 0.0014  memory: 57844  
10/29 07:35:13 - mmengine - INFO - Iter(test) [ 700/2000]    eta: 2:19:00  time: 5.6723  data_time: 0.0015  memory: 48494  
10/29 07:40:13 - mmengine - INFO - Iter(test) [ 750/2000]    eta: 2:13:05  time: 7.0792  data_time: 0.0014  memory: 48892  
10/29 07:44:24 - mmengine - INFO - Iter(test) [ 800/2000]    eta: 2:06:02  time: 4.9163  data_time: 0.0015  memory: 47129  
10/29 07:48:42 - mmengine - INFO - Iter(test) [ 850/2000]    eta: 1:59:30  time: 5.2456  data_time: 0.0016  memory: 12300  
10/29 07:52:52 - mmengine - INFO - Iter(test) [ 900/2000]    eta: 1:53:03  time: 4.8825  data_time: 0.0014  memory: 46467  
10/29 07:57:44 - mmengine - INFO - Iter(test) [ 950/2000]    eta: 1:47:35  time: 5.7701  data_time: 0.0014  memory: 48018  
10/29 08:02:02 - mmengine - INFO - Iter(test) [1000/2000]    eta: 1:41:40  time: 4.8699  data_time: 0.0014  memory: 48050  
10/29 08:06:47 - mmengine - INFO - Iter(test) [1050/2000]    eta: 1:36:16  time: 6.3724  data_time: 0.0015  memory: 58076  
10/29 08:11:12 - mmengine - INFO - Iter(test) [1100/2000]    eta: 1:30:40  time: 4.7682  data_time: 0.0015  memory: 47138  
10/29 08:15:24 - mmengine - INFO - Iter(test) [1150/2000]    eta: 1:25:01  time: 5.4133  data_time: 0.0015  memory: 45993  
10/29 08:19:32 - mmengine - INFO - Iter(test) [1200/2000]    eta: 1:19:26  time: 4.6563  data_time: 0.0015  memory: 18826  
10/29 08:23:36 - mmengine - INFO - Iter(test) [1250/2000]    eta: 1:13:56  time: 5.1050  data_time: 0.0015  memory: 47266  
10/29 08:27:29 - mmengine - INFO - Iter(test) [1300/2000]    eta: 1:08:26  time: 5.2924  data_time: 0.0014  memory: 12429  
10/29 08:31:35 - mmengine - INFO - Iter(test) [1350/2000]    eta: 1:03:10  time: 4.5524  data_time: 0.0015  memory: 45109  
10/29 08:36:03 - mmengine - INFO - Iter(test) [1400/2000]    eta: 0:58:09  time: 5.5141  data_time: 0.0014  memory: 47624  
10/29 08:40:07 - mmengine - INFO - Iter(test) [1450/2000]    eta: 0:53:00  time: 5.6917  data_time: 0.0016  memory: 46498  
10/29 08:44:01 - mmengine - INFO - Iter(test) [1500/2000]    eta: 0:47:52  time: 4.4272  data_time: 0.0014  memory: 12300  
10/29 08:48:12 - mmengine - INFO - Iter(test) [1550/2000]    eta: 0:42:54  time: 4.8516  data_time: 0.0014  memory: 47859  
10/29 08:52:10 - mmengine - INFO - Iter(test) [1600/2000]    eta: 0:37:56  time: 5.0155  data_time: 0.0016  memory: 12188  
10/29 08:56:20 - mmengine - INFO - Iter(test) [1650/2000]    eta: 0:33:04  time: 4.5182  data_time: 0.0014  memory: 48068  
10/29 09:00:37 - mmengine - INFO - Iter(test) [1700/2000]    eta: 0:28:16  time: 4.8711  data_time: 0.0016  memory: 46720  
10/29 09:04:56 - mmengine - INFO - Iter(test) [1750/2000]    eta: 0:23:30  time: 4.9164  data_time: 0.0016  memory: 47609  
10/29 09:08:57 - mmengine - INFO - Iter(test) [1800/2000]    eta: 0:18:43  time: 4.9928  data_time: 0.0016  memory: 45351  
10/29 09:13:04 - mmengine - INFO - Iter(test) [1850/2000]    eta: 0:14:00  time: 4.9180  data_time: 0.0016  memory: 11105  
10/29 09:16:55 - mmengine - INFO - Iter(test) [1900/2000]    eta: 0:09:17  time: 4.5762  data_time: 0.0015  memory: 48594  
10/29 09:21:06 - mmengine - INFO - Iter(test) [1950/2000]    eta: 0:04:38  time: 4.6940  data_time: 0.0014  memory: 45801  
10/29 09:25:08 - mmengine - INFO - Iter(test) [2000/2000]    eta: 0:00:00  time: 4.3524  data_time: 0.0013  memory: 48672  
10/29 09:25:08 - mmengine - INFO - per class results:
10/29 09:25:08 - mmengine - INFO - 
+---------------------+------+------+
|        Class        | IoU  | Acc  |
+---------------------+------+------+
|         wall        | 0.0  | 0.0  |
|       building      | 0.0  | 0.0  |
|         sky         | 0.0  | 0.0  |
|        floor        | 0.0  | 0.0  |
|         tree        | 0.0  | 0.0  |
|       ceiling       | 0.0  | 0.0  |
|         road        | 0.0  | 0.0  |
|         bed         | 0.0  | 0.0  |
|      windowpane     | 0.0  | 0.0  |
|        grass        | 0.0  | 0.0  |
|       cabinet       | 0.0  | 0.0  |
|       sidewalk      | 0.0  | 0.0  |
|        person       | 0.12 | 0.24 |
|        earth        | 0.0  | 0.0  |
|         door        | 0.0  | 0.0  |
|        table        | 0.0  | 0.0  |
|       mountain      | 0.0  | 0.0  |
|        plant        | 0.0  | 0.0  |
|       curtain       | 0.0  | 0.0  |
|        chair        | 0.0  | 0.0  |
|         car         | 0.0  | 0.0  |
|        water        | 0.0  | 0.0  |
|       painting      | 0.0  | 0.0  |
|         sofa        | 0.01 | 0.04 |
|        shelf        | 0.0  | 0.0  |
|        house        | 0.0  | 0.0  |
|         sea         | 0.0  | 0.0  |
|        mirror       | 0.08 | 0.65 |
|         rug         | 0.0  | 0.0  |
|        field        | 0.0  | 0.0  |
|       armchair      | 0.0  | 0.0  |
|         seat        | 0.0  | 0.0  |
|        fence        | 0.0  | 0.0  |
|         desk        | 0.0  | 0.0  |
|         rock        | 0.0  | 0.0  |
|       wardrobe      | 0.0  | 0.0  |
|         lamp        | 0.15 | 0.34 |
|       bathtub       | 0.0  | 0.0  |
|       railing       | 0.0  | 0.0  |
|       cushion       | 0.0  | 0.09 |
|         base        | 0.0  | 0.0  |
|         box         | 0.0  | 0.0  |
|        column       | 0.0  | 0.0  |
|      signboard      | 0.0  | 0.0  |
|   chest of drawers  | 0.0  | 0.0  |
|       counter       | 0.0  | 0.0  |
|         sand        | 0.0  | 0.0  |
|         sink        | 0.0  | 0.0  |
|      skyscraper     | 0.0  | 0.0  |
|      fireplace      | 0.0  | 0.0  |
|     refrigerator    | 0.0  | 0.0  |
|      grandstand     | 0.0  | 0.0  |
|         path        | 0.0  | 0.0  |
|        stairs       | 0.0  | 0.0  |
|        runway       | 0.0  | 0.0  |
|         case        | 0.0  | 0.0  |
|      pool table     | 0.0  | 0.0  |
|        pillow       | 0.0  | 0.0  |
|     screen door     | 0.0  | 0.0  |
|       stairway      | 0.0  | 0.0  |
|        river        | 0.0  | 0.0  |
|        bridge       | 0.0  | 0.0  |
|       bookcase      | 0.0  | 0.0  |
|        blind        | 0.0  | 0.0  |
|     coffee table    | 0.0  | 0.0  |
|        toilet       | 0.0  | 0.0  |
|        flower       | 0.0  | 0.0  |
|         book        | 0.0  | 0.0  |
|         hill        | 0.0  | 0.0  |
|        bench        | 0.0  | 0.0  |
|      countertop     | 0.0  | 0.0  |
|        stove        | 0.0  | 0.0  |
|         palm        | 0.0  | 0.0  |
|    kitchen island   | 0.0  | 0.0  |
|       computer      | 0.0  | 0.0  |
|     swivel chair    | 0.0  | 0.0  |
|         boat        | 0.0  | 0.0  |
|         bar         | 0.0  | 0.0  |
|    arcade machine   | 0.0  | 0.0  |
|        hovel        | 0.0  | 0.0  |
|         bus         | 0.0  | 0.0  |
|        towel        | 0.0  | 0.0  |
|        light        | 0.0  | 0.0  |
|        truck        | 0.0  | 0.0  |
|        tower        | 0.0  | 0.0  |
|      chandelier     | 0.0  | 0.0  |
|        awning       | 0.0  | 0.0  |
|     streetlight     | 0.0  | 0.0  |
|        booth        | 0.0  | 0.0  |
| television receiver | 0.0  | 0.0  |
|       airplane      | 0.0  | 0.0  |
|      dirt track     | 0.0  | 0.0  |
|       apparel       | 0.0  | 0.0  |
|         pole        | 0.0  | 0.0  |
|         land        | 0.0  | 0.0  |
|      bannister      | 0.0  | 0.0  |
|      escalator      | 0.0  | 0.0  |
|       ottoman       | 0.0  | 0.0  |
|        bottle       | 0.0  | 0.0  |
|        buffet       | 0.0  | 0.0  |
|        poster       | 0.0  | 0.0  |
|        stage        | 0.0  | 0.0  |
|         van         | 0.0  | 0.0  |
|         ship        | 0.0  | 0.0  |
|       fountain      | 0.0  | 0.0  |
|    conveyer belt    | 0.0  | 0.0  |
|        canopy       | 0.0  | 0.0  |
|        washer       | 0.0  | 0.0  |
|      plaything      | 0.0  | 0.0  |
|    swimming pool    | 0.0  | 0.0  |
|        stool        | 0.0  | 0.0  |
|        barrel       | 0.0  | 0.0  |
|        basket       | 0.0  | 0.0  |
|      waterfall      | 0.0  | 0.0  |
|         tent        | 0.0  | 0.0  |
|         bag         | 0.0  | 0.0  |
|       minibike      | 0.0  | 0.0  |
|        cradle       | 0.0  | 0.0  |
|         oven        | 0.0  | 0.0  |
|         ball        | 0.0  | 0.0  |
|         food        | 0.0  | 0.0  |
|         step        | 0.0  | 0.0  |
|         tank        | 0.0  | 0.0  |
|      trade name     | 0.0  | 0.0  |
|      microwave      | 0.0  | 0.0  |
|         pot         | 0.0  | 0.0  |
|        animal       | 0.0  | 0.0  |
|       bicycle       | 0.0  | 0.0  |
|         lake        | 0.0  | 0.0  |
|      dishwasher     | 0.0  | 0.0  |
|        screen       | 0.0  | 0.0  |
|       blanket       | 0.0  | 0.0  |
|      sculpture      | 0.0  | 0.0  |
|         hood        | 0.0  | 0.0  |
|        sconce       | 0.0  | 0.0  |
|         vase        | 0.0  | 0.0  |
|    traffic light    | 0.0  | 0.0  |
|         tray        | 0.0  | 0.0  |
|        ashcan       | 0.0  | 0.0  |
|         fan         | 0.0  | 0.0  |
|         pier        | 0.0  | 0.0  |
|      crt screen     | 0.0  | 0.0  |
|        plate        | 0.0  | 0.0  |
|       monitor       | 0.0  | 0.0  |
|    bulletin board   | 0.0  | 0.0  |
|        shower       | 0.0  | 0.0  |
|       radiator      | 0.0  | 0.0  |
|        glass        | 0.0  | 0.0  |
|        clock        | 0.0  | 0.0  |
|         flag        | 0.0  | 0.0  |
+---------------------+------+------+
10/29 09:25:08 - mmengine - INFO - Iter(test) [2000/2000]    aAcc: 0.0100  mIoU: 0.0000  mAcc: 0.0100  data_time: 0.0136  time: 5.5425
/pfs/work7/workspace/scratch/ma_dschader-team_project_fss2024/miniconda3/envs/py310/lib/python3.10/site-packages/torch/cuda/__init__.py:155: UserWarning: 
NVIDIA H100 PCIe with CUDA capability sm_90 is not compatible with the current PyTorch installation.
The current PyTorch install supports CUDA capabilities sm_37 sm_50 sm_60 sm_61 sm_70 sm_75 sm_80 sm_86 compute_37.
If you want to use the NVIDIA H100 PCIe GPU with PyTorch, please check the instructions at https://pytorch.org/get-started/locally/

  warnings.warn(incompatible_device_warn.format(device_name, capability, " ".join(arch_list), device_name))
10/29 09:25:14 - mmengine - INFO - 
------------------------------------------------------------
System environment:
    sys.platform: linux
    Python: 3.10.13 | packaged by conda-forge | (main, Dec 23 2023, 15:36:39) [GCC 12.3.0]
    CUDA available: True
    MUSA available: False
    numpy_random_seed: 572592232
    GPU 0: NVIDIA H100 PCIe
    CUDA_HOME: None
    GCC: gcc (GCC) 8.5.0 20210514 (Red Hat 8.5.0-18)
    PyTorch: 1.13.1
    PyTorch compiling details: PyTorch built with:
  - GCC 9.3
  - C++ Version: 201402
  - Intel(R) oneAPI Math Kernel Library Version 2023.1-Product Build 20230303 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v2.6.0 (Git Hash 52b5f107dd9cf10910aaa19cb47f3abf9b349815)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - LAPACK is enabled (usually provided by MKL)
  - NNPACK is enabled
  - CPU capability usage: AVX2
  - CUDA Runtime 11.7
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_61,code=sm_61;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86;-gencode;arch=compute_37,code=compute_37
  - CuDNN 8.5
  - Magma 2.6.1
  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.7, CUDNN_VERSION=8.5.0, CXX_COMPILER=/opt/rh/devtoolset-9/root/usr/bin/c++, CXX_FLAGS= -fabi-version=11 -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -DEDGE_PROFILER_USE_KINETO -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Werror=non-virtual-dtor -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wunused-local-typedefs -Wno-unused-parameter -Wno-unused-function -Wno-unused-result -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Werror=cast-function-type -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.13.1, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, USE_ROCM=OFF, 

    TorchVision: 0.14.1
    OpenCV: 3.4.18
    MMEngine: 0.10.4

Runtime environment:
    cudnn_benchmark: True
    mp_cfg: {'mp_start_method': 'fork', 'opencv_num_threads': 0}
    dist_cfg: {'backend': 'nccl'}
    seed: 572592232
    Distributed launcher: none
    Distributed training: False
    GPU number: 1
------------------------------------------------------------

10/29 09:25:15 - mmengine - INFO - Config:
checkpoint_config = dict(by_epoch=False, interval=1000, max_keep_ckpts=1)
crop_size = (
    512,
    512,
)
data = dict(
    samples_per_gpu=2,
    test=dict(pipeline=[
        dict(type='LoadImageFromFile'),
        dict(
            flip=False,
            img_scale=(
                2048,
                512,
            ),
            transforms=[
                dict(keep_ratio=True, type='Resize'),
                dict(size_divisor=32, type='ResizeToMultiple'),
                dict(type='RandomFlip'),
                dict(
                    mean=[
                        123.675,
                        116.28,
                        103.53,
                    ],
                    std=[
                        58.395,
                        57.12,
                        57.375,
                    ],
                    to_rgb=True,
                    type='Normalize'),
                dict(keys=[
                    'img',
                ], type='ImageToTensor'),
                dict(keys=[
                    'img',
                ], type='Collect'),
            ],
            type='MultiScaleFlipAug'),
    ]),
    val=dict(pipeline=[
        dict(type='LoadImageFromFile'),
        dict(
            flip=False,
            img_scale=(
                2048,
                512,
            ),
            transforms=[
                dict(keep_ratio=True, type='Resize'),
                dict(size_divisor=32, type='ResizeToMultiple'),
                dict(type='RandomFlip'),
                dict(
                    mean=[
                        123.675,
                        116.28,
                        103.53,
                    ],
                    std=[
                        58.395,
                        57.12,
                        57.375,
                    ],
                    to_rgb=True,
                    type='Normalize'),
                dict(keys=[
                    'img',
                ], type='ImageToTensor'),
                dict(keys=[
                    'img',
                ], type='Collect'),
            ],
            type='MultiScaleFlipAug'),
    ]))
data_preprocessor = dict(
    bgr_to_rgb=True,
    corruption=None,
    enable_normalization=False,
    mean=[
        123.675,
        116.28,
        103.53,
    ],
    pad_val=0,
    seg_pad_val=255,
    std=[
        58.395,
        57.12,
        57.375,
    ],
    type='SegDataPreProcessor')
data_root = 'data/ade/ADEChallengeData2016'
dataset_type = 'ADE20KDataset'
default_hooks = dict(
    checkpoint=dict(by_epoch=False, interval=16000, type='CheckpointHook'),
    logger=dict(interval=50, log_metric_by_epoch=False, type='LoggerHook'),
    param_scheduler=dict(type='ParamSchedulerHook'),
    sampler_seed=dict(type='DistSamplerSeedHook'),
    timer=dict(type='IterTimerHook'),
    visualization=dict(draw=True, type='SegVisualizationHook'))
default_scope = 'mmseg'
env_cfg = dict(
    cudnn_benchmark=True,
    dist_cfg=dict(backend='nccl'),
    mp_cfg=dict(mp_start_method='fork', opencv_num_threads=0))
evaluation = dict(interval=16000, metric='mIoU', save_best='mIoU')
img_norm_cfg = dict(
    mean=[
        123.675,
        116.28,
        103.53,
    ],
    std=[
        58.395,
        57.12,
        57.375,
    ],
    to_rgb=True)
img_ratios = [
    0.5,
    0.75,
    1.0,
    1.25,
    1.5,
    1.75,
]
launcher = 'none'
load_from = '../checkpoint_files/upernet/upernet_internimage_b_512_160k_ade20k.pth'
log_level = 'INFO'
log_processor = dict(by_epoch=False)
lr_config = dict(
    _delete_=True,
    by_epoch=False,
    min_lr=0.0,
    policy='poly',
    power=1.0,
    warmup='linear',
    warmup_iters=1500,
    warmup_ratio=1e-06)
model = dict(
    attack_cfg=dict(
        alpha=0.1, epsilon=64, iterations=20, name='cospgd', norm='l2'),
    attack_loss=dict(
        loss_weight=1.0,
        reduction='none',
        type='CrossEntropyLoss',
        use_sigmoid=False),
    auxiliary_head=dict(
        align_corners=False,
        channels=256,
        concat_input=False,
        dropout_ratio=0.1,
        in_channels=448,
        in_index=2,
        loss_decode=dict(
            loss_weight=0.4, type='CrossEntropyLoss', use_sigmoid=False),
        norm_cfg=dict(requires_grad=True, type='SyncBN'),
        num_classes=150,
        num_convs=1,
        type='FCNHead'),
    backbone=dict(
        channels=112,
        core_op='DCNv3',
        depths=[
            4,
            4,
            21,
            4,
        ],
        drop_path_rate=0.4,
        groups=[
            7,
            14,
            28,
            56,
        ],
        init_cfg=dict(
            checkpoint=
            'https://huggingface.co/OpenGVLab/InternImage/resolve/main/internimage_b_1k_224.pth',
            type='Pretrained'),
        layer_scale=1.0,
        mlp_ratio=4.0,
        norm_layer='LN',
        offset_scale=1.0,
        out_indices=(
            0,
            1,
            2,
            3,
        ),
        post_norm=True,
        type='InternImage',
        with_cp=False),
    data_preprocessor=dict(
        bgr_to_rgb=True,
        corruption=None,
        enable_normalization=False,
        mean=[
            123.675,
            116.28,
            103.53,
        ],
        pad_val=0,
        seg_pad_val=255,
        std=[
            58.395,
            57.12,
            57.375,
        ],
        type='SegDataPreProcessor'),
    decode_head=dict(
        align_corners=False,
        channels=512,
        dropout_ratio=0.1,
        in_channels=[
            112,
            224,
            448,
            896,
        ],
        in_index=[
            0,
            1,
            2,
            3,
        ],
        loss_decode=dict(
            loss_weight=1.0,
            reduction='none',
            type='CrossEntropyLoss',
            use_sigmoid=False),
        norm_cfg=dict(requires_grad=True, type='SyncBN'),
        num_classes=150,
        pool_scales=(
            1,
            2,
            3,
            6,
        ),
        type='UPerHead'),
    enable_normalization=False,
    normalize_mean_std=dict(
        mean=[
            123.675,
            116.28,
            103.53,
        ], std=[
            58.395,
            57.12,
            57.375,
        ]),
    perform_attack=True,
    pretrained='open-mmlab://resnet50_v1c',
    test_cfg=dict(mode='whole'),
    train_cfg=dict(),
    type='EncoderDecoder')
norm_cfg = dict(requires_grad=True, type='SyncBN')
optim_wrapper = dict(
    clip_grad=None,
    optimizer=dict(lr=0.01, momentum=0.9, type='SGD', weight_decay=0.0005),
    type='OptimWrapper')
optimizer = dict(
    betas=(
        0.9,
        0.999,
    ),
    constructor='CustomLayerDecayOptimizerConstructor',
    lr=6e-05,
    paramwise_cfg=dict(
        depths=[
            4,
            4,
            21,
            4,
        ], layer_decay_rate=1.0, num_layers=33),
    type='AdamW',
    weight_decay=0.05)
param_scheduler = [
    dict(
        begin=0,
        by_epoch=False,
        end=160000,
        eta_min=0.0001,
        power=0.9,
        type='PolyLR'),
]
pretrained = 'https://huggingface.co/OpenGVLab/InternImage/resolve/main/internimage_b_1k_224.pth'
resume = False
runner = dict(type='IterBasedRunner')
test_cfg = dict(type='TestLoop')
test_dataloader = dict(
    batch_size=1,
    dataset=dict(
        data_prefix=dict(
            img_path='images/validation',
            seg_map_path='annotations/validation'),
        data_root='data/ade/ADEChallengeData2016',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(keep_ratio=True, scale=(
                2048,
                512,
            ), type='Resize'),
            dict(reduce_zero_label=True, type='LoadAnnotations'),
            dict(type='PackSegInputs'),
        ],
        type='ADE20KDataset'),
    num_workers=4,
    persistent_workers=True,
    sampler=dict(shuffle=False, type='DefaultSampler'))
test_evaluator = dict(
    iou_metrics=[
        'mIoU',
    ], type='IoUMetric')
test_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(
        flip=False,
        img_scale=(
            2048,
            512,
        ),
        transforms=[
            dict(keep_ratio=True, type='Resize'),
            dict(size_divisor=32, type='ResizeToMultiple'),
            dict(type='RandomFlip'),
            dict(
                mean=[
                    123.675,
                    116.28,
                    103.53,
                ],
                std=[
                    58.395,
                    57.12,
                    57.375,
                ],
                to_rgb=True,
                type='Normalize'),
            dict(keys=[
                'img',
            ], type='ImageToTensor'),
            dict(keys=[
                'img',
            ], type='Collect'),
        ],
        type='MultiScaleFlipAug'),
]
train_cfg = dict(
    max_iters=160000, type='IterBasedTrainLoop', val_interval=16000)
train_dataloader = dict(
    batch_size=4,
    dataset=dict(
        data_prefix=dict(
            img_path='images/training', seg_map_path='annotations/training'),
        data_root='data/ade/ADEChallengeData2016',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(reduce_zero_label=True, type='LoadAnnotations'),
            dict(
                keep_ratio=True,
                ratio_range=(
                    0.5,
                    2.0,
                ),
                scale=(
                    2048,
                    512,
                ),
                type='RandomResize'),
            dict(
                cat_max_ratio=0.75, crop_size=(
                    512,
                    512,
                ), type='RandomCrop'),
            dict(prob=0.5, type='RandomFlip'),
            dict(type='PhotoMetricDistortion'),
            dict(type='PackSegInputs'),
        ],
        type='ADE20KDataset'),
    num_workers=4,
    persistent_workers=True,
    sampler=dict(shuffle=True, type='InfiniteSampler'))
train_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(reduce_zero_label=True, type='LoadAnnotations'),
    dict(
        keep_ratio=True,
        ratio_range=(
            0.5,
            2.0,
        ),
        scale=(
            2048,
            512,
        ),
        type='RandomResize'),
    dict(cat_max_ratio=0.75, crop_size=(
        512,
        512,
    ), type='RandomCrop'),
    dict(prob=0.5, type='RandomFlip'),
    dict(type='PhotoMetricDistortion'),
    dict(type='PackSegInputs'),
]
tta_model = dict(type='SegTTAModel')
tta_pipeline = [
    dict(backend_args=None, type='LoadImageFromFile'),
    dict(
        transforms=[
            [
                dict(keep_ratio=True, scale_factor=0.5, type='Resize'),
                dict(keep_ratio=True, scale_factor=0.75, type='Resize'),
                dict(keep_ratio=True, scale_factor=1.0, type='Resize'),
                dict(keep_ratio=True, scale_factor=1.25, type='Resize'),
                dict(keep_ratio=True, scale_factor=1.5, type='Resize'),
                dict(keep_ratio=True, scale_factor=1.75, type='Resize'),
            ],
            [
                dict(direction='horizontal', prob=0.0, type='RandomFlip'),
                dict(direction='horizontal', prob=1.0, type='RandomFlip'),
            ],
            [
                dict(type='LoadAnnotations'),
            ],
            [
                dict(type='PackSegInputs'),
            ],
        ],
        type='TestTimeAug'),
]
val_cfg = dict(type='ValLoop')
val_dataloader = dict(
    batch_size=1,
    dataset=dict(
        data_prefix=dict(
            img_path='images/validation',
            seg_map_path='annotations/validation'),
        data_root='data/ade/ADEChallengeData2016',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(keep_ratio=True, scale=(
                2048,
                512,
            ), type='Resize'),
            dict(reduce_zero_label=True, type='LoadAnnotations'),
            dict(type='PackSegInputs'),
        ],
        type='ADE20KDataset'),
    num_workers=4,
    persistent_workers=True,
    sampler=dict(shuffle=False, type='DefaultSampler'))
val_evaluator = dict(
    iou_metrics=[
        'mIoU',
    ], type='IoUMetric')
vis_backends = [
    dict(type='LocalVisBackend'),
]
visualizer = dict(
    name='visualizer',
    save_dir=
    '../aa_workdir/ade/upernet/upernet_internimage_b_512_160k_ade20k/attack_cospgd/norm_l2/iterations_20/epsilon_64/alpha_0.1/show_dir',
    type='SegLocalVisualizer',
    vis_backends=[
        dict(type='LocalVisBackend'),
    ])
work_dir = '../aa_workdir/ade/upernet/upernet_internimage_b_512_160k_ade20k/attack_cospgd/norm_l2/iterations_20/epsilon_64/alpha_0.1'

/pfs/work7/workspace/scratch/ma_dschader-team_project_fss2024/benchmarking_robustness/semantic_segmentation/mmsegmentation/ops_dcnv3/modules/dcnv3.py:20: UserWarning: Now, we support DCNv4 in InternImage.
  warnings.warn('Now, we support DCNv4 in InternImage.')
2024-10-29 09:25:19,106 - mmseg - INFO - using core type: DCNv3
2024-10-29 09:25:19,106 - mmseg - INFO - using activation layer: GELU
2024-10-29 09:25:19,106 - mmseg - INFO - using main norm layer: LN
2024-10-29 09:25:19,106 - mmseg - INFO - using dpr: linear, 0.4
2024-10-29 09:25:19,106 - mmseg - INFO - level2_post_norm: False
2024-10-29 09:25:19,106 - mmseg - INFO - level2_post_norm_block_ids: None
2024-10-29 09:25:19,106 - mmseg - INFO - res_post_norm: False
2024-10-29 09:25:19,106 - mmseg - INFO - use_dcn_v4_op: False
10/29 09:40:55 - mmengine - INFO - Distributed training is not used, all SyncBatchNorm (SyncBN) layers in the model will be automatically reverted to BatchNormXd layers if they are used.
10/29 09:40:55 - mmengine - INFO - Hooks will be executed in the following order:
before_run:
(VERY_HIGH   ) RuntimeInfoHook                    
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
before_train:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_train_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(NORMAL      ) DistSamplerSeedHook                
 -------------------- 
before_train_iter:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_train_iter:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(NORMAL      ) SegVisualizationHook               
(BELOW_NORMAL) LoggerHook                         
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
after_train_epoch:
(NORMAL      ) IterTimerHook                      
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_val:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
before_val_epoch:
(NORMAL      ) IterTimerHook                      
 -------------------- 
before_val_iter:
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_val_iter:
(NORMAL      ) IterTimerHook                      
(NORMAL      ) SegVisualizationHook               
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_val_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
after_val:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
after_train:
(VERY_HIGH   ) RuntimeInfoHook                    
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_test:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
before_test_epoch:
(NORMAL      ) IterTimerHook                      
 -------------------- 
before_test_iter:
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_test_iter:
(NORMAL      ) IterTimerHook                      
(NORMAL      ) SegVisualizationHook               
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_test_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_test:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
after_run:
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
10/29 09:40:56 - mmengine - WARNING - The prefix is not set in metric class IoUMetric.
Loads checkpoint by local backend from path: ../checkpoint_files/upernet/upernet_internimage_b_512_160k_ade20k.pth
10/29 09:40:58 - mmengine - INFO - Load checkpoint from ../checkpoint_files/upernet/upernet_internimage_b_512_160k_ade20k.pth
10/29 10:02:59 - mmengine - INFO - Iter(test) [  50/2000]    eta: 14:18:12  time: 6.2917  data_time: 0.0021  memory: 48454  
10/29 10:08:17 - mmengine - INFO - Iter(test) [ 100/2000]    eta: 8:38:52  time: 6.7005  data_time: 0.0021  memory: 48255  
10/29 10:12:56 - mmengine - INFO - Iter(test) [ 150/2000]    eta: 6:34:10  time: 5.8139  data_time: 0.0017  memory: 47111  
10/29 10:18:01 - mmengine - INFO - Iter(test) [ 200/2000]    eta: 5:33:29  time: 5.8240  data_time: 0.0016  memory: 59422  
10/29 10:22:50 - mmengine - INFO - Iter(test) [ 250/2000]    eta: 4:53:03  time: 5.3680  data_time: 0.0017  memory: 60411  
10/29 10:27:31 - mmengine - INFO - Iter(test) [ 300/2000]    eta: 4:23:43  time: 5.0000  data_time: 0.0017  memory: 48199  
10/29 10:32:23 - mmengine - INFO - Iter(test) [ 350/2000]    eta: 4:02:25  time: 5.2828  data_time: 0.0015  memory: 48112  
10/29 10:36:59 - mmengine - INFO - Iter(test) [ 400/2000]    eta: 3:44:04  time: 5.4840  data_time: 0.0014  memory: 48111  
10/29 10:40:52 - mmengine - INFO - Iter(test) [ 450/2000]    eta: 3:26:18  time: 4.8173  data_time: 0.0014  memory: 46936  
10/29 10:45:05 - mmengine - INFO - Iter(test) [ 500/2000]    eta: 3:12:16  time: 4.7183  data_time: 0.0014  memory: 45348  
10/29 10:49:31 - mmengine - INFO - Iter(test) [ 550/2000]    eta: 3:00:42  time: 5.6786  data_time: 0.0015  memory: 48154  
10/29 10:53:40 - mmengine - INFO - Iter(test) [ 600/2000]    eta: 2:49:36  time: 5.4139  data_time: 0.0016  memory: 48157  
10/29 10:58:25 - mmengine - INFO - Iter(test) [ 650/2000]    eta: 2:40:49  time: 6.3461  data_time: 0.0013  memory: 57844  
10/29 11:03:33 - mmengine - INFO - Iter(test) [ 700/2000]    eta: 2:33:20  time: 5.6202  data_time: 0.0016  memory: 48494  
10/29 11:08:25 - mmengine - INFO - Iter(test) [ 750/2000]    eta: 2:25:43  time: 6.7042  data_time: 0.0015  memory: 48892  
10/29 11:12:32 - mmengine - INFO - Iter(test) [ 800/2000]    eta: 2:17:18  time: 5.1968  data_time: 0.0016  memory: 47129  
10/29 11:16:55 - mmengine - INFO - Iter(test) [ 850/2000]    eta: 2:09:47  time: 5.2389  data_time: 0.0016  memory: 12300  
10/29 11:21:09 - mmengine - INFO - Iter(test) [ 900/2000]    eta: 2:02:26  time: 5.4722  data_time: 0.0014  memory: 46467  
10/29 11:25:56 - mmengine - INFO - Iter(test) [ 950/2000]    eta: 1:55:59  time: 5.6858  data_time: 0.0015  memory: 48018  
10/29 11:30:21 - mmengine - INFO - Iter(test) [1000/2000]    eta: 1:49:22  time: 5.1234  data_time: 0.0015  memory: 48050  
10/29 11:34:52 - mmengine - INFO - Iter(test) [1050/2000]    eta: 1:43:02  time: 5.9341  data_time: 0.0015  memory: 58076  
10/29 11:39:16 - mmengine - INFO - Iter(test) [1100/2000]    eta: 1:36:46  time: 4.9957  data_time: 0.0016  memory: 47138  
10/29 11:43:24 - mmengine - INFO - Iter(test) [1150/2000]    eta: 1:30:28  time: 5.1960  data_time: 0.0015  memory: 45993  
10/29 11:47:34 - mmengine - INFO - Iter(test) [1200/2000]    eta: 1:24:23  time: 4.7036  data_time: 0.0015  memory: 18821  
10/29 11:51:39 - mmengine - INFO - Iter(test) [1250/2000]    eta: 1:18:24  time: 5.0553  data_time: 0.0015  memory: 47266  
10/29 11:55:31 - mmengine - INFO - Iter(test) [1300/2000]    eta: 1:12:25  time: 4.8837  data_time: 0.0015  memory: 12434  
10/29 11:59:39 - mmengine - INFO - Iter(test) [1350/2000]    eta: 1:06:46  time: 4.4578  data_time: 0.0015  memory: 45109  
10/29 12:04:10 - mmengine - INFO - Iter(test) [1400/2000]    eta: 1:01:22  time: 5.7909  data_time: 0.0015  memory: 47624  
10/29 12:08:08 - mmengine - INFO - Iter(test) [1450/2000]    eta: 0:55:48  time: 5.5385  data_time: 0.0029  memory: 46498  
10/29 12:12:03 - mmengine - INFO - Iter(test) [1500/2000]    eta: 0:50:21  time: 4.4926  data_time: 0.0014  memory: 12300  
10/29 12:16:21 - mmengine - INFO - Iter(test) [1550/2000]    eta: 0:45:06  time: 5.1693  data_time: 0.0014  memory: 47859  
10/29 12:20:19 - mmengine - INFO - Iter(test) [1600/2000]    eta: 0:39:49  time: 4.7977  data_time: 0.0015  memory: 12190  
10/29 12:24:27 - mmengine - INFO - Iter(test) [1650/2000]    eta: 0:34:40  time: 4.4191  data_time: 0.0014  memory: 48068  
10/29 12:28:47 - mmengine - INFO - Iter(test) [1700/2000]    eta: 0:29:36  time: 4.8395  data_time: 0.0016  memory: 46720  
10/29 12:33:07 - mmengine - INFO - Iter(test) [1750/2000]    eta: 0:24:35  time: 4.9476  data_time: 0.0014  memory: 47609  
10/29 12:37:05 - mmengine - INFO - Iter(test) [1800/2000]    eta: 0:19:33  time: 4.9272  data_time: 0.0016  memory: 45351  
10/29 12:41:10 - mmengine - INFO - Iter(test) [1850/2000]    eta: 0:14:36  time: 4.8878  data_time: 0.0016  memory: 11101  
10/29 12:45:04 - mmengine - INFO - Iter(test) [1900/2000]    eta: 0:09:41  time: 4.5947  data_time: 0.0015  memory: 48594  
10/29 12:49:16 - mmengine - INFO - Iter(test) [1950/2000]    eta: 0:04:49  time: 4.6942  data_time: 0.0015  memory: 45801  
10/29 12:53:25 - mmengine - INFO - Iter(test) [2000/2000]    eta: 0:00:00  time: 4.5077  data_time: 0.0014  memory: 48672  
10/29 12:53:25 - mmengine - INFO - per class results:
10/29 12:53:25 - mmengine - INFO - 
+---------------------+-------+-------+
|        Class        |  IoU  |  Acc  |
+---------------------+-------+-------+
|         wall        | 64.03 | 76.81 |
|       building      |  71.1 | 85.64 |
|         sky         | 89.17 | 93.21 |
|        floor        | 72.88 | 83.73 |
|         tree        | 66.82 | 82.48 |
|       ceiling       |  71.6 | 85.33 |
|         road        | 70.09 | 78.95 |
|         bed         | 80.61 |  91.6 |
|      windowpane     | 47.68 | 68.24 |
|        grass        | 54.35 | 68.87 |
|       cabinet       | 41.73 | 58.75 |
|       sidewalk      | 46.02 | 67.98 |
|        person       | 76.52 |  90.2 |
|        earth        |  23.7 | 36.38 |
|         door        | 21.12 | 36.12 |
|        table        | 46.99 | 64.32 |
|       mountain      | 40.25 | 58.81 |
|        plant        | 40.02 | 51.36 |
|       curtain       |  56.0 | 72.07 |
|        chair        | 44.32 | 57.65 |
|         car         | 77.51 | 86.64 |
|        water        | 40.54 |  54.2 |
|       painting      | 62.12 | 80.46 |
|         sofa        | 47.34 | 66.84 |
|        shelf        | 25.75 | 41.75 |
|        house        | 15.03 | 25.95 |
|         sea         | 45.59 | 67.05 |
|        mirror       | 48.86 | 59.94 |
|         rug         | 44.05 |  62.6 |
|        field        | 15.25 | 35.61 |
|       armchair      | 21.48 |  36.6 |
|         seat        |  44.4 | 65.49 |
|        fence        | 30.37 | 42.11 |
|         desk        |  31.8 | 52.22 |
|         rock        | 26.05 | 45.06 |
|       wardrobe      | 25.23 | 44.52 |
|         lamp        | 57.11 | 72.22 |
|       bathtub       |  64.4 | 75.47 |
|       railing       | 22.61 |  37.7 |
|       cushion       | 43.13 | 61.14 |
|         base        | 10.32 | 16.13 |
|         box         | 20.35 | 29.21 |
|        column       | 26.51 | 44.31 |
|      signboard      | 30.81 | 47.39 |
|   chest of drawers  | 20.98 | 42.54 |
|       counter       |  5.4  |  7.51 |
|         sand        | 26.61 | 39.61 |
|         sink        | 59.76 | 77.75 |
|      skyscraper     | 23.73 | 32.48 |
|      fireplace      | 55.36 | 82.07 |
|     refrigerator    |  55.9 | 73.69 |
|      grandstand     | 29.68 | 60.72 |
|         path        |  9.33 | 17.12 |
|        stairs       | 21.77 | 29.96 |
|        runway       | 58.23 | 82.85 |
|         case        | 26.58 | 42.35 |
|      pool table     | 86.55 | 94.22 |
|        pillow       | 38.87 |  51.9 |
|     screen door     | 21.96 | 31.22 |
|       stairway      | 23.68 | 32.93 |
|        river        |  3.15 | 10.26 |
|        bridge       | 28.68 | 43.83 |
|       bookcase      | 28.77 |  47.4 |
|        blind        | 28.73 | 35.97 |
|     coffee table    | 50.93 | 77.55 |
|        toilet       | 75.05 | 81.62 |
|        flower       | 39.58 |  57.4 |
|         book        | 44.44 | 69.49 |
|         hill        |  2.04 |  3.11 |
|        bench        | 31.77 | 41.79 |
|      countertop     | 44.21 | 61.06 |
|        stove        | 60.35 | 70.83 |
|         palm        | 45.43 |  62.2 |
|    kitchen island   |  17.7 | 44.42 |
|       computer      | 55.58 | 63.83 |
|     swivel chair    | 24.13 |  40.5 |
|         boat        | 36.71 | 47.91 |
|         bar         | 13.85 | 19.17 |
|    arcade machine   | 16.73 | 17.46 |
|        hovel        | 14.54 | 19.11 |
|         bus         | 84.22 | 96.18 |
|        towel        | 47.28 |  65.9 |
|        light        | 50.77 | 61.65 |
|        truck        |  7.53 | 13.61 |
|        tower        |  9.56 | 16.68 |
|      chandelier     |  63.2 | 76.98 |
|        awning       |  16.5 | 26.42 |
|     streetlight     | 23.47 | 34.56 |
|        booth        | 27.68 | 35.73 |
| television receiver |  54.8 | 66.04 |
|       airplane      | 52.89 | 66.07 |
|      dirt track     |  0.0  |  0.01 |
|       apparel       | 24.64 | 38.17 |
|         pole        |  18.5 | 27.59 |
|         land        |  0.01 |  0.02 |
|      bannister      |  7.95 | 10.95 |
|      escalator      |  11.6 | 13.77 |
|       ottoman       | 24.63 | 37.53 |
|        bottle       | 34.29 | 57.09 |
|        buffet       | 30.28 | 36.93 |
|        poster       |  6.43 | 11.61 |
|        stage        |  7.24 | 12.83 |
|         van         | 29.07 | 54.63 |
|         ship        | 32.18 | 53.98 |
|       fountain      | 12.08 | 13.51 |
|    conveyer belt    | 42.79 | 68.53 |
|        canopy       |  9.4  | 15.42 |
|        washer       |  65.8 | 69.11 |
|      plaything      | 21.03 | 34.62 |
|    swimming pool    | 29.86 | 56.95 |
|        stool        | 30.51 | 45.72 |
|        barrel       | 19.26 |  65.1 |
|        basket       | 26.86 | 41.45 |
|      waterfall      | 39.12 | 49.16 |
|         tent        | 81.01 | 98.76 |
|         bag         |  9.81 | 12.54 |
|       minibike      |  66.4 | 83.47 |
|        cradle       | 68.82 |  80.8 |
|         oven        | 12.06 | 38.47 |
|         ball        | 43.28 | 47.11 |
|         food        |  36.6 | 44.39 |
|         step        |  6.9  | 10.72 |
|         tank        |  39.6 | 49.99 |
|      trade name     | 22.03 | 28.99 |
|      microwave      | 37.12 | 46.34 |
|         pot         | 35.32 | 42.99 |
|        animal       | 44.53 | 45.65 |
|       bicycle       | 51.53 | 70.68 |
|         lake        | 50.49 | 56.74 |
|      dishwasher     | 45.69 | 63.92 |
|        screen       | 38.42 | 61.46 |
|       blanket       |  6.07 |  8.35 |
|      sculpture      | 49.73 | 60.63 |
|         hood        | 31.51 | 43.56 |
|        sconce       | 32.51 | 47.17 |
|         vase        | 39.86 | 55.24 |
|    traffic light    | 28.95 | 45.92 |
|         tray        |  7.01 | 19.72 |
|        ashcan       | 23.96 | 35.05 |
|         fan         | 58.78 | 72.81 |
|         pier        | 34.46 | 77.11 |
|      crt screen     |  3.22 | 11.08 |
|        plate        | 47.06 | 59.51 |
|       monitor       |  3.02 |  5.54 |
|    bulletin board   | 41.11 | 61.73 |
|        shower       |  1.67 |  7.13 |
|       radiator      | 39.18 | 53.65 |
|        glass        | 13.98 | 14.83 |
|        clock        | 23.02 | 33.14 |
|         flag        | 43.04 | 46.83 |
+---------------------+-------+-------+
10/29 12:53:25 - mmengine - INFO - Iter(test) [2000/2000]    aAcc: 73.0700  mIoU: 36.0500  mAcc: 49.2600  data_time: 0.0139  time: 5.7730
Runtime: 24007

============================= JOB FEEDBACK =============================

NodeName=uc2n916
Job ID: 24537447
Array Job ID: 24533825_1
Cluster: uc2
User/Group: ma_dschader/ma_ma
State: COMPLETED (exit code 0)
Nodes: 1
Cores per node: 8
CPU Utilized: 06:03:27
CPU Efficiency: 11.34% of 2-05:24:40 core-walltime
Job Wall-clock time: 06:40:35
Memory Utilized: 8.66 GB
Memory Efficiency: 43.31% of 20.00 GB
