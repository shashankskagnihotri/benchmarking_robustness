Started at Sat Oct 26 02:10:26 CEST 2024
10/26 02:10:33 - mmengine - INFO - 
------------------------------------------------------------
System environment:
    sys.platform: linux
    Python: 3.10.13 | packaged by conda-forge | (main, Dec 23 2023, 15:36:39) [GCC 12.3.0]
    CUDA available: True
    MUSA available: False
    numpy_random_seed: 1683587138
    GPU 0: Tesla V100-SXM2-32GB
    CUDA_HOME: None
    GCC: gcc (GCC) 8.5.0 20210514 (Red Hat 8.5.0-18)
    PyTorch: 1.13.1
    PyTorch compiling details: PyTorch built with:
  - GCC 9.3
  - C++ Version: 201402
  - Intel(R) oneAPI Math Kernel Library Version 2023.1-Product Build 20230303 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v2.6.0 (Git Hash 52b5f107dd9cf10910aaa19cb47f3abf9b349815)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - LAPACK is enabled (usually provided by MKL)
  - NNPACK is enabled
  - CPU capability usage: AVX2
  - CUDA Runtime 11.7
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_61,code=sm_61;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86;-gencode;arch=compute_37,code=compute_37
  - CuDNN 8.5
  - Magma 2.6.1
  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.7, CUDNN_VERSION=8.5.0, CXX_COMPILER=/opt/rh/devtoolset-9/root/usr/bin/c++, CXX_FLAGS= -fabi-version=11 -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -DEDGE_PROFILER_USE_KINETO -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Werror=non-virtual-dtor -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wunused-local-typedefs -Wno-unused-parameter -Wno-unused-function -Wno-unused-result -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Werror=cast-function-type -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.13.1, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, USE_ROCM=OFF, 

    TorchVision: 0.14.1
    OpenCV: 3.4.18
    MMEngine: 0.10.4

Runtime environment:
    cudnn_benchmark: True
    mp_cfg: {'mp_start_method': 'fork', 'opencv_num_threads': 0}
    dist_cfg: {'backend': 'nccl'}
    seed: 1683587138
    Distributed launcher: none
    Distributed training: False
    GPU number: 1
------------------------------------------------------------

10/26 02:10:34 - mmengine - INFO - Config:
checkpoint_config = dict(by_epoch=False, interval=1000, max_keep_ckpts=1)
crop_size = (
    512,
    512,
)
data = dict(
    samples_per_gpu=2,
    test=dict(pipeline=[
        dict(type='LoadImageFromFile'),
        dict(
            flip=False,
            img_scale=(
                2048,
                512,
            ),
            transforms=[
                dict(keep_ratio=True, type='Resize'),
                dict(size_divisor=32, type='ResizeToMultiple'),
                dict(type='RandomFlip'),
                dict(
                    mean=[
                        123.675,
                        116.28,
                        103.53,
                    ],
                    std=[
                        58.395,
                        57.12,
                        57.375,
                    ],
                    to_rgb=True,
                    type='Normalize'),
                dict(keys=[
                    'img',
                ], type='ImageToTensor'),
                dict(keys=[
                    'img',
                ], type='Collect'),
            ],
            type='MultiScaleFlipAug'),
    ]),
    val=dict(pipeline=[
        dict(type='LoadImageFromFile'),
        dict(
            flip=False,
            img_scale=(
                2048,
                512,
            ),
            transforms=[
                dict(keep_ratio=True, type='Resize'),
                dict(size_divisor=32, type='ResizeToMultiple'),
                dict(type='RandomFlip'),
                dict(
                    mean=[
                        123.675,
                        116.28,
                        103.53,
                    ],
                    std=[
                        58.395,
                        57.12,
                        57.375,
                    ],
                    to_rgb=True,
                    type='Normalize'),
                dict(keys=[
                    'img',
                ], type='ImageToTensor'),
                dict(keys=[
                    'img',
                ], type='Collect'),
            ],
            type='MultiScaleFlipAug'),
    ]))
data_preprocessor = dict(
    bgr_to_rgb=True,
    corruption=None,
    enable_normalization=False,
    mean=[
        123.675,
        116.28,
        103.53,
    ],
    pad_val=0,
    seg_pad_val=255,
    std=[
        58.395,
        57.12,
        57.375,
    ],
    type='SegDataPreProcessor')
data_root = 'data/ade/ADEChallengeData2016'
dataset_type = 'ADE20KDataset'
default_hooks = dict(
    checkpoint=dict(by_epoch=False, interval=16000, type='CheckpointHook'),
    logger=dict(interval=50, log_metric_by_epoch=False, type='LoggerHook'),
    param_scheduler=dict(type='ParamSchedulerHook'),
    sampler_seed=dict(type='DistSamplerSeedHook'),
    timer=dict(type='IterTimerHook'),
    visualization=dict(draw=True, type='SegVisualizationHook'))
default_scope = 'mmseg'
env_cfg = dict(
    cudnn_benchmark=True,
    dist_cfg=dict(backend='nccl'),
    mp_cfg=dict(mp_start_method='fork', opencv_num_threads=0))
evaluation = dict(interval=16000, metric='mIoU', save_best='mIoU')
img_norm_cfg = dict(
    mean=[
        123.675,
        116.28,
        103.53,
    ],
    std=[
        58.395,
        57.12,
        57.375,
    ],
    to_rgb=True)
img_ratios = [
    0.5,
    0.75,
    1.0,
    1.25,
    1.5,
    1.75,
]
launcher = 'none'
load_from = '../checkpoint_files/upernet/upernet_internimage_s_512_160k_ade20k.pth'
log_level = 'INFO'
log_processor = dict(by_epoch=False)
lr_config = dict(
    _delete_=True,
    by_epoch=False,
    min_lr=0.0,
    policy='poly',
    power=1.0,
    warmup='linear',
    warmup_iters=1500,
    warmup_ratio=1e-06)
model = dict(
    attack_cfg=dict(
        alpha=0.1, epsilon=64, iterations=20, name='pgd', norm='l2'),
    attack_loss=dict(
        loss_weight=1.0,
        reduction='none',
        type='CrossEntropyLoss',
        use_sigmoid=False),
    auxiliary_head=dict(
        align_corners=False,
        channels=256,
        concat_input=False,
        dropout_ratio=0.1,
        in_channels=320,
        in_index=2,
        loss_decode=dict(
            loss_weight=0.4, type='CrossEntropyLoss', use_sigmoid=False),
        norm_cfg=dict(requires_grad=True, type='SyncBN'),
        num_classes=150,
        num_convs=1,
        type='FCNHead'),
    backbone=dict(
        channels=80,
        core_op='DCNv3',
        depths=[
            4,
            4,
            21,
            4,
        ],
        drop_path_rate=0.3,
        groups=[
            5,
            10,
            20,
            40,
        ],
        init_cfg=dict(
            checkpoint=
            'https://huggingface.co/OpenGVLab/InternImage/resolve/main/internimage_s_1k_224.pth',
            type='Pretrained'),
        layer_scale=1.0,
        mlp_ratio=4.0,
        norm_layer='LN',
        offset_scale=1.0,
        post_norm=True,
        type='InternImage',
        with_cp=False),
    data_preprocessor=dict(
        bgr_to_rgb=True,
        corruption=None,
        enable_normalization=False,
        mean=[
            123.675,
            116.28,
            103.53,
        ],
        pad_val=0,
        seg_pad_val=255,
        std=[
            58.395,
            57.12,
            57.375,
        ],
        type='SegDataPreProcessor'),
    decode_head=dict(
        align_corners=False,
        channels=512,
        dropout_ratio=0.1,
        in_channels=[
            80,
            160,
            320,
            640,
        ],
        in_index=[
            0,
            1,
            2,
            3,
        ],
        loss_decode=dict(
            loss_weight=1.0,
            reduction='none',
            type='CrossEntropyLoss',
            use_sigmoid=False),
        norm_cfg=dict(requires_grad=True, type='SyncBN'),
        num_classes=150,
        pool_scales=(
            1,
            2,
            3,
            6,
        ),
        type='UPerHead'),
    enable_normalization=False,
    normalize_mean_std=dict(
        mean=[
            123.675,
            116.28,
            103.53,
        ], std=[
            58.395,
            57.12,
            57.375,
        ]),
    perform_attack=True,
    pretrained='open-mmlab://resnet50_v1c',
    test_cfg=dict(mode='whole'),
    train_cfg=dict(),
    type='EncoderDecoder')
norm_cfg = dict(requires_grad=True, type='SyncBN')
optim_wrapper = dict(
    clip_grad=None,
    optimizer=dict(lr=0.01, momentum=0.9, type='SGD', weight_decay=0.0005),
    type='OptimWrapper')
optimizer = dict(
    betas=(
        0.9,
        0.999,
    ),
    constructor='CustomLayerDecayOptimizerConstructor',
    lr=6e-05,
    paramwise_cfg=dict(
        depths=[
            4,
            4,
            21,
            4,
        ], layer_decay_rate=1.0, num_layers=33),
    type='AdamW',
    weight_decay=0.05)
param_scheduler = [
    dict(
        begin=0,
        by_epoch=False,
        end=160000,
        eta_min=0.0001,
        power=0.9,
        type='PolyLR'),
]
pretrained = 'https://huggingface.co/OpenGVLab/InternImage/resolve/main/internimage_s_1k_224.pth'
resume = False
runner = dict(type='IterBasedRunner')
test_cfg = dict(type='TestLoop')
test_dataloader = dict(
    batch_size=1,
    dataset=dict(
        data_prefix=dict(
            img_path='images/validation',
            seg_map_path='annotations/validation'),
        data_root='data/ade/ADEChallengeData2016',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(keep_ratio=True, scale=(
                2048,
                512,
            ), type='Resize'),
            dict(reduce_zero_label=True, type='LoadAnnotations'),
            dict(type='PackSegInputs'),
        ],
        type='ADE20KDataset'),
    num_workers=4,
    persistent_workers=True,
    sampler=dict(shuffle=False, type='DefaultSampler'))
test_evaluator = dict(
    iou_metrics=[
        'mIoU',
    ], type='IoUMetric')
test_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(
        flip=False,
        img_scale=(
            2048,
            512,
        ),
        transforms=[
            dict(keep_ratio=True, type='Resize'),
            dict(size_divisor=32, type='ResizeToMultiple'),
            dict(type='RandomFlip'),
            dict(
                mean=[
                    123.675,
                    116.28,
                    103.53,
                ],
                std=[
                    58.395,
                    57.12,
                    57.375,
                ],
                to_rgb=True,
                type='Normalize'),
            dict(keys=[
                'img',
            ], type='ImageToTensor'),
            dict(keys=[
                'img',
            ], type='Collect'),
        ],
        type='MultiScaleFlipAug'),
]
train_cfg = dict(
    max_iters=160000, type='IterBasedTrainLoop', val_interval=16000)
train_dataloader = dict(
    batch_size=4,
    dataset=dict(
        data_prefix=dict(
            img_path='images/training', seg_map_path='annotations/training'),
        data_root='data/ade/ADEChallengeData2016',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(reduce_zero_label=True, type='LoadAnnotations'),
            dict(
                keep_ratio=True,
                ratio_range=(
                    0.5,
                    2.0,
                ),
                scale=(
                    2048,
                    512,
                ),
                type='RandomResize'),
            dict(
                cat_max_ratio=0.75, crop_size=(
                    512,
                    512,
                ), type='RandomCrop'),
            dict(prob=0.5, type='RandomFlip'),
            dict(type='PhotoMetricDistortion'),
            dict(type='PackSegInputs'),
        ],
        type='ADE20KDataset'),
    num_workers=4,
    persistent_workers=True,
    sampler=dict(shuffle=True, type='InfiniteSampler'))
train_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(reduce_zero_label=True, type='LoadAnnotations'),
    dict(
        keep_ratio=True,
        ratio_range=(
            0.5,
            2.0,
        ),
        scale=(
            2048,
            512,
        ),
        type='RandomResize'),
    dict(cat_max_ratio=0.75, crop_size=(
        512,
        512,
    ), type='RandomCrop'),
    dict(prob=0.5, type='RandomFlip'),
    dict(type='PhotoMetricDistortion'),
    dict(type='PackSegInputs'),
]
tta_model = dict(type='SegTTAModel')
tta_pipeline = [
    dict(backend_args=None, type='LoadImageFromFile'),
    dict(
        transforms=[
            [
                dict(keep_ratio=True, scale_factor=0.5, type='Resize'),
                dict(keep_ratio=True, scale_factor=0.75, type='Resize'),
                dict(keep_ratio=True, scale_factor=1.0, type='Resize'),
                dict(keep_ratio=True, scale_factor=1.25, type='Resize'),
                dict(keep_ratio=True, scale_factor=1.5, type='Resize'),
                dict(keep_ratio=True, scale_factor=1.75, type='Resize'),
            ],
            [
                dict(direction='horizontal', prob=0.0, type='RandomFlip'),
                dict(direction='horizontal', prob=1.0, type='RandomFlip'),
            ],
            [
                dict(type='LoadAnnotations'),
            ],
            [
                dict(type='PackSegInputs'),
            ],
        ],
        type='TestTimeAug'),
]
val_cfg = dict(type='ValLoop')
val_dataloader = dict(
    batch_size=1,
    dataset=dict(
        data_prefix=dict(
            img_path='images/validation',
            seg_map_path='annotations/validation'),
        data_root='data/ade/ADEChallengeData2016',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(keep_ratio=True, scale=(
                2048,
                512,
            ), type='Resize'),
            dict(reduce_zero_label=True, type='LoadAnnotations'),
            dict(type='PackSegInputs'),
        ],
        type='ADE20KDataset'),
    num_workers=4,
    persistent_workers=True,
    sampler=dict(shuffle=False, type='DefaultSampler'))
val_evaluator = dict(
    iou_metrics=[
        'mIoU',
    ], type='IoUMetric')
vis_backends = [
    dict(type='LocalVisBackend'),
]
visualizer = dict(
    name='visualizer',
    save_dir=
    '../aa_workdir/ade/upernet/upernet_internimage_s_512_160k_ade20k/attack_pgd/norm_l2/iterations_20/epsilon_64/alpha_0.1/show_dir',
    type='SegLocalVisualizer',
    vis_backends=[
        dict(type='LocalVisBackend'),
    ])
work_dir = '../aa_workdir/ade/upernet/upernet_internimage_s_512_160k_ade20k/attack_pgd/norm_l2/iterations_20/epsilon_64/alpha_0.1'

/pfs/work7/workspace/scratch/ma_dschader-team_project_fss2024/benchmarking_robustness/semantic_segmentation/mmsegmentation/ops_dcnv3/modules/dcnv3.py:20: UserWarning: Now, we support DCNv4 in InternImage.
  warnings.warn('Now, we support DCNv4 in InternImage.')
2024-10-26 02:10:40,851 - mmseg - INFO - using core type: DCNv3
2024-10-26 02:10:40,851 - mmseg - INFO - using activation layer: GELU
2024-10-26 02:10:40,851 - mmseg - INFO - using main norm layer: LN
2024-10-26 02:10:40,851 - mmseg - INFO - using dpr: linear, 0.3
2024-10-26 02:10:40,851 - mmseg - INFO - level2_post_norm: False
2024-10-26 02:10:40,851 - mmseg - INFO - level2_post_norm_block_ids: None
2024-10-26 02:10:40,851 - mmseg - INFO - res_post_norm: False
2024-10-26 02:10:40,851 - mmseg - INFO - use_dcn_v4_op: False
10/26 02:10:47 - mmengine - INFO - Distributed training is not used, all SyncBatchNorm (SyncBN) layers in the model will be automatically reverted to BatchNormXd layers if they are used.
10/26 02:10:47 - mmengine - INFO - Hooks will be executed in the following order:
before_run:
(VERY_HIGH   ) RuntimeInfoHook                    
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
before_train:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_train_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(NORMAL      ) DistSamplerSeedHook                
 -------------------- 
before_train_iter:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_train_iter:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(NORMAL      ) SegVisualizationHook               
(BELOW_NORMAL) LoggerHook                         
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
after_train_epoch:
(NORMAL      ) IterTimerHook                      
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_val:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
before_val_epoch:
(NORMAL      ) IterTimerHook                      
 -------------------- 
before_val_iter:
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_val_iter:
(NORMAL      ) IterTimerHook                      
(NORMAL      ) SegVisualizationHook               
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_val_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
after_val:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
after_train:
(VERY_HIGH   ) RuntimeInfoHook                    
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_test:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
before_test_epoch:
(NORMAL      ) IterTimerHook                      
 -------------------- 
before_test_iter:
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_test_iter:
(NORMAL      ) IterTimerHook                      
(NORMAL      ) SegVisualizationHook               
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_test_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_test:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
after_run:
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
10/26 02:10:48 - mmengine - WARNING - The prefix is not set in metric class IoUMetric.
Loads checkpoint by local backend from path: ../checkpoint_files/upernet/upernet_internimage_s_512_160k_ade20k.pth
10/26 02:10:51 - mmengine - INFO - Load checkpoint from ../checkpoint_files/upernet/upernet_internimage_s_512_160k_ade20k.pth
10/26 02:16:50 - mmengine - INFO - Iter(test) [  50/2000]    eta: 3:52:39  time: 6.2735  data_time: 0.0030  memory: 22767  
10/26 02:21:57 - mmengine - INFO - Iter(test) [ 100/2000]    eta: 3:30:38  time: 6.5588  data_time: 0.0032  memory: 17281  
10/26 02:26:41 - mmengine - INFO - Iter(test) [ 150/2000]    eta: 3:15:10  time: 5.7385  data_time: 0.0022  memory: 16333  
10/26 02:31:43 - mmengine - INFO - Iter(test) [ 200/2000]    eta: 3:07:47  time: 5.7768  data_time: 0.0025  memory: 19212  
10/26 02:36:32 - mmengine - INFO - Iter(test) [ 250/2000]    eta: 2:59:44  time: 5.3796  data_time: 0.0021  memory: 20037  
10/26 02:41:15 - mmengine - INFO - Iter(test) [ 300/2000]    eta: 2:52:15  time: 5.3330  data_time: 0.0022  memory: 17710  
10/26 02:46:06 - mmengine - INFO - Iter(test) [ 350/2000]    eta: 2:46:10  time: 5.2965  data_time: 0.0022  memory: 18083  
10/26 02:50:45 - mmengine - INFO - Iter(test) [ 400/2000]    eta: 2:39:34  time: 5.4836  data_time: 0.0018  memory: 16888  
10/26 02:54:50 - mmengine - INFO - Iter(test) [ 450/2000]    eta: 2:31:30  time: 5.0066  data_time: 0.0018  memory: 15288  
10/26 02:59:12 - mmengine - INFO - Iter(test) [ 500/2000]    eta: 2:24:59  time: 4.9717  data_time: 0.0018  memory: 15069  
10/26 03:03:49 - mmengine - INFO - Iter(test) [ 550/2000]    eta: 2:19:36  time: 5.7122  data_time: 0.0019  memory: 17087  
10/26 03:08:10 - mmengine - INFO - Iter(test) [ 600/2000]    eta: 2:13:43  time: 5.6199  data_time: 0.0019  memory: 15482  
10/26 03:12:36 - mmengine - INFO - Iter(test) [ 650/2000]    eta: 2:08:12  time: 5.4421  data_time: 0.0017  memory: 17326  
10/26 03:17:19 - mmengine - INFO - Iter(test) [ 700/2000]    eta: 2:03:24  time: 5.2446  data_time: 0.0019  memory: 17977  
10/26 03:21:56 - mmengine - INFO - Iter(test) [ 750/2000]    eta: 1:58:27  time: 6.1898  data_time: 0.0020  memory: 17608  
10/26 03:26:02 - mmengine - INFO - Iter(test) [ 800/2000]    eta: 1:52:44  time: 5.1684  data_time: 0.0020  memory: 16350  
10/26 03:30:23 - mmengine - INFO - Iter(test) [ 850/2000]    eta: 1:47:34  time: 5.2346  data_time: 0.0019  memory: 9651  
10/26 03:34:27 - mmengine - INFO - Iter(test) [ 900/2000]    eta: 1:42:09  time: 4.7945  data_time: 0.0018  memory: 14373  
10/26 03:39:04 - mmengine - INFO - Iter(test) [ 950/2000]    eta: 1:37:27  time: 5.5545  data_time: 0.0019  memory: 17425  
10/26 03:43:17 - mmengine - INFO - Iter(test) [1000/2000]    eta: 1:32:25  time: 4.9026  data_time: 0.0019  memory: 17464  
10/26 03:47:52 - mmengine - INFO - Iter(test) [1050/2000]    eta: 1:27:45  time: 5.9622  data_time: 0.0019  memory: 18054  
10/26 03:52:19 - mmengine - INFO - Iter(test) [1100/2000]    eta: 1:22:59  time: 5.0122  data_time: 0.0019  memory: 15953  
10/26 03:56:35 - mmengine - INFO - Iter(test) [1150/2000]    eta: 1:18:07  time: 5.3165  data_time: 0.0018  memory: 15212  
10/26 04:00:57 - mmengine - INFO - Iter(test) [1200/2000]    eta: 1:13:22  time: 4.9036  data_time: 0.0018  memory: 12100  
10/26 04:05:07 - mmengine - INFO - Iter(test) [1250/2000]    eta: 1:08:32  time: 5.2159  data_time: 0.0018  memory: 17439  
10/26 04:09:07 - mmengine - INFO - Iter(test) [1300/2000]    eta: 1:03:39  time: 5.0506  data_time: 0.0019  memory: 9749  
10/26 04:13:20 - mmengine - INFO - Iter(test) [1350/2000]    eta: 0:58:57  time: 4.7307  data_time: 0.0018  memory: 14858  
10/26 04:17:44 - mmengine - INFO - Iter(test) [1400/2000]    eta: 0:54:22  time: 5.5416  data_time: 0.0021  memory: 16744  
10/26 04:21:51 - mmengine - INFO - Iter(test) [1450/2000]    eta: 0:49:40  time: 5.4861  data_time: 0.0031  memory: 15562  
10/26 04:25:57 - mmengine - INFO - Iter(test) [1500/2000]    eta: 0:45:01  time: 4.7073  data_time: 0.0019  memory: 9651  
10/26 04:30:23 - mmengine - INFO - Iter(test) [1550/2000]    eta: 0:40:30  time: 5.1409  data_time: 0.0018  memory: 17115  
10/26 04:34:31 - mmengine - INFO - Iter(test) [1600/2000]    eta: 0:35:54  time: 5.0479  data_time: 0.0019  memory: 9568  
10/26 04:38:48 - mmengine - INFO - Iter(test) [1650/2000]    eta: 0:31:22  time: 4.6596  data_time: 0.0017  memory: 19151  
10/26 04:43:10 - mmengine - INFO - Iter(test) [1700/2000]    eta: 0:26:52  time: 5.1397  data_time: 0.0019  memory: 16052  
10/26 04:47:33 - mmengine - INFO - Iter(test) [1750/2000]    eta: 0:22:22  time: 4.9403  data_time: 0.0018  memory: 16569  
10/26 04:51:41 - mmengine - INFO - Iter(test) [1800/2000]    eta: 0:17:51  time: 5.2319  data_time: 0.0020  memory: 15035  
10/26 04:56:02 - mmengine - INFO - Iter(test) [1850/2000]    eta: 0:13:23  time: 5.1828  data_time: 0.0020  memory: 8673  
10/26 05:00:04 - mmengine - INFO - Iter(test) [1900/2000]    eta: 0:08:54  time: 4.8149  data_time: 0.0018  memory: 17406  
10/26 05:04:25 - mmengine - INFO - Iter(test) [1950/2000]    eta: 0:04:26  time: 4.8938  data_time: 0.0018  memory: 19642  
10/26 05:08:38 - mmengine - INFO - Iter(test) [2000/2000]    eta: 0:00:00  time: 4.6351  data_time: 0.0017  memory: 13747  
10/26 05:08:38 - mmengine - INFO - per class results:
10/26 05:08:38 - mmengine - INFO - 
+---------------------+-------+-------+
|        Class        |  IoU  |  Acc  |
+---------------------+-------+-------+
|         wall        | 67.17 | 81.04 |
|       building      | 72.57 | 85.82 |
|         sky         |  91.1 |  94.6 |
|        floor        | 74.65 | 86.51 |
|         tree        | 68.19 | 84.17 |
|       ceiling       | 72.48 | 83.02 |
|         road        | 71.62 | 84.07 |
|         bed         | 83.45 | 92.44 |
|      windowpane     | 51.98 |  72.2 |
|        grass        | 59.26 | 74.75 |
|       cabinet       | 46.29 | 61.27 |
|       sidewalk      | 47.11 | 63.14 |
|        person       | 77.04 | 90.24 |
|        earth        | 21.87 | 33.93 |
|         door        | 29.75 | 44.39 |
|        table        | 53.77 | 69.28 |
|       mountain      | 41.53 | 64.22 |
|        plant        | 42.35 | 53.81 |
|       curtain       | 59.08 | 76.58 |
|        chair        |  49.9 | 64.38 |
|         car         | 79.01 | 89.29 |
|        water        | 43.21 | 57.28 |
|       painting      | 62.61 | 84.68 |
|         sofa        | 51.41 | 70.94 |
|        shelf        | 29.06 | 44.66 |
|        house        | 20.34 | 37.38 |
|         sea         | 42.78 | 63.81 |
|        mirror       | 50.87 |  58.7 |
|         rug         | 44.44 | 56.82 |
|        field        | 19.93 | 34.01 |
|       armchair      | 27.44 | 45.44 |
|         seat        | 49.04 | 70.65 |
|        fence        | 35.42 | 53.74 |
|         desk        | 33.04 | 55.44 |
|         rock        | 24.32 | 39.01 |
|       wardrobe      | 28.85 | 50.98 |
|         lamp        | 60.76 | 75.34 |
|       bathtub       | 62.65 | 74.36 |
|       railing       | 25.74 | 39.19 |
|       cushion       | 48.65 |  62.3 |
|         base        |  8.41 | 11.16 |
|         box         | 17.46 | 26.39 |
|        column       |  30.6 | 43.61 |
|      signboard      |  33.4 | 46.75 |
|   chest of drawers  | 26.77 | 51.08 |
|       counter       |  8.46 | 11.53 |
|         sand        | 18.71 | 32.55 |
|         sink        | 62.06 | 74.53 |
|      skyscraper     | 31.88 | 42.97 |
|      fireplace      |  51.8 | 79.59 |
|     refrigerator    | 53.46 | 72.94 |
|      grandstand     | 25.19 | 64.09 |
|         path        | 11.08 |  20.9 |
|        stairs       | 22.85 | 29.61 |
|        runway       | 58.74 | 81.84 |
|         case        | 34.24 | 48.65 |
|      pool table     | 89.57 | 94.74 |
|        pillow       | 49.51 | 60.24 |
|     screen door     | 43.78 | 48.73 |
|       stairway      | 29.58 | 37.85 |
|        river        |  6.51 | 17.75 |
|        bridge       | 34.15 | 45.15 |
|       bookcase      | 27.56 |  46.1 |
|        blind        | 23.82 | 28.47 |
|     coffee table    | 56.27 | 79.91 |
|        toilet       | 83.33 | 89.08 |
|        flower       | 39.25 | 50.78 |
|         book        | 43.95 | 67.49 |
|         hill        |  4.74 |  6.43 |
|        bench        | 36.38 | 51.47 |
|      countertop     | 44.39 | 67.65 |
|        stove        | 66.55 | 75.48 |
|         palm        | 48.44 | 67.23 |
|    kitchen island   | 23.87 | 46.42 |
|       computer      | 55.32 | 64.38 |
|     swivel chair    |  34.0 |  51.4 |
|         boat        | 45.79 | 54.09 |
|         bar         | 15.71 | 22.67 |
|    arcade machine   | 19.21 | 21.03 |
|        hovel        |  1.64 |  1.97 |
|         bus         | 89.71 |  96.4 |
|        towel        |  52.7 | 62.88 |
|        light        | 51.92 | 59.81 |
|        truck        | 24.52 | 36.82 |
|        tower        | 18.93 | 36.01 |
|      chandelier     | 64.47 | 76.08 |
|        awning       | 17.34 | 24.75 |
|     streetlight     | 24.75 | 32.98 |
|        booth        | 29.17 | 35.88 |
| television receiver | 53.45 | 67.04 |
|       airplane      | 51.98 | 67.91 |
|      dirt track     | 11.13 | 25.82 |
|       apparel       | 31.02 | 44.74 |
|         pole        | 15.73 | 23.75 |
|         land        |  0.0  |  0.0  |
|      bannister      | 14.82 | 19.65 |
|      escalator      | 21.77 | 24.84 |
|       ottoman       | 29.36 | 47.89 |
|        bottle       | 28.13 |  39.7 |
|        buffet       | 29.37 |  35.1 |
|        poster       | 22.24 | 29.98 |
|        stage        | 10.96 | 17.31 |
|         van         | 34.35 | 52.02 |
|         ship        |  3.31 |  6.21 |
|       fountain      | 19.24 | 20.68 |
|    conveyer belt    | 39.15 | 65.77 |
|        canopy       | 23.63 | 38.63 |
|        washer       |  69.3 | 72.48 |
|      plaything      |  25.5 | 40.38 |
|    swimming pool    | 20.81 | 35.78 |
|        stool        | 27.88 | 44.85 |
|        barrel       | 51.28 | 84.04 |
|        basket       | 27.33 | 40.02 |
|      waterfall      | 37.65 | 45.25 |
|         tent        | 88.79 | 98.15 |
|         bag         |  8.54 | 10.23 |
|       minibike      | 47.88 | 56.34 |
|        cradle       | 58.28 | 66.57 |
|         oven        | 25.75 | 61.03 |
|         ball        | 49.01 | 59.67 |
|         food        | 52.51 | 67.32 |
|         step        | 13.11 | 16.03 |
|         tank        | 32.19 | 36.37 |
|      trade name     | 27.18 | 34.02 |
|      microwave      | 45.19 | 48.68 |
|         pot         | 32.97 | 39.76 |
|        animal       | 46.82 | 47.92 |
|       bicycle       | 52.19 | 75.95 |
|         lake        | 61.03 | 63.53 |
|      dishwasher     | 50.37 | 72.77 |
|        screen       | 44.39 |  57.0 |
|       blanket       | 11.69 | 14.32 |
|      sculpture      | 53.98 | 70.58 |
|         hood        | 44.24 | 46.56 |
|        sconce       | 38.11 | 49.32 |
|         vase        | 38.08 | 50.06 |
|    traffic light    | 24.85 |  44.6 |
|         tray        |  4.72 |  9.75 |
|        ashcan       |  39.1 | 47.64 |
|         fan         | 61.33 | 72.17 |
|         pier        | 57.07 | 73.65 |
|      crt screen     |  4.29 | 10.08 |
|        plate        | 46.44 | 64.01 |
|       monitor       | 28.65 | 34.25 |
|    bulletin board   |  39.4 | 52.69 |
|        shower       |  1.07 | 10.19 |
|       radiator      | 45.55 | 62.26 |
|        glass        | 14.89 | 16.13 |
|        clock        | 24.05 | 32.81 |
|         flag        |  41.7 | 47.49 |
+---------------------+-------+-------+
10/26 05:08:38 - mmengine - INFO - Iter(test) [2000/2000]    aAcc: 75.3100  mIoU: 39.1200  mAcc: 51.5300  data_time: 0.0174  time: 5.3325
Runtime: 10694

============================= JOB FEEDBACK =============================

NodeName=uc2n512
Job ID: 24525386
Array Job ID: 24523762_0
Cluster: uc2
User/Group: ma_dschader/ma_ma
State: COMPLETED (exit code 0)
Nodes: 1
Cores per node: 8
CPU Utilized: 02:47:41
CPU Efficiency: 11.73% of 23:49:52 core-walltime
Job Wall-clock time: 02:58:44
Memory Utilized: 4.33 GB
Memory Efficiency: 28.84% of 15.00 GB
