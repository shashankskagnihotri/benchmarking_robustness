Started at Sat Oct 26 02:51:02 CEST 2024
10/26 02:51:09 - mmengine - INFO - 
------------------------------------------------------------
System environment:
    sys.platform: linux
    Python: 3.10.13 | packaged by conda-forge | (main, Dec 23 2023, 15:36:39) [GCC 12.3.0]
    CUDA available: True
    MUSA available: False
    numpy_random_seed: 1806795645
    GPU 0: Tesla V100-SXM2-32GB
    CUDA_HOME: None
    GCC: gcc (GCC) 8.5.0 20210514 (Red Hat 8.5.0-18)
    PyTorch: 1.13.1
    PyTorch compiling details: PyTorch built with:
  - GCC 9.3
  - C++ Version: 201402
  - Intel(R) oneAPI Math Kernel Library Version 2023.1-Product Build 20230303 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v2.6.0 (Git Hash 52b5f107dd9cf10910aaa19cb47f3abf9b349815)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - LAPACK is enabled (usually provided by MKL)
  - NNPACK is enabled
  - CPU capability usage: AVX2
  - CUDA Runtime 11.7
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_61,code=sm_61;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86;-gencode;arch=compute_37,code=compute_37
  - CuDNN 8.5
  - Magma 2.6.1
  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.7, CUDNN_VERSION=8.5.0, CXX_COMPILER=/opt/rh/devtoolset-9/root/usr/bin/c++, CXX_FLAGS= -fabi-version=11 -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -DEDGE_PROFILER_USE_KINETO -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Werror=non-virtual-dtor -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wunused-local-typedefs -Wno-unused-parameter -Wno-unused-function -Wno-unused-result -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Werror=cast-function-type -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.13.1, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, USE_ROCM=OFF, 

    TorchVision: 0.14.1
    OpenCV: 3.4.18
    MMEngine: 0.10.4

Runtime environment:
    cudnn_benchmark: True
    mp_cfg: {'mp_start_method': 'fork', 'opencv_num_threads': 0}
    dist_cfg: {'backend': 'nccl'}
    seed: 1806795645
    Distributed launcher: none
    Distributed training: False
    GPU number: 1
------------------------------------------------------------

10/26 02:51:10 - mmengine - INFO - Config:
checkpoint_config = dict(by_epoch=False, interval=1000, max_keep_ckpts=1)
crop_size = (
    512,
    512,
)
data = dict(
    samples_per_gpu=2,
    test=dict(pipeline=[
        dict(type='LoadImageFromFile'),
        dict(
            flip=False,
            img_scale=(
                2048,
                512,
            ),
            transforms=[
                dict(keep_ratio=True, type='Resize'),
                dict(size_divisor=32, type='ResizeToMultiple'),
                dict(type='RandomFlip'),
                dict(
                    mean=[
                        123.675,
                        116.28,
                        103.53,
                    ],
                    std=[
                        58.395,
                        57.12,
                        57.375,
                    ],
                    to_rgb=True,
                    type='Normalize'),
                dict(keys=[
                    'img',
                ], type='ImageToTensor'),
                dict(keys=[
                    'img',
                ], type='Collect'),
            ],
            type='MultiScaleFlipAug'),
    ]),
    val=dict(pipeline=[
        dict(type='LoadImageFromFile'),
        dict(
            flip=False,
            img_scale=(
                2048,
                512,
            ),
            transforms=[
                dict(keep_ratio=True, type='Resize'),
                dict(size_divisor=32, type='ResizeToMultiple'),
                dict(type='RandomFlip'),
                dict(
                    mean=[
                        123.675,
                        116.28,
                        103.53,
                    ],
                    std=[
                        58.395,
                        57.12,
                        57.375,
                    ],
                    to_rgb=True,
                    type='Normalize'),
                dict(keys=[
                    'img',
                ], type='ImageToTensor'),
                dict(keys=[
                    'img',
                ], type='Collect'),
            ],
            type='MultiScaleFlipAug'),
    ]))
data_preprocessor = dict(
    bgr_to_rgb=True,
    corruption=None,
    enable_normalization=False,
    mean=[
        123.675,
        116.28,
        103.53,
    ],
    pad_val=0,
    seg_pad_val=255,
    std=[
        58.395,
        57.12,
        57.375,
    ],
    type='SegDataPreProcessor')
data_root = 'data/ade/ADEChallengeData2016'
dataset_type = 'ADE20KDataset'
default_hooks = dict(
    checkpoint=dict(by_epoch=False, interval=16000, type='CheckpointHook'),
    logger=dict(interval=50, log_metric_by_epoch=False, type='LoggerHook'),
    param_scheduler=dict(type='ParamSchedulerHook'),
    sampler_seed=dict(type='DistSamplerSeedHook'),
    timer=dict(type='IterTimerHook'),
    visualization=dict(draw=True, type='SegVisualizationHook'))
default_scope = 'mmseg'
env_cfg = dict(
    cudnn_benchmark=True,
    dist_cfg=dict(backend='nccl'),
    mp_cfg=dict(mp_start_method='fork', opencv_num_threads=0))
evaluation = dict(interval=16000, metric='mIoU', save_best='mIoU')
img_norm_cfg = dict(
    mean=[
        123.675,
        116.28,
        103.53,
    ],
    std=[
        58.395,
        57.12,
        57.375,
    ],
    to_rgb=True)
img_ratios = [
    0.5,
    0.75,
    1.0,
    1.25,
    1.5,
    1.75,
]
launcher = 'none'
load_from = '../checkpoint_files/upernet/upernet_internimage_s_512_160k_ade20k.pth'
log_level = 'INFO'
log_processor = dict(by_epoch=False)
lr_config = dict(
    _delete_=True,
    by_epoch=False,
    min_lr=0.0,
    policy='poly',
    power=1.0,
    warmup='linear',
    warmup_iters=1500,
    warmup_ratio=1e-06)
model = dict(
    attack_cfg=dict(
        alpha=0.1, epsilon=64, iterations=20, name='cospgd', norm='l2'),
    attack_loss=dict(
        loss_weight=1.0,
        reduction='none',
        type='CrossEntropyLoss',
        use_sigmoid=False),
    auxiliary_head=dict(
        align_corners=False,
        channels=256,
        concat_input=False,
        dropout_ratio=0.1,
        in_channels=320,
        in_index=2,
        loss_decode=dict(
            loss_weight=0.4, type='CrossEntropyLoss', use_sigmoid=False),
        norm_cfg=dict(requires_grad=True, type='SyncBN'),
        num_classes=150,
        num_convs=1,
        type='FCNHead'),
    backbone=dict(
        channels=80,
        core_op='DCNv3',
        depths=[
            4,
            4,
            21,
            4,
        ],
        drop_path_rate=0.3,
        groups=[
            5,
            10,
            20,
            40,
        ],
        init_cfg=dict(
            checkpoint=
            'https://huggingface.co/OpenGVLab/InternImage/resolve/main/internimage_s_1k_224.pth',
            type='Pretrained'),
        layer_scale=1.0,
        mlp_ratio=4.0,
        norm_layer='LN',
        offset_scale=1.0,
        post_norm=True,
        type='InternImage',
        with_cp=False),
    data_preprocessor=dict(
        bgr_to_rgb=True,
        corruption=None,
        enable_normalization=False,
        mean=[
            123.675,
            116.28,
            103.53,
        ],
        pad_val=0,
        seg_pad_val=255,
        std=[
            58.395,
            57.12,
            57.375,
        ],
        type='SegDataPreProcessor'),
    decode_head=dict(
        align_corners=False,
        channels=512,
        dropout_ratio=0.1,
        in_channels=[
            80,
            160,
            320,
            640,
        ],
        in_index=[
            0,
            1,
            2,
            3,
        ],
        loss_decode=dict(
            loss_weight=1.0,
            reduction='none',
            type='CrossEntropyLoss',
            use_sigmoid=False),
        norm_cfg=dict(requires_grad=True, type='SyncBN'),
        num_classes=150,
        pool_scales=(
            1,
            2,
            3,
            6,
        ),
        type='UPerHead'),
    enable_normalization=False,
    normalize_mean_std=dict(
        mean=[
            123.675,
            116.28,
            103.53,
        ], std=[
            58.395,
            57.12,
            57.375,
        ]),
    perform_attack=True,
    pretrained='open-mmlab://resnet50_v1c',
    test_cfg=dict(mode='whole'),
    train_cfg=dict(),
    type='EncoderDecoder')
norm_cfg = dict(requires_grad=True, type='SyncBN')
optim_wrapper = dict(
    clip_grad=None,
    optimizer=dict(lr=0.01, momentum=0.9, type='SGD', weight_decay=0.0005),
    type='OptimWrapper')
optimizer = dict(
    betas=(
        0.9,
        0.999,
    ),
    constructor='CustomLayerDecayOptimizerConstructor',
    lr=6e-05,
    paramwise_cfg=dict(
        depths=[
            4,
            4,
            21,
            4,
        ], layer_decay_rate=1.0, num_layers=33),
    type='AdamW',
    weight_decay=0.05)
param_scheduler = [
    dict(
        begin=0,
        by_epoch=False,
        end=160000,
        eta_min=0.0001,
        power=0.9,
        type='PolyLR'),
]
pretrained = 'https://huggingface.co/OpenGVLab/InternImage/resolve/main/internimage_s_1k_224.pth'
resume = False
runner = dict(type='IterBasedRunner')
test_cfg = dict(type='TestLoop')
test_dataloader = dict(
    batch_size=1,
    dataset=dict(
        data_prefix=dict(
            img_path='images/validation',
            seg_map_path='annotations/validation'),
        data_root='data/ade/ADEChallengeData2016',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(keep_ratio=True, scale=(
                2048,
                512,
            ), type='Resize'),
            dict(reduce_zero_label=True, type='LoadAnnotations'),
            dict(type='PackSegInputs'),
        ],
        type='ADE20KDataset'),
    num_workers=4,
    persistent_workers=True,
    sampler=dict(shuffle=False, type='DefaultSampler'))
test_evaluator = dict(
    iou_metrics=[
        'mIoU',
    ], type='IoUMetric')
test_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(
        flip=False,
        img_scale=(
            2048,
            512,
        ),
        transforms=[
            dict(keep_ratio=True, type='Resize'),
            dict(size_divisor=32, type='ResizeToMultiple'),
            dict(type='RandomFlip'),
            dict(
                mean=[
                    123.675,
                    116.28,
                    103.53,
                ],
                std=[
                    58.395,
                    57.12,
                    57.375,
                ],
                to_rgb=True,
                type='Normalize'),
            dict(keys=[
                'img',
            ], type='ImageToTensor'),
            dict(keys=[
                'img',
            ], type='Collect'),
        ],
        type='MultiScaleFlipAug'),
]
train_cfg = dict(
    max_iters=160000, type='IterBasedTrainLoop', val_interval=16000)
train_dataloader = dict(
    batch_size=4,
    dataset=dict(
        data_prefix=dict(
            img_path='images/training', seg_map_path='annotations/training'),
        data_root='data/ade/ADEChallengeData2016',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(reduce_zero_label=True, type='LoadAnnotations'),
            dict(
                keep_ratio=True,
                ratio_range=(
                    0.5,
                    2.0,
                ),
                scale=(
                    2048,
                    512,
                ),
                type='RandomResize'),
            dict(
                cat_max_ratio=0.75, crop_size=(
                    512,
                    512,
                ), type='RandomCrop'),
            dict(prob=0.5, type='RandomFlip'),
            dict(type='PhotoMetricDistortion'),
            dict(type='PackSegInputs'),
        ],
        type='ADE20KDataset'),
    num_workers=4,
    persistent_workers=True,
    sampler=dict(shuffle=True, type='InfiniteSampler'))
train_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(reduce_zero_label=True, type='LoadAnnotations'),
    dict(
        keep_ratio=True,
        ratio_range=(
            0.5,
            2.0,
        ),
        scale=(
            2048,
            512,
        ),
        type='RandomResize'),
    dict(cat_max_ratio=0.75, crop_size=(
        512,
        512,
    ), type='RandomCrop'),
    dict(prob=0.5, type='RandomFlip'),
    dict(type='PhotoMetricDistortion'),
    dict(type='PackSegInputs'),
]
tta_model = dict(type='SegTTAModel')
tta_pipeline = [
    dict(backend_args=None, type='LoadImageFromFile'),
    dict(
        transforms=[
            [
                dict(keep_ratio=True, scale_factor=0.5, type='Resize'),
                dict(keep_ratio=True, scale_factor=0.75, type='Resize'),
                dict(keep_ratio=True, scale_factor=1.0, type='Resize'),
                dict(keep_ratio=True, scale_factor=1.25, type='Resize'),
                dict(keep_ratio=True, scale_factor=1.5, type='Resize'),
                dict(keep_ratio=True, scale_factor=1.75, type='Resize'),
            ],
            [
                dict(direction='horizontal', prob=0.0, type='RandomFlip'),
                dict(direction='horizontal', prob=1.0, type='RandomFlip'),
            ],
            [
                dict(type='LoadAnnotations'),
            ],
            [
                dict(type='PackSegInputs'),
            ],
        ],
        type='TestTimeAug'),
]
val_cfg = dict(type='ValLoop')
val_dataloader = dict(
    batch_size=1,
    dataset=dict(
        data_prefix=dict(
            img_path='images/validation',
            seg_map_path='annotations/validation'),
        data_root='data/ade/ADEChallengeData2016',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(keep_ratio=True, scale=(
                2048,
                512,
            ), type='Resize'),
            dict(reduce_zero_label=True, type='LoadAnnotations'),
            dict(type='PackSegInputs'),
        ],
        type='ADE20KDataset'),
    num_workers=4,
    persistent_workers=True,
    sampler=dict(shuffle=False, type='DefaultSampler'))
val_evaluator = dict(
    iou_metrics=[
        'mIoU',
    ], type='IoUMetric')
vis_backends = [
    dict(type='LocalVisBackend'),
]
visualizer = dict(
    name='visualizer',
    save_dir=
    '../aa_workdir/ade/upernet/upernet_internimage_s_512_160k_ade20k/attack_cospgd/norm_l2/iterations_20/epsilon_64/alpha_0.1/show_dir',
    type='SegLocalVisualizer',
    vis_backends=[
        dict(type='LocalVisBackend'),
    ])
work_dir = '../aa_workdir/ade/upernet/upernet_internimage_s_512_160k_ade20k/attack_cospgd/norm_l2/iterations_20/epsilon_64/alpha_0.1'

/pfs/work7/workspace/scratch/ma_dschader-team_project_fss2024/benchmarking_robustness/semantic_segmentation/mmsegmentation/ops_dcnv3/modules/dcnv3.py:20: UserWarning: Now, we support DCNv4 in InternImage.
  warnings.warn('Now, we support DCNv4 in InternImage.')
2024-10-26 02:51:15,128 - mmseg - INFO - using core type: DCNv3
2024-10-26 02:51:15,128 - mmseg - INFO - using activation layer: GELU
2024-10-26 02:51:15,128 - mmseg - INFO - using main norm layer: LN
2024-10-26 02:51:15,128 - mmseg - INFO - using dpr: linear, 0.3
2024-10-26 02:51:15,128 - mmseg - INFO - level2_post_norm: False
2024-10-26 02:51:15,129 - mmseg - INFO - level2_post_norm_block_ids: None
2024-10-26 02:51:15,129 - mmseg - INFO - res_post_norm: False
2024-10-26 02:51:15,129 - mmseg - INFO - use_dcn_v4_op: False
10/26 02:51:18 - mmengine - INFO - Distributed training is not used, all SyncBatchNorm (SyncBN) layers in the model will be automatically reverted to BatchNormXd layers if they are used.
10/26 02:51:18 - mmengine - INFO - Hooks will be executed in the following order:
before_run:
(VERY_HIGH   ) RuntimeInfoHook                    
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
before_train:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_train_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(NORMAL      ) DistSamplerSeedHook                
 -------------------- 
before_train_iter:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_train_iter:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(NORMAL      ) SegVisualizationHook               
(BELOW_NORMAL) LoggerHook                         
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
after_train_epoch:
(NORMAL      ) IterTimerHook                      
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_val:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
before_val_epoch:
(NORMAL      ) IterTimerHook                      
 -------------------- 
before_val_iter:
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_val_iter:
(NORMAL      ) IterTimerHook                      
(NORMAL      ) SegVisualizationHook               
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_val_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
after_val:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
after_train:
(VERY_HIGH   ) RuntimeInfoHook                    
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_test:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
before_test_epoch:
(NORMAL      ) IterTimerHook                      
 -------------------- 
before_test_iter:
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_test_iter:
(NORMAL      ) IterTimerHook                      
(NORMAL      ) SegVisualizationHook               
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_test_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_test:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
after_run:
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
10/26 02:51:19 - mmengine - WARNING - The prefix is not set in metric class IoUMetric.
Loads checkpoint by local backend from path: ../checkpoint_files/upernet/upernet_internimage_s_512_160k_ade20k.pth
10/26 02:51:20 - mmengine - INFO - Load checkpoint from ../checkpoint_files/upernet/upernet_internimage_s_512_160k_ade20k.pth
10/26 02:57:24 - mmengine - INFO - Iter(test) [  50/2000]    eta: 3:55:33  time: 6.5038  data_time: 0.0025  memory: 22767  
10/26 03:02:43 - mmengine - INFO - Iter(test) [ 100/2000]    eta: 3:35:43  time: 6.8884  data_time: 0.0026  memory: 17282  
10/26 03:07:38 - mmengine - INFO - Iter(test) [ 150/2000]    eta: 3:20:39  time: 5.9385  data_time: 0.0018  memory: 16335  
10/26 03:12:51 - mmengine - INFO - Iter(test) [ 200/2000]    eta: 3:13:36  time: 6.0019  data_time: 0.0018  memory: 19212  
10/26 03:17:47 - mmengine - INFO - Iter(test) [ 250/2000]    eta: 3:05:03  time: 5.5436  data_time: 0.0017  memory: 20037  
10/26 03:22:41 - mmengine - INFO - Iter(test) [ 300/2000]    eta: 2:57:29  time: 5.5727  data_time: 0.0018  memory: 17711  
10/26 03:27:41 - mmengine - INFO - Iter(test) [ 350/2000]    eta: 2:51:16  time: 5.4406  data_time: 0.0017  memory: 18084  
10/26 03:32:28 - mmengine - INFO - Iter(test) [ 400/2000]    eta: 2:44:25  time: 5.6226  data_time: 0.0015  memory: 16889  
10/26 03:36:41 - mmengine - INFO - Iter(test) [ 450/2000]    eta: 2:36:08  time: 5.1256  data_time: 0.0015  memory: 15289  
10/26 03:41:14 - mmengine - INFO - Iter(test) [ 500/2000]    eta: 2:29:34  time: 5.1893  data_time: 0.0015  memory: 15070  
10/26 03:46:03 - mmengine - INFO - Iter(test) [ 550/2000]    eta: 2:24:10  time: 5.9551  data_time: 0.0016  memory: 17090  
10/26 03:50:37 - mmengine - INFO - Iter(test) [ 600/2000]    eta: 2:18:16  time: 5.9203  data_time: 0.0031  memory: 15482  
10/26 03:55:11 - mmengine - INFO - Iter(test) [ 650/2000]    eta: 2:12:32  time: 5.5763  data_time: 0.0015  memory: 17326  
10/26 04:00:08 - mmengine - INFO - Iter(test) [ 700/2000]    eta: 2:07:42  time: 5.5510  data_time: 0.0017  memory: 17978  
10/26 04:04:54 - mmengine - INFO - Iter(test) [ 750/2000]    eta: 2:02:34  time: 6.3684  data_time: 0.0016  memory: 17610  
10/26 04:09:12 - mmengine - INFO - Iter(test) [ 800/2000]    eta: 1:56:43  time: 5.5244  data_time: 0.0018  memory: 16352  
10/26 04:13:50 - mmengine - INFO - Iter(test) [ 850/2000]    eta: 1:51:33  time: 5.5684  data_time: 0.0018  memory: 9659  
10/26 04:18:03 - mmengine - INFO - Iter(test) [ 900/2000]    eta: 1:45:57  time: 4.9514  data_time: 0.0016  memory: 14373  
10/26 04:22:52 - mmengine - INFO - Iter(test) [ 950/2000]    eta: 1:41:06  time: 5.8049  data_time: 0.0017  memory: 17427  
10/26 04:27:16 - mmengine - INFO - Iter(test) [1000/2000]    eta: 1:35:54  time: 5.1506  data_time: 0.0016  memory: 17466  
10/26 04:32:05 - mmengine - INFO - Iter(test) [1050/2000]    eta: 1:31:07  time: 6.1935  data_time: 0.0016  memory: 18054  
10/26 04:36:45 - mmengine - INFO - Iter(test) [1100/2000]    eta: 1:26:12  time: 5.2914  data_time: 0.0017  memory: 15955  
10/26 04:41:14 - mmengine - INFO - Iter(test) [1150/2000]    eta: 1:21:11  time: 5.5867  data_time: 0.0015  memory: 15213  
10/26 04:45:51 - mmengine - INFO - Iter(test) [1200/2000]    eta: 1:16:18  time: 5.1050  data_time: 0.0017  memory: 17457  
10/26 04:50:09 - mmengine - INFO - Iter(test) [1250/2000]    eta: 1:11:16  time: 5.4284  data_time: 0.0016  memory: 17439  
10/26 04:54:19 - mmengine - INFO - Iter(test) [1300/2000]    eta: 1:06:11  time: 5.2885  data_time: 0.0019  memory: 9751  
10/26 04:58:42 - mmengine - INFO - Iter(test) [1350/2000]    eta: 1:01:18  time: 4.9303  data_time: 0.0017  memory: 14858  
10/26 05:03:16 - mmengine - INFO - Iter(test) [1400/2000]    eta: 0:56:31  time: 5.7128  data_time: 0.0016  memory: 16745  
10/26 05:07:31 - mmengine - INFO - Iter(test) [1450/2000]    eta: 0:51:38  time: 5.6642  data_time: 0.0024  memory: 15563  
10/26 05:11:49 - mmengine - INFO - Iter(test) [1500/2000]    eta: 0:46:48  time: 4.8729  data_time: 0.0016  memory: 9659  
10/26 05:16:27 - mmengine - INFO - Iter(test) [1550/2000]    eta: 0:42:07  time: 5.3652  data_time: 0.0016  memory: 17117  
10/26 05:20:49 - mmengine - INFO - Iter(test) [1600/2000]    eta: 0:37:21  time: 5.3476  data_time: 0.0017  memory: 9572  
10/26 05:25:13 - mmengine - INFO - Iter(test) [1650/2000]    eta: 0:32:38  time: 4.8364  data_time: 0.0015  memory: 19151  
10/26 05:29:46 - mmengine - INFO - Iter(test) [1700/2000]    eta: 0:27:57  time: 5.4363  data_time: 0.0018  memory: 16054  
10/26 05:34:24 - mmengine - INFO - Iter(test) [1750/2000]    eta: 0:23:17  time: 5.1757  data_time: 0.0015  memory: 16571  
10/26 05:38:42 - mmengine - INFO - Iter(test) [1800/2000]    eta: 0:18:35  time: 5.4961  data_time: 0.0019  memory: 15035  
10/26 05:43:17 - mmengine - INFO - Iter(test) [1850/2000]    eta: 0:13:56  time: 5.4986  data_time: 0.0018  memory: 8673  
10/26 05:47:27 - mmengine - INFO - Iter(test) [1900/2000]    eta: 0:09:15  time: 4.9535  data_time: 0.0016  memory: 17408  
10/26 05:51:59 - mmengine - INFO - Iter(test) [1950/2000]    eta: 0:04:37  time: 5.1284  data_time: 0.0015  memory: 19642  
10/26 05:56:22 - mmengine - INFO - Iter(test) [2000/2000]    eta: 0:00:00  time: 4.8082  data_time: 0.0015  memory: 13747  
10/26 05:56:22 - mmengine - INFO - per class results:
10/26 05:56:22 - mmengine - INFO - 
+---------------------+-------+-------+
|        Class        |  IoU  |  Acc  |
+---------------------+-------+-------+
|         wall        | 61.96 |  76.6 |
|       building      | 69.29 | 83.64 |
|         sky         | 88.48 | 92.06 |
|        floor        | 70.26 | 82.88 |
|         tree        | 65.63 | 81.73 |
|       ceiling       | 67.22 | 78.23 |
|         road        |  68.0 | 81.23 |
|         bed         | 79.47 | 88.89 |
|      windowpane     | 46.15 | 66.51 |
|        grass        | 57.49 | 72.78 |
|       cabinet       | 39.76 | 55.53 |
|       sidewalk      | 40.97 | 56.92 |
|        person       | 75.41 | 88.67 |
|        earth        | 18.55 | 29.74 |
|         door        |  19.1 | 31.92 |
|        table        | 47.99 | 64.51 |
|       mountain      |  38.0 | 60.53 |
|        plant        |  39.4 |  50.9 |
|       curtain       | 52.31 | 72.43 |
|        chair        | 43.12 | 58.09 |
|         car         | 76.95 | 87.34 |
|        water        | 38.74 | 52.65 |
|       painting      | 58.99 | 82.84 |
|         sofa        | 45.37 | 66.84 |
|        shelf        | 25.68 | 41.05 |
|        house        | 16.34 |  32.0 |
|         sea         | 39.72 | 61.93 |
|        mirror       | 44.43 | 53.26 |
|         rug         | 34.89 |  50.1 |
|        field        | 16.87 | 30.88 |
|       armchair      | 19.88 | 35.25 |
|         seat        | 45.05 | 66.07 |
|        fence        | 29.78 | 50.56 |
|         desk        | 25.05 | 46.78 |
|         rock        | 20.25 | 34.33 |
|       wardrobe      | 21.45 | 42.97 |
|         lamp        | 58.59 | 73.97 |
|       bathtub       | 56.09 | 72.13 |
|       railing       | 23.31 | 36.58 |
|       cushion       | 42.74 | 58.76 |
|         base        |  5.56 |  7.85 |
|         box         | 15.26 |  23.5 |
|        column       | 24.72 | 39.38 |
|      signboard      | 30.27 |  45.7 |
|   chest of drawers  | 18.68 | 38.73 |
|       counter       |  5.84 |  9.14 |
|         sand        | 15.71 | 27.68 |
|         sink        | 54.01 | 66.66 |
|      skyscraper     | 28.27 |  39.5 |
|      fireplace      | 46.82 | 73.88 |
|     refrigerator    | 48.19 | 71.07 |
|      grandstand     | 24.72 |  61.2 |
|         path        | 10.35 | 20.31 |
|        stairs       | 19.41 | 28.66 |
|        runway       | 58.75 | 79.58 |
|         case        | 33.22 | 47.03 |
|      pool table     | 86.25 | 93.07 |
|        pillow       | 38.21 | 50.75 |
|     screen door     | 19.82 | 24.66 |
|       stairway      | 25.89 | 35.28 |
|        river        |  4.55 | 13.14 |
|        bridge       | 28.91 | 42.34 |
|       bookcase      | 24.44 |  42.7 |
|        blind        | 19.84 | 24.18 |
|     coffee table    | 50.63 | 75.78 |
|        toilet       | 76.85 | 86.66 |
|        flower       | 37.81 | 49.53 |
|         book        | 43.09 | 65.78 |
|         hill        |  3.54 |  5.45 |
|        bench        | 30.67 | 44.83 |
|      countertop     | 39.96 | 66.34 |
|        stove        | 59.93 | 71.01 |
|         palm        | 45.92 | 64.41 |
|    kitchen island   | 18.79 | 38.92 |
|       computer      | 53.22 | 61.35 |
|     swivel chair    |  27.8 | 43.19 |
|         boat        | 38.63 | 51.37 |
|         bar         | 11.49 |  16.1 |
|    arcade machine   | 18.62 | 20.33 |
|        hovel        |  1.03 |  1.38 |
|         bus         | 87.16 | 96.28 |
|        towel        | 43.77 | 57.31 |
|        light        |  47.5 |  55.9 |
|        truck        | 21.47 | 36.87 |
|        tower        | 16.05 | 30.97 |
|      chandelier     | 62.92 | 76.58 |
|        awning       | 14.81 | 21.79 |
|     streetlight     |  23.2 | 32.44 |
|        booth        | 29.25 | 36.86 |
| television receiver | 45.15 | 59.45 |
|       airplane      | 48.95 | 67.87 |
|      dirt track     |  2.32 |  8.81 |
|       apparel       | 24.06 | 38.86 |
|         pole        | 14.59 | 23.29 |
|         land        |  0.04 |  0.06 |
|      bannister      | 13.71 | 20.69 |
|      escalator      | 20.93 | 23.41 |
|       ottoman       | 18.15 | 31.98 |
|        bottle       | 26.75 | 39.41 |
|        buffet       |  27.1 | 33.01 |
|        poster       | 11.44 | 18.03 |
|        stage        | 10.95 | 19.79 |
|         van         | 25.03 | 40.84 |
|         ship        |  3.08 |  6.31 |
|       fountain      |  19.3 | 20.78 |
|    conveyer belt    | 30.11 |  65.6 |
|        canopy       | 19.87 | 31.98 |
|        washer       | 64.84 |  72.8 |
|      plaything      | 22.71 | 38.44 |
|    swimming pool    | 21.58 | 36.72 |
|        stool        | 24.59 | 40.86 |
|        barrel       | 50.64 | 65.27 |
|        basket       | 22.81 | 34.28 |
|      waterfall      | 33.08 |  40.9 |
|         tent        | 88.12 | 98.47 |
|         bag         |  7.6  |  9.7  |
|       minibike      | 46.23 |  53.8 |
|        cradle       | 56.08 | 66.43 |
|         oven        | 18.83 | 49.01 |
|         ball        | 47.14 | 58.33 |
|         food        |  49.9 |  63.2 |
|         step        | 10.24 | 14.53 |
|         tank        | 29.95 | 33.91 |
|      trade name     | 24.83 | 32.26 |
|      microwave      | 40.42 |  44.1 |
|         pot         | 28.31 | 34.59 |
|        animal       | 39.43 | 40.24 |
|       bicycle       | 50.11 | 77.03 |
|         lake        | 56.26 | 63.29 |
|      dishwasher     |  44.5 | 69.68 |
|        screen       |  35.9 | 54.02 |
|       blanket       |  6.91 |  8.68 |
|      sculpture      | 50.06 | 67.76 |
|         hood        | 43.77 | 46.74 |
|        sconce       | 32.45 | 42.54 |
|         vase        | 37.55 | 49.38 |
|    traffic light    | 24.28 | 43.83 |
|         tray        |  5.68 | 12.23 |
|        ashcan       | 25.62 | 37.29 |
|         fan         | 56.71 | 70.79 |
|         pier        | 33.14 | 44.23 |
|      crt screen     |  3.09 |  8.08 |
|        plate        | 36.41 | 49.95 |
|       monitor       | 20.28 | 26.17 |
|    bulletin board   | 31.71 | 44.84 |
|        shower       |  1.04 |  13.1 |
|       radiator      | 47.45 | 60.42 |
|        glass        | 14.15 | 15.48 |
|        clock        | 22.91 |  31.8 |
|         flag        | 30.11 | 35.98 |
+---------------------+-------+-------+
10/26 05:56:22 - mmengine - INFO - Iter(test) [2000/2000]    aAcc: 71.5300  mIoU: 34.8000  mAcc: 47.4300  data_time: 0.0177  time: 5.5493
Runtime: 11121

============================= JOB FEEDBACK =============================

NodeName=uc2n483
Job ID: 24525395
Array Job ID: 24523762_1
Cluster: uc2
User/Group: ma_dschader/ma_ma
State: COMPLETED (exit code 0)
Nodes: 1
Cores per node: 8
CPU Utilized: 02:54:32
CPU Efficiency: 11.74% of 1-00:46:56 core-walltime
Job Wall-clock time: 03:05:52
Memory Utilized: 2.90 GB
Memory Efficiency: 19.30% of 15.00 GB
