Started at Sat Sep 21 00:54:44 CEST 2024
Processing corruption type: gaussian_noise
09/21 00:57:01 - mmengine - INFO - 
------------------------------------------------------------
System environment:
    sys.platform: linux
    Python: 3.10.13 | packaged by conda-forge | (main, Dec 23 2023, 15:36:39) [GCC 12.3.0]
    CUDA available: True
    MUSA available: False
    numpy_random_seed: 1545094747
    GPU 0: Tesla V100-SXM2-32GB
    CUDA_HOME: /opt/bwhpc/common/devel/cuda/11.7
    NVCC: Cuda compilation tools, release 11.7, V11.7.99
    GCC: gcc (GCC) 8.5.0 20210514 (Red Hat 8.5.0-18)
    PyTorch: 1.13.1
    PyTorch compiling details: PyTorch built with:
  - GCC 9.3
  - C++ Version: 201402
  - Intel(R) oneAPI Math Kernel Library Version 2023.1-Product Build 20230303 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v2.6.0 (Git Hash 52b5f107dd9cf10910aaa19cb47f3abf9b349815)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - LAPACK is enabled (usually provided by MKL)
  - NNPACK is enabled
  - CPU capability usage: AVX2
  - CUDA Runtime 11.7
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_61,code=sm_61;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86;-gencode;arch=compute_37,code=compute_37
  - CuDNN 8.5
  - Magma 2.6.1
  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.7, CUDNN_VERSION=8.5.0, CXX_COMPILER=/opt/rh/devtoolset-9/root/usr/bin/c++, CXX_FLAGS= -fabi-version=11 -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -DEDGE_PROFILER_USE_KINETO -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Werror=non-virtual-dtor -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wunused-local-typedefs -Wno-unused-parameter -Wno-unused-function -Wno-unused-result -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Werror=cast-function-type -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.13.1, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, USE_ROCM=OFF, 

    TorchVision: 0.14.1
    OpenCV: 3.4.18
    MMEngine: 0.10.4

Runtime environment:
    cudnn_benchmark: True
    mp_cfg: {'mp_start_method': 'fork', 'opencv_num_threads': 0}
    dist_cfg: {'backend': 'nccl'}
    seed: 1545094747
    Distributed launcher: none
    Distributed training: False
    GPU number: 1
------------------------------------------------------------

09/21 00:57:02 - mmengine - INFO - Config:
auto_scale_lr = dict(base_batch_size=16, enable=False)
crop_size = (
    512,
    512,
)
custom_imports = dict(allow_failed_imports=False, imports='mmdet.models')
data_root = 'data/ade/ADEChallengeData2016'
dataset_type = 'ADE20KDataset'
default_hooks = dict(
    checkpoint=dict(
        by_epoch=False, interval=5000, save_best='mIoU',
        type='CheckpointHook'),
    logger=dict(interval=50, log_metric_by_epoch=False, type='LoggerHook'),
    param_scheduler=dict(type='ParamSchedulerHook'),
    sampler_seed=dict(type='DistSamplerSeedHook'),
    timer=dict(type='IterTimerHook'),
    visualization=dict(type='SegVisualizationHook'))
default_scope = 'mmseg'
embed_multi = dict(decay_mult=0.0, lr_mult=1.0)
env_cfg = dict(
    cudnn_benchmark=True,
    dist_cfg=dict(backend='nccl'),
    mp_cfg=dict(mp_start_method='fork', opencv_num_threads=0))
img_ratios = [
    0.5,
    0.75,
    1.0,
    1.25,
    1.5,
    1.75,
]
launcher = 'none'
load_from = '../checkpoint_files/ade20k/mask2former/mask2former_r101_8xb2-160k_ade20k-512x512_20221203_233905-b7135890.pth'
log_level = 'INFO'
log_processor = dict(by_epoch=False)
model = dict(
    backbone=dict(
        deep_stem=False,
        depth=101,
        frozen_stages=-1,
        init_cfg=dict(checkpoint='torchvision://resnet101', type='Pretrained'),
        norm_cfg=dict(requires_grad=False, type='SyncBN'),
        num_stages=4,
        out_indices=(
            0,
            1,
            2,
            3,
        ),
        style='pytorch',
        type='ResNet'),
    data_preprocessor=dict(
        bgr_to_rgb=True,
        corruption='gaussian_noise',
        mean=[
            123.675,
            116.28,
            103.53,
        ],
        pad_val=0,
        seg_pad_val=255,
        size=(
            512,
            512,
        ),
        std=[
            58.395,
            57.12,
            57.375,
        ],
        test_cfg=dict(size_divisor=32),
        type='SegDataPreProcessor'),
    decode_head=dict(
        align_corners=False,
        enforce_decoder_input_project=False,
        feat_channels=256,
        in_channels=[
            256,
            512,
            1024,
            2048,
        ],
        loss_cls=dict(
            class_weight=[
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                0.1,
            ],
            loss_weight=2.0,
            reduction='mean',
            type='mmdet.CrossEntropyLoss',
            use_sigmoid=False),
        loss_dice=dict(
            activate=True,
            eps=1.0,
            loss_weight=5.0,
            naive_dice=True,
            reduction='mean',
            type='mmdet.DiceLoss',
            use_sigmoid=True),
        loss_mask=dict(
            loss_weight=5.0,
            reduction='mean',
            type='mmdet.CrossEntropyLoss',
            use_sigmoid=True),
        num_classes=150,
        num_queries=100,
        num_transformer_feat_level=3,
        out_channels=256,
        pixel_decoder=dict(
            act_cfg=dict(type='ReLU'),
            encoder=dict(
                init_cfg=None,
                layer_cfg=dict(
                    ffn_cfg=dict(
                        act_cfg=dict(inplace=True, type='ReLU'),
                        embed_dims=256,
                        feedforward_channels=1024,
                        ffn_drop=0.0,
                        num_fcs=2),
                    self_attn_cfg=dict(
                        batch_first=True,
                        dropout=0.0,
                        embed_dims=256,
                        im2col_step=64,
                        init_cfg=None,
                        norm_cfg=None,
                        num_heads=8,
                        num_levels=3,
                        num_points=4)),
                num_layers=6),
            init_cfg=None,
            norm_cfg=dict(num_groups=32, type='GN'),
            num_outs=3,
            positional_encoding=dict(normalize=True, num_feats=128),
            type='mmdet.MSDeformAttnPixelDecoder'),
        positional_encoding=dict(normalize=True, num_feats=128),
        strides=[
            4,
            8,
            16,
            32,
        ],
        train_cfg=dict(
            assigner=dict(
                match_costs=[
                    dict(type='mmdet.ClassificationCost', weight=2.0),
                    dict(
                        type='mmdet.CrossEntropyLossCost',
                        use_sigmoid=True,
                        weight=5.0),
                    dict(
                        eps=1.0,
                        pred_act=True,
                        type='mmdet.DiceCost',
                        weight=5.0),
                ],
                type='mmdet.HungarianAssigner'),
            importance_sample_ratio=0.75,
            num_points=12544,
            oversample_ratio=3.0,
            sampler=dict(type='mmdet.MaskPseudoSampler')),
        transformer_decoder=dict(
            init_cfg=None,
            layer_cfg=dict(
                cross_attn_cfg=dict(
                    attn_drop=0.0,
                    batch_first=True,
                    dropout_layer=None,
                    embed_dims=256,
                    num_heads=8,
                    proj_drop=0.0),
                ffn_cfg=dict(
                    act_cfg=dict(inplace=True, type='ReLU'),
                    add_identity=True,
                    dropout_layer=None,
                    embed_dims=256,
                    feedforward_channels=2048,
                    ffn_drop=0.0,
                    num_fcs=2),
                self_attn_cfg=dict(
                    attn_drop=0.0,
                    batch_first=True,
                    dropout_layer=None,
                    embed_dims=256,
                    num_heads=8,
                    proj_drop=0.0)),
            num_layers=9,
            return_intermediate=True),
        type='Mask2FormerHead'),
    test_cfg=dict(mode='whole'),
    train_cfg=dict(),
    type='EncoderDecoder')
num_classes = 150
optim_wrapper = dict(
    clip_grad=dict(max_norm=0.01, norm_type=2),
    optimizer=dict(
        betas=(
            0.9,
            0.999,
        ),
        eps=1e-08,
        lr=0.0001,
        type='AdamW',
        weight_decay=0.05),
    paramwise_cfg=dict(
        custom_keys=dict(
            backbone=dict(decay_mult=1.0, lr_mult=0.1),
            level_embed=dict(decay_mult=0.0, lr_mult=1.0),
            query_embed=dict(decay_mult=0.0, lr_mult=1.0),
            query_feat=dict(decay_mult=0.0, lr_mult=1.0)),
        norm_decay_mult=0.0),
    type='OptimWrapper')
optimizer = dict(
    betas=(
        0.9,
        0.999,
    ),
    eps=1e-08,
    lr=0.0001,
    type='AdamW',
    weight_decay=0.05)
param_scheduler = [
    dict(
        begin=0,
        by_epoch=False,
        end=160000,
        eta_min=0,
        power=0.9,
        type='PolyLR'),
]
resume = False
test_cfg = dict(type='TestLoop')
test_dataloader = dict(
    batch_size=1,
    dataset=dict(
        data_prefix=dict(
            img_path='images/validation',
            seg_map_path='annotations/validation'),
        data_root='data/ade/ADEChallengeData2016',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(keep_ratio=True, scale=(
                2048,
                512,
            ), type='Resize'),
            dict(reduce_zero_label=True, type='LoadAnnotations'),
            dict(type='PackSegInputs'),
        ],
        type='ADE20KDataset'),
    num_workers=4,
    persistent_workers=True,
    sampler=dict(shuffle=False, type='DefaultSampler'))
test_evaluator = dict(
    iou_metrics=[
        'mIoU',
    ], type='IoUMetric')
test_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(keep_ratio=True, scale=(
        2048,
        512,
    ), type='Resize'),
    dict(reduce_zero_label=True, type='LoadAnnotations'),
    dict(type='PackSegInputs'),
]
train_cfg = dict(
    max_iters=160000, type='IterBasedTrainLoop', val_interval=5000)
train_dataloader = dict(
    batch_size=2,
    dataset=dict(
        data_prefix=dict(
            img_path='images/training', seg_map_path='annotations/training'),
        data_root='data/ade/ADEChallengeData2016',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(reduce_zero_label=True, type='LoadAnnotations'),
            dict(
                max_size=2048,
                resize_type='ResizeShortestEdge',
                scales=[
                    256,
                    307,
                    358,
                    409,
                    460,
                    512,
                    563,
                    614,
                    665,
                    716,
                    768,
                    819,
                    870,
                    921,
                    972,
                    1024,
                ],
                type='RandomChoiceResize'),
            dict(
                cat_max_ratio=0.75, crop_size=(
                    512,
                    512,
                ), type='RandomCrop'),
            dict(prob=0.5, type='RandomFlip'),
            dict(type='PhotoMetricDistortion'),
            dict(type='PackSegInputs'),
        ],
        type='ADE20KDataset'),
    num_workers=4,
    persistent_workers=True,
    sampler=dict(shuffle=True, type='InfiniteSampler'))
train_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(reduce_zero_label=True, type='LoadAnnotations'),
    dict(
        max_size=2048,
        resize_type='ResizeShortestEdge',
        scales=[
            256,
            307,
            358,
            409,
            460,
            512,
            563,
            614,
            665,
            716,
            768,
            819,
            870,
            921,
            972,
            1024,
        ],
        type='RandomChoiceResize'),
    dict(cat_max_ratio=0.75, crop_size=(
        512,
        512,
    ), type='RandomCrop'),
    dict(prob=0.5, type='RandomFlip'),
    dict(type='PhotoMetricDistortion'),
    dict(type='PackSegInputs'),
]
tta_model = dict(type='SegTTAModel')
tta_pipeline = [
    dict(backend_args=None, type='LoadImageFromFile'),
    dict(
        transforms=[
            [
                dict(keep_ratio=True, scale_factor=0.5, type='Resize'),
                dict(keep_ratio=True, scale_factor=0.75, type='Resize'),
                dict(keep_ratio=True, scale_factor=1.0, type='Resize'),
                dict(keep_ratio=True, scale_factor=1.25, type='Resize'),
                dict(keep_ratio=True, scale_factor=1.5, type='Resize'),
                dict(keep_ratio=True, scale_factor=1.75, type='Resize'),
            ],
            [
                dict(direction='horizontal', prob=0.0, type='RandomFlip'),
                dict(direction='horizontal', prob=1.0, type='RandomFlip'),
            ],
            [
                dict(type='LoadAnnotations'),
            ],
            [
                dict(type='PackSegInputs'),
            ],
        ],
        type='TestTimeAug'),
]
val_cfg = dict(type='ValLoop')
val_dataloader = dict(
    batch_size=1,
    dataset=dict(
        data_prefix=dict(
            img_path='images/validation',
            seg_map_path='annotations/validation'),
        data_root='data/ade/ADEChallengeData2016',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(keep_ratio=True, scale=(
                2048,
                512,
            ), type='Resize'),
            dict(reduce_zero_label=True, type='LoadAnnotations'),
            dict(type='PackSegInputs'),
        ],
        type='ADE20KDataset'),
    num_workers=4,
    persistent_workers=True,
    sampler=dict(shuffle=False, type='DefaultSampler'))
val_evaluator = dict(
    iou_metrics=[
        'mIoU',
    ], type='IoUMetric')
vis_backends = [
    dict(type='LocalVisBackend'),
]
visualizer = dict(
    name='visualizer',
    type='SegLocalVisualizer',
    vis_backends=[
        dict(type='LocalVisBackend'),
    ])
work_dir = '../corruptions/work_dirs/ade20k/mask2former/mask2former_r101_8xb2-160k_ade20k-512x512/gaussian_noise'

09/21 00:57:28 - mmengine - INFO - Distributed training is not used, all SyncBatchNorm (SyncBN) layers in the model will be automatically reverted to BatchNormXd layers if they are used.
09/21 00:57:28 - mmengine - INFO - Hooks will be executed in the following order:
before_run:
(VERY_HIGH   ) RuntimeInfoHook                    
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
before_train:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_train_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(NORMAL      ) DistSamplerSeedHook                
 -------------------- 
before_train_iter:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_train_iter:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(NORMAL      ) SegVisualizationHook               
(BELOW_NORMAL) LoggerHook                         
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
after_train_epoch:
(NORMAL      ) IterTimerHook                      
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_val:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
before_val_epoch:
(NORMAL      ) IterTimerHook                      
 -------------------- 
before_val_iter:
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_val_iter:
(NORMAL      ) IterTimerHook                      
(NORMAL      ) SegVisualizationHook               
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_val_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
after_val:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
after_train:
(VERY_HIGH   ) RuntimeInfoHook                    
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_test:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
before_test_epoch:
(NORMAL      ) IterTimerHook                      
 -------------------- 
before_test_iter:
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_test_iter:
(NORMAL      ) IterTimerHook                      
(NORMAL      ) SegVisualizationHook               
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_test_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_test:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
after_run:
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
09/21 00:57:29 - mmengine - WARNING - The prefix is not set in metric class IoUMetric.
Loads checkpoint by local backend from path: ../checkpoint_files/ade20k/mask2former/mask2former_r101_8xb2-160k_ade20k-512x512_20221203_233905-b7135890.pth
09/21 00:57:32 - mmengine - INFO - Load checkpoint from ../checkpoint_files/ade20k/mask2former/mask2former_r101_8xb2-160k_ade20k-512x512_20221203_233905-b7135890.pth
09/21 00:59:28 - mmengine - INFO - Iter(test) [  50/2000]    eta: 1:15:53  time: 0.9614  data_time: 0.0015  memory: 17239  
09/21 00:59:46 - mmengine - INFO - Iter(test) [ 100/2000]    eta: 0:42:35  time: 0.5566  data_time: 0.0015  memory: 17230  
09/21 00:59:51 - mmengine - INFO - Iter(test) [ 150/2000]    eta: 0:28:42  time: 0.1078  data_time: 0.0015  memory: 943  
09/21 01:00:06 - mmengine - INFO - Iter(test) [ 200/2000]    eta: 0:23:08  time: 0.0973  data_time: 0.0014  memory: 17287  
09/21 01:00:17 - mmengine - INFO - Iter(test) [ 250/2000]    eta: 0:19:18  time: 0.1036  data_time: 0.0014  memory: 17293  
09/21 01:00:26 - mmengine - INFO - Iter(test) [ 300/2000]    eta: 0:16:30  time: 0.0996  data_time: 0.0015  memory: 17234  
09/21 01:00:40 - mmengine - INFO - Iter(test) [ 350/2000]    eta: 0:14:48  time: 0.0940  data_time: 0.0014  memory: 17237  
09/21 01:00:49 - mmengine - INFO - Iter(test) [ 400/2000]    eta: 0:13:09  time: 0.1059  data_time: 0.0014  memory: 17220  
09/21 01:00:54 - mmengine - INFO - Iter(test) [ 450/2000]    eta: 0:11:36  time: 0.1010  data_time: 0.0013  memory: 955  
09/21 01:00:59 - mmengine - INFO - Iter(test) [ 500/2000]    eta: 0:10:22  time: 0.0973  data_time: 0.0014  memory: 943  
09/21 01:01:04 - mmengine - INFO - Iter(test) [ 550/2000]    eta: 0:09:20  time: 0.1017  data_time: 0.0032  memory: 1055  
09/21 01:01:09 - mmengine - INFO - Iter(test) [ 600/2000]    eta: 0:08:27  time: 0.1049  data_time: 0.0015  memory: 1053  
09/21 01:01:19 - mmengine - INFO - Iter(test) [ 650/2000]    eta: 0:07:51  time: 0.5662  data_time: 0.0013  memory: 17241  
09/21 01:01:28 - mmengine - INFO - Iter(test) [ 700/2000]    eta: 0:07:19  time: 0.1053  data_time: 0.0015  memory: 17235  
09/21 01:01:34 - mmengine - INFO - Iter(test) [ 750/2000]    eta: 0:06:43  time: 0.1015  data_time: 0.0013  memory: 1112  
09/21 01:01:39 - mmengine - INFO - Iter(test) [ 800/2000]    eta: 0:06:10  time: 0.0998  data_time: 0.0015  memory: 943  
09/21 01:01:43 - mmengine - INFO - Iter(test) [ 850/2000]    eta: 0:05:40  time: 0.0985  data_time: 0.0015  memory: 915  
09/21 01:01:48 - mmengine - INFO - Iter(test) [ 900/2000]    eta: 0:05:13  time: 0.0953  data_time: 0.0013  memory: 998  
09/21 01:01:53 - mmengine - INFO - Iter(test) [ 950/2000]    eta: 0:04:49  time: 0.1012  data_time: 0.0014  memory: 1027  
09/21 01:01:58 - mmengine - INFO - Iter(test) [1000/2000]    eta: 0:04:26  time: 0.0973  data_time: 0.0014  memory: 1027  
09/21 01:02:08 - mmengine - INFO - Iter(test) [1050/2000]    eta: 0:04:09  time: 0.1039  data_time: 0.0014  memory: 17242  
09/21 01:02:13 - mmengine - INFO - Iter(test) [1100/2000]    eta: 0:03:50  time: 0.1014  data_time: 0.0014  memory: 1024  
09/21 01:02:18 - mmengine - INFO - Iter(test) [1150/2000]    eta: 0:03:31  time: 0.1005  data_time: 0.0014  memory: 996  
09/21 01:02:23 - mmengine - INFO - Iter(test) [1200/2000]    eta: 0:03:14  time: 0.0949  data_time: 0.0014  memory: 1900  
09/21 01:02:32 - mmengine - INFO - Iter(test) [1250/2000]    eta: 0:03:00  time: 0.0992  data_time: 0.0014  memory: 17230  
09/21 01:02:37 - mmengine - INFO - Iter(test) [1300/2000]    eta: 0:02:44  time: 0.1046  data_time: 0.0014  memory: 943  
09/21 01:02:42 - mmengine - INFO - Iter(test) [1350/2000]    eta: 0:02:29  time: 0.0919  data_time: 0.0014  memory: 943  
09/21 01:02:47 - mmengine - INFO - Iter(test) [1400/2000]    eta: 0:02:15  time: 0.0994  data_time: 0.0014  memory: 1025  
09/21 01:02:52 - mmengine - INFO - Iter(test) [1450/2000]    eta: 0:02:01  time: 0.1058  data_time: 0.0014  memory: 1027  
09/21 01:02:57 - mmengine - INFO - Iter(test) [1500/2000]    eta: 0:01:48  time: 0.0989  data_time: 0.0014  memory: 941  
09/21 01:03:02 - mmengine - INFO - Iter(test) [1550/2000]    eta: 0:01:35  time: 0.0982  data_time: 0.0014  memory: 1027  
09/21 01:03:07 - mmengine - INFO - Iter(test) [1600/2000]    eta: 0:01:23  time: 0.0966  data_time: 0.0015  memory: 915  
09/21 01:03:17 - mmengine - INFO - Iter(test) [1650/2000]    eta: 0:01:13  time: 0.0994  data_time: 0.0013  memory: 17237  
09/21 01:03:22 - mmengine - INFO - Iter(test) [1700/2000]    eta: 0:01:01  time: 0.0977  data_time: 0.0016  memory: 1024  
09/21 01:03:27 - mmengine - INFO - Iter(test) [1750/2000]    eta: 0:00:50  time: 0.0958  data_time: 0.0014  memory: 1052  
09/21 01:03:32 - mmengine - INFO - Iter(test) [1800/2000]    eta: 0:00:39  time: 0.1041  data_time: 0.0015  memory: 943  
09/21 01:03:37 - mmengine - INFO - Iter(test) [1850/2000]    eta: 0:00:29  time: 0.1037  data_time: 0.0016  memory: 859  
09/21 01:03:42 - mmengine - INFO - Iter(test) [1900/2000]    eta: 0:00:19  time: 0.0958  data_time: 0.0015  memory: 1084  
09/21 01:03:47 - mmengine - INFO - Iter(test) [1950/2000]    eta: 0:00:09  time: 0.0948  data_time: 0.0014  memory: 1331  
09/21 01:03:52 - mmengine - INFO - Iter(test) [2000/2000]    eta: 0:00:00  time: 0.0965  data_time: 0.0013  memory: 1110  
09/21 01:03:52 - mmengine - INFO - per class results:
09/21 01:03:52 - mmengine - INFO - 
+---------------------+-------+-------+
|        Class        |  IoU  |  Acc  |
+---------------------+-------+-------+
|         wall        | 62.94 | 81.33 |
|       building      | 72.14 | 80.32 |
|         sky         |  88.2 | 93.52 |
|        floor        | 67.16 |  83.4 |
|         tree        | 58.37 | 85.72 |
|       ceiling       | 72.39 | 90.22 |
|         road        | 57.39 |  65.9 |
|         bed         | 78.71 | 88.39 |
|      windowpane     | 46.28 | 56.74 |
|        grass        | 53.68 |  63.6 |
|       cabinet       | 39.13 | 47.87 |
|       sidewalk      | 18.53 | 19.77 |
|        person       | 68.33 | 84.08 |
|        earth        | 20.47 | 63.93 |
|         door        | 27.84 |  42.7 |
|        table        | 45.77 | 59.92 |
|       mountain      | 42.55 |  52.2 |
|        plant        | 30.17 | 39.13 |
|       curtain       | 47.22 | 75.93 |
|        chair        | 47.67 | 63.07 |
|         car         | 73.94 |  80.7 |
|        water        | 32.29 | 63.29 |
|       painting      | 61.22 | 71.47 |
|         sofa        | 53.25 | 75.45 |
|        shelf        | 26.24 | 34.77 |
|        house        |  37.7 | 60.76 |
|         sea         | 20.07 | 31.49 |
|        mirror       | 43.02 | 51.35 |
|         rug         |  21.5 | 22.72 |
|        field        | 17.49 | 42.67 |
|       armchair      | 23.97 | 37.26 |
|         seat        | 34.55 | 53.93 |
|        fence        | 19.08 | 33.99 |
|         desk        | 24.13 | 30.57 |
|         rock        |  16.3 | 20.93 |
|       wardrobe      | 26.83 | 43.92 |
|         lamp        | 55.11 | 60.96 |
|       bathtub       | 41.71 | 60.53 |
|       railing       | 17.52 | 25.89 |
|       cushion       | 30.46 | 33.44 |
|         base        |  9.05 | 14.46 |
|         box         |  6.02 |  7.86 |
|        column       | 25.33 |  58.8 |
|      signboard      | 28.59 | 36.27 |
|   chest of drawers  | 25.23 | 30.98 |
|       counter       |  9.66 | 13.24 |
|         sand        |  8.08 | 10.99 |
|         sink        |  38.2 | 57.76 |
|      skyscraper     |  34.7 | 54.26 |
|      fireplace      | 50.51 | 64.44 |
|     refrigerator    |  59.6 | 62.62 |
|      grandstand     | 19.47 | 65.41 |
|         path        | 23.33 | 36.08 |
|        stairs       | 17.12 | 35.85 |
|        runway       |  0.01 |  0.01 |
|         case        | 36.48 | 39.35 |
|      pool table     | 78.77 | 83.58 |
|        pillow       | 43.01 | 50.23 |
|     screen door     | 20.12 | 51.32 |
|       stairway      | 23.41 | 29.71 |
|        river        |  2.65 |  3.92 |
|        bridge       | 25.91 | 33.69 |
|       bookcase      | 10.03 | 11.39 |
|        blind        |  0.82 |  0.84 |
|     coffee table    | 55.13 | 66.26 |
|        toilet       | 59.58 | 62.85 |
|        flower       |  29.5 | 41.03 |
|         book        | 14.33 | 17.29 |
|         hill        |  3.13 |  5.06 |
|        bench        | 13.36 |  32.4 |
|      countertop     |  45.5 | 64.71 |
|        stove        | 54.24 | 61.52 |
|         palm        | 30.37 | 34.05 |
|    kitchen island   | 21.49 |  50.4 |
|       computer      |  33.1 | 33.87 |
|     swivel chair    | 29.95 | 34.38 |
|         boat        | 23.79 | 24.87 |
|         bar         | 26.73 | 38.53 |
|    arcade machine   |  9.15 | 10.26 |
|        hovel        | 30.95 | 45.11 |
|         bus         |  58.6 | 62.34 |
|        towel        | 39.16 |  47.0 |
|        light        | 37.21 | 41.78 |
|        truck        |  8.58 | 15.85 |
|        tower        | 19.47 | 69.22 |
|      chandelier     | 53.06 | 64.21 |
|        awning       |  7.7  |  8.01 |
|     streetlight     | 25.22 | 32.39 |
|        booth        |  30.1 | 34.09 |
| television receiver | 33.46 | 37.21 |
|       airplane      | 47.18 | 56.58 |
|      dirt track     |  5.4  | 30.23 |
|       apparel       |  32.0 | 44.91 |
|         pole        | 20.15 | 34.94 |
|         land        |  0.0  |  0.0  |
|      bannister      |  1.91 |  3.33 |
|      escalator      |  0.0  |  0.0  |
|       ottoman       | 27.28 | 34.37 |
|        bottle       | 29.79 | 46.12 |
|        buffet       |  0.24 |  0.26 |
|        poster       | 13.69 | 17.82 |
|        stage        |  5.25 | 21.71 |
|         van         | 11.23 | 14.21 |
|         ship        |  6.29 |  6.32 |
|       fountain      |  3.28 |  3.52 |
|    conveyer belt    |  0.0  |  0.0  |
|        canopy       | 16.22 | 32.34 |
|        washer       | 29.35 | 29.38 |
|      plaything      | 12.27 | 13.65 |
|    swimming pool    |  0.0  |  0.0  |
|        stool        | 40.94 | 48.22 |
|        barrel       |  0.49 |  9.41 |
|        basket       | 16.26 | 19.89 |
|      waterfall      | 23.76 | 38.48 |
|         tent        | 10.71 | 11.81 |
|         bag         |  1.81 |  2.1  |
|       minibike      |  59.0 | 65.02 |
|        cradle       | 75.74 | 90.13 |
|         oven        | 35.84 | 48.36 |
|         ball        | 18.25 | 66.83 |
|         food        | 42.79 |  57.7 |
|         step        |  1.24 |  2.91 |
|         tank        | 21.69 | 25.59 |
|      trade name     | 12.27 | 13.46 |
|      microwave      | 17.27 | 17.48 |
|         pot         | 30.92 | 32.51 |
|        animal       | 31.13 | 65.61 |
|       bicycle       | 50.06 | 64.53 |
|         lake        |  0.0  |  0.0  |
|      dishwasher     | 29.45 | 30.12 |
|        screen       | 22.49 | 26.05 |
|       blanket       |  4.83 |  6.62 |
|      sculpture      |  7.26 | 17.98 |
|         hood        | 25.72 | 26.02 |
|        sconce       | 21.89 | 26.23 |
|         vase        | 37.67 | 55.54 |
|    traffic light    | 20.86 | 24.44 |
|         tray        | 10.18 | 15.23 |
|        ashcan       | 28.17 | 30.42 |
|         fan         | 50.67 |  65.4 |
|         pier        |  0.0  |  0.0  |
|      crt screen     |  6.5  | 22.61 |
|        plate        | 42.73 | 52.53 |
|       monitor       |  1.37 |  1.46 |
|    bulletin board   | 19.69 | 22.79 |
|        shower       |  1.45 |  7.5  |
|       radiator      | 14.32 | 14.71 |
|        glass        |  9.41 |  9.75 |
|        clock        | 23.68 | 27.73 |
|         flag        | 20.82 |  22.9 |
+---------------------+-------+-------+
09/21 01:03:52 - mmengine - INFO - Iter(test) [2000/2000]    aAcc: 69.9900  mIoU: 28.4100  mAcc: 38.2500  data_time: 0.0023  time: 0.1899
Finished processing corruption type: gaussian_noise
Processing corruption type: shot_noise
09/21 01:03:59 - mmengine - INFO - 
------------------------------------------------------------
System environment:
    sys.platform: linux
    Python: 3.10.13 | packaged by conda-forge | (main, Dec 23 2023, 15:36:39) [GCC 12.3.0]
    CUDA available: True
    MUSA available: False
    numpy_random_seed: 1999337986
    GPU 0: Tesla V100-SXM2-32GB
    CUDA_HOME: /opt/bwhpc/common/devel/cuda/11.7
    NVCC: Cuda compilation tools, release 11.7, V11.7.99
    GCC: gcc (GCC) 8.5.0 20210514 (Red Hat 8.5.0-18)
    PyTorch: 1.13.1
    PyTorch compiling details: PyTorch built with:
  - GCC 9.3
  - C++ Version: 201402
  - Intel(R) oneAPI Math Kernel Library Version 2023.1-Product Build 20230303 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v2.6.0 (Git Hash 52b5f107dd9cf10910aaa19cb47f3abf9b349815)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - LAPACK is enabled (usually provided by MKL)
  - NNPACK is enabled
  - CPU capability usage: AVX2
  - CUDA Runtime 11.7
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_61,code=sm_61;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86;-gencode;arch=compute_37,code=compute_37
  - CuDNN 8.5
  - Magma 2.6.1
  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.7, CUDNN_VERSION=8.5.0, CXX_COMPILER=/opt/rh/devtoolset-9/root/usr/bin/c++, CXX_FLAGS= -fabi-version=11 -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -DEDGE_PROFILER_USE_KINETO -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Werror=non-virtual-dtor -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wunused-local-typedefs -Wno-unused-parameter -Wno-unused-function -Wno-unused-result -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Werror=cast-function-type -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.13.1, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, USE_ROCM=OFF, 

    TorchVision: 0.14.1
    OpenCV: 3.4.18
    MMEngine: 0.10.4

Runtime environment:
    cudnn_benchmark: True
    mp_cfg: {'mp_start_method': 'fork', 'opencv_num_threads': 0}
    dist_cfg: {'backend': 'nccl'}
    seed: 1999337986
    Distributed launcher: none
    Distributed training: False
    GPU number: 1
------------------------------------------------------------

09/21 01:03:59 - mmengine - INFO - Config:
auto_scale_lr = dict(base_batch_size=16, enable=False)
crop_size = (
    512,
    512,
)
custom_imports = dict(allow_failed_imports=False, imports='mmdet.models')
data_root = 'data/ade/ADEChallengeData2016'
dataset_type = 'ADE20KDataset'
default_hooks = dict(
    checkpoint=dict(
        by_epoch=False, interval=5000, save_best='mIoU',
        type='CheckpointHook'),
    logger=dict(interval=50, log_metric_by_epoch=False, type='LoggerHook'),
    param_scheduler=dict(type='ParamSchedulerHook'),
    sampler_seed=dict(type='DistSamplerSeedHook'),
    timer=dict(type='IterTimerHook'),
    visualization=dict(type='SegVisualizationHook'))
default_scope = 'mmseg'
embed_multi = dict(decay_mult=0.0, lr_mult=1.0)
env_cfg = dict(
    cudnn_benchmark=True,
    dist_cfg=dict(backend='nccl'),
    mp_cfg=dict(mp_start_method='fork', opencv_num_threads=0))
img_ratios = [
    0.5,
    0.75,
    1.0,
    1.25,
    1.5,
    1.75,
]
launcher = 'none'
load_from = '../checkpoint_files/ade20k/mask2former/mask2former_r101_8xb2-160k_ade20k-512x512_20221203_233905-b7135890.pth'
log_level = 'INFO'
log_processor = dict(by_epoch=False)
model = dict(
    backbone=dict(
        deep_stem=False,
        depth=101,
        frozen_stages=-1,
        init_cfg=dict(checkpoint='torchvision://resnet101', type='Pretrained'),
        norm_cfg=dict(requires_grad=False, type='SyncBN'),
        num_stages=4,
        out_indices=(
            0,
            1,
            2,
            3,
        ),
        style='pytorch',
        type='ResNet'),
    data_preprocessor=dict(
        bgr_to_rgb=True,
        corruption='shot_noise',
        mean=[
            123.675,
            116.28,
            103.53,
        ],
        pad_val=0,
        seg_pad_val=255,
        size=(
            512,
            512,
        ),
        std=[
            58.395,
            57.12,
            57.375,
        ],
        test_cfg=dict(size_divisor=32),
        type='SegDataPreProcessor'),
    decode_head=dict(
        align_corners=False,
        enforce_decoder_input_project=False,
        feat_channels=256,
        in_channels=[
            256,
            512,
            1024,
            2048,
        ],
        loss_cls=dict(
            class_weight=[
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                0.1,
            ],
            loss_weight=2.0,
            reduction='mean',
            type='mmdet.CrossEntropyLoss',
            use_sigmoid=False),
        loss_dice=dict(
            activate=True,
            eps=1.0,
            loss_weight=5.0,
            naive_dice=True,
            reduction='mean',
            type='mmdet.DiceLoss',
            use_sigmoid=True),
        loss_mask=dict(
            loss_weight=5.0,
            reduction='mean',
            type='mmdet.CrossEntropyLoss',
            use_sigmoid=True),
        num_classes=150,
        num_queries=100,
        num_transformer_feat_level=3,
        out_channels=256,
        pixel_decoder=dict(
            act_cfg=dict(type='ReLU'),
            encoder=dict(
                init_cfg=None,
                layer_cfg=dict(
                    ffn_cfg=dict(
                        act_cfg=dict(inplace=True, type='ReLU'),
                        embed_dims=256,
                        feedforward_channels=1024,
                        ffn_drop=0.0,
                        num_fcs=2),
                    self_attn_cfg=dict(
                        batch_first=True,
                        dropout=0.0,
                        embed_dims=256,
                        im2col_step=64,
                        init_cfg=None,
                        norm_cfg=None,
                        num_heads=8,
                        num_levels=3,
                        num_points=4)),
                num_layers=6),
            init_cfg=None,
            norm_cfg=dict(num_groups=32, type='GN'),
            num_outs=3,
            positional_encoding=dict(normalize=True, num_feats=128),
            type='mmdet.MSDeformAttnPixelDecoder'),
        positional_encoding=dict(normalize=True, num_feats=128),
        strides=[
            4,
            8,
            16,
            32,
        ],
        train_cfg=dict(
            assigner=dict(
                match_costs=[
                    dict(type='mmdet.ClassificationCost', weight=2.0),
                    dict(
                        type='mmdet.CrossEntropyLossCost',
                        use_sigmoid=True,
                        weight=5.0),
                    dict(
                        eps=1.0,
                        pred_act=True,
                        type='mmdet.DiceCost',
                        weight=5.0),
                ],
                type='mmdet.HungarianAssigner'),
            importance_sample_ratio=0.75,
            num_points=12544,
            oversample_ratio=3.0,
            sampler=dict(type='mmdet.MaskPseudoSampler')),
        transformer_decoder=dict(
            init_cfg=None,
            layer_cfg=dict(
                cross_attn_cfg=dict(
                    attn_drop=0.0,
                    batch_first=True,
                    dropout_layer=None,
                    embed_dims=256,
                    num_heads=8,
                    proj_drop=0.0),
                ffn_cfg=dict(
                    act_cfg=dict(inplace=True, type='ReLU'),
                    add_identity=True,
                    dropout_layer=None,
                    embed_dims=256,
                    feedforward_channels=2048,
                    ffn_drop=0.0,
                    num_fcs=2),
                self_attn_cfg=dict(
                    attn_drop=0.0,
                    batch_first=True,
                    dropout_layer=None,
                    embed_dims=256,
                    num_heads=8,
                    proj_drop=0.0)),
            num_layers=9,
            return_intermediate=True),
        type='Mask2FormerHead'),
    test_cfg=dict(mode='whole'),
    train_cfg=dict(),
    type='EncoderDecoder')
num_classes = 150
optim_wrapper = dict(
    clip_grad=dict(max_norm=0.01, norm_type=2),
    optimizer=dict(
        betas=(
            0.9,
            0.999,
        ),
        eps=1e-08,
        lr=0.0001,
        type='AdamW',
        weight_decay=0.05),
    paramwise_cfg=dict(
        custom_keys=dict(
            backbone=dict(decay_mult=1.0, lr_mult=0.1),
            level_embed=dict(decay_mult=0.0, lr_mult=1.0),
            query_embed=dict(decay_mult=0.0, lr_mult=1.0),
            query_feat=dict(decay_mult=0.0, lr_mult=1.0)),
        norm_decay_mult=0.0),
    type='OptimWrapper')
optimizer = dict(
    betas=(
        0.9,
        0.999,
    ),
    eps=1e-08,
    lr=0.0001,
    type='AdamW',
    weight_decay=0.05)
param_scheduler = [
    dict(
        begin=0,
        by_epoch=False,
        end=160000,
        eta_min=0,
        power=0.9,
        type='PolyLR'),
]
resume = False
test_cfg = dict(type='TestLoop')
test_dataloader = dict(
    batch_size=1,
    dataset=dict(
        data_prefix=dict(
            img_path='images/validation',
            seg_map_path='annotations/validation'),
        data_root='data/ade/ADEChallengeData2016',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(keep_ratio=True, scale=(
                2048,
                512,
            ), type='Resize'),
            dict(reduce_zero_label=True, type='LoadAnnotations'),
            dict(type='PackSegInputs'),
        ],
        type='ADE20KDataset'),
    num_workers=4,
    persistent_workers=True,
    sampler=dict(shuffle=False, type='DefaultSampler'))
test_evaluator = dict(
    iou_metrics=[
        'mIoU',
    ], type='IoUMetric')
test_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(keep_ratio=True, scale=(
        2048,
        512,
    ), type='Resize'),
    dict(reduce_zero_label=True, type='LoadAnnotations'),
    dict(type='PackSegInputs'),
]
train_cfg = dict(
    max_iters=160000, type='IterBasedTrainLoop', val_interval=5000)
train_dataloader = dict(
    batch_size=2,
    dataset=dict(
        data_prefix=dict(
            img_path='images/training', seg_map_path='annotations/training'),
        data_root='data/ade/ADEChallengeData2016',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(reduce_zero_label=True, type='LoadAnnotations'),
            dict(
                max_size=2048,
                resize_type='ResizeShortestEdge',
                scales=[
                    256,
                    307,
                    358,
                    409,
                    460,
                    512,
                    563,
                    614,
                    665,
                    716,
                    768,
                    819,
                    870,
                    921,
                    972,
                    1024,
                ],
                type='RandomChoiceResize'),
            dict(
                cat_max_ratio=0.75, crop_size=(
                    512,
                    512,
                ), type='RandomCrop'),
            dict(prob=0.5, type='RandomFlip'),
            dict(type='PhotoMetricDistortion'),
            dict(type='PackSegInputs'),
        ],
        type='ADE20KDataset'),
    num_workers=4,
    persistent_workers=True,
    sampler=dict(shuffle=True, type='InfiniteSampler'))
train_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(reduce_zero_label=True, type='LoadAnnotations'),
    dict(
        max_size=2048,
        resize_type='ResizeShortestEdge',
        scales=[
            256,
            307,
            358,
            409,
            460,
            512,
            563,
            614,
            665,
            716,
            768,
            819,
            870,
            921,
            972,
            1024,
        ],
        type='RandomChoiceResize'),
    dict(cat_max_ratio=0.75, crop_size=(
        512,
        512,
    ), type='RandomCrop'),
    dict(prob=0.5, type='RandomFlip'),
    dict(type='PhotoMetricDistortion'),
    dict(type='PackSegInputs'),
]
tta_model = dict(type='SegTTAModel')
tta_pipeline = [
    dict(backend_args=None, type='LoadImageFromFile'),
    dict(
        transforms=[
            [
                dict(keep_ratio=True, scale_factor=0.5, type='Resize'),
                dict(keep_ratio=True, scale_factor=0.75, type='Resize'),
                dict(keep_ratio=True, scale_factor=1.0, type='Resize'),
                dict(keep_ratio=True, scale_factor=1.25, type='Resize'),
                dict(keep_ratio=True, scale_factor=1.5, type='Resize'),
                dict(keep_ratio=True, scale_factor=1.75, type='Resize'),
            ],
            [
                dict(direction='horizontal', prob=0.0, type='RandomFlip'),
                dict(direction='horizontal', prob=1.0, type='RandomFlip'),
            ],
            [
                dict(type='LoadAnnotations'),
            ],
            [
                dict(type='PackSegInputs'),
            ],
        ],
        type='TestTimeAug'),
]
val_cfg = dict(type='ValLoop')
val_dataloader = dict(
    batch_size=1,
    dataset=dict(
        data_prefix=dict(
            img_path='images/validation',
            seg_map_path='annotations/validation'),
        data_root='data/ade/ADEChallengeData2016',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(keep_ratio=True, scale=(
                2048,
                512,
            ), type='Resize'),
            dict(reduce_zero_label=True, type='LoadAnnotations'),
            dict(type='PackSegInputs'),
        ],
        type='ADE20KDataset'),
    num_workers=4,
    persistent_workers=True,
    sampler=dict(shuffle=False, type='DefaultSampler'))
val_evaluator = dict(
    iou_metrics=[
        'mIoU',
    ], type='IoUMetric')
vis_backends = [
    dict(type='LocalVisBackend'),
]
visualizer = dict(
    name='visualizer',
    type='SegLocalVisualizer',
    vis_backends=[
        dict(type='LocalVisBackend'),
    ])
work_dir = '../corruptions/work_dirs/ade20k/mask2former/mask2former_r101_8xb2-160k_ade20k-512x512/shot_noise'

09/21 01:04:02 - mmengine - INFO - Distributed training is not used, all SyncBatchNorm (SyncBN) layers in the model will be automatically reverted to BatchNormXd layers if they are used.
09/21 01:04:02 - mmengine - INFO - Hooks will be executed in the following order:
before_run:
(VERY_HIGH   ) RuntimeInfoHook                    
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
before_train:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_train_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(NORMAL      ) DistSamplerSeedHook                
 -------------------- 
before_train_iter:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_train_iter:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(NORMAL      ) SegVisualizationHook               
(BELOW_NORMAL) LoggerHook                         
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
after_train_epoch:
(NORMAL      ) IterTimerHook                      
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_val:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
before_val_epoch:
(NORMAL      ) IterTimerHook                      
 -------------------- 
before_val_iter:
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_val_iter:
(NORMAL      ) IterTimerHook                      
(NORMAL      ) SegVisualizationHook               
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_val_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
after_val:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
after_train:
(VERY_HIGH   ) RuntimeInfoHook                    
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_test:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
before_test_epoch:
(NORMAL      ) IterTimerHook                      
 -------------------- 
before_test_iter:
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_test_iter:
(NORMAL      ) IterTimerHook                      
(NORMAL      ) SegVisualizationHook               
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_test_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_test:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
after_run:
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
09/21 01:04:02 - mmengine - WARNING - The prefix is not set in metric class IoUMetric.
Loads checkpoint by local backend from path: ../checkpoint_files/ade20k/mask2former/mask2former_r101_8xb2-160k_ade20k-512x512_20221203_233905-b7135890.pth
09/21 01:04:03 - mmengine - INFO - Load checkpoint from ../checkpoint_files/ade20k/mask2former/mask2former_r101_8xb2-160k_ade20k-512x512_20221203_233905-b7135890.pth
09/21 01:05:13 - mmengine - INFO - Iter(test) [  50/2000]    eta: 0:45:29  time: 1.0514  data_time: 0.0015  memory: 17239  
09/21 01:05:35 - mmengine - INFO - Iter(test) [ 100/2000]    eta: 0:29:00  time: 0.6470  data_time: 0.0016  memory: 17230  
09/21 01:05:44 - mmengine - INFO - Iter(test) [ 150/2000]    eta: 0:20:40  time: 0.1784  data_time: 0.0015  memory: 943  
09/21 01:06:02 - mmengine - INFO - Iter(test) [ 200/2000]    eta: 0:17:52  time: 0.1770  data_time: 0.0014  memory: 17287  
09/21 01:06:17 - mmengine - INFO - Iter(test) [ 250/2000]    eta: 0:15:39  time: 0.1830  data_time: 0.0014  memory: 17293  
09/21 01:06:31 - mmengine - INFO - Iter(test) [ 300/2000]    eta: 0:13:54  time: 0.1873  data_time: 0.0015  memory: 17234  
09/21 01:06:48 - mmengine - INFO - Iter(test) [ 350/2000]    eta: 0:12:56  time: 0.1722  data_time: 0.0014  memory: 17237  
09/21 01:07:01 - mmengine - INFO - Iter(test) [ 400/2000]    eta: 0:11:51  time: 0.1737  data_time: 0.0014  memory: 17220  
09/21 01:07:09 - mmengine - INFO - Iter(test) [ 450/2000]    eta: 0:10:40  time: 0.1735  data_time: 0.0014  memory: 955  
09/21 01:07:18 - mmengine - INFO - Iter(test) [ 500/2000]    eta: 0:09:45  time: 0.1746  data_time: 0.0014  memory: 943  
09/21 01:07:27 - mmengine - INFO - Iter(test) [ 550/2000]    eta: 0:08:58  time: 0.1834  data_time: 0.0015  memory: 1055  
09/21 01:07:37 - mmengine - INFO - Iter(test) [ 600/2000]    eta: 0:08:17  time: 0.1893  data_time: 0.0015  memory: 1053  
09/21 01:07:50 - mmengine - INFO - Iter(test) [ 650/2000]    eta: 0:07:51  time: 0.6425  data_time: 0.0014  memory: 17241  
09/21 01:08:04 - mmengine - INFO - Iter(test) [ 700/2000]    eta: 0:07:26  time: 0.1768  data_time: 0.0015  memory: 17235  
09/21 01:08:13 - mmengine - INFO - Iter(test) [ 750/2000]    eta: 0:06:56  time: 0.1822  data_time: 0.0014  memory: 1112  
09/21 01:08:22 - mmengine - INFO - Iter(test) [ 800/2000]    eta: 0:06:27  time: 0.1762  data_time: 0.0015  memory: 943  
09/21 01:08:31 - mmengine - INFO - Iter(test) [ 850/2000]    eta: 0:06:01  time: 0.1886  data_time: 0.0016  memory: 915  
09/21 01:08:39 - mmengine - INFO - Iter(test) [ 900/2000]    eta: 0:05:37  time: 0.1612  data_time: 0.0014  memory: 998  
09/21 01:08:48 - mmengine - INFO - Iter(test) [ 950/2000]    eta: 0:05:15  time: 0.1810  data_time: 0.0015  memory: 1027  
09/21 01:08:57 - mmengine - INFO - Iter(test) [1000/2000]    eta: 0:04:54  time: 0.1751  data_time: 0.0014  memory: 1027  
09/21 01:09:11 - mmengine - INFO - Iter(test) [1050/2000]    eta: 0:04:38  time: 0.1885  data_time: 0.0014  memory: 17242  
09/21 01:09:20 - mmengine - INFO - Iter(test) [1100/2000]    eta: 0:04:19  time: 0.1717  data_time: 0.0015  memory: 1024  
09/21 01:09:29 - mmengine - INFO - Iter(test) [1150/2000]    eta: 0:04:00  time: 0.1845  data_time: 0.0014  memory: 996  
09/21 01:09:38 - mmengine - INFO - Iter(test) [1200/2000]    eta: 0:03:43  time: 0.1760  data_time: 0.0014  memory: 1900  
09/21 01:09:52 - mmengine - INFO - Iter(test) [1250/2000]    eta: 0:03:29  time: 0.1815  data_time: 0.0014  memory: 17230  
09/21 01:10:00 - mmengine - INFO - Iter(test) [1300/2000]    eta: 0:03:12  time: 0.1753  data_time: 0.0014  memory: 943  
09/21 01:10:09 - mmengine - INFO - Iter(test) [1350/2000]    eta: 0:02:56  time: 0.1744  data_time: 0.0014  memory: 943  
09/21 01:10:19 - mmengine - INFO - Iter(test) [1400/2000]    eta: 0:02:40  time: 0.1923  data_time: 0.0014  memory: 1025  
09/21 01:10:27 - mmengine - INFO - Iter(test) [1450/2000]    eta: 0:02:25  time: 0.1797  data_time: 0.0014  memory: 1027  
09/21 01:10:36 - mmengine - INFO - Iter(test) [1500/2000]    eta: 0:02:10  time: 0.1714  data_time: 0.0014  memory: 941  
09/21 01:10:45 - mmengine - INFO - Iter(test) [1550/2000]    eta: 0:01:56  time: 0.1787  data_time: 0.0014  memory: 1027  
09/21 01:10:54 - mmengine - INFO - Iter(test) [1600/2000]    eta: 0:01:42  time: 0.1807  data_time: 0.0015  memory: 915  
09/21 01:11:07 - mmengine - INFO - Iter(test) [1650/2000]    eta: 0:01:29  time: 0.1598  data_time: 0.0014  memory: 17237  
09/21 01:11:16 - mmengine - INFO - Iter(test) [1700/2000]    eta: 0:01:16  time: 0.1858  data_time: 0.0015  memory: 1024  
09/21 01:11:25 - mmengine - INFO - Iter(test) [1750/2000]    eta: 0:01:03  time: 0.1782  data_time: 0.0014  memory: 1052  
09/21 01:11:34 - mmengine - INFO - Iter(test) [1800/2000]    eta: 0:00:50  time: 0.1890  data_time: 0.0016  memory: 943  
09/21 01:11:43 - mmengine - INFO - Iter(test) [1850/2000]    eta: 0:00:37  time: 0.1761  data_time: 0.0016  memory: 859  
09/21 01:11:52 - mmengine - INFO - Iter(test) [1900/2000]    eta: 0:00:24  time: 0.1785  data_time: 0.0014  memory: 1084  
09/21 01:12:01 - mmengine - INFO - Iter(test) [1950/2000]    eta: 0:00:12  time: 0.1726  data_time: 0.0014  memory: 1331  
09/21 01:12:10 - mmengine - INFO - Iter(test) [2000/2000]    eta: 0:00:00  time: 0.1671  data_time: 0.0013  memory: 1110  
09/21 01:12:10 - mmengine - INFO - per class results:
09/21 01:12:10 - mmengine - INFO - 
+---------------------+-------+-------+
|        Class        |  IoU  |  Acc  |
+---------------------+-------+-------+
|         wall        | 61.89 | 80.62 |
|       building      | 73.04 |  82.2 |
|         sky         | 87.36 | 92.19 |
|        floor        | 68.08 | 84.46 |
|         tree        | 59.53 | 86.85 |
|       ceiling       | 71.75 | 90.27 |
|         road        | 58.33 | 66.05 |
|         bed         | 79.75 | 89.53 |
|      windowpane     | 41.61 | 49.56 |
|        grass        | 53.33 | 62.88 |
|       cabinet       | 38.03 | 47.12 |
|       sidewalk      |  18.7 | 19.87 |
|        person       | 72.79 |  83.7 |
|        earth        | 18.04 | 60.99 |
|         door        | 22.85 | 38.37 |
|        table        | 47.62 | 61.16 |
|       mountain      | 34.19 | 41.44 |
|        plant        | 35.84 | 44.76 |
|       curtain       | 41.07 | 70.26 |
|        chair        | 51.16 | 68.45 |
|         car         | 78.12 | 85.52 |
|        water        | 32.43 | 60.88 |
|       painting      | 57.65 | 67.79 |
|         sofa        | 55.07 | 80.44 |
|        shelf        | 27.34 | 37.52 |
|        house        |  45.1 | 70.71 |
|         sea         | 19.31 | 25.31 |
|        mirror       |  40.1 | 47.43 |
|         rug         | 23.28 | 24.36 |
|        field        |  15.8 | 41.62 |
|       armchair      | 27.34 | 41.42 |
|         seat        | 40.24 | 59.63 |
|        fence        | 20.29 | 34.54 |
|         desk        | 25.49 | 29.23 |
|         rock        | 18.85 | 24.37 |
|       wardrobe      | 38.87 | 58.96 |
|         lamp        | 49.89 |  54.7 |
|       bathtub       | 29.45 | 42.11 |
|       railing       | 14.31 | 19.68 |
|       cushion       | 30.89 | 33.72 |
|         base        | 19.07 | 26.09 |
|         box         |  6.28 |  9.83 |
|        column       | 28.26 |  61.7 |
|      signboard      | 30.47 | 36.87 |
|   chest of drawers  | 30.64 | 40.25 |
|       counter       |  8.03 |  10.8 |
|         sand        |  5.24 |  7.59 |
|         sink        | 38.55 | 49.62 |
|      skyscraper     | 35.03 | 51.51 |
|      fireplace      | 46.05 | 61.06 |
|     refrigerator    | 47.36 | 50.18 |
|      grandstand     |  26.3 | 62.98 |
|         path        | 20.55 | 27.97 |
|        stairs       | 16.25 | 35.97 |
|        runway       |  0.0  |  0.0  |
|         case        | 33.76 | 37.75 |
|      pool table     | 82.97 | 85.99 |
|        pillow       | 36.04 | 42.78 |
|     screen door     | 17.66 | 39.83 |
|       stairway      | 23.76 | 31.65 |
|        river        |  1.58 |  2.35 |
|        bridge       | 20.12 | 26.91 |
|       bookcase      |  5.66 |  6.21 |
|        blind        |  0.34 |  0.34 |
|     coffee table    | 48.43 | 60.35 |
|        toilet       | 51.07 | 53.39 |
|        flower       | 28.11 | 41.45 |
|         book        | 14.25 | 16.66 |
|         hill        |  1.42 |  2.41 |
|        bench        | 10.98 | 35.31 |
|      countertop     |  41.9 | 57.72 |
|        stove        |  40.1 | 44.27 |
|         palm        |  32.8 | 40.21 |
|    kitchen island   | 20.72 | 42.73 |
|       computer      | 32.47 | 34.02 |
|     swivel chair    | 46.33 | 57.35 |
|         boat        |  3.99 |  4.05 |
|         bar         |  27.3 | 45.48 |
|    arcade machine   |  4.68 |  5.81 |
|        hovel        |  8.88 | 12.35 |
|         bus         | 68.78 | 72.34 |
|        towel        | 21.91 |  27.1 |
|        light        | 28.32 | 30.49 |
|        truck        | 21.13 | 30.65 |
|        tower        | 19.97 | 58.42 |
|      chandelier     | 48.06 | 57.72 |
|        awning       |  6.68 |  7.08 |
|     streetlight     | 24.61 | 29.51 |
|        booth        | 18.09 | 20.14 |
| television receiver | 46.79 |  51.3 |
|       airplane      | 43.08 | 50.85 |
|      dirt track     |  0.0  |  0.0  |
|       apparel       | 32.02 | 46.89 |
|         pole        |  21.8 | 37.36 |
|         land        |  0.0  |  0.0  |
|      bannister      |  2.94 |  4.13 |
|      escalator      |  0.0  |  0.0  |
|       ottoman       |  28.5 | 49.95 |
|        bottle       | 27.19 | 40.57 |
|        buffet       | 33.77 | 39.08 |
|        poster       |  1.86 |  2.34 |
|        stage        |  6.84 | 23.81 |
|         van         |  9.53 | 11.19 |
|         ship        |  3.22 |  6.07 |
|       fountain      | 18.92 | 19.24 |
|    conveyer belt    |  0.0  |  0.0  |
|        canopy       | 19.89 | 33.16 |
|        washer       |  0.02 |  0.02 |
|      plaything      | 19.16 | 23.23 |
|    swimming pool    |  32.3 | 39.27 |
|        stool        | 39.87 | 58.26 |
|        barrel       |  0.74 | 33.03 |
|        basket       | 18.22 | 26.62 |
|      waterfall      | 15.91 | 25.46 |
|         tent        |  12.0 | 12.05 |
|         bag         |  5.43 |  6.49 |
|       minibike      | 58.88 |  63.3 |
|        cradle       | 52.54 | 62.18 |
|         oven        | 42.96 | 55.12 |
|         ball        | 22.99 | 66.95 |
|         food        | 40.63 | 53.76 |
|         step        |  2.43 |  5.11 |
|         tank        | 21.65 |  25.8 |
|      trade name     | 14.67 | 15.36 |
|      microwave      | 18.71 | 18.83 |
|         pot         |  27.3 | 28.59 |
|        animal       | 42.66 | 72.29 |
|       bicycle       | 53.82 | 66.28 |
|         lake        |  0.0  |  0.0  |
|      dishwasher     | 35.18 | 35.52 |
|        screen       | 39.38 | 42.01 |
|       blanket       |  7.23 |  8.68 |
|      sculpture      |  16.8 | 45.92 |
|         hood        | 21.37 | 22.75 |
|        sconce       | 20.03 | 23.68 |
|         vase        | 25.59 |  43.6 |
|    traffic light    | 19.54 | 22.45 |
|         tray        |  6.98 | 10.67 |
|        ashcan       | 22.18 | 23.63 |
|         fan         | 50.17 | 65.35 |
|         pier        |  0.0  |  0.0  |
|      crt screen     | 10.84 | 38.46 |
|        plate        | 40.02 |  53.3 |
|       monitor       |  1.64 |  1.7  |
|    bulletin board   | 12.67 | 13.69 |
|        shower       |  0.91 |  9.38 |
|       radiator      | 12.08 | 13.13 |
|        glass        |  9.8  | 10.06 |
|        clock        | 21.35 |  25.0 |
|         flag        | 14.08 | 14.89 |
+---------------------+-------+-------+
09/21 01:12:10 - mmengine - INFO - Iter(test) [2000/2000]    aAcc: 69.7600  mIoU: 28.0200  mAcc: 37.6800  data_time: 0.0016  time: 0.2431
Finished processing corruption type: shot_noise
Processing corruption type: impulse_noise
09/21 01:12:14 - mmengine - INFO - 
------------------------------------------------------------
System environment:
    sys.platform: linux
    Python: 3.10.13 | packaged by conda-forge | (main, Dec 23 2023, 15:36:39) [GCC 12.3.0]
    CUDA available: True
    MUSA available: False
    numpy_random_seed: 254022820
    GPU 0: Tesla V100-SXM2-32GB
    CUDA_HOME: /opt/bwhpc/common/devel/cuda/11.7
    NVCC: Cuda compilation tools, release 11.7, V11.7.99
    GCC: gcc (GCC) 8.5.0 20210514 (Red Hat 8.5.0-18)
    PyTorch: 1.13.1
    PyTorch compiling details: PyTorch built with:
  - GCC 9.3
  - C++ Version: 201402
  - Intel(R) oneAPI Math Kernel Library Version 2023.1-Product Build 20230303 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v2.6.0 (Git Hash 52b5f107dd9cf10910aaa19cb47f3abf9b349815)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - LAPACK is enabled (usually provided by MKL)
  - NNPACK is enabled
  - CPU capability usage: AVX2
  - CUDA Runtime 11.7
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_61,code=sm_61;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86;-gencode;arch=compute_37,code=compute_37
  - CuDNN 8.5
  - Magma 2.6.1
  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.7, CUDNN_VERSION=8.5.0, CXX_COMPILER=/opt/rh/devtoolset-9/root/usr/bin/c++, CXX_FLAGS= -fabi-version=11 -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -DEDGE_PROFILER_USE_KINETO -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Werror=non-virtual-dtor -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wunused-local-typedefs -Wno-unused-parameter -Wno-unused-function -Wno-unused-result -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Werror=cast-function-type -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.13.1, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, USE_ROCM=OFF, 

    TorchVision: 0.14.1
    OpenCV: 3.4.18
    MMEngine: 0.10.4

Runtime environment:
    cudnn_benchmark: True
    mp_cfg: {'mp_start_method': 'fork', 'opencv_num_threads': 0}
    dist_cfg: {'backend': 'nccl'}
    seed: 254022820
    Distributed launcher: none
    Distributed training: False
    GPU number: 1
------------------------------------------------------------

09/21 01:12:14 - mmengine - INFO - Config:
auto_scale_lr = dict(base_batch_size=16, enable=False)
crop_size = (
    512,
    512,
)
custom_imports = dict(allow_failed_imports=False, imports='mmdet.models')
data_root = 'data/ade/ADEChallengeData2016'
dataset_type = 'ADE20KDataset'
default_hooks = dict(
    checkpoint=dict(
        by_epoch=False, interval=5000, save_best='mIoU',
        type='CheckpointHook'),
    logger=dict(interval=50, log_metric_by_epoch=False, type='LoggerHook'),
    param_scheduler=dict(type='ParamSchedulerHook'),
    sampler_seed=dict(type='DistSamplerSeedHook'),
    timer=dict(type='IterTimerHook'),
    visualization=dict(type='SegVisualizationHook'))
default_scope = 'mmseg'
embed_multi = dict(decay_mult=0.0, lr_mult=1.0)
env_cfg = dict(
    cudnn_benchmark=True,
    dist_cfg=dict(backend='nccl'),
    mp_cfg=dict(mp_start_method='fork', opencv_num_threads=0))
img_ratios = [
    0.5,
    0.75,
    1.0,
    1.25,
    1.5,
    1.75,
]
launcher = 'none'
load_from = '../checkpoint_files/ade20k/mask2former/mask2former_r101_8xb2-160k_ade20k-512x512_20221203_233905-b7135890.pth'
log_level = 'INFO'
log_processor = dict(by_epoch=False)
model = dict(
    backbone=dict(
        deep_stem=False,
        depth=101,
        frozen_stages=-1,
        init_cfg=dict(checkpoint='torchvision://resnet101', type='Pretrained'),
        norm_cfg=dict(requires_grad=False, type='SyncBN'),
        num_stages=4,
        out_indices=(
            0,
            1,
            2,
            3,
        ),
        style='pytorch',
        type='ResNet'),
    data_preprocessor=dict(
        bgr_to_rgb=True,
        corruption='impulse_noise',
        mean=[
            123.675,
            116.28,
            103.53,
        ],
        pad_val=0,
        seg_pad_val=255,
        size=(
            512,
            512,
        ),
        std=[
            58.395,
            57.12,
            57.375,
        ],
        test_cfg=dict(size_divisor=32),
        type='SegDataPreProcessor'),
    decode_head=dict(
        align_corners=False,
        enforce_decoder_input_project=False,
        feat_channels=256,
        in_channels=[
            256,
            512,
            1024,
            2048,
        ],
        loss_cls=dict(
            class_weight=[
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                0.1,
            ],
            loss_weight=2.0,
            reduction='mean',
            type='mmdet.CrossEntropyLoss',
            use_sigmoid=False),
        loss_dice=dict(
            activate=True,
            eps=1.0,
            loss_weight=5.0,
            naive_dice=True,
            reduction='mean',
            type='mmdet.DiceLoss',
            use_sigmoid=True),
        loss_mask=dict(
            loss_weight=5.0,
            reduction='mean',
            type='mmdet.CrossEntropyLoss',
            use_sigmoid=True),
        num_classes=150,
        num_queries=100,
        num_transformer_feat_level=3,
        out_channels=256,
        pixel_decoder=dict(
            act_cfg=dict(type='ReLU'),
            encoder=dict(
                init_cfg=None,
                layer_cfg=dict(
                    ffn_cfg=dict(
                        act_cfg=dict(inplace=True, type='ReLU'),
                        embed_dims=256,
                        feedforward_channels=1024,
                        ffn_drop=0.0,
                        num_fcs=2),
                    self_attn_cfg=dict(
                        batch_first=True,
                        dropout=0.0,
                        embed_dims=256,
                        im2col_step=64,
                        init_cfg=None,
                        norm_cfg=None,
                        num_heads=8,
                        num_levels=3,
                        num_points=4)),
                num_layers=6),
            init_cfg=None,
            norm_cfg=dict(num_groups=32, type='GN'),
            num_outs=3,
            positional_encoding=dict(normalize=True, num_feats=128),
            type='mmdet.MSDeformAttnPixelDecoder'),
        positional_encoding=dict(normalize=True, num_feats=128),
        strides=[
            4,
            8,
            16,
            32,
        ],
        train_cfg=dict(
            assigner=dict(
                match_costs=[
                    dict(type='mmdet.ClassificationCost', weight=2.0),
                    dict(
                        type='mmdet.CrossEntropyLossCost',
                        use_sigmoid=True,
                        weight=5.0),
                    dict(
                        eps=1.0,
                        pred_act=True,
                        type='mmdet.DiceCost',
                        weight=5.0),
                ],
                type='mmdet.HungarianAssigner'),
            importance_sample_ratio=0.75,
            num_points=12544,
            oversample_ratio=3.0,
            sampler=dict(type='mmdet.MaskPseudoSampler')),
        transformer_decoder=dict(
            init_cfg=None,
            layer_cfg=dict(
                cross_attn_cfg=dict(
                    attn_drop=0.0,
                    batch_first=True,
                    dropout_layer=None,
                    embed_dims=256,
                    num_heads=8,
                    proj_drop=0.0),
                ffn_cfg=dict(
                    act_cfg=dict(inplace=True, type='ReLU'),
                    add_identity=True,
                    dropout_layer=None,
                    embed_dims=256,
                    feedforward_channels=2048,
                    ffn_drop=0.0,
                    num_fcs=2),
                self_attn_cfg=dict(
                    attn_drop=0.0,
                    batch_first=True,
                    dropout_layer=None,
                    embed_dims=256,
                    num_heads=8,
                    proj_drop=0.0)),
            num_layers=9,
            return_intermediate=True),
        type='Mask2FormerHead'),
    test_cfg=dict(mode='whole'),
    train_cfg=dict(),
    type='EncoderDecoder')
num_classes = 150
optim_wrapper = dict(
    clip_grad=dict(max_norm=0.01, norm_type=2),
    optimizer=dict(
        betas=(
            0.9,
            0.999,
        ),
        eps=1e-08,
        lr=0.0001,
        type='AdamW',
        weight_decay=0.05),
    paramwise_cfg=dict(
        custom_keys=dict(
            backbone=dict(decay_mult=1.0, lr_mult=0.1),
            level_embed=dict(decay_mult=0.0, lr_mult=1.0),
            query_embed=dict(decay_mult=0.0, lr_mult=1.0),
            query_feat=dict(decay_mult=0.0, lr_mult=1.0)),
        norm_decay_mult=0.0),
    type='OptimWrapper')
optimizer = dict(
    betas=(
        0.9,
        0.999,
    ),
    eps=1e-08,
    lr=0.0001,
    type='AdamW',
    weight_decay=0.05)
param_scheduler = [
    dict(
        begin=0,
        by_epoch=False,
        end=160000,
        eta_min=0,
        power=0.9,
        type='PolyLR'),
]
resume = False
test_cfg = dict(type='TestLoop')
test_dataloader = dict(
    batch_size=1,
    dataset=dict(
        data_prefix=dict(
            img_path='images/validation',
            seg_map_path='annotations/validation'),
        data_root='data/ade/ADEChallengeData2016',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(keep_ratio=True, scale=(
                2048,
                512,
            ), type='Resize'),
            dict(reduce_zero_label=True, type='LoadAnnotations'),
            dict(type='PackSegInputs'),
        ],
        type='ADE20KDataset'),
    num_workers=4,
    persistent_workers=True,
    sampler=dict(shuffle=False, type='DefaultSampler'))
test_evaluator = dict(
    iou_metrics=[
        'mIoU',
    ], type='IoUMetric')
test_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(keep_ratio=True, scale=(
        2048,
        512,
    ), type='Resize'),
    dict(reduce_zero_label=True, type='LoadAnnotations'),
    dict(type='PackSegInputs'),
]
train_cfg = dict(
    max_iters=160000, type='IterBasedTrainLoop', val_interval=5000)
train_dataloader = dict(
    batch_size=2,
    dataset=dict(
        data_prefix=dict(
            img_path='images/training', seg_map_path='annotations/training'),
        data_root='data/ade/ADEChallengeData2016',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(reduce_zero_label=True, type='LoadAnnotations'),
            dict(
                max_size=2048,
                resize_type='ResizeShortestEdge',
                scales=[
                    256,
                    307,
                    358,
                    409,
                    460,
                    512,
                    563,
                    614,
                    665,
                    716,
                    768,
                    819,
                    870,
                    921,
                    972,
                    1024,
                ],
                type='RandomChoiceResize'),
            dict(
                cat_max_ratio=0.75, crop_size=(
                    512,
                    512,
                ), type='RandomCrop'),
            dict(prob=0.5, type='RandomFlip'),
            dict(type='PhotoMetricDistortion'),
            dict(type='PackSegInputs'),
        ],
        type='ADE20KDataset'),
    num_workers=4,
    persistent_workers=True,
    sampler=dict(shuffle=True, type='InfiniteSampler'))
train_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(reduce_zero_label=True, type='LoadAnnotations'),
    dict(
        max_size=2048,
        resize_type='ResizeShortestEdge',
        scales=[
            256,
            307,
            358,
            409,
            460,
            512,
            563,
            614,
            665,
            716,
            768,
            819,
            870,
            921,
            972,
            1024,
        ],
        type='RandomChoiceResize'),
    dict(cat_max_ratio=0.75, crop_size=(
        512,
        512,
    ), type='RandomCrop'),
    dict(prob=0.5, type='RandomFlip'),
    dict(type='PhotoMetricDistortion'),
    dict(type='PackSegInputs'),
]
tta_model = dict(type='SegTTAModel')
tta_pipeline = [
    dict(backend_args=None, type='LoadImageFromFile'),
    dict(
        transforms=[
            [
                dict(keep_ratio=True, scale_factor=0.5, type='Resize'),
                dict(keep_ratio=True, scale_factor=0.75, type='Resize'),
                dict(keep_ratio=True, scale_factor=1.0, type='Resize'),
                dict(keep_ratio=True, scale_factor=1.25, type='Resize'),
                dict(keep_ratio=True, scale_factor=1.5, type='Resize'),
                dict(keep_ratio=True, scale_factor=1.75, type='Resize'),
            ],
            [
                dict(direction='horizontal', prob=0.0, type='RandomFlip'),
                dict(direction='horizontal', prob=1.0, type='RandomFlip'),
            ],
            [
                dict(type='LoadAnnotations'),
            ],
            [
                dict(type='PackSegInputs'),
            ],
        ],
        type='TestTimeAug'),
]
val_cfg = dict(type='ValLoop')
val_dataloader = dict(
    batch_size=1,
    dataset=dict(
        data_prefix=dict(
            img_path='images/validation',
            seg_map_path='annotations/validation'),
        data_root='data/ade/ADEChallengeData2016',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(keep_ratio=True, scale=(
                2048,
                512,
            ), type='Resize'),
            dict(reduce_zero_label=True, type='LoadAnnotations'),
            dict(type='PackSegInputs'),
        ],
        type='ADE20KDataset'),
    num_workers=4,
    persistent_workers=True,
    sampler=dict(shuffle=False, type='DefaultSampler'))
val_evaluator = dict(
    iou_metrics=[
        'mIoU',
    ], type='IoUMetric')
vis_backends = [
    dict(type='LocalVisBackend'),
]
visualizer = dict(
    name='visualizer',
    type='SegLocalVisualizer',
    vis_backends=[
        dict(type='LocalVisBackend'),
    ])
work_dir = '../corruptions/work_dirs/ade20k/mask2former/mask2former_r101_8xb2-160k_ade20k-512x512/impulse_noise'

09/21 01:12:17 - mmengine - INFO - Distributed training is not used, all SyncBatchNorm (SyncBN) layers in the model will be automatically reverted to BatchNormXd layers if they are used.
09/21 01:12:17 - mmengine - INFO - Hooks will be executed in the following order:
before_run:
(VERY_HIGH   ) RuntimeInfoHook                    
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
before_train:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_train_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(NORMAL      ) DistSamplerSeedHook                
 -------------------- 
before_train_iter:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_train_iter:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(NORMAL      ) SegVisualizationHook               
(BELOW_NORMAL) LoggerHook                         
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
after_train_epoch:
(NORMAL      ) IterTimerHook                      
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_val:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
before_val_epoch:
(NORMAL      ) IterTimerHook                      
 -------------------- 
before_val_iter:
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_val_iter:
(NORMAL      ) IterTimerHook                      
(NORMAL      ) SegVisualizationHook               
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_val_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
after_val:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
after_train:
(VERY_HIGH   ) RuntimeInfoHook                    
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_test:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
before_test_epoch:
(NORMAL      ) IterTimerHook                      
 -------------------- 
before_test_iter:
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_test_iter:
(NORMAL      ) IterTimerHook                      
(NORMAL      ) SegVisualizationHook               
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_test_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_test:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
after_run:
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
09/21 01:12:18 - mmengine - WARNING - The prefix is not set in metric class IoUMetric.
Loads checkpoint by local backend from path: ../checkpoint_files/ade20k/mask2former/mask2former_r101_8xb2-160k_ade20k-512x512_20221203_233905-b7135890.pth
09/21 01:12:18 - mmengine - INFO - Load checkpoint from ../checkpoint_files/ade20k/mask2former/mask2former_r101_8xb2-160k_ade20k-512x512_20221203_233905-b7135890.pth
09/21 01:13:23 - mmengine - INFO - Iter(test) [  50/2000]    eta: 0:42:10  time: 0.9453  data_time: 0.0015  memory: 17239  
09/21 01:13:40 - mmengine - INFO - Iter(test) [ 100/2000]    eta: 0:25:53  time: 0.5429  data_time: 0.0016  memory: 17230  
09/21 01:13:44 - mmengine - INFO - Iter(test) [ 150/2000]    eta: 0:17:39  time: 0.0873  data_time: 0.0015  memory: 943  
09/21 01:13:58 - mmengine - INFO - Iter(test) [ 200/2000]    eta: 0:14:59  time: 0.0903  data_time: 0.0015  memory: 17287  
09/21 01:14:09 - mmengine - INFO - Iter(test) [ 250/2000]    eta: 0:12:51  time: 0.0912  data_time: 0.0015  memory: 17293  
09/21 01:14:18 - mmengine - INFO - Iter(test) [ 300/2000]    eta: 0:11:14  time: 0.0901  data_time: 0.0016  memory: 17234  
09/21 01:14:30 - mmengine - INFO - Iter(test) [ 350/2000]    eta: 0:10:22  time: 0.0877  data_time: 0.0014  memory: 17237  
09/21 01:14:39 - mmengine - INFO - Iter(test) [ 400/2000]    eta: 0:09:21  time: 0.0815  data_time: 0.0014  memory: 17220  
09/21 01:14:43 - mmengine - INFO - Iter(test) [ 450/2000]    eta: 0:08:16  time: 0.0779  data_time: 0.0014  memory: 955  
09/21 01:14:47 - mmengine - INFO - Iter(test) [ 500/2000]    eta: 0:07:24  time: 0.0775  data_time: 0.0014  memory: 943  
09/21 01:14:51 - mmengine - INFO - Iter(test) [ 550/2000]    eta: 0:06:42  time: 0.0922  data_time: 0.0015  memory: 1055  
09/21 01:14:56 - mmengine - INFO - Iter(test) [ 600/2000]    eta: 0:06:06  time: 0.0885  data_time: 0.0015  memory: 1053  
09/21 01:15:04 - mmengine - INFO - Iter(test) [ 650/2000]    eta: 0:05:44  time: 0.5439  data_time: 0.0014  memory: 17241  
09/21 01:15:14 - mmengine - INFO - Iter(test) [ 700/2000]    eta: 0:05:25  time: 0.0931  data_time: 0.0016  memory: 17235  
09/21 01:15:18 - mmengine - INFO - Iter(test) [ 750/2000]    eta: 0:04:59  time: 0.0848  data_time: 0.0014  memory: 1112  
09/21 01:15:22 - mmengine - INFO - Iter(test) [ 800/2000]    eta: 0:04:35  time: 0.0793  data_time: 0.0016  memory: 943  
09/21 01:15:26 - mmengine - INFO - Iter(test) [ 850/2000]    eta: 0:04:14  time: 0.0813  data_time: 0.0018  memory: 915  
09/21 01:15:31 - mmengine - INFO - Iter(test) [ 900/2000]    eta: 0:03:54  time: 0.0847  data_time: 0.0014  memory: 998  
09/21 01:15:35 - mmengine - INFO - Iter(test) [ 950/2000]    eta: 0:03:37  time: 0.0886  data_time: 0.0015  memory: 1027  
09/21 01:15:39 - mmengine - INFO - Iter(test) [1000/2000]    eta: 0:03:20  time: 0.0773  data_time: 0.0015  memory: 1027  
09/21 01:15:48 - mmengine - INFO - Iter(test) [1050/2000]    eta: 0:03:09  time: 0.0920  data_time: 0.0015  memory: 17242  
09/21 01:15:53 - mmengine - INFO - Iter(test) [1100/2000]    eta: 0:02:55  time: 0.0860  data_time: 0.0015  memory: 1024  
09/21 01:15:57 - mmengine - INFO - Iter(test) [1150/2000]    eta: 0:02:41  time: 0.0890  data_time: 0.0015  memory: 996  
09/21 01:16:01 - mmengine - INFO - Iter(test) [1200/2000]    eta: 0:02:28  time: 0.0790  data_time: 0.0015  memory: 1900  
09/21 01:16:10 - mmengine - INFO - Iter(test) [1250/2000]    eta: 0:02:18  time: 0.0869  data_time: 0.0014  memory: 17230  
09/21 01:16:14 - mmengine - INFO - Iter(test) [1300/2000]    eta: 0:02:06  time: 0.0916  data_time: 0.0014  memory: 943  
09/21 01:16:19 - mmengine - INFO - Iter(test) [1350/2000]    eta: 0:01:55  time: 0.0768  data_time: 0.0014  memory: 943  
09/21 01:16:23 - mmengine - INFO - Iter(test) [1400/2000]    eta: 0:01:44  time: 0.0838  data_time: 0.0015  memory: 1025  
09/21 01:16:27 - mmengine - INFO - Iter(test) [1450/2000]    eta: 0:01:34  time: 0.0840  data_time: 0.0015  memory: 1027  
09/21 01:16:31 - mmengine - INFO - Iter(test) [1500/2000]    eta: 0:01:24  time: 0.0824  data_time: 0.0014  memory: 941  
09/21 01:16:35 - mmengine - INFO - Iter(test) [1550/2000]    eta: 0:01:14  time: 0.0879  data_time: 0.0014  memory: 1027  
09/21 01:16:40 - mmengine - INFO - Iter(test) [1600/2000]    eta: 0:01:05  time: 0.0779  data_time: 0.0016  memory: 915  
09/21 01:16:48 - mmengine - INFO - Iter(test) [1650/2000]    eta: 0:00:57  time: 0.0843  data_time: 0.0014  memory: 17237  
09/21 01:16:53 - mmengine - INFO - Iter(test) [1700/2000]    eta: 0:00:48  time: 0.0887  data_time: 0.0016  memory: 1024  
09/21 01:16:57 - mmengine - INFO - Iter(test) [1750/2000]    eta: 0:00:39  time: 0.0889  data_time: 0.0014  memory: 1052  
09/21 01:17:01 - mmengine - INFO - Iter(test) [1800/2000]    eta: 0:00:31  time: 0.0803  data_time: 0.0016  memory: 943  
09/21 01:17:05 - mmengine - INFO - Iter(test) [1850/2000]    eta: 0:00:23  time: 0.0788  data_time: 0.0016  memory: 859  
09/21 01:17:09 - mmengine - INFO - Iter(test) [1900/2000]    eta: 0:00:15  time: 0.0861  data_time: 0.0014  memory: 1084  
09/21 01:17:14 - mmengine - INFO - Iter(test) [1950/2000]    eta: 0:00:07  time: 0.0856  data_time: 0.0014  memory: 1331  
09/21 01:17:18 - mmengine - INFO - Iter(test) [2000/2000]    eta: 0:00:00  time: 0.0783  data_time: 0.0013  memory: 1110  
09/21 01:17:18 - mmengine - INFO - per class results:
09/21 01:17:18 - mmengine - INFO - 
+---------------------+-------+-------+
|        Class        |  IoU  |  Acc  |
+---------------------+-------+-------+
|         wall        | 49.36 | 77.41 |
|       building      | 53.93 | 60.36 |
|         sky         | 79.47 | 82.36 |
|        floor        | 48.41 | 88.67 |
|         tree        | 54.82 |  76.4 |
|       ceiling       | 59.32 | 71.87 |
|         road        | 35.02 | 37.56 |
|         bed         | 62.19 | 70.57 |
|      windowpane     | 33.55 | 39.79 |
|        grass        | 39.77 |  45.0 |
|       cabinet       | 10.87 | 12.64 |
|       sidewalk      | 12.08 | 12.73 |
|        person       | 60.01 | 71.38 |
|        earth        | 18.36 | 60.83 |
|         door        |  6.01 |  7.14 |
|        table        | 31.75 | 39.45 |
|       mountain      | 19.32 | 20.42 |
|        plant        | 30.63 | 39.62 |
|       curtain       | 20.09 | 70.25 |
|        chair        | 34.94 | 43.78 |
|         car         | 54.53 | 58.17 |
|        water        | 12.13 | 70.64 |
|       painting      | 37.47 |  41.9 |
|         sofa        | 37.62 | 50.66 |
|        shelf        | 23.26 | 31.47 |
|        house        | 15.29 | 19.12 |
|         sea         |  2.07 |  2.11 |
|        mirror       | 16.87 | 23.75 |
|         rug         | 11.18 | 11.53 |
|        field        | 15.62 |  43.1 |
|       armchair      | 19.93 | 26.43 |
|         seat        | 13.11 | 27.72 |
|        fence        | 18.67 | 24.94 |
|         desk        |  7.58 |  8.05 |
|         rock        | 30.14 | 43.01 |
|       wardrobe      |  8.95 |  11.7 |
|         lamp        | 38.63 | 41.41 |
|       bathtub       | 24.05 | 42.62 |
|       railing       | 13.94 | 19.81 |
|       cushion       |  24.8 | 29.23 |
|         base        |  4.76 |  7.24 |
|         box         |  9.49 | 18.71 |
|        column       | 14.21 | 42.92 |
|      signboard      | 24.12 | 28.89 |
|   chest of drawers  | 12.52 | 13.63 |
|       counter       |  1.7  |  2.16 |
|         sand        |  0.0  |  0.0  |
|         sink        | 19.68 | 23.41 |
|      skyscraper     | 42.15 | 48.61 |
|      fireplace      | 16.41 | 19.43 |
|     refrigerator    |  2.48 |  2.48 |
|      grandstand     | 10.75 | 67.08 |
|         path        | 16.21 | 29.32 |
|        stairs       | 16.98 | 57.29 |
|        runway       |  0.0  |  0.0  |
|         case        |  4.43 |  4.43 |
|      pool table     | 12.65 | 12.65 |
|        pillow       | 31.31 | 36.86 |
|     screen door     |  3.29 |  4.89 |
|       stairway      | 11.12 | 12.54 |
|        river        |  0.89 |  1.13 |
|        bridge       |  6.21 |  6.57 |
|       bookcase      |  0.08 |  0.08 |
|        blind        |  2.63 |  2.8  |
|     coffee table    | 38.06 | 39.49 |
|        toilet       | 32.15 |  37.6 |
|        flower       | 25.96 | 37.72 |
|         book        | 13.16 | 15.02 |
|         hill        |  1.56 |  2.4  |
|        bench        |  8.89 |  24.9 |
|      countertop     | 15.29 | 24.71 |
|        stove        |  8.2  |  8.45 |
|         palm        | 23.17 | 28.55 |
|    kitchen island   |  5.18 |  6.1  |
|       computer      | 28.74 | 30.04 |
|     swivel chair    |  10.4 | 10.48 |
|         boat        |  4.17 |  4.2  |
|         bar         | 17.36 | 17.46 |
|    arcade machine   |  0.0  |  0.0  |
|        hovel        | 58.63 | 69.86 |
|         bus         | 37.06 |  40.5 |
|        towel        | 14.67 | 22.72 |
|        light        |  13.7 | 14.39 |
|        truck        |  4.0  |  7.62 |
|        tower        | 10.44 |  49.4 |
|      chandelier     | 37.85 | 42.42 |
|        awning       |  6.65 |  6.82 |
|     streetlight     | 19.35 | 22.58 |
|        booth        |  0.72 |  0.72 |
| television receiver |  9.69 | 11.16 |
|       airplane      | 11.14 | 11.96 |
|      dirt track     |  9.66 | 19.85 |
|       apparel       |  21.1 | 36.51 |
|         pole        | 16.55 | 26.08 |
|         land        |  0.0  |  0.0  |
|      bannister      |  2.46 |  3.22 |
|      escalator      |  0.0  |  0.0  |
|       ottoman       | 16.67 | 22.64 |
|        bottle       | 20.33 | 48.02 |
|        buffet       |  0.0  |  0.0  |
|        poster       | 18.62 | 29.25 |
|        stage        |  8.8  |  52.7 |
|         van         |  8.62 |  10.4 |
|         ship        |  0.0  |  0.0  |
|       fountain      |  7.26 |  9.57 |
|    conveyer belt    |  0.0  |  0.0  |
|        canopy       |  1.71 |  2.83 |
|        washer       |  0.0  |  0.0  |
|      plaything      |  9.46 | 17.46 |
|    swimming pool    |  0.0  |  0.0  |
|        stool        | 14.74 | 17.42 |
|        barrel       |  0.0  |  0.0  |
|        basket       | 13.67 | 16.52 |
|      waterfall      | 20.47 | 23.21 |
|         tent        | 11.57 | 11.59 |
|         bag         |  1.45 |  1.78 |
|       minibike      | 16.83 | 21.86 |
|        cradle       |  21.1 | 25.75 |
|         oven        | 24.34 | 27.45 |
|         ball        |  5.74 | 67.59 |
|         food        | 37.51 | 47.91 |
|         step        |  1.64 |  5.07 |
|         tank        | 20.17 |  24.2 |
|      trade name     |  7.96 |  8.23 |
|      microwave      |  1.38 |  1.39 |
|         pot         | 15.31 | 15.88 |
|        animal       | 16.53 | 51.75 |
|       bicycle       | 45.96 | 53.38 |
|         lake        |  0.0  |  0.0  |
|      dishwasher     |  5.49 |  5.49 |
|        screen       | 53.73 | 65.66 |
|       blanket       |  2.68 |  3.52 |
|      sculpture      |  3.24 | 10.72 |
|         hood        |  4.76 |  4.77 |
|        sconce       | 15.12 | 17.84 |
|         vase        |  33.4 | 43.59 |
|    traffic light    | 15.88 | 17.15 |
|         tray        |  4.7  |  7.59 |
|        ashcan       |  9.66 | 10.46 |
|         fan         | 42.59 |  50.0 |
|         pier        |  0.0  |  0.0  |
|      crt screen     |  6.79 | 23.65 |
|        plate        | 41.41 | 50.15 |
|       monitor       |  0.57 |  0.61 |
|    bulletin board   |  0.0  |  0.0  |
|        shower       |  1.12 | 15.88 |
|       radiator      | 10.12 |  11.8 |
|        glass        |  8.37 |  8.67 |
|        clock        | 15.15 | 16.88 |
|         flag        | 10.34 | 12.19 |
+---------------------+-------+-------+
09/21 01:17:18 - mmengine - INFO - Iter(test) [2000/2000]    aAcc: 57.1700  mIoU: 17.3900  mAcc: 25.0800  data_time: 0.0017  time: 0.1497
Finished processing corruption type: impulse_noise
Processing corruption type: defocus_blur
09/21 01:17:22 - mmengine - INFO - 
------------------------------------------------------------
System environment:
    sys.platform: linux
    Python: 3.10.13 | packaged by conda-forge | (main, Dec 23 2023, 15:36:39) [GCC 12.3.0]
    CUDA available: True
    MUSA available: False
    numpy_random_seed: 1554700639
    GPU 0: Tesla V100-SXM2-32GB
    CUDA_HOME: /opt/bwhpc/common/devel/cuda/11.7
    NVCC: Cuda compilation tools, release 11.7, V11.7.99
    GCC: gcc (GCC) 8.5.0 20210514 (Red Hat 8.5.0-18)
    PyTorch: 1.13.1
    PyTorch compiling details: PyTorch built with:
  - GCC 9.3
  - C++ Version: 201402
  - Intel(R) oneAPI Math Kernel Library Version 2023.1-Product Build 20230303 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v2.6.0 (Git Hash 52b5f107dd9cf10910aaa19cb47f3abf9b349815)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - LAPACK is enabled (usually provided by MKL)
  - NNPACK is enabled
  - CPU capability usage: AVX2
  - CUDA Runtime 11.7
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_61,code=sm_61;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86;-gencode;arch=compute_37,code=compute_37
  - CuDNN 8.5
  - Magma 2.6.1
  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.7, CUDNN_VERSION=8.5.0, CXX_COMPILER=/opt/rh/devtoolset-9/root/usr/bin/c++, CXX_FLAGS= -fabi-version=11 -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -DEDGE_PROFILER_USE_KINETO -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Werror=non-virtual-dtor -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wunused-local-typedefs -Wno-unused-parameter -Wno-unused-function -Wno-unused-result -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Werror=cast-function-type -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.13.1, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, USE_ROCM=OFF, 

    TorchVision: 0.14.1
    OpenCV: 3.4.18
    MMEngine: 0.10.4

Runtime environment:
    cudnn_benchmark: True
    mp_cfg: {'mp_start_method': 'fork', 'opencv_num_threads': 0}
    dist_cfg: {'backend': 'nccl'}
    seed: 1554700639
    Distributed launcher: none
    Distributed training: False
    GPU number: 1
------------------------------------------------------------

09/21 01:17:23 - mmengine - INFO - Config:
auto_scale_lr = dict(base_batch_size=16, enable=False)
crop_size = (
    512,
    512,
)
custom_imports = dict(allow_failed_imports=False, imports='mmdet.models')
data_root = 'data/ade/ADEChallengeData2016'
dataset_type = 'ADE20KDataset'
default_hooks = dict(
    checkpoint=dict(
        by_epoch=False, interval=5000, save_best='mIoU',
        type='CheckpointHook'),
    logger=dict(interval=50, log_metric_by_epoch=False, type='LoggerHook'),
    param_scheduler=dict(type='ParamSchedulerHook'),
    sampler_seed=dict(type='DistSamplerSeedHook'),
    timer=dict(type='IterTimerHook'),
    visualization=dict(type='SegVisualizationHook'))
default_scope = 'mmseg'
embed_multi = dict(decay_mult=0.0, lr_mult=1.0)
env_cfg = dict(
    cudnn_benchmark=True,
    dist_cfg=dict(backend='nccl'),
    mp_cfg=dict(mp_start_method='fork', opencv_num_threads=0))
img_ratios = [
    0.5,
    0.75,
    1.0,
    1.25,
    1.5,
    1.75,
]
launcher = 'none'
load_from = '../checkpoint_files/ade20k/mask2former/mask2former_r101_8xb2-160k_ade20k-512x512_20221203_233905-b7135890.pth'
log_level = 'INFO'
log_processor = dict(by_epoch=False)
model = dict(
    backbone=dict(
        deep_stem=False,
        depth=101,
        frozen_stages=-1,
        init_cfg=dict(checkpoint='torchvision://resnet101', type='Pretrained'),
        norm_cfg=dict(requires_grad=False, type='SyncBN'),
        num_stages=4,
        out_indices=(
            0,
            1,
            2,
            3,
        ),
        style='pytorch',
        type='ResNet'),
    data_preprocessor=dict(
        bgr_to_rgb=True,
        corruption='defocus_blur',
        mean=[
            123.675,
            116.28,
            103.53,
        ],
        pad_val=0,
        seg_pad_val=255,
        size=(
            512,
            512,
        ),
        std=[
            58.395,
            57.12,
            57.375,
        ],
        test_cfg=dict(size_divisor=32),
        type='SegDataPreProcessor'),
    decode_head=dict(
        align_corners=False,
        enforce_decoder_input_project=False,
        feat_channels=256,
        in_channels=[
            256,
            512,
            1024,
            2048,
        ],
        loss_cls=dict(
            class_weight=[
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                0.1,
            ],
            loss_weight=2.0,
            reduction='mean',
            type='mmdet.CrossEntropyLoss',
            use_sigmoid=False),
        loss_dice=dict(
            activate=True,
            eps=1.0,
            loss_weight=5.0,
            naive_dice=True,
            reduction='mean',
            type='mmdet.DiceLoss',
            use_sigmoid=True),
        loss_mask=dict(
            loss_weight=5.0,
            reduction='mean',
            type='mmdet.CrossEntropyLoss',
            use_sigmoid=True),
        num_classes=150,
        num_queries=100,
        num_transformer_feat_level=3,
        out_channels=256,
        pixel_decoder=dict(
            act_cfg=dict(type='ReLU'),
            encoder=dict(
                init_cfg=None,
                layer_cfg=dict(
                    ffn_cfg=dict(
                        act_cfg=dict(inplace=True, type='ReLU'),
                        embed_dims=256,
                        feedforward_channels=1024,
                        ffn_drop=0.0,
                        num_fcs=2),
                    self_attn_cfg=dict(
                        batch_first=True,
                        dropout=0.0,
                        embed_dims=256,
                        im2col_step=64,
                        init_cfg=None,
                        norm_cfg=None,
                        num_heads=8,
                        num_levels=3,
                        num_points=4)),
                num_layers=6),
            init_cfg=None,
            norm_cfg=dict(num_groups=32, type='GN'),
            num_outs=3,
            positional_encoding=dict(normalize=True, num_feats=128),
            type='mmdet.MSDeformAttnPixelDecoder'),
        positional_encoding=dict(normalize=True, num_feats=128),
        strides=[
            4,
            8,
            16,
            32,
        ],
        train_cfg=dict(
            assigner=dict(
                match_costs=[
                    dict(type='mmdet.ClassificationCost', weight=2.0),
                    dict(
                        type='mmdet.CrossEntropyLossCost',
                        use_sigmoid=True,
                        weight=5.0),
                    dict(
                        eps=1.0,
                        pred_act=True,
                        type='mmdet.DiceCost',
                        weight=5.0),
                ],
                type='mmdet.HungarianAssigner'),
            importance_sample_ratio=0.75,
            num_points=12544,
            oversample_ratio=3.0,
            sampler=dict(type='mmdet.MaskPseudoSampler')),
        transformer_decoder=dict(
            init_cfg=None,
            layer_cfg=dict(
                cross_attn_cfg=dict(
                    attn_drop=0.0,
                    batch_first=True,
                    dropout_layer=None,
                    embed_dims=256,
                    num_heads=8,
                    proj_drop=0.0),
                ffn_cfg=dict(
                    act_cfg=dict(inplace=True, type='ReLU'),
                    add_identity=True,
                    dropout_layer=None,
                    embed_dims=256,
                    feedforward_channels=2048,
                    ffn_drop=0.0,
                    num_fcs=2),
                self_attn_cfg=dict(
                    attn_drop=0.0,
                    batch_first=True,
                    dropout_layer=None,
                    embed_dims=256,
                    num_heads=8,
                    proj_drop=0.0)),
            num_layers=9,
            return_intermediate=True),
        type='Mask2FormerHead'),
    test_cfg=dict(mode='whole'),
    train_cfg=dict(),
    type='EncoderDecoder')
num_classes = 150
optim_wrapper = dict(
    clip_grad=dict(max_norm=0.01, norm_type=2),
    optimizer=dict(
        betas=(
            0.9,
            0.999,
        ),
        eps=1e-08,
        lr=0.0001,
        type='AdamW',
        weight_decay=0.05),
    paramwise_cfg=dict(
        custom_keys=dict(
            backbone=dict(decay_mult=1.0, lr_mult=0.1),
            level_embed=dict(decay_mult=0.0, lr_mult=1.0),
            query_embed=dict(decay_mult=0.0, lr_mult=1.0),
            query_feat=dict(decay_mult=0.0, lr_mult=1.0)),
        norm_decay_mult=0.0),
    type='OptimWrapper')
optimizer = dict(
    betas=(
        0.9,
        0.999,
    ),
    eps=1e-08,
    lr=0.0001,
    type='AdamW',
    weight_decay=0.05)
param_scheduler = [
    dict(
        begin=0,
        by_epoch=False,
        end=160000,
        eta_min=0,
        power=0.9,
        type='PolyLR'),
]
resume = False
test_cfg = dict(type='TestLoop')
test_dataloader = dict(
    batch_size=1,
    dataset=dict(
        data_prefix=dict(
            img_path='images/validation',
            seg_map_path='annotations/validation'),
        data_root='data/ade/ADEChallengeData2016',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(keep_ratio=True, scale=(
                2048,
                512,
            ), type='Resize'),
            dict(reduce_zero_label=True, type='LoadAnnotations'),
            dict(type='PackSegInputs'),
        ],
        type='ADE20KDataset'),
    num_workers=4,
    persistent_workers=True,
    sampler=dict(shuffle=False, type='DefaultSampler'))
test_evaluator = dict(
    iou_metrics=[
        'mIoU',
    ], type='IoUMetric')
test_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(keep_ratio=True, scale=(
        2048,
        512,
    ), type='Resize'),
    dict(reduce_zero_label=True, type='LoadAnnotations'),
    dict(type='PackSegInputs'),
]
train_cfg = dict(
    max_iters=160000, type='IterBasedTrainLoop', val_interval=5000)
train_dataloader = dict(
    batch_size=2,
    dataset=dict(
        data_prefix=dict(
            img_path='images/training', seg_map_path='annotations/training'),
        data_root='data/ade/ADEChallengeData2016',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(reduce_zero_label=True, type='LoadAnnotations'),
            dict(
                max_size=2048,
                resize_type='ResizeShortestEdge',
                scales=[
                    256,
                    307,
                    358,
                    409,
                    460,
                    512,
                    563,
                    614,
                    665,
                    716,
                    768,
                    819,
                    870,
                    921,
                    972,
                    1024,
                ],
                type='RandomChoiceResize'),
            dict(
                cat_max_ratio=0.75, crop_size=(
                    512,
                    512,
                ), type='RandomCrop'),
            dict(prob=0.5, type='RandomFlip'),
            dict(type='PhotoMetricDistortion'),
            dict(type='PackSegInputs'),
        ],
        type='ADE20KDataset'),
    num_workers=4,
    persistent_workers=True,
    sampler=dict(shuffle=True, type='InfiniteSampler'))
train_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(reduce_zero_label=True, type='LoadAnnotations'),
    dict(
        max_size=2048,
        resize_type='ResizeShortestEdge',
        scales=[
            256,
            307,
            358,
            409,
            460,
            512,
            563,
            614,
            665,
            716,
            768,
            819,
            870,
            921,
            972,
            1024,
        ],
        type='RandomChoiceResize'),
    dict(cat_max_ratio=0.75, crop_size=(
        512,
        512,
    ), type='RandomCrop'),
    dict(prob=0.5, type='RandomFlip'),
    dict(type='PhotoMetricDistortion'),
    dict(type='PackSegInputs'),
]
tta_model = dict(type='SegTTAModel')
tta_pipeline = [
    dict(backend_args=None, type='LoadImageFromFile'),
    dict(
        transforms=[
            [
                dict(keep_ratio=True, scale_factor=0.5, type='Resize'),
                dict(keep_ratio=True, scale_factor=0.75, type='Resize'),
                dict(keep_ratio=True, scale_factor=1.0, type='Resize'),
                dict(keep_ratio=True, scale_factor=1.25, type='Resize'),
                dict(keep_ratio=True, scale_factor=1.5, type='Resize'),
                dict(keep_ratio=True, scale_factor=1.75, type='Resize'),
            ],
            [
                dict(direction='horizontal', prob=0.0, type='RandomFlip'),
                dict(direction='horizontal', prob=1.0, type='RandomFlip'),
            ],
            [
                dict(type='LoadAnnotations'),
            ],
            [
                dict(type='PackSegInputs'),
            ],
        ],
        type='TestTimeAug'),
]
val_cfg = dict(type='ValLoop')
val_dataloader = dict(
    batch_size=1,
    dataset=dict(
        data_prefix=dict(
            img_path='images/validation',
            seg_map_path='annotations/validation'),
        data_root='data/ade/ADEChallengeData2016',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(keep_ratio=True, scale=(
                2048,
                512,
            ), type='Resize'),
            dict(reduce_zero_label=True, type='LoadAnnotations'),
            dict(type='PackSegInputs'),
        ],
        type='ADE20KDataset'),
    num_workers=4,
    persistent_workers=True,
    sampler=dict(shuffle=False, type='DefaultSampler'))
val_evaluator = dict(
    iou_metrics=[
        'mIoU',
    ], type='IoUMetric')
vis_backends = [
    dict(type='LocalVisBackend'),
]
visualizer = dict(
    name='visualizer',
    type='SegLocalVisualizer',
    vis_backends=[
        dict(type='LocalVisBackend'),
    ])
work_dir = '../corruptions/work_dirs/ade20k/mask2former/mask2former_r101_8xb2-160k_ade20k-512x512/defocus_blur'

09/21 01:17:25 - mmengine - INFO - Distributed training is not used, all SyncBatchNorm (SyncBN) layers in the model will be automatically reverted to BatchNormXd layers if they are used.
09/21 01:17:25 - mmengine - INFO - Hooks will be executed in the following order:
before_run:
(VERY_HIGH   ) RuntimeInfoHook                    
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
before_train:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_train_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(NORMAL      ) DistSamplerSeedHook                
 -------------------- 
before_train_iter:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_train_iter:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(NORMAL      ) SegVisualizationHook               
(BELOW_NORMAL) LoggerHook                         
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
after_train_epoch:
(NORMAL      ) IterTimerHook                      
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_val:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
before_val_epoch:
(NORMAL      ) IterTimerHook                      
 -------------------- 
before_val_iter:
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_val_iter:
(NORMAL      ) IterTimerHook                      
(NORMAL      ) SegVisualizationHook               
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_val_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
after_val:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
after_train:
(VERY_HIGH   ) RuntimeInfoHook                    
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_test:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
before_test_epoch:
(NORMAL      ) IterTimerHook                      
 -------------------- 
before_test_iter:
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_test_iter:
(NORMAL      ) IterTimerHook                      
(NORMAL      ) SegVisualizationHook               
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_test_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_test:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
after_run:
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
09/21 01:17:26 - mmengine - WARNING - The prefix is not set in metric class IoUMetric.
Loads checkpoint by local backend from path: ../checkpoint_files/ade20k/mask2former/mask2former_r101_8xb2-160k_ade20k-512x512_20221203_233905-b7135890.pth
09/21 01:17:26 - mmengine - INFO - Load checkpoint from ../checkpoint_files/ade20k/mask2former/mask2former_r101_8xb2-160k_ade20k-512x512_20221203_233905-b7135890.pth
09/21 01:18:32 - mmengine - INFO - Iter(test) [  50/2000]    eta: 0:42:23  time: 0.9520  data_time: 0.0015  memory: 17239  
09/21 01:18:49 - mmengine - INFO - Iter(test) [ 100/2000]    eta: 0:26:07  time: 0.5529  data_time: 0.0015  memory: 17230  
09/21 01:18:54 - mmengine - INFO - Iter(test) [ 150/2000]    eta: 0:17:56  time: 0.0983  data_time: 0.0015  memory: 943  
09/21 01:19:08 - mmengine - INFO - Iter(test) [ 200/2000]    eta: 0:15:13  time: 0.0964  data_time: 0.0014  memory: 17287  
09/21 01:19:19 - mmengine - INFO - Iter(test) [ 250/2000]    eta: 0:13:05  time: 0.0872  data_time: 0.0014  memory: 17293  
09/21 01:19:27 - mmengine - INFO - Iter(test) [ 300/2000]    eta: 0:11:25  time: 0.0929  data_time: 0.0015  memory: 17234  
09/21 01:19:41 - mmengine - INFO - Iter(test) [ 350/2000]    eta: 0:10:33  time: 0.0836  data_time: 0.0014  memory: 17237  
09/21 01:19:49 - mmengine - INFO - Iter(test) [ 400/2000]    eta: 0:09:30  time: 0.0969  data_time: 0.0014  memory: 17220  
09/21 01:19:54 - mmengine - INFO - Iter(test) [ 450/2000]    eta: 0:08:27  time: 0.0927  data_time: 0.0014  memory: 955  
09/21 01:19:58 - mmengine - INFO - Iter(test) [ 500/2000]    eta: 0:07:36  time: 0.0892  data_time: 0.0014  memory: 943  
09/21 01:20:03 - mmengine - INFO - Iter(test) [ 550/2000]    eta: 0:06:52  time: 0.0894  data_time: 0.0015  memory: 1055  
09/21 01:20:07 - mmengine - INFO - Iter(test) [ 600/2000]    eta: 0:06:15  time: 0.0890  data_time: 0.0015  memory: 1053  
09/21 01:20:17 - mmengine - INFO - Iter(test) [ 650/2000]    eta: 0:05:53  time: 0.5592  data_time: 0.0013  memory: 17241  
09/21 01:20:26 - mmengine - INFO - Iter(test) [ 700/2000]    eta: 0:05:33  time: 0.0874  data_time: 0.0015  memory: 17235  
09/21 01:20:31 - mmengine - INFO - Iter(test) [ 750/2000]    eta: 0:05:06  time: 0.0966  data_time: 0.0014  memory: 1112  
09/21 01:20:35 - mmengine - INFO - Iter(test) [ 800/2000]    eta: 0:04:43  time: 0.0944  data_time: 0.0015  memory: 943  
09/21 01:20:40 - mmengine - INFO - Iter(test) [ 850/2000]    eta: 0:04:21  time: 0.0872  data_time: 0.0016  memory: 915  
09/21 01:20:44 - mmengine - INFO - Iter(test) [ 900/2000]    eta: 0:04:01  time: 0.0825  data_time: 0.0014  memory: 998  
09/21 01:20:49 - mmengine - INFO - Iter(test) [ 950/2000]    eta: 0:03:43  time: 0.0960  data_time: 0.0015  memory: 1027  
09/21 01:20:53 - mmengine - INFO - Iter(test) [1000/2000]    eta: 0:03:26  time: 0.0941  data_time: 0.0014  memory: 1027  
09/21 01:21:02 - mmengine - INFO - Iter(test) [1050/2000]    eta: 0:03:15  time: 0.0876  data_time: 0.0014  memory: 17242  
09/21 01:21:07 - mmengine - INFO - Iter(test) [1100/2000]    eta: 0:03:00  time: 0.0851  data_time: 0.0015  memory: 1024  
09/21 01:21:11 - mmengine - INFO - Iter(test) [1150/2000]    eta: 0:02:46  time: 0.0943  data_time: 0.0014  memory: 996  
09/21 01:21:16 - mmengine - INFO - Iter(test) [1200/2000]    eta: 0:02:33  time: 0.0952  data_time: 0.0014  memory: 1900  
09/21 01:21:26 - mmengine - INFO - Iter(test) [1250/2000]    eta: 0:02:23  time: 0.0859  data_time: 0.0014  memory: 17230  
09/21 01:21:30 - mmengine - INFO - Iter(test) [1300/2000]    eta: 0:02:11  time: 0.0970  data_time: 0.0014  memory: 943  
09/21 01:21:35 - mmengine - INFO - Iter(test) [1350/2000]    eta: 0:01:59  time: 0.0916  data_time: 0.0014  memory: 943  
09/21 01:21:40 - mmengine - INFO - Iter(test) [1400/2000]    eta: 0:01:48  time: 0.0889  data_time: 0.0014  memory: 1025  
09/21 01:21:44 - mmengine - INFO - Iter(test) [1450/2000]    eta: 0:01:37  time: 0.0886  data_time: 0.0014  memory: 1027  
09/21 01:21:48 - mmengine - INFO - Iter(test) [1500/2000]    eta: 0:01:27  time: 0.0930  data_time: 0.0014  memory: 941  
09/21 01:21:53 - mmengine - INFO - Iter(test) [1550/2000]    eta: 0:01:17  time: 0.0980  data_time: 0.0015  memory: 1027  
09/21 01:21:58 - mmengine - INFO - Iter(test) [1600/2000]    eta: 0:01:07  time: 0.0948  data_time: 0.0016  memory: 915  
09/21 01:22:07 - mmengine - INFO - Iter(test) [1650/2000]    eta: 0:00:59  time: 0.0826  data_time: 0.0014  memory: 17237  
09/21 01:22:12 - mmengine - INFO - Iter(test) [1700/2000]    eta: 0:00:50  time: 0.0973  data_time: 0.0015  memory: 1024  
09/21 01:22:17 - mmengine - INFO - Iter(test) [1750/2000]    eta: 0:00:41  time: 0.0987  data_time: 0.0014  memory: 1052  
09/21 01:22:21 - mmengine - INFO - Iter(test) [1800/2000]    eta: 0:00:32  time: 0.0861  data_time: 0.0016  memory: 943  
09/21 01:22:25 - mmengine - INFO - Iter(test) [1850/2000]    eta: 0:00:24  time: 0.0853  data_time: 0.0016  memory: 859  
09/21 01:22:30 - mmengine - INFO - Iter(test) [1900/2000]    eta: 0:00:15  time: 0.0950  data_time: 0.0014  memory: 1084  
09/21 01:22:35 - mmengine - INFO - Iter(test) [1950/2000]    eta: 0:00:07  time: 0.0940  data_time: 0.0014  memory: 1331  
09/21 01:22:39 - mmengine - INFO - Iter(test) [2000/2000]    eta: 0:00:00  time: 0.0805  data_time: 0.0013  memory: 1110  
09/21 01:22:39 - mmengine - INFO - per class results:
09/21 01:22:39 - mmengine - INFO - 
+---------------------+-------+-------+
|        Class        |  IoU  |  Acc  |
+---------------------+-------+-------+
|         wall        | 75.21 | 86.65 |
|       building      |  79.3 | 91.62 |
|         sky         | 93.67 | 96.63 |
|        floor        | 80.86 | 90.39 |
|         tree        | 72.11 | 83.58 |
|       ceiling       | 83.27 | 90.05 |
|         road        | 82.02 | 90.38 |
|         bed         | 88.56 | 95.34 |
|      windowpane     | 58.48 | 78.05 |
|        grass        | 64.83 | 77.45 |
|       cabinet       | 56.26 | 66.97 |
|       sidewalk      | 63.01 | 75.76 |
|        person       | 77.97 | 86.61 |
|        earth        | 30.14 | 43.25 |
|         door        | 42.63 | 56.29 |
|        table        | 57.19 | 71.23 |
|       mountain      | 53.21 | 64.95 |
|        plant        | 49.58 | 63.47 |
|       curtain       | 67.85 | 80.62 |
|        chair        | 56.94 | 71.59 |
|         car         | 79.38 | 88.47 |
|        water        |  51.2 |  69.0 |
|       painting      | 70.26 | 83.86 |
|         sofa        | 65.51 | 82.26 |
|        shelf        | 40.23 | 66.81 |
|        house        | 44.09 | 56.36 |
|         sea         | 47.77 | 71.63 |
|        mirror       | 57.63 | 69.67 |
|         rug         | 63.78 | 70.94 |
|        field        | 28.91 | 52.09 |
|       armchair      | 44.89 | 65.62 |
|         seat        | 57.38 | 80.33 |
|        fence        | 36.86 | 53.95 |
|         desk        | 43.02 |  60.7 |
|         rock        | 43.64 | 72.84 |
|       wardrobe      | 37.16 | 59.67 |
|         lamp        | 64.46 | 75.99 |
|       bathtub       | 68.91 | 81.78 |
|       railing       |  29.5 | 44.63 |
|       cushion       | 55.54 | 64.19 |
|         base        | 27.21 |  49.5 |
|         box         | 20.18 | 30.84 |
|        column       |  41.2 | 56.82 |
|      signboard      | 31.85 | 49.08 |
|   chest of drawers  | 44.93 | 68.75 |
|       counter       | 23.45 | 32.94 |
|         sand        | 33.79 | 45.05 |
|         sink        | 68.23 | 79.65 |
|      skyscraper     | 43.23 | 58.01 |
|      fireplace      | 71.42 | 86.54 |
|     refrigerator    | 67.31 | 77.64 |
|      grandstand     | 37.04 | 68.83 |
|         path        | 24.17 | 42.49 |
|        stairs       | 25.87 | 36.55 |
|        runway       |  81.4 | 93.57 |
|         case        | 50.77 | 60.72 |
|      pool table     |  86.5 |  97.1 |
|        pillow       | 57.61 |  67.6 |
|     screen door     | 44.72 | 51.82 |
|       stairway      | 31.28 | 45.62 |
|        river        | 15.61 | 32.24 |
|        bridge       | 55.99 | 81.38 |
|       bookcase      | 23.52 | 40.07 |
|        blind        | 11.77 | 12.17 |
|     coffee table    | 60.29 | 80.93 |
|        toilet       | 84.75 | 89.61 |
|        flower       |  35.8 | 48.27 |
|         book        | 41.89 |  54.8 |
|         hill        |  4.36 | 10.23 |
|        bench        | 35.32 | 54.48 |
|      countertop     | 52.53 | 69.26 |
|        stove        | 75.18 | 84.73 |
|         palm        |  51.5 | 65.79 |
|    kitchen island   | 36.04 | 80.49 |
|       computer      | 56.06 | 61.17 |
|     swivel chair    | 43.44 | 63.85 |
|         boat        |  60.4 | 85.75 |
|         bar         | 44.77 | 57.68 |
|    arcade machine   |  20.6 | 23.14 |
|        hovel        | 11.26 | 15.73 |
|         bus         | 73.02 | 86.64 |
|        towel        | 62.56 | 70.96 |
|        light        | 56.15 |  71.9 |
|        truck        | 20.36 | 40.52 |
|        tower        | 33.06 | 47.97 |
|      chandelier     | 64.44 | 78.11 |
|        awning       | 26.97 | 34.69 |
|     streetlight     |  25.0 |  42.3 |
|        booth        | 25.45 | 37.92 |
| television receiver | 55.99 | 75.69 |
|       airplane      | 51.15 | 64.15 |
|      dirt track     |  7.89 |  8.94 |
|       apparel       | 25.13 | 42.95 |
|         pole        | 21.59 | 28.28 |
|         land        |  0.72 |  1.12 |
|      bannister      | 18.65 | 29.79 |
|      escalator      | 37.45 | 53.07 |
|       ottoman       |  45.5 | 64.67 |
|        bottle       |  17.6 |  21.6 |
|        buffet       |  41.8 | 48.69 |
|        poster       |  22.6 | 34.02 |
|        stage        | 13.13 | 25.85 |
|         van         | 37.57 | 50.39 |
|         ship        | 75.77 |  87.8 |
|       fountain      | 23.02 | 33.96 |
|    conveyer belt    | 50.92 | 71.38 |
|        canopy       | 16.89 | 22.26 |
|        washer       | 59.03 | 61.14 |
|      plaything      | 24.25 | 54.82 |
|    swimming pool    | 38.51 | 53.83 |
|        stool        | 44.81 | 60.24 |
|        barrel       | 40.08 | 73.72 |
|        basket       | 22.24 | 26.77 |
|      waterfall      | 65.85 |  94.2 |
|         tent        | 81.43 | 98.78 |
|         bag         |  14.3 | 17.45 |
|       minibike      | 60.71 | 82.78 |
|        cradle       | 77.86 | 97.28 |
|         oven        | 24.66 | 72.56 |
|         ball        | 50.18 | 59.54 |
|         food        | 50.59 | 59.67 |
|         step        |  8.56 | 11.71 |
|         tank        | 43.37 | 51.02 |
|      trade name     | 19.36 | 22.04 |
|      microwave      | 35.55 | 37.34 |
|         pot         | 51.92 | 61.45 |
|        animal       | 65.05 | 69.62 |
|       bicycle       | 50.35 | 64.72 |
|         lake        |  0.05 |  0.05 |
|      dishwasher     |  55.7 | 77.13 |
|        screen       | 69.76 | 80.05 |
|       blanket       | 10.55 | 14.11 |
|      sculpture      | 28.12 | 50.26 |
|         hood        |  78.8 | 85.43 |
|        sconce       | 47.53 | 60.81 |
|         vase        | 31.99 | 54.32 |
|    traffic light    | 30.44 | 53.69 |
|         tray        | 11.15 | 14.24 |
|        ashcan       | 35.11 | 56.13 |
|         fan         | 59.76 | 76.07 |
|         pier        |  31.4 | 38.96 |
|      crt screen     | 22.31 | 35.97 |
|        plate        | 50.29 | 72.44 |
|       monitor       | 47.69 | 68.19 |
|    bulletin board   | 34.79 | 36.54 |
|        shower       |  1.21 | 13.62 |
|       radiator      | 46.79 |  49.8 |
|        glass        |  9.69 | 10.26 |
|        clock        | 41.12 | 54.14 |
|         flag        |  28.8 | 31.94 |
+---------------------+-------+-------+
09/21 01:22:39 - mmengine - INFO - Iter(test) [2000/2000]    aAcc: 80.9000  mIoU: 44.9900  mAcc: 58.5500  data_time: 0.0016  time: 0.1563
Finished processing corruption type: defocus_blur
Processing corruption type: glass_blur
09/21 01:22:43 - mmengine - INFO - 
------------------------------------------------------------
System environment:
    sys.platform: linux
    Python: 3.10.13 | packaged by conda-forge | (main, Dec 23 2023, 15:36:39) [GCC 12.3.0]
    CUDA available: True
    MUSA available: False
    numpy_random_seed: 1919626269
    GPU 0: Tesla V100-SXM2-32GB
    CUDA_HOME: /opt/bwhpc/common/devel/cuda/11.7
    NVCC: Cuda compilation tools, release 11.7, V11.7.99
    GCC: gcc (GCC) 8.5.0 20210514 (Red Hat 8.5.0-18)
    PyTorch: 1.13.1
    PyTorch compiling details: PyTorch built with:
  - GCC 9.3
  - C++ Version: 201402
  - Intel(R) oneAPI Math Kernel Library Version 2023.1-Product Build 20230303 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v2.6.0 (Git Hash 52b5f107dd9cf10910aaa19cb47f3abf9b349815)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - LAPACK is enabled (usually provided by MKL)
  - NNPACK is enabled
  - CPU capability usage: AVX2
  - CUDA Runtime 11.7
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_61,code=sm_61;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86;-gencode;arch=compute_37,code=compute_37
  - CuDNN 8.5
  - Magma 2.6.1
  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.7, CUDNN_VERSION=8.5.0, CXX_COMPILER=/opt/rh/devtoolset-9/root/usr/bin/c++, CXX_FLAGS= -fabi-version=11 -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -DEDGE_PROFILER_USE_KINETO -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Werror=non-virtual-dtor -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wunused-local-typedefs -Wno-unused-parameter -Wno-unused-function -Wno-unused-result -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Werror=cast-function-type -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.13.1, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, USE_ROCM=OFF, 

    TorchVision: 0.14.1
    OpenCV: 3.4.18
    MMEngine: 0.10.4

Runtime environment:
    cudnn_benchmark: True
    mp_cfg: {'mp_start_method': 'fork', 'opencv_num_threads': 0}
    dist_cfg: {'backend': 'nccl'}
    seed: 1919626269
    Distributed launcher: none
    Distributed training: False
    GPU number: 1
------------------------------------------------------------

09/21 01:22:44 - mmengine - INFO - Config:
auto_scale_lr = dict(base_batch_size=16, enable=False)
crop_size = (
    512,
    512,
)
custom_imports = dict(allow_failed_imports=False, imports='mmdet.models')
data_root = 'data/ade/ADEChallengeData2016'
dataset_type = 'ADE20KDataset'
default_hooks = dict(
    checkpoint=dict(
        by_epoch=False, interval=5000, save_best='mIoU',
        type='CheckpointHook'),
    logger=dict(interval=50, log_metric_by_epoch=False, type='LoggerHook'),
    param_scheduler=dict(type='ParamSchedulerHook'),
    sampler_seed=dict(type='DistSamplerSeedHook'),
    timer=dict(type='IterTimerHook'),
    visualization=dict(type='SegVisualizationHook'))
default_scope = 'mmseg'
embed_multi = dict(decay_mult=0.0, lr_mult=1.0)
env_cfg = dict(
    cudnn_benchmark=True,
    dist_cfg=dict(backend='nccl'),
    mp_cfg=dict(mp_start_method='fork', opencv_num_threads=0))
img_ratios = [
    0.5,
    0.75,
    1.0,
    1.25,
    1.5,
    1.75,
]
launcher = 'none'
load_from = '../checkpoint_files/ade20k/mask2former/mask2former_r101_8xb2-160k_ade20k-512x512_20221203_233905-b7135890.pth'
log_level = 'INFO'
log_processor = dict(by_epoch=False)
model = dict(
    backbone=dict(
        deep_stem=False,
        depth=101,
        frozen_stages=-1,
        init_cfg=dict(checkpoint='torchvision://resnet101', type='Pretrained'),
        norm_cfg=dict(requires_grad=False, type='SyncBN'),
        num_stages=4,
        out_indices=(
            0,
            1,
            2,
            3,
        ),
        style='pytorch',
        type='ResNet'),
    data_preprocessor=dict(
        bgr_to_rgb=True,
        corruption='glass_blur',
        mean=[
            123.675,
            116.28,
            103.53,
        ],
        pad_val=0,
        seg_pad_val=255,
        size=(
            512,
            512,
        ),
        std=[
            58.395,
            57.12,
            57.375,
        ],
        test_cfg=dict(size_divisor=32),
        type='SegDataPreProcessor'),
    decode_head=dict(
        align_corners=False,
        enforce_decoder_input_project=False,
        feat_channels=256,
        in_channels=[
            256,
            512,
            1024,
            2048,
        ],
        loss_cls=dict(
            class_weight=[
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                0.1,
            ],
            loss_weight=2.0,
            reduction='mean',
            type='mmdet.CrossEntropyLoss',
            use_sigmoid=False),
        loss_dice=dict(
            activate=True,
            eps=1.0,
            loss_weight=5.0,
            naive_dice=True,
            reduction='mean',
            type='mmdet.DiceLoss',
            use_sigmoid=True),
        loss_mask=dict(
            loss_weight=5.0,
            reduction='mean',
            type='mmdet.CrossEntropyLoss',
            use_sigmoid=True),
        num_classes=150,
        num_queries=100,
        num_transformer_feat_level=3,
        out_channels=256,
        pixel_decoder=dict(
            act_cfg=dict(type='ReLU'),
            encoder=dict(
                init_cfg=None,
                layer_cfg=dict(
                    ffn_cfg=dict(
                        act_cfg=dict(inplace=True, type='ReLU'),
                        embed_dims=256,
                        feedforward_channels=1024,
                        ffn_drop=0.0,
                        num_fcs=2),
                    self_attn_cfg=dict(
                        batch_first=True,
                        dropout=0.0,
                        embed_dims=256,
                        im2col_step=64,
                        init_cfg=None,
                        norm_cfg=None,
                        num_heads=8,
                        num_levels=3,
                        num_points=4)),
                num_layers=6),
            init_cfg=None,
            norm_cfg=dict(num_groups=32, type='GN'),
            num_outs=3,
            positional_encoding=dict(normalize=True, num_feats=128),
            type='mmdet.MSDeformAttnPixelDecoder'),
        positional_encoding=dict(normalize=True, num_feats=128),
        strides=[
            4,
            8,
            16,
            32,
        ],
        train_cfg=dict(
            assigner=dict(
                match_costs=[
                    dict(type='mmdet.ClassificationCost', weight=2.0),
                    dict(
                        type='mmdet.CrossEntropyLossCost',
                        use_sigmoid=True,
                        weight=5.0),
                    dict(
                        eps=1.0,
                        pred_act=True,
                        type='mmdet.DiceCost',
                        weight=5.0),
                ],
                type='mmdet.HungarianAssigner'),
            importance_sample_ratio=0.75,
            num_points=12544,
            oversample_ratio=3.0,
            sampler=dict(type='mmdet.MaskPseudoSampler')),
        transformer_decoder=dict(
            init_cfg=None,
            layer_cfg=dict(
                cross_attn_cfg=dict(
                    attn_drop=0.0,
                    batch_first=True,
                    dropout_layer=None,
                    embed_dims=256,
                    num_heads=8,
                    proj_drop=0.0),
                ffn_cfg=dict(
                    act_cfg=dict(inplace=True, type='ReLU'),
                    add_identity=True,
                    dropout_layer=None,
                    embed_dims=256,
                    feedforward_channels=2048,
                    ffn_drop=0.0,
                    num_fcs=2),
                self_attn_cfg=dict(
                    attn_drop=0.0,
                    batch_first=True,
                    dropout_layer=None,
                    embed_dims=256,
                    num_heads=8,
                    proj_drop=0.0)),
            num_layers=9,
            return_intermediate=True),
        type='Mask2FormerHead'),
    test_cfg=dict(mode='whole'),
    train_cfg=dict(),
    type='EncoderDecoder')
num_classes = 150
optim_wrapper = dict(
    clip_grad=dict(max_norm=0.01, norm_type=2),
    optimizer=dict(
        betas=(
            0.9,
            0.999,
        ),
        eps=1e-08,
        lr=0.0001,
        type='AdamW',
        weight_decay=0.05),
    paramwise_cfg=dict(
        custom_keys=dict(
            backbone=dict(decay_mult=1.0, lr_mult=0.1),
            level_embed=dict(decay_mult=0.0, lr_mult=1.0),
            query_embed=dict(decay_mult=0.0, lr_mult=1.0),
            query_feat=dict(decay_mult=0.0, lr_mult=1.0)),
        norm_decay_mult=0.0),
    type='OptimWrapper')
optimizer = dict(
    betas=(
        0.9,
        0.999,
    ),
    eps=1e-08,
    lr=0.0001,
    type='AdamW',
    weight_decay=0.05)
param_scheduler = [
    dict(
        begin=0,
        by_epoch=False,
        end=160000,
        eta_min=0,
        power=0.9,
        type='PolyLR'),
]
resume = False
test_cfg = dict(type='TestLoop')
test_dataloader = dict(
    batch_size=1,
    dataset=dict(
        data_prefix=dict(
            img_path='images/validation',
            seg_map_path='annotations/validation'),
        data_root='data/ade/ADEChallengeData2016',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(keep_ratio=True, scale=(
                2048,
                512,
            ), type='Resize'),
            dict(reduce_zero_label=True, type='LoadAnnotations'),
            dict(type='PackSegInputs'),
        ],
        type='ADE20KDataset'),
    num_workers=4,
    persistent_workers=True,
    sampler=dict(shuffle=False, type='DefaultSampler'))
test_evaluator = dict(
    iou_metrics=[
        'mIoU',
    ], type='IoUMetric')
test_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(keep_ratio=True, scale=(
        2048,
        512,
    ), type='Resize'),
    dict(reduce_zero_label=True, type='LoadAnnotations'),
    dict(type='PackSegInputs'),
]
train_cfg = dict(
    max_iters=160000, type='IterBasedTrainLoop', val_interval=5000)
train_dataloader = dict(
    batch_size=2,
    dataset=dict(
        data_prefix=dict(
            img_path='images/training', seg_map_path='annotations/training'),
        data_root='data/ade/ADEChallengeData2016',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(reduce_zero_label=True, type='LoadAnnotations'),
            dict(
                max_size=2048,
                resize_type='ResizeShortestEdge',
                scales=[
                    256,
                    307,
                    358,
                    409,
                    460,
                    512,
                    563,
                    614,
                    665,
                    716,
                    768,
                    819,
                    870,
                    921,
                    972,
                    1024,
                ],
                type='RandomChoiceResize'),
            dict(
                cat_max_ratio=0.75, crop_size=(
                    512,
                    512,
                ), type='RandomCrop'),
            dict(prob=0.5, type='RandomFlip'),
            dict(type='PhotoMetricDistortion'),
            dict(type='PackSegInputs'),
        ],
        type='ADE20KDataset'),
    num_workers=4,
    persistent_workers=True,
    sampler=dict(shuffle=True, type='InfiniteSampler'))
train_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(reduce_zero_label=True, type='LoadAnnotations'),
    dict(
        max_size=2048,
        resize_type='ResizeShortestEdge',
        scales=[
            256,
            307,
            358,
            409,
            460,
            512,
            563,
            614,
            665,
            716,
            768,
            819,
            870,
            921,
            972,
            1024,
        ],
        type='RandomChoiceResize'),
    dict(cat_max_ratio=0.75, crop_size=(
        512,
        512,
    ), type='RandomCrop'),
    dict(prob=0.5, type='RandomFlip'),
    dict(type='PhotoMetricDistortion'),
    dict(type='PackSegInputs'),
]
tta_model = dict(type='SegTTAModel')
tta_pipeline = [
    dict(backend_args=None, type='LoadImageFromFile'),
    dict(
        transforms=[
            [
                dict(keep_ratio=True, scale_factor=0.5, type='Resize'),
                dict(keep_ratio=True, scale_factor=0.75, type='Resize'),
                dict(keep_ratio=True, scale_factor=1.0, type='Resize'),
                dict(keep_ratio=True, scale_factor=1.25, type='Resize'),
                dict(keep_ratio=True, scale_factor=1.5, type='Resize'),
                dict(keep_ratio=True, scale_factor=1.75, type='Resize'),
            ],
            [
                dict(direction='horizontal', prob=0.0, type='RandomFlip'),
                dict(direction='horizontal', prob=1.0, type='RandomFlip'),
            ],
            [
                dict(type='LoadAnnotations'),
            ],
            [
                dict(type='PackSegInputs'),
            ],
        ],
        type='TestTimeAug'),
]
val_cfg = dict(type='ValLoop')
val_dataloader = dict(
    batch_size=1,
    dataset=dict(
        data_prefix=dict(
            img_path='images/validation',
            seg_map_path='annotations/validation'),
        data_root='data/ade/ADEChallengeData2016',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(keep_ratio=True, scale=(
                2048,
                512,
            ), type='Resize'),
            dict(reduce_zero_label=True, type='LoadAnnotations'),
            dict(type='PackSegInputs'),
        ],
        type='ADE20KDataset'),
    num_workers=4,
    persistent_workers=True,
    sampler=dict(shuffle=False, type='DefaultSampler'))
val_evaluator = dict(
    iou_metrics=[
        'mIoU',
    ], type='IoUMetric')
vis_backends = [
    dict(type='LocalVisBackend'),
]
visualizer = dict(
    name='visualizer',
    type='SegLocalVisualizer',
    vis_backends=[
        dict(type='LocalVisBackend'),
    ])
work_dir = '../corruptions/work_dirs/ade20k/mask2former/mask2former_r101_8xb2-160k_ade20k-512x512/glass_blur'

09/21 01:22:46 - mmengine - INFO - Distributed training is not used, all SyncBatchNorm (SyncBN) layers in the model will be automatically reverted to BatchNormXd layers if they are used.
09/21 01:22:46 - mmengine - INFO - Hooks will be executed in the following order:
before_run:
(VERY_HIGH   ) RuntimeInfoHook                    
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
before_train:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_train_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(NORMAL      ) DistSamplerSeedHook                
 -------------------- 
before_train_iter:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_train_iter:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(NORMAL      ) SegVisualizationHook               
(BELOW_NORMAL) LoggerHook                         
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
after_train_epoch:
(NORMAL      ) IterTimerHook                      
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_val:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
before_val_epoch:
(NORMAL      ) IterTimerHook                      
 -------------------- 
before_val_iter:
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_val_iter:
(NORMAL      ) IterTimerHook                      
(NORMAL      ) SegVisualizationHook               
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_val_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
after_val:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
after_train:
(VERY_HIGH   ) RuntimeInfoHook                    
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_test:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
before_test_epoch:
(NORMAL      ) IterTimerHook                      
 -------------------- 
before_test_iter:
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_test_iter:
(NORMAL      ) IterTimerHook                      
(NORMAL      ) SegVisualizationHook               
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_test_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_test:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
after_run:
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
09/21 01:22:47 - mmengine - WARNING - The prefix is not set in metric class IoUMetric.
Loads checkpoint by local backend from path: ../checkpoint_files/ade20k/mask2former/mask2former_r101_8xb2-160k_ade20k-512x512_20221203_233905-b7135890.pth
09/21 01:22:47 - mmengine - INFO - Load checkpoint from ../checkpoint_files/ade20k/mask2former/mask2former_r101_8xb2-160k_ade20k-512x512_20221203_233905-b7135890.pth
09/21 01:29:22 - mmengine - INFO - Iter(test) [  50/2000]    eta: 4:16:45  time: 7.8915  data_time: 0.0016  memory: 17239  
09/21 01:35:02 - mmengine - INFO - Iter(test) [ 100/2000]    eta: 3:52:42  time: 7.3311  data_time: 0.0017  memory: 17230  
09/21 01:40:29 - mmengine - INFO - Iter(test) [ 150/2000]    eta: 3:38:16  time: 6.7302  data_time: 0.0016  memory: 943  
09/21 01:46:12 - mmengine - INFO - Iter(test) [ 200/2000]    eta: 3:30:38  time: 6.4972  data_time: 0.0016  memory: 17287  
09/21 01:51:34 - mmengine - INFO - Iter(test) [ 250/2000]    eta: 3:21:27  time: 6.4081  data_time: 0.0015  memory: 17293  
09/21 01:56:53 - mmengine - INFO - Iter(test) [ 300/2000]    eta: 3:13:09  time: 6.6207  data_time: 0.0016  memory: 17234  
09/21 02:02:23 - mmengine - INFO - Iter(test) [ 350/2000]    eta: 3:06:37  time: 6.1275  data_time: 0.0016  memory: 17237  
09/21 02:07:48 - mmengine - INFO - Iter(test) [ 400/2000]    eta: 3:00:00  time: 6.5940  data_time: 0.0015  memory: 17220  
09/21 02:12:41 - mmengine - INFO - Iter(test) [ 450/2000]    eta: 2:51:51  time: 5.9354  data_time: 0.0015  memory: 955  
09/21 02:18:00 - mmengine - INFO - Iter(test) [ 500/2000]    eta: 2:45:38  time: 6.2294  data_time: 0.0015  memory: 943  
09/21 02:23:40 - mmengine - INFO - Iter(test) [ 550/2000]    eta: 2:40:29  time: 6.7437  data_time: 0.0016  memory: 1055  
09/21 02:29:02 - mmengine - INFO - Iter(test) [ 600/2000]    eta: 2:34:35  time: 6.6365  data_time: 0.0029  memory: 1053  
09/21 02:34:24 - mmengine - INFO - Iter(test) [ 650/2000]    eta: 2:28:42  time: 6.9079  data_time: 0.0014  memory: 17241  
09/21 02:40:03 - mmengine - INFO - Iter(test) [ 700/2000]    eta: 2:23:29  time: 6.6370  data_time: 0.0016  memory: 17235  
09/21 02:45:28 - mmengine - INFO - Iter(test) [ 750/2000]    eta: 2:17:48  time: 6.2537  data_time: 0.0015  memory: 1112  
09/21 02:50:30 - mmengine - INFO - Iter(test) [ 800/2000]    eta: 2:11:34  time: 6.4144  data_time: 0.0016  memory: 943  
09/21 02:55:54 - mmengine - INFO - Iter(test) [ 850/2000]    eta: 2:05:57  time: 6.5054  data_time: 0.0016  memory: 915  
09/21 03:00:51 - mmengine - INFO - Iter(test) [ 900/2000]    eta: 1:59:50  time: 5.7434  data_time: 0.0015  memory: 998  
09/21 03:06:18 - mmengine - INFO - Iter(test) [ 950/2000]    eta: 1:54:24  time: 6.3053  data_time: 0.0016  memory: 1027  
09/21 03:11:26 - mmengine - INFO - Iter(test) [1000/2000]    eta: 1:48:38  time: 6.1559  data_time: 0.0016  memory: 1027  
09/21 03:17:00 - mmengine - INFO - Iter(test) [1050/2000]    eta: 1:43:20  time: 6.6788  data_time: 0.0015  memory: 17242  
09/21 03:22:21 - mmengine - INFO - Iter(test) [1100/2000]    eta: 1:37:49  time: 6.3104  data_time: 0.0016  memory: 1024  
09/21 03:27:38 - mmengine - INFO - Iter(test) [1150/2000]    eta: 1:32:16  time: 6.4504  data_time: 0.0016  memory: 996  
09/21 03:33:04 - mmengine - INFO - Iter(test) [1200/2000]    eta: 1:26:51  time: 6.2620  data_time: 0.0069  memory: 1900  
09/21 03:38:20 - mmengine - INFO - Iter(test) [1250/2000]    eta: 1:21:19  time: 6.2417  data_time: 0.0015  memory: 17230  
09/21 03:43:20 - mmengine - INFO - Iter(test) [1300/2000]    eta: 1:15:40  time: 6.4007  data_time: 0.0015  memory: 943  
09/21 03:48:36 - mmengine - INFO - Iter(test) [1350/2000]    eta: 1:10:12  time: 5.9475  data_time: 0.0015  memory: 943  
09/21 03:53:56 - mmengine - INFO - Iter(test) [1400/2000]    eta: 1:04:46  time: 6.7232  data_time: 0.0015  memory: 1025  
09/21 03:59:01 - mmengine - INFO - Iter(test) [1450/2000]    eta: 0:59:15  time: 6.6463  data_time: 0.0015  memory: 1027  
09/21 04:04:15 - mmengine - INFO - Iter(test) [1500/2000]    eta: 0:53:49  time: 6.0160  data_time: 0.0015  memory: 941  
09/21 04:09:49 - mmengine - INFO - Iter(test) [1550/2000]    eta: 0:48:29  time: 6.5406  data_time: 0.0015  memory: 1027  
09/21 04:15:00 - mmengine - INFO - Iter(test) [1600/2000]    eta: 0:43:03  time: 6.3185  data_time: 0.0016  memory: 915  
09/21 04:20:19 - mmengine - INFO - Iter(test) [1650/2000]    eta: 0:37:39  time: 5.9283  data_time: 0.0014  memory: 17237  
09/21 04:25:45 - mmengine - INFO - Iter(test) [1700/2000]    eta: 0:32:17  time: 6.4310  data_time: 0.0016  memory: 1024  
09/21 04:31:13 - mmengine - INFO - Iter(test) [1750/2000]    eta: 0:26:55  time: 6.3989  data_time: 0.0014  memory: 1052  
09/21 04:36:20 - mmengine - INFO - Iter(test) [1800/2000]    eta: 0:21:30  time: 6.5091  data_time: 0.0016  memory: 943  
09/21 04:41:43 - mmengine - INFO - Iter(test) [1850/2000]    eta: 0:16:07  time: 6.4229  data_time: 0.0016  memory: 859  
09/21 04:46:45 - mmengine - INFO - Iter(test) [1900/2000]    eta: 0:10:44  time: 6.2277  data_time: 0.0015  memory: 1084  
09/21 04:52:09 - mmengine - INFO - Iter(test) [1950/2000]    eta: 0:05:22  time: 6.2272  data_time: 0.0015  memory: 1331  
09/21 04:57:17 - mmengine - INFO - Iter(test) [2000/2000]    eta: 0:00:00  time: 5.8404  data_time: 0.0014  memory: 1110  
09/21 04:57:18 - mmengine - INFO - per class results:
09/21 04:57:18 - mmengine - INFO - 
+---------------------+-------+-------+
|        Class        |  IoU  |  Acc  |
+---------------------+-------+-------+
|         wall        | 73.51 | 86.41 |
|       building      | 78.72 |  89.6 |
|         sky         | 93.76 | 97.98 |
|        floor        | 79.66 |  89.1 |
|         tree        | 70.59 |  85.0 |
|       ceiling       | 82.54 | 92.71 |
|         road        | 81.34 | 89.02 |
|         bed         | 86.77 | 93.93 |
|      windowpane     | 57.34 |  74.0 |
|        grass        | 64.74 | 76.33 |
|       cabinet       | 54.25 | 62.47 |
|       sidewalk      | 55.74 |  64.3 |
|        person       | 78.04 | 86.69 |
|        earth        | 33.74 | 54.97 |
|         door        | 41.83 | 49.92 |
|        table        | 54.83 | 69.01 |
|       mountain      | 46.81 | 62.42 |
|        plant        | 45.73 | 58.59 |
|       curtain       | 60.26 | 81.62 |
|        chair        | 56.41 | 68.91 |
|         car         |  79.9 | 86.79 |
|        water        | 44.89 | 67.05 |
|       painting      | 67.39 | 79.95 |
|         sofa        | 62.12 |  78.1 |
|        shelf        | 39.35 | 60.63 |
|        house        | 28.17 | 38.49 |
|         sea         | 47.41 | 73.35 |
|        mirror       | 52.26 |  68.0 |
|         rug         | 60.73 | 68.92 |
|        field        | 19.19 | 37.81 |
|       armchair      | 40.75 | 55.78 |
|         seat        | 51.33 | 71.84 |
|        fence        | 29.39 | 51.49 |
|         desk        |  44.6 | 61.24 |
|         rock        | 39.15 | 53.49 |
|       wardrobe      | 40.21 | 54.75 |
|         lamp        | 62.14 |  71.6 |
|       bathtub       | 66.69 | 78.48 |
|       railing       | 21.24 | 31.39 |
|       cushion       | 53.08 | 67.43 |
|         base        |  16.9 | 28.61 |
|         box         |  14.1 | 23.62 |
|        column       | 37.68 | 59.94 |
|      signboard      |  31.4 | 43.96 |
|   chest of drawers  | 32.14 | 61.85 |
|       counter       | 31.15 | 42.73 |
|         sand        | 35.62 | 49.53 |
|         sink        | 66.24 |  77.1 |
|      skyscraper     |  60.6 | 86.44 |
|      fireplace      | 65.49 | 86.29 |
|     refrigerator    | 57.47 | 59.86 |
|      grandstand     | 23.02 | 79.17 |
|         path        | 21.44 | 35.42 |
|        stairs       | 21.65 | 31.12 |
|        runway       | 72.71 | 81.46 |
|         case        |  42.0 | 57.65 |
|      pool table     | 84.85 | 96.21 |
|        pillow       | 55.22 |  64.2 |
|     screen door     | 40.36 | 47.59 |
|       stairway      | 29.43 | 36.16 |
|        river        |  6.41 |  9.53 |
|        bridge       |  45.6 | 76.67 |
|       bookcase      | 23.39 | 31.96 |
|        blind        | 11.67 | 12.05 |
|     coffee table    | 63.09 | 79.25 |
|        toilet       | 80.85 | 86.86 |
|        flower       | 29.84 | 55.87 |
|         book        | 37.27 | 47.15 |
|         hill        |  4.01 | 11.03 |
|        bench        | 33.11 | 53.31 |
|      countertop     | 55.23 | 66.59 |
|        stove        | 63.41 |  75.2 |
|         palm        | 39.47 | 52.58 |
|    kitchen island   | 36.14 | 64.96 |
|       computer      | 46.72 | 50.04 |
|     swivel chair    | 37.92 | 51.82 |
|         boat        |  27.5 | 47.95 |
|         bar         | 56.95 | 64.95 |
|    arcade machine   | 31.04 | 35.65 |
|        hovel        | 21.11 | 47.41 |
|         bus         | 79.88 | 91.04 |
|        towel        | 52.43 | 74.88 |
|        light        | 55.54 | 66.34 |
|        truck        | 17.84 | 39.15 |
|        tower        | 55.56 | 76.98 |
|      chandelier     | 68.57 | 80.31 |
|        awning       | 24.32 | 34.89 |
|     streetlight     | 24.32 | 33.74 |
|        booth        | 42.16 | 44.44 |
| television receiver | 54.55 | 66.82 |
|       airplane      | 48.28 | 64.06 |
|      dirt track     |  2.15 |  2.56 |
|       apparel       | 39.13 | 61.35 |
|         pole        | 20.86 |  29.8 |
|         land        |  3.63 |  6.25 |
|      bannister      |  2.71 |  3.06 |
|      escalator      | 14.99 | 15.23 |
|       ottoman       | 37.68 | 62.43 |
|        bottle       | 13.97 | 15.91 |
|        buffet       | 36.64 | 41.39 |
|        poster       | 12.34 | 28.11 |
|        stage        |  9.95 | 30.17 |
|         van         |  39.9 | 52.31 |
|         ship        | 46.63 | 78.42 |
|       fountain      | 25.42 | 33.44 |
|    conveyer belt    | 47.49 | 63.14 |
|        canopy       | 23.44 | 43.58 |
|        washer       | 43.39 | 43.88 |
|      plaything      | 19.37 | 59.61 |
|    swimming pool    | 66.75 | 85.26 |
|        stool        | 39.72 |  60.1 |
|        barrel       | 33.47 | 74.09 |
|        basket       | 31.94 | 37.38 |
|      waterfall      | 57.72 |  85.0 |
|         tent        | 82.21 | 98.42 |
|         bag         | 12.02 | 14.41 |
|       minibike      |  65.8 | 77.09 |
|        cradle       | 79.67 | 96.04 |
|         oven        | 20.71 | 55.61 |
|         ball        | 42.88 | 54.71 |
|         food        | 55.49 | 72.22 |
|         step        |  6.87 |  8.81 |
|         tank        | 38.94 |  42.2 |
|      trade name     | 21.18 | 22.68 |
|      microwave      |  30.5 | 31.64 |
|         pot         |  48.9 | 58.26 |
|        animal       | 53.83 | 61.99 |
|       bicycle       | 47.86 | 61.19 |
|         lake        |  0.0  |  0.0  |
|      dishwasher     | 31.09 | 39.94 |
|        screen       | 48.26 |  57.0 |
|       blanket       | 10.61 | 14.89 |
|      sculpture      | 38.96 | 62.97 |
|         hood        | 52.57 | 62.82 |
|        sconce       | 43.81 |  52.9 |
|         vase        | 29.47 | 39.81 |
|    traffic light    | 32.03 | 55.82 |
|         tray        |  7.94 | 12.25 |
|        ashcan       |  32.0 | 45.92 |
|         fan         | 53.42 | 70.74 |
|         pier        |  0.07 |  0.07 |
|      crt screen     | 13.74 |  29.9 |
|        plate        | 47.84 | 63.86 |
|       monitor       |  1.89 |  2.13 |
|    bulletin board   | 33.22 | 36.87 |
|        shower       |  0.67 |  9.11 |
|       radiator      |  39.4 | 47.15 |
|        glass        |  8.6  |  8.88 |
|        clock        | 33.38 | 41.81 |
|         flag        |  26.3 | 30.23 |
+---------------------+-------+-------+
09/21 04:57:18 - mmengine - INFO - Iter(test) [2000/2000]    aAcc: 79.4700  mIoU: 41.4800  mAcc: 54.5700  data_time: 0.0019  time: 6.4348
Finished processing corruption type: glass_blur
Processing corruption type: motion_blur
09/21 04:59:59 - mmengine - INFO - 
------------------------------------------------------------
System environment:
    sys.platform: linux
    Python: 3.10.13 | packaged by conda-forge | (main, Dec 23 2023, 15:36:39) [GCC 12.3.0]
    CUDA available: True
    MUSA available: False
    numpy_random_seed: 307395122
    GPU 0: Tesla V100-SXM2-32GB
    CUDA_HOME: /opt/bwhpc/common/devel/cuda/11.7
    NVCC: Cuda compilation tools, release 11.7, V11.7.99
    GCC: gcc (GCC) 8.5.0 20210514 (Red Hat 8.5.0-18)
    PyTorch: 1.13.1
    PyTorch compiling details: PyTorch built with:
  - GCC 9.3
  - C++ Version: 201402
  - Intel(R) oneAPI Math Kernel Library Version 2023.1-Product Build 20230303 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v2.6.0 (Git Hash 52b5f107dd9cf10910aaa19cb47f3abf9b349815)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - LAPACK is enabled (usually provided by MKL)
  - NNPACK is enabled
  - CPU capability usage: AVX2
  - CUDA Runtime 11.7
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_61,code=sm_61;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86;-gencode;arch=compute_37,code=compute_37
  - CuDNN 8.5
  - Magma 2.6.1
  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.7, CUDNN_VERSION=8.5.0, CXX_COMPILER=/opt/rh/devtoolset-9/root/usr/bin/c++, CXX_FLAGS= -fabi-version=11 -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -DEDGE_PROFILER_USE_KINETO -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Werror=non-virtual-dtor -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wunused-local-typedefs -Wno-unused-parameter -Wno-unused-function -Wno-unused-result -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Werror=cast-function-type -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.13.1, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, USE_ROCM=OFF, 

    TorchVision: 0.14.1
    OpenCV: 3.4.18
    MMEngine: 0.10.4

Runtime environment:
    cudnn_benchmark: True
    mp_cfg: {'mp_start_method': 'fork', 'opencv_num_threads': 0}
    dist_cfg: {'backend': 'nccl'}
    seed: 307395122
    Distributed launcher: none
    Distributed training: False
    GPU number: 1
------------------------------------------------------------

09/21 04:59:59 - mmengine - INFO - Config:
auto_scale_lr = dict(base_batch_size=16, enable=False)
crop_size = (
    512,
    512,
)
custom_imports = dict(allow_failed_imports=False, imports='mmdet.models')
data_root = 'data/ade/ADEChallengeData2016'
dataset_type = 'ADE20KDataset'
default_hooks = dict(
    checkpoint=dict(
        by_epoch=False, interval=5000, save_best='mIoU',
        type='CheckpointHook'),
    logger=dict(interval=50, log_metric_by_epoch=False, type='LoggerHook'),
    param_scheduler=dict(type='ParamSchedulerHook'),
    sampler_seed=dict(type='DistSamplerSeedHook'),
    timer=dict(type='IterTimerHook'),
    visualization=dict(type='SegVisualizationHook'))
default_scope = 'mmseg'
embed_multi = dict(decay_mult=0.0, lr_mult=1.0)
env_cfg = dict(
    cudnn_benchmark=True,
    dist_cfg=dict(backend='nccl'),
    mp_cfg=dict(mp_start_method='fork', opencv_num_threads=0))
img_ratios = [
    0.5,
    0.75,
    1.0,
    1.25,
    1.5,
    1.75,
]
launcher = 'none'
load_from = '../checkpoint_files/ade20k/mask2former/mask2former_r101_8xb2-160k_ade20k-512x512_20221203_233905-b7135890.pth'
log_level = 'INFO'
log_processor = dict(by_epoch=False)
model = dict(
    backbone=dict(
        deep_stem=False,
        depth=101,
        frozen_stages=-1,
        init_cfg=dict(checkpoint='torchvision://resnet101', type='Pretrained'),
        norm_cfg=dict(requires_grad=False, type='SyncBN'),
        num_stages=4,
        out_indices=(
            0,
            1,
            2,
            3,
        ),
        style='pytorch',
        type='ResNet'),
    data_preprocessor=dict(
        bgr_to_rgb=True,
        corruption='motion_blur',
        mean=[
            123.675,
            116.28,
            103.53,
        ],
        pad_val=0,
        seg_pad_val=255,
        size=(
            512,
            512,
        ),
        std=[
            58.395,
            57.12,
            57.375,
        ],
        test_cfg=dict(size_divisor=32),
        type='SegDataPreProcessor'),
    decode_head=dict(
        align_corners=False,
        enforce_decoder_input_project=False,
        feat_channels=256,
        in_channels=[
            256,
            512,
            1024,
            2048,
        ],
        loss_cls=dict(
            class_weight=[
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                0.1,
            ],
            loss_weight=2.0,
            reduction='mean',
            type='mmdet.CrossEntropyLoss',
            use_sigmoid=False),
        loss_dice=dict(
            activate=True,
            eps=1.0,
            loss_weight=5.0,
            naive_dice=True,
            reduction='mean',
            type='mmdet.DiceLoss',
            use_sigmoid=True),
        loss_mask=dict(
            loss_weight=5.0,
            reduction='mean',
            type='mmdet.CrossEntropyLoss',
            use_sigmoid=True),
        num_classes=150,
        num_queries=100,
        num_transformer_feat_level=3,
        out_channels=256,
        pixel_decoder=dict(
            act_cfg=dict(type='ReLU'),
            encoder=dict(
                init_cfg=None,
                layer_cfg=dict(
                    ffn_cfg=dict(
                        act_cfg=dict(inplace=True, type='ReLU'),
                        embed_dims=256,
                        feedforward_channels=1024,
                        ffn_drop=0.0,
                        num_fcs=2),
                    self_attn_cfg=dict(
                        batch_first=True,
                        dropout=0.0,
                        embed_dims=256,
                        im2col_step=64,
                        init_cfg=None,
                        norm_cfg=None,
                        num_heads=8,
                        num_levels=3,
                        num_points=4)),
                num_layers=6),
            init_cfg=None,
            norm_cfg=dict(num_groups=32, type='GN'),
            num_outs=3,
            positional_encoding=dict(normalize=True, num_feats=128),
            type='mmdet.MSDeformAttnPixelDecoder'),
        positional_encoding=dict(normalize=True, num_feats=128),
        strides=[
            4,
            8,
            16,
            32,
        ],
        train_cfg=dict(
            assigner=dict(
                match_costs=[
                    dict(type='mmdet.ClassificationCost', weight=2.0),
                    dict(
                        type='mmdet.CrossEntropyLossCost',
                        use_sigmoid=True,
                        weight=5.0),
                    dict(
                        eps=1.0,
                        pred_act=True,
                        type='mmdet.DiceCost',
                        weight=5.0),
                ],
                type='mmdet.HungarianAssigner'),
            importance_sample_ratio=0.75,
            num_points=12544,
            oversample_ratio=3.0,
            sampler=dict(type='mmdet.MaskPseudoSampler')),
        transformer_decoder=dict(
            init_cfg=None,
            layer_cfg=dict(
                cross_attn_cfg=dict(
                    attn_drop=0.0,
                    batch_first=True,
                    dropout_layer=None,
                    embed_dims=256,
                    num_heads=8,
                    proj_drop=0.0),
                ffn_cfg=dict(
                    act_cfg=dict(inplace=True, type='ReLU'),
                    add_identity=True,
                    dropout_layer=None,
                    embed_dims=256,
                    feedforward_channels=2048,
                    ffn_drop=0.0,
                    num_fcs=2),
                self_attn_cfg=dict(
                    attn_drop=0.0,
                    batch_first=True,
                    dropout_layer=None,
                    embed_dims=256,
                    num_heads=8,
                    proj_drop=0.0)),
            num_layers=9,
            return_intermediate=True),
        type='Mask2FormerHead'),
    test_cfg=dict(mode='whole'),
    train_cfg=dict(),
    type='EncoderDecoder')
num_classes = 150
optim_wrapper = dict(
    clip_grad=dict(max_norm=0.01, norm_type=2),
    optimizer=dict(
        betas=(
            0.9,
            0.999,
        ),
        eps=1e-08,
        lr=0.0001,
        type='AdamW',
        weight_decay=0.05),
    paramwise_cfg=dict(
        custom_keys=dict(
            backbone=dict(decay_mult=1.0, lr_mult=0.1),
            level_embed=dict(decay_mult=0.0, lr_mult=1.0),
            query_embed=dict(decay_mult=0.0, lr_mult=1.0),
            query_feat=dict(decay_mult=0.0, lr_mult=1.0)),
        norm_decay_mult=0.0),
    type='OptimWrapper')
optimizer = dict(
    betas=(
        0.9,
        0.999,
    ),
    eps=1e-08,
    lr=0.0001,
    type='AdamW',
    weight_decay=0.05)
param_scheduler = [
    dict(
        begin=0,
        by_epoch=False,
        end=160000,
        eta_min=0,
        power=0.9,
        type='PolyLR'),
]
resume = False
test_cfg = dict(type='TestLoop')
test_dataloader = dict(
    batch_size=1,
    dataset=dict(
        data_prefix=dict(
            img_path='images/validation',
            seg_map_path='annotations/validation'),
        data_root='data/ade/ADEChallengeData2016',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(keep_ratio=True, scale=(
                2048,
                512,
            ), type='Resize'),
            dict(reduce_zero_label=True, type='LoadAnnotations'),
            dict(type='PackSegInputs'),
        ],
        type='ADE20KDataset'),
    num_workers=4,
    persistent_workers=True,
    sampler=dict(shuffle=False, type='DefaultSampler'))
test_evaluator = dict(
    iou_metrics=[
        'mIoU',
    ], type='IoUMetric')
test_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(keep_ratio=True, scale=(
        2048,
        512,
    ), type='Resize'),
    dict(reduce_zero_label=True, type='LoadAnnotations'),
    dict(type='PackSegInputs'),
]
train_cfg = dict(
    max_iters=160000, type='IterBasedTrainLoop', val_interval=5000)
train_dataloader = dict(
    batch_size=2,
    dataset=dict(
        data_prefix=dict(
            img_path='images/training', seg_map_path='annotations/training'),
        data_root='data/ade/ADEChallengeData2016',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(reduce_zero_label=True, type='LoadAnnotations'),
            dict(
                max_size=2048,
                resize_type='ResizeShortestEdge',
                scales=[
                    256,
                    307,
                    358,
                    409,
                    460,
                    512,
                    563,
                    614,
                    665,
                    716,
                    768,
                    819,
                    870,
                    921,
                    972,
                    1024,
                ],
                type='RandomChoiceResize'),
            dict(
                cat_max_ratio=0.75, crop_size=(
                    512,
                    512,
                ), type='RandomCrop'),
            dict(prob=0.5, type='RandomFlip'),
            dict(type='PhotoMetricDistortion'),
            dict(type='PackSegInputs'),
        ],
        type='ADE20KDataset'),
    num_workers=4,
    persistent_workers=True,
    sampler=dict(shuffle=True, type='InfiniteSampler'))
train_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(reduce_zero_label=True, type='LoadAnnotations'),
    dict(
        max_size=2048,
        resize_type='ResizeShortestEdge',
        scales=[
            256,
            307,
            358,
            409,
            460,
            512,
            563,
            614,
            665,
            716,
            768,
            819,
            870,
            921,
            972,
            1024,
        ],
        type='RandomChoiceResize'),
    dict(cat_max_ratio=0.75, crop_size=(
        512,
        512,
    ), type='RandomCrop'),
    dict(prob=0.5, type='RandomFlip'),
    dict(type='PhotoMetricDistortion'),
    dict(type='PackSegInputs'),
]
tta_model = dict(type='SegTTAModel')
tta_pipeline = [
    dict(backend_args=None, type='LoadImageFromFile'),
    dict(
        transforms=[
            [
                dict(keep_ratio=True, scale_factor=0.5, type='Resize'),
                dict(keep_ratio=True, scale_factor=0.75, type='Resize'),
                dict(keep_ratio=True, scale_factor=1.0, type='Resize'),
                dict(keep_ratio=True, scale_factor=1.25, type='Resize'),
                dict(keep_ratio=True, scale_factor=1.5, type='Resize'),
                dict(keep_ratio=True, scale_factor=1.75, type='Resize'),
            ],
            [
                dict(direction='horizontal', prob=0.0, type='RandomFlip'),
                dict(direction='horizontal', prob=1.0, type='RandomFlip'),
            ],
            [
                dict(type='LoadAnnotations'),
            ],
            [
                dict(type='PackSegInputs'),
            ],
        ],
        type='TestTimeAug'),
]
val_cfg = dict(type='ValLoop')
val_dataloader = dict(
    batch_size=1,
    dataset=dict(
        data_prefix=dict(
            img_path='images/validation',
            seg_map_path='annotations/validation'),
        data_root='data/ade/ADEChallengeData2016',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(keep_ratio=True, scale=(
                2048,
                512,
            ), type='Resize'),
            dict(reduce_zero_label=True, type='LoadAnnotations'),
            dict(type='PackSegInputs'),
        ],
        type='ADE20KDataset'),
    num_workers=4,
    persistent_workers=True,
    sampler=dict(shuffle=False, type='DefaultSampler'))
val_evaluator = dict(
    iou_metrics=[
        'mIoU',
    ], type='IoUMetric')
vis_backends = [
    dict(type='LocalVisBackend'),
]
visualizer = dict(
    name='visualizer',
    type='SegLocalVisualizer',
    vis_backends=[
        dict(type='LocalVisBackend'),
    ])
work_dir = '../corruptions/work_dirs/ade20k/mask2former/mask2former_r101_8xb2-160k_ade20k-512x512/motion_blur'

09/21 05:00:25 - mmengine - INFO - Distributed training is not used, all SyncBatchNorm (SyncBN) layers in the model will be automatically reverted to BatchNormXd layers if they are used.
09/21 05:00:25 - mmengine - INFO - Hooks will be executed in the following order:
before_run:
(VERY_HIGH   ) RuntimeInfoHook                    
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
before_train:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_train_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(NORMAL      ) DistSamplerSeedHook                
 -------------------- 
before_train_iter:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_train_iter:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(NORMAL      ) SegVisualizationHook               
(BELOW_NORMAL) LoggerHook                         
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
after_train_epoch:
(NORMAL      ) IterTimerHook                      
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_val:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
before_val_epoch:
(NORMAL      ) IterTimerHook                      
 -------------------- 
before_val_iter:
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_val_iter:
(NORMAL      ) IterTimerHook                      
(NORMAL      ) SegVisualizationHook               
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_val_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
after_val:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
after_train:
(VERY_HIGH   ) RuntimeInfoHook                    
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_test:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
before_test_epoch:
(NORMAL      ) IterTimerHook                      
 -------------------- 
before_test_iter:
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_test_iter:
(NORMAL      ) IterTimerHook                      
(NORMAL      ) SegVisualizationHook               
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_test_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_test:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
after_run:
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
09/21 05:00:26 - mmengine - WARNING - The prefix is not set in metric class IoUMetric.
Loads checkpoint by local backend from path: ../checkpoint_files/ade20k/mask2former/mask2former_r101_8xb2-160k_ade20k-512x512_20221203_233905-b7135890.pth
09/21 05:00:28 - mmengine - INFO - Load checkpoint from ../checkpoint_files/ade20k/mask2former/mask2former_r101_8xb2-160k_ade20k-512x512_20221203_233905-b7135890.pth
09/21 05:03:19 - mmengine - INFO - Iter(test) [  50/2000]    eta: 1:51:13  time: 1.7126  data_time: 0.0015  memory: 17239  
09/21 05:04:12 - mmengine - INFO - Iter(test) [ 100/2000]    eta: 1:11:04  time: 1.2859  data_time: 0.0015  memory: 17230  
09/21 05:04:52 - mmengine - INFO - Iter(test) [ 150/2000]    eta: 0:54:11  time: 0.7911  data_time: 0.0015  memory: 943  
09/21 05:05:42 - mmengine - INFO - Iter(test) [ 200/2000]    eta: 0:47:03  time: 0.8068  data_time: 0.0014  memory: 17287  
09/21 05:06:27 - mmengine - INFO - Iter(test) [ 250/2000]    eta: 0:41:55  time: 0.7945  data_time: 0.0014  memory: 17293  
09/21 05:07:12 - mmengine - INFO - Iter(test) [ 300/2000]    eta: 0:38:08  time: 0.8383  data_time: 0.0015  memory: 17234  
09/21 05:08:00 - mmengine - INFO - Iter(test) [ 350/2000]    eta: 0:35:28  time: 0.7684  data_time: 0.0015  memory: 17237  
09/21 05:08:43 - mmengine - INFO - Iter(test) [ 400/2000]    eta: 0:33:01  time: 0.8215  data_time: 0.0014  memory: 17220  
09/21 05:09:19 - mmengine - INFO - Iter(test) [ 450/2000]    eta: 0:30:30  time: 0.7475  data_time: 0.0014  memory: 955  
09/21 05:09:59 - mmengine - INFO - Iter(test) [ 500/2000]    eta: 0:28:32  time: 0.7498  data_time: 0.0014  memory: 943  
09/21 05:10:40 - mmengine - INFO - Iter(test) [ 550/2000]    eta: 0:26:52  time: 0.8290  data_time: 0.0015  memory: 1055  
09/21 05:11:17 - mmengine - INFO - Iter(test) [ 600/2000]    eta: 0:25:14  time: 0.7821  data_time: 0.0015  memory: 1053  
09/21 05:12:01 - mmengine - INFO - Iter(test) [ 650/2000]    eta: 0:23:59  time: 1.2684  data_time: 0.0014  memory: 17241  
09/21 05:12:47 - mmengine - INFO - Iter(test) [ 700/2000]    eta: 0:22:52  time: 0.8034  data_time: 0.0015  memory: 17235  
09/21 05:13:28 - mmengine - INFO - Iter(test) [ 750/2000]    eta: 0:21:40  time: 0.7883  data_time: 0.0014  memory: 1112  
09/21 05:14:05 - mmengine - INFO - Iter(test) [ 800/2000]    eta: 0:20:25  time: 0.7429  data_time: 0.0015  memory: 943  
09/21 05:14:43 - mmengine - INFO - Iter(test) [ 850/2000]    eta: 0:19:17  time: 0.7593  data_time: 0.0015  memory: 915  
09/21 05:15:20 - mmengine - INFO - Iter(test) [ 900/2000]    eta: 0:18:10  time: 0.7299  data_time: 0.0014  memory: 998  
09/21 05:16:01 - mmengine - INFO - Iter(test) [ 950/2000]    eta: 0:17:10  time: 0.7986  data_time: 0.0015  memory: 1027  
09/21 05:16:39 - mmengine - INFO - Iter(test) [1000/2000]    eta: 0:16:10  time: 0.7629  data_time: 0.0014  memory: 1027  
09/21 05:17:24 - mmengine - INFO - Iter(test) [1050/2000]    eta: 0:15:19  time: 0.8859  data_time: 0.0014  memory: 17242  
09/21 05:18:04 - mmengine - INFO - Iter(test) [1100/2000]    eta: 0:14:24  time: 0.7868  data_time: 0.0015  memory: 1024  
09/21 05:18:44 - mmengine - INFO - Iter(test) [1150/2000]    eta: 0:13:29  time: 0.7883  data_time: 0.0015  memory: 996  
09/21 05:19:24 - mmengine - INFO - Iter(test) [1200/2000]    eta: 0:12:37  time: 0.7769  data_time: 0.0014  memory: 1900  
09/21 05:20:07 - mmengine - INFO - Iter(test) [1250/2000]    eta: 0:11:47  time: 0.7884  data_time: 0.0014  memory: 17230  
09/21 05:20:45 - mmengine - INFO - Iter(test) [1300/2000]    eta: 0:10:55  time: 0.7710  data_time: 0.0015  memory: 943  
09/21 05:21:24 - mmengine - INFO - Iter(test) [1350/2000]    eta: 0:10:04  time: 0.7262  data_time: 0.0014  memory: 943  
09/21 05:22:04 - mmengine - INFO - Iter(test) [1400/2000]    eta: 0:09:15  time: 0.8558  data_time: 0.0014  memory: 1025  
09/21 05:22:42 - mmengine - INFO - Iter(test) [1450/2000]    eta: 0:08:25  time: 0.8378  data_time: 0.0014  memory: 1027  
09/21 05:23:21 - mmengine - INFO - Iter(test) [1500/2000]    eta: 0:07:37  time: 0.7233  data_time: 0.0014  memory: 941  
09/21 05:24:02 - mmengine - INFO - Iter(test) [1550/2000]    eta: 0:06:50  time: 0.8131  data_time: 0.0015  memory: 1027  
09/21 05:24:38 - mmengine - INFO - Iter(test) [1600/2000]    eta: 0:06:02  time: 0.7435  data_time: 0.0015  memory: 915  
09/21 05:25:21 - mmengine - INFO - Iter(test) [1650/2000]    eta: 0:05:16  time: 0.7366  data_time: 0.0014  memory: 17237  
09/21 05:26:02 - mmengine - INFO - Iter(test) [1700/2000]    eta: 0:04:30  time: 0.8082  data_time: 0.0016  memory: 1024  
09/21 05:26:42 - mmengine - INFO - Iter(test) [1750/2000]    eta: 0:03:44  time: 0.8275  data_time: 0.0014  memory: 1052  
09/21 05:27:20 - mmengine - INFO - Iter(test) [1800/2000]    eta: 0:02:59  time: 0.7875  data_time: 0.0016  memory: 943  
09/21 05:27:58 - mmengine - INFO - Iter(test) [1850/2000]    eta: 0:02:13  time: 0.7651  data_time: 0.0016  memory: 859  
09/21 05:28:35 - mmengine - INFO - Iter(test) [1900/2000]    eta: 0:01:28  time: 0.7939  data_time: 0.0014  memory: 1084  
09/21 05:29:16 - mmengine - INFO - Iter(test) [1950/2000]    eta: 0:00:44  time: 0.8221  data_time: 0.0014  memory: 1331  
09/21 05:29:54 - mmengine - INFO - Iter(test) [2000/2000]    eta: 0:00:00  time: 0.7073  data_time: 0.0013  memory: 1110  
09/21 05:29:54 - mmengine - INFO - per class results:
09/21 05:29:54 - mmengine - INFO - 
+---------------------+-------+-------+
|        Class        |  IoU  |  Acc  |
+---------------------+-------+-------+
|         wall        | 74.59 |  85.6 |
|       building      | 78.12 | 92.31 |
|         sky         | 93.44 | 96.23 |
|        floor        | 79.33 | 89.98 |
|         tree        | 69.53 | 79.38 |
|       ceiling       |  81.7 | 91.42 |
|         road        | 79.59 | 84.57 |
|         bed         | 87.02 | 94.56 |
|      windowpane     | 59.24 |  79.0 |
|        grass        | 64.53 | 81.77 |
|       cabinet       | 55.31 | 65.81 |
|       sidewalk      | 58.18 | 80.12 |
|        person       | 79.07 | 87.48 |
|        earth        | 26.05 | 38.05 |
|         door        | 43.18 | 56.88 |
|        table        | 57.38 | 73.86 |
|       mountain      | 39.99 | 50.59 |
|        plant        |  45.4 | 63.66 |
|       curtain       | 69.13 | 80.03 |
|        chair        | 56.65 | 72.99 |
|         car         | 80.97 | 91.72 |
|        water        | 54.85 | 80.88 |
|       painting      | 68.29 | 82.03 |
|         sofa        | 62.88 | 83.05 |
|        shelf        | 39.55 |  68.6 |
|        house        | 43.78 | 53.98 |
|         sea         | 51.95 | 58.47 |
|        mirror       | 58.65 |  69.3 |
|         rug         | 59.91 | 66.59 |
|        field        |  25.6 | 44.29 |
|       armchair      | 39.19 | 50.46 |
|         seat        | 46.96 | 76.03 |
|        fence        | 32.57 | 56.66 |
|         desk        | 45.33 | 61.85 |
|         rock        | 34.49 | 46.53 |
|       wardrobe      |  41.7 | 63.21 |
|         lamp        | 62.54 | 74.78 |
|       bathtub       |  72.0 | 83.28 |
|       railing       | 29.18 | 41.78 |
|       cushion       | 56.08 | 66.69 |
|         base        |  22.2 | 46.33 |
|         box         | 20.45 | 32.54 |
|        column       | 34.91 | 47.71 |
|      signboard      | 32.78 | 48.17 |
|   chest of drawers  | 39.18 | 61.24 |
|       counter       | 11.74 | 15.96 |
|         sand        | 31.43 | 59.82 |
|         sink        | 68.37 | 81.87 |
|      skyscraper     | 47.19 | 59.17 |
|      fireplace      | 70.84 | 84.25 |
|     refrigerator    | 66.41 | 82.65 |
|      grandstand     | 16.81 | 25.32 |
|         path        | 14.87 | 24.55 |
|        stairs       | 19.81 | 25.01 |
|        runway       | 82.05 | 92.47 |
|         case        | 41.14 | 49.69 |
|      pool table     | 93.54 | 96.54 |
|        pillow       | 57.66 | 70.99 |
|     screen door     | 58.64 | 80.02 |
|       stairway      |  32.5 | 41.65 |
|        river        | 11.52 | 15.95 |
|        bridge       | 48.68 | 68.68 |
|       bookcase      | 26.43 |  41.3 |
|        blind        | 15.41 |  16.6 |
|     coffee table    | 59.23 | 76.99 |
|        toilet       | 85.97 | 89.52 |
|        flower       | 28.53 |  38.3 |
|         book        | 41.67 | 56.33 |
|         hill        | 10.26 | 26.68 |
|        bench        | 37.06 | 60.54 |
|      countertop     | 56.98 |  75.5 |
|        stove        | 72.18 | 81.75 |
|         palm        |  37.6 | 61.72 |
|    kitchen island   | 38.97 |  76.6 |
|       computer      | 63.77 |  68.4 |
|     swivel chair    | 39.09 | 56.81 |
|         boat        | 52.93 | 81.08 |
|         bar         | 30.96 | 39.47 |
|    arcade machine   | 23.22 |  28.5 |
|        hovel        |  6.78 |  7.98 |
|         bus         | 79.31 | 90.37 |
|        towel        | 58.84 | 71.93 |
|        light        | 55.06 | 73.13 |
|        truck        | 23.45 |  40.7 |
|        tower        | 47.59 | 65.38 |
|      chandelier     | 61.99 | 70.67 |
|        awning       | 25.91 | 37.33 |
|     streetlight     | 28.27 | 41.42 |
|        booth        | 16.79 | 20.39 |
| television receiver | 61.18 | 77.05 |
|       airplane      | 59.52 | 67.02 |
|      dirt track     |  0.35 |  0.6  |
|       apparel       | 35.18 | 53.66 |
|         pole        | 21.55 |  34.9 |
|         land        | 16.72 | 23.98 |
|      bannister      |  6.49 | 11.11 |
|      escalator      | 52.06 | 69.94 |
|       ottoman       | 44.41 | 73.04 |
|        bottle       | 13.12 | 16.09 |
|        buffet       | 39.43 | 46.91 |
|        poster       | 16.31 |  28.1 |
|        stage        |  9.64 | 12.87 |
|         van         | 42.44 | 54.43 |
|         ship        | 75.66 | 87.37 |
|       fountain      |  2.41 |  2.72 |
|    conveyer belt    | 66.48 | 73.86 |
|        canopy       | 17.97 | 25.26 |
|        washer       | 62.02 | 62.77 |
|      plaything      | 31.41 | 53.81 |
|    swimming pool    | 52.94 | 53.54 |
|        stool        | 38.89 | 57.96 |
|        barrel       | 59.38 | 71.83 |
|        basket       | 32.31 | 41.67 |
|      waterfall      | 41.82 | 56.99 |
|         tent        | 78.95 | 98.67 |
|         bag         | 13.12 | 18.95 |
|       minibike      | 29.58 | 41.07 |
|        cradle       | 86.69 |  96.4 |
|         oven        | 22.62 |  66.9 |
|         ball        | 44.48 | 58.46 |
|         food        | 47.91 |  57.9 |
|         step        | 18.46 | 26.03 |
|         tank        | 44.53 | 51.27 |
|      trade name     | 22.34 | 25.56 |
|      microwave      |  39.8 | 41.84 |
|         pot         | 45.78 | 56.74 |
|        animal       | 66.32 | 72.52 |
|       bicycle       | 36.08 | 69.71 |
|         lake        |  0.0  |  0.0  |
|      dishwasher     | 39.35 |  56.2 |
|        screen       | 53.06 | 66.16 |
|       blanket       | 18.63 | 25.12 |
|      sculpture      |  31.2 | 49.45 |
|         hood        | 54.83 | 62.92 |
|        sconce       | 47.31 | 61.93 |
|         vase        | 27.33 |  39.6 |
|    traffic light    |  33.0 | 57.77 |
|         tray        | 11.94 | 20.75 |
|        ashcan       | 34.02 | 58.17 |
|         fan         | 54.18 | 79.65 |
|         pier        |  15.0 | 40.21 |
|      crt screen     | 12.52 |  24.3 |
|        plate        | 49.83 | 70.03 |
|       monitor       | 54.13 | 69.13 |
|    bulletin board   | 34.33 | 38.31 |
|        shower       |  7.28 | 17.01 |
|       radiator      |  58.9 | 65.78 |
|        glass        | 13.78 | 15.03 |
|        clock        |  31.7 | 37.79 |
|         flag        | 33.73 | 45.39 |
+---------------------+-------+-------+
09/21 05:29:54 - mmengine - INFO - Iter(test) [2000/2000]    aAcc: 79.9700  mIoU: 43.7600  mAcc: 56.7400  data_time: 0.0019  time: 0.8827
Finished processing corruption type: motion_blur
Processing corruption type: zoom_blur
09/21 05:29:58 - mmengine - INFO - 
------------------------------------------------------------
System environment:
    sys.platform: linux
    Python: 3.10.13 | packaged by conda-forge | (main, Dec 23 2023, 15:36:39) [GCC 12.3.0]
    CUDA available: True
    MUSA available: False
    numpy_random_seed: 95459384
    GPU 0: Tesla V100-SXM2-32GB
    CUDA_HOME: /opt/bwhpc/common/devel/cuda/11.7
    NVCC: Cuda compilation tools, release 11.7, V11.7.99
    GCC: gcc (GCC) 8.5.0 20210514 (Red Hat 8.5.0-18)
    PyTorch: 1.13.1
    PyTorch compiling details: PyTorch built with:
  - GCC 9.3
  - C++ Version: 201402
  - Intel(R) oneAPI Math Kernel Library Version 2023.1-Product Build 20230303 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v2.6.0 (Git Hash 52b5f107dd9cf10910aaa19cb47f3abf9b349815)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - LAPACK is enabled (usually provided by MKL)
  - NNPACK is enabled
  - CPU capability usage: AVX2
  - CUDA Runtime 11.7
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_61,code=sm_61;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86;-gencode;arch=compute_37,code=compute_37
  - CuDNN 8.5
  - Magma 2.6.1
  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.7, CUDNN_VERSION=8.5.0, CXX_COMPILER=/opt/rh/devtoolset-9/root/usr/bin/c++, CXX_FLAGS= -fabi-version=11 -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -DEDGE_PROFILER_USE_KINETO -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Werror=non-virtual-dtor -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wunused-local-typedefs -Wno-unused-parameter -Wno-unused-function -Wno-unused-result -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Werror=cast-function-type -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.13.1, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, USE_ROCM=OFF, 

    TorchVision: 0.14.1
    OpenCV: 3.4.18
    MMEngine: 0.10.4

Runtime environment:
    cudnn_benchmark: True
    mp_cfg: {'mp_start_method': 'fork', 'opencv_num_threads': 0}
    dist_cfg: {'backend': 'nccl'}
    seed: 95459384
    Distributed launcher: none
    Distributed training: False
    GPU number: 1
------------------------------------------------------------

09/21 05:29:58 - mmengine - INFO - Config:
auto_scale_lr = dict(base_batch_size=16, enable=False)
crop_size = (
    512,
    512,
)
custom_imports = dict(allow_failed_imports=False, imports='mmdet.models')
data_root = 'data/ade/ADEChallengeData2016'
dataset_type = 'ADE20KDataset'
default_hooks = dict(
    checkpoint=dict(
        by_epoch=False, interval=5000, save_best='mIoU',
        type='CheckpointHook'),
    logger=dict(interval=50, log_metric_by_epoch=False, type='LoggerHook'),
    param_scheduler=dict(type='ParamSchedulerHook'),
    sampler_seed=dict(type='DistSamplerSeedHook'),
    timer=dict(type='IterTimerHook'),
    visualization=dict(type='SegVisualizationHook'))
default_scope = 'mmseg'
embed_multi = dict(decay_mult=0.0, lr_mult=1.0)
env_cfg = dict(
    cudnn_benchmark=True,
    dist_cfg=dict(backend='nccl'),
    mp_cfg=dict(mp_start_method='fork', opencv_num_threads=0))
img_ratios = [
    0.5,
    0.75,
    1.0,
    1.25,
    1.5,
    1.75,
]
launcher = 'none'
load_from = '../checkpoint_files/ade20k/mask2former/mask2former_r101_8xb2-160k_ade20k-512x512_20221203_233905-b7135890.pth'
log_level = 'INFO'
log_processor = dict(by_epoch=False)
model = dict(
    backbone=dict(
        deep_stem=False,
        depth=101,
        frozen_stages=-1,
        init_cfg=dict(checkpoint='torchvision://resnet101', type='Pretrained'),
        norm_cfg=dict(requires_grad=False, type='SyncBN'),
        num_stages=4,
        out_indices=(
            0,
            1,
            2,
            3,
        ),
        style='pytorch',
        type='ResNet'),
    data_preprocessor=dict(
        bgr_to_rgb=True,
        corruption='zoom_blur',
        mean=[
            123.675,
            116.28,
            103.53,
        ],
        pad_val=0,
        seg_pad_val=255,
        size=(
            512,
            512,
        ),
        std=[
            58.395,
            57.12,
            57.375,
        ],
        test_cfg=dict(size_divisor=32),
        type='SegDataPreProcessor'),
    decode_head=dict(
        align_corners=False,
        enforce_decoder_input_project=False,
        feat_channels=256,
        in_channels=[
            256,
            512,
            1024,
            2048,
        ],
        loss_cls=dict(
            class_weight=[
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                0.1,
            ],
            loss_weight=2.0,
            reduction='mean',
            type='mmdet.CrossEntropyLoss',
            use_sigmoid=False),
        loss_dice=dict(
            activate=True,
            eps=1.0,
            loss_weight=5.0,
            naive_dice=True,
            reduction='mean',
            type='mmdet.DiceLoss',
            use_sigmoid=True),
        loss_mask=dict(
            loss_weight=5.0,
            reduction='mean',
            type='mmdet.CrossEntropyLoss',
            use_sigmoid=True),
        num_classes=150,
        num_queries=100,
        num_transformer_feat_level=3,
        out_channels=256,
        pixel_decoder=dict(
            act_cfg=dict(type='ReLU'),
            encoder=dict(
                init_cfg=None,
                layer_cfg=dict(
                    ffn_cfg=dict(
                        act_cfg=dict(inplace=True, type='ReLU'),
                        embed_dims=256,
                        feedforward_channels=1024,
                        ffn_drop=0.0,
                        num_fcs=2),
                    self_attn_cfg=dict(
                        batch_first=True,
                        dropout=0.0,
                        embed_dims=256,
                        im2col_step=64,
                        init_cfg=None,
                        norm_cfg=None,
                        num_heads=8,
                        num_levels=3,
                        num_points=4)),
                num_layers=6),
            init_cfg=None,
            norm_cfg=dict(num_groups=32, type='GN'),
            num_outs=3,
            positional_encoding=dict(normalize=True, num_feats=128),
            type='mmdet.MSDeformAttnPixelDecoder'),
        positional_encoding=dict(normalize=True, num_feats=128),
        strides=[
            4,
            8,
            16,
            32,
        ],
        train_cfg=dict(
            assigner=dict(
                match_costs=[
                    dict(type='mmdet.ClassificationCost', weight=2.0),
                    dict(
                        type='mmdet.CrossEntropyLossCost',
                        use_sigmoid=True,
                        weight=5.0),
                    dict(
                        eps=1.0,
                        pred_act=True,
                        type='mmdet.DiceCost',
                        weight=5.0),
                ],
                type='mmdet.HungarianAssigner'),
            importance_sample_ratio=0.75,
            num_points=12544,
            oversample_ratio=3.0,
            sampler=dict(type='mmdet.MaskPseudoSampler')),
        transformer_decoder=dict(
            init_cfg=None,
            layer_cfg=dict(
                cross_attn_cfg=dict(
                    attn_drop=0.0,
                    batch_first=True,
                    dropout_layer=None,
                    embed_dims=256,
                    num_heads=8,
                    proj_drop=0.0),
                ffn_cfg=dict(
                    act_cfg=dict(inplace=True, type='ReLU'),
                    add_identity=True,
                    dropout_layer=None,
                    embed_dims=256,
                    feedforward_channels=2048,
                    ffn_drop=0.0,
                    num_fcs=2),
                self_attn_cfg=dict(
                    attn_drop=0.0,
                    batch_first=True,
                    dropout_layer=None,
                    embed_dims=256,
                    num_heads=8,
                    proj_drop=0.0)),
            num_layers=9,
            return_intermediate=True),
        type='Mask2FormerHead'),
    test_cfg=dict(mode='whole'),
    train_cfg=dict(),
    type='EncoderDecoder')
num_classes = 150
optim_wrapper = dict(
    clip_grad=dict(max_norm=0.01, norm_type=2),
    optimizer=dict(
        betas=(
            0.9,
            0.999,
        ),
        eps=1e-08,
        lr=0.0001,
        type='AdamW',
        weight_decay=0.05),
    paramwise_cfg=dict(
        custom_keys=dict(
            backbone=dict(decay_mult=1.0, lr_mult=0.1),
            level_embed=dict(decay_mult=0.0, lr_mult=1.0),
            query_embed=dict(decay_mult=0.0, lr_mult=1.0),
            query_feat=dict(decay_mult=0.0, lr_mult=1.0)),
        norm_decay_mult=0.0),
    type='OptimWrapper')
optimizer = dict(
    betas=(
        0.9,
        0.999,
    ),
    eps=1e-08,
    lr=0.0001,
    type='AdamW',
    weight_decay=0.05)
param_scheduler = [
    dict(
        begin=0,
        by_epoch=False,
        end=160000,
        eta_min=0,
        power=0.9,
        type='PolyLR'),
]
resume = False
test_cfg = dict(type='TestLoop')
test_dataloader = dict(
    batch_size=1,
    dataset=dict(
        data_prefix=dict(
            img_path='images/validation',
            seg_map_path='annotations/validation'),
        data_root='data/ade/ADEChallengeData2016',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(keep_ratio=True, scale=(
                2048,
                512,
            ), type='Resize'),
            dict(reduce_zero_label=True, type='LoadAnnotations'),
            dict(type='PackSegInputs'),
        ],
        type='ADE20KDataset'),
    num_workers=4,
    persistent_workers=True,
    sampler=dict(shuffle=False, type='DefaultSampler'))
test_evaluator = dict(
    iou_metrics=[
        'mIoU',
    ], type='IoUMetric')
test_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(keep_ratio=True, scale=(
        2048,
        512,
    ), type='Resize'),
    dict(reduce_zero_label=True, type='LoadAnnotations'),
    dict(type='PackSegInputs'),
]
train_cfg = dict(
    max_iters=160000, type='IterBasedTrainLoop', val_interval=5000)
train_dataloader = dict(
    batch_size=2,
    dataset=dict(
        data_prefix=dict(
            img_path='images/training', seg_map_path='annotations/training'),
        data_root='data/ade/ADEChallengeData2016',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(reduce_zero_label=True, type='LoadAnnotations'),
            dict(
                max_size=2048,
                resize_type='ResizeShortestEdge',
                scales=[
                    256,
                    307,
                    358,
                    409,
                    460,
                    512,
                    563,
                    614,
                    665,
                    716,
                    768,
                    819,
                    870,
                    921,
                    972,
                    1024,
                ],
                type='RandomChoiceResize'),
            dict(
                cat_max_ratio=0.75, crop_size=(
                    512,
                    512,
                ), type='RandomCrop'),
            dict(prob=0.5, type='RandomFlip'),
            dict(type='PhotoMetricDistortion'),
            dict(type='PackSegInputs'),
        ],
        type='ADE20KDataset'),
    num_workers=4,
    persistent_workers=True,
    sampler=dict(shuffle=True, type='InfiniteSampler'))
train_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(reduce_zero_label=True, type='LoadAnnotations'),
    dict(
        max_size=2048,
        resize_type='ResizeShortestEdge',
        scales=[
            256,
            307,
            358,
            409,
            460,
            512,
            563,
            614,
            665,
            716,
            768,
            819,
            870,
            921,
            972,
            1024,
        ],
        type='RandomChoiceResize'),
    dict(cat_max_ratio=0.75, crop_size=(
        512,
        512,
    ), type='RandomCrop'),
    dict(prob=0.5, type='RandomFlip'),
    dict(type='PhotoMetricDistortion'),
    dict(type='PackSegInputs'),
]
tta_model = dict(type='SegTTAModel')
tta_pipeline = [
    dict(backend_args=None, type='LoadImageFromFile'),
    dict(
        transforms=[
            [
                dict(keep_ratio=True, scale_factor=0.5, type='Resize'),
                dict(keep_ratio=True, scale_factor=0.75, type='Resize'),
                dict(keep_ratio=True, scale_factor=1.0, type='Resize'),
                dict(keep_ratio=True, scale_factor=1.25, type='Resize'),
                dict(keep_ratio=True, scale_factor=1.5, type='Resize'),
                dict(keep_ratio=True, scale_factor=1.75, type='Resize'),
            ],
            [
                dict(direction='horizontal', prob=0.0, type='RandomFlip'),
                dict(direction='horizontal', prob=1.0, type='RandomFlip'),
            ],
            [
                dict(type='LoadAnnotations'),
            ],
            [
                dict(type='PackSegInputs'),
            ],
        ],
        type='TestTimeAug'),
]
val_cfg = dict(type='ValLoop')
val_dataloader = dict(
    batch_size=1,
    dataset=dict(
        data_prefix=dict(
            img_path='images/validation',
            seg_map_path='annotations/validation'),
        data_root='data/ade/ADEChallengeData2016',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(keep_ratio=True, scale=(
                2048,
                512,
            ), type='Resize'),
            dict(reduce_zero_label=True, type='LoadAnnotations'),
            dict(type='PackSegInputs'),
        ],
        type='ADE20KDataset'),
    num_workers=4,
    persistent_workers=True,
    sampler=dict(shuffle=False, type='DefaultSampler'))
val_evaluator = dict(
    iou_metrics=[
        'mIoU',
    ], type='IoUMetric')
vis_backends = [
    dict(type='LocalVisBackend'),
]
visualizer = dict(
    name='visualizer',
    type='SegLocalVisualizer',
    vis_backends=[
        dict(type='LocalVisBackend'),
    ])
work_dir = '../corruptions/work_dirs/ade20k/mask2former/mask2former_r101_8xb2-160k_ade20k-512x512/zoom_blur'

09/21 05:30:01 - mmengine - INFO - Distributed training is not used, all SyncBatchNorm (SyncBN) layers in the model will be automatically reverted to BatchNormXd layers if they are used.
09/21 05:30:01 - mmengine - INFO - Hooks will be executed in the following order:
before_run:
(VERY_HIGH   ) RuntimeInfoHook                    
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
before_train:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_train_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(NORMAL      ) DistSamplerSeedHook                
 -------------------- 
before_train_iter:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_train_iter:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(NORMAL      ) SegVisualizationHook               
(BELOW_NORMAL) LoggerHook                         
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
after_train_epoch:
(NORMAL      ) IterTimerHook                      
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_val:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
before_val_epoch:
(NORMAL      ) IterTimerHook                      
 -------------------- 
before_val_iter:
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_val_iter:
(NORMAL      ) IterTimerHook                      
(NORMAL      ) SegVisualizationHook               
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_val_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
after_val:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
after_train:
(VERY_HIGH   ) RuntimeInfoHook                    
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_test:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
before_test_epoch:
(NORMAL      ) IterTimerHook                      
 -------------------- 
before_test_iter:
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_test_iter:
(NORMAL      ) IterTimerHook                      
(NORMAL      ) SegVisualizationHook               
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_test_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_test:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
after_run:
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
09/21 05:30:01 - mmengine - WARNING - The prefix is not set in metric class IoUMetric.
Loads checkpoint by local backend from path: ../checkpoint_files/ade20k/mask2former/mask2former_r101_8xb2-160k_ade20k-512x512_20221203_233905-b7135890.pth
09/21 05:30:02 - mmengine - INFO - Load checkpoint from ../checkpoint_files/ade20k/mask2former/mask2former_r101_8xb2-160k_ade20k-512x512_20221203_233905-b7135890.pth
09/21 05:31:40 - mmengine - INFO - Iter(test) [  50/2000]    eta: 1:03:28  time: 1.6362  data_time: 0.0015  memory: 17239  
09/21 05:32:28 - mmengine - INFO - Iter(test) [ 100/2000]    eta: 0:46:17  time: 1.1981  data_time: 0.0015  memory: 17230  
09/21 05:33:05 - mmengine - INFO - Iter(test) [ 150/2000]    eta: 0:37:30  time: 0.7337  data_time: 0.0014  memory: 943  
09/21 05:33:51 - mmengine - INFO - Iter(test) [ 200/2000]    eta: 0:34:18  time: 0.7208  data_time: 0.0014  memory: 17287  
09/21 05:34:32 - mmengine - INFO - Iter(test) [ 250/2000]    eta: 0:31:29  time: 0.7103  data_time: 0.0014  memory: 17293  
09/21 05:35:11 - mmengine - INFO - Iter(test) [ 300/2000]    eta: 0:29:12  time: 0.7366  data_time: 0.0016  memory: 17234  
09/21 05:35:56 - mmengine - INFO - Iter(test) [ 350/2000]    eta: 0:27:47  time: 0.6952  data_time: 0.0014  memory: 17237  
09/21 05:36:35 - mmengine - INFO - Iter(test) [ 400/2000]    eta: 0:26:13  time: 0.7409  data_time: 0.0014  memory: 17220  
09/21 05:37:08 - mmengine - INFO - Iter(test) [ 450/2000]    eta: 0:24:27  time: 0.6575  data_time: 0.0014  memory: 955  
09/21 05:37:44 - mmengine - INFO - Iter(test) [ 500/2000]    eta: 0:23:04  time: 0.6886  data_time: 0.0014  memory: 943  
09/21 05:38:22 - mmengine - INFO - Iter(test) [ 550/2000]    eta: 0:21:56  time: 0.7531  data_time: 0.0015  memory: 1055  
09/21 05:38:57 - mmengine - INFO - Iter(test) [ 600/2000]    eta: 0:20:48  time: 0.7498  data_time: 0.0016  memory: 1053  
09/21 05:39:38 - mmengine - INFO - Iter(test) [ 650/2000]    eta: 0:19:54  time: 1.1951  data_time: 0.0014  memory: 17241  
09/21 05:40:20 - mmengine - INFO - Iter(test) [ 700/2000]    eta: 0:19:06  time: 0.7469  data_time: 0.0015  memory: 17235  
09/21 05:40:56 - mmengine - INFO - Iter(test) [ 750/2000]    eta: 0:18:09  time: 0.7128  data_time: 0.0014  memory: 1112  
09/21 05:41:30 - mmengine - INFO - Iter(test) [ 800/2000]    eta: 0:17:10  time: 0.7057  data_time: 0.0015  memory: 943  
09/21 05:42:05 - mmengine - INFO - Iter(test) [ 850/2000]    eta: 0:16:18  time: 0.7026  data_time: 0.0015  memory: 915  
09/21 05:42:39 - mmengine - INFO - Iter(test) [ 900/2000]    eta: 0:15:24  time: 0.6561  data_time: 0.0014  memory: 998  
09/21 05:43:15 - mmengine - INFO - Iter(test) [ 950/2000]    eta: 0:14:36  time: 0.7107  data_time: 0.0015  memory: 1027  
09/21 05:43:49 - mmengine - INFO - Iter(test) [1000/2000]    eta: 0:13:46  time: 0.6817  data_time: 0.0014  memory: 1027  
09/21 05:44:31 - mmengine - INFO - Iter(test) [1050/2000]    eta: 0:13:05  time: 0.7418  data_time: 0.0015  memory: 17242  
09/21 05:45:06 - mmengine - INFO - Iter(test) [1100/2000]    eta: 0:12:19  time: 0.6918  data_time: 0.0015  memory: 1024  
09/21 05:45:41 - mmengine - INFO - Iter(test) [1150/2000]    eta: 0:11:34  time: 0.7152  data_time: 0.0015  memory: 996  
09/21 05:46:18 - mmengine - INFO - Iter(test) [1200/2000]    eta: 0:10:50  time: 0.7060  data_time: 0.0014  memory: 1900  
09/21 05:46:57 - mmengine - INFO - Iter(test) [1250/2000]    eta: 0:10:08  time: 0.6999  data_time: 0.0014  memory: 17230  
09/21 05:47:30 - mmengine - INFO - Iter(test) [1300/2000]    eta: 0:09:24  time: 0.7150  data_time: 0.0014  memory: 943  
09/21 05:48:05 - mmengine - INFO - Iter(test) [1350/2000]    eta: 0:08:41  time: 0.6524  data_time: 0.0014  memory: 943  
09/21 05:48:41 - mmengine - INFO - Iter(test) [1400/2000]    eta: 0:07:59  time: 0.7448  data_time: 0.0014  memory: 1025  
09/21 05:49:14 - mmengine - INFO - Iter(test) [1450/2000]    eta: 0:07:16  time: 0.7446  data_time: 0.0014  memory: 1027  
09/21 05:49:49 - mmengine - INFO - Iter(test) [1500/2000]    eta: 0:06:35  time: 0.6578  data_time: 0.0014  memory: 941  
09/21 05:50:26 - mmengine - INFO - Iter(test) [1550/2000]    eta: 0:05:55  time: 0.7156  data_time: 0.0014  memory: 1027  
09/21 05:51:01 - mmengine - INFO - Iter(test) [1600/2000]    eta: 0:05:14  time: 0.7057  data_time: 0.0015  memory: 915  
09/21 05:51:40 - mmengine - INFO - Iter(test) [1650/2000]    eta: 0:04:35  time: 0.6615  data_time: 0.0014  memory: 17237  
09/21 05:52:16 - mmengine - INFO - Iter(test) [1700/2000]    eta: 0:03:55  time: 0.7236  data_time: 0.0016  memory: 1024  
09/21 05:52:52 - mmengine - INFO - Iter(test) [1750/2000]    eta: 0:03:15  time: 0.7075  data_time: 0.0014  memory: 1052  
09/21 05:53:26 - mmengine - INFO - Iter(test) [1800/2000]    eta: 0:02:35  time: 0.7131  data_time: 0.0015  memory: 943  
09/21 05:54:02 - mmengine - INFO - Iter(test) [1850/2000]    eta: 0:01:56  time: 0.7150  data_time: 0.0015  memory: 859  
09/21 05:54:36 - mmengine - INFO - Iter(test) [1900/2000]    eta: 0:01:17  time: 0.7015  data_time: 0.0015  memory: 1084  
09/21 05:55:11 - mmengine - INFO - Iter(test) [1950/2000]    eta: 0:00:38  time: 0.6894  data_time: 0.0014  memory: 1331  
09/21 05:55:45 - mmengine - INFO - Iter(test) [2000/2000]    eta: 0:00:00  time: 0.6355  data_time: 0.0014  memory: 1110  
09/21 05:55:45 - mmengine - INFO - per class results:
09/21 05:55:45 - mmengine - INFO - 
+---------------------+-------+-------+
|        Class        |  IoU  |  Acc  |
+---------------------+-------+-------+
|         wall        | 55.34 | 80.33 |
|       building      | 62.21 | 76.72 |
|         sky         | 84.02 | 86.36 |
|        floor        | 55.03 | 77.97 |
|         tree        | 40.08 | 48.31 |
|       ceiling       | 62.91 | 87.93 |
|         road        | 58.66 | 64.22 |
|         bed         | 67.61 | 84.91 |
|      windowpane     | 40.53 | 65.32 |
|        grass        |  45.9 | 61.23 |
|       cabinet       |  38.4 | 46.77 |
|       sidewalk      | 27.43 | 34.24 |
|        person       |  52.6 | 63.02 |
|        earth        | 17.72 | 28.09 |
|         door        | 20.06 | 24.57 |
|        table        | 35.61 | 51.66 |
|       mountain      | 29.78 | 44.72 |
|        plant        | 18.54 | 36.73 |
|       curtain       | 36.47 | 58.64 |
|        chair        | 27.91 | 35.12 |
|         car         | 57.81 | 70.28 |
|        water        | 24.91 | 80.37 |
|       painting      | 43.66 | 58.57 |
|         sofa        | 42.03 | 59.07 |
|        shelf        | 25.75 | 46.72 |
|        house        | 17.16 | 18.33 |
|         sea         |  30.2 | 41.22 |
|        mirror       | 43.72 | 50.06 |
|         rug         | 12.18 |  12.4 |
|        field        | 21.25 | 53.01 |
|       armchair      | 17.04 | 24.63 |
|         seat        | 27.34 | 56.38 |
|        fence        |  9.19 | 17.11 |
|         desk        |  30.7 | 39.49 |
|         rock        |  9.98 | 10.42 |
|       wardrobe      |  26.1 | 32.04 |
|         lamp        | 36.28 | 47.45 |
|       bathtub       | 50.14 |  78.5 |
|       railing       |  9.88 | 12.66 |
|       cushion       | 31.76 | 35.89 |
|         base        | 16.41 | 28.41 |
|         box         |  1.62 |  1.89 |
|        column       | 20.17 | 25.97 |
|      signboard      | 14.95 | 19.64 |
|   chest of drawers  | 21.32 | 38.69 |
|       counter       | 14.98 | 26.55 |
|         sand        |  9.07 | 23.68 |
|         sink        | 41.87 | 63.47 |
|      skyscraper     |  21.3 | 32.57 |
|      fireplace      | 50.41 | 66.69 |
|     refrigerator    | 51.32 | 60.58 |
|      grandstand     | 12.06 |  23.8 |
|         path        |  15.7 | 18.97 |
|        stairs       |  2.68 |  3.06 |
|        runway       | 68.11 | 92.12 |
|         case        | 24.44 | 35.73 |
|      pool table     | 66.05 | 87.71 |
|        pillow       | 40.34 | 53.69 |
|     screen door     | 40.37 | 56.71 |
|       stairway      | 19.88 | 27.68 |
|        river        |  0.51 |  0.54 |
|        bridge       | 10.69 | 37.94 |
|       bookcase      | 11.59 | 13.13 |
|        blind        | 11.86 | 15.15 |
|     coffee table    | 41.35 | 53.54 |
|        toilet       | 65.48 |  77.3 |
|        flower       | 18.67 |  22.8 |
|         book        |  5.6  |  6.1  |
|         hill        |  2.5  |  6.11 |
|        bench        | 22.38 | 39.62 |
|      countertop     | 43.15 | 57.78 |
|        stove        | 47.69 | 58.15 |
|         palm        | 12.55 | 30.54 |
|    kitchen island   | 23.17 | 63.35 |
|       computer      | 31.86 | 34.88 |
|     swivel chair    | 14.64 | 17.44 |
|         boat        |  8.43 | 12.33 |
|         bar         | 11.39 |  14.0 |
|    arcade machine   | 11.03 | 15.09 |
|        hovel        |  7.47 |  7.99 |
|         bus         | 52.92 | 72.48 |
|        towel        | 23.67 | 32.29 |
|        light        | 25.46 | 38.82 |
|        truck        |  0.02 |  0.02 |
|        tower        | 31.68 |  34.6 |
|      chandelier     | 31.18 | 36.02 |
|        awning       |  9.75 | 10.84 |
|     streetlight     |  4.19 |  4.88 |
|        booth        |  9.67 |  9.76 |
| television receiver | 36.18 | 42.83 |
|       airplane      | 32.81 | 58.74 |
|      dirt track     |  8.27 | 17.41 |
|       apparel       |  10.9 | 23.67 |
|         pole        |  4.38 |  5.35 |
|         land        |  0.09 |  0.14 |
|      bannister      |  1.74 |  5.53 |
|      escalator      |  21.1 | 71.85 |
|       ottoman       | 29.86 |  39.9 |
|        bottle       |  1.88 |  2.01 |
|        buffet       |  0.0  |  0.0  |
|        poster       |  0.05 |  0.08 |
|        stage        |  0.06 |  0.11 |
|         van         |  1.5  |  1.8  |
|         ship        |  0.0  |  0.0  |
|       fountain      |  0.0  |  0.0  |
|    conveyer belt    | 28.31 | 63.06 |
|        canopy       |  9.11 | 12.44 |
|        washer       | 60.57 | 67.14 |
|      plaything      |  2.1  |  2.53 |
|    swimming pool    | 22.15 | 37.65 |
|        stool        | 21.83 | 25.19 |
|        barrel       |  0.0  |  0.0  |
|        basket       |  8.49 | 11.13 |
|      waterfall      |  6.74 | 18.59 |
|         tent        | 18.19 | 19.55 |
|         bag         |  1.63 |  1.97 |
|       minibike      |  8.0  |  8.26 |
|        cradle       |  48.7 | 63.51 |
|         oven        | 20.43 | 31.59 |
|         ball        |  9.36 | 15.27 |
|         food        | 13.55 | 16.41 |
|         step        |  5.79 |  9.7  |
|         tank        | 22.56 | 28.36 |
|      trade name     | 16.93 | 18.78 |
|      microwave      | 21.65 | 23.56 |
|         pot         |  6.7  |  7.88 |
|        animal       | 43.32 | 54.39 |
|       bicycle       |  6.89 | 10.91 |
|         lake        |  0.0  |  0.0  |
|      dishwasher     | 36.06 | 52.31 |
|        screen       | 26.13 | 55.97 |
|       blanket       |  3.92 |  6.21 |
|      sculpture      | 15.69 | 33.89 |
|         hood        | 40.77 | 57.55 |
|        sconce       | 19.47 | 34.41 |
|         vase        | 16.13 | 21.57 |
|    traffic light    |  5.42 |  5.82 |
|         tray        |  1.99 |  5.18 |
|        ashcan       |  8.51 | 10.09 |
|         fan         |  30.9 | 50.59 |
|         pier        | 32.43 | 37.11 |
|      crt screen     |  0.0  |  0.0  |
|        plate        | 17.53 | 21.07 |
|       monitor       |  1.61 |  1.78 |
|    bulletin board   | 13.76 | 13.88 |
|        shower       |  0.37 |  2.22 |
|       radiator      | 23.45 | 40.34 |
|        glass        |  1.38 |  1.45 |
|        clock        |  6.76 |  7.16 |
|         flag        | 11.62 | 13.25 |
+---------------------+-------+-------+
09/21 05:55:45 - mmengine - INFO - Iter(test) [2000/2000]    aAcc: 63.9900  mIoU: 23.0200  mAcc: 32.6800  data_time: 0.0016  time: 0.7714
Finished processing corruption type: zoom_blur
Processing corruption type: snow
09/21 05:55:50 - mmengine - INFO - 
------------------------------------------------------------
System environment:
    sys.platform: linux
    Python: 3.10.13 | packaged by conda-forge | (main, Dec 23 2023, 15:36:39) [GCC 12.3.0]
    CUDA available: True
    MUSA available: False
    numpy_random_seed: 2145707430
    GPU 0: Tesla V100-SXM2-32GB
    CUDA_HOME: /opt/bwhpc/common/devel/cuda/11.7
    NVCC: Cuda compilation tools, release 11.7, V11.7.99
    GCC: gcc (GCC) 8.5.0 20210514 (Red Hat 8.5.0-18)
    PyTorch: 1.13.1
    PyTorch compiling details: PyTorch built with:
  - GCC 9.3
  - C++ Version: 201402
  - Intel(R) oneAPI Math Kernel Library Version 2023.1-Product Build 20230303 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v2.6.0 (Git Hash 52b5f107dd9cf10910aaa19cb47f3abf9b349815)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - LAPACK is enabled (usually provided by MKL)
  - NNPACK is enabled
  - CPU capability usage: AVX2
  - CUDA Runtime 11.7
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_61,code=sm_61;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86;-gencode;arch=compute_37,code=compute_37
  - CuDNN 8.5
  - Magma 2.6.1
  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.7, CUDNN_VERSION=8.5.0, CXX_COMPILER=/opt/rh/devtoolset-9/root/usr/bin/c++, CXX_FLAGS= -fabi-version=11 -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -DEDGE_PROFILER_USE_KINETO -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Werror=non-virtual-dtor -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wunused-local-typedefs -Wno-unused-parameter -Wno-unused-function -Wno-unused-result -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Werror=cast-function-type -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.13.1, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, USE_ROCM=OFF, 

    TorchVision: 0.14.1
    OpenCV: 3.4.18
    MMEngine: 0.10.4

Runtime environment:
    cudnn_benchmark: True
    mp_cfg: {'mp_start_method': 'fork', 'opencv_num_threads': 0}
    dist_cfg: {'backend': 'nccl'}
    seed: 2145707430
    Distributed launcher: none
    Distributed training: False
    GPU number: 1
------------------------------------------------------------

09/21 05:55:50 - mmengine - INFO - Config:
auto_scale_lr = dict(base_batch_size=16, enable=False)
crop_size = (
    512,
    512,
)
custom_imports = dict(allow_failed_imports=False, imports='mmdet.models')
data_root = 'data/ade/ADEChallengeData2016'
dataset_type = 'ADE20KDataset'
default_hooks = dict(
    checkpoint=dict(
        by_epoch=False, interval=5000, save_best='mIoU',
        type='CheckpointHook'),
    logger=dict(interval=50, log_metric_by_epoch=False, type='LoggerHook'),
    param_scheduler=dict(type='ParamSchedulerHook'),
    sampler_seed=dict(type='DistSamplerSeedHook'),
    timer=dict(type='IterTimerHook'),
    visualization=dict(type='SegVisualizationHook'))
default_scope = 'mmseg'
embed_multi = dict(decay_mult=0.0, lr_mult=1.0)
env_cfg = dict(
    cudnn_benchmark=True,
    dist_cfg=dict(backend='nccl'),
    mp_cfg=dict(mp_start_method='fork', opencv_num_threads=0))
img_ratios = [
    0.5,
    0.75,
    1.0,
    1.25,
    1.5,
    1.75,
]
launcher = 'none'
load_from = '../checkpoint_files/ade20k/mask2former/mask2former_r101_8xb2-160k_ade20k-512x512_20221203_233905-b7135890.pth'
log_level = 'INFO'
log_processor = dict(by_epoch=False)
model = dict(
    backbone=dict(
        deep_stem=False,
        depth=101,
        frozen_stages=-1,
        init_cfg=dict(checkpoint='torchvision://resnet101', type='Pretrained'),
        norm_cfg=dict(requires_grad=False, type='SyncBN'),
        num_stages=4,
        out_indices=(
            0,
            1,
            2,
            3,
        ),
        style='pytorch',
        type='ResNet'),
    data_preprocessor=dict(
        bgr_to_rgb=True,
        corruption='snow',
        mean=[
            123.675,
            116.28,
            103.53,
        ],
        pad_val=0,
        seg_pad_val=255,
        size=(
            512,
            512,
        ),
        std=[
            58.395,
            57.12,
            57.375,
        ],
        test_cfg=dict(size_divisor=32),
        type='SegDataPreProcessor'),
    decode_head=dict(
        align_corners=False,
        enforce_decoder_input_project=False,
        feat_channels=256,
        in_channels=[
            256,
            512,
            1024,
            2048,
        ],
        loss_cls=dict(
            class_weight=[
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                0.1,
            ],
            loss_weight=2.0,
            reduction='mean',
            type='mmdet.CrossEntropyLoss',
            use_sigmoid=False),
        loss_dice=dict(
            activate=True,
            eps=1.0,
            loss_weight=5.0,
            naive_dice=True,
            reduction='mean',
            type='mmdet.DiceLoss',
            use_sigmoid=True),
        loss_mask=dict(
            loss_weight=5.0,
            reduction='mean',
            type='mmdet.CrossEntropyLoss',
            use_sigmoid=True),
        num_classes=150,
        num_queries=100,
        num_transformer_feat_level=3,
        out_channels=256,
        pixel_decoder=dict(
            act_cfg=dict(type='ReLU'),
            encoder=dict(
                init_cfg=None,
                layer_cfg=dict(
                    ffn_cfg=dict(
                        act_cfg=dict(inplace=True, type='ReLU'),
                        embed_dims=256,
                        feedforward_channels=1024,
                        ffn_drop=0.0,
                        num_fcs=2),
                    self_attn_cfg=dict(
                        batch_first=True,
                        dropout=0.0,
                        embed_dims=256,
                        im2col_step=64,
                        init_cfg=None,
                        norm_cfg=None,
                        num_heads=8,
                        num_levels=3,
                        num_points=4)),
                num_layers=6),
            init_cfg=None,
            norm_cfg=dict(num_groups=32, type='GN'),
            num_outs=3,
            positional_encoding=dict(normalize=True, num_feats=128),
            type='mmdet.MSDeformAttnPixelDecoder'),
        positional_encoding=dict(normalize=True, num_feats=128),
        strides=[
            4,
            8,
            16,
            32,
        ],
        train_cfg=dict(
            assigner=dict(
                match_costs=[
                    dict(type='mmdet.ClassificationCost', weight=2.0),
                    dict(
                        type='mmdet.CrossEntropyLossCost',
                        use_sigmoid=True,
                        weight=5.0),
                    dict(
                        eps=1.0,
                        pred_act=True,
                        type='mmdet.DiceCost',
                        weight=5.0),
                ],
                type='mmdet.HungarianAssigner'),
            importance_sample_ratio=0.75,
            num_points=12544,
            oversample_ratio=3.0,
            sampler=dict(type='mmdet.MaskPseudoSampler')),
        transformer_decoder=dict(
            init_cfg=None,
            layer_cfg=dict(
                cross_attn_cfg=dict(
                    attn_drop=0.0,
                    batch_first=True,
                    dropout_layer=None,
                    embed_dims=256,
                    num_heads=8,
                    proj_drop=0.0),
                ffn_cfg=dict(
                    act_cfg=dict(inplace=True, type='ReLU'),
                    add_identity=True,
                    dropout_layer=None,
                    embed_dims=256,
                    feedforward_channels=2048,
                    ffn_drop=0.0,
                    num_fcs=2),
                self_attn_cfg=dict(
                    attn_drop=0.0,
                    batch_first=True,
                    dropout_layer=None,
                    embed_dims=256,
                    num_heads=8,
                    proj_drop=0.0)),
            num_layers=9,
            return_intermediate=True),
        type='Mask2FormerHead'),
    test_cfg=dict(mode='whole'),
    train_cfg=dict(),
    type='EncoderDecoder')
num_classes = 150
optim_wrapper = dict(
    clip_grad=dict(max_norm=0.01, norm_type=2),
    optimizer=dict(
        betas=(
            0.9,
            0.999,
        ),
        eps=1e-08,
        lr=0.0001,
        type='AdamW',
        weight_decay=0.05),
    paramwise_cfg=dict(
        custom_keys=dict(
            backbone=dict(decay_mult=1.0, lr_mult=0.1),
            level_embed=dict(decay_mult=0.0, lr_mult=1.0),
            query_embed=dict(decay_mult=0.0, lr_mult=1.0),
            query_feat=dict(decay_mult=0.0, lr_mult=1.0)),
        norm_decay_mult=0.0),
    type='OptimWrapper')
optimizer = dict(
    betas=(
        0.9,
        0.999,
    ),
    eps=1e-08,
    lr=0.0001,
    type='AdamW',
    weight_decay=0.05)
param_scheduler = [
    dict(
        begin=0,
        by_epoch=False,
        end=160000,
        eta_min=0,
        power=0.9,
        type='PolyLR'),
]
resume = False
test_cfg = dict(type='TestLoop')
test_dataloader = dict(
    batch_size=1,
    dataset=dict(
        data_prefix=dict(
            img_path='images/validation',
            seg_map_path='annotations/validation'),
        data_root='data/ade/ADEChallengeData2016',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(keep_ratio=True, scale=(
                2048,
                512,
            ), type='Resize'),
            dict(reduce_zero_label=True, type='LoadAnnotations'),
            dict(type='PackSegInputs'),
        ],
        type='ADE20KDataset'),
    num_workers=4,
    persistent_workers=True,
    sampler=dict(shuffle=False, type='DefaultSampler'))
test_evaluator = dict(
    iou_metrics=[
        'mIoU',
    ], type='IoUMetric')
test_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(keep_ratio=True, scale=(
        2048,
        512,
    ), type='Resize'),
    dict(reduce_zero_label=True, type='LoadAnnotations'),
    dict(type='PackSegInputs'),
]
train_cfg = dict(
    max_iters=160000, type='IterBasedTrainLoop', val_interval=5000)
train_dataloader = dict(
    batch_size=2,
    dataset=dict(
        data_prefix=dict(
            img_path='images/training', seg_map_path='annotations/training'),
        data_root='data/ade/ADEChallengeData2016',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(reduce_zero_label=True, type='LoadAnnotations'),
            dict(
                max_size=2048,
                resize_type='ResizeShortestEdge',
                scales=[
                    256,
                    307,
                    358,
                    409,
                    460,
                    512,
                    563,
                    614,
                    665,
                    716,
                    768,
                    819,
                    870,
                    921,
                    972,
                    1024,
                ],
                type='RandomChoiceResize'),
            dict(
                cat_max_ratio=0.75, crop_size=(
                    512,
                    512,
                ), type='RandomCrop'),
            dict(prob=0.5, type='RandomFlip'),
            dict(type='PhotoMetricDistortion'),
            dict(type='PackSegInputs'),
        ],
        type='ADE20KDataset'),
    num_workers=4,
    persistent_workers=True,
    sampler=dict(shuffle=True, type='InfiniteSampler'))
train_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(reduce_zero_label=True, type='LoadAnnotations'),
    dict(
        max_size=2048,
        resize_type='ResizeShortestEdge',
        scales=[
            256,
            307,
            358,
            409,
            460,
            512,
            563,
            614,
            665,
            716,
            768,
            819,
            870,
            921,
            972,
            1024,
        ],
        type='RandomChoiceResize'),
    dict(cat_max_ratio=0.75, crop_size=(
        512,
        512,
    ), type='RandomCrop'),
    dict(prob=0.5, type='RandomFlip'),
    dict(type='PhotoMetricDistortion'),
    dict(type='PackSegInputs'),
]
tta_model = dict(type='SegTTAModel')
tta_pipeline = [
    dict(backend_args=None, type='LoadImageFromFile'),
    dict(
        transforms=[
            [
                dict(keep_ratio=True, scale_factor=0.5, type='Resize'),
                dict(keep_ratio=True, scale_factor=0.75, type='Resize'),
                dict(keep_ratio=True, scale_factor=1.0, type='Resize'),
                dict(keep_ratio=True, scale_factor=1.25, type='Resize'),
                dict(keep_ratio=True, scale_factor=1.5, type='Resize'),
                dict(keep_ratio=True, scale_factor=1.75, type='Resize'),
            ],
            [
                dict(direction='horizontal', prob=0.0, type='RandomFlip'),
                dict(direction='horizontal', prob=1.0, type='RandomFlip'),
            ],
            [
                dict(type='LoadAnnotations'),
            ],
            [
                dict(type='PackSegInputs'),
            ],
        ],
        type='TestTimeAug'),
]
val_cfg = dict(type='ValLoop')
val_dataloader = dict(
    batch_size=1,
    dataset=dict(
        data_prefix=dict(
            img_path='images/validation',
            seg_map_path='annotations/validation'),
        data_root='data/ade/ADEChallengeData2016',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(keep_ratio=True, scale=(
                2048,
                512,
            ), type='Resize'),
            dict(reduce_zero_label=True, type='LoadAnnotations'),
            dict(type='PackSegInputs'),
        ],
        type='ADE20KDataset'),
    num_workers=4,
    persistent_workers=True,
    sampler=dict(shuffle=False, type='DefaultSampler'))
val_evaluator = dict(
    iou_metrics=[
        'mIoU',
    ], type='IoUMetric')
vis_backends = [
    dict(type='LocalVisBackend'),
]
visualizer = dict(
    name='visualizer',
    type='SegLocalVisualizer',
    vis_backends=[
        dict(type='LocalVisBackend'),
    ])
work_dir = '../corruptions/work_dirs/ade20k/mask2former/mask2former_r101_8xb2-160k_ade20k-512x512/snow'

09/21 05:55:53 - mmengine - INFO - Distributed training is not used, all SyncBatchNorm (SyncBN) layers in the model will be automatically reverted to BatchNormXd layers if they are used.
09/21 05:55:53 - mmengine - INFO - Hooks will be executed in the following order:
before_run:
(VERY_HIGH   ) RuntimeInfoHook                    
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
before_train:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_train_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(NORMAL      ) DistSamplerSeedHook                
 -------------------- 
before_train_iter:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_train_iter:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(NORMAL      ) SegVisualizationHook               
(BELOW_NORMAL) LoggerHook                         
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
after_train_epoch:
(NORMAL      ) IterTimerHook                      
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_val:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
before_val_epoch:
(NORMAL      ) IterTimerHook                      
 -------------------- 
before_val_iter:
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_val_iter:
(NORMAL      ) IterTimerHook                      
(NORMAL      ) SegVisualizationHook               
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_val_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
after_val:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
after_train:
(VERY_HIGH   ) RuntimeInfoHook                    
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_test:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
before_test_epoch:
(NORMAL      ) IterTimerHook                      
 -------------------- 
before_test_iter:
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_test_iter:
(NORMAL      ) IterTimerHook                      
(NORMAL      ) SegVisualizationHook               
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_test_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_test:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
after_run:
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
09/21 05:55:53 - mmengine - WARNING - The prefix is not set in metric class IoUMetric.
Loads checkpoint by local backend from path: ../checkpoint_files/ade20k/mask2former/mask2former_r101_8xb2-160k_ade20k-512x512_20221203_233905-b7135890.pth
09/21 05:55:54 - mmengine - INFO - Load checkpoint from ../checkpoint_files/ade20k/mask2former/mask2former_r101_8xb2-160k_ade20k-512x512_20221203_233905-b7135890.pth
09/21 05:57:10 - mmengine - INFO - Iter(test) [  50/2000]    eta: 0:49:43  time: 1.1749  data_time: 0.0015  memory: 17239  
09/21 05:57:38 - mmengine - INFO - Iter(test) [ 100/2000]    eta: 0:32:58  time: 0.7698  data_time: 0.0015  memory: 17230  
09/21 05:57:53 - mmengine - INFO - Iter(test) [ 150/2000]    eta: 0:24:28  time: 0.3120  data_time: 0.0015  memory: 943  
09/21 05:58:18 - mmengine - INFO - Iter(test) [ 200/2000]    eta: 0:21:34  time: 0.3023  data_time: 0.0014  memory: 17287  
09/21 05:58:38 - mmengine - INFO - Iter(test) [ 250/2000]    eta: 0:19:11  time: 0.2993  data_time: 0.0014  memory: 17293  
09/21 05:58:58 - mmengine - INFO - Iter(test) [ 300/2000]    eta: 0:17:20  time: 0.3109  data_time: 0.0016  memory: 17234  
09/21 05:59:21 - mmengine - INFO - Iter(test) [ 350/2000]    eta: 0:16:15  time: 0.2800  data_time: 0.0014  memory: 17237  
09/21 05:59:40 - mmengine - INFO - Iter(test) [ 400/2000]    eta: 0:15:03  time: 0.3034  data_time: 0.0014  memory: 17220  
09/21 05:59:53 - mmengine - INFO - Iter(test) [ 450/2000]    eta: 0:13:45  time: 0.2824  data_time: 0.0014  memory: 955  
09/21 06:00:08 - mmengine - INFO - Iter(test) [ 500/2000]    eta: 0:12:43  time: 0.2914  data_time: 0.0014  memory: 943  
09/21 06:00:24 - mmengine - INFO - Iter(test) [ 550/2000]    eta: 0:11:52  time: 0.3102  data_time: 0.0015  memory: 1055  
09/21 06:00:39 - mmengine - INFO - Iter(test) [ 600/2000]    eta: 0:11:05  time: 0.3084  data_time: 0.0016  memory: 1053  
09/21 06:00:59 - mmengine - INFO - Iter(test) [ 650/2000]    eta: 0:10:32  time: 0.7753  data_time: 0.0014  memory: 17241  
09/21 06:01:19 - mmengine - INFO - Iter(test) [ 700/2000]    eta: 0:10:03  time: 0.3091  data_time: 0.0015  memory: 17235  
09/21 06:01:34 - mmengine - INFO - Iter(test) [ 750/2000]    eta: 0:09:26  time: 0.2964  data_time: 0.0014  memory: 1112  
09/21 06:01:48 - mmengine - INFO - Iter(test) [ 800/2000]    eta: 0:08:50  time: 0.2945  data_time: 0.0015  memory: 943  
09/21 06:02:03 - mmengine - INFO - Iter(test) [ 850/2000]    eta: 0:08:19  time: 0.2967  data_time: 0.0016  memory: 915  
09/21 06:02:17 - mmengine - INFO - Iter(test) [ 900/2000]    eta: 0:07:48  time: 0.2753  data_time: 0.0014  memory: 998  
09/21 06:02:32 - mmengine - INFO - Iter(test) [ 950/2000]    eta: 0:07:20  time: 0.3018  data_time: 0.0015  memory: 1027  
09/21 06:02:47 - mmengine - INFO - Iter(test) [1000/2000]    eta: 0:06:52  time: 0.2835  data_time: 0.0015  memory: 1027  
09/21 06:03:07 - mmengine - INFO - Iter(test) [1050/2000]    eta: 0:06:31  time: 0.3050  data_time: 0.0016  memory: 17242  
09/21 06:03:22 - mmengine - INFO - Iter(test) [1100/2000]    eta: 0:06:06  time: 0.2892  data_time: 0.0015  memory: 1024  
09/21 06:03:36 - mmengine - INFO - Iter(test) [1150/2000]    eta: 0:05:41  time: 0.3001  data_time: 0.0014  memory: 996  
09/21 06:03:52 - mmengine - INFO - Iter(test) [1200/2000]    eta: 0:05:18  time: 0.2982  data_time: 0.0015  memory: 1900  
09/21 06:04:11 - mmengine - INFO - Iter(test) [1250/2000]    eta: 0:04:58  time: 0.2943  data_time: 0.0014  memory: 17230  
09/21 06:04:25 - mmengine - INFO - Iter(test) [1300/2000]    eta: 0:04:35  time: 0.2966  data_time: 0.0014  memory: 943  
09/21 06:04:40 - mmengine - INFO - Iter(test) [1350/2000]    eta: 0:04:13  time: 0.2796  data_time: 0.0014  memory: 943  
09/21 06:04:55 - mmengine - INFO - Iter(test) [1400/2000]    eta: 0:03:51  time: 0.3187  data_time: 0.0014  memory: 1025  
09/21 06:05:09 - mmengine - INFO - Iter(test) [1450/2000]    eta: 0:03:30  time: 0.3094  data_time: 0.0014  memory: 1027  
09/21 06:05:24 - mmengine - INFO - Iter(test) [1500/2000]    eta: 0:03:09  time: 0.2731  data_time: 0.0014  memory: 941  
09/21 06:05:39 - mmengine - INFO - Iter(test) [1550/2000]    eta: 0:02:49  time: 0.3043  data_time: 0.0014  memory: 1027  
09/21 06:05:54 - mmengine - INFO - Iter(test) [1600/2000]    eta: 0:02:29  time: 0.3011  data_time: 0.0015  memory: 915  
09/21 06:06:13 - mmengine - INFO - Iter(test) [1650/2000]    eta: 0:02:11  time: 0.2860  data_time: 0.0014  memory: 17237  
09/21 06:06:28 - mmengine - INFO - Iter(test) [1700/2000]    eta: 0:01:51  time: 0.2975  data_time: 0.0015  memory: 1024  
09/21 06:06:43 - mmengine - INFO - Iter(test) [1750/2000]    eta: 0:01:32  time: 0.2884  data_time: 0.0014  memory: 1052  
09/21 06:06:58 - mmengine - INFO - Iter(test) [1800/2000]    eta: 0:01:13  time: 0.3097  data_time: 0.0016  memory: 943  
09/21 06:07:13 - mmengine - INFO - Iter(test) [1850/2000]    eta: 0:00:55  time: 0.3113  data_time: 0.0015  memory: 859  
09/21 06:07:27 - mmengine - INFO - Iter(test) [1900/2000]    eta: 0:00:36  time: 0.2863  data_time: 0.0014  memory: 1084  
09/21 06:07:42 - mmengine - INFO - Iter(test) [1950/2000]    eta: 0:00:18  time: 0.2849  data_time: 0.0014  memory: 1331  
09/21 06:07:57 - mmengine - INFO - Iter(test) [2000/2000]    eta: 0:00:00  time: 0.2795  data_time: 0.0013  memory: 1110  
09/21 06:07:57 - mmengine - INFO - per class results:
09/21 06:07:57 - mmengine - INFO - 
+---------------------+-------+-------+
|        Class        |  IoU  |  Acc  |
+---------------------+-------+-------+
|         wall        | 57.46 | 87.83 |
|       building      |  71.5 |  89.7 |
|         sky         | 80.72 | 83.49 |
|        floor        | 60.98 | 83.71 |
|         tree        | 63.97 | 79.37 |
|       ceiling       | 57.47 | 66.86 |
|         road        | 59.16 | 65.27 |
|         bed         | 67.62 | 74.45 |
|      windowpane     | 45.73 | 63.12 |
|        grass        | 49.31 | 59.92 |
|       cabinet       | 31.06 | 36.85 |
|       sidewalk      | 42.74 | 49.89 |
|        person       | 70.25 | 80.54 |
|        earth        | 28.63 | 46.59 |
|         door        | 16.25 | 23.23 |
|        table        | 39.15 | 49.87 |
|       mountain      | 24.41 | 28.16 |
|        plant        | 40.57 | 50.67 |
|       curtain       | 32.39 | 51.24 |
|        chair        | 40.83 | 51.45 |
|         car         | 74.75 |  82.6 |
|        water        | 35.53 | 65.59 |
|       painting      | 53.92 | 67.04 |
|         sofa        | 52.17 | 63.49 |
|        shelf        | 30.16 | 56.89 |
|        house        |  9.54 | 10.45 |
|         sea         |  8.65 | 10.26 |
|        mirror       | 31.32 | 49.96 |
|         rug         | 23.16 | 23.92 |
|        field        | 18.97 | 67.43 |
|       armchair      | 24.49 | 29.47 |
|         seat        | 18.29 | 37.83 |
|        fence        | 12.87 | 42.71 |
|         desk        | 24.43 | 26.76 |
|         rock        | 24.18 | 28.73 |
|       wardrobe      | 14.72 | 16.37 |
|         lamp        | 50.26 | 56.28 |
|       bathtub       | 19.65 | 24.41 |
|       railing       | 14.36 | 22.22 |
|       cushion       | 30.72 |  33.7 |
|         base        |  8.65 | 17.89 |
|         box         | 10.24 | 19.12 |
|        column       |  26.9 | 34.23 |
|      signboard      | 26.99 |  44.7 |
|   chest of drawers  | 16.64 | 25.83 |
|       counter       |  9.64 | 12.97 |
|         sand        |  3.14 |  3.95 |
|         sink        | 42.51 | 48.66 |
|      skyscraper     | 20.82 | 31.46 |
|      fireplace      | 49.01 | 57.14 |
|     refrigerator    |  32.5 |  34.0 |
|      grandstand     | 12.57 | 63.97 |
|         path        | 21.37 | 27.78 |
|        stairs       | 18.96 | 22.41 |
|        runway       |  31.6 |  33.0 |
|         case        | 38.35 | 44.26 |
|      pool table     | 49.91 | 50.57 |
|        pillow       |  26.7 | 31.13 |
|     screen door     | 14.64 | 16.26 |
|       stairway      |  3.83 |  4.63 |
|        river        |  4.87 |  6.43 |
|        bridge       | 44.26 | 56.93 |
|       bookcase      |  9.7  | 10.33 |
|        blind        | 10.06 | 10.63 |
|     coffee table    | 41.17 | 43.78 |
|        toilet       | 36.77 | 37.44 |
|        flower       | 30.07 | 38.87 |
|         book        |  22.7 | 27.71 |
|         hill        |  1.31 |  4.01 |
|        bench        | 18.76 | 27.27 |
|      countertop     |  34.3 | 47.43 |
|        stove        | 47.31 |  49.4 |
|         palm        | 45.71 | 64.88 |
|    kitchen island   | 14.92 | 26.12 |
|       computer      | 30.49 | 32.78 |
|     swivel chair    | 24.28 | 25.83 |
|         boat        | 31.05 | 32.45 |
|         bar         |  16.5 | 35.16 |
|    arcade machine   | 14.56 | 18.94 |
|        hovel        | 52.82 | 70.26 |
|         bus         | 80.92 | 91.24 |
|        towel        |  26.7 | 28.39 |
|        light        | 27.84 | 32.64 |
|        truck        | 14.02 | 27.16 |
|        tower        | 36.38 | 62.81 |
|      chandelier     | 49.24 | 56.92 |
|        awning       | 10.93 | 11.39 |
|     streetlight     | 28.85 |  34.9 |
|        booth        |  0.0  |  0.0  |
| television receiver | 33.59 | 37.87 |
|       airplane      | 31.64 | 42.95 |
|      dirt track     |  3.2  |  5.96 |
|       apparel       | 11.43 | 15.69 |
|         pole        | 21.54 | 35.51 |
|         land        |  0.0  |  0.0  |
|      bannister      |  3.5  |  4.84 |
|      escalator      | 10.48 | 12.68 |
|       ottoman       | 20.05 | 24.79 |
|        bottle       | 10.52 | 14.11 |
|        buffet       |  8.32 |  8.55 |
|        poster       | 11.27 | 23.46 |
|        stage        |  0.98 |  2.42 |
|         van         | 18.32 | 25.64 |
|         ship        |  0.0  |  0.0  |
|       fountain      | 19.35 | 19.49 |
|    conveyer belt    | 23.33 | 30.26 |
|        canopy       |  0.0  |  0.0  |
|        washer       | 43.12 |  43.5 |
|      plaything      |  9.9  | 24.69 |
|    swimming pool    | 24.66 | 45.76 |
|        stool        | 29.47 | 47.64 |
|        barrel       |  0.0  |  0.0  |
|        basket       | 19.03 | 23.89 |
|      waterfall      | 54.48 | 59.24 |
|         tent        | 10.82 | 10.85 |
|         bag         |  5.87 |  8.39 |
|       minibike      | 49.62 | 77.08 |
|        cradle       | 41.56 |  46.3 |
|         oven        | 14.19 | 15.61 |
|         ball        | 25.43 | 60.09 |
|         food        | 54.45 | 65.22 |
|         step        |  0.0  |  0.0  |
|         tank        | 14.58 | 20.97 |
|      trade name     | 14.42 | 15.83 |
|      microwave      |  11.1 | 11.37 |
|         pot         | 38.11 | 43.29 |
|        animal       | 38.65 |  69.4 |
|       bicycle       | 44.75 | 66.83 |
|         lake        |  0.0  |  0.0  |
|      dishwasher     | 17.77 | 17.89 |
|        screen       | 50.08 | 67.93 |
|       blanket       |  0.69 |  0.7  |
|      sculpture      |  6.68 | 15.76 |
|         hood        | 27.85 | 28.27 |
|        sconce       | 23.48 | 36.08 |
|         vase        | 30.93 | 37.94 |
|    traffic light    | 35.01 | 49.38 |
|         tray        |  4.45 |  5.75 |
|        ashcan       | 30.73 | 42.86 |
|         fan         | 50.42 | 59.28 |
|         pier        | 17.08 | 24.98 |
|      crt screen     | 10.75 | 36.86 |
|        plate        | 25.32 | 30.14 |
|       monitor       | 63.42 | 77.89 |
|    bulletin board   | 15.34 | 16.89 |
|        shower       |  0.33 |  9.49 |
|       radiator      |  7.69 |  7.89 |
|        glass        | 12.19 | 13.07 |
|        clock        | 14.49 |  26.1 |
|         flag        | 33.17 | 43.18 |
+---------------------+-------+-------+
09/21 06:07:57 - mmengine - INFO - Iter(test) [2000/2000]    aAcc: 67.8400  mIoU: 27.1600  mAcc: 35.8900  data_time: 0.0016  time: 0.3613
Finished processing corruption type: snow
Processing corruption type: frost
09/21 06:08:01 - mmengine - INFO - 
------------------------------------------------------------
System environment:
    sys.platform: linux
    Python: 3.10.13 | packaged by conda-forge | (main, Dec 23 2023, 15:36:39) [GCC 12.3.0]
    CUDA available: True
    MUSA available: False
    numpy_random_seed: 1616073399
    GPU 0: Tesla V100-SXM2-32GB
    CUDA_HOME: /opt/bwhpc/common/devel/cuda/11.7
    NVCC: Cuda compilation tools, release 11.7, V11.7.99
    GCC: gcc (GCC) 8.5.0 20210514 (Red Hat 8.5.0-18)
    PyTorch: 1.13.1
    PyTorch compiling details: PyTorch built with:
  - GCC 9.3
  - C++ Version: 201402
  - Intel(R) oneAPI Math Kernel Library Version 2023.1-Product Build 20230303 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v2.6.0 (Git Hash 52b5f107dd9cf10910aaa19cb47f3abf9b349815)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - LAPACK is enabled (usually provided by MKL)
  - NNPACK is enabled
  - CPU capability usage: AVX2
  - CUDA Runtime 11.7
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_61,code=sm_61;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86;-gencode;arch=compute_37,code=compute_37
  - CuDNN 8.5
  - Magma 2.6.1
  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.7, CUDNN_VERSION=8.5.0, CXX_COMPILER=/opt/rh/devtoolset-9/root/usr/bin/c++, CXX_FLAGS= -fabi-version=11 -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -DEDGE_PROFILER_USE_KINETO -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Werror=non-virtual-dtor -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wunused-local-typedefs -Wno-unused-parameter -Wno-unused-function -Wno-unused-result -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Werror=cast-function-type -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.13.1, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, USE_ROCM=OFF, 

    TorchVision: 0.14.1
    OpenCV: 3.4.18
    MMEngine: 0.10.4

Runtime environment:
    cudnn_benchmark: True
    mp_cfg: {'mp_start_method': 'fork', 'opencv_num_threads': 0}
    dist_cfg: {'backend': 'nccl'}
    seed: 1616073399
    Distributed launcher: none
    Distributed training: False
    GPU number: 1
------------------------------------------------------------

09/21 06:08:02 - mmengine - INFO - Config:
auto_scale_lr = dict(base_batch_size=16, enable=False)
crop_size = (
    512,
    512,
)
custom_imports = dict(allow_failed_imports=False, imports='mmdet.models')
data_root = 'data/ade/ADEChallengeData2016'
dataset_type = 'ADE20KDataset'
default_hooks = dict(
    checkpoint=dict(
        by_epoch=False, interval=5000, save_best='mIoU',
        type='CheckpointHook'),
    logger=dict(interval=50, log_metric_by_epoch=False, type='LoggerHook'),
    param_scheduler=dict(type='ParamSchedulerHook'),
    sampler_seed=dict(type='DistSamplerSeedHook'),
    timer=dict(type='IterTimerHook'),
    visualization=dict(type='SegVisualizationHook'))
default_scope = 'mmseg'
embed_multi = dict(decay_mult=0.0, lr_mult=1.0)
env_cfg = dict(
    cudnn_benchmark=True,
    dist_cfg=dict(backend='nccl'),
    mp_cfg=dict(mp_start_method='fork', opencv_num_threads=0))
img_ratios = [
    0.5,
    0.75,
    1.0,
    1.25,
    1.5,
    1.75,
]
launcher = 'none'
load_from = '../checkpoint_files/ade20k/mask2former/mask2former_r101_8xb2-160k_ade20k-512x512_20221203_233905-b7135890.pth'
log_level = 'INFO'
log_processor = dict(by_epoch=False)
model = dict(
    backbone=dict(
        deep_stem=False,
        depth=101,
        frozen_stages=-1,
        init_cfg=dict(checkpoint='torchvision://resnet101', type='Pretrained'),
        norm_cfg=dict(requires_grad=False, type='SyncBN'),
        num_stages=4,
        out_indices=(
            0,
            1,
            2,
            3,
        ),
        style='pytorch',
        type='ResNet'),
    data_preprocessor=dict(
        bgr_to_rgb=True,
        corruption='frost',
        mean=[
            123.675,
            116.28,
            103.53,
        ],
        pad_val=0,
        seg_pad_val=255,
        size=(
            512,
            512,
        ),
        std=[
            58.395,
            57.12,
            57.375,
        ],
        test_cfg=dict(size_divisor=32),
        type='SegDataPreProcessor'),
    decode_head=dict(
        align_corners=False,
        enforce_decoder_input_project=False,
        feat_channels=256,
        in_channels=[
            256,
            512,
            1024,
            2048,
        ],
        loss_cls=dict(
            class_weight=[
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                0.1,
            ],
            loss_weight=2.0,
            reduction='mean',
            type='mmdet.CrossEntropyLoss',
            use_sigmoid=False),
        loss_dice=dict(
            activate=True,
            eps=1.0,
            loss_weight=5.0,
            naive_dice=True,
            reduction='mean',
            type='mmdet.DiceLoss',
            use_sigmoid=True),
        loss_mask=dict(
            loss_weight=5.0,
            reduction='mean',
            type='mmdet.CrossEntropyLoss',
            use_sigmoid=True),
        num_classes=150,
        num_queries=100,
        num_transformer_feat_level=3,
        out_channels=256,
        pixel_decoder=dict(
            act_cfg=dict(type='ReLU'),
            encoder=dict(
                init_cfg=None,
                layer_cfg=dict(
                    ffn_cfg=dict(
                        act_cfg=dict(inplace=True, type='ReLU'),
                        embed_dims=256,
                        feedforward_channels=1024,
                        ffn_drop=0.0,
                        num_fcs=2),
                    self_attn_cfg=dict(
                        batch_first=True,
                        dropout=0.0,
                        embed_dims=256,
                        im2col_step=64,
                        init_cfg=None,
                        norm_cfg=None,
                        num_heads=8,
                        num_levels=3,
                        num_points=4)),
                num_layers=6),
            init_cfg=None,
            norm_cfg=dict(num_groups=32, type='GN'),
            num_outs=3,
            positional_encoding=dict(normalize=True, num_feats=128),
            type='mmdet.MSDeformAttnPixelDecoder'),
        positional_encoding=dict(normalize=True, num_feats=128),
        strides=[
            4,
            8,
            16,
            32,
        ],
        train_cfg=dict(
            assigner=dict(
                match_costs=[
                    dict(type='mmdet.ClassificationCost', weight=2.0),
                    dict(
                        type='mmdet.CrossEntropyLossCost',
                        use_sigmoid=True,
                        weight=5.0),
                    dict(
                        eps=1.0,
                        pred_act=True,
                        type='mmdet.DiceCost',
                        weight=5.0),
                ],
                type='mmdet.HungarianAssigner'),
            importance_sample_ratio=0.75,
            num_points=12544,
            oversample_ratio=3.0,
            sampler=dict(type='mmdet.MaskPseudoSampler')),
        transformer_decoder=dict(
            init_cfg=None,
            layer_cfg=dict(
                cross_attn_cfg=dict(
                    attn_drop=0.0,
                    batch_first=True,
                    dropout_layer=None,
                    embed_dims=256,
                    num_heads=8,
                    proj_drop=0.0),
                ffn_cfg=dict(
                    act_cfg=dict(inplace=True, type='ReLU'),
                    add_identity=True,
                    dropout_layer=None,
                    embed_dims=256,
                    feedforward_channels=2048,
                    ffn_drop=0.0,
                    num_fcs=2),
                self_attn_cfg=dict(
                    attn_drop=0.0,
                    batch_first=True,
                    dropout_layer=None,
                    embed_dims=256,
                    num_heads=8,
                    proj_drop=0.0)),
            num_layers=9,
            return_intermediate=True),
        type='Mask2FormerHead'),
    test_cfg=dict(mode='whole'),
    train_cfg=dict(),
    type='EncoderDecoder')
num_classes = 150
optim_wrapper = dict(
    clip_grad=dict(max_norm=0.01, norm_type=2),
    optimizer=dict(
        betas=(
            0.9,
            0.999,
        ),
        eps=1e-08,
        lr=0.0001,
        type='AdamW',
        weight_decay=0.05),
    paramwise_cfg=dict(
        custom_keys=dict(
            backbone=dict(decay_mult=1.0, lr_mult=0.1),
            level_embed=dict(decay_mult=0.0, lr_mult=1.0),
            query_embed=dict(decay_mult=0.0, lr_mult=1.0),
            query_feat=dict(decay_mult=0.0, lr_mult=1.0)),
        norm_decay_mult=0.0),
    type='OptimWrapper')
optimizer = dict(
    betas=(
        0.9,
        0.999,
    ),
    eps=1e-08,
    lr=0.0001,
    type='AdamW',
    weight_decay=0.05)
param_scheduler = [
    dict(
        begin=0,
        by_epoch=False,
        end=160000,
        eta_min=0,
        power=0.9,
        type='PolyLR'),
]
resume = False
test_cfg = dict(type='TestLoop')
test_dataloader = dict(
    batch_size=1,
    dataset=dict(
        data_prefix=dict(
            img_path='images/validation',
            seg_map_path='annotations/validation'),
        data_root='data/ade/ADEChallengeData2016',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(keep_ratio=True, scale=(
                2048,
                512,
            ), type='Resize'),
            dict(reduce_zero_label=True, type='LoadAnnotations'),
            dict(type='PackSegInputs'),
        ],
        type='ADE20KDataset'),
    num_workers=4,
    persistent_workers=True,
    sampler=dict(shuffle=False, type='DefaultSampler'))
test_evaluator = dict(
    iou_metrics=[
        'mIoU',
    ], type='IoUMetric')
test_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(keep_ratio=True, scale=(
        2048,
        512,
    ), type='Resize'),
    dict(reduce_zero_label=True, type='LoadAnnotations'),
    dict(type='PackSegInputs'),
]
train_cfg = dict(
    max_iters=160000, type='IterBasedTrainLoop', val_interval=5000)
train_dataloader = dict(
    batch_size=2,
    dataset=dict(
        data_prefix=dict(
            img_path='images/training', seg_map_path='annotations/training'),
        data_root='data/ade/ADEChallengeData2016',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(reduce_zero_label=True, type='LoadAnnotations'),
            dict(
                max_size=2048,
                resize_type='ResizeShortestEdge',
                scales=[
                    256,
                    307,
                    358,
                    409,
                    460,
                    512,
                    563,
                    614,
                    665,
                    716,
                    768,
                    819,
                    870,
                    921,
                    972,
                    1024,
                ],
                type='RandomChoiceResize'),
            dict(
                cat_max_ratio=0.75, crop_size=(
                    512,
                    512,
                ), type='RandomCrop'),
            dict(prob=0.5, type='RandomFlip'),
            dict(type='PhotoMetricDistortion'),
            dict(type='PackSegInputs'),
        ],
        type='ADE20KDataset'),
    num_workers=4,
    persistent_workers=True,
    sampler=dict(shuffle=True, type='InfiniteSampler'))
train_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(reduce_zero_label=True, type='LoadAnnotations'),
    dict(
        max_size=2048,
        resize_type='ResizeShortestEdge',
        scales=[
            256,
            307,
            358,
            409,
            460,
            512,
            563,
            614,
            665,
            716,
            768,
            819,
            870,
            921,
            972,
            1024,
        ],
        type='RandomChoiceResize'),
    dict(cat_max_ratio=0.75, crop_size=(
        512,
        512,
    ), type='RandomCrop'),
    dict(prob=0.5, type='RandomFlip'),
    dict(type='PhotoMetricDistortion'),
    dict(type='PackSegInputs'),
]
tta_model = dict(type='SegTTAModel')
tta_pipeline = [
    dict(backend_args=None, type='LoadImageFromFile'),
    dict(
        transforms=[
            [
                dict(keep_ratio=True, scale_factor=0.5, type='Resize'),
                dict(keep_ratio=True, scale_factor=0.75, type='Resize'),
                dict(keep_ratio=True, scale_factor=1.0, type='Resize'),
                dict(keep_ratio=True, scale_factor=1.25, type='Resize'),
                dict(keep_ratio=True, scale_factor=1.5, type='Resize'),
                dict(keep_ratio=True, scale_factor=1.75, type='Resize'),
            ],
            [
                dict(direction='horizontal', prob=0.0, type='RandomFlip'),
                dict(direction='horizontal', prob=1.0, type='RandomFlip'),
            ],
            [
                dict(type='LoadAnnotations'),
            ],
            [
                dict(type='PackSegInputs'),
            ],
        ],
        type='TestTimeAug'),
]
val_cfg = dict(type='ValLoop')
val_dataloader = dict(
    batch_size=1,
    dataset=dict(
        data_prefix=dict(
            img_path='images/validation',
            seg_map_path='annotations/validation'),
        data_root='data/ade/ADEChallengeData2016',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(keep_ratio=True, scale=(
                2048,
                512,
            ), type='Resize'),
            dict(reduce_zero_label=True, type='LoadAnnotations'),
            dict(type='PackSegInputs'),
        ],
        type='ADE20KDataset'),
    num_workers=4,
    persistent_workers=True,
    sampler=dict(shuffle=False, type='DefaultSampler'))
val_evaluator = dict(
    iou_metrics=[
        'mIoU',
    ], type='IoUMetric')
vis_backends = [
    dict(type='LocalVisBackend'),
]
visualizer = dict(
    name='visualizer',
    type='SegLocalVisualizer',
    vis_backends=[
        dict(type='LocalVisBackend'),
    ])
work_dir = '../corruptions/work_dirs/ade20k/mask2former/mask2former_r101_8xb2-160k_ade20k-512x512/frost'

09/21 06:08:04 - mmengine - INFO - Distributed training is not used, all SyncBatchNorm (SyncBN) layers in the model will be automatically reverted to BatchNormXd layers if they are used.
09/21 06:08:04 - mmengine - INFO - Hooks will be executed in the following order:
before_run:
(VERY_HIGH   ) RuntimeInfoHook                    
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
before_train:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_train_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(NORMAL      ) DistSamplerSeedHook                
 -------------------- 
before_train_iter:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_train_iter:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(NORMAL      ) SegVisualizationHook               
(BELOW_NORMAL) LoggerHook                         
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
after_train_epoch:
(NORMAL      ) IterTimerHook                      
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_val:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
before_val_epoch:
(NORMAL      ) IterTimerHook                      
 -------------------- 
before_val_iter:
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_val_iter:
(NORMAL      ) IterTimerHook                      
(NORMAL      ) SegVisualizationHook               
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_val_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
after_val:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
after_train:
(VERY_HIGH   ) RuntimeInfoHook                    
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_test:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
before_test_epoch:
(NORMAL      ) IterTimerHook                      
 -------------------- 
before_test_iter:
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_test_iter:
(NORMAL      ) IterTimerHook                      
(NORMAL      ) SegVisualizationHook               
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_test_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_test:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
after_run:
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
09/21 06:08:04 - mmengine - WARNING - The prefix is not set in metric class IoUMetric.
Loads checkpoint by local backend from path: ../checkpoint_files/ade20k/mask2former/mask2former_r101_8xb2-160k_ade20k-512x512_20221203_233905-b7135890.pth
09/21 06:08:05 - mmengine - INFO - Load checkpoint from ../checkpoint_files/ade20k/mask2former/mask2former_r101_8xb2-160k_ade20k-512x512_20221203_233905-b7135890.pth
09/21 06:09:10 - mmengine - INFO - Iter(test) [  50/2000]    eta: 0:42:14  time: 0.9396  data_time: 0.0015  memory: 17239  
09/21 06:09:27 - mmengine - INFO - Iter(test) [ 100/2000]    eta: 0:25:53  time: 0.5363  data_time: 0.0016  memory: 17230  
09/21 06:09:31 - mmengine - INFO - Iter(test) [ 150/2000]    eta: 0:17:41  time: 0.0864  data_time: 0.0015  memory: 943  
09/21 06:09:45 - mmengine - INFO - Iter(test) [ 200/2000]    eta: 0:14:57  time: 0.0767  data_time: 0.0015  memory: 17287  
09/21 06:09:55 - mmengine - INFO - Iter(test) [ 250/2000]    eta: 0:12:49  time: 0.0837  data_time: 0.0014  memory: 17293  
09/21 06:10:03 - mmengine - INFO - Iter(test) [ 300/2000]    eta: 0:11:09  time: 0.0766  data_time: 0.0015  memory: 17234  
09/21 06:10:16 - mmengine - INFO - Iter(test) [ 350/2000]    eta: 0:10:16  time: 0.0853  data_time: 0.0014  memory: 17237  
09/21 06:10:24 - mmengine - INFO - Iter(test) [ 400/2000]    eta: 0:09:14  time: 0.0796  data_time: 0.0015  memory: 17220  
09/21 06:10:28 - mmengine - INFO - Iter(test) [ 450/2000]    eta: 0:08:10  time: 0.0806  data_time: 0.0014  memory: 955  
09/21 06:10:32 - mmengine - INFO - Iter(test) [ 500/2000]    eta: 0:07:20  time: 0.0844  data_time: 0.0014  memory: 943  
09/21 06:10:36 - mmengine - INFO - Iter(test) [ 550/2000]    eta: 0:06:38  time: 0.0862  data_time: 0.0015  memory: 1055  
09/21 06:10:40 - mmengine - INFO - Iter(test) [ 600/2000]    eta: 0:06:02  time: 0.0767  data_time: 0.0015  memory: 1053  
09/21 06:10:49 - mmengine - INFO - Iter(test) [ 650/2000]    eta: 0:05:39  time: 0.5400  data_time: 0.0014  memory: 17241  
09/21 06:10:58 - mmengine - INFO - Iter(test) [ 700/2000]    eta: 0:05:20  time: 0.0879  data_time: 0.0015  memory: 17235  
09/21 06:11:02 - mmengine - INFO - Iter(test) [ 750/2000]    eta: 0:04:53  time: 0.0746  data_time: 0.0014  memory: 1112  
09/21 06:11:05 - mmengine - INFO - Iter(test) [ 800/2000]    eta: 0:04:30  time: 0.0755  data_time: 0.0015  memory: 943  
09/21 06:11:09 - mmengine - INFO - Iter(test) [ 850/2000]    eta: 0:04:09  time: 0.0877  data_time: 0.0016  memory: 915  
09/21 06:11:14 - mmengine - INFO - Iter(test) [ 900/2000]    eta: 0:03:50  time: 0.0795  data_time: 0.0014  memory: 998  
09/21 06:11:18 - mmengine - INFO - Iter(test) [ 950/2000]    eta: 0:03:32  time: 0.0833  data_time: 0.0015  memory: 1027  
09/21 06:11:22 - mmengine - INFO - Iter(test) [1000/2000]    eta: 0:03:16  time: 0.0744  data_time: 0.0014  memory: 1027  
09/21 06:11:30 - mmengine - INFO - Iter(test) [1050/2000]    eta: 0:03:05  time: 0.0870  data_time: 0.0014  memory: 17242  
09/21 06:11:35 - mmengine - INFO - Iter(test) [1100/2000]    eta: 0:02:51  time: 0.0845  data_time: 0.0015  memory: 1024  
09/21 06:11:39 - mmengine - INFO - Iter(test) [1150/2000]    eta: 0:02:37  time: 0.0754  data_time: 0.0014  memory: 996  
09/21 06:11:43 - mmengine - INFO - Iter(test) [1200/2000]    eta: 0:02:24  time: 0.0734  data_time: 0.0014  memory: 1900  
09/21 06:11:51 - mmengine - INFO - Iter(test) [1250/2000]    eta: 0:02:15  time: 0.0843  data_time: 0.0014  memory: 17230  
09/21 06:11:56 - mmengine - INFO - Iter(test) [1300/2000]    eta: 0:02:03  time: 0.0849  data_time: 0.0014  memory: 943  
09/21 06:12:00 - mmengine - INFO - Iter(test) [1350/2000]    eta: 0:01:52  time: 0.0748  data_time: 0.0014  memory: 943  
09/21 06:12:03 - mmengine - INFO - Iter(test) [1400/2000]    eta: 0:01:42  time: 0.0756  data_time: 0.0014  memory: 1025  
09/21 06:12:07 - mmengine - INFO - Iter(test) [1450/2000]    eta: 0:01:31  time: 0.0778  data_time: 0.0014  memory: 1027  
09/21 06:12:11 - mmengine - INFO - Iter(test) [1500/2000]    eta: 0:01:21  time: 0.0830  data_time: 0.0014  memory: 941  
09/21 06:12:16 - mmengine - INFO - Iter(test) [1550/2000]    eta: 0:01:12  time: 0.0855  data_time: 0.0014  memory: 1027  
09/21 06:12:20 - mmengine - INFO - Iter(test) [1600/2000]    eta: 0:01:03  time: 0.0750  data_time: 0.0015  memory: 915  
09/21 06:12:28 - mmengine - INFO - Iter(test) [1650/2000]    eta: 0:00:55  time: 0.0810  data_time: 0.0013  memory: 17237  
09/21 06:12:33 - mmengine - INFO - Iter(test) [1700/2000]    eta: 0:00:47  time: 0.0841  data_time: 0.0015  memory: 1024  
09/21 06:12:37 - mmengine - INFO - Iter(test) [1750/2000]    eta: 0:00:38  time: 0.0885  data_time: 0.0013  memory: 1052  
09/21 06:12:41 - mmengine - INFO - Iter(test) [1800/2000]    eta: 0:00:30  time: 0.0774  data_time: 0.0016  memory: 943  
09/21 06:12:45 - mmengine - INFO - Iter(test) [1850/2000]    eta: 0:00:22  time: 0.0775  data_time: 0.0015  memory: 859  
09/21 06:12:48 - mmengine - INFO - Iter(test) [1900/2000]    eta: 0:00:14  time: 0.0832  data_time: 0.0014  memory: 1084  
09/21 06:12:53 - mmengine - INFO - Iter(test) [1950/2000]    eta: 0:00:07  time: 0.0844  data_time: 0.0014  memory: 1331  
09/21 06:12:57 - mmengine - INFO - Iter(test) [2000/2000]    eta: 0:00:00  time: 0.0805  data_time: 0.0013  memory: 1110  
09/21 06:12:57 - mmengine - INFO - per class results:
09/21 06:12:57 - mmengine - INFO - 
+---------------------+-------+-------+
|        Class        |  IoU  |  Acc  |
+---------------------+-------+-------+
|         wall        | 66.55 | 87.35 |
|       building      | 78.47 | 89.14 |
|         sky         | 83.01 | 85.76 |
|        floor        | 72.95 | 86.32 |
|         tree        | 66.62 | 83.62 |
|       ceiling       | 74.54 | 84.88 |
|         road        | 70.92 | 78.47 |
|         bed         | 79.63 | 88.51 |
|      windowpane     | 54.43 | 69.89 |
|        grass        | 59.17 | 73.31 |
|       cabinet       | 46.09 | 52.77 |
|       sidewalk      | 50.58 | 59.18 |
|        person       | 76.46 | 84.51 |
|        earth        | 26.63 | 50.08 |
|         door        | 31.42 | 39.98 |
|        table        | 50.91 | 67.68 |
|       mountain      | 37.37 | 77.48 |
|        plant        | 44.73 | 55.31 |
|       curtain       |  54.9 | 62.19 |
|        chair        | 52.78 | 65.66 |
|         car         | 79.66 | 87.07 |
|        water        | 43.44 | 76.07 |
|       painting      | 60.59 | 80.12 |
|         sofa        | 57.99 | 73.77 |
|        shelf        | 35.52 |  56.0 |
|        house        | 41.43 | 53.51 |
|         sea         | 22.24 | 30.09 |
|        mirror       | 49.85 | 59.26 |
|         rug         | 46.45 |  49.8 |
|        field        | 23.37 | 38.12 |
|       armchair      | 38.34 | 54.35 |
|         seat        | 30.63 | 39.34 |
|        fence        | 29.48 | 50.94 |
|         desk        | 34.92 | 45.31 |
|         rock        | 32.45 | 42.67 |
|       wardrobe      | 26.45 | 34.07 |
|         lamp        | 58.68 | 68.67 |
|       bathtub       | 49.72 | 65.11 |
|       railing       | 25.61 | 37.68 |
|       cushion       | 45.28 | 58.17 |
|         base        | 13.65 | 20.86 |
|         box         |  16.3 |  24.6 |
|        column       | 30.97 | 45.23 |
|      signboard      |  34.0 | 47.55 |
|   chest of drawers  | 22.33 | 36.22 |
|       counter       | 12.39 | 21.65 |
|         sand        | 30.08 | 39.28 |
|         sink        | 50.97 | 68.75 |
|      skyscraper     | 32.66 | 40.19 |
|      fireplace      | 50.07 | 69.83 |
|     refrigerator    | 57.07 | 58.07 |
|      grandstand     | 35.02 | 65.08 |
|         path        | 24.27 | 39.46 |
|        stairs       | 25.36 |  44.5 |
|        runway       | 35.73 | 41.31 |
|         case        | 38.44 |  57.4 |
|      pool table     | 78.62 | 80.16 |
|        pillow       | 50.73 |  59.9 |
|     screen door     | 47.94 | 68.63 |
|       stairway      | 27.37 | 39.07 |
|        river        | 11.33 | 14.54 |
|        bridge       | 49.34 | 69.52 |
|       bookcase      | 17.27 | 22.57 |
|        blind        | 13.16 | 13.54 |
|     coffee table    | 64.44 | 75.16 |
|        toilet       | 51.64 | 62.33 |
|        flower       | 32.49 | 46.95 |
|         book        | 45.09 | 61.62 |
|         hill        |  4.47 | 11.24 |
|        bench        | 29.43 | 64.32 |
|      countertop     | 45.32 | 63.49 |
|        stove        | 61.75 | 68.32 |
|         palm        | 45.97 | 62.18 |
|    kitchen island   | 32.54 | 78.77 |
|       computer      | 51.05 |  53.4 |
|     swivel chair    | 31.43 | 34.73 |
|         boat        | 37.62 | 45.36 |
|         bar         | 42.76 | 54.92 |
|    arcade machine   | 14.46 | 14.68 |
|        hovel        | 39.93 | 70.54 |
|         bus         | 84.17 | 89.12 |
|        towel        | 46.82 | 58.71 |
|        light        | 43.63 | 51.14 |
|        truck        | 22.32 | 37.11 |
|        tower        | 46.86 | 77.62 |
|      chandelier     | 62.75 | 73.72 |
|        awning       | 25.23 | 27.46 |
|     streetlight     | 32.67 | 41.67 |
|        booth        | 15.34 | 19.73 |
| television receiver | 35.62 | 43.45 |
|       airplane      | 37.45 | 44.07 |
|      dirt track     |  4.14 | 19.39 |
|       apparel       | 32.79 | 42.75 |
|         pole        | 22.07 | 35.99 |
|         land        |  0.13 |  0.18 |
|      bannister      | 12.88 | 19.52 |
|      escalator      |  7.71 | 15.43 |
|       ottoman       |  37.2 | 64.88 |
|        bottle       | 15.57 | 19.44 |
|        buffet       | 28.33 | 30.79 |
|        poster       |  8.51 | 13.39 |
|        stage        |  5.21 |  8.94 |
|         van         | 28.51 | 41.08 |
|         ship        | 38.05 | 45.31 |
|       fountain      |  4.07 |  4.53 |
|    conveyer belt    | 39.81 | 61.08 |
|        canopy       | 17.24 | 27.84 |
|        washer       |  54.8 | 55.15 |
|      plaything      | 28.49 | 50.63 |
|    swimming pool    | 51.07 |  73.6 |
|        stool        | 37.61 | 52.72 |
|        barrel       |  1.0  |  9.58 |
|        basket       |  33.2 | 45.38 |
|      waterfall      | 50.77 | 59.99 |
|         tent        | 16.74 | 19.47 |
|         bag         | 10.25 | 12.28 |
|       minibike      | 60.33 | 73.28 |
|        cradle       | 52.73 |  58.7 |
|         oven        | 39.78 | 57.63 |
|         ball        | 41.57 | 58.98 |
|         food        | 54.11 | 76.92 |
|         step        | 10.38 | 19.78 |
|         tank        |  31.7 | 42.26 |
|      trade name     | 23.82 |  27.9 |
|      microwave      | 17.16 | 17.42 |
|         pot         | 43.76 | 51.64 |
|        animal       | 37.79 | 65.57 |
|       bicycle       | 53.87 | 73.61 |
|         lake        |  0.0  |  0.0  |
|      dishwasher     |  44.3 | 46.21 |
|        screen       | 43.57 | 47.39 |
|       blanket       | 18.77 | 25.61 |
|      sculpture      | 26.57 | 68.93 |
|         hood        | 61.48 | 65.54 |
|        sconce       | 37.68 | 49.15 |
|         vase        | 32.17 | 51.77 |
|    traffic light    | 36.98 |  53.0 |
|         tray        | 10.53 | 21.24 |
|        ashcan       | 35.13 | 43.65 |
|         fan         |  50.8 | 71.86 |
|         pier        | 12.64 | 13.45 |
|      crt screen     |  3.93 |  8.33 |
|        plate        | 40.04 | 52.22 |
|       monitor       |  3.46 |  3.74 |
|    bulletin board   | 28.12 | 31.89 |
|        shower       |  4.99 | 14.66 |
|       radiator      | 35.66 | 37.22 |
|        glass        | 13.83 |  18.0 |
|        clock        | 31.99 | 37.15 |
|         flag        |  41.6 | 46.44 |
+---------------------+-------+-------+
09/21 06:12:57 - mmengine - INFO - Iter(test) [2000/2000]    aAcc: 75.2300  mIoU: 37.1100  mAcc: 48.8200  data_time: 0.0016  time: 0.1457
Finished processing corruption type: frost
Processing corruption type: fog
09/21 06:13:01 - mmengine - INFO - 
------------------------------------------------------------
System environment:
    sys.platform: linux
    Python: 3.10.13 | packaged by conda-forge | (main, Dec 23 2023, 15:36:39) [GCC 12.3.0]
    CUDA available: True
    MUSA available: False
    numpy_random_seed: 1022032831
    GPU 0: Tesla V100-SXM2-32GB
    CUDA_HOME: /opt/bwhpc/common/devel/cuda/11.7
    NVCC: Cuda compilation tools, release 11.7, V11.7.99
    GCC: gcc (GCC) 8.5.0 20210514 (Red Hat 8.5.0-18)
    PyTorch: 1.13.1
    PyTorch compiling details: PyTorch built with:
  - GCC 9.3
  - C++ Version: 201402
  - Intel(R) oneAPI Math Kernel Library Version 2023.1-Product Build 20230303 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v2.6.0 (Git Hash 52b5f107dd9cf10910aaa19cb47f3abf9b349815)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - LAPACK is enabled (usually provided by MKL)
  - NNPACK is enabled
  - CPU capability usage: AVX2
  - CUDA Runtime 11.7
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_61,code=sm_61;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86;-gencode;arch=compute_37,code=compute_37
  - CuDNN 8.5
  - Magma 2.6.1
  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.7, CUDNN_VERSION=8.5.0, CXX_COMPILER=/opt/rh/devtoolset-9/root/usr/bin/c++, CXX_FLAGS= -fabi-version=11 -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -DEDGE_PROFILER_USE_KINETO -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Werror=non-virtual-dtor -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wunused-local-typedefs -Wno-unused-parameter -Wno-unused-function -Wno-unused-result -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Werror=cast-function-type -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.13.1, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, USE_ROCM=OFF, 

    TorchVision: 0.14.1
    OpenCV: 3.4.18
    MMEngine: 0.10.4

Runtime environment:
    cudnn_benchmark: True
    mp_cfg: {'mp_start_method': 'fork', 'opencv_num_threads': 0}
    dist_cfg: {'backend': 'nccl'}
    seed: 1022032831
    Distributed launcher: none
    Distributed training: False
    GPU number: 1
------------------------------------------------------------

09/21 06:13:01 - mmengine - INFO - Config:
auto_scale_lr = dict(base_batch_size=16, enable=False)
crop_size = (
    512,
    512,
)
custom_imports = dict(allow_failed_imports=False, imports='mmdet.models')
data_root = 'data/ade/ADEChallengeData2016'
dataset_type = 'ADE20KDataset'
default_hooks = dict(
    checkpoint=dict(
        by_epoch=False, interval=5000, save_best='mIoU',
        type='CheckpointHook'),
    logger=dict(interval=50, log_metric_by_epoch=False, type='LoggerHook'),
    param_scheduler=dict(type='ParamSchedulerHook'),
    sampler_seed=dict(type='DistSamplerSeedHook'),
    timer=dict(type='IterTimerHook'),
    visualization=dict(type='SegVisualizationHook'))
default_scope = 'mmseg'
embed_multi = dict(decay_mult=0.0, lr_mult=1.0)
env_cfg = dict(
    cudnn_benchmark=True,
    dist_cfg=dict(backend='nccl'),
    mp_cfg=dict(mp_start_method='fork', opencv_num_threads=0))
img_ratios = [
    0.5,
    0.75,
    1.0,
    1.25,
    1.5,
    1.75,
]
launcher = 'none'
load_from = '../checkpoint_files/ade20k/mask2former/mask2former_r101_8xb2-160k_ade20k-512x512_20221203_233905-b7135890.pth'
log_level = 'INFO'
log_processor = dict(by_epoch=False)
model = dict(
    backbone=dict(
        deep_stem=False,
        depth=101,
        frozen_stages=-1,
        init_cfg=dict(checkpoint='torchvision://resnet101', type='Pretrained'),
        norm_cfg=dict(requires_grad=False, type='SyncBN'),
        num_stages=4,
        out_indices=(
            0,
            1,
            2,
            3,
        ),
        style='pytorch',
        type='ResNet'),
    data_preprocessor=dict(
        bgr_to_rgb=True,
        corruption='fog',
        mean=[
            123.675,
            116.28,
            103.53,
        ],
        pad_val=0,
        seg_pad_val=255,
        size=(
            512,
            512,
        ),
        std=[
            58.395,
            57.12,
            57.375,
        ],
        test_cfg=dict(size_divisor=32),
        type='SegDataPreProcessor'),
    decode_head=dict(
        align_corners=False,
        enforce_decoder_input_project=False,
        feat_channels=256,
        in_channels=[
            256,
            512,
            1024,
            2048,
        ],
        loss_cls=dict(
            class_weight=[
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                0.1,
            ],
            loss_weight=2.0,
            reduction='mean',
            type='mmdet.CrossEntropyLoss',
            use_sigmoid=False),
        loss_dice=dict(
            activate=True,
            eps=1.0,
            loss_weight=5.0,
            naive_dice=True,
            reduction='mean',
            type='mmdet.DiceLoss',
            use_sigmoid=True),
        loss_mask=dict(
            loss_weight=5.0,
            reduction='mean',
            type='mmdet.CrossEntropyLoss',
            use_sigmoid=True),
        num_classes=150,
        num_queries=100,
        num_transformer_feat_level=3,
        out_channels=256,
        pixel_decoder=dict(
            act_cfg=dict(type='ReLU'),
            encoder=dict(
                init_cfg=None,
                layer_cfg=dict(
                    ffn_cfg=dict(
                        act_cfg=dict(inplace=True, type='ReLU'),
                        embed_dims=256,
                        feedforward_channels=1024,
                        ffn_drop=0.0,
                        num_fcs=2),
                    self_attn_cfg=dict(
                        batch_first=True,
                        dropout=0.0,
                        embed_dims=256,
                        im2col_step=64,
                        init_cfg=None,
                        norm_cfg=None,
                        num_heads=8,
                        num_levels=3,
                        num_points=4)),
                num_layers=6),
            init_cfg=None,
            norm_cfg=dict(num_groups=32, type='GN'),
            num_outs=3,
            positional_encoding=dict(normalize=True, num_feats=128),
            type='mmdet.MSDeformAttnPixelDecoder'),
        positional_encoding=dict(normalize=True, num_feats=128),
        strides=[
            4,
            8,
            16,
            32,
        ],
        train_cfg=dict(
            assigner=dict(
                match_costs=[
                    dict(type='mmdet.ClassificationCost', weight=2.0),
                    dict(
                        type='mmdet.CrossEntropyLossCost',
                        use_sigmoid=True,
                        weight=5.0),
                    dict(
                        eps=1.0,
                        pred_act=True,
                        type='mmdet.DiceCost',
                        weight=5.0),
                ],
                type='mmdet.HungarianAssigner'),
            importance_sample_ratio=0.75,
            num_points=12544,
            oversample_ratio=3.0,
            sampler=dict(type='mmdet.MaskPseudoSampler')),
        transformer_decoder=dict(
            init_cfg=None,
            layer_cfg=dict(
                cross_attn_cfg=dict(
                    attn_drop=0.0,
                    batch_first=True,
                    dropout_layer=None,
                    embed_dims=256,
                    num_heads=8,
                    proj_drop=0.0),
                ffn_cfg=dict(
                    act_cfg=dict(inplace=True, type='ReLU'),
                    add_identity=True,
                    dropout_layer=None,
                    embed_dims=256,
                    feedforward_channels=2048,
                    ffn_drop=0.0,
                    num_fcs=2),
                self_attn_cfg=dict(
                    attn_drop=0.0,
                    batch_first=True,
                    dropout_layer=None,
                    embed_dims=256,
                    num_heads=8,
                    proj_drop=0.0)),
            num_layers=9,
            return_intermediate=True),
        type='Mask2FormerHead'),
    test_cfg=dict(mode='whole'),
    train_cfg=dict(),
    type='EncoderDecoder')
num_classes = 150
optim_wrapper = dict(
    clip_grad=dict(max_norm=0.01, norm_type=2),
    optimizer=dict(
        betas=(
            0.9,
            0.999,
        ),
        eps=1e-08,
        lr=0.0001,
        type='AdamW',
        weight_decay=0.05),
    paramwise_cfg=dict(
        custom_keys=dict(
            backbone=dict(decay_mult=1.0, lr_mult=0.1),
            level_embed=dict(decay_mult=0.0, lr_mult=1.0),
            query_embed=dict(decay_mult=0.0, lr_mult=1.0),
            query_feat=dict(decay_mult=0.0, lr_mult=1.0)),
        norm_decay_mult=0.0),
    type='OptimWrapper')
optimizer = dict(
    betas=(
        0.9,
        0.999,
    ),
    eps=1e-08,
    lr=0.0001,
    type='AdamW',
    weight_decay=0.05)
param_scheduler = [
    dict(
        begin=0,
        by_epoch=False,
        end=160000,
        eta_min=0,
        power=0.9,
        type='PolyLR'),
]
resume = False
test_cfg = dict(type='TestLoop')
test_dataloader = dict(
    batch_size=1,
    dataset=dict(
        data_prefix=dict(
            img_path='images/validation',
            seg_map_path='annotations/validation'),
        data_root='data/ade/ADEChallengeData2016',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(keep_ratio=True, scale=(
                2048,
                512,
            ), type='Resize'),
            dict(reduce_zero_label=True, type='LoadAnnotations'),
            dict(type='PackSegInputs'),
        ],
        type='ADE20KDataset'),
    num_workers=4,
    persistent_workers=True,
    sampler=dict(shuffle=False, type='DefaultSampler'))
test_evaluator = dict(
    iou_metrics=[
        'mIoU',
    ], type='IoUMetric')
test_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(keep_ratio=True, scale=(
        2048,
        512,
    ), type='Resize'),
    dict(reduce_zero_label=True, type='LoadAnnotations'),
    dict(type='PackSegInputs'),
]
train_cfg = dict(
    max_iters=160000, type='IterBasedTrainLoop', val_interval=5000)
train_dataloader = dict(
    batch_size=2,
    dataset=dict(
        data_prefix=dict(
            img_path='images/training', seg_map_path='annotations/training'),
        data_root='data/ade/ADEChallengeData2016',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(reduce_zero_label=True, type='LoadAnnotations'),
            dict(
                max_size=2048,
                resize_type='ResizeShortestEdge',
                scales=[
                    256,
                    307,
                    358,
                    409,
                    460,
                    512,
                    563,
                    614,
                    665,
                    716,
                    768,
                    819,
                    870,
                    921,
                    972,
                    1024,
                ],
                type='RandomChoiceResize'),
            dict(
                cat_max_ratio=0.75, crop_size=(
                    512,
                    512,
                ), type='RandomCrop'),
            dict(prob=0.5, type='RandomFlip'),
            dict(type='PhotoMetricDistortion'),
            dict(type='PackSegInputs'),
        ],
        type='ADE20KDataset'),
    num_workers=4,
    persistent_workers=True,
    sampler=dict(shuffle=True, type='InfiniteSampler'))
train_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(reduce_zero_label=True, type='LoadAnnotations'),
    dict(
        max_size=2048,
        resize_type='ResizeShortestEdge',
        scales=[
            256,
            307,
            358,
            409,
            460,
            512,
            563,
            614,
            665,
            716,
            768,
            819,
            870,
            921,
            972,
            1024,
        ],
        type='RandomChoiceResize'),
    dict(cat_max_ratio=0.75, crop_size=(
        512,
        512,
    ), type='RandomCrop'),
    dict(prob=0.5, type='RandomFlip'),
    dict(type='PhotoMetricDistortion'),
    dict(type='PackSegInputs'),
]
tta_model = dict(type='SegTTAModel')
tta_pipeline = [
    dict(backend_args=None, type='LoadImageFromFile'),
    dict(
        transforms=[
            [
                dict(keep_ratio=True, scale_factor=0.5, type='Resize'),
                dict(keep_ratio=True, scale_factor=0.75, type='Resize'),
                dict(keep_ratio=True, scale_factor=1.0, type='Resize'),
                dict(keep_ratio=True, scale_factor=1.25, type='Resize'),
                dict(keep_ratio=True, scale_factor=1.5, type='Resize'),
                dict(keep_ratio=True, scale_factor=1.75, type='Resize'),
            ],
            [
                dict(direction='horizontal', prob=0.0, type='RandomFlip'),
                dict(direction='horizontal', prob=1.0, type='RandomFlip'),
            ],
            [
                dict(type='LoadAnnotations'),
            ],
            [
                dict(type='PackSegInputs'),
            ],
        ],
        type='TestTimeAug'),
]
val_cfg = dict(type='ValLoop')
val_dataloader = dict(
    batch_size=1,
    dataset=dict(
        data_prefix=dict(
            img_path='images/validation',
            seg_map_path='annotations/validation'),
        data_root='data/ade/ADEChallengeData2016',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(keep_ratio=True, scale=(
                2048,
                512,
            ), type='Resize'),
            dict(reduce_zero_label=True, type='LoadAnnotations'),
            dict(type='PackSegInputs'),
        ],
        type='ADE20KDataset'),
    num_workers=4,
    persistent_workers=True,
    sampler=dict(shuffle=False, type='DefaultSampler'))
val_evaluator = dict(
    iou_metrics=[
        'mIoU',
    ], type='IoUMetric')
vis_backends = [
    dict(type='LocalVisBackend'),
]
visualizer = dict(
    name='visualizer',
    type='SegLocalVisualizer',
    vis_backends=[
        dict(type='LocalVisBackend'),
    ])
work_dir = '../corruptions/work_dirs/ade20k/mask2former/mask2former_r101_8xb2-160k_ade20k-512x512/fog'

09/21 06:13:04 - mmengine - INFO - Distributed training is not used, all SyncBatchNorm (SyncBN) layers in the model will be automatically reverted to BatchNormXd layers if they are used.
09/21 06:13:04 - mmengine - INFO - Hooks will be executed in the following order:
before_run:
(VERY_HIGH   ) RuntimeInfoHook                    
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
before_train:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_train_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(NORMAL      ) DistSamplerSeedHook                
 -------------------- 
before_train_iter:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_train_iter:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(NORMAL      ) SegVisualizationHook               
(BELOW_NORMAL) LoggerHook                         
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
after_train_epoch:
(NORMAL      ) IterTimerHook                      
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_val:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
before_val_epoch:
(NORMAL      ) IterTimerHook                      
 -------------------- 
before_val_iter:
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_val_iter:
(NORMAL      ) IterTimerHook                      
(NORMAL      ) SegVisualizationHook               
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_val_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
after_val:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
after_train:
(VERY_HIGH   ) RuntimeInfoHook                    
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_test:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
before_test_epoch:
(NORMAL      ) IterTimerHook                      
 -------------------- 
before_test_iter:
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_test_iter:
(NORMAL      ) IterTimerHook                      
(NORMAL      ) SegVisualizationHook               
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_test_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_test:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
after_run:
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
09/21 06:13:04 - mmengine - WARNING - The prefix is not set in metric class IoUMetric.
Loads checkpoint by local backend from path: ../checkpoint_files/ade20k/mask2former/mask2former_r101_8xb2-160k_ade20k-512x512_20221203_233905-b7135890.pth
09/21 06:13:05 - mmengine - INFO - Load checkpoint from ../checkpoint_files/ade20k/mask2former/mask2former_r101_8xb2-160k_ade20k-512x512_20221203_233905-b7135890.pth
09/21 06:14:16 - mmengine - INFO - Iter(test) [  50/2000]    eta: 0:46:07  time: 1.0667  data_time: 0.0015  memory: 17239  
09/21 06:14:39 - mmengine - INFO - Iter(test) [ 100/2000]    eta: 0:29:39  time: 0.6585  data_time: 0.0015  memory: 17230  
09/21 06:14:49 - mmengine - INFO - Iter(test) [ 150/2000]    eta: 0:21:18  time: 0.2045  data_time: 0.0014  memory: 943  
09/21 06:15:08 - mmengine - INFO - Iter(test) [ 200/2000]    eta: 0:18:29  time: 0.2036  data_time: 0.0014  memory: 17287  
09/21 06:15:25 - mmengine - INFO - Iter(test) [ 250/2000]    eta: 0:16:17  time: 0.1992  data_time: 0.0027  memory: 17293  
09/21 06:15:39 - mmengine - INFO - Iter(test) [ 300/2000]    eta: 0:14:34  time: 0.2028  data_time: 0.0015  memory: 17234  
09/21 06:15:58 - mmengine - INFO - Iter(test) [ 350/2000]    eta: 0:13:35  time: 0.2052  data_time: 0.0014  memory: 17237  
09/21 06:16:12 - mmengine - INFO - Iter(test) [ 400/2000]    eta: 0:12:28  time: 0.2058  data_time: 0.0013  memory: 17220  
09/21 06:16:22 - mmengine - INFO - Iter(test) [ 450/2000]    eta: 0:11:18  time: 0.1942  data_time: 0.0014  memory: 955  
09/21 06:16:32 - mmengine - INFO - Iter(test) [ 500/2000]    eta: 0:10:21  time: 0.2041  data_time: 0.0014  memory: 943  
09/21 06:16:42 - mmengine - INFO - Iter(test) [ 550/2000]    eta: 0:09:33  time: 0.2000  data_time: 0.0015  memory: 1055  
09/21 06:16:53 - mmengine - INFO - Iter(test) [ 600/2000]    eta: 0:08:51  time: 0.2136  data_time: 0.0015  memory: 1053  
09/21 06:17:08 - mmengine - INFO - Iter(test) [ 650/2000]    eta: 0:08:24  time: 0.6669  data_time: 0.0014  memory: 17241  
09/21 06:17:23 - mmengine - INFO - Iter(test) [ 700/2000]    eta: 0:07:58  time: 0.2019  data_time: 0.0015  memory: 17235  
09/21 06:17:33 - mmengine - INFO - Iter(test) [ 750/2000]    eta: 0:07:26  time: 0.2094  data_time: 0.0013  memory: 1112  
09/21 06:17:43 - mmengine - INFO - Iter(test) [ 800/2000]    eta: 0:06:57  time: 0.2038  data_time: 0.0016  memory: 943  
09/21 06:17:54 - mmengine - INFO - Iter(test) [ 850/2000]    eta: 0:06:30  time: 0.2117  data_time: 0.0016  memory: 915  
09/21 06:18:04 - mmengine - INFO - Iter(test) [ 900/2000]    eta: 0:06:05  time: 0.2005  data_time: 0.0014  memory: 998  
09/21 06:18:14 - mmengine - INFO - Iter(test) [ 950/2000]    eta: 0:05:41  time: 0.2099  data_time: 0.0015  memory: 1027  
09/21 06:18:25 - mmengine - INFO - Iter(test) [1000/2000]    eta: 0:05:19  time: 0.2024  data_time: 0.0015  memory: 1027  
09/21 06:18:40 - mmengine - INFO - Iter(test) [1050/2000]    eta: 0:05:02  time: 0.2066  data_time: 0.0015  memory: 17242  
09/21 06:18:50 - mmengine - INFO - Iter(test) [1100/2000]    eta: 0:04:42  time: 0.2109  data_time: 0.0015  memory: 1024  
09/21 06:19:01 - mmengine - INFO - Iter(test) [1150/2000]    eta: 0:04:22  time: 0.2042  data_time: 0.0015  memory: 996  
09/21 06:19:11 - mmengine - INFO - Iter(test) [1200/2000]    eta: 0:04:04  time: 0.2104  data_time: 0.0014  memory: 1900  
09/21 06:19:26 - mmengine - INFO - Iter(test) [1250/2000]    eta: 0:03:48  time: 0.2006  data_time: 0.0014  memory: 17230  
09/21 06:19:37 - mmengine - INFO - Iter(test) [1300/2000]    eta: 0:03:30  time: 0.2103  data_time: 0.0014  memory: 943  
09/21 06:19:47 - mmengine - INFO - Iter(test) [1350/2000]    eta: 0:03:13  time: 0.2008  data_time: 0.0014  memory: 943  
09/21 06:19:57 - mmengine - INFO - Iter(test) [1400/2000]    eta: 0:02:56  time: 0.2127  data_time: 0.0014  memory: 1025  
09/21 06:20:07 - mmengine - INFO - Iter(test) [1450/2000]    eta: 0:02:40  time: 0.2063  data_time: 0.0014  memory: 1027  
09/21 06:20:18 - mmengine - INFO - Iter(test) [1500/2000]    eta: 0:02:24  time: 0.2089  data_time: 0.0013  memory: 941  
09/21 06:20:28 - mmengine - INFO - Iter(test) [1550/2000]    eta: 0:02:08  time: 0.2091  data_time: 0.0014  memory: 1027  
09/21 06:20:39 - mmengine - INFO - Iter(test) [1600/2000]    eta: 0:01:53  time: 0.2091  data_time: 0.0016  memory: 915  
09/21 06:20:54 - mmengine - INFO - Iter(test) [1650/2000]    eta: 0:01:39  time: 0.2060  data_time: 0.0013  memory: 17237  
09/21 06:21:04 - mmengine - INFO - Iter(test) [1700/2000]    eta: 0:01:24  time: 0.2063  data_time: 0.0016  memory: 1024  
09/21 06:21:15 - mmengine - INFO - Iter(test) [1750/2000]    eta: 0:01:09  time: 0.2117  data_time: 0.0014  memory: 1052  
09/21 06:21:25 - mmengine - INFO - Iter(test) [1800/2000]    eta: 0:00:55  time: 0.2075  data_time: 0.0016  memory: 943  
09/21 06:21:36 - mmengine - INFO - Iter(test) [1850/2000]    eta: 0:00:41  time: 0.2112  data_time: 0.0022  memory: 859  
09/21 06:21:46 - mmengine - INFO - Iter(test) [1900/2000]    eta: 0:00:27  time: 0.2051  data_time: 0.0014  memory: 1084  
09/21 06:21:56 - mmengine - INFO - Iter(test) [1950/2000]    eta: 0:00:13  time: 0.2089  data_time: 0.0013  memory: 1331  
09/21 06:22:07 - mmengine - INFO - Iter(test) [2000/2000]    eta: 0:00:00  time: 0.1999  data_time: 0.0013  memory: 1110  
09/21 06:22:07 - mmengine - INFO - per class results:
09/21 06:22:07 - mmengine - INFO - 
+---------------------+-------+-------+
|        Class        |  IoU  |  Acc  |
+---------------------+-------+-------+
|         wall        | 76.59 | 87.52 |
|       building      | 81.34 | 91.35 |
|         sky         | 94.03 | 96.98 |
|        floor        | 80.13 | 90.37 |
|         tree        | 70.33 | 85.08 |
|       ceiling       |  82.6 | 91.99 |
|         road        | 82.18 | 88.73 |
|         bed         | 89.24 | 94.55 |
|      windowpane     | 60.61 | 78.66 |
|        grass        | 60.56 | 68.19 |
|       cabinet       | 55.98 | 67.96 |
|       sidewalk      | 68.91 | 78.29 |
|        person       | 80.85 | 89.02 |
|        earth        | 32.93 | 54.71 |
|         door        | 47.46 | 63.01 |
|        table        | 61.03 | 78.44 |
|       mountain      | 54.62 | 75.89 |
|        plant        | 46.67 | 55.75 |
|       curtain       |  73.3 | 83.25 |
|        chair        | 57.16 | 75.14 |
|         car         | 84.28 |  91.6 |
|        water        | 42.79 | 67.27 |
|       painting      | 69.41 | 84.92 |
|         sofa        | 67.23 | 83.71 |
|        shelf        | 38.18 | 61.23 |
|        house        | 32.33 | 39.09 |
|         sea         | 42.82 | 68.03 |
|        mirror       | 61.45 | 69.79 |
|         rug         | 61.29 | 67.42 |
|        field        |  23.0 | 33.55 |
|       armchair      | 43.72 | 57.36 |
|         seat        |  55.7 | 74.81 |
|        fence        | 30.76 | 48.62 |
|         desk        | 46.06 | 64.57 |
|         rock        | 26.52 |  36.3 |
|       wardrobe      |  45.2 | 71.45 |
|         lamp        | 64.11 | 76.23 |
|       bathtub       | 72.97 |  83.4 |
|       railing       | 31.89 | 51.73 |
|       cushion       | 54.93 | 66.22 |
|         base        | 26.05 | 45.86 |
|         box         | 19.43 | 31.27 |
|        column       | 44.48 | 63.78 |
|      signboard      |  33.0 | 51.19 |
|   chest of drawers  | 45.27 | 65.54 |
|       counter       | 20.61 | 27.98 |
|         sand        | 24.43 | 35.51 |
|         sink        | 72.73 | 80.31 |
|      skyscraper     | 44.51 | 57.25 |
|      fireplace      | 67.87 | 78.44 |
|     refrigerator    | 72.15 | 78.83 |
|      grandstand     | 35.88 | 63.95 |
|         path        |  24.8 | 39.76 |
|        stairs       | 33.41 | 46.14 |
|        runway       | 78.97 | 91.52 |
|         case        | 31.97 | 47.44 |
|      pool table     | 92.75 | 95.84 |
|        pillow       |  57.6 | 73.47 |
|     screen door     | 67.64 | 84.41 |
|       stairway      | 37.43 | 45.57 |
|        river        | 10.06 |  15.8 |
|        bridge       | 52.49 | 78.59 |
|       bookcase      | 20.52 | 26.74 |
|        blind        | 30.79 | 34.62 |
|     coffee table    | 61.82 | 79.71 |
|        toilet       | 79.91 | 90.41 |
|        flower       | 37.86 | 61.03 |
|         book        | 42.92 | 59.05 |
|         hill        | 12.68 | 21.42 |
|        bench        | 43.96 | 71.04 |
|      countertop     | 52.02 | 72.51 |
|        stove        | 73.23 |  78.8 |
|         palm        | 53.04 | 70.33 |
|    kitchen island   | 33.74 | 73.57 |
|       computer      | 69.28 |  79.6 |
|     swivel chair    |  42.6 | 56.66 |
|         boat        | 36.38 | 49.99 |
|         bar         | 26.82 |  35.1 |
|    arcade machine   |  21.8 | 22.68 |
|        hovel        |  5.67 |  7.91 |
|         bus         | 82.51 | 91.54 |
|        towel        | 65.71 | 79.14 |
|        light        | 59.55 | 73.23 |
|        truck        | 26.07 | 39.94 |
|        tower        | 47.64 | 79.77 |
|      chandelier     | 66.45 | 79.84 |
|        awning       | 19.87 | 27.83 |
|     streetlight     | 33.61 | 44.71 |
|        booth        | 29.02 | 35.05 |
| television receiver | 65.24 | 73.45 |
|       airplane      | 54.99 | 65.43 |
|      dirt track     |  7.68 | 13.43 |
|       apparel       | 41.93 | 58.81 |
|         pole        | 25.84 | 41.09 |
|         land        | 15.57 | 27.95 |
|      bannister      | 16.62 | 24.11 |
|      escalator      | 55.86 | 67.65 |
|       ottoman       | 50.13 | 66.15 |
|        bottle       | 17.86 | 22.28 |
|        buffet       |  33.8 | 41.25 |
|        poster       | 27.59 | 48.94 |
|        stage        |  5.91 |  7.95 |
|         van         | 43.85 | 61.79 |
|         ship        |  4.16 |  6.7  |
|       fountain      |  4.15 |  4.17 |
|    conveyer belt    | 74.02 | 90.11 |
|        canopy       | 25.79 | 30.07 |
|        washer       | 64.53 | 65.52 |
|      plaything      | 29.99 | 59.24 |
|    swimming pool    | 50.56 | 70.92 |
|        stool        | 40.17 | 59.78 |
|        barrel       | 32.92 | 33.63 |
|        basket       | 37.23 | 46.13 |
|      waterfall      | 46.57 | 69.24 |
|         tent        | 83.48 | 98.84 |
|         bag         | 17.75 | 24.76 |
|       minibike      | 61.69 | 78.79 |
|        cradle       | 84.75 | 96.39 |
|         oven        | 34.71 | 79.99 |
|         ball        | 39.72 | 56.87 |
|         food        | 60.08 | 72.54 |
|         step        | 16.33 | 21.89 |
|         tank        | 44.31 | 46.96 |
|      trade name     | 19.21 | 22.69 |
|      microwave      | 39.67 | 41.57 |
|         pot         | 40.68 | 48.52 |
|        animal       |  62.2 | 66.03 |
|       bicycle       | 51.34 | 75.81 |
|         lake        |  0.07 |  0.07 |
|      dishwasher     | 55.47 | 78.63 |
|        screen       |  50.6 |  62.2 |
|       blanket       | 27.11 | 34.19 |
|      sculpture      | 47.36 | 70.53 |
|         hood        | 58.09 |  61.8 |
|        sconce       | 44.54 | 57.69 |
|         vase        | 33.99 | 53.86 |
|    traffic light    | 30.16 | 57.96 |
|         tray        | 14.85 | 26.53 |
|        ashcan       | 35.91 | 52.53 |
|         fan         | 52.73 | 79.25 |
|         pier        | 11.84 | 39.75 |
|      crt screen     |  0.0  |  0.0  |
|        plate        | 50.89 | 71.03 |
|       monitor       | 51.15 | 67.99 |
|    bulletin board   | 29.94 | 34.48 |
|        shower       |  8.71 | 22.24 |
|       radiator      | 63.54 | 72.69 |
|        glass        |  17.6 | 20.27 |
|        clock        | 49.73 | 61.23 |
|         flag        | 22.36 | 25.23 |
+---------------------+-------+-------+
09/21 06:22:07 - mmengine - INFO - Iter(test) [2000/2000]    aAcc: 81.2700  mIoU: 45.3700  mAcc: 58.4700  data_time: 0.0016  time: 0.2707
Finished processing corruption type: fog
Processing corruption type: brightness
09/21 06:22:11 - mmengine - INFO - 
------------------------------------------------------------
System environment:
    sys.platform: linux
    Python: 3.10.13 | packaged by conda-forge | (main, Dec 23 2023, 15:36:39) [GCC 12.3.0]
    CUDA available: True
    MUSA available: False
    numpy_random_seed: 1481965367
    GPU 0: Tesla V100-SXM2-32GB
    CUDA_HOME: /opt/bwhpc/common/devel/cuda/11.7
    NVCC: Cuda compilation tools, release 11.7, V11.7.99
    GCC: gcc (GCC) 8.5.0 20210514 (Red Hat 8.5.0-18)
    PyTorch: 1.13.1
    PyTorch compiling details: PyTorch built with:
  - GCC 9.3
  - C++ Version: 201402
  - Intel(R) oneAPI Math Kernel Library Version 2023.1-Product Build 20230303 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v2.6.0 (Git Hash 52b5f107dd9cf10910aaa19cb47f3abf9b349815)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - LAPACK is enabled (usually provided by MKL)
  - NNPACK is enabled
  - CPU capability usage: AVX2
  - CUDA Runtime 11.7
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_61,code=sm_61;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86;-gencode;arch=compute_37,code=compute_37
  - CuDNN 8.5
  - Magma 2.6.1
  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.7, CUDNN_VERSION=8.5.0, CXX_COMPILER=/opt/rh/devtoolset-9/root/usr/bin/c++, CXX_FLAGS= -fabi-version=11 -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -DEDGE_PROFILER_USE_KINETO -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Werror=non-virtual-dtor -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wunused-local-typedefs -Wno-unused-parameter -Wno-unused-function -Wno-unused-result -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Werror=cast-function-type -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.13.1, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, USE_ROCM=OFF, 

    TorchVision: 0.14.1
    OpenCV: 3.4.18
    MMEngine: 0.10.4

Runtime environment:
    cudnn_benchmark: True
    mp_cfg: {'mp_start_method': 'fork', 'opencv_num_threads': 0}
    dist_cfg: {'backend': 'nccl'}
    seed: 1481965367
    Distributed launcher: none
    Distributed training: False
    GPU number: 1
------------------------------------------------------------

09/21 06:22:11 - mmengine - INFO - Config:
auto_scale_lr = dict(base_batch_size=16, enable=False)
crop_size = (
    512,
    512,
)
custom_imports = dict(allow_failed_imports=False, imports='mmdet.models')
data_root = 'data/ade/ADEChallengeData2016'
dataset_type = 'ADE20KDataset'
default_hooks = dict(
    checkpoint=dict(
        by_epoch=False, interval=5000, save_best='mIoU',
        type='CheckpointHook'),
    logger=dict(interval=50, log_metric_by_epoch=False, type='LoggerHook'),
    param_scheduler=dict(type='ParamSchedulerHook'),
    sampler_seed=dict(type='DistSamplerSeedHook'),
    timer=dict(type='IterTimerHook'),
    visualization=dict(type='SegVisualizationHook'))
default_scope = 'mmseg'
embed_multi = dict(decay_mult=0.0, lr_mult=1.0)
env_cfg = dict(
    cudnn_benchmark=True,
    dist_cfg=dict(backend='nccl'),
    mp_cfg=dict(mp_start_method='fork', opencv_num_threads=0))
img_ratios = [
    0.5,
    0.75,
    1.0,
    1.25,
    1.5,
    1.75,
]
launcher = 'none'
load_from = '../checkpoint_files/ade20k/mask2former/mask2former_r101_8xb2-160k_ade20k-512x512_20221203_233905-b7135890.pth'
log_level = 'INFO'
log_processor = dict(by_epoch=False)
model = dict(
    backbone=dict(
        deep_stem=False,
        depth=101,
        frozen_stages=-1,
        init_cfg=dict(checkpoint='torchvision://resnet101', type='Pretrained'),
        norm_cfg=dict(requires_grad=False, type='SyncBN'),
        num_stages=4,
        out_indices=(
            0,
            1,
            2,
            3,
        ),
        style='pytorch',
        type='ResNet'),
    data_preprocessor=dict(
        bgr_to_rgb=True,
        corruption='brightness',
        mean=[
            123.675,
            116.28,
            103.53,
        ],
        pad_val=0,
        seg_pad_val=255,
        size=(
            512,
            512,
        ),
        std=[
            58.395,
            57.12,
            57.375,
        ],
        test_cfg=dict(size_divisor=32),
        type='SegDataPreProcessor'),
    decode_head=dict(
        align_corners=False,
        enforce_decoder_input_project=False,
        feat_channels=256,
        in_channels=[
            256,
            512,
            1024,
            2048,
        ],
        loss_cls=dict(
            class_weight=[
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                0.1,
            ],
            loss_weight=2.0,
            reduction='mean',
            type='mmdet.CrossEntropyLoss',
            use_sigmoid=False),
        loss_dice=dict(
            activate=True,
            eps=1.0,
            loss_weight=5.0,
            naive_dice=True,
            reduction='mean',
            type='mmdet.DiceLoss',
            use_sigmoid=True),
        loss_mask=dict(
            loss_weight=5.0,
            reduction='mean',
            type='mmdet.CrossEntropyLoss',
            use_sigmoid=True),
        num_classes=150,
        num_queries=100,
        num_transformer_feat_level=3,
        out_channels=256,
        pixel_decoder=dict(
            act_cfg=dict(type='ReLU'),
            encoder=dict(
                init_cfg=None,
                layer_cfg=dict(
                    ffn_cfg=dict(
                        act_cfg=dict(inplace=True, type='ReLU'),
                        embed_dims=256,
                        feedforward_channels=1024,
                        ffn_drop=0.0,
                        num_fcs=2),
                    self_attn_cfg=dict(
                        batch_first=True,
                        dropout=0.0,
                        embed_dims=256,
                        im2col_step=64,
                        init_cfg=None,
                        norm_cfg=None,
                        num_heads=8,
                        num_levels=3,
                        num_points=4)),
                num_layers=6),
            init_cfg=None,
            norm_cfg=dict(num_groups=32, type='GN'),
            num_outs=3,
            positional_encoding=dict(normalize=True, num_feats=128),
            type='mmdet.MSDeformAttnPixelDecoder'),
        positional_encoding=dict(normalize=True, num_feats=128),
        strides=[
            4,
            8,
            16,
            32,
        ],
        train_cfg=dict(
            assigner=dict(
                match_costs=[
                    dict(type='mmdet.ClassificationCost', weight=2.0),
                    dict(
                        type='mmdet.CrossEntropyLossCost',
                        use_sigmoid=True,
                        weight=5.0),
                    dict(
                        eps=1.0,
                        pred_act=True,
                        type='mmdet.DiceCost',
                        weight=5.0),
                ],
                type='mmdet.HungarianAssigner'),
            importance_sample_ratio=0.75,
            num_points=12544,
            oversample_ratio=3.0,
            sampler=dict(type='mmdet.MaskPseudoSampler')),
        transformer_decoder=dict(
            init_cfg=None,
            layer_cfg=dict(
                cross_attn_cfg=dict(
                    attn_drop=0.0,
                    batch_first=True,
                    dropout_layer=None,
                    embed_dims=256,
                    num_heads=8,
                    proj_drop=0.0),
                ffn_cfg=dict(
                    act_cfg=dict(inplace=True, type='ReLU'),
                    add_identity=True,
                    dropout_layer=None,
                    embed_dims=256,
                    feedforward_channels=2048,
                    ffn_drop=0.0,
                    num_fcs=2),
                self_attn_cfg=dict(
                    attn_drop=0.0,
                    batch_first=True,
                    dropout_layer=None,
                    embed_dims=256,
                    num_heads=8,
                    proj_drop=0.0)),
            num_layers=9,
            return_intermediate=True),
        type='Mask2FormerHead'),
    test_cfg=dict(mode='whole'),
    train_cfg=dict(),
    type='EncoderDecoder')
num_classes = 150
optim_wrapper = dict(
    clip_grad=dict(max_norm=0.01, norm_type=2),
    optimizer=dict(
        betas=(
            0.9,
            0.999,
        ),
        eps=1e-08,
        lr=0.0001,
        type='AdamW',
        weight_decay=0.05),
    paramwise_cfg=dict(
        custom_keys=dict(
            backbone=dict(decay_mult=1.0, lr_mult=0.1),
            level_embed=dict(decay_mult=0.0, lr_mult=1.0),
            query_embed=dict(decay_mult=0.0, lr_mult=1.0),
            query_feat=dict(decay_mult=0.0, lr_mult=1.0)),
        norm_decay_mult=0.0),
    type='OptimWrapper')
optimizer = dict(
    betas=(
        0.9,
        0.999,
    ),
    eps=1e-08,
    lr=0.0001,
    type='AdamW',
    weight_decay=0.05)
param_scheduler = [
    dict(
        begin=0,
        by_epoch=False,
        end=160000,
        eta_min=0,
        power=0.9,
        type='PolyLR'),
]
resume = False
test_cfg = dict(type='TestLoop')
test_dataloader = dict(
    batch_size=1,
    dataset=dict(
        data_prefix=dict(
            img_path='images/validation',
            seg_map_path='annotations/validation'),
        data_root='data/ade/ADEChallengeData2016',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(keep_ratio=True, scale=(
                2048,
                512,
            ), type='Resize'),
            dict(reduce_zero_label=True, type='LoadAnnotations'),
            dict(type='PackSegInputs'),
        ],
        type='ADE20KDataset'),
    num_workers=4,
    persistent_workers=True,
    sampler=dict(shuffle=False, type='DefaultSampler'))
test_evaluator = dict(
    iou_metrics=[
        'mIoU',
    ], type='IoUMetric')
test_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(keep_ratio=True, scale=(
        2048,
        512,
    ), type='Resize'),
    dict(reduce_zero_label=True, type='LoadAnnotations'),
    dict(type='PackSegInputs'),
]
train_cfg = dict(
    max_iters=160000, type='IterBasedTrainLoop', val_interval=5000)
train_dataloader = dict(
    batch_size=2,
    dataset=dict(
        data_prefix=dict(
            img_path='images/training', seg_map_path='annotations/training'),
        data_root='data/ade/ADEChallengeData2016',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(reduce_zero_label=True, type='LoadAnnotations'),
            dict(
                max_size=2048,
                resize_type='ResizeShortestEdge',
                scales=[
                    256,
                    307,
                    358,
                    409,
                    460,
                    512,
                    563,
                    614,
                    665,
                    716,
                    768,
                    819,
                    870,
                    921,
                    972,
                    1024,
                ],
                type='RandomChoiceResize'),
            dict(
                cat_max_ratio=0.75, crop_size=(
                    512,
                    512,
                ), type='RandomCrop'),
            dict(prob=0.5, type='RandomFlip'),
            dict(type='PhotoMetricDistortion'),
            dict(type='PackSegInputs'),
        ],
        type='ADE20KDataset'),
    num_workers=4,
    persistent_workers=True,
    sampler=dict(shuffle=True, type='InfiniteSampler'))
train_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(reduce_zero_label=True, type='LoadAnnotations'),
    dict(
        max_size=2048,
        resize_type='ResizeShortestEdge',
        scales=[
            256,
            307,
            358,
            409,
            460,
            512,
            563,
            614,
            665,
            716,
            768,
            819,
            870,
            921,
            972,
            1024,
        ],
        type='RandomChoiceResize'),
    dict(cat_max_ratio=0.75, crop_size=(
        512,
        512,
    ), type='RandomCrop'),
    dict(prob=0.5, type='RandomFlip'),
    dict(type='PhotoMetricDistortion'),
    dict(type='PackSegInputs'),
]
tta_model = dict(type='SegTTAModel')
tta_pipeline = [
    dict(backend_args=None, type='LoadImageFromFile'),
    dict(
        transforms=[
            [
                dict(keep_ratio=True, scale_factor=0.5, type='Resize'),
                dict(keep_ratio=True, scale_factor=0.75, type='Resize'),
                dict(keep_ratio=True, scale_factor=1.0, type='Resize'),
                dict(keep_ratio=True, scale_factor=1.25, type='Resize'),
                dict(keep_ratio=True, scale_factor=1.5, type='Resize'),
                dict(keep_ratio=True, scale_factor=1.75, type='Resize'),
            ],
            [
                dict(direction='horizontal', prob=0.0, type='RandomFlip'),
                dict(direction='horizontal', prob=1.0, type='RandomFlip'),
            ],
            [
                dict(type='LoadAnnotations'),
            ],
            [
                dict(type='PackSegInputs'),
            ],
        ],
        type='TestTimeAug'),
]
val_cfg = dict(type='ValLoop')
val_dataloader = dict(
    batch_size=1,
    dataset=dict(
        data_prefix=dict(
            img_path='images/validation',
            seg_map_path='annotations/validation'),
        data_root='data/ade/ADEChallengeData2016',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(keep_ratio=True, scale=(
                2048,
                512,
            ), type='Resize'),
            dict(reduce_zero_label=True, type='LoadAnnotations'),
            dict(type='PackSegInputs'),
        ],
        type='ADE20KDataset'),
    num_workers=4,
    persistent_workers=True,
    sampler=dict(shuffle=False, type='DefaultSampler'))
val_evaluator = dict(
    iou_metrics=[
        'mIoU',
    ], type='IoUMetric')
vis_backends = [
    dict(type='LocalVisBackend'),
]
visualizer = dict(
    name='visualizer',
    type='SegLocalVisualizer',
    vis_backends=[
        dict(type='LocalVisBackend'),
    ])
work_dir = '../corruptions/work_dirs/ade20k/mask2former/mask2former_r101_8xb2-160k_ade20k-512x512/brightness'

09/21 06:22:14 - mmengine - INFO - Distributed training is not used, all SyncBatchNorm (SyncBN) layers in the model will be automatically reverted to BatchNormXd layers if they are used.
09/21 06:22:14 - mmengine - INFO - Hooks will be executed in the following order:
before_run:
(VERY_HIGH   ) RuntimeInfoHook                    
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
before_train:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_train_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(NORMAL      ) DistSamplerSeedHook                
 -------------------- 
before_train_iter:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_train_iter:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(NORMAL      ) SegVisualizationHook               
(BELOW_NORMAL) LoggerHook                         
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
after_train_epoch:
(NORMAL      ) IterTimerHook                      
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_val:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
before_val_epoch:
(NORMAL      ) IterTimerHook                      
 -------------------- 
before_val_iter:
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_val_iter:
(NORMAL      ) IterTimerHook                      
(NORMAL      ) SegVisualizationHook               
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_val_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
after_val:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
after_train:
(VERY_HIGH   ) RuntimeInfoHook                    
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_test:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
before_test_epoch:
(NORMAL      ) IterTimerHook                      
 -------------------- 
before_test_iter:
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_test_iter:
(NORMAL      ) IterTimerHook                      
(NORMAL      ) SegVisualizationHook               
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_test_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_test:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
after_run:
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
09/21 06:22:14 - mmengine - WARNING - The prefix is not set in metric class IoUMetric.
Loads checkpoint by local backend from path: ../checkpoint_files/ade20k/mask2former/mask2former_r101_8xb2-160k_ade20k-512x512_20221203_233905-b7135890.pth
09/21 06:22:15 - mmengine - INFO - Load checkpoint from ../checkpoint_files/ade20k/mask2former/mask2former_r101_8xb2-160k_ade20k-512x512_20221203_233905-b7135890.pth
09/21 06:23:27 - mmengine - INFO - Iter(test) [  50/2000]    eta: 0:46:55  time: 1.0804  data_time: 0.0015  memory: 17239  
09/21 06:23:51 - mmengine - INFO - Iter(test) [ 100/2000]    eta: 0:30:14  time: 0.6754  data_time: 0.0015  memory: 17230  
09/21 06:24:01 - mmengine - INFO - Iter(test) [ 150/2000]    eta: 0:21:49  time: 0.2134  data_time: 0.0015  memory: 943  
09/21 06:24:22 - mmengine - INFO - Iter(test) [ 200/2000]    eta: 0:18:57  time: 0.2101  data_time: 0.0015  memory: 17287  
09/21 06:24:38 - mmengine - INFO - Iter(test) [ 250/2000]    eta: 0:16:40  time: 0.2158  data_time: 0.0014  memory: 17293  
09/21 06:24:53 - mmengine - INFO - Iter(test) [ 300/2000]    eta: 0:14:54  time: 0.2293  data_time: 0.0016  memory: 17234  
09/21 06:25:12 - mmengine - INFO - Iter(test) [ 350/2000]    eta: 0:13:54  time: 0.2061  data_time: 0.0014  memory: 17237  
09/21 06:25:27 - mmengine - INFO - Iter(test) [ 400/2000]    eta: 0:12:45  time: 0.2130  data_time: 0.0015  memory: 17220  
09/21 06:25:37 - mmengine - INFO - Iter(test) [ 450/2000]    eta: 0:11:34  time: 0.2065  data_time: 0.0015  memory: 955  
09/21 06:25:47 - mmengine - INFO - Iter(test) [ 500/2000]    eta: 0:10:35  time: 0.2043  data_time: 0.0015  memory: 943  
09/21 06:25:59 - mmengine - INFO - Iter(test) [ 550/2000]    eta: 0:09:49  time: 0.2241  data_time: 0.0015  memory: 1055  
09/21 06:26:09 - mmengine - INFO - Iter(test) [ 600/2000]    eta: 0:09:06  time: 0.2296  data_time: 0.0016  memory: 1053  
09/21 06:26:25 - mmengine - INFO - Iter(test) [ 650/2000]    eta: 0:08:38  time: 0.6781  data_time: 0.0014  memory: 17241  
09/21 06:26:41 - mmengine - INFO - Iter(test) [ 700/2000]    eta: 0:08:12  time: 0.2157  data_time: 0.0016  memory: 17235  
09/21 06:26:51 - mmengine - INFO - Iter(test) [ 750/2000]    eta: 0:07:40  time: 0.2150  data_time: 0.0014  memory: 1112  
09/21 06:27:02 - mmengine - INFO - Iter(test) [ 800/2000]    eta: 0:07:09  time: 0.2154  data_time: 0.0016  memory: 943  
09/21 06:27:13 - mmengine - INFO - Iter(test) [ 850/2000]    eta: 0:06:42  time: 0.2270  data_time: 0.0016  memory: 915  
09/21 06:27:23 - mmengine - INFO - Iter(test) [ 900/2000]    eta: 0:06:15  time: 0.1885  data_time: 0.0014  memory: 998  
09/21 06:27:34 - mmengine - INFO - Iter(test) [ 950/2000]    eta: 0:05:52  time: 0.2179  data_time: 0.0015  memory: 1027  
09/21 06:27:44 - mmengine - INFO - Iter(test) [1000/2000]    eta: 0:05:28  time: 0.2068  data_time: 0.0015  memory: 1027  
09/21 06:28:00 - mmengine - INFO - Iter(test) [1050/2000]    eta: 0:05:11  time: 0.2186  data_time: 0.0015  memory: 17242  
09/21 06:28:11 - mmengine - INFO - Iter(test) [1100/2000]    eta: 0:04:50  time: 0.2145  data_time: 0.0015  memory: 1024  
09/21 06:28:22 - mmengine - INFO - Iter(test) [1150/2000]    eta: 0:04:30  time: 0.2114  data_time: 0.0015  memory: 996  
09/21 06:28:32 - mmengine - INFO - Iter(test) [1200/2000]    eta: 0:04:11  time: 0.2133  data_time: 0.0014  memory: 1900  
09/21 06:28:48 - mmengine - INFO - Iter(test) [1250/2000]    eta: 0:03:55  time: 0.2047  data_time: 0.0015  memory: 17230  
09/21 06:28:58 - mmengine - INFO - Iter(test) [1300/2000]    eta: 0:03:36  time: 0.2216  data_time: 0.0014  memory: 943  
09/21 06:29:08 - mmengine - INFO - Iter(test) [1350/2000]    eta: 0:03:18  time: 0.2057  data_time: 0.0014  memory: 943  
09/21 06:29:19 - mmengine - INFO - Iter(test) [1400/2000]    eta: 0:03:01  time: 0.2226  data_time: 0.0014  memory: 1025  
09/21 06:29:29 - mmengine - INFO - Iter(test) [1450/2000]    eta: 0:02:44  time: 0.2268  data_time: 0.0014  memory: 1027  
09/21 06:29:40 - mmengine - INFO - Iter(test) [1500/2000]    eta: 0:02:28  time: 0.1987  data_time: 0.0014  memory: 941  
09/21 06:29:51 - mmengine - INFO - Iter(test) [1550/2000]    eta: 0:02:12  time: 0.2265  data_time: 0.0015  memory: 1027  
09/21 06:30:02 - mmengine - INFO - Iter(test) [1600/2000]    eta: 0:01:56  time: 0.2092  data_time: 0.0016  memory: 915  
09/21 06:30:17 - mmengine - INFO - Iter(test) [1650/2000]    eta: 0:01:42  time: 0.2069  data_time: 0.0014  memory: 17237  
09/21 06:30:28 - mmengine - INFO - Iter(test) [1700/2000]    eta: 0:01:26  time: 0.2154  data_time: 0.0016  memory: 1024  
09/21 06:30:39 - mmengine - INFO - Iter(test) [1750/2000]    eta: 0:01:11  time: 0.2151  data_time: 0.0014  memory: 1052  
09/21 06:30:49 - mmengine - INFO - Iter(test) [1800/2000]    eta: 0:00:57  time: 0.2272  data_time: 0.0016  memory: 943  
09/21 06:31:00 - mmengine - INFO - Iter(test) [1850/2000]    eta: 0:00:42  time: 0.2165  data_time: 0.0016  memory: 859  
09/21 06:31:10 - mmengine - INFO - Iter(test) [1900/2000]    eta: 0:00:28  time: 0.2132  data_time: 0.0015  memory: 1084  
09/21 06:31:21 - mmengine - INFO - Iter(test) [1950/2000]    eta: 0:00:13  time: 0.2046  data_time: 0.0015  memory: 1331  
09/21 06:31:32 - mmengine - INFO - Iter(test) [2000/2000]    eta: 0:00:00  time: 0.2012  data_time: 0.0014  memory: 1110  
09/21 06:31:32 - mmengine - INFO - per class results:
09/21 06:31:32 - mmengine - INFO - 
+---------------------+-------+-------+
|        Class        |  IoU  |  Acc  |
+---------------------+-------+-------+
|         wall        | 77.39 | 87.55 |
|       building      | 80.72 | 90.78 |
|         sky         | 93.97 | 97.38 |
|        floor        | 80.54 | 91.03 |
|         tree        | 73.27 | 85.47 |
|       ceiling       |  82.9 | 91.29 |
|         road        | 83.47 | 92.06 |
|         bed         | 87.32 | 93.07 |
|      windowpane     | 61.97 | 78.19 |
|        grass        | 66.91 | 81.74 |
|       cabinet       | 58.53 |  69.5 |
|       sidewalk      | 64.92 | 73.48 |
|        person       | 82.08 | 89.71 |
|        earth        | 32.74 | 46.96 |
|         door        | 49.38 | 66.25 |
|        table        | 60.27 | 75.88 |
|       mountain      | 61.56 |  77.0 |
|        plant        | 51.76 | 62.92 |
|       curtain       | 72.88 | 82.57 |
|        chair        | 59.97 | 74.71 |
|         car         | 83.92 | 91.22 |
|        water        | 46.71 | 66.37 |
|       painting      | 70.87 | 85.35 |
|         sofa        | 68.66 | 83.57 |
|        shelf        | 41.76 | 64.63 |
|        house        | 40.85 | 53.54 |
|         sea         | 47.39 | 69.56 |
|        mirror       | 58.43 | 69.66 |
|         rug         | 62.81 | 68.57 |
|        field        | 28.12 | 45.12 |
|       armchair      |  48.9 | 65.41 |
|         seat        | 51.46 | 73.41 |
|        fence        | 38.84 | 58.03 |
|         desk        |  48.7 | 66.16 |
|         rock        | 33.91 | 53.79 |
|       wardrobe      | 46.32 | 67.75 |
|         lamp        | 66.45 | 78.13 |
|       bathtub       | 75.11 | 83.77 |
|       railing       | 31.85 | 51.59 |
|       cushion       | 55.22 |  68.3 |
|         base        | 29.97 | 47.61 |
|         box         | 24.56 | 38.35 |
|        column       |  47.7 | 62.89 |
|      signboard      | 35.04 | 53.74 |
|   chest of drawers  | 42.24 |  65.9 |
|       counter       | 25.82 | 32.75 |
|         sand        | 36.61 | 50.37 |
|         sink        | 76.72 | 81.64 |
|      skyscraper     | 45.17 | 58.95 |
|      fireplace      | 65.31 |  72.4 |
|     refrigerator    | 74.81 | 79.93 |
|      grandstand     | 37.45 | 79.12 |
|         path        | 27.14 |  44.2 |
|        stairs       |  31.8 | 43.04 |
|        runway       | 71.48 | 93.07 |
|         case        | 34.22 | 47.28 |
|      pool table     | 87.13 | 96.88 |
|        pillow       | 58.02 | 68.36 |
|     screen door     |  57.0 | 70.99 |
|       stairway      | 35.97 | 44.14 |
|        river        |  13.1 | 25.19 |
|        bridge       | 51.39 | 77.47 |
|       bookcase      | 27.79 | 43.78 |
|        blind        | 32.15 | 35.32 |
|     coffee table    | 65.48 | 82.29 |
|        toilet       | 86.21 | 90.98 |
|        flower       |  36.6 | 53.23 |
|         book        | 48.41 | 66.48 |
|         hill        | 13.47 | 26.77 |
|        bench        | 40.68 | 65.86 |
|      countertop     | 58.81 | 73.22 |
|        stove        | 73.98 | 82.34 |
|         palm        | 58.45 | 78.95 |
|    kitchen island   |  35.1 | 79.64 |
|       computer      | 64.19 | 70.59 |
|     swivel chair    | 49.05 | 65.66 |
|         boat        | 36.44 | 50.99 |
|         bar         |  39.2 | 48.61 |
|    arcade machine   |  29.2 | 32.78 |
|        hovel        | 27.22 | 42.35 |
|         bus         | 82.42 |  92.5 |
|        towel        | 67.11 | 78.76 |
|        light        | 61.02 | 75.01 |
|        truck        | 30.94 |  47.9 |
|        tower        | 46.28 | 78.13 |
|      chandelier     | 67.46 | 81.49 |
|        awning       | 21.68 | 33.18 |
|     streetlight     |  36.6 | 47.69 |
|        booth        | 45.54 | 58.52 |
| television receiver | 69.17 | 77.26 |
|       airplane      | 55.18 | 66.91 |
|      dirt track     |  3.99 |  8.98 |
|       apparel       | 39.89 | 56.87 |
|         pole        | 25.58 | 41.04 |
|         land        |  8.76 | 11.54 |
|      bannister      | 18.79 |  26.4 |
|      escalator      | 27.02 | 30.12 |
|       ottoman       | 47.94 | 69.33 |
|        bottle       | 18.66 | 23.11 |
|        buffet       |  36.6 |  44.2 |
|        poster       | 28.34 |  42.2 |
|        stage        | 11.62 | 23.68 |
|         van         | 45.15 | 63.98 |
|         ship        |  8.01 | 12.25 |
|       fountain      |  19.8 | 22.74 |
|    conveyer belt    | 57.93 | 71.47 |
|        canopy       | 16.11 | 27.08 |
|        washer       | 64.36 | 64.99 |
|      plaything      | 27.85 | 58.59 |
|    swimming pool    | 63.09 | 70.56 |
|        stool        | 41.55 | 57.79 |
|        barrel       |  37.1 |  73.9 |
|        basket       | 40.21 | 50.52 |
|      waterfall      | 61.54 | 80.17 |
|         tent        | 83.74 |  98.5 |
|         bag         |  18.5 | 25.86 |
|       minibike      |  71.0 | 82.63 |
|        cradle       | 87.43 | 97.21 |
|         oven        | 28.34 | 80.45 |
|         ball        | 45.07 | 55.68 |
|         food        |  60.8 | 79.14 |
|         step        | 16.43 | 23.28 |
|         tank        | 58.36 | 59.85 |
|      trade name     | 28.06 | 34.87 |
|      microwave      | 41.49 | 44.34 |
|         pot         | 41.85 | 51.43 |
|        animal       |  66.5 | 69.19 |
|       bicycle       | 53.98 | 74.77 |
|         lake        | 57.58 | 62.09 |
|      dishwasher     | 66.54 | 78.06 |
|        screen       | 51.88 | 63.05 |
|       blanket       | 22.64 | 27.69 |
|      sculpture      | 46.09 | 63.93 |
|         hood        | 75.31 | 80.51 |
|        sconce       | 49.06 |  61.5 |
|         vase        | 35.05 | 53.76 |
|    traffic light    | 29.92 | 60.95 |
|         tray        | 13.53 | 25.95 |
|        ashcan       | 38.71 |  58.2 |
|         fan         |  60.6 |  80.5 |
|         pier        | 23.68 |  43.3 |
|      crt screen     |  5.57 | 10.98 |
|        plate        | 52.31 | 70.37 |
|       monitor       | 53.03 | 69.57 |
|    bulletin board   | 40.79 | 50.22 |
|        shower       | 11.62 | 20.58 |
|       radiator      | 59.76 | 71.58 |
|        glass        | 18.02 | 20.53 |
|        clock        |  38.7 | 46.46 |
|         flag        | 40.92 | 47.83 |
+---------------------+-------+-------+
09/21 06:31:32 - mmengine - INFO - Iter(test) [2000/2000]    aAcc: 82.1600  mIoU: 47.9100  mAcc: 61.3900  data_time: 0.0016  time: 0.2782
Finished processing corruption type: brightness
Processing corruption type: contrast
09/21 06:31:36 - mmengine - INFO - 
------------------------------------------------------------
System environment:
    sys.platform: linux
    Python: 3.10.13 | packaged by conda-forge | (main, Dec 23 2023, 15:36:39) [GCC 12.3.0]
    CUDA available: True
    MUSA available: False
    numpy_random_seed: 2048537881
    GPU 0: Tesla V100-SXM2-32GB
    CUDA_HOME: /opt/bwhpc/common/devel/cuda/11.7
    NVCC: Cuda compilation tools, release 11.7, V11.7.99
    GCC: gcc (GCC) 8.5.0 20210514 (Red Hat 8.5.0-18)
    PyTorch: 1.13.1
    PyTorch compiling details: PyTorch built with:
  - GCC 9.3
  - C++ Version: 201402
  - Intel(R) oneAPI Math Kernel Library Version 2023.1-Product Build 20230303 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v2.6.0 (Git Hash 52b5f107dd9cf10910aaa19cb47f3abf9b349815)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - LAPACK is enabled (usually provided by MKL)
  - NNPACK is enabled
  - CPU capability usage: AVX2
  - CUDA Runtime 11.7
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_61,code=sm_61;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86;-gencode;arch=compute_37,code=compute_37
  - CuDNN 8.5
  - Magma 2.6.1
  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.7, CUDNN_VERSION=8.5.0, CXX_COMPILER=/opt/rh/devtoolset-9/root/usr/bin/c++, CXX_FLAGS= -fabi-version=11 -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -DEDGE_PROFILER_USE_KINETO -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Werror=non-virtual-dtor -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wunused-local-typedefs -Wno-unused-parameter -Wno-unused-function -Wno-unused-result -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Werror=cast-function-type -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.13.1, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, USE_ROCM=OFF, 

    TorchVision: 0.14.1
    OpenCV: 3.4.18
    MMEngine: 0.10.4

Runtime environment:
    cudnn_benchmark: True
    mp_cfg: {'mp_start_method': 'fork', 'opencv_num_threads': 0}
    dist_cfg: {'backend': 'nccl'}
    seed: 2048537881
    Distributed launcher: none
    Distributed training: False
    GPU number: 1
------------------------------------------------------------

09/21 06:31:37 - mmengine - INFO - Config:
auto_scale_lr = dict(base_batch_size=16, enable=False)
crop_size = (
    512,
    512,
)
custom_imports = dict(allow_failed_imports=False, imports='mmdet.models')
data_root = 'data/ade/ADEChallengeData2016'
dataset_type = 'ADE20KDataset'
default_hooks = dict(
    checkpoint=dict(
        by_epoch=False, interval=5000, save_best='mIoU',
        type='CheckpointHook'),
    logger=dict(interval=50, log_metric_by_epoch=False, type='LoggerHook'),
    param_scheduler=dict(type='ParamSchedulerHook'),
    sampler_seed=dict(type='DistSamplerSeedHook'),
    timer=dict(type='IterTimerHook'),
    visualization=dict(type='SegVisualizationHook'))
default_scope = 'mmseg'
embed_multi = dict(decay_mult=0.0, lr_mult=1.0)
env_cfg = dict(
    cudnn_benchmark=True,
    dist_cfg=dict(backend='nccl'),
    mp_cfg=dict(mp_start_method='fork', opencv_num_threads=0))
img_ratios = [
    0.5,
    0.75,
    1.0,
    1.25,
    1.5,
    1.75,
]
launcher = 'none'
load_from = '../checkpoint_files/ade20k/mask2former/mask2former_r101_8xb2-160k_ade20k-512x512_20221203_233905-b7135890.pth'
log_level = 'INFO'
log_processor = dict(by_epoch=False)
model = dict(
    backbone=dict(
        deep_stem=False,
        depth=101,
        frozen_stages=-1,
        init_cfg=dict(checkpoint='torchvision://resnet101', type='Pretrained'),
        norm_cfg=dict(requires_grad=False, type='SyncBN'),
        num_stages=4,
        out_indices=(
            0,
            1,
            2,
            3,
        ),
        style='pytorch',
        type='ResNet'),
    data_preprocessor=dict(
        bgr_to_rgb=True,
        corruption='contrast',
        mean=[
            123.675,
            116.28,
            103.53,
        ],
        pad_val=0,
        seg_pad_val=255,
        size=(
            512,
            512,
        ),
        std=[
            58.395,
            57.12,
            57.375,
        ],
        test_cfg=dict(size_divisor=32),
        type='SegDataPreProcessor'),
    decode_head=dict(
        align_corners=False,
        enforce_decoder_input_project=False,
        feat_channels=256,
        in_channels=[
            256,
            512,
            1024,
            2048,
        ],
        loss_cls=dict(
            class_weight=[
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                0.1,
            ],
            loss_weight=2.0,
            reduction='mean',
            type='mmdet.CrossEntropyLoss',
            use_sigmoid=False),
        loss_dice=dict(
            activate=True,
            eps=1.0,
            loss_weight=5.0,
            naive_dice=True,
            reduction='mean',
            type='mmdet.DiceLoss',
            use_sigmoid=True),
        loss_mask=dict(
            loss_weight=5.0,
            reduction='mean',
            type='mmdet.CrossEntropyLoss',
            use_sigmoid=True),
        num_classes=150,
        num_queries=100,
        num_transformer_feat_level=3,
        out_channels=256,
        pixel_decoder=dict(
            act_cfg=dict(type='ReLU'),
            encoder=dict(
                init_cfg=None,
                layer_cfg=dict(
                    ffn_cfg=dict(
                        act_cfg=dict(inplace=True, type='ReLU'),
                        embed_dims=256,
                        feedforward_channels=1024,
                        ffn_drop=0.0,
                        num_fcs=2),
                    self_attn_cfg=dict(
                        batch_first=True,
                        dropout=0.0,
                        embed_dims=256,
                        im2col_step=64,
                        init_cfg=None,
                        norm_cfg=None,
                        num_heads=8,
                        num_levels=3,
                        num_points=4)),
                num_layers=6),
            init_cfg=None,
            norm_cfg=dict(num_groups=32, type='GN'),
            num_outs=3,
            positional_encoding=dict(normalize=True, num_feats=128),
            type='mmdet.MSDeformAttnPixelDecoder'),
        positional_encoding=dict(normalize=True, num_feats=128),
        strides=[
            4,
            8,
            16,
            32,
        ],
        train_cfg=dict(
            assigner=dict(
                match_costs=[
                    dict(type='mmdet.ClassificationCost', weight=2.0),
                    dict(
                        type='mmdet.CrossEntropyLossCost',
                        use_sigmoid=True,
                        weight=5.0),
                    dict(
                        eps=1.0,
                        pred_act=True,
                        type='mmdet.DiceCost',
                        weight=5.0),
                ],
                type='mmdet.HungarianAssigner'),
            importance_sample_ratio=0.75,
            num_points=12544,
            oversample_ratio=3.0,
            sampler=dict(type='mmdet.MaskPseudoSampler')),
        transformer_decoder=dict(
            init_cfg=None,
            layer_cfg=dict(
                cross_attn_cfg=dict(
                    attn_drop=0.0,
                    batch_first=True,
                    dropout_layer=None,
                    embed_dims=256,
                    num_heads=8,
                    proj_drop=0.0),
                ffn_cfg=dict(
                    act_cfg=dict(inplace=True, type='ReLU'),
                    add_identity=True,
                    dropout_layer=None,
                    embed_dims=256,
                    feedforward_channels=2048,
                    ffn_drop=0.0,
                    num_fcs=2),
                self_attn_cfg=dict(
                    attn_drop=0.0,
                    batch_first=True,
                    dropout_layer=None,
                    embed_dims=256,
                    num_heads=8,
                    proj_drop=0.0)),
            num_layers=9,
            return_intermediate=True),
        type='Mask2FormerHead'),
    test_cfg=dict(mode='whole'),
    train_cfg=dict(),
    type='EncoderDecoder')
num_classes = 150
optim_wrapper = dict(
    clip_grad=dict(max_norm=0.01, norm_type=2),
    optimizer=dict(
        betas=(
            0.9,
            0.999,
        ),
        eps=1e-08,
        lr=0.0001,
        type='AdamW',
        weight_decay=0.05),
    paramwise_cfg=dict(
        custom_keys=dict(
            backbone=dict(decay_mult=1.0, lr_mult=0.1),
            level_embed=dict(decay_mult=0.0, lr_mult=1.0),
            query_embed=dict(decay_mult=0.0, lr_mult=1.0),
            query_feat=dict(decay_mult=0.0, lr_mult=1.0)),
        norm_decay_mult=0.0),
    type='OptimWrapper')
optimizer = dict(
    betas=(
        0.9,
        0.999,
    ),
    eps=1e-08,
    lr=0.0001,
    type='AdamW',
    weight_decay=0.05)
param_scheduler = [
    dict(
        begin=0,
        by_epoch=False,
        end=160000,
        eta_min=0,
        power=0.9,
        type='PolyLR'),
]
resume = False
test_cfg = dict(type='TestLoop')
test_dataloader = dict(
    batch_size=1,
    dataset=dict(
        data_prefix=dict(
            img_path='images/validation',
            seg_map_path='annotations/validation'),
        data_root='data/ade/ADEChallengeData2016',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(keep_ratio=True, scale=(
                2048,
                512,
            ), type='Resize'),
            dict(reduce_zero_label=True, type='LoadAnnotations'),
            dict(type='PackSegInputs'),
        ],
        type='ADE20KDataset'),
    num_workers=4,
    persistent_workers=True,
    sampler=dict(shuffle=False, type='DefaultSampler'))
test_evaluator = dict(
    iou_metrics=[
        'mIoU',
    ], type='IoUMetric')
test_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(keep_ratio=True, scale=(
        2048,
        512,
    ), type='Resize'),
    dict(reduce_zero_label=True, type='LoadAnnotations'),
    dict(type='PackSegInputs'),
]
train_cfg = dict(
    max_iters=160000, type='IterBasedTrainLoop', val_interval=5000)
train_dataloader = dict(
    batch_size=2,
    dataset=dict(
        data_prefix=dict(
            img_path='images/training', seg_map_path='annotations/training'),
        data_root='data/ade/ADEChallengeData2016',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(reduce_zero_label=True, type='LoadAnnotations'),
            dict(
                max_size=2048,
                resize_type='ResizeShortestEdge',
                scales=[
                    256,
                    307,
                    358,
                    409,
                    460,
                    512,
                    563,
                    614,
                    665,
                    716,
                    768,
                    819,
                    870,
                    921,
                    972,
                    1024,
                ],
                type='RandomChoiceResize'),
            dict(
                cat_max_ratio=0.75, crop_size=(
                    512,
                    512,
                ), type='RandomCrop'),
            dict(prob=0.5, type='RandomFlip'),
            dict(type='PhotoMetricDistortion'),
            dict(type='PackSegInputs'),
        ],
        type='ADE20KDataset'),
    num_workers=4,
    persistent_workers=True,
    sampler=dict(shuffle=True, type='InfiniteSampler'))
train_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(reduce_zero_label=True, type='LoadAnnotations'),
    dict(
        max_size=2048,
        resize_type='ResizeShortestEdge',
        scales=[
            256,
            307,
            358,
            409,
            460,
            512,
            563,
            614,
            665,
            716,
            768,
            819,
            870,
            921,
            972,
            1024,
        ],
        type='RandomChoiceResize'),
    dict(cat_max_ratio=0.75, crop_size=(
        512,
        512,
    ), type='RandomCrop'),
    dict(prob=0.5, type='RandomFlip'),
    dict(type='PhotoMetricDistortion'),
    dict(type='PackSegInputs'),
]
tta_model = dict(type='SegTTAModel')
tta_pipeline = [
    dict(backend_args=None, type='LoadImageFromFile'),
    dict(
        transforms=[
            [
                dict(keep_ratio=True, scale_factor=0.5, type='Resize'),
                dict(keep_ratio=True, scale_factor=0.75, type='Resize'),
                dict(keep_ratio=True, scale_factor=1.0, type='Resize'),
                dict(keep_ratio=True, scale_factor=1.25, type='Resize'),
                dict(keep_ratio=True, scale_factor=1.5, type='Resize'),
                dict(keep_ratio=True, scale_factor=1.75, type='Resize'),
            ],
            [
                dict(direction='horizontal', prob=0.0, type='RandomFlip'),
                dict(direction='horizontal', prob=1.0, type='RandomFlip'),
            ],
            [
                dict(type='LoadAnnotations'),
            ],
            [
                dict(type='PackSegInputs'),
            ],
        ],
        type='TestTimeAug'),
]
val_cfg = dict(type='ValLoop')
val_dataloader = dict(
    batch_size=1,
    dataset=dict(
        data_prefix=dict(
            img_path='images/validation',
            seg_map_path='annotations/validation'),
        data_root='data/ade/ADEChallengeData2016',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(keep_ratio=True, scale=(
                2048,
                512,
            ), type='Resize'),
            dict(reduce_zero_label=True, type='LoadAnnotations'),
            dict(type='PackSegInputs'),
        ],
        type='ADE20KDataset'),
    num_workers=4,
    persistent_workers=True,
    sampler=dict(shuffle=False, type='DefaultSampler'))
val_evaluator = dict(
    iou_metrics=[
        'mIoU',
    ], type='IoUMetric')
vis_backends = [
    dict(type='LocalVisBackend'),
]
visualizer = dict(
    name='visualizer',
    type='SegLocalVisualizer',
    vis_backends=[
        dict(type='LocalVisBackend'),
    ])
work_dir = '../corruptions/work_dirs/ade20k/mask2former/mask2former_r101_8xb2-160k_ade20k-512x512/contrast'

09/21 06:31:39 - mmengine - INFO - Distributed training is not used, all SyncBatchNorm (SyncBN) layers in the model will be automatically reverted to BatchNormXd layers if they are used.
09/21 06:31:39 - mmengine - INFO - Hooks will be executed in the following order:
before_run:
(VERY_HIGH   ) RuntimeInfoHook                    
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
before_train:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_train_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(NORMAL      ) DistSamplerSeedHook                
 -------------------- 
before_train_iter:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_train_iter:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(NORMAL      ) SegVisualizationHook               
(BELOW_NORMAL) LoggerHook                         
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
after_train_epoch:
(NORMAL      ) IterTimerHook                      
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_val:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
before_val_epoch:
(NORMAL      ) IterTimerHook                      
 -------------------- 
before_val_iter:
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_val_iter:
(NORMAL      ) IterTimerHook                      
(NORMAL      ) SegVisualizationHook               
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_val_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
after_val:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
after_train:
(VERY_HIGH   ) RuntimeInfoHook                    
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_test:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
before_test_epoch:
(NORMAL      ) IterTimerHook                      
 -------------------- 
before_test_iter:
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_test_iter:
(NORMAL      ) IterTimerHook                      
(NORMAL      ) SegVisualizationHook               
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_test_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_test:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
after_run:
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
09/21 06:31:40 - mmengine - WARNING - The prefix is not set in metric class IoUMetric.
Loads checkpoint by local backend from path: ../checkpoint_files/ade20k/mask2former/mask2former_r101_8xb2-160k_ade20k-512x512_20221203_233905-b7135890.pth
09/21 06:31:40 - mmengine - INFO - Load checkpoint from ../checkpoint_files/ade20k/mask2former/mask2former_r101_8xb2-160k_ade20k-512x512_20221203_233905-b7135890.pth
09/21 06:32:45 - mmengine - INFO - Iter(test) [  50/2000]    eta: 0:42:06  time: 0.9379  data_time: 0.0014  memory: 17239  
09/21 06:33:02 - mmengine - INFO - Iter(test) [ 100/2000]    eta: 0:25:43  time: 0.5322  data_time: 0.0015  memory: 17230  
09/21 06:33:05 - mmengine - INFO - Iter(test) [ 150/2000]    eta: 0:17:26  time: 0.0743  data_time: 0.0014  memory: 943  
09/21 06:33:19 - mmengine - INFO - Iter(test) [ 200/2000]    eta: 0:14:45  time: 0.0736  data_time: 0.0015  memory: 17287  
09/21 06:33:29 - mmengine - INFO - Iter(test) [ 250/2000]    eta: 0:12:37  time: 0.0817  data_time: 0.0014  memory: 17293  
09/21 06:33:37 - mmengine - INFO - Iter(test) [ 300/2000]    eta: 0:11:01  time: 0.0822  data_time: 0.0015  memory: 17234  
09/21 06:33:50 - mmengine - INFO - Iter(test) [ 350/2000]    eta: 0:10:08  time: 0.0768  data_time: 0.0014  memory: 17237  
09/21 06:33:57 - mmengine - INFO - Iter(test) [ 400/2000]    eta: 0:09:08  time: 0.0811  data_time: 0.0014  memory: 17220  
09/21 06:34:01 - mmengine - INFO - Iter(test) [ 450/2000]    eta: 0:08:04  time: 0.0706  data_time: 0.0014  memory: 955  
09/21 06:34:05 - mmengine - INFO - Iter(test) [ 500/2000]    eta: 0:07:12  time: 0.0719  data_time: 0.0014  memory: 943  
09/21 06:34:09 - mmengine - INFO - Iter(test) [ 550/2000]    eta: 0:06:30  time: 0.0829  data_time: 0.0015  memory: 1055  
09/21 06:34:13 - mmengine - INFO - Iter(test) [ 600/2000]    eta: 0:05:55  time: 0.0826  data_time: 0.0015  memory: 1053  
09/21 06:34:21 - mmengine - INFO - Iter(test) [ 650/2000]    eta: 0:05:34  time: 0.5421  data_time: 0.0013  memory: 17241  
09/21 06:34:30 - mmengine - INFO - Iter(test) [ 700/2000]    eta: 0:05:14  time: 0.0815  data_time: 0.0015  memory: 17235  
09/21 06:34:34 - mmengine - INFO - Iter(test) [ 750/2000]    eta: 0:04:49  time: 0.0784  data_time: 0.0014  memory: 1112  
09/21 06:34:38 - mmengine - INFO - Iter(test) [ 800/2000]    eta: 0:04:25  time: 0.0801  data_time: 0.0015  memory: 943  
09/21 06:34:41 - mmengine - INFO - Iter(test) [ 850/2000]    eta: 0:04:04  time: 0.0744  data_time: 0.0016  memory: 915  
09/21 06:34:45 - mmengine - INFO - Iter(test) [ 900/2000]    eta: 0:03:45  time: 0.0695  data_time: 0.0014  memory: 998  
09/21 06:34:49 - mmengine - INFO - Iter(test) [ 950/2000]    eta: 0:03:28  time: 0.0801  data_time: 0.0014  memory: 1027  
09/21 06:34:53 - mmengine - INFO - Iter(test) [1000/2000]    eta: 0:03:12  time: 0.0786  data_time: 0.0014  memory: 1027  
09/21 06:35:01 - mmengine - INFO - Iter(test) [1050/2000]    eta: 0:03:01  time: 0.0747  data_time: 0.0015  memory: 17242  
09/21 06:35:05 - mmengine - INFO - Iter(test) [1100/2000]    eta: 0:02:47  time: 0.0726  data_time: 0.0015  memory: 1024  
09/21 06:35:09 - mmengine - INFO - Iter(test) [1150/2000]    eta: 0:02:33  time: 0.0806  data_time: 0.0014  memory: 996  
09/21 06:35:13 - mmengine - INFO - Iter(test) [1200/2000]    eta: 0:02:21  time: 0.0797  data_time: 0.0014  memory: 1900  
09/21 06:35:21 - mmengine - INFO - Iter(test) [1250/2000]    eta: 0:02:12  time: 0.0726  data_time: 0.0015  memory: 17230  
09/21 06:35:25 - mmengine - INFO - Iter(test) [1300/2000]    eta: 0:02:00  time: 0.0739  data_time: 0.0014  memory: 943  
09/21 06:35:29 - mmengine - INFO - Iter(test) [1350/2000]    eta: 0:01:49  time: 0.0790  data_time: 0.0015  memory: 943  
09/21 06:35:33 - mmengine - INFO - Iter(test) [1400/2000]    eta: 0:01:39  time: 0.0827  data_time: 0.0014  memory: 1025  
09/21 06:35:37 - mmengine - INFO - Iter(test) [1450/2000]    eta: 0:01:29  time: 0.0817  data_time: 0.0014  memory: 1027  
09/21 06:35:40 - mmengine - INFO - Iter(test) [1500/2000]    eta: 0:01:20  time: 0.0706  data_time: 0.0014  memory: 941  
09/21 06:35:44 - mmengine - INFO - Iter(test) [1550/2000]    eta: 0:01:10  time: 0.0745  data_time: 0.0015  memory: 1027  
09/21 06:35:48 - mmengine - INFO - Iter(test) [1600/2000]    eta: 0:01:01  time: 0.0812  data_time: 0.0015  memory: 915  
09/21 06:35:57 - mmengine - INFO - Iter(test) [1650/2000]    eta: 0:00:54  time: 0.0779  data_time: 0.0014  memory: 17237  
09/21 06:36:00 - mmengine - INFO - Iter(test) [1700/2000]    eta: 0:00:45  time: 0.0738  data_time: 0.0016  memory: 1024  
09/21 06:36:04 - mmengine - INFO - Iter(test) [1750/2000]    eta: 0:00:37  time: 0.0735  data_time: 0.0014  memory: 1052  
09/21 06:36:08 - mmengine - INFO - Iter(test) [1800/2000]    eta: 0:00:29  time: 0.0815  data_time: 0.0015  memory: 943  
09/21 06:36:12 - mmengine - INFO - Iter(test) [1850/2000]    eta: 0:00:22  time: 0.0823  data_time: 0.0015  memory: 859  
09/21 06:36:16 - mmengine - INFO - Iter(test) [1900/2000]    eta: 0:00:14  time: 0.0798  data_time: 0.0014  memory: 1084  
09/21 06:36:20 - mmengine - INFO - Iter(test) [1950/2000]    eta: 0:00:07  time: 0.0720  data_time: 0.0014  memory: 1331  
09/21 06:36:23 - mmengine - INFO - Iter(test) [2000/2000]    eta: 0:00:00  time: 0.0691  data_time: 0.0013  memory: 1110  
09/21 06:36:23 - mmengine - INFO - per class results:
09/21 06:36:23 - mmengine - INFO - 
+---------------------+-------+-------+
|        Class        |  IoU  |  Acc  |
+---------------------+-------+-------+
|         wall        | 76.81 |  88.1 |
|       building      | 81.32 | 91.81 |
|         sky         | 94.24 | 97.13 |
|        floor        | 79.74 | 90.33 |
|         tree        | 71.84 | 86.29 |
|       ceiling       | 82.18 | 91.69 |
|         road        | 82.28 | 88.53 |
|         bed         | 87.02 | 92.83 |
|      windowpane     | 58.43 | 75.36 |
|        grass        |  63.8 | 74.82 |
|       cabinet       |  56.3 | 68.06 |
|       sidewalk      |  66.2 | 77.26 |
|        person       | 81.44 | 88.68 |
|        earth        | 34.23 |  54.0 |
|         door        | 47.16 | 61.54 |
|        table        | 58.05 | 76.03 |
|       mountain      | 54.87 | 74.56 |
|        plant        | 48.05 | 55.35 |
|       curtain       | 74.04 | 83.68 |
|        chair        | 58.23 | 73.59 |
|         car         | 85.03 | 91.92 |
|        water        | 42.87 | 67.03 |
|       painting      | 69.35 |  84.4 |
|         sofa        | 66.65 | 82.79 |
|        shelf        | 38.65 | 62.35 |
|        house        | 37.14 | 44.63 |
|         sea         | 48.72 | 69.32 |
|        mirror       | 61.62 | 69.77 |
|         rug         | 61.95 | 68.22 |
|        field        | 24.37 | 37.98 |
|       armchair      | 42.58 | 55.55 |
|         seat        | 52.95 | 76.38 |
|        fence        | 32.35 | 53.24 |
|         desk        | 49.44 | 67.24 |
|         rock        | 24.26 | 34.56 |
|       wardrobe      | 41.99 |  65.8 |
|         lamp        | 64.21 | 75.92 |
|       bathtub       | 72.39 | 83.64 |
|       railing       | 28.88 | 47.18 |
|       cushion       | 55.66 | 67.24 |
|         base        |  24.6 | 44.63 |
|         box         | 18.67 | 27.75 |
|        column       | 47.56 | 63.47 |
|      signboard      | 34.41 | 51.45 |
|   chest of drawers  | 45.99 | 65.32 |
|       counter       | 20.14 | 27.19 |
|         sand        | 19.38 | 30.58 |
|         sink        | 73.97 | 79.89 |
|      skyscraper     | 46.16 | 58.68 |
|      fireplace      | 68.44 | 79.03 |
|     refrigerator    | 73.11 | 78.37 |
|      grandstand     | 35.03 | 64.21 |
|         path        | 24.68 | 39.27 |
|        stairs       | 33.83 | 43.18 |
|        runway       | 75.39 | 90.37 |
|         case        | 29.46 | 48.84 |
|      pool table     | 92.84 | 95.52 |
|        pillow       | 59.51 | 71.85 |
|     screen door     | 65.85 | 84.85 |
|       stairway      | 38.63 | 46.76 |
|        river        |  9.09 |  19.0 |
|        bridge       | 49.45 | 76.53 |
|       bookcase      | 20.61 |  27.6 |
|        blind        | 30.75 | 33.91 |
|     coffee table    | 61.71 | 80.29 |
|        toilet       | 87.39 | 90.75 |
|        flower       | 35.83 | 56.61 |
|         book        | 45.84 | 62.04 |
|         hill        |  5.43 | 11.22 |
|        bench        | 37.52 | 74.83 |
|      countertop     |  49.6 | 72.46 |
|        stove        | 70.86 | 75.39 |
|         palm        | 53.57 | 69.24 |
|    kitchen island   | 29.68 | 70.75 |
|       computer      | 57.95 | 66.45 |
|     swivel chair    | 45.87 | 64.27 |
|         boat        |  35.2 |  50.0 |
|         bar         | 30.32 | 33.03 |
|    arcade machine   | 29.37 | 30.07 |
|        hovel        |  6.33 |  7.83 |
|         bus         |  85.5 | 91.86 |
|        towel        | 59.61 | 76.67 |
|        light        | 58.91 | 72.69 |
|        truck        | 22.53 | 33.07 |
|        tower        | 58.41 |  78.5 |
|      chandelier     | 66.03 | 80.51 |
|        awning       | 22.12 | 28.71 |
|     streetlight     | 35.75 | 46.84 |
|        booth        | 22.07 | 26.54 |
| television receiver | 66.43 | 71.72 |
|       airplane      | 54.11 | 65.27 |
|      dirt track     |  6.56 |  8.54 |
|       apparel       |  29.2 |  38.8 |
|         pole        | 25.08 | 41.08 |
|         land        | 18.13 | 29.89 |
|      bannister      | 14.29 | 21.56 |
|      escalator      | 54.36 | 65.51 |
|       ottoman       | 45.15 | 65.71 |
|        bottle       | 17.93 | 22.09 |
|        buffet       | 31.99 | 41.09 |
|        poster       | 31.42 | 49.17 |
|        stage        |  6.3  |  8.44 |
|         van         | 43.98 | 60.19 |
|         ship        |  4.61 |  6.71 |
|       fountain      | 14.09 | 14.18 |
|    conveyer belt    | 61.43 | 72.59 |
|        canopy       | 24.78 | 28.72 |
|        washer       | 57.72 | 63.28 |
|      plaything      | 32.73 | 59.09 |
|    swimming pool    |  54.6 | 66.56 |
|        stool        | 43.23 | 59.73 |
|        barrel       | 62.44 | 73.71 |
|        basket       | 36.38 | 47.33 |
|      waterfall      | 55.12 | 61.02 |
|         tent        | 88.19 | 98.83 |
|         bag         | 20.43 | 27.46 |
|       minibike      | 64.66 | 82.39 |
|        cradle       |  83.8 | 95.72 |
|         oven        | 22.67 | 63.44 |
|         ball        | 46.34 | 59.75 |
|         food        | 59.76 | 74.34 |
|         step        | 14.12 | 20.62 |
|         tank        | 27.05 | 33.86 |
|      trade name     |  17.4 | 20.78 |
|      microwave      | 36.96 |  40.6 |
|         pot         | 40.34 | 48.07 |
|        animal       | 62.46 | 66.22 |
|       bicycle       | 49.95 |  75.7 |
|         lake        |  0.0  |  0.0  |
|      dishwasher     | 59.55 | 73.14 |
|        screen       | 60.07 | 68.29 |
|       blanket       | 25.61 |  33.0 |
|      sculpture      | 44.24 | 60.12 |
|         hood        | 58.12 | 60.78 |
|        sconce       | 47.87 | 56.19 |
|         vase        | 32.95 | 52.05 |
|    traffic light    | 28.09 | 55.41 |
|         tray        |  11.5 | 19.01 |
|        ashcan       | 37.66 | 55.59 |
|         fan         | 56.38 | 79.86 |
|         pier        | 27.06 | 39.91 |
|      crt screen     |  0.0  |  0.0  |
|        plate        | 50.98 | 69.12 |
|       monitor       | 41.45 | 69.79 |
|    bulletin board   | 28.34 | 34.02 |
|        shower       | 11.08 | 24.97 |
|       radiator      | 60.25 | 66.51 |
|        glass        | 17.08 | 19.53 |
|        clock        | 49.52 | 61.45 |
|         flag        | 29.59 | 31.72 |
+---------------------+-------+-------+
09/21 06:36:23 - mmengine - INFO - Iter(test) [2000/2000]    aAcc: 81.3100  mIoU: 45.4100  mAcc: 57.8300  data_time: 0.0016  time: 0.1414
Finished processing corruption type: contrast
Processing corruption type: elastic_transform
09/21 06:36:28 - mmengine - INFO - 
------------------------------------------------------------
System environment:
    sys.platform: linux
    Python: 3.10.13 | packaged by conda-forge | (main, Dec 23 2023, 15:36:39) [GCC 12.3.0]
    CUDA available: True
    MUSA available: False
    numpy_random_seed: 2141899828
    GPU 0: Tesla V100-SXM2-32GB
    CUDA_HOME: /opt/bwhpc/common/devel/cuda/11.7
    NVCC: Cuda compilation tools, release 11.7, V11.7.99
    GCC: gcc (GCC) 8.5.0 20210514 (Red Hat 8.5.0-18)
    PyTorch: 1.13.1
    PyTorch compiling details: PyTorch built with:
  - GCC 9.3
  - C++ Version: 201402
  - Intel(R) oneAPI Math Kernel Library Version 2023.1-Product Build 20230303 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v2.6.0 (Git Hash 52b5f107dd9cf10910aaa19cb47f3abf9b349815)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - LAPACK is enabled (usually provided by MKL)
  - NNPACK is enabled
  - CPU capability usage: AVX2
  - CUDA Runtime 11.7
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_61,code=sm_61;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86;-gencode;arch=compute_37,code=compute_37
  - CuDNN 8.5
  - Magma 2.6.1
  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.7, CUDNN_VERSION=8.5.0, CXX_COMPILER=/opt/rh/devtoolset-9/root/usr/bin/c++, CXX_FLAGS= -fabi-version=11 -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -DEDGE_PROFILER_USE_KINETO -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Werror=non-virtual-dtor -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wunused-local-typedefs -Wno-unused-parameter -Wno-unused-function -Wno-unused-result -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Werror=cast-function-type -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.13.1, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, USE_ROCM=OFF, 

    TorchVision: 0.14.1
    OpenCV: 3.4.18
    MMEngine: 0.10.4

Runtime environment:
    cudnn_benchmark: True
    mp_cfg: {'mp_start_method': 'fork', 'opencv_num_threads': 0}
    dist_cfg: {'backend': 'nccl'}
    seed: 2141899828
    Distributed launcher: none
    Distributed training: False
    GPU number: 1
------------------------------------------------------------

09/21 06:36:28 - mmengine - INFO - Config:
auto_scale_lr = dict(base_batch_size=16, enable=False)
crop_size = (
    512,
    512,
)
custom_imports = dict(allow_failed_imports=False, imports='mmdet.models')
data_root = 'data/ade/ADEChallengeData2016'
dataset_type = 'ADE20KDataset'
default_hooks = dict(
    checkpoint=dict(
        by_epoch=False, interval=5000, save_best='mIoU',
        type='CheckpointHook'),
    logger=dict(interval=50, log_metric_by_epoch=False, type='LoggerHook'),
    param_scheduler=dict(type='ParamSchedulerHook'),
    sampler_seed=dict(type='DistSamplerSeedHook'),
    timer=dict(type='IterTimerHook'),
    visualization=dict(type='SegVisualizationHook'))
default_scope = 'mmseg'
embed_multi = dict(decay_mult=0.0, lr_mult=1.0)
env_cfg = dict(
    cudnn_benchmark=True,
    dist_cfg=dict(backend='nccl'),
    mp_cfg=dict(mp_start_method='fork', opencv_num_threads=0))
img_ratios = [
    0.5,
    0.75,
    1.0,
    1.25,
    1.5,
    1.75,
]
launcher = 'none'
load_from = '../checkpoint_files/ade20k/mask2former/mask2former_r101_8xb2-160k_ade20k-512x512_20221203_233905-b7135890.pth'
log_level = 'INFO'
log_processor = dict(by_epoch=False)
model = dict(
    backbone=dict(
        deep_stem=False,
        depth=101,
        frozen_stages=-1,
        init_cfg=dict(checkpoint='torchvision://resnet101', type='Pretrained'),
        norm_cfg=dict(requires_grad=False, type='SyncBN'),
        num_stages=4,
        out_indices=(
            0,
            1,
            2,
            3,
        ),
        style='pytorch',
        type='ResNet'),
    data_preprocessor=dict(
        bgr_to_rgb=True,
        corruption='elastic_transform',
        mean=[
            123.675,
            116.28,
            103.53,
        ],
        pad_val=0,
        seg_pad_val=255,
        size=(
            512,
            512,
        ),
        std=[
            58.395,
            57.12,
            57.375,
        ],
        test_cfg=dict(size_divisor=32),
        type='SegDataPreProcessor'),
    decode_head=dict(
        align_corners=False,
        enforce_decoder_input_project=False,
        feat_channels=256,
        in_channels=[
            256,
            512,
            1024,
            2048,
        ],
        loss_cls=dict(
            class_weight=[
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                0.1,
            ],
            loss_weight=2.0,
            reduction='mean',
            type='mmdet.CrossEntropyLoss',
            use_sigmoid=False),
        loss_dice=dict(
            activate=True,
            eps=1.0,
            loss_weight=5.0,
            naive_dice=True,
            reduction='mean',
            type='mmdet.DiceLoss',
            use_sigmoid=True),
        loss_mask=dict(
            loss_weight=5.0,
            reduction='mean',
            type='mmdet.CrossEntropyLoss',
            use_sigmoid=True),
        num_classes=150,
        num_queries=100,
        num_transformer_feat_level=3,
        out_channels=256,
        pixel_decoder=dict(
            act_cfg=dict(type='ReLU'),
            encoder=dict(
                init_cfg=None,
                layer_cfg=dict(
                    ffn_cfg=dict(
                        act_cfg=dict(inplace=True, type='ReLU'),
                        embed_dims=256,
                        feedforward_channels=1024,
                        ffn_drop=0.0,
                        num_fcs=2),
                    self_attn_cfg=dict(
                        batch_first=True,
                        dropout=0.0,
                        embed_dims=256,
                        im2col_step=64,
                        init_cfg=None,
                        norm_cfg=None,
                        num_heads=8,
                        num_levels=3,
                        num_points=4)),
                num_layers=6),
            init_cfg=None,
            norm_cfg=dict(num_groups=32, type='GN'),
            num_outs=3,
            positional_encoding=dict(normalize=True, num_feats=128),
            type='mmdet.MSDeformAttnPixelDecoder'),
        positional_encoding=dict(normalize=True, num_feats=128),
        strides=[
            4,
            8,
            16,
            32,
        ],
        train_cfg=dict(
            assigner=dict(
                match_costs=[
                    dict(type='mmdet.ClassificationCost', weight=2.0),
                    dict(
                        type='mmdet.CrossEntropyLossCost',
                        use_sigmoid=True,
                        weight=5.0),
                    dict(
                        eps=1.0,
                        pred_act=True,
                        type='mmdet.DiceCost',
                        weight=5.0),
                ],
                type='mmdet.HungarianAssigner'),
            importance_sample_ratio=0.75,
            num_points=12544,
            oversample_ratio=3.0,
            sampler=dict(type='mmdet.MaskPseudoSampler')),
        transformer_decoder=dict(
            init_cfg=None,
            layer_cfg=dict(
                cross_attn_cfg=dict(
                    attn_drop=0.0,
                    batch_first=True,
                    dropout_layer=None,
                    embed_dims=256,
                    num_heads=8,
                    proj_drop=0.0),
                ffn_cfg=dict(
                    act_cfg=dict(inplace=True, type='ReLU'),
                    add_identity=True,
                    dropout_layer=None,
                    embed_dims=256,
                    feedforward_channels=2048,
                    ffn_drop=0.0,
                    num_fcs=2),
                self_attn_cfg=dict(
                    attn_drop=0.0,
                    batch_first=True,
                    dropout_layer=None,
                    embed_dims=256,
                    num_heads=8,
                    proj_drop=0.0)),
            num_layers=9,
            return_intermediate=True),
        type='Mask2FormerHead'),
    test_cfg=dict(mode='whole'),
    train_cfg=dict(),
    type='EncoderDecoder')
num_classes = 150
optim_wrapper = dict(
    clip_grad=dict(max_norm=0.01, norm_type=2),
    optimizer=dict(
        betas=(
            0.9,
            0.999,
        ),
        eps=1e-08,
        lr=0.0001,
        type='AdamW',
        weight_decay=0.05),
    paramwise_cfg=dict(
        custom_keys=dict(
            backbone=dict(decay_mult=1.0, lr_mult=0.1),
            level_embed=dict(decay_mult=0.0, lr_mult=1.0),
            query_embed=dict(decay_mult=0.0, lr_mult=1.0),
            query_feat=dict(decay_mult=0.0, lr_mult=1.0)),
        norm_decay_mult=0.0),
    type='OptimWrapper')
optimizer = dict(
    betas=(
        0.9,
        0.999,
    ),
    eps=1e-08,
    lr=0.0001,
    type='AdamW',
    weight_decay=0.05)
param_scheduler = [
    dict(
        begin=0,
        by_epoch=False,
        end=160000,
        eta_min=0,
        power=0.9,
        type='PolyLR'),
]
resume = False
test_cfg = dict(type='TestLoop')
test_dataloader = dict(
    batch_size=1,
    dataset=dict(
        data_prefix=dict(
            img_path='images/validation',
            seg_map_path='annotations/validation'),
        data_root='data/ade/ADEChallengeData2016',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(keep_ratio=True, scale=(
                2048,
                512,
            ), type='Resize'),
            dict(reduce_zero_label=True, type='LoadAnnotations'),
            dict(type='PackSegInputs'),
        ],
        type='ADE20KDataset'),
    num_workers=4,
    persistent_workers=True,
    sampler=dict(shuffle=False, type='DefaultSampler'))
test_evaluator = dict(
    iou_metrics=[
        'mIoU',
    ], type='IoUMetric')
test_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(keep_ratio=True, scale=(
        2048,
        512,
    ), type='Resize'),
    dict(reduce_zero_label=True, type='LoadAnnotations'),
    dict(type='PackSegInputs'),
]
train_cfg = dict(
    max_iters=160000, type='IterBasedTrainLoop', val_interval=5000)
train_dataloader = dict(
    batch_size=2,
    dataset=dict(
        data_prefix=dict(
            img_path='images/training', seg_map_path='annotations/training'),
        data_root='data/ade/ADEChallengeData2016',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(reduce_zero_label=True, type='LoadAnnotations'),
            dict(
                max_size=2048,
                resize_type='ResizeShortestEdge',
                scales=[
                    256,
                    307,
                    358,
                    409,
                    460,
                    512,
                    563,
                    614,
                    665,
                    716,
                    768,
                    819,
                    870,
                    921,
                    972,
                    1024,
                ],
                type='RandomChoiceResize'),
            dict(
                cat_max_ratio=0.75, crop_size=(
                    512,
                    512,
                ), type='RandomCrop'),
            dict(prob=0.5, type='RandomFlip'),
            dict(type='PhotoMetricDistortion'),
            dict(type='PackSegInputs'),
        ],
        type='ADE20KDataset'),
    num_workers=4,
    persistent_workers=True,
    sampler=dict(shuffle=True, type='InfiniteSampler'))
train_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(reduce_zero_label=True, type='LoadAnnotations'),
    dict(
        max_size=2048,
        resize_type='ResizeShortestEdge',
        scales=[
            256,
            307,
            358,
            409,
            460,
            512,
            563,
            614,
            665,
            716,
            768,
            819,
            870,
            921,
            972,
            1024,
        ],
        type='RandomChoiceResize'),
    dict(cat_max_ratio=0.75, crop_size=(
        512,
        512,
    ), type='RandomCrop'),
    dict(prob=0.5, type='RandomFlip'),
    dict(type='PhotoMetricDistortion'),
    dict(type='PackSegInputs'),
]
tta_model = dict(type='SegTTAModel')
tta_pipeline = [
    dict(backend_args=None, type='LoadImageFromFile'),
    dict(
        transforms=[
            [
                dict(keep_ratio=True, scale_factor=0.5, type='Resize'),
                dict(keep_ratio=True, scale_factor=0.75, type='Resize'),
                dict(keep_ratio=True, scale_factor=1.0, type='Resize'),
                dict(keep_ratio=True, scale_factor=1.25, type='Resize'),
                dict(keep_ratio=True, scale_factor=1.5, type='Resize'),
                dict(keep_ratio=True, scale_factor=1.75, type='Resize'),
            ],
            [
                dict(direction='horizontal', prob=0.0, type='RandomFlip'),
                dict(direction='horizontal', prob=1.0, type='RandomFlip'),
            ],
            [
                dict(type='LoadAnnotations'),
            ],
            [
                dict(type='PackSegInputs'),
            ],
        ],
        type='TestTimeAug'),
]
val_cfg = dict(type='ValLoop')
val_dataloader = dict(
    batch_size=1,
    dataset=dict(
        data_prefix=dict(
            img_path='images/validation',
            seg_map_path='annotations/validation'),
        data_root='data/ade/ADEChallengeData2016',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(keep_ratio=True, scale=(
                2048,
                512,
            ), type='Resize'),
            dict(reduce_zero_label=True, type='LoadAnnotations'),
            dict(type='PackSegInputs'),
        ],
        type='ADE20KDataset'),
    num_workers=4,
    persistent_workers=True,
    sampler=dict(shuffle=False, type='DefaultSampler'))
val_evaluator = dict(
    iou_metrics=[
        'mIoU',
    ], type='IoUMetric')
vis_backends = [
    dict(type='LocalVisBackend'),
]
visualizer = dict(
    name='visualizer',
    type='SegLocalVisualizer',
    vis_backends=[
        dict(type='LocalVisBackend'),
    ])
work_dir = '../corruptions/work_dirs/ade20k/mask2former/mask2former_r101_8xb2-160k_ade20k-512x512/elastic_transform'

09/21 06:36:31 - mmengine - INFO - Distributed training is not used, all SyncBatchNorm (SyncBN) layers in the model will be automatically reverted to BatchNormXd layers if they are used.
09/21 06:36:31 - mmengine - INFO - Hooks will be executed in the following order:
before_run:
(VERY_HIGH   ) RuntimeInfoHook                    
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
before_train:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_train_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(NORMAL      ) DistSamplerSeedHook                
 -------------------- 
before_train_iter:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_train_iter:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(NORMAL      ) SegVisualizationHook               
(BELOW_NORMAL) LoggerHook                         
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
after_train_epoch:
(NORMAL      ) IterTimerHook                      
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_val:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
before_val_epoch:
(NORMAL      ) IterTimerHook                      
 -------------------- 
before_val_iter:
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_val_iter:
(NORMAL      ) IterTimerHook                      
(NORMAL      ) SegVisualizationHook               
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_val_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
after_val:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
after_train:
(VERY_HIGH   ) RuntimeInfoHook                    
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_test:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
before_test_epoch:
(NORMAL      ) IterTimerHook                      
 -------------------- 
before_test_iter:
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_test_iter:
(NORMAL      ) IterTimerHook                      
(NORMAL      ) SegVisualizationHook               
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_test_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_test:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
after_run:
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
09/21 06:36:31 - mmengine - WARNING - The prefix is not set in metric class IoUMetric.
Loads checkpoint by local backend from path: ../checkpoint_files/ade20k/mask2former/mask2former_r101_8xb2-160k_ade20k-512x512_20221203_233905-b7135890.pth
09/21 06:36:32 - mmengine - INFO - Load checkpoint from ../checkpoint_files/ade20k/mask2former/mask2former_r101_8xb2-160k_ade20k-512x512_20221203_233905-b7135890.pth
09/21 06:38:23 - mmengine - INFO - Iter(test) [  50/2000]    eta: 1:12:39  time: 1.9216  data_time: 0.0016  memory: 17239  
09/21 06:39:26 - mmengine - INFO - Iter(test) [ 100/2000]    eta: 0:55:09  time: 1.4835  data_time: 0.0016  memory: 17230  
09/21 06:40:16 - mmengine - INFO - Iter(test) [ 150/2000]    eta: 0:46:05  time: 1.0353  data_time: 0.0015  memory: 943  
09/21 06:41:16 - mmengine - INFO - Iter(test) [ 200/2000]    eta: 0:42:39  time: 1.0056  data_time: 0.0015  memory: 17287  
09/21 06:42:10 - mmengine - INFO - Iter(test) [ 250/2000]    eta: 0:39:29  time: 0.9688  data_time: 0.0015  memory: 17293  
09/21 06:43:03 - mmengine - INFO - Iter(test) [ 300/2000]    eta: 0:36:57  time: 1.0222  data_time: 0.0015  memory: 17234  
09/21 06:44:01 - mmengine - INFO - Iter(test) [ 350/2000]    eta: 0:35:18  time: 0.9440  data_time: 0.0015  memory: 17237  
09/21 06:44:54 - mmengine - INFO - Iter(test) [ 400/2000]    eta: 0:33:30  time: 1.0214  data_time: 0.0014  memory: 17220  
09/21 06:45:39 - mmengine - INFO - Iter(test) [ 450/2000]    eta: 0:31:26  time: 0.9235  data_time: 0.0014  memory: 955  
09/21 06:46:29 - mmengine - INFO - Iter(test) [ 500/2000]    eta: 0:29:50  time: 0.9525  data_time: 0.0015  memory: 943  
09/21 06:47:21 - mmengine - INFO - Iter(test) [ 550/2000]    eta: 0:28:30  time: 1.0439  data_time: 0.0015  memory: 1055  
09/21 06:48:10 - mmengine - INFO - Iter(test) [ 600/2000]    eta: 0:27:08  time: 1.0180  data_time: 0.0016  memory: 1053  
09/21 06:49:03 - mmengine - INFO - Iter(test) [ 650/2000]    eta: 0:26:01  time: 1.4697  data_time: 0.0014  memory: 17241  
09/21 06:50:00 - mmengine - INFO - Iter(test) [ 700/2000]    eta: 0:25:00  time: 1.0353  data_time: 0.0016  memory: 17235  
09/21 06:50:50 - mmengine - INFO - Iter(test) [ 750/2000]    eta: 0:23:50  time: 0.9610  data_time: 0.0014  memory: 1112  
09/21 06:51:37 - mmengine - INFO - Iter(test) [ 800/2000]    eta: 0:22:37  time: 1.0109  data_time: 0.0016  memory: 943  
09/21 06:52:27 - mmengine - INFO - Iter(test) [ 850/2000]    eta: 0:21:31  time: 0.9972  data_time: 0.0016  memory: 915  
09/21 06:53:13 - mmengine - INFO - Iter(test) [ 900/2000]    eta: 0:20:23  time: 0.8905  data_time: 0.0014  memory: 998  
09/21 06:54:03 - mmengine - INFO - Iter(test) [ 950/2000]    eta: 0:19:21  time: 0.9705  data_time: 0.0015  memory: 1027  
09/21 06:54:51 - mmengine - INFO - Iter(test) [1000/2000]    eta: 0:18:18  time: 0.9502  data_time: 0.0015  memory: 1027  
09/21 06:55:46 - mmengine - INFO - Iter(test) [1050/2000]    eta: 0:17:24  time: 1.0210  data_time: 0.0015  memory: 17242  
09/21 06:56:36 - mmengine - INFO - Iter(test) [1100/2000]    eta: 0:16:24  time: 0.9882  data_time: 0.0015  memory: 1024  
09/21 06:57:24 - mmengine - INFO - Iter(test) [1150/2000]    eta: 0:15:25  time: 0.9889  data_time: 0.0015  memory: 996  
09/21 06:58:14 - mmengine - INFO - Iter(test) [1200/2000]    eta: 0:14:28  time: 0.9700  data_time: 0.0015  memory: 1900  
09/21 06:59:06 - mmengine - INFO - Iter(test) [1250/2000]    eta: 0:13:32  time: 0.9424  data_time: 0.0014  memory: 17230  
09/21 06:59:53 - mmengine - INFO - Iter(test) [1300/2000]    eta: 0:12:34  time: 0.9941  data_time: 0.0014  memory: 943  
09/21 07:00:41 - mmengine - INFO - Iter(test) [1350/2000]    eta: 0:11:37  time: 0.9032  data_time: 0.0014  memory: 943  
09/21 07:01:29 - mmengine - INFO - Iter(test) [1400/2000]    eta: 0:10:41  time: 0.9956  data_time: 0.0033  memory: 1025  
09/21 07:02:15 - mmengine - INFO - Iter(test) [1450/2000]    eta: 0:09:45  time: 1.0025  data_time: 0.0014  memory: 1027  
09/21 07:03:02 - mmengine - INFO - Iter(test) [1500/2000]    eta: 0:08:50  time: 0.9027  data_time: 0.0014  memory: 941  
09/21 07:03:53 - mmengine - INFO - Iter(test) [1550/2000]    eta: 0:07:56  time: 0.9905  data_time: 0.0015  memory: 1027  
09/21 07:04:40 - mmengine - INFO - Iter(test) [1600/2000]    eta: 0:07:01  time: 0.9572  data_time: 0.0016  memory: 915  
09/21 07:05:36 - mmengine - INFO - Iter(test) [1650/2000]    eta: 0:06:10  time: 0.9054  data_time: 0.0014  memory: 17237  
09/21 07:06:26 - mmengine - INFO - Iter(test) [1700/2000]    eta: 0:05:16  time: 0.9881  data_time: 0.0016  memory: 1024  
09/21 07:07:17 - mmengine - INFO - Iter(test) [1750/2000]    eta: 0:04:23  time: 1.0513  data_time: 0.0014  memory: 1052  
09/21 07:08:06 - mmengine - INFO - Iter(test) [1800/2000]    eta: 0:03:30  time: 1.0080  data_time: 0.0016  memory: 943  
09/21 07:08:56 - mmengine - INFO - Iter(test) [1850/2000]    eta: 0:02:37  time: 0.9852  data_time: 0.0016  memory: 859  
09/21 07:09:42 - mmengine - INFO - Iter(test) [1900/2000]    eta: 0:01:44  time: 0.9569  data_time: 0.0015  memory: 1084  
09/21 07:10:32 - mmengine - INFO - Iter(test) [1950/2000]    eta: 0:00:52  time: 0.9575  data_time: 0.0014  memory: 1331  
09/21 07:11:18 - mmengine - INFO - Iter(test) [2000/2000]    eta: 0:00:00  time: 0.8770  data_time: 0.0013  memory: 1110  
09/21 07:11:18 - mmengine - INFO - per class results:
09/21 07:11:18 - mmengine - INFO - 
+---------------------+-------+-------+
|        Class        |  IoU  |  Acc  |
+---------------------+-------+-------+
|         wall        | 61.59 | 76.32 |
|       building      | 71.75 | 86.36 |
|         sky         |  84.0 | 90.76 |
|        floor        | 67.26 | 81.58 |
|         tree        | 61.69 | 76.59 |
|       ceiling       | 68.22 | 81.64 |
|         road        |  75.4 |  86.0 |
|         bed         | 74.78 | 85.49 |
|      windowpane     |  46.9 | 65.59 |
|        grass        | 59.52 | 73.85 |
|       cabinet       | 46.44 | 58.91 |
|       sidewalk      |  52.1 | 65.82 |
|        person       | 58.94 | 73.31 |
|        earth        | 32.06 | 44.96 |
|         door        | 38.43 | 54.03 |
|        table        |  41.6 |  59.0 |
|       mountain      | 50.48 | 64.03 |
|        plant        | 40.26 | 53.89 |
|       curtain       | 51.14 | 68.39 |
|        chair        |  40.5 | 59.11 |
|         car         |  61.1 | 76.55 |
|        water        | 50.63 | 70.37 |
|       painting      |  44.5 | 62.87 |
|         sofa        | 53.91 | 73.35 |
|        shelf        | 32.79 | 57.18 |
|        house        | 28.91 | 39.09 |
|         sea         | 50.49 |  68.3 |
|        mirror       | 52.03 | 64.11 |
|         rug         | 44.29 | 54.23 |
|        field        | 25.09 | 47.61 |
|       armchair      | 34.99 | 48.73 |
|         seat        | 55.92 | 78.16 |
|        fence        | 28.61 | 48.13 |
|         desk        | 39.23 | 59.89 |
|         rock        | 34.41 | 60.63 |
|       wardrobe      | 37.28 | 58.17 |
|         lamp        | 29.38 | 45.07 |
|       bathtub       | 60.04 | 72.48 |
|       railing       | 21.29 | 40.83 |
|       cushion       | 37.21 | 50.16 |
|         base        | 24.82 |  44.3 |
|         box         | 15.62 |  24.7 |
|        column       | 24.88 | 40.31 |
|      signboard      | 18.45 | 34.52 |
|   chest of drawers  |  35.2 | 57.43 |
|       counter       | 21.39 |  31.9 |
|         sand        | 36.67 | 50.71 |
|         sink        | 43.75 | 57.03 |
|      skyscraper     | 35.42 | 48.52 |
|      fireplace      | 51.19 |  66.4 |
|     refrigerator    | 64.09 | 77.28 |
|      grandstand     | 43.67 | 70.51 |
|         path        |  15.3 | 28.49 |
|        stairs       | 15.05 | 21.56 |
|        runway       | 68.79 | 89.88 |
|         case        | 39.32 | 50.24 |
|      pool table     | 68.07 | 84.35 |
|        pillow       | 37.68 | 51.16 |
|     screen door     | 39.83 | 57.86 |
|       stairway      | 24.43 | 34.93 |
|        river        | 11.65 | 19.02 |
|        bridge       | 40.35 | 66.48 |
|       bookcase      | 17.74 | 29.34 |
|        blind        |  19.0 | 21.34 |
|     coffee table    | 46.08 | 66.73 |
|        toilet       | 56.08 | 70.39 |
|        flower       | 22.28 |  34.8 |
|         book        | 28.04 | 42.86 |
|         hill        | 12.29 | 24.83 |
|        bench        | 31.83 | 50.11 |
|      countertop     |  31.1 | 48.06 |
|        stove        | 46.05 | 72.61 |
|         palm        | 37.87 | 62.75 |
|    kitchen island   | 28.26 | 60.35 |
|       computer      | 48.86 | 62.06 |
|     swivel chair    | 31.75 | 46.29 |
|         boat        | 36.52 | 49.09 |
|         bar         | 45.12 | 54.69 |
|    arcade machine   | 27.52 | 32.89 |
|        hovel        |  29.5 | 42.39 |
|         bus         | 67.18 | 82.25 |
|        towel        |  35.6 | 54.38 |
|        light        | 17.29 | 28.63 |
|        truck        | 25.63 | 47.65 |
|        tower        | 27.55 |  46.7 |
|      chandelier     | 39.45 | 54.42 |
|        awning       | 18.86 | 28.01 |
|     streetlight     |  9.22 | 17.16 |
|        booth        | 10.08 | 11.78 |
| television receiver | 41.41 | 57.69 |
|       airplane      |  42.2 | 59.33 |
|      dirt track     |  5.82 |  9.68 |
|       apparel       | 25.37 | 51.94 |
|         pole        |  5.58 |  10.4 |
|         land        |  0.0  |  0.0  |
|      bannister      |  2.89 |  5.94 |
|      escalator      | 20.19 | 23.65 |
|       ottoman       | 42.68 | 65.73 |
|        bottle       | 10.13 | 15.42 |
|        buffet       |  35.2 | 40.18 |
|        poster       | 20.66 | 36.28 |
|        stage        |  6.42 | 12.21 |
|         van         | 35.93 | 50.24 |
|         ship        |  3.34 |  6.42 |
|       fountain      | 31.06 | 33.03 |
|    conveyer belt    | 41.75 | 56.29 |
|        canopy       | 16.02 |  20.3 |
|        washer       | 58.42 | 60.72 |
|      plaything      | 19.85 | 46.65 |
|    swimming pool    | 41.42 | 68.67 |
|        stool        | 26.15 | 42.44 |
|        barrel       |  7.49 | 69.68 |
|        basket       | 24.84 | 34.26 |
|      waterfall      | 53.23 | 73.57 |
|         tent        | 67.38 | 92.69 |
|         bag         | 13.51 | 21.89 |
|       minibike      | 44.69 | 61.62 |
|        cradle       | 54.73 | 72.81 |
|         oven        | 36.03 | 61.25 |
|         ball        |  33.5 | 50.17 |
|         food        | 48.47 | 65.91 |
|         step        | 15.31 | 21.85 |
|         tank        | 42.73 | 48.43 |
|      trade name     | 14.41 | 19.05 |
|      microwave      |  28.3 | 31.28 |
|         pot         |  27.7 |  40.0 |
|        animal       | 52.18 | 60.91 |
|       bicycle       | 36.22 |  56.6 |
|         lake        |  53.6 | 55.48 |
|      dishwasher     |  43.8 | 69.98 |
|        screen       | 38.82 | 55.09 |
|       blanket       |  8.72 | 13.37 |
|      sculpture      | 32.85 | 51.35 |
|         hood        |  43.0 |  66.2 |
|        sconce       | 22.93 | 35.11 |
|         vase        |  15.0 | 27.82 |
|    traffic light    | 14.26 | 29.66 |
|         tray        |  7.47 | 15.57 |
|        ashcan       | 23.95 |  41.8 |
|         fan         | 21.79 | 39.79 |
|         pier        |  7.7  | 12.67 |
|      crt screen     |  2.99 |  9.83 |
|        plate        | 28.31 | 44.87 |
|       monitor       |  7.37 |  9.3  |
|    bulletin board   | 35.67 | 44.24 |
|        shower       |  0.69 |  6.61 |
|       radiator      | 31.28 | 42.66 |
|        glass        | 10.82 | 13.56 |
|        clock        | 17.32 | 26.26 |
|         flag        | 13.95 | 19.18 |
+---------------------+-------+-------+
09/21 07:11:18 - mmengine - INFO - Iter(test) [2000/2000]    aAcc: 72.8300  mIoU: 34.5500  mAcc: 48.7800  data_time: 0.0017  time: 1.0432
Finished processing corruption type: elastic_transform
Processing corruption type: pixelate
09/21 07:11:23 - mmengine - INFO - 
------------------------------------------------------------
System environment:
    sys.platform: linux
    Python: 3.10.13 | packaged by conda-forge | (main, Dec 23 2023, 15:36:39) [GCC 12.3.0]
    CUDA available: True
    MUSA available: False
    numpy_random_seed: 1942438758
    GPU 0: Tesla V100-SXM2-32GB
    CUDA_HOME: /opt/bwhpc/common/devel/cuda/11.7
    NVCC: Cuda compilation tools, release 11.7, V11.7.99
    GCC: gcc (GCC) 8.5.0 20210514 (Red Hat 8.5.0-18)
    PyTorch: 1.13.1
    PyTorch compiling details: PyTorch built with:
  - GCC 9.3
  - C++ Version: 201402
  - Intel(R) oneAPI Math Kernel Library Version 2023.1-Product Build 20230303 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v2.6.0 (Git Hash 52b5f107dd9cf10910aaa19cb47f3abf9b349815)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - LAPACK is enabled (usually provided by MKL)
  - NNPACK is enabled
  - CPU capability usage: AVX2
  - CUDA Runtime 11.7
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_61,code=sm_61;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86;-gencode;arch=compute_37,code=compute_37
  - CuDNN 8.5
  - Magma 2.6.1
  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.7, CUDNN_VERSION=8.5.0, CXX_COMPILER=/opt/rh/devtoolset-9/root/usr/bin/c++, CXX_FLAGS= -fabi-version=11 -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -DEDGE_PROFILER_USE_KINETO -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Werror=non-virtual-dtor -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wunused-local-typedefs -Wno-unused-parameter -Wno-unused-function -Wno-unused-result -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Werror=cast-function-type -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.13.1, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, USE_ROCM=OFF, 

    TorchVision: 0.14.1
    OpenCV: 3.4.18
    MMEngine: 0.10.4

Runtime environment:
    cudnn_benchmark: True
    mp_cfg: {'mp_start_method': 'fork', 'opencv_num_threads': 0}
    dist_cfg: {'backend': 'nccl'}
    seed: 1942438758
    Distributed launcher: none
    Distributed training: False
    GPU number: 1
------------------------------------------------------------

09/21 07:11:23 - mmengine - INFO - Config:
auto_scale_lr = dict(base_batch_size=16, enable=False)
crop_size = (
    512,
    512,
)
custom_imports = dict(allow_failed_imports=False, imports='mmdet.models')
data_root = 'data/ade/ADEChallengeData2016'
dataset_type = 'ADE20KDataset'
default_hooks = dict(
    checkpoint=dict(
        by_epoch=False, interval=5000, save_best='mIoU',
        type='CheckpointHook'),
    logger=dict(interval=50, log_metric_by_epoch=False, type='LoggerHook'),
    param_scheduler=dict(type='ParamSchedulerHook'),
    sampler_seed=dict(type='DistSamplerSeedHook'),
    timer=dict(type='IterTimerHook'),
    visualization=dict(type='SegVisualizationHook'))
default_scope = 'mmseg'
embed_multi = dict(decay_mult=0.0, lr_mult=1.0)
env_cfg = dict(
    cudnn_benchmark=True,
    dist_cfg=dict(backend='nccl'),
    mp_cfg=dict(mp_start_method='fork', opencv_num_threads=0))
img_ratios = [
    0.5,
    0.75,
    1.0,
    1.25,
    1.5,
    1.75,
]
launcher = 'none'
load_from = '../checkpoint_files/ade20k/mask2former/mask2former_r101_8xb2-160k_ade20k-512x512_20221203_233905-b7135890.pth'
log_level = 'INFO'
log_processor = dict(by_epoch=False)
model = dict(
    backbone=dict(
        deep_stem=False,
        depth=101,
        frozen_stages=-1,
        init_cfg=dict(checkpoint='torchvision://resnet101', type='Pretrained'),
        norm_cfg=dict(requires_grad=False, type='SyncBN'),
        num_stages=4,
        out_indices=(
            0,
            1,
            2,
            3,
        ),
        style='pytorch',
        type='ResNet'),
    data_preprocessor=dict(
        bgr_to_rgb=True,
        corruption='pixelate',
        mean=[
            123.675,
            116.28,
            103.53,
        ],
        pad_val=0,
        seg_pad_val=255,
        size=(
            512,
            512,
        ),
        std=[
            58.395,
            57.12,
            57.375,
        ],
        test_cfg=dict(size_divisor=32),
        type='SegDataPreProcessor'),
    decode_head=dict(
        align_corners=False,
        enforce_decoder_input_project=False,
        feat_channels=256,
        in_channels=[
            256,
            512,
            1024,
            2048,
        ],
        loss_cls=dict(
            class_weight=[
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                0.1,
            ],
            loss_weight=2.0,
            reduction='mean',
            type='mmdet.CrossEntropyLoss',
            use_sigmoid=False),
        loss_dice=dict(
            activate=True,
            eps=1.0,
            loss_weight=5.0,
            naive_dice=True,
            reduction='mean',
            type='mmdet.DiceLoss',
            use_sigmoid=True),
        loss_mask=dict(
            loss_weight=5.0,
            reduction='mean',
            type='mmdet.CrossEntropyLoss',
            use_sigmoid=True),
        num_classes=150,
        num_queries=100,
        num_transformer_feat_level=3,
        out_channels=256,
        pixel_decoder=dict(
            act_cfg=dict(type='ReLU'),
            encoder=dict(
                init_cfg=None,
                layer_cfg=dict(
                    ffn_cfg=dict(
                        act_cfg=dict(inplace=True, type='ReLU'),
                        embed_dims=256,
                        feedforward_channels=1024,
                        ffn_drop=0.0,
                        num_fcs=2),
                    self_attn_cfg=dict(
                        batch_first=True,
                        dropout=0.0,
                        embed_dims=256,
                        im2col_step=64,
                        init_cfg=None,
                        norm_cfg=None,
                        num_heads=8,
                        num_levels=3,
                        num_points=4)),
                num_layers=6),
            init_cfg=None,
            norm_cfg=dict(num_groups=32, type='GN'),
            num_outs=3,
            positional_encoding=dict(normalize=True, num_feats=128),
            type='mmdet.MSDeformAttnPixelDecoder'),
        positional_encoding=dict(normalize=True, num_feats=128),
        strides=[
            4,
            8,
            16,
            32,
        ],
        train_cfg=dict(
            assigner=dict(
                match_costs=[
                    dict(type='mmdet.ClassificationCost', weight=2.0),
                    dict(
                        type='mmdet.CrossEntropyLossCost',
                        use_sigmoid=True,
                        weight=5.0),
                    dict(
                        eps=1.0,
                        pred_act=True,
                        type='mmdet.DiceCost',
                        weight=5.0),
                ],
                type='mmdet.HungarianAssigner'),
            importance_sample_ratio=0.75,
            num_points=12544,
            oversample_ratio=3.0,
            sampler=dict(type='mmdet.MaskPseudoSampler')),
        transformer_decoder=dict(
            init_cfg=None,
            layer_cfg=dict(
                cross_attn_cfg=dict(
                    attn_drop=0.0,
                    batch_first=True,
                    dropout_layer=None,
                    embed_dims=256,
                    num_heads=8,
                    proj_drop=0.0),
                ffn_cfg=dict(
                    act_cfg=dict(inplace=True, type='ReLU'),
                    add_identity=True,
                    dropout_layer=None,
                    embed_dims=256,
                    feedforward_channels=2048,
                    ffn_drop=0.0,
                    num_fcs=2),
                self_attn_cfg=dict(
                    attn_drop=0.0,
                    batch_first=True,
                    dropout_layer=None,
                    embed_dims=256,
                    num_heads=8,
                    proj_drop=0.0)),
            num_layers=9,
            return_intermediate=True),
        type='Mask2FormerHead'),
    test_cfg=dict(mode='whole'),
    train_cfg=dict(),
    type='EncoderDecoder')
num_classes = 150
optim_wrapper = dict(
    clip_grad=dict(max_norm=0.01, norm_type=2),
    optimizer=dict(
        betas=(
            0.9,
            0.999,
        ),
        eps=1e-08,
        lr=0.0001,
        type='AdamW',
        weight_decay=0.05),
    paramwise_cfg=dict(
        custom_keys=dict(
            backbone=dict(decay_mult=1.0, lr_mult=0.1),
            level_embed=dict(decay_mult=0.0, lr_mult=1.0),
            query_embed=dict(decay_mult=0.0, lr_mult=1.0),
            query_feat=dict(decay_mult=0.0, lr_mult=1.0)),
        norm_decay_mult=0.0),
    type='OptimWrapper')
optimizer = dict(
    betas=(
        0.9,
        0.999,
    ),
    eps=1e-08,
    lr=0.0001,
    type='AdamW',
    weight_decay=0.05)
param_scheduler = [
    dict(
        begin=0,
        by_epoch=False,
        end=160000,
        eta_min=0,
        power=0.9,
        type='PolyLR'),
]
resume = False
test_cfg = dict(type='TestLoop')
test_dataloader = dict(
    batch_size=1,
    dataset=dict(
        data_prefix=dict(
            img_path='images/validation',
            seg_map_path='annotations/validation'),
        data_root='data/ade/ADEChallengeData2016',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(keep_ratio=True, scale=(
                2048,
                512,
            ), type='Resize'),
            dict(reduce_zero_label=True, type='LoadAnnotations'),
            dict(type='PackSegInputs'),
        ],
        type='ADE20KDataset'),
    num_workers=4,
    persistent_workers=True,
    sampler=dict(shuffle=False, type='DefaultSampler'))
test_evaluator = dict(
    iou_metrics=[
        'mIoU',
    ], type='IoUMetric')
test_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(keep_ratio=True, scale=(
        2048,
        512,
    ), type='Resize'),
    dict(reduce_zero_label=True, type='LoadAnnotations'),
    dict(type='PackSegInputs'),
]
train_cfg = dict(
    max_iters=160000, type='IterBasedTrainLoop', val_interval=5000)
train_dataloader = dict(
    batch_size=2,
    dataset=dict(
        data_prefix=dict(
            img_path='images/training', seg_map_path='annotations/training'),
        data_root='data/ade/ADEChallengeData2016',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(reduce_zero_label=True, type='LoadAnnotations'),
            dict(
                max_size=2048,
                resize_type='ResizeShortestEdge',
                scales=[
                    256,
                    307,
                    358,
                    409,
                    460,
                    512,
                    563,
                    614,
                    665,
                    716,
                    768,
                    819,
                    870,
                    921,
                    972,
                    1024,
                ],
                type='RandomChoiceResize'),
            dict(
                cat_max_ratio=0.75, crop_size=(
                    512,
                    512,
                ), type='RandomCrop'),
            dict(prob=0.5, type='RandomFlip'),
            dict(type='PhotoMetricDistortion'),
            dict(type='PackSegInputs'),
        ],
        type='ADE20KDataset'),
    num_workers=4,
    persistent_workers=True,
    sampler=dict(shuffle=True, type='InfiniteSampler'))
train_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(reduce_zero_label=True, type='LoadAnnotations'),
    dict(
        max_size=2048,
        resize_type='ResizeShortestEdge',
        scales=[
            256,
            307,
            358,
            409,
            460,
            512,
            563,
            614,
            665,
            716,
            768,
            819,
            870,
            921,
            972,
            1024,
        ],
        type='RandomChoiceResize'),
    dict(cat_max_ratio=0.75, crop_size=(
        512,
        512,
    ), type='RandomCrop'),
    dict(prob=0.5, type='RandomFlip'),
    dict(type='PhotoMetricDistortion'),
    dict(type='PackSegInputs'),
]
tta_model = dict(type='SegTTAModel')
tta_pipeline = [
    dict(backend_args=None, type='LoadImageFromFile'),
    dict(
        transforms=[
            [
                dict(keep_ratio=True, scale_factor=0.5, type='Resize'),
                dict(keep_ratio=True, scale_factor=0.75, type='Resize'),
                dict(keep_ratio=True, scale_factor=1.0, type='Resize'),
                dict(keep_ratio=True, scale_factor=1.25, type='Resize'),
                dict(keep_ratio=True, scale_factor=1.5, type='Resize'),
                dict(keep_ratio=True, scale_factor=1.75, type='Resize'),
            ],
            [
                dict(direction='horizontal', prob=0.0, type='RandomFlip'),
                dict(direction='horizontal', prob=1.0, type='RandomFlip'),
            ],
            [
                dict(type='LoadAnnotations'),
            ],
            [
                dict(type='PackSegInputs'),
            ],
        ],
        type='TestTimeAug'),
]
val_cfg = dict(type='ValLoop')
val_dataloader = dict(
    batch_size=1,
    dataset=dict(
        data_prefix=dict(
            img_path='images/validation',
            seg_map_path='annotations/validation'),
        data_root='data/ade/ADEChallengeData2016',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(keep_ratio=True, scale=(
                2048,
                512,
            ), type='Resize'),
            dict(reduce_zero_label=True, type='LoadAnnotations'),
            dict(type='PackSegInputs'),
        ],
        type='ADE20KDataset'),
    num_workers=4,
    persistent_workers=True,
    sampler=dict(shuffle=False, type='DefaultSampler'))
val_evaluator = dict(
    iou_metrics=[
        'mIoU',
    ], type='IoUMetric')
vis_backends = [
    dict(type='LocalVisBackend'),
]
visualizer = dict(
    name='visualizer',
    type='SegLocalVisualizer',
    vis_backends=[
        dict(type='LocalVisBackend'),
    ])
work_dir = '../corruptions/work_dirs/ade20k/mask2former/mask2former_r101_8xb2-160k_ade20k-512x512/pixelate'

09/21 07:11:26 - mmengine - INFO - Distributed training is not used, all SyncBatchNorm (SyncBN) layers in the model will be automatically reverted to BatchNormXd layers if they are used.
09/21 07:11:26 - mmengine - INFO - Hooks will be executed in the following order:
before_run:
(VERY_HIGH   ) RuntimeInfoHook                    
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
before_train:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_train_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(NORMAL      ) DistSamplerSeedHook                
 -------------------- 
before_train_iter:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_train_iter:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(NORMAL      ) SegVisualizationHook               
(BELOW_NORMAL) LoggerHook                         
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
after_train_epoch:
(NORMAL      ) IterTimerHook                      
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_val:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
before_val_epoch:
(NORMAL      ) IterTimerHook                      
 -------------------- 
before_val_iter:
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_val_iter:
(NORMAL      ) IterTimerHook                      
(NORMAL      ) SegVisualizationHook               
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_val_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
after_val:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
after_train:
(VERY_HIGH   ) RuntimeInfoHook                    
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_test:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
before_test_epoch:
(NORMAL      ) IterTimerHook                      
 -------------------- 
before_test_iter:
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_test_iter:
(NORMAL      ) IterTimerHook                      
(NORMAL      ) SegVisualizationHook               
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_test_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_test:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
after_run:
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
09/21 07:11:26 - mmengine - WARNING - The prefix is not set in metric class IoUMetric.
Loads checkpoint by local backend from path: ../checkpoint_files/ade20k/mask2former/mask2former_r101_8xb2-160k_ade20k-512x512_20221203_233905-b7135890.pth
09/21 07:11:27 - mmengine - INFO - Load checkpoint from ../checkpoint_files/ade20k/mask2former/mask2former_r101_8xb2-160k_ade20k-512x512_20221203_233905-b7135890.pth
09/21 07:12:32 - mmengine - INFO - Iter(test) [  50/2000]    eta: 0:41:56  time: 0.9336  data_time: 0.0015  memory: 17239  
09/21 07:12:48 - mmengine - INFO - Iter(test) [ 100/2000]    eta: 0:25:30  time: 0.5305  data_time: 0.0016  memory: 17230  
09/21 07:12:51 - mmengine - INFO - Iter(test) [ 150/2000]    eta: 0:17:13  time: 0.0640  data_time: 0.0014  memory: 943  
09/21 07:13:04 - mmengine - INFO - Iter(test) [ 200/2000]    eta: 0:14:32  time: 0.0740  data_time: 0.0029  memory: 17287  
09/21 07:13:14 - mmengine - INFO - Iter(test) [ 250/2000]    eta: 0:12:25  time: 0.0640  data_time: 0.0014  memory: 17293  
09/21 07:13:22 - mmengine - INFO - Iter(test) [ 300/2000]    eta: 0:10:48  time: 0.0732  data_time: 0.0015  memory: 17234  
09/21 07:13:34 - mmengine - INFO - Iter(test) [ 350/2000]    eta: 0:09:56  time: 0.0622  data_time: 0.0014  memory: 17237  
09/21 07:13:41 - mmengine - INFO - Iter(test) [ 400/2000]    eta: 0:08:55  time: 0.0721  data_time: 0.0014  memory: 17220  
09/21 07:13:45 - mmengine - INFO - Iter(test) [ 450/2000]    eta: 0:07:53  time: 0.0698  data_time: 0.0014  memory: 955  
09/21 07:13:48 - mmengine - INFO - Iter(test) [ 500/2000]    eta: 0:07:02  time: 0.0707  data_time: 0.0014  memory: 943  
09/21 07:13:52 - mmengine - INFO - Iter(test) [ 550/2000]    eta: 0:06:20  time: 0.0646  data_time: 0.0015  memory: 1055  
09/21 07:13:55 - mmengine - INFO - Iter(test) [ 600/2000]    eta: 0:05:44  time: 0.0647  data_time: 0.0015  memory: 1053  
09/21 07:14:03 - mmengine - INFO - Iter(test) [ 650/2000]    eta: 0:05:22  time: 0.5339  data_time: 0.0013  memory: 17241  
09/21 07:14:11 - mmengine - INFO - Iter(test) [ 700/2000]    eta: 0:05:03  time: 0.0642  data_time: 0.0015  memory: 17235  
09/21 07:14:14 - mmengine - INFO - Iter(test) [ 750/2000]    eta: 0:04:37  time: 0.0656  data_time: 0.0036  memory: 1112  
09/21 07:14:17 - mmengine - INFO - Iter(test) [ 800/2000]    eta: 0:04:14  time: 0.0639  data_time: 0.0015  memory: 943  
09/21 07:14:21 - mmengine - INFO - Iter(test) [ 850/2000]    eta: 0:03:54  time: 0.0738  data_time: 0.0015  memory: 915  
09/21 07:14:24 - mmengine - INFO - Iter(test) [ 900/2000]    eta: 0:03:35  time: 0.0700  data_time: 0.0037  memory: 998  
09/21 07:14:28 - mmengine - INFO - Iter(test) [ 950/2000]    eta: 0:03:19  time: 0.0705  data_time: 0.0014  memory: 1027  
09/21 07:14:31 - mmengine - INFO - Iter(test) [1000/2000]    eta: 0:03:03  time: 0.0627  data_time: 0.0014  memory: 1027  
09/21 07:14:39 - mmengine - INFO - Iter(test) [1050/2000]    eta: 0:02:53  time: 0.0718  data_time: 0.0014  memory: 17242  
09/21 07:14:43 - mmengine - INFO - Iter(test) [1100/2000]    eta: 0:02:39  time: 0.0708  data_time: 0.0014  memory: 1024  
09/21 07:14:46 - mmengine - INFO - Iter(test) [1150/2000]    eta: 0:02:26  time: 0.0722  data_time: 0.0014  memory: 996  
09/21 07:14:50 - mmengine - INFO - Iter(test) [1200/2000]    eta: 0:02:14  time: 0.0626  data_time: 0.0014  memory: 1900  
09/21 07:14:57 - mmengine - INFO - Iter(test) [1250/2000]    eta: 0:02:06  time: 0.0684  data_time: 0.0014  memory: 17230  
09/21 07:15:01 - mmengine - INFO - Iter(test) [1300/2000]    eta: 0:01:55  time: 0.0726  data_time: 0.0014  memory: 943  
09/21 07:15:05 - mmengine - INFO - Iter(test) [1350/2000]    eta: 0:01:44  time: 0.0684  data_time: 0.0014  memory: 943  
09/21 07:15:08 - mmengine - INFO - Iter(test) [1400/2000]    eta: 0:01:34  time: 0.0712  data_time: 0.0013  memory: 1025  
09/21 07:15:11 - mmengine - INFO - Iter(test) [1450/2000]    eta: 0:01:24  time: 0.0640  data_time: 0.0014  memory: 1027  
09/21 07:15:14 - mmengine - INFO - Iter(test) [1500/2000]    eta: 0:01:15  time: 0.0635  data_time: 0.0031  memory: 941  
09/21 07:15:18 - mmengine - INFO - Iter(test) [1550/2000]    eta: 0:01:06  time: 0.0713  data_time: 0.0014  memory: 1027  
09/21 07:15:21 - mmengine - INFO - Iter(test) [1600/2000]    eta: 0:00:58  time: 0.0711  data_time: 0.0015  memory: 915  
09/21 07:15:29 - mmengine - INFO - Iter(test) [1650/2000]    eta: 0:00:51  time: 0.0635  data_time: 0.0013  memory: 17237  
09/21 07:15:33 - mmengine - INFO - Iter(test) [1700/2000]    eta: 0:00:43  time: 0.0637  data_time: 0.0015  memory: 1024  
09/21 07:15:36 - mmengine - INFO - Iter(test) [1750/2000]    eta: 0:00:35  time: 0.0629  data_time: 0.0013  memory: 1052  
09/21 07:15:39 - mmengine - INFO - Iter(test) [1800/2000]    eta: 0:00:27  time: 0.0716  data_time: 0.0015  memory: 943  
09/21 07:15:43 - mmengine - INFO - Iter(test) [1850/2000]    eta: 0:00:20  time: 0.0718  data_time: 0.0015  memory: 859  
09/21 07:15:46 - mmengine - INFO - Iter(test) [1900/2000]    eta: 0:00:13  time: 0.0688  data_time: 0.0014  memory: 1084  
09/21 07:15:50 - mmengine - INFO - Iter(test) [1950/2000]    eta: 0:00:06  time: 0.0622  data_time: 0.0014  memory: 1331  
09/21 07:15:53 - mmengine - INFO - Iter(test) [2000/2000]    eta: 0:00:00  time: 0.0597  data_time: 0.0013  memory: 1110  
09/21 07:15:53 - mmengine - INFO - per class results:
09/21 07:15:53 - mmengine - INFO - 
+---------------------+-------+-------+
|        Class        |  IoU  |  Acc  |
+---------------------+-------+-------+
|         wall        | 76.04 | 87.08 |
|       building      | 80.39 | 92.27 |
|         sky         | 94.28 |  97.5 |
|        floor        | 79.89 | 90.57 |
|         tree        | 72.15 | 85.67 |
|       ceiling       | 81.83 | 90.71 |
|         road        | 82.68 | 92.12 |
|         bed         | 87.23 | 93.57 |
|      windowpane     | 60.12 | 76.86 |
|        grass        | 63.39 | 74.28 |
|       cabinet       | 57.81 | 67.61 |
|       sidewalk      | 62.73 | 70.85 |
|        person       | 80.16 | 86.98 |
|        earth        | 34.71 | 48.68 |
|         door        | 47.26 | 63.14 |
|        table        | 57.24 | 73.33 |
|       mountain      |  58.6 | 71.55 |
|        plant        | 48.75 | 55.33 |
|       curtain       | 69.11 | 82.66 |
|        chair        | 57.69 | 71.58 |
|         car         | 80.01 | 86.23 |
|        water        | 44.21 | 65.43 |
|       painting      | 71.74 |  83.3 |
|         sofa        | 64.33 | 83.84 |
|        shelf        | 35.76 | 59.14 |
|        house        | 37.08 | 47.07 |
|         sea         | 45.16 | 66.06 |
|        mirror       | 59.33 | 68.09 |
|         rug         | 61.75 | 67.66 |
|        field        | 28.27 | 61.34 |
|       armchair      | 33.65 | 44.43 |
|         seat        | 50.33 | 75.88 |
|        fence        | 38.08 |  56.5 |
|         desk        |  49.6 | 68.77 |
|         rock        | 40.58 | 54.36 |
|       wardrobe      | 47.31 | 66.44 |
|         lamp        | 64.68 | 77.54 |
|       bathtub       |  67.7 | 76.85 |
|       railing       | 30.05 | 46.85 |
|       cushion       | 54.41 | 65.03 |
|         base        | 27.71 | 44.43 |
|         box         | 24.99 | 37.58 |
|        column       | 42.92 | 59.43 |
|      signboard      | 32.62 | 50.73 |
|   chest of drawers  | 43.27 | 69.68 |
|       counter       | 23.08 | 34.01 |
|         sand        | 25.67 | 33.08 |
|         sink        | 71.33 | 79.76 |
|      skyscraper     | 46.24 | 59.02 |
|      fireplace      | 68.24 | 82.92 |
|     refrigerator    | 65.66 |  77.4 |
|      grandstand     | 32.41 | 81.93 |
|         path        | 23.96 | 40.86 |
|        stairs       | 26.75 | 39.12 |
|        runway       |  74.9 | 97.44 |
|         case        | 32.63 | 50.52 |
|      pool table     | 86.95 | 96.92 |
|        pillow       | 56.41 | 65.23 |
|     screen door     |  53.8 | 59.88 |
|       stairway      |  28.1 | 46.37 |
|        river        |  9.64 | 21.37 |
|        bridge       | 59.14 | 83.88 |
|       bookcase      | 28.22 | 40.87 |
|        blind        | 30.62 |  33.5 |
|     coffee table    | 66.64 | 82.14 |
|        toilet       | 84.82 | 89.26 |
|        flower       | 30.15 |  44.1 |
|         book        | 43.45 | 58.88 |
|         hill        |  5.76 | 13.37 |
|        bench        | 40.63 |  58.7 |
|      countertop     | 54.04 | 71.88 |
|        stove        | 69.62 | 81.93 |
|         palm        | 53.59 | 69.74 |
|    kitchen island   | 35.03 | 77.88 |
|       computer      | 53.51 | 58.91 |
|     swivel chair    | 47.57 | 66.01 |
|         boat        | 42.83 | 47.97 |
|         bar         | 46.49 |  57.1 |
|    arcade machine   |  22.1 | 24.51 |
|        hovel        |  4.66 |  7.9  |
|         bus         | 76.28 | 92.72 |
|        towel        |  65.1 | 73.38 |
|        light        | 59.91 | 72.08 |
|        truck        | 30.71 | 53.09 |
|        tower        | 21.24 | 54.36 |
|      chandelier     | 61.85 |  74.0 |
|        awning       | 24.65 | 32.33 |
|     streetlight     | 33.17 | 47.09 |
|        booth        | 25.32 | 37.09 |
| television receiver | 63.82 | 73.65 |
|       airplane      | 43.54 | 63.28 |
|      dirt track     |  3.52 |  7.04 |
|       apparel       | 35.54 | 49.68 |
|         pole        | 28.26 | 46.68 |
|         land        |  2.99 |  4.68 |
|      bannister      |  9.5  | 13.16 |
|      escalator      | 13.47 | 20.25 |
|       ottoman       | 48.85 | 64.79 |
|        bottle       | 16.52 | 22.27 |
|        buffet       | 38.21 | 42.29 |
|        poster       | 27.38 | 42.44 |
|        stage        |  8.85 | 17.41 |
|         van         | 31.28 | 56.41 |
|         ship        |  3.29 |  6.81 |
|       fountain      |  4.24 |  5.04 |
|    conveyer belt    | 69.56 | 89.93 |
|        canopy       | 23.83 |  26.0 |
|        washer       | 61.64 | 61.82 |
|      plaything      | 22.07 | 46.57 |
|    swimming pool    | 45.08 | 59.14 |
|        stool        | 44.85 | 60.68 |
|        barrel       |  25.7 | 74.17 |
|        basket       | 41.32 | 49.43 |
|      waterfall      | 56.98 | 91.51 |
|         tent        | 91.14 | 98.44 |
|         bag         | 11.17 | 13.35 |
|       minibike      | 51.64 | 55.92 |
|        cradle       | 77.81 | 97.52 |
|         oven        | 25.03 | 75.73 |
|         ball        | 46.88 | 60.64 |
|         food        |  52.8 | 66.03 |
|         step        | 15.54 | 21.18 |
|         tank        | 54.28 | 57.83 |
|      trade name     | 25.56 | 30.74 |
|      microwave      | 41.03 | 43.64 |
|         pot         | 46.31 | 56.14 |
|        animal       | 60.93 | 68.64 |
|       bicycle       | 54.08 | 69.49 |
|         lake        |  0.0  |  0.0  |
|      dishwasher     |  44.9 | 59.27 |
|        screen       | 52.19 | 66.56 |
|       blanket       |  8.3  | 10.52 |
|      sculpture      | 37.52 | 49.26 |
|         hood        | 73.14 | 79.72 |
|        sconce       | 46.19 | 58.41 |
|         vase        | 31.89 | 44.78 |
|    traffic light    | 35.92 | 59.97 |
|         tray        |  9.95 | 16.26 |
|        ashcan       | 36.11 | 51.65 |
|         fan         | 57.22 | 79.25 |
|         pier        | 29.63 | 40.84 |
|      crt screen     |  4.71 | 10.75 |
|        plate        | 49.81 | 62.84 |
|       monitor       | 55.18 | 72.75 |
|    bulletin board   | 44.67 | 48.33 |
|        shower       |  2.0  | 15.59 |
|       radiator      |  59.4 | 67.09 |
|        glass        | 15.98 | 18.12 |
|        clock        |  34.4 | 44.02 |
|         flag        | 40.93 | 44.45 |
+---------------------+-------+-------+
09/21 07:15:53 - mmengine - INFO - Iter(test) [2000/2000]    aAcc: 81.0700  mIoU: 44.4300  mAcc: 57.5800  data_time: 0.0016  time: 0.1327
Finished processing corruption type: pixelate
Processing corruption type: jpeg_compression
09/21 07:15:58 - mmengine - INFO - 
------------------------------------------------------------
System environment:
    sys.platform: linux
    Python: 3.10.13 | packaged by conda-forge | (main, Dec 23 2023, 15:36:39) [GCC 12.3.0]
    CUDA available: True
    MUSA available: False
    numpy_random_seed: 847124311
    GPU 0: Tesla V100-SXM2-32GB
    CUDA_HOME: /opt/bwhpc/common/devel/cuda/11.7
    NVCC: Cuda compilation tools, release 11.7, V11.7.99
    GCC: gcc (GCC) 8.5.0 20210514 (Red Hat 8.5.0-18)
    PyTorch: 1.13.1
    PyTorch compiling details: PyTorch built with:
  - GCC 9.3
  - C++ Version: 201402
  - Intel(R) oneAPI Math Kernel Library Version 2023.1-Product Build 20230303 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v2.6.0 (Git Hash 52b5f107dd9cf10910aaa19cb47f3abf9b349815)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - LAPACK is enabled (usually provided by MKL)
  - NNPACK is enabled
  - CPU capability usage: AVX2
  - CUDA Runtime 11.7
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_61,code=sm_61;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86;-gencode;arch=compute_37,code=compute_37
  - CuDNN 8.5
  - Magma 2.6.1
  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.7, CUDNN_VERSION=8.5.0, CXX_COMPILER=/opt/rh/devtoolset-9/root/usr/bin/c++, CXX_FLAGS= -fabi-version=11 -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -DEDGE_PROFILER_USE_KINETO -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Werror=non-virtual-dtor -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wunused-local-typedefs -Wno-unused-parameter -Wno-unused-function -Wno-unused-result -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Werror=cast-function-type -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.13.1, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, USE_ROCM=OFF, 

    TorchVision: 0.14.1
    OpenCV: 3.4.18
    MMEngine: 0.10.4

Runtime environment:
    cudnn_benchmark: True
    mp_cfg: {'mp_start_method': 'fork', 'opencv_num_threads': 0}
    dist_cfg: {'backend': 'nccl'}
    seed: 847124311
    Distributed launcher: none
    Distributed training: False
    GPU number: 1
------------------------------------------------------------

09/21 07:15:58 - mmengine - INFO - Config:
auto_scale_lr = dict(base_batch_size=16, enable=False)
crop_size = (
    512,
    512,
)
custom_imports = dict(allow_failed_imports=False, imports='mmdet.models')
data_root = 'data/ade/ADEChallengeData2016'
dataset_type = 'ADE20KDataset'
default_hooks = dict(
    checkpoint=dict(
        by_epoch=False, interval=5000, save_best='mIoU',
        type='CheckpointHook'),
    logger=dict(interval=50, log_metric_by_epoch=False, type='LoggerHook'),
    param_scheduler=dict(type='ParamSchedulerHook'),
    sampler_seed=dict(type='DistSamplerSeedHook'),
    timer=dict(type='IterTimerHook'),
    visualization=dict(type='SegVisualizationHook'))
default_scope = 'mmseg'
embed_multi = dict(decay_mult=0.0, lr_mult=1.0)
env_cfg = dict(
    cudnn_benchmark=True,
    dist_cfg=dict(backend='nccl'),
    mp_cfg=dict(mp_start_method='fork', opencv_num_threads=0))
img_ratios = [
    0.5,
    0.75,
    1.0,
    1.25,
    1.5,
    1.75,
]
launcher = 'none'
load_from = '../checkpoint_files/ade20k/mask2former/mask2former_r101_8xb2-160k_ade20k-512x512_20221203_233905-b7135890.pth'
log_level = 'INFO'
log_processor = dict(by_epoch=False)
model = dict(
    backbone=dict(
        deep_stem=False,
        depth=101,
        frozen_stages=-1,
        init_cfg=dict(checkpoint='torchvision://resnet101', type='Pretrained'),
        norm_cfg=dict(requires_grad=False, type='SyncBN'),
        num_stages=4,
        out_indices=(
            0,
            1,
            2,
            3,
        ),
        style='pytorch',
        type='ResNet'),
    data_preprocessor=dict(
        bgr_to_rgb=True,
        corruption='jpeg_compression',
        mean=[
            123.675,
            116.28,
            103.53,
        ],
        pad_val=0,
        seg_pad_val=255,
        size=(
            512,
            512,
        ),
        std=[
            58.395,
            57.12,
            57.375,
        ],
        test_cfg=dict(size_divisor=32),
        type='SegDataPreProcessor'),
    decode_head=dict(
        align_corners=False,
        enforce_decoder_input_project=False,
        feat_channels=256,
        in_channels=[
            256,
            512,
            1024,
            2048,
        ],
        loss_cls=dict(
            class_weight=[
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                0.1,
            ],
            loss_weight=2.0,
            reduction='mean',
            type='mmdet.CrossEntropyLoss',
            use_sigmoid=False),
        loss_dice=dict(
            activate=True,
            eps=1.0,
            loss_weight=5.0,
            naive_dice=True,
            reduction='mean',
            type='mmdet.DiceLoss',
            use_sigmoid=True),
        loss_mask=dict(
            loss_weight=5.0,
            reduction='mean',
            type='mmdet.CrossEntropyLoss',
            use_sigmoid=True),
        num_classes=150,
        num_queries=100,
        num_transformer_feat_level=3,
        out_channels=256,
        pixel_decoder=dict(
            act_cfg=dict(type='ReLU'),
            encoder=dict(
                init_cfg=None,
                layer_cfg=dict(
                    ffn_cfg=dict(
                        act_cfg=dict(inplace=True, type='ReLU'),
                        embed_dims=256,
                        feedforward_channels=1024,
                        ffn_drop=0.0,
                        num_fcs=2),
                    self_attn_cfg=dict(
                        batch_first=True,
                        dropout=0.0,
                        embed_dims=256,
                        im2col_step=64,
                        init_cfg=None,
                        norm_cfg=None,
                        num_heads=8,
                        num_levels=3,
                        num_points=4)),
                num_layers=6),
            init_cfg=None,
            norm_cfg=dict(num_groups=32, type='GN'),
            num_outs=3,
            positional_encoding=dict(normalize=True, num_feats=128),
            type='mmdet.MSDeformAttnPixelDecoder'),
        positional_encoding=dict(normalize=True, num_feats=128),
        strides=[
            4,
            8,
            16,
            32,
        ],
        train_cfg=dict(
            assigner=dict(
                match_costs=[
                    dict(type='mmdet.ClassificationCost', weight=2.0),
                    dict(
                        type='mmdet.CrossEntropyLossCost',
                        use_sigmoid=True,
                        weight=5.0),
                    dict(
                        eps=1.0,
                        pred_act=True,
                        type='mmdet.DiceCost',
                        weight=5.0),
                ],
                type='mmdet.HungarianAssigner'),
            importance_sample_ratio=0.75,
            num_points=12544,
            oversample_ratio=3.0,
            sampler=dict(type='mmdet.MaskPseudoSampler')),
        transformer_decoder=dict(
            init_cfg=None,
            layer_cfg=dict(
                cross_attn_cfg=dict(
                    attn_drop=0.0,
                    batch_first=True,
                    dropout_layer=None,
                    embed_dims=256,
                    num_heads=8,
                    proj_drop=0.0),
                ffn_cfg=dict(
                    act_cfg=dict(inplace=True, type='ReLU'),
                    add_identity=True,
                    dropout_layer=None,
                    embed_dims=256,
                    feedforward_channels=2048,
                    ffn_drop=0.0,
                    num_fcs=2),
                self_attn_cfg=dict(
                    attn_drop=0.0,
                    batch_first=True,
                    dropout_layer=None,
                    embed_dims=256,
                    num_heads=8,
                    proj_drop=0.0)),
            num_layers=9,
            return_intermediate=True),
        type='Mask2FormerHead'),
    test_cfg=dict(mode='whole'),
    train_cfg=dict(),
    type='EncoderDecoder')
num_classes = 150
optim_wrapper = dict(
    clip_grad=dict(max_norm=0.01, norm_type=2),
    optimizer=dict(
        betas=(
            0.9,
            0.999,
        ),
        eps=1e-08,
        lr=0.0001,
        type='AdamW',
        weight_decay=0.05),
    paramwise_cfg=dict(
        custom_keys=dict(
            backbone=dict(decay_mult=1.0, lr_mult=0.1),
            level_embed=dict(decay_mult=0.0, lr_mult=1.0),
            query_embed=dict(decay_mult=0.0, lr_mult=1.0),
            query_feat=dict(decay_mult=0.0, lr_mult=1.0)),
        norm_decay_mult=0.0),
    type='OptimWrapper')
optimizer = dict(
    betas=(
        0.9,
        0.999,
    ),
    eps=1e-08,
    lr=0.0001,
    type='AdamW',
    weight_decay=0.05)
param_scheduler = [
    dict(
        begin=0,
        by_epoch=False,
        end=160000,
        eta_min=0,
        power=0.9,
        type='PolyLR'),
]
resume = False
test_cfg = dict(type='TestLoop')
test_dataloader = dict(
    batch_size=1,
    dataset=dict(
        data_prefix=dict(
            img_path='images/validation',
            seg_map_path='annotations/validation'),
        data_root='data/ade/ADEChallengeData2016',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(keep_ratio=True, scale=(
                2048,
                512,
            ), type='Resize'),
            dict(reduce_zero_label=True, type='LoadAnnotations'),
            dict(type='PackSegInputs'),
        ],
        type='ADE20KDataset'),
    num_workers=4,
    persistent_workers=True,
    sampler=dict(shuffle=False, type='DefaultSampler'))
test_evaluator = dict(
    iou_metrics=[
        'mIoU',
    ], type='IoUMetric')
test_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(keep_ratio=True, scale=(
        2048,
        512,
    ), type='Resize'),
    dict(reduce_zero_label=True, type='LoadAnnotations'),
    dict(type='PackSegInputs'),
]
train_cfg = dict(
    max_iters=160000, type='IterBasedTrainLoop', val_interval=5000)
train_dataloader = dict(
    batch_size=2,
    dataset=dict(
        data_prefix=dict(
            img_path='images/training', seg_map_path='annotations/training'),
        data_root='data/ade/ADEChallengeData2016',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(reduce_zero_label=True, type='LoadAnnotations'),
            dict(
                max_size=2048,
                resize_type='ResizeShortestEdge',
                scales=[
                    256,
                    307,
                    358,
                    409,
                    460,
                    512,
                    563,
                    614,
                    665,
                    716,
                    768,
                    819,
                    870,
                    921,
                    972,
                    1024,
                ],
                type='RandomChoiceResize'),
            dict(
                cat_max_ratio=0.75, crop_size=(
                    512,
                    512,
                ), type='RandomCrop'),
            dict(prob=0.5, type='RandomFlip'),
            dict(type='PhotoMetricDistortion'),
            dict(type='PackSegInputs'),
        ],
        type='ADE20KDataset'),
    num_workers=4,
    persistent_workers=True,
    sampler=dict(shuffle=True, type='InfiniteSampler'))
train_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(reduce_zero_label=True, type='LoadAnnotations'),
    dict(
        max_size=2048,
        resize_type='ResizeShortestEdge',
        scales=[
            256,
            307,
            358,
            409,
            460,
            512,
            563,
            614,
            665,
            716,
            768,
            819,
            870,
            921,
            972,
            1024,
        ],
        type='RandomChoiceResize'),
    dict(cat_max_ratio=0.75, crop_size=(
        512,
        512,
    ), type='RandomCrop'),
    dict(prob=0.5, type='RandomFlip'),
    dict(type='PhotoMetricDistortion'),
    dict(type='PackSegInputs'),
]
tta_model = dict(type='SegTTAModel')
tta_pipeline = [
    dict(backend_args=None, type='LoadImageFromFile'),
    dict(
        transforms=[
            [
                dict(keep_ratio=True, scale_factor=0.5, type='Resize'),
                dict(keep_ratio=True, scale_factor=0.75, type='Resize'),
                dict(keep_ratio=True, scale_factor=1.0, type='Resize'),
                dict(keep_ratio=True, scale_factor=1.25, type='Resize'),
                dict(keep_ratio=True, scale_factor=1.5, type='Resize'),
                dict(keep_ratio=True, scale_factor=1.75, type='Resize'),
            ],
            [
                dict(direction='horizontal', prob=0.0, type='RandomFlip'),
                dict(direction='horizontal', prob=1.0, type='RandomFlip'),
            ],
            [
                dict(type='LoadAnnotations'),
            ],
            [
                dict(type='PackSegInputs'),
            ],
        ],
        type='TestTimeAug'),
]
val_cfg = dict(type='ValLoop')
val_dataloader = dict(
    batch_size=1,
    dataset=dict(
        data_prefix=dict(
            img_path='images/validation',
            seg_map_path='annotations/validation'),
        data_root='data/ade/ADEChallengeData2016',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(keep_ratio=True, scale=(
                2048,
                512,
            ), type='Resize'),
            dict(reduce_zero_label=True, type='LoadAnnotations'),
            dict(type='PackSegInputs'),
        ],
        type='ADE20KDataset'),
    num_workers=4,
    persistent_workers=True,
    sampler=dict(shuffle=False, type='DefaultSampler'))
val_evaluator = dict(
    iou_metrics=[
        'mIoU',
    ], type='IoUMetric')
vis_backends = [
    dict(type='LocalVisBackend'),
]
visualizer = dict(
    name='visualizer',
    type='SegLocalVisualizer',
    vis_backends=[
        dict(type='LocalVisBackend'),
    ])
work_dir = '../corruptions/work_dirs/ade20k/mask2former/mask2former_r101_8xb2-160k_ade20k-512x512/jpeg_compression'

09/21 07:16:01 - mmengine - INFO - Distributed training is not used, all SyncBatchNorm (SyncBN) layers in the model will be automatically reverted to BatchNormXd layers if they are used.
09/21 07:16:01 - mmengine - INFO - Hooks will be executed in the following order:
before_run:
(VERY_HIGH   ) RuntimeInfoHook                    
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
before_train:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_train_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(NORMAL      ) DistSamplerSeedHook                
 -------------------- 
before_train_iter:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_train_iter:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(NORMAL      ) SegVisualizationHook               
(BELOW_NORMAL) LoggerHook                         
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
after_train_epoch:
(NORMAL      ) IterTimerHook                      
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_val:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
before_val_epoch:
(NORMAL      ) IterTimerHook                      
 -------------------- 
before_val_iter:
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_val_iter:
(NORMAL      ) IterTimerHook                      
(NORMAL      ) SegVisualizationHook               
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_val_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
after_val:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
after_train:
(VERY_HIGH   ) RuntimeInfoHook                    
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_test:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
before_test_epoch:
(NORMAL      ) IterTimerHook                      
 -------------------- 
before_test_iter:
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_test_iter:
(NORMAL      ) IterTimerHook                      
(NORMAL      ) SegVisualizationHook               
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_test_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_test:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
after_run:
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
09/21 07:16:01 - mmengine - WARNING - The prefix is not set in metric class IoUMetric.
Loads checkpoint by local backend from path: ../checkpoint_files/ade20k/mask2former/mask2former_r101_8xb2-160k_ade20k-512x512_20221203_233905-b7135890.pth
09/21 07:16:02 - mmengine - INFO - Load checkpoint from ../checkpoint_files/ade20k/mask2former/mask2former_r101_8xb2-160k_ade20k-512x512_20221203_233905-b7135890.pth
09/21 07:17:07 - mmengine - INFO - Iter(test) [  50/2000]    eta: 0:42:13  time: 0.9374  data_time: 0.0014  memory: 17239  
09/21 07:17:23 - mmengine - INFO - Iter(test) [ 100/2000]    eta: 0:25:43  time: 0.5333  data_time: 0.0015  memory: 17230  
09/21 07:17:27 - mmengine - INFO - Iter(test) [ 150/2000]    eta: 0:17:29  time: 0.0769  data_time: 0.0014  memory: 943  
09/21 07:17:40 - mmengine - INFO - Iter(test) [ 200/2000]    eta: 0:14:44  time: 0.0758  data_time: 0.0013  memory: 17287  
09/21 07:17:50 - mmengine - INFO - Iter(test) [ 250/2000]    eta: 0:12:36  time: 0.0707  data_time: 0.0014  memory: 17293  
09/21 07:17:58 - mmengine - INFO - Iter(test) [ 300/2000]    eta: 0:10:58  time: 0.0783  data_time: 0.0015  memory: 17234  
09/21 07:18:10 - mmengine - INFO - Iter(test) [ 350/2000]    eta: 0:10:05  time: 0.0676  data_time: 0.0014  memory: 17237  
09/21 07:18:18 - mmengine - INFO - Iter(test) [ 400/2000]    eta: 0:09:03  time: 0.0792  data_time: 0.0013  memory: 17220  
09/21 07:18:22 - mmengine - INFO - Iter(test) [ 450/2000]    eta: 0:08:01  time: 0.0754  data_time: 0.0014  memory: 955  
09/21 07:18:25 - mmengine - INFO - Iter(test) [ 500/2000]    eta: 0:07:10  time: 0.0755  data_time: 0.0013  memory: 943  
09/21 07:18:29 - mmengine - INFO - Iter(test) [ 550/2000]    eta: 0:06:28  time: 0.0753  data_time: 0.0014  memory: 1055  
09/21 07:18:33 - mmengine - INFO - Iter(test) [ 600/2000]    eta: 0:05:52  time: 0.0713  data_time: 0.0015  memory: 1053  
09/21 07:18:41 - mmengine - INFO - Iter(test) [ 650/2000]    eta: 0:05:30  time: 0.5316  data_time: 0.0013  memory: 17241  
09/21 07:18:49 - mmengine - INFO - Iter(test) [ 700/2000]    eta: 0:05:11  time: 0.0725  data_time: 0.0015  memory: 17235  
09/21 07:18:53 - mmengine - INFO - Iter(test) [ 750/2000]    eta: 0:04:44  time: 0.0693  data_time: 0.0014  memory: 1112  
09/21 07:18:56 - mmengine - INFO - Iter(test) [ 800/2000]    eta: 0:04:21  time: 0.0702  data_time: 0.0015  memory: 943  
09/21 07:19:00 - mmengine - INFO - Iter(test) [ 850/2000]    eta: 0:04:01  time: 0.0799  data_time: 0.0015  memory: 915  
09/21 07:19:04 - mmengine - INFO - Iter(test) [ 900/2000]    eta: 0:03:42  time: 0.0767  data_time: 0.0014  memory: 998  
09/21 07:19:08 - mmengine - INFO - Iter(test) [ 950/2000]    eta: 0:03:25  time: 0.0756  data_time: 0.0014  memory: 1027  
09/21 07:19:11 - mmengine - INFO - Iter(test) [1000/2000]    eta: 0:03:09  time: 0.0678  data_time: 0.0014  memory: 1027  
09/21 07:19:20 - mmengine - INFO - Iter(test) [1050/2000]    eta: 0:02:59  time: 0.0813  data_time: 0.0015  memory: 17242  
09/21 07:19:24 - mmengine - INFO - Iter(test) [1100/2000]    eta: 0:02:45  time: 0.0770  data_time: 0.0015  memory: 1024  
09/21 07:19:28 - mmengine - INFO - Iter(test) [1150/2000]    eta: 0:02:32  time: 0.0776  data_time: 0.0014  memory: 996  
09/21 07:19:31 - mmengine - INFO - Iter(test) [1200/2000]    eta: 0:02:19  time: 0.0686  data_time: 0.0014  memory: 1900  
09/21 07:19:40 - mmengine - INFO - Iter(test) [1250/2000]    eta: 0:02:10  time: 0.0773  data_time: 0.0014  memory: 17230  
09/21 07:19:43 - mmengine - INFO - Iter(test) [1300/2000]    eta: 0:01:59  time: 0.0781  data_time: 0.0014  memory: 943  
09/21 07:19:47 - mmengine - INFO - Iter(test) [1350/2000]    eta: 0:01:48  time: 0.0743  data_time: 0.0014  memory: 943  
09/21 07:19:51 - mmengine - INFO - Iter(test) [1400/2000]    eta: 0:01:38  time: 0.0709  data_time: 0.0014  memory: 1025  
09/21 07:19:54 - mmengine - INFO - Iter(test) [1450/2000]    eta: 0:01:28  time: 0.0709  data_time: 0.0014  memory: 1027  
09/21 07:19:58 - mmengine - INFO - Iter(test) [1500/2000]    eta: 0:01:18  time: 0.0743  data_time: 0.0013  memory: 941  
09/21 07:20:02 - mmengine - INFO - Iter(test) [1550/2000]    eta: 0:01:09  time: 0.0780  data_time: 0.0014  memory: 1027  
09/21 07:20:05 - mmengine - INFO - Iter(test) [1600/2000]    eta: 0:01:00  time: 0.0772  data_time: 0.0015  memory: 915  
09/21 07:20:14 - mmengine - INFO - Iter(test) [1650/2000]    eta: 0:00:53  time: 0.0665  data_time: 0.0013  memory: 17237  
09/21 07:20:17 - mmengine - INFO - Iter(test) [1700/2000]    eta: 0:00:45  time: 0.0733  data_time: 0.0015  memory: 1024  
09/21 07:20:21 - mmengine - INFO - Iter(test) [1750/2000]    eta: 0:00:37  time: 0.0765  data_time: 0.0013  memory: 1052  
09/21 07:20:25 - mmengine - INFO - Iter(test) [1800/2000]    eta: 0:00:29  time: 0.0776  data_time: 0.0015  memory: 943  
09/21 07:20:29 - mmengine - INFO - Iter(test) [1850/2000]    eta: 0:00:21  time: 0.0785  data_time: 0.0015  memory: 859  
09/21 07:20:32 - mmengine - INFO - Iter(test) [1900/2000]    eta: 0:00:14  time: 0.0682  data_time: 0.0014  memory: 1084  
09/21 07:20:36 - mmengine - INFO - Iter(test) [1950/2000]    eta: 0:00:07  time: 0.0676  data_time: 0.0013  memory: 1331  
09/21 07:20:39 - mmengine - INFO - Iter(test) [2000/2000]    eta: 0:00:00  time: 0.0707  data_time: 0.0012  memory: 1110  
09/21 07:20:39 - mmengine - INFO - per class results:
09/21 07:20:39 - mmengine - INFO - 
+---------------------+-------+-------+
|        Class        |  IoU  |  Acc  |
+---------------------+-------+-------+
|         wall        | 74.81 | 87.83 |
|       building      | 80.39 |  90.6 |
|         sky         | 93.86 | 97.42 |
|        floor        |  78.4 | 91.96 |
|         tree        | 72.47 | 85.04 |
|       ceiling       |  80.9 |  89.7 |
|         road        | 80.52 | 92.39 |
|         bed         | 86.92 | 92.66 |
|      windowpane     | 58.94 | 73.98 |
|        grass        | 64.54 | 74.72 |
|       cabinet       | 57.55 | 67.62 |
|       sidewalk      | 62.05 | 70.12 |
|        person       | 80.39 | 88.33 |
|        earth        | 39.54 | 56.99 |
|         door        | 44.94 | 58.29 |
|        table        | 58.66 | 72.62 |
|       mountain      | 52.64 | 68.57 |
|        plant        | 48.74 | 57.24 |
|       curtain       | 69.55 | 78.89 |
|        chair        | 57.92 | 69.66 |
|         car         | 81.55 | 88.78 |
|        water        | 52.61 |  74.6 |
|       painting      | 69.43 | 81.57 |
|         sofa        | 67.51 |  85.0 |
|        shelf        | 39.19 | 60.64 |
|        house        |  37.1 | 51.98 |
|         sea         | 49.33 | 60.93 |
|        mirror       | 57.34 | 66.09 |
|         rug         |  46.9 | 49.54 |
|        field        | 23.48 |  48.2 |
|       armchair      | 44.53 | 59.51 |
|         seat        | 52.95 | 73.96 |
|        fence        | 42.59 | 62.61 |
|         desk        | 50.05 | 70.58 |
|         rock        | 39.09 | 58.22 |
|       wardrobe      | 37.01 | 55.96 |
|         lamp        | 65.84 | 75.96 |
|       bathtub       |  69.5 | 80.06 |
|       railing       | 30.33 | 44.57 |
|       cushion       | 52.66 | 60.55 |
|         base        | 27.31 |  44.1 |
|         box         | 21.59 | 35.56 |
|        column       | 45.45 | 61.74 |
|      signboard      | 33.58 | 50.46 |
|   chest of drawers  | 44.77 |  70.6 |
|       counter       | 36.32 | 48.68 |
|         sand        | 30.36 | 33.72 |
|         sink        | 70.81 | 80.25 |
|      skyscraper     | 48.13 | 62.14 |
|      fireplace      | 67.28 | 82.14 |
|     refrigerator    | 75.88 | 81.01 |
|      grandstand     | 41.66 | 79.95 |
|         path        |  27.6 | 43.85 |
|        stairs       | 26.59 | 39.35 |
|        runway       |  73.0 | 95.13 |
|         case        | 34.78 | 52.19 |
|      pool table     | 85.52 | 95.78 |
|        pillow       | 53.01 | 64.52 |
|     screen door     | 44.96 | 50.08 |
|       stairway      |  33.6 | 43.12 |
|        river        | 11.72 | 27.71 |
|        bridge       |  57.0 | 85.52 |
|       bookcase      | 27.26 | 39.68 |
|        blind        | 23.25 | 23.58 |
|     coffee table    | 64.74 | 76.09 |
|        toilet       | 85.66 |  89.2 |
|        flower       | 33.14 | 47.07 |
|         book        |  48.4 | 62.73 |
|         hill        |  6.33 | 13.43 |
|        bench        | 47.04 | 64.89 |
|      countertop     | 56.14 | 72.15 |
|        stove        | 72.36 | 83.76 |
|         palm        | 55.73 | 69.72 |
|    kitchen island   | 34.05 | 75.67 |
|       computer      | 57.01 | 61.89 |
|     swivel chair    | 43.69 | 60.02 |
|         boat        | 36.34 | 53.99 |
|         bar         | 49.92 | 55.16 |
|    arcade machine   | 35.06 | 37.86 |
|        hovel        | 29.02 | 49.22 |
|         bus         | 79.25 | 92.64 |
|        towel        | 62.94 | 68.68 |
|        light        | 58.21 | 68.99 |
|        truck        | 21.51 | 42.94 |
|        tower        |  47.2 |  77.7 |
|      chandelier     | 68.55 | 79.61 |
|        awning       | 30.53 | 39.67 |
|     streetlight     |  33.0 | 43.95 |
|        booth        | 22.73 | 42.02 |
| television receiver | 62.36 | 70.44 |
|       airplane      | 56.76 | 65.26 |
|      dirt track     |  6.62 | 13.27 |
|       apparel       | 39.61 | 55.09 |
|         pole        | 29.48 |  45.0 |
|         land        |  4.96 |  6.64 |
|      bannister      |  5.28 |  8.66 |
|      escalator      | 16.27 | 16.54 |
|       ottoman       | 55.82 | 68.79 |
|        bottle       | 16.99 | 19.79 |
|        buffet       | 41.24 | 43.19 |
|        poster       | 24.63 | 40.02 |
|        stage        | 11.58 | 17.37 |
|         van         | 41.53 |  62.1 |
|         ship        | 55.56 | 88.81 |
|       fountain      |  3.84 |  4.4  |
|    conveyer belt    |  45.4 |  65.4 |
|        canopy       | 36.83 | 40.46 |
|        washer       | 67.46 | 69.08 |
|      plaything      | 25.12 | 48.65 |
|    swimming pool    | 51.63 | 57.01 |
|        stool        | 42.52 | 56.87 |
|        barrel       | 21.25 | 71.78 |
|        basket       | 34.13 | 44.24 |
|      waterfall      | 66.47 | 91.73 |
|         tent        | 88.16 | 98.35 |
|         bag         | 11.83 | 13.51 |
|       minibike      | 70.36 | 82.37 |
|        cradle       | 84.25 | 95.81 |
|         oven        | 23.82 | 69.18 |
|         ball        | 49.07 | 58.61 |
|         food        | 56.77 | 72.51 |
|         step        | 16.86 | 21.31 |
|         tank        | 44.22 | 49.15 |
|      trade name     | 22.25 | 27.17 |
|      microwave      | 36.49 | 38.23 |
|         pot         | 48.02 | 56.32 |
|        animal       | 61.84 | 67.57 |
|       bicycle       | 54.76 | 71.82 |
|         lake        |  0.0  |  0.0  |
|      dishwasher     | 52.79 | 68.38 |
|        screen       | 52.08 |  71.8 |
|       blanket       |  9.06 |  10.0 |
|      sculpture      | 32.39 | 49.49 |
|         hood        | 72.83 | 78.24 |
|        sconce       | 44.03 | 52.04 |
|         vase        | 32.29 | 45.32 |
|    traffic light    | 30.92 | 56.17 |
|         tray        | 14.93 | 20.85 |
|        ashcan       | 33.81 | 54.16 |
|         fan         | 59.66 | 79.12 |
|         pier        | 12.09 | 18.18 |
|      crt screen     |  8.26 |  20.7 |
|        plate        | 48.32 | 68.23 |
|       monitor       | 54.65 | 68.56 |
|    bulletin board   |  35.5 |  40.9 |
|        shower       |  1.36 | 19.33 |
|       radiator      |  57.0 | 63.27 |
|        glass        |  16.1 | 17.52 |
|        clock        | 31.84 | 37.08 |
|         flag        | 30.53 | 34.39 |
+---------------------+-------+-------+
09/21 07:20:39 - mmengine - INFO - Iter(test) [2000/2000]    aAcc: 81.0600  mIoU: 45.5700  mAcc: 58.4000  data_time: 0.0016  time: 0.1387
Finished processing corruption type: jpeg_compression
Processing corruption type: elastic_transform
09/21 07:20:44 - mmengine - INFO - 
------------------------------------------------------------
System environment:
    sys.platform: linux
    Python: 3.10.13 | packaged by conda-forge | (main, Dec 23 2023, 15:36:39) [GCC 12.3.0]
    CUDA available: True
    MUSA available: False
    numpy_random_seed: 708053696
    GPU 0: Tesla V100-SXM2-32GB
    CUDA_HOME: /opt/bwhpc/common/devel/cuda/11.7
    NVCC: Cuda compilation tools, release 11.7, V11.7.99
    GCC: gcc (GCC) 8.5.0 20210514 (Red Hat 8.5.0-18)
    PyTorch: 1.13.1
    PyTorch compiling details: PyTorch built with:
  - GCC 9.3
  - C++ Version: 201402
  - Intel(R) oneAPI Math Kernel Library Version 2023.1-Product Build 20230303 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v2.6.0 (Git Hash 52b5f107dd9cf10910aaa19cb47f3abf9b349815)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - LAPACK is enabled (usually provided by MKL)
  - NNPACK is enabled
  - CPU capability usage: AVX2
  - CUDA Runtime 11.7
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_61,code=sm_61;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86;-gencode;arch=compute_37,code=compute_37
  - CuDNN 8.5
  - Magma 2.6.1
  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.7, CUDNN_VERSION=8.5.0, CXX_COMPILER=/opt/rh/devtoolset-9/root/usr/bin/c++, CXX_FLAGS= -fabi-version=11 -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -DEDGE_PROFILER_USE_KINETO -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Werror=non-virtual-dtor -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wunused-local-typedefs -Wno-unused-parameter -Wno-unused-function -Wno-unused-result -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Werror=cast-function-type -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.13.1, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, USE_ROCM=OFF, 

    TorchVision: 0.14.1
    OpenCV: 3.4.18
    MMEngine: 0.10.4

Runtime environment:
    cudnn_benchmark: True
    mp_cfg: {'mp_start_method': 'fork', 'opencv_num_threads': 0}
    dist_cfg: {'backend': 'nccl'}
    seed: 708053696
    Distributed launcher: none
    Distributed training: False
    GPU number: 1
------------------------------------------------------------

09/21 07:20:44 - mmengine - INFO - Config:
auto_scale_lr = dict(base_batch_size=16, enable=False)
crop_size = (
    512,
    512,
)
custom_imports = dict(allow_failed_imports=False, imports='mmdet.models')
data_root = 'data/ade/ADEChallengeData2016'
dataset_type = 'ADE20KDataset'
default_hooks = dict(
    checkpoint=dict(
        by_epoch=False, interval=5000, save_best='mIoU',
        type='CheckpointHook'),
    logger=dict(interval=50, log_metric_by_epoch=False, type='LoggerHook'),
    param_scheduler=dict(type='ParamSchedulerHook'),
    sampler_seed=dict(type='DistSamplerSeedHook'),
    timer=dict(type='IterTimerHook'),
    visualization=dict(type='SegVisualizationHook'))
default_scope = 'mmseg'
embed_multi = dict(decay_mult=0.0, lr_mult=1.0)
env_cfg = dict(
    cudnn_benchmark=True,
    dist_cfg=dict(backend='nccl'),
    mp_cfg=dict(mp_start_method='fork', opencv_num_threads=0))
img_ratios = [
    0.5,
    0.75,
    1.0,
    1.25,
    1.5,
    1.75,
]
launcher = 'none'
load_from = '../checkpoint_files/ade20k/mask2former/mask2former_r101_8xb2-160k_ade20k-512x512_20221203_233905-b7135890.pth'
log_level = 'INFO'
log_processor = dict(by_epoch=False)
model = dict(
    backbone=dict(
        deep_stem=False,
        depth=101,
        frozen_stages=-1,
        init_cfg=dict(checkpoint='torchvision://resnet101', type='Pretrained'),
        norm_cfg=dict(requires_grad=False, type='SyncBN'),
        num_stages=4,
        out_indices=(
            0,
            1,
            2,
            3,
        ),
        style='pytorch',
        type='ResNet'),
    data_preprocessor=dict(
        bgr_to_rgb=True,
        corruption='elastic_transform',
        mean=[
            123.675,
            116.28,
            103.53,
        ],
        pad_val=0,
        seg_pad_val=255,
        size=(
            512,
            512,
        ),
        std=[
            58.395,
            57.12,
            57.375,
        ],
        test_cfg=dict(size_divisor=32),
        type='SegDataPreProcessor'),
    decode_head=dict(
        align_corners=False,
        enforce_decoder_input_project=False,
        feat_channels=256,
        in_channels=[
            256,
            512,
            1024,
            2048,
        ],
        loss_cls=dict(
            class_weight=[
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                0.1,
            ],
            loss_weight=2.0,
            reduction='mean',
            type='mmdet.CrossEntropyLoss',
            use_sigmoid=False),
        loss_dice=dict(
            activate=True,
            eps=1.0,
            loss_weight=5.0,
            naive_dice=True,
            reduction='mean',
            type='mmdet.DiceLoss',
            use_sigmoid=True),
        loss_mask=dict(
            loss_weight=5.0,
            reduction='mean',
            type='mmdet.CrossEntropyLoss',
            use_sigmoid=True),
        num_classes=150,
        num_queries=100,
        num_transformer_feat_level=3,
        out_channels=256,
        pixel_decoder=dict(
            act_cfg=dict(type='ReLU'),
            encoder=dict(
                init_cfg=None,
                layer_cfg=dict(
                    ffn_cfg=dict(
                        act_cfg=dict(inplace=True, type='ReLU'),
                        embed_dims=256,
                        feedforward_channels=1024,
                        ffn_drop=0.0,
                        num_fcs=2),
                    self_attn_cfg=dict(
                        batch_first=True,
                        dropout=0.0,
                        embed_dims=256,
                        im2col_step=64,
                        init_cfg=None,
                        norm_cfg=None,
                        num_heads=8,
                        num_levels=3,
                        num_points=4)),
                num_layers=6),
            init_cfg=None,
            norm_cfg=dict(num_groups=32, type='GN'),
            num_outs=3,
            positional_encoding=dict(normalize=True, num_feats=128),
            type='mmdet.MSDeformAttnPixelDecoder'),
        positional_encoding=dict(normalize=True, num_feats=128),
        strides=[
            4,
            8,
            16,
            32,
        ],
        train_cfg=dict(
            assigner=dict(
                match_costs=[
                    dict(type='mmdet.ClassificationCost', weight=2.0),
                    dict(
                        type='mmdet.CrossEntropyLossCost',
                        use_sigmoid=True,
                        weight=5.0),
                    dict(
                        eps=1.0,
                        pred_act=True,
                        type='mmdet.DiceCost',
                        weight=5.0),
                ],
                type='mmdet.HungarianAssigner'),
            importance_sample_ratio=0.75,
            num_points=12544,
            oversample_ratio=3.0,
            sampler=dict(type='mmdet.MaskPseudoSampler')),
        transformer_decoder=dict(
            init_cfg=None,
            layer_cfg=dict(
                cross_attn_cfg=dict(
                    attn_drop=0.0,
                    batch_first=True,
                    dropout_layer=None,
                    embed_dims=256,
                    num_heads=8,
                    proj_drop=0.0),
                ffn_cfg=dict(
                    act_cfg=dict(inplace=True, type='ReLU'),
                    add_identity=True,
                    dropout_layer=None,
                    embed_dims=256,
                    feedforward_channels=2048,
                    ffn_drop=0.0,
                    num_fcs=2),
                self_attn_cfg=dict(
                    attn_drop=0.0,
                    batch_first=True,
                    dropout_layer=None,
                    embed_dims=256,
                    num_heads=8,
                    proj_drop=0.0)),
            num_layers=9,
            return_intermediate=True),
        type='Mask2FormerHead'),
    test_cfg=dict(mode='whole'),
    train_cfg=dict(),
    type='EncoderDecoder')
num_classes = 150
optim_wrapper = dict(
    clip_grad=dict(max_norm=0.01, norm_type=2),
    optimizer=dict(
        betas=(
            0.9,
            0.999,
        ),
        eps=1e-08,
        lr=0.0001,
        type='AdamW',
        weight_decay=0.05),
    paramwise_cfg=dict(
        custom_keys=dict(
            backbone=dict(decay_mult=1.0, lr_mult=0.1),
            level_embed=dict(decay_mult=0.0, lr_mult=1.0),
            query_embed=dict(decay_mult=0.0, lr_mult=1.0),
            query_feat=dict(decay_mult=0.0, lr_mult=1.0)),
        norm_decay_mult=0.0),
    type='OptimWrapper')
optimizer = dict(
    betas=(
        0.9,
        0.999,
    ),
    eps=1e-08,
    lr=0.0001,
    type='AdamW',
    weight_decay=0.05)
param_scheduler = [
    dict(
        begin=0,
        by_epoch=False,
        end=160000,
        eta_min=0,
        power=0.9,
        type='PolyLR'),
]
resume = False
test_cfg = dict(type='TestLoop')
test_dataloader = dict(
    batch_size=1,
    dataset=dict(
        data_prefix=dict(
            img_path='images/validation',
            seg_map_path='annotations/validation'),
        data_root='data/ade/ADEChallengeData2016',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(keep_ratio=True, scale=(
                2048,
                512,
            ), type='Resize'),
            dict(reduce_zero_label=True, type='LoadAnnotations'),
            dict(type='PackSegInputs'),
        ],
        type='ADE20KDataset'),
    num_workers=4,
    persistent_workers=True,
    sampler=dict(shuffle=False, type='DefaultSampler'))
test_evaluator = dict(
    iou_metrics=[
        'mIoU',
    ], type='IoUMetric')
test_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(keep_ratio=True, scale=(
        2048,
        512,
    ), type='Resize'),
    dict(reduce_zero_label=True, type='LoadAnnotations'),
    dict(type='PackSegInputs'),
]
train_cfg = dict(
    max_iters=160000, type='IterBasedTrainLoop', val_interval=5000)
train_dataloader = dict(
    batch_size=2,
    dataset=dict(
        data_prefix=dict(
            img_path='images/training', seg_map_path='annotations/training'),
        data_root='data/ade/ADEChallengeData2016',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(reduce_zero_label=True, type='LoadAnnotations'),
            dict(
                max_size=2048,
                resize_type='ResizeShortestEdge',
                scales=[
                    256,
                    307,
                    358,
                    409,
                    460,
                    512,
                    563,
                    614,
                    665,
                    716,
                    768,
                    819,
                    870,
                    921,
                    972,
                    1024,
                ],
                type='RandomChoiceResize'),
            dict(
                cat_max_ratio=0.75, crop_size=(
                    512,
                    512,
                ), type='RandomCrop'),
            dict(prob=0.5, type='RandomFlip'),
            dict(type='PhotoMetricDistortion'),
            dict(type='PackSegInputs'),
        ],
        type='ADE20KDataset'),
    num_workers=4,
    persistent_workers=True,
    sampler=dict(shuffle=True, type='InfiniteSampler'))
train_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(reduce_zero_label=True, type='LoadAnnotations'),
    dict(
        max_size=2048,
        resize_type='ResizeShortestEdge',
        scales=[
            256,
            307,
            358,
            409,
            460,
            512,
            563,
            614,
            665,
            716,
            768,
            819,
            870,
            921,
            972,
            1024,
        ],
        type='RandomChoiceResize'),
    dict(cat_max_ratio=0.75, crop_size=(
        512,
        512,
    ), type='RandomCrop'),
    dict(prob=0.5, type='RandomFlip'),
    dict(type='PhotoMetricDistortion'),
    dict(type='PackSegInputs'),
]
tta_model = dict(type='SegTTAModel')
tta_pipeline = [
    dict(backend_args=None, type='LoadImageFromFile'),
    dict(
        transforms=[
            [
                dict(keep_ratio=True, scale_factor=0.5, type='Resize'),
                dict(keep_ratio=True, scale_factor=0.75, type='Resize'),
                dict(keep_ratio=True, scale_factor=1.0, type='Resize'),
                dict(keep_ratio=True, scale_factor=1.25, type='Resize'),
                dict(keep_ratio=True, scale_factor=1.5, type='Resize'),
                dict(keep_ratio=True, scale_factor=1.75, type='Resize'),
            ],
            [
                dict(direction='horizontal', prob=0.0, type='RandomFlip'),
                dict(direction='horizontal', prob=1.0, type='RandomFlip'),
            ],
            [
                dict(type='LoadAnnotations'),
            ],
            [
                dict(type='PackSegInputs'),
            ],
        ],
        type='TestTimeAug'),
]
val_cfg = dict(type='ValLoop')
val_dataloader = dict(
    batch_size=1,
    dataset=dict(
        data_prefix=dict(
            img_path='images/validation',
            seg_map_path='annotations/validation'),
        data_root='data/ade/ADEChallengeData2016',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(keep_ratio=True, scale=(
                2048,
                512,
            ), type='Resize'),
            dict(reduce_zero_label=True, type='LoadAnnotations'),
            dict(type='PackSegInputs'),
        ],
        type='ADE20KDataset'),
    num_workers=4,
    persistent_workers=True,
    sampler=dict(shuffle=False, type='DefaultSampler'))
val_evaluator = dict(
    iou_metrics=[
        'mIoU',
    ], type='IoUMetric')
vis_backends = [
    dict(type='LocalVisBackend'),
]
visualizer = dict(
    name='visualizer',
    type='SegLocalVisualizer',
    vis_backends=[
        dict(type='LocalVisBackend'),
    ])
work_dir = '../corruptions/work_dirs/ade20k/mask2former/mask2former_r101_8xb2-160k_ade20k-512x512/elastic_transform'

09/21 07:20:47 - mmengine - INFO - Distributed training is not used, all SyncBatchNorm (SyncBN) layers in the model will be automatically reverted to BatchNormXd layers if they are used.
09/21 07:20:47 - mmengine - INFO - Hooks will be executed in the following order:
before_run:
(VERY_HIGH   ) RuntimeInfoHook                    
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
before_train:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_train_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(NORMAL      ) DistSamplerSeedHook                
 -------------------- 
before_train_iter:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_train_iter:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(NORMAL      ) SegVisualizationHook               
(BELOW_NORMAL) LoggerHook                         
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
after_train_epoch:
(NORMAL      ) IterTimerHook                      
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_val:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
before_val_epoch:
(NORMAL      ) IterTimerHook                      
 -------------------- 
before_val_iter:
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_val_iter:
(NORMAL      ) IterTimerHook                      
(NORMAL      ) SegVisualizationHook               
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_val_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
after_val:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
after_train:
(VERY_HIGH   ) RuntimeInfoHook                    
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_test:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
before_test_epoch:
(NORMAL      ) IterTimerHook                      
 -------------------- 
before_test_iter:
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_test_iter:
(NORMAL      ) IterTimerHook                      
(NORMAL      ) SegVisualizationHook               
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_test_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_test:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
after_run:
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
09/21 07:20:47 - mmengine - WARNING - The prefix is not set in metric class IoUMetric.
Loads checkpoint by local backend from path: ../checkpoint_files/ade20k/mask2former/mask2former_r101_8xb2-160k_ade20k-512x512_20221203_233905-b7135890.pth
09/21 07:20:48 - mmengine - INFO - Load checkpoint from ../checkpoint_files/ade20k/mask2former/mask2former_r101_8xb2-160k_ade20k-512x512_20221203_233905-b7135890.pth
09/21 07:22:40 - mmengine - INFO - Iter(test) [  50/2000]    eta: 1:12:56  time: 1.9318  data_time: 0.0016  memory: 17239  
09/21 07:23:44 - mmengine - INFO - Iter(test) [ 100/2000]    eta: 0:55:34  time: 1.5099  data_time: 0.0016  memory: 17230  
09/21 07:24:34 - mmengine - INFO - Iter(test) [ 150/2000]    eta: 0:46:30  time: 1.0383  data_time: 0.0016  memory: 943  
09/21 07:25:36 - mmengine - INFO - Iter(test) [ 200/2000]    eta: 0:43:06  time: 1.0052  data_time: 0.0018  memory: 17287  
09/21 07:26:31 - mmengine - INFO - Iter(test) [ 250/2000]    eta: 0:39:58  time: 0.9904  data_time: 0.0015  memory: 17293  
09/21 07:27:24 - mmengine - INFO - Iter(test) [ 300/2000]    eta: 0:37:24  time: 1.0389  data_time: 0.0016  memory: 17234  
09/21 07:28:23 - mmengine - INFO - Iter(test) [ 350/2000]    eta: 0:35:42  time: 0.9553  data_time: 0.0015  memory: 17237  
09/21 07:29:16 - mmengine - INFO - Iter(test) [ 400/2000]    eta: 0:33:52  time: 1.0194  data_time: 0.0015  memory: 17220  
09/21 07:30:02 - mmengine - INFO - Iter(test) [ 450/2000]    eta: 0:31:47  time: 0.9215  data_time: 0.0014  memory: 955  
09/21 07:30:52 - mmengine - INFO - Iter(test) [ 500/2000]    eta: 0:30:10  time: 0.9740  data_time: 0.0015  memory: 943  
09/21 07:31:45 - mmengine - INFO - Iter(test) [ 550/2000]    eta: 0:28:50  time: 1.0537  data_time: 0.0016  memory: 1055  
09/21 07:32:34 - mmengine - INFO - Iter(test) [ 600/2000]    eta: 0:27:27  time: 1.0340  data_time: 0.0016  memory: 1053  
09/21 07:33:28 - mmengine - INFO - Iter(test) [ 650/2000]    eta: 0:26:18  time: 1.4676  data_time: 0.0014  memory: 17241  
09/21 07:34:25 - mmengine - INFO - Iter(test) [ 700/2000]    eta: 0:25:16  time: 1.0412  data_time: 0.0017  memory: 17235  
09/21 07:35:16 - mmengine - INFO - Iter(test) [ 750/2000]    eta: 0:24:05  time: 0.9761  data_time: 0.0014  memory: 1112  
09/21 07:36:03 - mmengine - INFO - Iter(test) [ 800/2000]    eta: 0:22:51  time: 1.0075  data_time: 0.0016  memory: 943  
09/21 07:36:53 - mmengine - INFO - Iter(test) [ 850/2000]    eta: 0:21:45  time: 1.0207  data_time: 0.0016  memory: 915  
09/21 07:37:40 - mmengine - INFO - Iter(test) [ 900/2000]    eta: 0:20:36  time: 0.8929  data_time: 0.0021  memory: 998  
09/21 07:38:31 - mmengine - INFO - Iter(test) [ 950/2000]    eta: 0:19:34  time: 0.9841  data_time: 0.0016  memory: 1027  
09/21 07:39:19 - mmengine - INFO - Iter(test) [1000/2000]    eta: 0:18:30  time: 0.9501  data_time: 0.0015  memory: 1027  
09/21 07:40:14 - mmengine - INFO - Iter(test) [1050/2000]    eta: 0:17:35  time: 1.0346  data_time: 0.0015  memory: 17242  
09/21 07:41:05 - mmengine - INFO - Iter(test) [1100/2000]    eta: 0:16:35  time: 0.9891  data_time: 0.0016  memory: 1024  
09/21 07:41:54 - mmengine - INFO - Iter(test) [1150/2000]    eta: 0:15:35  time: 1.0030  data_time: 0.0015  memory: 996  
09/21 07:42:44 - mmengine - INFO - Iter(test) [1200/2000]    eta: 0:14:37  time: 0.9775  data_time: 0.0015  memory: 1900  
09/21 07:43:37 - mmengine - INFO - Iter(test) [1250/2000]    eta: 0:13:41  time: 0.9588  data_time: 0.0015  memory: 17230  
09/21 07:44:24 - mmengine - INFO - Iter(test) [1300/2000]    eta: 0:12:42  time: 1.0034  data_time: 0.0015  memory: 943  
09/21 07:45:13 - mmengine - INFO - Iter(test) [1350/2000]    eta: 0:11:45  time: 0.9269  data_time: 0.0015  memory: 943  
09/21 07:46:02 - mmengine - INFO - Iter(test) [1400/2000]    eta: 0:10:48  time: 1.0398  data_time: 0.0015  memory: 1025  
09/21 07:46:50 - mmengine - INFO - Iter(test) [1450/2000]    eta: 0:09:52  time: 1.0366  data_time: 0.0014  memory: 1027  
09/21 07:47:38 - mmengine - INFO - Iter(test) [1500/2000]    eta: 0:08:56  time: 0.9191  data_time: 0.0014  memory: 941  
09/21 07:48:30 - mmengine - INFO - Iter(test) [1550/2000]    eta: 0:08:02  time: 1.0281  data_time: 0.0015  memory: 1027  
09/21 07:49:18 - mmengine - INFO - Iter(test) [1600/2000]    eta: 0:07:07  time: 0.9788  data_time: 0.0016  memory: 915  
09/21 07:50:12 - mmengine - INFO - Iter(test) [1650/2000]    eta: 0:06:14  time: 0.9207  data_time: 0.0015  memory: 17237  
09/21 07:51:02 - mmengine - INFO - Iter(test) [1700/2000]    eta: 0:05:20  time: 1.0002  data_time: 0.0016  memory: 1024  
09/21 07:51:53 - mmengine - INFO - Iter(test) [1750/2000]    eta: 0:04:26  time: 0.9879  data_time: 0.0014  memory: 1052  
09/21 07:52:41 - mmengine - INFO - Iter(test) [1800/2000]    eta: 0:03:32  time: 1.0131  data_time: 0.0016  memory: 943  
09/21 07:53:31 - mmengine - INFO - Iter(test) [1850/2000]    eta: 0:02:39  time: 1.0103  data_time: 0.0016  memory: 859  
09/21 07:54:18 - mmengine - INFO - Iter(test) [1900/2000]    eta: 0:01:45  time: 0.9592  data_time: 0.0015  memory: 1084  
09/21 07:55:08 - mmengine - INFO - Iter(test) [1950/2000]    eta: 0:00:52  time: 0.9797  data_time: 0.0015  memory: 1331  
09/21 07:55:56 - mmengine - INFO - Iter(test) [2000/2000]    eta: 0:00:00  time: 0.8997  data_time: 0.0014  memory: 1110  
09/21 07:55:56 - mmengine - INFO - per class results:
09/21 07:55:56 - mmengine - INFO - 
+---------------------+-------+-------+
|        Class        |  IoU  |  Acc  |
+---------------------+-------+-------+
|         wall        | 62.39 | 77.01 |
|       building      | 72.06 | 85.49 |
|         sky         | 83.96 | 91.19 |
|        floor        | 68.87 | 81.53 |
|         tree        | 62.12 | 77.41 |
|       ceiling       | 68.71 | 82.85 |
|         road        | 75.56 | 86.28 |
|         bed         | 75.62 | 86.28 |
|      windowpane     | 47.37 | 66.04 |
|        grass        |  56.4 | 71.66 |
|       cabinet       | 45.93 | 58.16 |
|       sidewalk      | 52.77 | 66.78 |
|        person       | 60.14 | 74.06 |
|        earth        | 29.95 |  41.3 |
|         door        | 35.88 | 51.29 |
|        table        |  41.5 | 60.51 |
|       mountain      | 51.69 | 64.25 |
|        plant        |  39.7 | 51.69 |
|       curtain       | 50.72 | 68.46 |
|        chair        | 38.98 | 56.12 |
|         car         | 59.68 | 75.29 |
|        water        | 46.56 | 69.84 |
|       painting      | 43.08 | 61.89 |
|         sofa        | 53.46 | 71.44 |
|        shelf        | 32.88 | 54.92 |
|        house        | 30.38 | 43.94 |
|         sea         | 45.13 | 60.79 |
|        mirror       | 51.43 | 65.55 |
|         rug         | 50.57 | 60.84 |
|        field        | 26.59 | 50.33 |
|       armchair      | 34.74 | 50.78 |
|         seat        | 55.29 | 79.72 |
|        fence        | 27.43 | 44.19 |
|         desk        | 37.96 | 58.87 |
|         rock        | 39.15 | 68.58 |
|       wardrobe      | 36.83 | 57.88 |
|         lamp        | 29.21 | 45.71 |
|       bathtub       | 61.92 | 75.14 |
|       railing       | 22.11 | 40.51 |
|       cushion       |  38.2 | 53.68 |
|         base        | 18.62 | 31.03 |
|         box         |  18.5 |  28.1 |
|        column       | 27.41 | 39.99 |
|      signboard      | 18.89 | 33.71 |
|   chest of drawers  | 39.28 | 60.47 |
|       counter       | 25.53 | 35.42 |
|         sand        | 33.17 | 50.29 |
|         sink        | 49.83 | 62.07 |
|      skyscraper     | 42.92 | 57.75 |
|      fireplace      | 57.49 | 75.15 |
|     refrigerator    | 58.88 | 72.25 |
|      grandstand     | 34.23 | 70.58 |
|         path        | 20.12 | 33.96 |
|        stairs       | 28.04 | 37.52 |
|        runway       | 69.71 | 91.27 |
|         case        | 44.22 | 58.75 |
|      pool table     | 75.35 | 87.34 |
|        pillow       | 41.57 | 55.38 |
|     screen door     |  54.7 | 65.35 |
|       stairway      | 23.51 | 35.98 |
|        river        | 13.97 | 19.54 |
|        bridge       | 41.08 | 70.07 |
|       bookcase      | 20.55 | 33.13 |
|        blind        | 25.32 | 28.96 |
|     coffee table    | 48.55 | 69.19 |
|        toilet       | 62.27 | 73.88 |
|        flower       | 21.95 | 37.77 |
|         book        | 31.14 | 48.17 |
|         hill        | 10.38 | 24.48 |
|        bench        |  33.3 | 54.21 |
|      countertop     | 39.33 | 55.77 |
|        stove        | 61.49 | 73.94 |
|         palm        | 36.95 | 56.25 |
|    kitchen island   | 27.61 | 68.22 |
|       computer      | 51.03 | 63.88 |
|     swivel chair    | 28.14 |  47.5 |
|         boat        | 26.22 | 39.91 |
|         bar         | 31.33 | 41.71 |
|    arcade machine   | 52.94 | 62.19 |
|        hovel        |  4.61 |  7.6  |
|         bus         | 65.18 | 81.47 |
|        towel        | 43.22 | 60.47 |
|        light        | 14.99 | 25.67 |
|        truck        | 15.71 |  32.3 |
|        tower        | 26.33 | 44.66 |
|      chandelier     | 39.08 | 54.08 |
|        awning       | 14.99 | 22.89 |
|     streetlight     |  9.63 | 17.44 |
|        booth        | 24.62 | 29.98 |
| television receiver | 39.69 | 56.72 |
|       airplane      | 35.91 | 50.11 |
|      dirt track     |  6.8  | 13.49 |
|       apparel       | 26.69 |  60.2 |
|         pole        |  6.32 | 12.03 |
|         land        |  4.68 |  6.59 |
|      bannister      |  4.5  |  8.6  |
|      escalator      | 52.75 | 67.07 |
|       ottoman       | 35.74 | 59.71 |
|        bottle       |  8.29 | 12.45 |
|        buffet       | 29.23 | 36.86 |
|        poster       | 18.53 | 29.28 |
|        stage        |  4.43 |  8.86 |
|         van         | 23.64 | 34.09 |
|         ship        | 29.55 | 74.32 |
|       fountain      |  3.24 |  4.46 |
|    conveyer belt    | 56.14 | 80.72 |
|        canopy       |  9.3  |  12.7 |
|        washer       | 55.39 | 60.98 |
|      plaything      | 14.19 | 34.62 |
|    swimming pool    | 35.53 | 57.97 |
|        stool        | 26.64 | 40.24 |
|        barrel       | 32.96 | 76.12 |
|        basket       | 27.38 | 36.02 |
|      waterfall      | 69.32 | 81.85 |
|         tent        | 69.98 | 85.68 |
|         bag         | 12.36 | 20.52 |
|       minibike      | 31.38 | 38.68 |
|        cradle       | 58.75 | 73.94 |
|         oven        | 19.23 | 58.78 |
|         ball        |  34.7 |  57.9 |
|         food        | 48.55 | 64.05 |
|         step        |  11.2 | 16.01 |
|         tank        | 40.62 | 51.85 |
|      trade name     |  16.8 |  22.3 |
|      microwave      | 23.77 | 27.22 |
|         pot         | 21.29 | 30.54 |
|        animal       |  51.5 | 62.42 |
|       bicycle       | 27.22 | 54.87 |
|         lake        |  0.0  |  0.0  |
|      dishwasher     | 46.11 | 64.06 |
|        screen       | 46.62 |  66.0 |
|       blanket       | 14.51 | 20.72 |
|      sculpture      | 20.34 | 40.87 |
|         hood        | 46.27 | 63.16 |
|        sconce       | 19.92 | 32.34 |
|         vase        | 13.51 | 27.45 |
|    traffic light    | 17.68 | 36.55 |
|         tray        |  7.56 | 16.16 |
|        ashcan       |  20.2 | 38.15 |
|         fan         | 28.27 | 46.12 |
|         pier        | 23.72 | 42.86 |
|      crt screen     |  2.55 |  7.7  |
|        plate        | 31.18 | 50.26 |
|       monitor       |  6.49 |  8.88 |
|    bulletin board   | 28.46 |  36.1 |
|        shower       |  1.13 |  8.39 |
|       radiator      | 33.04 | 43.17 |
|        glass        |  8.93 | 11.37 |
|        clock        | 14.88 |  23.0 |
|         flag        | 24.09 | 33.96 |
+---------------------+-------+-------+
09/21 07:55:56 - mmengine - INFO - Iter(test) [2000/2000]    aAcc: 73.0400  mIoU: 34.8400  mAcc: 49.4300  data_time: 0.0017  time: 1.0537
Finished processing corruption type: elastic_transform
Processing corruption type: pixelate
09/21 07:56:00 - mmengine - INFO - 
------------------------------------------------------------
System environment:
    sys.platform: linux
    Python: 3.10.13 | packaged by conda-forge | (main, Dec 23 2023, 15:36:39) [GCC 12.3.0]
    CUDA available: True
    MUSA available: False
    numpy_random_seed: 1568423243
    GPU 0: Tesla V100-SXM2-32GB
    CUDA_HOME: /opt/bwhpc/common/devel/cuda/11.7
    NVCC: Cuda compilation tools, release 11.7, V11.7.99
    GCC: gcc (GCC) 8.5.0 20210514 (Red Hat 8.5.0-18)
    PyTorch: 1.13.1
    PyTorch compiling details: PyTorch built with:
  - GCC 9.3
  - C++ Version: 201402
  - Intel(R) oneAPI Math Kernel Library Version 2023.1-Product Build 20230303 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v2.6.0 (Git Hash 52b5f107dd9cf10910aaa19cb47f3abf9b349815)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - LAPACK is enabled (usually provided by MKL)
  - NNPACK is enabled
  - CPU capability usage: AVX2
  - CUDA Runtime 11.7
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_61,code=sm_61;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86;-gencode;arch=compute_37,code=compute_37
  - CuDNN 8.5
  - Magma 2.6.1
  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.7, CUDNN_VERSION=8.5.0, CXX_COMPILER=/opt/rh/devtoolset-9/root/usr/bin/c++, CXX_FLAGS= -fabi-version=11 -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -DEDGE_PROFILER_USE_KINETO -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Werror=non-virtual-dtor -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wunused-local-typedefs -Wno-unused-parameter -Wno-unused-function -Wno-unused-result -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Werror=cast-function-type -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.13.1, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, USE_ROCM=OFF, 

    TorchVision: 0.14.1
    OpenCV: 3.4.18
    MMEngine: 0.10.4

Runtime environment:
    cudnn_benchmark: True
    mp_cfg: {'mp_start_method': 'fork', 'opencv_num_threads': 0}
    dist_cfg: {'backend': 'nccl'}
    seed: 1568423243
    Distributed launcher: none
    Distributed training: False
    GPU number: 1
------------------------------------------------------------

09/21 07:56:01 - mmengine - INFO - Config:
auto_scale_lr = dict(base_batch_size=16, enable=False)
crop_size = (
    512,
    512,
)
custom_imports = dict(allow_failed_imports=False, imports='mmdet.models')
data_root = 'data/ade/ADEChallengeData2016'
dataset_type = 'ADE20KDataset'
default_hooks = dict(
    checkpoint=dict(
        by_epoch=False, interval=5000, save_best='mIoU',
        type='CheckpointHook'),
    logger=dict(interval=50, log_metric_by_epoch=False, type='LoggerHook'),
    param_scheduler=dict(type='ParamSchedulerHook'),
    sampler_seed=dict(type='DistSamplerSeedHook'),
    timer=dict(type='IterTimerHook'),
    visualization=dict(type='SegVisualizationHook'))
default_scope = 'mmseg'
embed_multi = dict(decay_mult=0.0, lr_mult=1.0)
env_cfg = dict(
    cudnn_benchmark=True,
    dist_cfg=dict(backend='nccl'),
    mp_cfg=dict(mp_start_method='fork', opencv_num_threads=0))
img_ratios = [
    0.5,
    0.75,
    1.0,
    1.25,
    1.5,
    1.75,
]
launcher = 'none'
load_from = '../checkpoint_files/ade20k/mask2former/mask2former_r101_8xb2-160k_ade20k-512x512_20221203_233905-b7135890.pth'
log_level = 'INFO'
log_processor = dict(by_epoch=False)
model = dict(
    backbone=dict(
        deep_stem=False,
        depth=101,
        frozen_stages=-1,
        init_cfg=dict(checkpoint='torchvision://resnet101', type='Pretrained'),
        norm_cfg=dict(requires_grad=False, type='SyncBN'),
        num_stages=4,
        out_indices=(
            0,
            1,
            2,
            3,
        ),
        style='pytorch',
        type='ResNet'),
    data_preprocessor=dict(
        bgr_to_rgb=True,
        corruption='pixelate',
        mean=[
            123.675,
            116.28,
            103.53,
        ],
        pad_val=0,
        seg_pad_val=255,
        size=(
            512,
            512,
        ),
        std=[
            58.395,
            57.12,
            57.375,
        ],
        test_cfg=dict(size_divisor=32),
        type='SegDataPreProcessor'),
    decode_head=dict(
        align_corners=False,
        enforce_decoder_input_project=False,
        feat_channels=256,
        in_channels=[
            256,
            512,
            1024,
            2048,
        ],
        loss_cls=dict(
            class_weight=[
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                0.1,
            ],
            loss_weight=2.0,
            reduction='mean',
            type='mmdet.CrossEntropyLoss',
            use_sigmoid=False),
        loss_dice=dict(
            activate=True,
            eps=1.0,
            loss_weight=5.0,
            naive_dice=True,
            reduction='mean',
            type='mmdet.DiceLoss',
            use_sigmoid=True),
        loss_mask=dict(
            loss_weight=5.0,
            reduction='mean',
            type='mmdet.CrossEntropyLoss',
            use_sigmoid=True),
        num_classes=150,
        num_queries=100,
        num_transformer_feat_level=3,
        out_channels=256,
        pixel_decoder=dict(
            act_cfg=dict(type='ReLU'),
            encoder=dict(
                init_cfg=None,
                layer_cfg=dict(
                    ffn_cfg=dict(
                        act_cfg=dict(inplace=True, type='ReLU'),
                        embed_dims=256,
                        feedforward_channels=1024,
                        ffn_drop=0.0,
                        num_fcs=2),
                    self_attn_cfg=dict(
                        batch_first=True,
                        dropout=0.0,
                        embed_dims=256,
                        im2col_step=64,
                        init_cfg=None,
                        norm_cfg=None,
                        num_heads=8,
                        num_levels=3,
                        num_points=4)),
                num_layers=6),
            init_cfg=None,
            norm_cfg=dict(num_groups=32, type='GN'),
            num_outs=3,
            positional_encoding=dict(normalize=True, num_feats=128),
            type='mmdet.MSDeformAttnPixelDecoder'),
        positional_encoding=dict(normalize=True, num_feats=128),
        strides=[
            4,
            8,
            16,
            32,
        ],
        train_cfg=dict(
            assigner=dict(
                match_costs=[
                    dict(type='mmdet.ClassificationCost', weight=2.0),
                    dict(
                        type='mmdet.CrossEntropyLossCost',
                        use_sigmoid=True,
                        weight=5.0),
                    dict(
                        eps=1.0,
                        pred_act=True,
                        type='mmdet.DiceCost',
                        weight=5.0),
                ],
                type='mmdet.HungarianAssigner'),
            importance_sample_ratio=0.75,
            num_points=12544,
            oversample_ratio=3.0,
            sampler=dict(type='mmdet.MaskPseudoSampler')),
        transformer_decoder=dict(
            init_cfg=None,
            layer_cfg=dict(
                cross_attn_cfg=dict(
                    attn_drop=0.0,
                    batch_first=True,
                    dropout_layer=None,
                    embed_dims=256,
                    num_heads=8,
                    proj_drop=0.0),
                ffn_cfg=dict(
                    act_cfg=dict(inplace=True, type='ReLU'),
                    add_identity=True,
                    dropout_layer=None,
                    embed_dims=256,
                    feedforward_channels=2048,
                    ffn_drop=0.0,
                    num_fcs=2),
                self_attn_cfg=dict(
                    attn_drop=0.0,
                    batch_first=True,
                    dropout_layer=None,
                    embed_dims=256,
                    num_heads=8,
                    proj_drop=0.0)),
            num_layers=9,
            return_intermediate=True),
        type='Mask2FormerHead'),
    test_cfg=dict(mode='whole'),
    train_cfg=dict(),
    type='EncoderDecoder')
num_classes = 150
optim_wrapper = dict(
    clip_grad=dict(max_norm=0.01, norm_type=2),
    optimizer=dict(
        betas=(
            0.9,
            0.999,
        ),
        eps=1e-08,
        lr=0.0001,
        type='AdamW',
        weight_decay=0.05),
    paramwise_cfg=dict(
        custom_keys=dict(
            backbone=dict(decay_mult=1.0, lr_mult=0.1),
            level_embed=dict(decay_mult=0.0, lr_mult=1.0),
            query_embed=dict(decay_mult=0.0, lr_mult=1.0),
            query_feat=dict(decay_mult=0.0, lr_mult=1.0)),
        norm_decay_mult=0.0),
    type='OptimWrapper')
optimizer = dict(
    betas=(
        0.9,
        0.999,
    ),
    eps=1e-08,
    lr=0.0001,
    type='AdamW',
    weight_decay=0.05)
param_scheduler = [
    dict(
        begin=0,
        by_epoch=False,
        end=160000,
        eta_min=0,
        power=0.9,
        type='PolyLR'),
]
resume = False
test_cfg = dict(type='TestLoop')
test_dataloader = dict(
    batch_size=1,
    dataset=dict(
        data_prefix=dict(
            img_path='images/validation',
            seg_map_path='annotations/validation'),
        data_root='data/ade/ADEChallengeData2016',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(keep_ratio=True, scale=(
                2048,
                512,
            ), type='Resize'),
            dict(reduce_zero_label=True, type='LoadAnnotations'),
            dict(type='PackSegInputs'),
        ],
        type='ADE20KDataset'),
    num_workers=4,
    persistent_workers=True,
    sampler=dict(shuffle=False, type='DefaultSampler'))
test_evaluator = dict(
    iou_metrics=[
        'mIoU',
    ], type='IoUMetric')
test_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(keep_ratio=True, scale=(
        2048,
        512,
    ), type='Resize'),
    dict(reduce_zero_label=True, type='LoadAnnotations'),
    dict(type='PackSegInputs'),
]
train_cfg = dict(
    max_iters=160000, type='IterBasedTrainLoop', val_interval=5000)
train_dataloader = dict(
    batch_size=2,
    dataset=dict(
        data_prefix=dict(
            img_path='images/training', seg_map_path='annotations/training'),
        data_root='data/ade/ADEChallengeData2016',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(reduce_zero_label=True, type='LoadAnnotations'),
            dict(
                max_size=2048,
                resize_type='ResizeShortestEdge',
                scales=[
                    256,
                    307,
                    358,
                    409,
                    460,
                    512,
                    563,
                    614,
                    665,
                    716,
                    768,
                    819,
                    870,
                    921,
                    972,
                    1024,
                ],
                type='RandomChoiceResize'),
            dict(
                cat_max_ratio=0.75, crop_size=(
                    512,
                    512,
                ), type='RandomCrop'),
            dict(prob=0.5, type='RandomFlip'),
            dict(type='PhotoMetricDistortion'),
            dict(type='PackSegInputs'),
        ],
        type='ADE20KDataset'),
    num_workers=4,
    persistent_workers=True,
    sampler=dict(shuffle=True, type='InfiniteSampler'))
train_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(reduce_zero_label=True, type='LoadAnnotations'),
    dict(
        max_size=2048,
        resize_type='ResizeShortestEdge',
        scales=[
            256,
            307,
            358,
            409,
            460,
            512,
            563,
            614,
            665,
            716,
            768,
            819,
            870,
            921,
            972,
            1024,
        ],
        type='RandomChoiceResize'),
    dict(cat_max_ratio=0.75, crop_size=(
        512,
        512,
    ), type='RandomCrop'),
    dict(prob=0.5, type='RandomFlip'),
    dict(type='PhotoMetricDistortion'),
    dict(type='PackSegInputs'),
]
tta_model = dict(type='SegTTAModel')
tta_pipeline = [
    dict(backend_args=None, type='LoadImageFromFile'),
    dict(
        transforms=[
            [
                dict(keep_ratio=True, scale_factor=0.5, type='Resize'),
                dict(keep_ratio=True, scale_factor=0.75, type='Resize'),
                dict(keep_ratio=True, scale_factor=1.0, type='Resize'),
                dict(keep_ratio=True, scale_factor=1.25, type='Resize'),
                dict(keep_ratio=True, scale_factor=1.5, type='Resize'),
                dict(keep_ratio=True, scale_factor=1.75, type='Resize'),
            ],
            [
                dict(direction='horizontal', prob=0.0, type='RandomFlip'),
                dict(direction='horizontal', prob=1.0, type='RandomFlip'),
            ],
            [
                dict(type='LoadAnnotations'),
            ],
            [
                dict(type='PackSegInputs'),
            ],
        ],
        type='TestTimeAug'),
]
val_cfg = dict(type='ValLoop')
val_dataloader = dict(
    batch_size=1,
    dataset=dict(
        data_prefix=dict(
            img_path='images/validation',
            seg_map_path='annotations/validation'),
        data_root='data/ade/ADEChallengeData2016',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(keep_ratio=True, scale=(
                2048,
                512,
            ), type='Resize'),
            dict(reduce_zero_label=True, type='LoadAnnotations'),
            dict(type='PackSegInputs'),
        ],
        type='ADE20KDataset'),
    num_workers=4,
    persistent_workers=True,
    sampler=dict(shuffle=False, type='DefaultSampler'))
val_evaluator = dict(
    iou_metrics=[
        'mIoU',
    ], type='IoUMetric')
vis_backends = [
    dict(type='LocalVisBackend'),
]
visualizer = dict(
    name='visualizer',
    type='SegLocalVisualizer',
    vis_backends=[
        dict(type='LocalVisBackend'),
    ])
work_dir = '../corruptions/work_dirs/ade20k/mask2former/mask2former_r101_8xb2-160k_ade20k-512x512/pixelate'

09/21 07:56:03 - mmengine - INFO - Distributed training is not used, all SyncBatchNorm (SyncBN) layers in the model will be automatically reverted to BatchNormXd layers if they are used.
09/21 07:56:03 - mmengine - INFO - Hooks will be executed in the following order:
before_run:
(VERY_HIGH   ) RuntimeInfoHook                    
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
before_train:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_train_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(NORMAL      ) DistSamplerSeedHook                
 -------------------- 
before_train_iter:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_train_iter:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(NORMAL      ) SegVisualizationHook               
(BELOW_NORMAL) LoggerHook                         
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
after_train_epoch:
(NORMAL      ) IterTimerHook                      
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_val:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
before_val_epoch:
(NORMAL      ) IterTimerHook                      
 -------------------- 
before_val_iter:
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_val_iter:
(NORMAL      ) IterTimerHook                      
(NORMAL      ) SegVisualizationHook               
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_val_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
after_val:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
after_train:
(VERY_HIGH   ) RuntimeInfoHook                    
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_test:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
before_test_epoch:
(NORMAL      ) IterTimerHook                      
 -------------------- 
before_test_iter:
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_test_iter:
(NORMAL      ) IterTimerHook                      
(NORMAL      ) SegVisualizationHook               
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_test_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_test:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
after_run:
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
09/21 07:56:04 - mmengine - WARNING - The prefix is not set in metric class IoUMetric.
Loads checkpoint by local backend from path: ../checkpoint_files/ade20k/mask2former/mask2former_r101_8xb2-160k_ade20k-512x512_20221203_233905-b7135890.pth
09/21 07:56:05 - mmengine - INFO - Load checkpoint from ../checkpoint_files/ade20k/mask2former/mask2former_r101_8xb2-160k_ade20k-512x512_20221203_233905-b7135890.pth
09/21 07:57:09 - mmengine - INFO - Iter(test) [  50/2000]    eta: 0:41:45  time: 0.9332  data_time: 0.0015  memory: 17239  
09/21 07:57:25 - mmengine - INFO - Iter(test) [ 100/2000]    eta: 0:25:21  time: 0.5259  data_time: 0.0015  memory: 17230  
09/21 07:57:28 - mmengine - INFO - Iter(test) [ 150/2000]    eta: 0:17:11  time: 0.0717  data_time: 0.0014  memory: 943  
09/21 07:57:41 - mmengine - INFO - Iter(test) [ 200/2000]    eta: 0:14:28  time: 0.0696  data_time: 0.0014  memory: 17287  
09/21 07:57:51 - mmengine - INFO - Iter(test) [ 250/2000]    eta: 0:12:22  time: 0.0644  data_time: 0.0014  memory: 17293  
09/21 07:57:58 - mmengine - INFO - Iter(test) [ 300/2000]    eta: 0:10:45  time: 0.0741  data_time: 0.0015  memory: 17234  
09/21 07:58:10 - mmengine - INFO - Iter(test) [ 350/2000]    eta: 0:09:53  time: 0.0625  data_time: 0.0014  memory: 17237  
09/21 07:58:18 - mmengine - INFO - Iter(test) [ 400/2000]    eta: 0:08:52  time: 0.0694  data_time: 0.0013  memory: 17220  
09/21 07:58:21 - mmengine - INFO - Iter(test) [ 450/2000]    eta: 0:07:50  time: 0.0682  data_time: 0.0014  memory: 955  
09/21 07:58:25 - mmengine - INFO - Iter(test) [ 500/2000]    eta: 0:07:00  time: 0.0708  data_time: 0.0014  memory: 943  
09/21 07:58:28 - mmengine - INFO - Iter(test) [ 550/2000]    eta: 0:06:18  time: 0.0740  data_time: 0.0015  memory: 1055  
09/21 07:58:32 - mmengine - INFO - Iter(test) [ 600/2000]    eta: 0:05:42  time: 0.0640  data_time: 0.0015  memory: 1053  
09/21 07:58:39 - mmengine - INFO - Iter(test) [ 650/2000]    eta: 0:05:21  time: 0.5254  data_time: 0.0014  memory: 17241  
09/21 07:58:47 - mmengine - INFO - Iter(test) [ 700/2000]    eta: 0:05:02  time: 0.0731  data_time: 0.0016  memory: 17235  
09/21 07:58:51 - mmengine - INFO - Iter(test) [ 750/2000]    eta: 0:04:37  time: 0.0623  data_time: 0.0014  memory: 1112  
09/21 07:58:54 - mmengine - INFO - Iter(test) [ 800/2000]    eta: 0:04:13  time: 0.0638  data_time: 0.0016  memory: 943  
09/21 07:58:57 - mmengine - INFO - Iter(test) [ 850/2000]    eta: 0:03:53  time: 0.0644  data_time: 0.0015  memory: 915  
09/21 07:59:01 - mmengine - INFO - Iter(test) [ 900/2000]    eta: 0:03:35  time: 0.0686  data_time: 0.0016  memory: 998  
09/21 07:59:04 - mmengine - INFO - Iter(test) [ 950/2000]    eta: 0:03:18  time: 0.0712  data_time: 0.0015  memory: 1027  
09/21 07:59:08 - mmengine - INFO - Iter(test) [1000/2000]    eta: 0:03:03  time: 0.0701  data_time: 0.0014  memory: 1027  
09/21 07:59:16 - mmengine - INFO - Iter(test) [1050/2000]    eta: 0:02:52  time: 0.0639  data_time: 0.0014  memory: 17242  
09/21 07:59:19 - mmengine - INFO - Iter(test) [1100/2000]    eta: 0:02:39  time: 0.0709  data_time: 0.0015  memory: 1024  
09/21 07:59:23 - mmengine - INFO - Iter(test) [1150/2000]    eta: 0:02:26  time: 0.0720  data_time: 0.0014  memory: 996  
09/21 07:59:26 - mmengine - INFO - Iter(test) [1200/2000]    eta: 0:02:14  time: 0.0700  data_time: 0.0014  memory: 1900  
09/21 07:59:34 - mmengine - INFO - Iter(test) [1250/2000]    eta: 0:02:05  time: 0.0644  data_time: 0.0035  memory: 17230  
09/21 07:59:37 - mmengine - INFO - Iter(test) [1300/2000]    eta: 0:01:54  time: 0.0672  data_time: 0.0014  memory: 943  
09/21 07:59:41 - mmengine - INFO - Iter(test) [1350/2000]    eta: 0:01:44  time: 0.0708  data_time: 0.0014  memory: 943  
09/21 07:59:45 - mmengine - INFO - Iter(test) [1400/2000]    eta: 0:01:34  time: 0.0760  data_time: 0.0021  memory: 1025  
09/21 07:59:48 - mmengine - INFO - Iter(test) [1450/2000]    eta: 0:01:24  time: 0.0727  data_time: 0.0014  memory: 1027  
09/21 07:59:51 - mmengine - INFO - Iter(test) [1500/2000]    eta: 0:01:15  time: 0.0609  data_time: 0.0013  memory: 941  
09/21 07:59:55 - mmengine - INFO - Iter(test) [1550/2000]    eta: 0:01:06  time: 0.0636  data_time: 0.0014  memory: 1027  
09/21 07:59:58 - mmengine - INFO - Iter(test) [1600/2000]    eta: 0:00:58  time: 0.0707  data_time: 0.0015  memory: 915  
09/21 08:00:06 - mmengine - INFO - Iter(test) [1650/2000]    eta: 0:00:51  time: 0.0687  data_time: 0.0013  memory: 17237  
09/21 08:00:09 - mmengine - INFO - Iter(test) [1700/2000]    eta: 0:00:43  time: 0.0677  data_time: 0.0016  memory: 1024  
09/21 08:00:13 - mmengine - INFO - Iter(test) [1750/2000]    eta: 0:00:35  time: 0.0628  data_time: 0.0013  memory: 1052  
09/21 08:00:16 - mmengine - INFO - Iter(test) [1800/2000]    eta: 0:00:27  time: 0.0642  data_time: 0.0015  memory: 943  
09/21 08:00:19 - mmengine - INFO - Iter(test) [1850/2000]    eta: 0:00:20  time: 0.0714  data_time: 0.0015  memory: 859  
09/21 08:00:23 - mmengine - INFO - Iter(test) [1900/2000]    eta: 0:00:13  time: 0.0684  data_time: 0.0013  memory: 1084  
09/21 08:00:26 - mmengine - INFO - Iter(test) [1950/2000]    eta: 0:00:06  time: 0.0700  data_time: 0.0014  memory: 1331  
09/21 08:00:30 - mmengine - INFO - Iter(test) [2000/2000]    eta: 0:00:00  time: 0.0615  data_time: 0.0012  memory: 1110  
09/21 08:00:30 - mmengine - INFO - per class results:
09/21 08:00:30 - mmengine - INFO - 
+---------------------+-------+-------+
|        Class        |  IoU  |  Acc  |
+---------------------+-------+-------+
|         wall        | 76.04 | 87.08 |
|       building      | 80.39 | 92.27 |
|         sky         | 94.28 |  97.5 |
|        floor        | 79.89 | 90.57 |
|         tree        | 72.15 | 85.67 |
|       ceiling       | 81.83 | 90.71 |
|         road        | 82.68 | 92.12 |
|         bed         | 87.23 | 93.57 |
|      windowpane     | 60.12 | 76.86 |
|        grass        | 63.39 | 74.28 |
|       cabinet       | 57.81 | 67.61 |
|       sidewalk      | 62.73 | 70.85 |
|        person       | 80.16 | 86.98 |
|        earth        | 34.71 | 48.68 |
|         door        | 47.26 | 63.14 |
|        table        | 57.24 | 73.33 |
|       mountain      |  58.6 | 71.55 |
|        plant        | 48.75 | 55.33 |
|       curtain       | 69.11 | 82.66 |
|        chair        | 57.69 | 71.58 |
|         car         | 80.01 | 86.23 |
|        water        | 44.21 | 65.43 |
|       painting      | 71.74 |  83.3 |
|         sofa        | 64.33 | 83.84 |
|        shelf        | 35.76 | 59.14 |
|        house        | 37.08 | 47.07 |
|         sea         | 45.16 | 66.06 |
|        mirror       | 59.33 | 68.09 |
|         rug         | 61.75 | 67.66 |
|        field        | 28.27 | 61.34 |
|       armchair      | 33.65 | 44.43 |
|         seat        | 50.33 | 75.88 |
|        fence        | 38.08 |  56.5 |
|         desk        |  49.6 | 68.77 |
|         rock        | 40.58 | 54.36 |
|       wardrobe      | 47.31 | 66.44 |
|         lamp        | 64.68 | 77.54 |
|       bathtub       |  67.7 | 76.85 |
|       railing       | 30.05 | 46.85 |
|       cushion       | 54.41 | 65.03 |
|         base        | 27.71 | 44.43 |
|         box         | 24.99 | 37.58 |
|        column       | 42.92 | 59.43 |
|      signboard      | 32.62 | 50.73 |
|   chest of drawers  | 43.27 | 69.68 |
|       counter       | 23.08 | 34.01 |
|         sand        | 25.67 | 33.08 |
|         sink        | 71.33 | 79.76 |
|      skyscraper     | 46.24 | 59.02 |
|      fireplace      | 68.24 | 82.92 |
|     refrigerator    | 65.66 |  77.4 |
|      grandstand     | 32.41 | 81.93 |
|         path        | 23.96 | 40.86 |
|        stairs       | 26.75 | 39.12 |
|        runway       |  74.9 | 97.44 |
|         case        | 32.63 | 50.52 |
|      pool table     | 86.95 | 96.92 |
|        pillow       | 56.41 | 65.23 |
|     screen door     |  53.8 | 59.88 |
|       stairway      |  28.1 | 46.37 |
|        river        |  9.64 | 21.37 |
|        bridge       | 59.14 | 83.88 |
|       bookcase      | 28.22 | 40.87 |
|        blind        | 30.62 |  33.5 |
|     coffee table    | 66.64 | 82.14 |
|        toilet       | 84.82 | 89.26 |
|        flower       | 30.15 |  44.1 |
|         book        | 43.45 | 58.88 |
|         hill        |  5.76 | 13.37 |
|        bench        | 40.63 |  58.7 |
|      countertop     | 54.04 | 71.88 |
|        stove        | 69.62 | 81.93 |
|         palm        | 53.59 | 69.74 |
|    kitchen island   | 35.03 | 77.88 |
|       computer      | 53.51 | 58.91 |
|     swivel chair    | 47.57 | 66.01 |
|         boat        | 42.83 | 47.97 |
|         bar         | 46.49 |  57.1 |
|    arcade machine   |  22.1 | 24.51 |
|        hovel        |  4.66 |  7.9  |
|         bus         | 76.28 | 92.72 |
|        towel        |  65.1 | 73.38 |
|        light        | 59.91 | 72.08 |
|        truck        | 30.71 | 53.09 |
|        tower        | 21.24 | 54.36 |
|      chandelier     | 61.85 |  74.0 |
|        awning       | 24.65 | 32.33 |
|     streetlight     | 33.17 | 47.09 |
|        booth        | 25.32 | 37.09 |
| television receiver | 63.82 | 73.65 |
|       airplane      | 43.54 | 63.28 |
|      dirt track     |  3.52 |  7.04 |
|       apparel       | 35.54 | 49.68 |
|         pole        | 28.26 | 46.68 |
|         land        |  2.99 |  4.68 |
|      bannister      |  9.5  | 13.16 |
|      escalator      | 13.47 | 20.25 |
|       ottoman       | 48.85 | 64.79 |
|        bottle       | 16.52 | 22.27 |
|        buffet       | 38.21 | 42.29 |
|        poster       | 27.38 | 42.44 |
|        stage        |  8.85 | 17.41 |
|         van         | 31.28 | 56.41 |
|         ship        |  3.29 |  6.81 |
|       fountain      |  4.24 |  5.04 |
|    conveyer belt    | 69.56 | 89.93 |
|        canopy       | 23.83 |  26.0 |
|        washer       | 61.64 | 61.82 |
|      plaything      | 22.07 | 46.57 |
|    swimming pool    | 45.08 | 59.14 |
|        stool        | 44.85 | 60.68 |
|        barrel       |  25.7 | 74.17 |
|        basket       | 41.32 | 49.43 |
|      waterfall      | 56.98 | 91.51 |
|         tent        | 91.14 | 98.44 |
|         bag         | 11.17 | 13.35 |
|       minibike      | 51.64 | 55.92 |
|        cradle       | 77.81 | 97.52 |
|         oven        | 25.03 | 75.73 |
|         ball        | 46.88 | 60.64 |
|         food        |  52.8 | 66.03 |
|         step        | 15.54 | 21.18 |
|         tank        | 54.28 | 57.83 |
|      trade name     | 25.56 | 30.74 |
|      microwave      | 41.03 | 43.64 |
|         pot         | 46.31 | 56.14 |
|        animal       | 60.93 | 68.64 |
|       bicycle       | 54.08 | 69.49 |
|         lake        |  0.0  |  0.0  |
|      dishwasher     |  44.9 | 59.27 |
|        screen       | 52.19 | 66.56 |
|       blanket       |  8.3  | 10.52 |
|      sculpture      | 37.52 | 49.26 |
|         hood        | 73.14 | 79.72 |
|        sconce       | 46.19 | 58.41 |
|         vase        | 31.89 | 44.78 |
|    traffic light    | 35.92 | 59.97 |
|         tray        |  9.95 | 16.26 |
|        ashcan       | 36.11 | 51.65 |
|         fan         | 57.22 | 79.25 |
|         pier        | 29.63 | 40.84 |
|      crt screen     |  4.71 | 10.75 |
|        plate        | 49.81 | 62.84 |
|       monitor       | 55.18 | 72.75 |
|    bulletin board   | 44.67 | 48.33 |
|        shower       |  2.0  | 15.59 |
|       radiator      |  59.4 | 67.09 |
|        glass        | 15.98 | 18.12 |
|        clock        |  34.4 | 44.02 |
|         flag        | 40.93 | 44.45 |
+---------------------+-------+-------+
09/21 08:00:30 - mmengine - INFO - Iter(test) [2000/2000]    aAcc: 81.0700  mIoU: 44.4300  mAcc: 57.5800  data_time: 0.0016  time: 0.1324
Finished processing corruption type: pixelate
Processing corruption type: jpeg_compression
09/21 08:00:34 - mmengine - INFO - 
------------------------------------------------------------
System environment:
    sys.platform: linux
    Python: 3.10.13 | packaged by conda-forge | (main, Dec 23 2023, 15:36:39) [GCC 12.3.0]
    CUDA available: True
    MUSA available: False
    numpy_random_seed: 1482012210
    GPU 0: Tesla V100-SXM2-32GB
    CUDA_HOME: /opt/bwhpc/common/devel/cuda/11.7
    NVCC: Cuda compilation tools, release 11.7, V11.7.99
    GCC: gcc (GCC) 8.5.0 20210514 (Red Hat 8.5.0-18)
    PyTorch: 1.13.1
    PyTorch compiling details: PyTorch built with:
  - GCC 9.3
  - C++ Version: 201402
  - Intel(R) oneAPI Math Kernel Library Version 2023.1-Product Build 20230303 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v2.6.0 (Git Hash 52b5f107dd9cf10910aaa19cb47f3abf9b349815)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - LAPACK is enabled (usually provided by MKL)
  - NNPACK is enabled
  - CPU capability usage: AVX2
  - CUDA Runtime 11.7
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_61,code=sm_61;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86;-gencode;arch=compute_37,code=compute_37
  - CuDNN 8.5
  - Magma 2.6.1
  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.7, CUDNN_VERSION=8.5.0, CXX_COMPILER=/opt/rh/devtoolset-9/root/usr/bin/c++, CXX_FLAGS= -fabi-version=11 -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -DEDGE_PROFILER_USE_KINETO -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Werror=non-virtual-dtor -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wunused-local-typedefs -Wno-unused-parameter -Wno-unused-function -Wno-unused-result -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Werror=cast-function-type -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.13.1, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, USE_ROCM=OFF, 

    TorchVision: 0.14.1
    OpenCV: 3.4.18
    MMEngine: 0.10.4

Runtime environment:
    cudnn_benchmark: True
    mp_cfg: {'mp_start_method': 'fork', 'opencv_num_threads': 0}
    dist_cfg: {'backend': 'nccl'}
    seed: 1482012210
    Distributed launcher: none
    Distributed training: False
    GPU number: 1
------------------------------------------------------------

09/21 08:00:34 - mmengine - INFO - Config:
auto_scale_lr = dict(base_batch_size=16, enable=False)
crop_size = (
    512,
    512,
)
custom_imports = dict(allow_failed_imports=False, imports='mmdet.models')
data_root = 'data/ade/ADEChallengeData2016'
dataset_type = 'ADE20KDataset'
default_hooks = dict(
    checkpoint=dict(
        by_epoch=False, interval=5000, save_best='mIoU',
        type='CheckpointHook'),
    logger=dict(interval=50, log_metric_by_epoch=False, type='LoggerHook'),
    param_scheduler=dict(type='ParamSchedulerHook'),
    sampler_seed=dict(type='DistSamplerSeedHook'),
    timer=dict(type='IterTimerHook'),
    visualization=dict(type='SegVisualizationHook'))
default_scope = 'mmseg'
embed_multi = dict(decay_mult=0.0, lr_mult=1.0)
env_cfg = dict(
    cudnn_benchmark=True,
    dist_cfg=dict(backend='nccl'),
    mp_cfg=dict(mp_start_method='fork', opencv_num_threads=0))
img_ratios = [
    0.5,
    0.75,
    1.0,
    1.25,
    1.5,
    1.75,
]
launcher = 'none'
load_from = '../checkpoint_files/ade20k/mask2former/mask2former_r101_8xb2-160k_ade20k-512x512_20221203_233905-b7135890.pth'
log_level = 'INFO'
log_processor = dict(by_epoch=False)
model = dict(
    backbone=dict(
        deep_stem=False,
        depth=101,
        frozen_stages=-1,
        init_cfg=dict(checkpoint='torchvision://resnet101', type='Pretrained'),
        norm_cfg=dict(requires_grad=False, type='SyncBN'),
        num_stages=4,
        out_indices=(
            0,
            1,
            2,
            3,
        ),
        style='pytorch',
        type='ResNet'),
    data_preprocessor=dict(
        bgr_to_rgb=True,
        corruption='jpeg_compression',
        mean=[
            123.675,
            116.28,
            103.53,
        ],
        pad_val=0,
        seg_pad_val=255,
        size=(
            512,
            512,
        ),
        std=[
            58.395,
            57.12,
            57.375,
        ],
        test_cfg=dict(size_divisor=32),
        type='SegDataPreProcessor'),
    decode_head=dict(
        align_corners=False,
        enforce_decoder_input_project=False,
        feat_channels=256,
        in_channels=[
            256,
            512,
            1024,
            2048,
        ],
        loss_cls=dict(
            class_weight=[
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                0.1,
            ],
            loss_weight=2.0,
            reduction='mean',
            type='mmdet.CrossEntropyLoss',
            use_sigmoid=False),
        loss_dice=dict(
            activate=True,
            eps=1.0,
            loss_weight=5.0,
            naive_dice=True,
            reduction='mean',
            type='mmdet.DiceLoss',
            use_sigmoid=True),
        loss_mask=dict(
            loss_weight=5.0,
            reduction='mean',
            type='mmdet.CrossEntropyLoss',
            use_sigmoid=True),
        num_classes=150,
        num_queries=100,
        num_transformer_feat_level=3,
        out_channels=256,
        pixel_decoder=dict(
            act_cfg=dict(type='ReLU'),
            encoder=dict(
                init_cfg=None,
                layer_cfg=dict(
                    ffn_cfg=dict(
                        act_cfg=dict(inplace=True, type='ReLU'),
                        embed_dims=256,
                        feedforward_channels=1024,
                        ffn_drop=0.0,
                        num_fcs=2),
                    self_attn_cfg=dict(
                        batch_first=True,
                        dropout=0.0,
                        embed_dims=256,
                        im2col_step=64,
                        init_cfg=None,
                        norm_cfg=None,
                        num_heads=8,
                        num_levels=3,
                        num_points=4)),
                num_layers=6),
            init_cfg=None,
            norm_cfg=dict(num_groups=32, type='GN'),
            num_outs=3,
            positional_encoding=dict(normalize=True, num_feats=128),
            type='mmdet.MSDeformAttnPixelDecoder'),
        positional_encoding=dict(normalize=True, num_feats=128),
        strides=[
            4,
            8,
            16,
            32,
        ],
        train_cfg=dict(
            assigner=dict(
                match_costs=[
                    dict(type='mmdet.ClassificationCost', weight=2.0),
                    dict(
                        type='mmdet.CrossEntropyLossCost',
                        use_sigmoid=True,
                        weight=5.0),
                    dict(
                        eps=1.0,
                        pred_act=True,
                        type='mmdet.DiceCost',
                        weight=5.0),
                ],
                type='mmdet.HungarianAssigner'),
            importance_sample_ratio=0.75,
            num_points=12544,
            oversample_ratio=3.0,
            sampler=dict(type='mmdet.MaskPseudoSampler')),
        transformer_decoder=dict(
            init_cfg=None,
            layer_cfg=dict(
                cross_attn_cfg=dict(
                    attn_drop=0.0,
                    batch_first=True,
                    dropout_layer=None,
                    embed_dims=256,
                    num_heads=8,
                    proj_drop=0.0),
                ffn_cfg=dict(
                    act_cfg=dict(inplace=True, type='ReLU'),
                    add_identity=True,
                    dropout_layer=None,
                    embed_dims=256,
                    feedforward_channels=2048,
                    ffn_drop=0.0,
                    num_fcs=2),
                self_attn_cfg=dict(
                    attn_drop=0.0,
                    batch_first=True,
                    dropout_layer=None,
                    embed_dims=256,
                    num_heads=8,
                    proj_drop=0.0)),
            num_layers=9,
            return_intermediate=True),
        type='Mask2FormerHead'),
    test_cfg=dict(mode='whole'),
    train_cfg=dict(),
    type='EncoderDecoder')
num_classes = 150
optim_wrapper = dict(
    clip_grad=dict(max_norm=0.01, norm_type=2),
    optimizer=dict(
        betas=(
            0.9,
            0.999,
        ),
        eps=1e-08,
        lr=0.0001,
        type='AdamW',
        weight_decay=0.05),
    paramwise_cfg=dict(
        custom_keys=dict(
            backbone=dict(decay_mult=1.0, lr_mult=0.1),
            level_embed=dict(decay_mult=0.0, lr_mult=1.0),
            query_embed=dict(decay_mult=0.0, lr_mult=1.0),
            query_feat=dict(decay_mult=0.0, lr_mult=1.0)),
        norm_decay_mult=0.0),
    type='OptimWrapper')
optimizer = dict(
    betas=(
        0.9,
        0.999,
    ),
    eps=1e-08,
    lr=0.0001,
    type='AdamW',
    weight_decay=0.05)
param_scheduler = [
    dict(
        begin=0,
        by_epoch=False,
        end=160000,
        eta_min=0,
        power=0.9,
        type='PolyLR'),
]
resume = False
test_cfg = dict(type='TestLoop')
test_dataloader = dict(
    batch_size=1,
    dataset=dict(
        data_prefix=dict(
            img_path='images/validation',
            seg_map_path='annotations/validation'),
        data_root='data/ade/ADEChallengeData2016',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(keep_ratio=True, scale=(
                2048,
                512,
            ), type='Resize'),
            dict(reduce_zero_label=True, type='LoadAnnotations'),
            dict(type='PackSegInputs'),
        ],
        type='ADE20KDataset'),
    num_workers=4,
    persistent_workers=True,
    sampler=dict(shuffle=False, type='DefaultSampler'))
test_evaluator = dict(
    iou_metrics=[
        'mIoU',
    ], type='IoUMetric')
test_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(keep_ratio=True, scale=(
        2048,
        512,
    ), type='Resize'),
    dict(reduce_zero_label=True, type='LoadAnnotations'),
    dict(type='PackSegInputs'),
]
train_cfg = dict(
    max_iters=160000, type='IterBasedTrainLoop', val_interval=5000)
train_dataloader = dict(
    batch_size=2,
    dataset=dict(
        data_prefix=dict(
            img_path='images/training', seg_map_path='annotations/training'),
        data_root='data/ade/ADEChallengeData2016',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(reduce_zero_label=True, type='LoadAnnotations'),
            dict(
                max_size=2048,
                resize_type='ResizeShortestEdge',
                scales=[
                    256,
                    307,
                    358,
                    409,
                    460,
                    512,
                    563,
                    614,
                    665,
                    716,
                    768,
                    819,
                    870,
                    921,
                    972,
                    1024,
                ],
                type='RandomChoiceResize'),
            dict(
                cat_max_ratio=0.75, crop_size=(
                    512,
                    512,
                ), type='RandomCrop'),
            dict(prob=0.5, type='RandomFlip'),
            dict(type='PhotoMetricDistortion'),
            dict(type='PackSegInputs'),
        ],
        type='ADE20KDataset'),
    num_workers=4,
    persistent_workers=True,
    sampler=dict(shuffle=True, type='InfiniteSampler'))
train_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(reduce_zero_label=True, type='LoadAnnotations'),
    dict(
        max_size=2048,
        resize_type='ResizeShortestEdge',
        scales=[
            256,
            307,
            358,
            409,
            460,
            512,
            563,
            614,
            665,
            716,
            768,
            819,
            870,
            921,
            972,
            1024,
        ],
        type='RandomChoiceResize'),
    dict(cat_max_ratio=0.75, crop_size=(
        512,
        512,
    ), type='RandomCrop'),
    dict(prob=0.5, type='RandomFlip'),
    dict(type='PhotoMetricDistortion'),
    dict(type='PackSegInputs'),
]
tta_model = dict(type='SegTTAModel')
tta_pipeline = [
    dict(backend_args=None, type='LoadImageFromFile'),
    dict(
        transforms=[
            [
                dict(keep_ratio=True, scale_factor=0.5, type='Resize'),
                dict(keep_ratio=True, scale_factor=0.75, type='Resize'),
                dict(keep_ratio=True, scale_factor=1.0, type='Resize'),
                dict(keep_ratio=True, scale_factor=1.25, type='Resize'),
                dict(keep_ratio=True, scale_factor=1.5, type='Resize'),
                dict(keep_ratio=True, scale_factor=1.75, type='Resize'),
            ],
            [
                dict(direction='horizontal', prob=0.0, type='RandomFlip'),
                dict(direction='horizontal', prob=1.0, type='RandomFlip'),
            ],
            [
                dict(type='LoadAnnotations'),
            ],
            [
                dict(type='PackSegInputs'),
            ],
        ],
        type='TestTimeAug'),
]
val_cfg = dict(type='ValLoop')
val_dataloader = dict(
    batch_size=1,
    dataset=dict(
        data_prefix=dict(
            img_path='images/validation',
            seg_map_path='annotations/validation'),
        data_root='data/ade/ADEChallengeData2016',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(keep_ratio=True, scale=(
                2048,
                512,
            ), type='Resize'),
            dict(reduce_zero_label=True, type='LoadAnnotations'),
            dict(type='PackSegInputs'),
        ],
        type='ADE20KDataset'),
    num_workers=4,
    persistent_workers=True,
    sampler=dict(shuffle=False, type='DefaultSampler'))
val_evaluator = dict(
    iou_metrics=[
        'mIoU',
    ], type='IoUMetric')
vis_backends = [
    dict(type='LocalVisBackend'),
]
visualizer = dict(
    name='visualizer',
    type='SegLocalVisualizer',
    vis_backends=[
        dict(type='LocalVisBackend'),
    ])
work_dir = '../corruptions/work_dirs/ade20k/mask2former/mask2former_r101_8xb2-160k_ade20k-512x512/jpeg_compression'

09/21 08:00:37 - mmengine - INFO - Distributed training is not used, all SyncBatchNorm (SyncBN) layers in the model will be automatically reverted to BatchNormXd layers if they are used.
09/21 08:00:37 - mmengine - INFO - Hooks will be executed in the following order:
before_run:
(VERY_HIGH   ) RuntimeInfoHook                    
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
before_train:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_train_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(NORMAL      ) DistSamplerSeedHook                
 -------------------- 
before_train_iter:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_train_iter:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(NORMAL      ) SegVisualizationHook               
(BELOW_NORMAL) LoggerHook                         
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
after_train_epoch:
(NORMAL      ) IterTimerHook                      
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_val:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
before_val_epoch:
(NORMAL      ) IterTimerHook                      
 -------------------- 
before_val_iter:
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_val_iter:
(NORMAL      ) IterTimerHook                      
(NORMAL      ) SegVisualizationHook               
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_val_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
after_val:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
after_train:
(VERY_HIGH   ) RuntimeInfoHook                    
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_test:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
before_test_epoch:
(NORMAL      ) IterTimerHook                      
 -------------------- 
before_test_iter:
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_test_iter:
(NORMAL      ) IterTimerHook                      
(NORMAL      ) SegVisualizationHook               
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_test_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_test:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
after_run:
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
09/21 08:00:37 - mmengine - WARNING - The prefix is not set in metric class IoUMetric.
Loads checkpoint by local backend from path: ../checkpoint_files/ade20k/mask2former/mask2former_r101_8xb2-160k_ade20k-512x512_20221203_233905-b7135890.pth
09/21 08:00:38 - mmengine - INFO - Load checkpoint from ../checkpoint_files/ade20k/mask2former/mask2former_r101_8xb2-160k_ade20k-512x512_20221203_233905-b7135890.pth
09/21 08:01:43 - mmengine - INFO - Iter(test) [  50/2000]    eta: 0:42:04  time: 0.9363  data_time: 0.0015  memory: 17239  
09/21 08:01:59 - mmengine - INFO - Iter(test) [ 100/2000]    eta: 0:25:40  time: 0.5350  data_time: 0.0015  memory: 17230  
09/21 08:02:03 - mmengine - INFO - Iter(test) [ 150/2000]    eta: 0:17:26  time: 0.0764  data_time: 0.0014  memory: 943  
09/21 08:02:16 - mmengine - INFO - Iter(test) [ 200/2000]    eta: 0:14:41  time: 0.0692  data_time: 0.0014  memory: 17287  
09/21 08:02:26 - mmengine - INFO - Iter(test) [ 250/2000]    eta: 0:12:35  time: 0.0759  data_time: 0.0014  memory: 17293  
09/21 08:02:34 - mmengine - INFO - Iter(test) [ 300/2000]    eta: 0:10:56  time: 0.0698  data_time: 0.0015  memory: 17234  
09/21 08:02:46 - mmengine - INFO - Iter(test) [ 350/2000]    eta: 0:10:03  time: 0.0730  data_time: 0.0014  memory: 17237  
09/21 08:02:53 - mmengine - INFO - Iter(test) [ 400/2000]    eta: 0:09:01  time: 0.0695  data_time: 0.0013  memory: 17220  
09/21 08:02:57 - mmengine - INFO - Iter(test) [ 450/2000]    eta: 0:07:57  time: 0.0657  data_time: 0.0014  memory: 955  
09/21 08:03:00 - mmengine - INFO - Iter(test) [ 500/2000]    eta: 0:07:07  time: 0.0745  data_time: 0.0014  memory: 943  
09/21 08:03:04 - mmengine - INFO - Iter(test) [ 550/2000]    eta: 0:06:25  time: 0.0784  data_time: 0.0015  memory: 1055  
09/21 08:03:08 - mmengine - INFO - Iter(test) [ 600/2000]    eta: 0:05:50  time: 0.0761  data_time: 0.0015  memory: 1053  
09/21 08:03:16 - mmengine - INFO - Iter(test) [ 650/2000]    eta: 0:05:28  time: 0.5318  data_time: 0.0013  memory: 17241  
09/21 08:03:24 - mmengine - INFO - Iter(test) [ 700/2000]    eta: 0:05:09  time: 0.0776  data_time: 0.0015  memory: 17235  
09/21 08:03:28 - mmengine - INFO - Iter(test) [ 750/2000]    eta: 0:04:43  time: 0.0741  data_time: 0.0013  memory: 1112  
09/21 08:03:32 - mmengine - INFO - Iter(test) [ 800/2000]    eta: 0:04:20  time: 0.0696  data_time: 0.0015  memory: 943  
09/21 08:03:35 - mmengine - INFO - Iter(test) [ 850/2000]    eta: 0:03:59  time: 0.0704  data_time: 0.0015  memory: 915  
09/21 08:03:39 - mmengine - INFO - Iter(test) [ 900/2000]    eta: 0:03:40  time: 0.0723  data_time: 0.0013  memory: 998  
09/21 08:03:42 - mmengine - INFO - Iter(test) [ 950/2000]    eta: 0:03:23  time: 0.0752  data_time: 0.0014  memory: 1027  
09/21 08:03:46 - mmengine - INFO - Iter(test) [1000/2000]    eta: 0:03:08  time: 0.0745  data_time: 0.0014  memory: 1027  
09/21 08:03:54 - mmengine - INFO - Iter(test) [1050/2000]    eta: 0:02:57  time: 0.0702  data_time: 0.0014  memory: 17242  
09/21 08:03:58 - mmengine - INFO - Iter(test) [1100/2000]    eta: 0:02:43  time: 0.0751  data_time: 0.0014  memory: 1024  
09/21 08:04:02 - mmengine - INFO - Iter(test) [1150/2000]    eta: 0:02:30  time: 0.0756  data_time: 0.0014  memory: 996  
09/21 08:04:05 - mmengine - INFO - Iter(test) [1200/2000]    eta: 0:02:18  time: 0.0738  data_time: 0.0014  memory: 1900  
09/21 08:04:14 - mmengine - INFO - Iter(test) [1250/2000]    eta: 0:02:09  time: 0.0683  data_time: 0.0014  memory: 17230  
09/21 08:04:17 - mmengine - INFO - Iter(test) [1300/2000]    eta: 0:01:58  time: 0.0704  data_time: 0.0014  memory: 943  
09/21 08:04:21 - mmengine - INFO - Iter(test) [1350/2000]    eta: 0:01:47  time: 0.0733  data_time: 0.0014  memory: 943  
09/21 08:04:25 - mmengine - INFO - Iter(test) [1400/2000]    eta: 0:01:37  time: 0.0770  data_time: 0.0014  memory: 1025  
09/21 08:04:28 - mmengine - INFO - Iter(test) [1450/2000]    eta: 0:01:27  time: 0.0774  data_time: 0.0014  memory: 1027  
09/21 08:04:32 - mmengine - INFO - Iter(test) [1500/2000]    eta: 0:01:17  time: 0.0668  data_time: 0.0014  memory: 941  
09/21 08:04:35 - mmengine - INFO - Iter(test) [1550/2000]    eta: 0:01:08  time: 0.0702  data_time: 0.0014  memory: 1027  
09/21 08:04:39 - mmengine - INFO - Iter(test) [1600/2000]    eta: 0:01:00  time: 0.0762  data_time: 0.0015  memory: 915  
09/21 08:04:47 - mmengine - INFO - Iter(test) [1650/2000]    eta: 0:00:52  time: 0.0728  data_time: 0.0013  memory: 17237  
09/21 08:04:51 - mmengine - INFO - Iter(test) [1700/2000]    eta: 0:00:44  time: 0.0699  data_time: 0.0015  memory: 1024  
09/21 08:04:55 - mmengine - INFO - Iter(test) [1750/2000]    eta: 0:00:36  time: 0.0690  data_time: 0.0014  memory: 1052  
09/21 08:04:58 - mmengine - INFO - Iter(test) [1800/2000]    eta: 0:00:28  time: 0.0784  data_time: 0.0016  memory: 943  
09/21 08:05:02 - mmengine - INFO - Iter(test) [1850/2000]    eta: 0:00:21  time: 0.0770  data_time: 0.0015  memory: 859  
09/21 08:05:06 - mmengine - INFO - Iter(test) [1900/2000]    eta: 0:00:14  time: 0.0729  data_time: 0.0014  memory: 1084  
09/21 08:05:09 - mmengine - INFO - Iter(test) [1950/2000]    eta: 0:00:06  time: 0.0709  data_time: 0.0014  memory: 1331  
09/21 08:05:13 - mmengine - INFO - Iter(test) [2000/2000]    eta: 0:00:00  time: 0.0645  data_time: 0.0013  memory: 1110  
09/21 08:05:13 - mmengine - INFO - per class results:
09/21 08:05:13 - mmengine - INFO - 
+---------------------+-------+-------+
|        Class        |  IoU  |  Acc  |
+---------------------+-------+-------+
|         wall        | 74.81 | 87.83 |
|       building      | 80.39 |  90.6 |
|         sky         | 93.86 | 97.42 |
|        floor        |  78.4 | 91.96 |
|         tree        | 72.47 | 85.04 |
|       ceiling       |  80.9 |  89.7 |
|         road        | 80.52 | 92.39 |
|         bed         | 86.92 | 92.66 |
|      windowpane     | 58.94 | 73.98 |
|        grass        | 64.54 | 74.72 |
|       cabinet       | 57.55 | 67.62 |
|       sidewalk      | 62.05 | 70.12 |
|        person       | 80.39 | 88.33 |
|        earth        | 39.54 | 56.99 |
|         door        | 44.94 | 58.29 |
|        table        | 58.66 | 72.62 |
|       mountain      | 52.64 | 68.57 |
|        plant        | 48.74 | 57.24 |
|       curtain       | 69.55 | 78.89 |
|        chair        | 57.92 | 69.66 |
|         car         | 81.55 | 88.78 |
|        water        | 52.61 |  74.6 |
|       painting      | 69.43 | 81.57 |
|         sofa        | 67.51 |  85.0 |
|        shelf        | 39.19 | 60.64 |
|        house        |  37.1 | 51.98 |
|         sea         | 49.33 | 60.93 |
|        mirror       | 57.34 | 66.09 |
|         rug         |  46.9 | 49.54 |
|        field        | 23.48 |  48.2 |
|       armchair      | 44.53 | 59.51 |
|         seat        | 52.95 | 73.96 |
|        fence        | 42.59 | 62.61 |
|         desk        | 50.05 | 70.58 |
|         rock        | 39.09 | 58.22 |
|       wardrobe      | 37.01 | 55.96 |
|         lamp        | 65.84 | 75.96 |
|       bathtub       |  69.5 | 80.06 |
|       railing       | 30.33 | 44.57 |
|       cushion       | 52.66 | 60.55 |
|         base        | 27.31 |  44.1 |
|         box         | 21.59 | 35.56 |
|        column       | 45.45 | 61.74 |
|      signboard      | 33.58 | 50.46 |
|   chest of drawers  | 44.77 |  70.6 |
|       counter       | 36.32 | 48.68 |
|         sand        | 30.36 | 33.72 |
|         sink        | 70.81 | 80.25 |
|      skyscraper     | 48.13 | 62.14 |
|      fireplace      | 67.28 | 82.14 |
|     refrigerator    | 75.88 | 81.01 |
|      grandstand     | 41.66 | 79.95 |
|         path        |  27.6 | 43.85 |
|        stairs       | 26.59 | 39.35 |
|        runway       |  73.0 | 95.13 |
|         case        | 34.78 | 52.19 |
|      pool table     | 85.52 | 95.78 |
|        pillow       | 53.01 | 64.52 |
|     screen door     | 44.96 | 50.08 |
|       stairway      |  33.6 | 43.12 |
|        river        | 11.72 | 27.71 |
|        bridge       |  57.0 | 85.52 |
|       bookcase      | 27.26 | 39.68 |
|        blind        | 23.25 | 23.58 |
|     coffee table    | 64.74 | 76.09 |
|        toilet       | 85.66 |  89.2 |
|        flower       | 33.14 | 47.07 |
|         book        |  48.4 | 62.73 |
|         hill        |  6.33 | 13.43 |
|        bench        | 47.04 | 64.89 |
|      countertop     | 56.14 | 72.15 |
|        stove        | 72.36 | 83.76 |
|         palm        | 55.73 | 69.72 |
|    kitchen island   | 34.05 | 75.67 |
|       computer      | 57.01 | 61.89 |
|     swivel chair    | 43.69 | 60.02 |
|         boat        | 36.34 | 53.99 |
|         bar         | 49.92 | 55.16 |
|    arcade machine   | 35.06 | 37.86 |
|        hovel        | 29.02 | 49.22 |
|         bus         | 79.25 | 92.64 |
|        towel        | 62.94 | 68.68 |
|        light        | 58.21 | 68.99 |
|        truck        | 21.51 | 42.94 |
|        tower        |  47.2 |  77.7 |
|      chandelier     | 68.55 | 79.61 |
|        awning       | 30.53 | 39.67 |
|     streetlight     |  33.0 | 43.95 |
|        booth        | 22.73 | 42.02 |
| television receiver | 62.36 | 70.44 |
|       airplane      | 56.76 | 65.26 |
|      dirt track     |  6.62 | 13.27 |
|       apparel       | 39.61 | 55.09 |
|         pole        | 29.48 |  45.0 |
|         land        |  4.96 |  6.64 |
|      bannister      |  5.28 |  8.66 |
|      escalator      | 16.27 | 16.54 |
|       ottoman       | 55.82 | 68.79 |
|        bottle       | 16.99 | 19.79 |
|        buffet       | 41.24 | 43.19 |
|        poster       | 24.63 | 40.02 |
|        stage        | 11.58 | 17.37 |
|         van         | 41.53 |  62.1 |
|         ship        | 55.56 | 88.81 |
|       fountain      |  3.84 |  4.4  |
|    conveyer belt    |  45.4 |  65.4 |
|        canopy       | 36.83 | 40.46 |
|        washer       | 67.46 | 69.08 |
|      plaything      | 25.12 | 48.65 |
|    swimming pool    | 51.63 | 57.01 |
|        stool        | 42.52 | 56.87 |
|        barrel       | 21.25 | 71.78 |
|        basket       | 34.13 | 44.24 |
|      waterfall      | 66.47 | 91.73 |
|         tent        | 88.16 | 98.35 |
|         bag         | 11.83 | 13.51 |
|       minibike      | 70.36 | 82.37 |
|        cradle       | 84.25 | 95.81 |
|         oven        | 23.82 | 69.18 |
|         ball        | 49.07 | 58.61 |
|         food        | 56.77 | 72.51 |
|         step        | 16.86 | 21.31 |
|         tank        | 44.22 | 49.15 |
|      trade name     | 22.25 | 27.17 |
|      microwave      | 36.49 | 38.23 |
|         pot         | 48.02 | 56.32 |
|        animal       | 61.84 | 67.57 |
|       bicycle       | 54.76 | 71.82 |
|         lake        |  0.0  |  0.0  |
|      dishwasher     | 52.79 | 68.38 |
|        screen       | 52.08 |  71.8 |
|       blanket       |  9.06 |  10.0 |
|      sculpture      | 32.39 | 49.49 |
|         hood        | 72.83 | 78.24 |
|        sconce       | 44.03 | 52.04 |
|         vase        | 32.29 | 45.32 |
|    traffic light    | 30.92 | 56.17 |
|         tray        | 14.93 | 20.85 |
|        ashcan       | 33.81 | 54.16 |
|         fan         | 59.66 | 79.12 |
|         pier        | 12.09 | 18.18 |
|      crt screen     |  8.26 |  20.7 |
|        plate        | 48.32 | 68.23 |
|       monitor       | 54.65 | 68.56 |
|    bulletin board   |  35.5 |  40.9 |
|        shower       |  1.36 | 19.33 |
|       radiator      |  57.0 | 63.27 |
|        glass        |  16.1 | 17.52 |
|        clock        | 31.84 | 37.08 |
|         flag        | 30.53 | 34.39 |
+---------------------+-------+-------+
09/21 08:05:13 - mmengine - INFO - Iter(test) [2000/2000]    aAcc: 81.0600  mIoU: 45.5700  mAcc: 58.4000  data_time: 0.0016  time: 0.1373
Finished processing corruption type: jpeg_compression
Runtime: 1726898714

============================= JOB FEEDBACK =============================

NodeName=uc2n481
Job ID: 24247178
Cluster: uc2
User/Group: ma_mkacar/ma_ma
State: COMPLETED (exit code 0)
Nodes: 1
Cores per node: 16
CPU Utilized: 06:39:33
CPU Efficiency: 5.79% of 4-18:57:04 core-walltime
Job Wall-clock time: 07:11:04
Memory Utilized: 2.69 GB
Memory Efficiency: 2.69% of 100.00 GB
