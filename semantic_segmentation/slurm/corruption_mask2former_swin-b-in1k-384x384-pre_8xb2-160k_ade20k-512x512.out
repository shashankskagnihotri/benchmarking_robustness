Started at Sun Oct  6 01:02:49 CEST 2024
Processing corruption type: gaussian_noise
10/06 01:04:31 - mmengine - INFO - 
------------------------------------------------------------
System environment:
    sys.platform: linux
    Python: 3.10.13 | packaged by conda-forge | (main, Dec 23 2023, 15:36:39) [GCC 12.3.0]
    CUDA available: True
    MUSA available: False
    numpy_random_seed: 417855274
    GPU 0: Tesla V100-SXM2-32GB
    CUDA_HOME: /opt/bwhpc/common/devel/cuda/11.7
    NVCC: Cuda compilation tools, release 11.7, V11.7.99
    GCC: gcc (GCC) 8.5.0 20210514 (Red Hat 8.5.0-18)
    PyTorch: 1.13.1
    PyTorch compiling details: PyTorch built with:
  - GCC 9.3
  - C++ Version: 201402
  - Intel(R) oneAPI Math Kernel Library Version 2023.1-Product Build 20230303 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v2.6.0 (Git Hash 52b5f107dd9cf10910aaa19cb47f3abf9b349815)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - LAPACK is enabled (usually provided by MKL)
  - NNPACK is enabled
  - CPU capability usage: AVX2
  - CUDA Runtime 11.7
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_61,code=sm_61;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86;-gencode;arch=compute_37,code=compute_37
  - CuDNN 8.5
  - Magma 2.6.1
  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.7, CUDNN_VERSION=8.5.0, CXX_COMPILER=/opt/rh/devtoolset-9/root/usr/bin/c++, CXX_FLAGS= -fabi-version=11 -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -DEDGE_PROFILER_USE_KINETO -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Werror=non-virtual-dtor -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wunused-local-typedefs -Wno-unused-parameter -Wno-unused-function -Wno-unused-result -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Werror=cast-function-type -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.13.1, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, USE_ROCM=OFF, 

    TorchVision: 0.14.1
    OpenCV: 3.4.18
    MMEngine: 0.10.4

Runtime environment:
    cudnn_benchmark: True
    mp_cfg: {'mp_start_method': 'fork', 'opencv_num_threads': 0}
    dist_cfg: {'backend': 'nccl'}
    seed: 417855274
    Distributed launcher: none
    Distributed training: False
    GPU number: 1
------------------------------------------------------------

10/06 01:04:32 - mmengine - INFO - Config:
auto_scale_lr = dict(base_batch_size=16, enable=False)
backbone_embed_multi = dict(decay_mult=0.0, lr_mult=0.1)
backbone_norm_multi = dict(decay_mult=0.0, lr_mult=0.1)
crop_size = (
    512,
    512,
)
custom_keys = dict({
    'absolute_pos_embed':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone':
    dict(decay_mult=1.0, lr_mult=0.1),
    'backbone.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.patch_embed.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.0.blocks.0.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.0.blocks.1.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.0.downsample.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.1.blocks.0.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.1.blocks.1.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.1.downsample.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.0.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.1.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.10.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.11.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.12.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.13.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.14.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.15.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.16.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.17.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.2.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.3.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.4.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.5.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.6.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.7.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.8.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.9.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.downsample.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.3.blocks.0.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.3.blocks.1.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'level_embed':
    dict(decay_mult=0.0, lr_mult=1.0),
    'query_embed':
    dict(decay_mult=0.0, lr_mult=1.0),
    'query_feat':
    dict(decay_mult=0.0, lr_mult=1.0),
    'relative_position_bias_table':
    dict(decay_mult=0.0, lr_mult=0.1)
})
data_root = 'data/ade/ADEChallengeData2016'
dataset_type = 'ADE20KDataset'
default_hooks = dict(
    checkpoint=dict(
        by_epoch=False, interval=5000, save_best='mIoU',
        type='CheckpointHook'),
    logger=dict(interval=50, log_metric_by_epoch=False, type='LoggerHook'),
    param_scheduler=dict(type='ParamSchedulerHook'),
    sampler_seed=dict(type='DistSamplerSeedHook'),
    timer=dict(type='IterTimerHook'),
    visualization=dict(type='SegVisualizationHook'))
default_scope = 'mmseg'
depths = [
    2,
    2,
    18,
    2,
]
embed_multi = dict(decay_mult=0.0, lr_mult=1.0)
env_cfg = dict(
    cudnn_benchmark=True,
    dist_cfg=dict(backend='nccl'),
    mp_cfg=dict(mp_start_method='fork', opencv_num_threads=0))
img_ratios = [
    0.5,
    0.75,
    1.0,
    1.25,
    1.5,
    1.75,
]
launcher = 'none'
load_from = '../checkpoint_files/ade20k/mask2former/best_mIoU_iter_155000.pth'
log_level = 'INFO'
log_processor = dict(by_epoch=False)
model = dict(
    backbone=dict(
        attn_drop_rate=0.0,
        depths=[
            2,
            2,
            18,
            2,
        ],
        drop_path_rate=0.3,
        drop_rate=0.0,
        embed_dims=128,
        frozen_stages=-1,
        init_cfg=dict(
            checkpoint=
            'https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/swin/swin_base_patch4_window12_384_20220317-55b0104a.pth',
            type='Pretrained'),
        mlp_ratio=4,
        num_heads=[
            4,
            8,
            16,
            32,
        ],
        out_indices=(
            0,
            1,
            2,
            3,
        ),
        patch_norm=True,
        pretrain_img_size=384,
        qk_scale=None,
        qkv_bias=True,
        type='SwinTransformer',
        window_size=12,
        with_cp=False),
    data_preprocessor=dict(
        bgr_to_rgb=True,
        corruption='gaussian_noise',
        mean=[
            123.675,
            116.28,
            103.53,
        ],
        pad_val=0,
        seg_pad_val=255,
        size=(
            512,
            512,
        ),
        std=[
            58.395,
            57.12,
            57.375,
        ],
        type='SegDataPreProcessor'),
    decode_head=dict(
        align_corners=False,
        enforce_decoder_input_project=False,
        feat_channels=256,
        in_channels=[
            128,
            256,
            512,
            1024,
        ],
        loss_cls=dict(
            class_weight=[
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                0.1,
            ],
            loss_weight=2.0,
            reduction='mean',
            type='mmdet.CrossEntropyLoss',
            use_sigmoid=False),
        loss_dice=dict(
            activate=True,
            eps=1.0,
            loss_weight=5.0,
            naive_dice=True,
            reduction='mean',
            type='mmdet.DiceLoss',
            use_sigmoid=True),
        loss_mask=dict(
            loss_weight=5.0,
            reduction='mean',
            type='mmdet.CrossEntropyLoss',
            use_sigmoid=True),
        num_classes=150,
        num_queries=100,
        num_transformer_feat_level=3,
        out_channels=256,
        pixel_decoder=dict(
            act_cfg=dict(type='ReLU'),
            encoder=dict(
                init_cfg=None,
                layer_cfg=dict(
                    ffn_cfg=dict(
                        act_cfg=dict(inplace=True, type='ReLU'),
                        embed_dims=256,
                        feedforward_channels=1024,
                        ffn_drop=0.0,
                        num_fcs=2),
                    self_attn_cfg=dict(
                        batch_first=True,
                        dropout=0.0,
                        embed_dims=256,
                        im2col_step=64,
                        init_cfg=None,
                        norm_cfg=None,
                        num_heads=8,
                        num_levels=3,
                        num_points=4)),
                num_layers=6),
            init_cfg=None,
            norm_cfg=dict(num_groups=32, type='GN'),
            num_outs=3,
            positional_encoding=dict(normalize=True, num_feats=128),
            type='mmdet.MSDeformAttnPixelDecoder'),
        positional_encoding=dict(normalize=True, num_feats=128),
        strides=[
            4,
            8,
            16,
            32,
        ],
        train_cfg=dict(
            assigner=dict(
                match_costs=[
                    dict(type='mmdet.ClassificationCost', weight=2.0),
                    dict(
                        type='mmdet.CrossEntropyLossCost',
                        use_sigmoid=True,
                        weight=5.0),
                    dict(
                        eps=1.0,
                        pred_act=True,
                        type='mmdet.DiceCost',
                        weight=5.0),
                ],
                type='mmdet.HungarianAssigner'),
            importance_sample_ratio=0.75,
            num_points=12544,
            oversample_ratio=3.0,
            sampler=dict(type='mmdet.MaskPseudoSampler')),
        transformer_decoder=dict(
            init_cfg=None,
            layer_cfg=dict(
                cross_attn_cfg=dict(
                    attn_drop=0.0,
                    batch_first=True,
                    dropout_layer=None,
                    embed_dims=256,
                    num_heads=8,
                    proj_drop=0.0),
                ffn_cfg=dict(
                    act_cfg=dict(inplace=True, type='ReLU'),
                    add_identity=True,
                    dropout_layer=None,
                    embed_dims=256,
                    feedforward_channels=2048,
                    ffn_drop=0.0,
                    num_fcs=2),
                self_attn_cfg=dict(
                    attn_drop=0.0,
                    batch_first=True,
                    dropout_layer=None,
                    embed_dims=256,
                    num_heads=8,
                    proj_drop=0.0)),
            num_layers=9,
            return_intermediate=True),
        type='Mask2FormerHead'),
    test_cfg=dict(mode='whole'),
    train_cfg=dict(),
    type='EncoderDecoder')
num_classes = 150
optim_wrapper = dict(
    clip_grad=dict(max_norm=0.01, norm_type=2),
    optimizer=dict(
        betas=(
            0.9,
            0.999,
        ),
        eps=1e-08,
        lr=0.0001,
        type='AdamW',
        weight_decay=0.05),
    paramwise_cfg=dict(
        custom_keys=dict({
            'absolute_pos_embed':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone':
            dict(decay_mult=1.0, lr_mult=0.1),
            'backbone.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.patch_embed.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.0.blocks.0.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.0.blocks.1.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.0.downsample.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.1.blocks.0.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.1.blocks.1.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.1.downsample.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.0.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.1.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.10.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.11.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.12.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.13.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.14.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.15.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.16.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.17.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.2.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.3.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.4.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.5.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.6.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.7.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.8.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.9.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.downsample.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.3.blocks.0.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.3.blocks.1.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'level_embed':
            dict(decay_mult=0.0, lr_mult=1.0),
            'query_embed':
            dict(decay_mult=0.0, lr_mult=1.0),
            'query_feat':
            dict(decay_mult=0.0, lr_mult=1.0),
            'relative_position_bias_table':
            dict(decay_mult=0.0, lr_mult=0.1)
        }),
        norm_decay_mult=0.0),
    type='OptimWrapper')
optimizer = dict(
    betas=(
        0.9,
        0.999,
    ),
    eps=1e-08,
    lr=0.0001,
    type='AdamW',
    weight_decay=0.05)
param_scheduler = [
    dict(
        begin=0,
        by_epoch=False,
        end=160000,
        eta_min=0,
        power=0.9,
        type='PolyLR'),
]
pretrained = 'https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/swin/swin_base_patch4_window12_384_20220317-55b0104a.pth'
resume = False
test_cfg = dict(type='TestLoop')
test_dataloader = dict(
    batch_size=1,
    dataset=dict(
        data_prefix=dict(
            img_path='images/validation',
            seg_map_path='annotations/validation'),
        data_root='data/ade/ADEChallengeData2016',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(keep_ratio=True, scale=(
                2560,
                640,
            ), type='Resize'),
            dict(reduce_zero_label=True, type='LoadAnnotations'),
            dict(type='PackSegInputs'),
        ],
        type='ADE20KDataset'),
    num_workers=4,
    persistent_workers=True,
    sampler=dict(shuffle=False, type='DefaultSampler'))
test_evaluator = dict(
    iou_metrics=[
        'mIoU',
    ], type='IoUMetric')
test_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(keep_ratio=True, scale=(
        2560,
        640,
    ), type='Resize'),
    dict(reduce_zero_label=True, type='LoadAnnotations'),
    dict(type='PackSegInputs'),
]
train_cfg = dict(
    max_iters=160000, type='IterBasedTrainLoop', val_interval=5000)
train_dataloader = dict(
    batch_size=2,
    dataset=dict(
        data_prefix=dict(
            img_path='images/training', seg_map_path='annotations/training'),
        data_root='data/ade/ADEChallengeData2016',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(reduce_zero_label=True, type='LoadAnnotations'),
            dict(
                max_size=2560,
                resize_type='ResizeShortestEdge',
                scales=[
                    320,
                    384,
                    448,
                    512,
                    576,
                    640,
                    704,
                    768,
                    832,
                    896,
                    960,
                    1024,
                    1088,
                    1152,
                    1216,
                    1280,
                ],
                type='RandomChoiceResize'),
            dict(
                cat_max_ratio=0.75, crop_size=(
                    512,
                    512,
                ), type='RandomCrop'),
            dict(prob=0.5, type='RandomFlip'),
            dict(type='PhotoMetricDistortion'),
            dict(type='PackSegInputs'),
        ],
        type='ADE20KDataset'),
    num_workers=4,
    persistent_workers=True,
    sampler=dict(shuffle=True, type='InfiniteSampler'))
train_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(reduce_zero_label=True, type='LoadAnnotations'),
    dict(
        max_size=2560,
        resize_type='ResizeShortestEdge',
        scales=[
            320,
            384,
            448,
            512,
            576,
            640,
            704,
            768,
            832,
            896,
            960,
            1024,
            1088,
            1152,
            1216,
            1280,
        ],
        type='RandomChoiceResize'),
    dict(cat_max_ratio=0.75, crop_size=(
        512,
        512,
    ), type='RandomCrop'),
    dict(prob=0.5, type='RandomFlip'),
    dict(type='PhotoMetricDistortion'),
    dict(type='PackSegInputs'),
]
tta_model = dict(type='SegTTAModel')
tta_pipeline = [
    dict(backend_args=None, type='LoadImageFromFile'),
    dict(
        transforms=[
            [
                dict(keep_ratio=True, scale_factor=0.5, type='Resize'),
                dict(keep_ratio=True, scale_factor=0.75, type='Resize'),
                dict(keep_ratio=True, scale_factor=1.0, type='Resize'),
                dict(keep_ratio=True, scale_factor=1.25, type='Resize'),
                dict(keep_ratio=True, scale_factor=1.5, type='Resize'),
                dict(keep_ratio=True, scale_factor=1.75, type='Resize'),
            ],
            [
                dict(direction='horizontal', prob=0.0, type='RandomFlip'),
                dict(direction='horizontal', prob=1.0, type='RandomFlip'),
            ],
            [
                dict(type='LoadAnnotations'),
            ],
            [
                dict(type='PackSegInputs'),
            ],
        ],
        type='TestTimeAug'),
]
val_cfg = dict(type='ValLoop')
val_dataloader = dict(
    batch_size=1,
    dataset=dict(
        data_prefix=dict(
            img_path='images/validation',
            seg_map_path='annotations/validation'),
        data_root='data/ade/ADEChallengeData2016',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(keep_ratio=True, scale=(
                2560,
                640,
            ), type='Resize'),
            dict(reduce_zero_label=True, type='LoadAnnotations'),
            dict(type='PackSegInputs'),
        ],
        type='ADE20KDataset'),
    num_workers=4,
    persistent_workers=True,
    sampler=dict(shuffle=False, type='DefaultSampler'))
val_evaluator = dict(
    iou_metrics=[
        'mIoU',
    ], type='IoUMetric')
vis_backends = [
    dict(type='LocalVisBackend'),
]
visualizer = dict(
    name='visualizer',
    type='SegLocalVisualizer',
    vis_backends=[
        dict(type='LocalVisBackend'),
    ])
work_dir = '../corruptions/work_dirs/ade20k/mask2former/mask2former_swin-b-in1k-384x384-pre_8xb2-160k_ade20k-512x512/gaussian_noise'

/pfs/work7/workspace/scratch/ma_mkacar-team_project_fss2024/benchmarking_robustness/semantic_segmentation/mmsegmentation/mmseg/ops_dcnv3/modules/dcnv3.py:20: UserWarning: Now, we support DCNv4 in InternImage.
  warnings.warn('Now, we support DCNv4 in InternImage.')
10/06 01:05:34 - mmengine - INFO - Distributed training is not used, all SyncBatchNorm (SyncBN) layers in the model will be automatically reverted to BatchNormXd layers if they are used.
10/06 01:05:34 - mmengine - INFO - Hooks will be executed in the following order:
before_run:
(VERY_HIGH   ) RuntimeInfoHook                    
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
before_train:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_train_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(NORMAL      ) DistSamplerSeedHook                
 -------------------- 
before_train_iter:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_train_iter:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(NORMAL      ) SegVisualizationHook               
(BELOW_NORMAL) LoggerHook                         
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
after_train_epoch:
(NORMAL      ) IterTimerHook                      
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_val:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
before_val_epoch:
(NORMAL      ) IterTimerHook                      
 -------------------- 
before_val_iter:
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_val_iter:
(NORMAL      ) IterTimerHook                      
(NORMAL      ) SegVisualizationHook               
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_val_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
after_val:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
after_train:
(VERY_HIGH   ) RuntimeInfoHook                    
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_test:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
before_test_epoch:
(NORMAL      ) IterTimerHook                      
 -------------------- 
before_test_iter:
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_test_iter:
(NORMAL      ) IterTimerHook                      
(NORMAL      ) SegVisualizationHook               
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_test_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_test:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
after_run:
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
10/06 01:05:36 - mmengine - WARNING - The prefix is not set in metric class IoUMetric.
Loads checkpoint by local backend from path: ../checkpoint_files/ade20k/mask2former/best_mIoU_iter_155000.pth
10/06 01:05:39 - mmengine - INFO - Load checkpoint from ../checkpoint_files/ade20k/mask2former/best_mIoU_iter_155000.pth
10/06 01:06:44 - mmengine - INFO - Iter(test) [  50/2000]    eta: 0:42:07  time: 0.4421  data_time: 0.0019  memory: 17181  
10/06 01:07:05 - mmengine - INFO - Iter(test) [ 100/2000]    eta: 0:27:17  time: 0.4256  data_time: 0.0020  memory: 17180  
10/06 01:07:22 - mmengine - INFO - Iter(test) [ 150/2000]    eta: 0:21:10  time: 0.3305  data_time: 0.0019  memory: 17150  
10/06 01:07:39 - mmengine - INFO - Iter(test) [ 200/2000]    eta: 0:17:59  time: 0.3866  data_time: 0.0018  memory: 17194  
10/06 01:07:58 - mmengine - INFO - Iter(test) [ 250/2000]    eta: 0:16:15  time: 0.2772  data_time: 0.0017  memory: 17202  
10/06 01:08:15 - mmengine - INFO - Iter(test) [ 300/2000]    eta: 0:14:41  time: 0.1852  data_time: 0.0019  memory: 17180  
10/06 01:08:31 - mmengine - INFO - Iter(test) [ 350/2000]    eta: 0:13:31  time: 0.3224  data_time: 0.0044  memory: 17178  
10/06 01:08:43 - mmengine - INFO - Iter(test) [ 400/2000]    eta: 0:12:16  time: 0.1953  data_time: 0.0017  memory: 17177  
10/06 01:08:54 - mmengine - INFO - Iter(test) [ 450/2000]    eta: 0:11:10  time: 0.2304  data_time: 0.0017  memory: 17147  
10/06 01:09:05 - mmengine - INFO - Iter(test) [ 500/2000]    eta: 0:10:18  time: 0.2596  data_time: 0.0017  memory: 17149  
10/06 01:09:17 - mmengine - INFO - Iter(test) [ 550/2000]    eta: 0:09:34  time: 0.2846  data_time: 0.0019  memory: 17179  
10/06 01:09:26 - mmengine - INFO - Iter(test) [ 600/2000]    eta: 0:08:49  time: 0.1865  data_time: 0.0019  memory: 3938  
10/06 01:09:39 - mmengine - INFO - Iter(test) [ 650/2000]    eta: 0:08:18  time: 0.3098  data_time: 0.0017  memory: 17181  
10/06 01:09:55 - mmengine - INFO - Iter(test) [ 700/2000]    eta: 0:07:54  time: 0.2468  data_time: 0.0019  memory: 17177  
10/06 01:10:09 - mmengine - INFO - Iter(test) [ 750/2000]    eta: 0:07:30  time: 0.6064  data_time: 0.0018  memory: 17184  
10/06 01:10:19 - mmengine - INFO - Iter(test) [ 800/2000]    eta: 0:07:00  time: 0.1791  data_time: 0.0019  memory: 17151  
10/06 01:10:28 - mmengine - INFO - Iter(test) [ 850/2000]    eta: 0:06:31  time: 0.1812  data_time: 0.0019  memory: 1428  
10/06 01:10:39 - mmengine - INFO - Iter(test) [ 900/2000]    eta: 0:06:06  time: 0.2236  data_time: 0.0017  memory: 17138  
10/06 01:10:52 - mmengine - INFO - Iter(test) [ 950/2000]    eta: 0:05:46  time: 0.3369  data_time: 0.0018  memory: 17133  
10/06 01:11:02 - mmengine - INFO - Iter(test) [1000/2000]    eta: 0:05:22  time: 0.1747  data_time: 0.0018  memory: 17096  
10/06 01:11:12 - mmengine - INFO - Iter(test) [1050/2000]    eta: 0:05:01  time: 0.2609  data_time: 0.0017  memory: 17182  
10/06 01:11:24 - mmengine - INFO - Iter(test) [1100/2000]    eta: 0:04:42  time: 0.1779  data_time: 0.0018  memory: 17175  
10/06 01:11:34 - mmengine - INFO - Iter(test) [1150/2000]    eta: 0:04:22  time: 0.2075  data_time: 0.0018  memory: 17117  
10/06 01:11:44 - mmengine - INFO - Iter(test) [1200/2000]    eta: 0:04:03  time: 0.1724  data_time: 0.0017  memory: 17113  
10/06 01:11:55 - mmengine - INFO - Iter(test) [1250/2000]    eta: 0:03:45  time: 0.2572  data_time: 0.0017  memory: 17172  
10/06 01:12:04 - mmengine - INFO - Iter(test) [1300/2000]    eta: 0:03:27  time: 0.1804  data_time: 0.0017  memory: 1430  
10/06 01:12:14 - mmengine - INFO - Iter(test) [1350/2000]    eta: 0:03:10  time: 0.1678  data_time: 0.0017  memory: 17110  
10/06 01:12:27 - mmengine - INFO - Iter(test) [1400/2000]    eta: 0:02:54  time: 0.2033  data_time: 0.0017  memory: 17154  
10/06 01:12:36 - mmengine - INFO - Iter(test) [1450/2000]    eta: 0:02:38  time: 0.2470  data_time: 0.0017  memory: 17130  
10/06 01:12:45 - mmengine - INFO - Iter(test) [1500/2000]    eta: 0:02:22  time: 0.1683  data_time: 0.0016  memory: 17125  
10/06 01:12:56 - mmengine - INFO - Iter(test) [1550/2000]    eta: 0:02:06  time: 0.1797  data_time: 0.0017  memory: 17154  
10/06 01:13:04 - mmengine - INFO - Iter(test) [1600/2000]    eta: 0:01:51  time: 0.1733  data_time: 0.0017  memory: 1425  
10/06 01:13:15 - mmengine - INFO - Iter(test) [1650/2000]    eta: 0:01:36  time: 0.1672  data_time: 0.0017  memory: 17192  
10/06 01:13:28 - mmengine - INFO - Iter(test) [1700/2000]    eta: 0:01:22  time: 0.1807  data_time: 0.0019  memory: 17151  
10/06 01:13:39 - mmengine - INFO - Iter(test) [1750/2000]    eta: 0:01:08  time: 0.1798  data_time: 0.0017  memory: 17111  
10/06 01:13:48 - mmengine - INFO - Iter(test) [1800/2000]    eta: 0:00:54  time: 0.1840  data_time: 0.0020  memory: 17114  
10/06 01:13:57 - mmengine - INFO - Iter(test) [1850/2000]    eta: 0:00:40  time: 0.1767  data_time: 0.0018  memory: 1317  
10/06 01:14:06 - mmengine - INFO - Iter(test) [1900/2000]    eta: 0:00:26  time: 0.2354  data_time: 0.0017  memory: 17182  
10/06 01:14:16 - mmengine - INFO - Iter(test) [1950/2000]    eta: 0:00:13  time: 0.1656  data_time: 0.0016  memory: 17197  
10/06 01:14:27 - mmengine - INFO - Iter(test) [2000/2000]    eta: 0:00:00  time: 0.1566  data_time: 0.0015  memory: 17131  
10/06 01:14:27 - mmengine - INFO - per class results:
10/06 01:14:27 - mmengine - INFO - 
+---------------------+-------+-------+
|        Class        |  IoU  |  Acc  |
+---------------------+-------+-------+
|         wall        | 72.89 | 86.02 |
|       building      | 80.02 | 90.53 |
|         sky         | 93.43 | 96.83 |
|        floor        | 77.41 |  89.4 |
|         tree        | 72.08 | 88.19 |
|       ceiling       | 79.47 | 86.18 |
|         road        | 80.05 | 90.51 |
|         bed         |  85.4 | 92.39 |
|      windowpane     | 58.61 | 74.64 |
|        grass        | 57.56 | 72.06 |
|       cabinet       | 55.66 | 72.03 |
|       sidewalk      | 56.34 | 67.81 |
|        person       | 78.64 | 86.76 |
|        earth        | 31.55 | 45.67 |
|         door        | 35.42 | 48.61 |
|        table        | 50.93 | 66.92 |
|       mountain      | 50.96 | 68.98 |
|        plant        | 48.42 | 56.53 |
|       curtain       | 69.16 | 79.81 |
|        chair        | 49.07 | 59.82 |
|         car         | 82.83 | 90.58 |
|        water        | 50.65 | 67.52 |
|       painting      |  69.9 | 81.64 |
|         sofa        | 63.59 | 82.26 |
|        shelf        | 38.77 | 58.95 |
|        house        | 49.83 | 73.43 |
|         sea         | 49.43 | 73.95 |
|        mirror       | 60.47 | 73.34 |
|         rug         | 46.15 | 49.36 |
|        field        | 27.26 | 72.72 |
|       armchair      | 36.37 | 58.36 |
|         seat        | 52.08 |  65.7 |
|        fence        |  41.9 | 65.04 |
|         desk        |  34.0 | 64.17 |
|         rock        |  38.2 | 59.77 |
|       wardrobe      | 50.13 | 67.49 |
|         lamp        | 58.43 | 71.84 |
|       bathtub       |  68.0 | 78.38 |
|       railing       |  36.9 | 47.16 |
|       cushion       |  48.6 | 62.03 |
|         base        | 25.84 | 44.09 |
|         box         | 23.29 | 31.61 |
|        column       | 43.74 | 54.17 |
|      signboard      | 37.66 | 47.07 |
|   chest of drawers  | 36.23 | 57.62 |
|       counter       | 29.18 | 37.45 |
|         sand        | 26.41 | 30.17 |
|         sink        | 67.29 |  75.2 |
|      skyscraper     | 63.06 | 82.24 |
|      fireplace      | 59.65 | 79.77 |
|     refrigerator    | 66.59 | 78.63 |
|      grandstand     | 45.89 | 76.09 |
|         path        | 17.17 |  24.2 |
|        stairs       | 22.32 | 26.14 |
|        runway       | 57.89 | 83.66 |
|         case        | 62.14 | 83.06 |
|      pool table     | 90.74 | 95.03 |
|        pillow       | 48.68 | 67.98 |
|     screen door     | 41.25 | 48.99 |
|       stairway      | 31.86 | 42.75 |
|        river        | 14.45 |  21.5 |
|        bridge       | 54.68 | 69.92 |
|       bookcase      | 27.03 | 48.38 |
|        blind        | 27.68 | 30.11 |
|     coffee table    | 55.29 | 76.88 |
|        toilet       | 81.31 | 86.25 |
|        flower       | 31.91 | 49.14 |
|         book        | 47.02 | 68.65 |
|         hill        |  6.69 | 12.36 |
|        bench        | 52.02 |  64.9 |
|      countertop     | 53.08 |  66.8 |
|        stove        | 66.53 | 82.21 |
|         palm        | 48.78 | 55.14 |
|    kitchen island   | 28.29 |  59.1 |
|       computer      | 52.93 | 60.45 |
|     swivel chair    | 39.05 | 58.62 |
|         boat        | 45.29 | 50.95 |
|         bar         | 41.49 | 46.94 |
|    arcade machine   | 30.35 | 33.77 |
|        hovel        | 40.58 | 50.31 |
|         bus         | 88.69 | 96.13 |
|        towel        | 56.01 | 63.99 |
|        light        | 52.73 | 65.16 |
|        truck        | 32.48 | 49.76 |
|        tower        |  39.9 | 53.78 |
|      chandelier     |  60.4 |  74.7 |
|        awning       | 26.51 | 36.98 |
|     streetlight     | 23.99 | 35.52 |
|        booth        | 26.89 | 27.22 |
| television receiver | 63.16 | 68.16 |
|       airplane      | 59.44 | 65.36 |
|      dirt track     | 19.13 | 19.13 |
|       apparel       | 32.11 | 45.36 |
|         pole        | 21.35 | 37.13 |
|         land        |  0.25 |  0.3  |
|      bannister      |  6.27 |  8.59 |
|      escalator      | 15.39 | 15.72 |
|       ottoman       | 41.27 | 53.81 |
|        bottle       | 20.21 | 25.75 |
|        buffet       | 38.75 | 45.97 |
|        poster       | 11.12 | 12.75 |
|        stage        |  11.5 | 20.83 |
|         van         | 46.63 | 67.91 |
|         ship        | 13.17 | 19.66 |
|       fountain      | 27.88 | 29.26 |
|    conveyer belt    | 48.19 | 63.24 |
|        canopy       |  27.2 | 42.24 |
|        washer       | 68.64 | 69.77 |
|      plaything      |  11.4 | 18.06 |
|    swimming pool    | 32.41 | 68.33 |
|        stool        | 33.53 | 45.41 |
|        barrel       | 56.12 | 65.02 |
|        basket       | 30.18 |  38.9 |
|      waterfall      | 65.34 | 91.26 |
|         tent        | 81.64 | 97.91 |
|         bag         | 10.88 | 13.48 |
|       minibike      | 71.96 | 83.65 |
|        cradle       | 68.39 |  95.6 |
|         oven        |  15.2 | 43.14 |
|         ball        | 39.06 | 54.35 |
|         food        | 59.41 | 76.25 |
|         step        |  2.44 |  2.62 |
|         tank        | 40.06 | 44.97 |
|      trade name     | 26.95 | 33.63 |
|      microwave      | 36.69 | 40.14 |
|         pot         | 43.03 | 48.57 |
|        animal       | 64.69 | 71.15 |
|       bicycle       |  50.1 | 70.55 |
|         lake        |  0.0  |  0.0  |
|      dishwasher     | 56.29 | 67.75 |
|        screen       | 65.75 | 89.31 |
|       blanket       |  9.74 | 10.72 |
|      sculpture      | 43.72 | 60.61 |
|         hood        | 38.85 | 41.06 |
|        sconce       | 28.57 | 34.72 |
|         vase        | 36.74 | 51.92 |
|    traffic light    | 34.18 | 48.71 |
|         tray        |  5.6  |  6.83 |
|        ashcan       |  32.1 | 43.65 |
|         fan         | 49.91 |  76.4 |
|         pier        | 52.66 | 73.05 |
|      crt screen     |  3.52 | 11.41 |
|        plate        | 51.44 | 66.36 |
|       monitor       |  2.84 |  3.08 |
|    bulletin board   | 37.47 | 42.68 |
|        shower       | 10.77 | 13.58 |
|       radiator      | 48.51 | 54.77 |
|        glass        | 13.84 | 16.58 |
|        clock        | 28.26 |  37.5 |
|         flag        | 35.48 |  39.4 |
+---------------------+-------+-------+
10/06 01:14:27 - mmengine - INFO - Iter(test) [2000/2000]    aAcc: 79.8400  mIoU: 43.5500  mAcc: 55.6600  data_time: 0.0022  time: 0.2636
Finished processing corruption type: gaussian_noise
Processing corruption type: shot_noise
10/06 01:15:00 - mmengine - INFO - 
------------------------------------------------------------
System environment:
    sys.platform: linux
    Python: 3.10.13 | packaged by conda-forge | (main, Dec 23 2023, 15:36:39) [GCC 12.3.0]
    CUDA available: True
    MUSA available: False
    numpy_random_seed: 685021888
    GPU 0: Tesla V100-SXM2-32GB
    CUDA_HOME: /opt/bwhpc/common/devel/cuda/11.7
    NVCC: Cuda compilation tools, release 11.7, V11.7.99
    GCC: gcc (GCC) 8.5.0 20210514 (Red Hat 8.5.0-18)
    PyTorch: 1.13.1
    PyTorch compiling details: PyTorch built with:
  - GCC 9.3
  - C++ Version: 201402
  - Intel(R) oneAPI Math Kernel Library Version 2023.1-Product Build 20230303 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v2.6.0 (Git Hash 52b5f107dd9cf10910aaa19cb47f3abf9b349815)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - LAPACK is enabled (usually provided by MKL)
  - NNPACK is enabled
  - CPU capability usage: AVX2
  - CUDA Runtime 11.7
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_61,code=sm_61;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86;-gencode;arch=compute_37,code=compute_37
  - CuDNN 8.5
  - Magma 2.6.1
  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.7, CUDNN_VERSION=8.5.0, CXX_COMPILER=/opt/rh/devtoolset-9/root/usr/bin/c++, CXX_FLAGS= -fabi-version=11 -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -DEDGE_PROFILER_USE_KINETO -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Werror=non-virtual-dtor -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wunused-local-typedefs -Wno-unused-parameter -Wno-unused-function -Wno-unused-result -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Werror=cast-function-type -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.13.1, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, USE_ROCM=OFF, 

    TorchVision: 0.14.1
    OpenCV: 3.4.18
    MMEngine: 0.10.4

Runtime environment:
    cudnn_benchmark: True
    mp_cfg: {'mp_start_method': 'fork', 'opencv_num_threads': 0}
    dist_cfg: {'backend': 'nccl'}
    seed: 685021888
    Distributed launcher: none
    Distributed training: False
    GPU number: 1
------------------------------------------------------------

10/06 01:15:01 - mmengine - INFO - Config:
auto_scale_lr = dict(base_batch_size=16, enable=False)
backbone_embed_multi = dict(decay_mult=0.0, lr_mult=0.1)
backbone_norm_multi = dict(decay_mult=0.0, lr_mult=0.1)
crop_size = (
    512,
    512,
)
custom_keys = dict({
    'absolute_pos_embed':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone':
    dict(decay_mult=1.0, lr_mult=0.1),
    'backbone.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.patch_embed.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.0.blocks.0.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.0.blocks.1.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.0.downsample.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.1.blocks.0.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.1.blocks.1.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.1.downsample.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.0.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.1.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.10.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.11.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.12.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.13.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.14.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.15.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.16.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.17.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.2.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.3.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.4.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.5.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.6.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.7.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.8.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.9.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.downsample.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.3.blocks.0.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.3.blocks.1.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'level_embed':
    dict(decay_mult=0.0, lr_mult=1.0),
    'query_embed':
    dict(decay_mult=0.0, lr_mult=1.0),
    'query_feat':
    dict(decay_mult=0.0, lr_mult=1.0),
    'relative_position_bias_table':
    dict(decay_mult=0.0, lr_mult=0.1)
})
data_root = 'data/ade/ADEChallengeData2016'
dataset_type = 'ADE20KDataset'
default_hooks = dict(
    checkpoint=dict(
        by_epoch=False, interval=5000, save_best='mIoU',
        type='CheckpointHook'),
    logger=dict(interval=50, log_metric_by_epoch=False, type='LoggerHook'),
    param_scheduler=dict(type='ParamSchedulerHook'),
    sampler_seed=dict(type='DistSamplerSeedHook'),
    timer=dict(type='IterTimerHook'),
    visualization=dict(type='SegVisualizationHook'))
default_scope = 'mmseg'
depths = [
    2,
    2,
    18,
    2,
]
embed_multi = dict(decay_mult=0.0, lr_mult=1.0)
env_cfg = dict(
    cudnn_benchmark=True,
    dist_cfg=dict(backend='nccl'),
    mp_cfg=dict(mp_start_method='fork', opencv_num_threads=0))
img_ratios = [
    0.5,
    0.75,
    1.0,
    1.25,
    1.5,
    1.75,
]
launcher = 'none'
load_from = '../checkpoint_files/ade20k/mask2former/best_mIoU_iter_155000.pth'
log_level = 'INFO'
log_processor = dict(by_epoch=False)
model = dict(
    backbone=dict(
        attn_drop_rate=0.0,
        depths=[
            2,
            2,
            18,
            2,
        ],
        drop_path_rate=0.3,
        drop_rate=0.0,
        embed_dims=128,
        frozen_stages=-1,
        init_cfg=dict(
            checkpoint=
            'https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/swin/swin_base_patch4_window12_384_20220317-55b0104a.pth',
            type='Pretrained'),
        mlp_ratio=4,
        num_heads=[
            4,
            8,
            16,
            32,
        ],
        out_indices=(
            0,
            1,
            2,
            3,
        ),
        patch_norm=True,
        pretrain_img_size=384,
        qk_scale=None,
        qkv_bias=True,
        type='SwinTransformer',
        window_size=12,
        with_cp=False),
    data_preprocessor=dict(
        bgr_to_rgb=True,
        corruption='shot_noise',
        mean=[
            123.675,
            116.28,
            103.53,
        ],
        pad_val=0,
        seg_pad_val=255,
        size=(
            512,
            512,
        ),
        std=[
            58.395,
            57.12,
            57.375,
        ],
        type='SegDataPreProcessor'),
    decode_head=dict(
        align_corners=False,
        enforce_decoder_input_project=False,
        feat_channels=256,
        in_channels=[
            128,
            256,
            512,
            1024,
        ],
        loss_cls=dict(
            class_weight=[
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                0.1,
            ],
            loss_weight=2.0,
            reduction='mean',
            type='mmdet.CrossEntropyLoss',
            use_sigmoid=False),
        loss_dice=dict(
            activate=True,
            eps=1.0,
            loss_weight=5.0,
            naive_dice=True,
            reduction='mean',
            type='mmdet.DiceLoss',
            use_sigmoid=True),
        loss_mask=dict(
            loss_weight=5.0,
            reduction='mean',
            type='mmdet.CrossEntropyLoss',
            use_sigmoid=True),
        num_classes=150,
        num_queries=100,
        num_transformer_feat_level=3,
        out_channels=256,
        pixel_decoder=dict(
            act_cfg=dict(type='ReLU'),
            encoder=dict(
                init_cfg=None,
                layer_cfg=dict(
                    ffn_cfg=dict(
                        act_cfg=dict(inplace=True, type='ReLU'),
                        embed_dims=256,
                        feedforward_channels=1024,
                        ffn_drop=0.0,
                        num_fcs=2),
                    self_attn_cfg=dict(
                        batch_first=True,
                        dropout=0.0,
                        embed_dims=256,
                        im2col_step=64,
                        init_cfg=None,
                        norm_cfg=None,
                        num_heads=8,
                        num_levels=3,
                        num_points=4)),
                num_layers=6),
            init_cfg=None,
            norm_cfg=dict(num_groups=32, type='GN'),
            num_outs=3,
            positional_encoding=dict(normalize=True, num_feats=128),
            type='mmdet.MSDeformAttnPixelDecoder'),
        positional_encoding=dict(normalize=True, num_feats=128),
        strides=[
            4,
            8,
            16,
            32,
        ],
        train_cfg=dict(
            assigner=dict(
                match_costs=[
                    dict(type='mmdet.ClassificationCost', weight=2.0),
                    dict(
                        type='mmdet.CrossEntropyLossCost',
                        use_sigmoid=True,
                        weight=5.0),
                    dict(
                        eps=1.0,
                        pred_act=True,
                        type='mmdet.DiceCost',
                        weight=5.0),
                ],
                type='mmdet.HungarianAssigner'),
            importance_sample_ratio=0.75,
            num_points=12544,
            oversample_ratio=3.0,
            sampler=dict(type='mmdet.MaskPseudoSampler')),
        transformer_decoder=dict(
            init_cfg=None,
            layer_cfg=dict(
                cross_attn_cfg=dict(
                    attn_drop=0.0,
                    batch_first=True,
                    dropout_layer=None,
                    embed_dims=256,
                    num_heads=8,
                    proj_drop=0.0),
                ffn_cfg=dict(
                    act_cfg=dict(inplace=True, type='ReLU'),
                    add_identity=True,
                    dropout_layer=None,
                    embed_dims=256,
                    feedforward_channels=2048,
                    ffn_drop=0.0,
                    num_fcs=2),
                self_attn_cfg=dict(
                    attn_drop=0.0,
                    batch_first=True,
                    dropout_layer=None,
                    embed_dims=256,
                    num_heads=8,
                    proj_drop=0.0)),
            num_layers=9,
            return_intermediate=True),
        type='Mask2FormerHead'),
    test_cfg=dict(mode='whole'),
    train_cfg=dict(),
    type='EncoderDecoder')
num_classes = 150
optim_wrapper = dict(
    clip_grad=dict(max_norm=0.01, norm_type=2),
    optimizer=dict(
        betas=(
            0.9,
            0.999,
        ),
        eps=1e-08,
        lr=0.0001,
        type='AdamW',
        weight_decay=0.05),
    paramwise_cfg=dict(
        custom_keys=dict({
            'absolute_pos_embed':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone':
            dict(decay_mult=1.0, lr_mult=0.1),
            'backbone.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.patch_embed.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.0.blocks.0.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.0.blocks.1.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.0.downsample.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.1.blocks.0.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.1.blocks.1.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.1.downsample.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.0.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.1.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.10.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.11.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.12.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.13.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.14.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.15.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.16.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.17.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.2.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.3.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.4.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.5.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.6.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.7.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.8.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.9.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.downsample.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.3.blocks.0.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.3.blocks.1.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'level_embed':
            dict(decay_mult=0.0, lr_mult=1.0),
            'query_embed':
            dict(decay_mult=0.0, lr_mult=1.0),
            'query_feat':
            dict(decay_mult=0.0, lr_mult=1.0),
            'relative_position_bias_table':
            dict(decay_mult=0.0, lr_mult=0.1)
        }),
        norm_decay_mult=0.0),
    type='OptimWrapper')
optimizer = dict(
    betas=(
        0.9,
        0.999,
    ),
    eps=1e-08,
    lr=0.0001,
    type='AdamW',
    weight_decay=0.05)
param_scheduler = [
    dict(
        begin=0,
        by_epoch=False,
        end=160000,
        eta_min=0,
        power=0.9,
        type='PolyLR'),
]
pretrained = 'https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/swin/swin_base_patch4_window12_384_20220317-55b0104a.pth'
resume = False
test_cfg = dict(type='TestLoop')
test_dataloader = dict(
    batch_size=1,
    dataset=dict(
        data_prefix=dict(
            img_path='images/validation',
            seg_map_path='annotations/validation'),
        data_root='data/ade/ADEChallengeData2016',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(keep_ratio=True, scale=(
                2560,
                640,
            ), type='Resize'),
            dict(reduce_zero_label=True, type='LoadAnnotations'),
            dict(type='PackSegInputs'),
        ],
        type='ADE20KDataset'),
    num_workers=4,
    persistent_workers=True,
    sampler=dict(shuffle=False, type='DefaultSampler'))
test_evaluator = dict(
    iou_metrics=[
        'mIoU',
    ], type='IoUMetric')
test_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(keep_ratio=True, scale=(
        2560,
        640,
    ), type='Resize'),
    dict(reduce_zero_label=True, type='LoadAnnotations'),
    dict(type='PackSegInputs'),
]
train_cfg = dict(
    max_iters=160000, type='IterBasedTrainLoop', val_interval=5000)
train_dataloader = dict(
    batch_size=2,
    dataset=dict(
        data_prefix=dict(
            img_path='images/training', seg_map_path='annotations/training'),
        data_root='data/ade/ADEChallengeData2016',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(reduce_zero_label=True, type='LoadAnnotations'),
            dict(
                max_size=2560,
                resize_type='ResizeShortestEdge',
                scales=[
                    320,
                    384,
                    448,
                    512,
                    576,
                    640,
                    704,
                    768,
                    832,
                    896,
                    960,
                    1024,
                    1088,
                    1152,
                    1216,
                    1280,
                ],
                type='RandomChoiceResize'),
            dict(
                cat_max_ratio=0.75, crop_size=(
                    512,
                    512,
                ), type='RandomCrop'),
            dict(prob=0.5, type='RandomFlip'),
            dict(type='PhotoMetricDistortion'),
            dict(type='PackSegInputs'),
        ],
        type='ADE20KDataset'),
    num_workers=4,
    persistent_workers=True,
    sampler=dict(shuffle=True, type='InfiniteSampler'))
train_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(reduce_zero_label=True, type='LoadAnnotations'),
    dict(
        max_size=2560,
        resize_type='ResizeShortestEdge',
        scales=[
            320,
            384,
            448,
            512,
            576,
            640,
            704,
            768,
            832,
            896,
            960,
            1024,
            1088,
            1152,
            1216,
            1280,
        ],
        type='RandomChoiceResize'),
    dict(cat_max_ratio=0.75, crop_size=(
        512,
        512,
    ), type='RandomCrop'),
    dict(prob=0.5, type='RandomFlip'),
    dict(type='PhotoMetricDistortion'),
    dict(type='PackSegInputs'),
]
tta_model = dict(type='SegTTAModel')
tta_pipeline = [
    dict(backend_args=None, type='LoadImageFromFile'),
    dict(
        transforms=[
            [
                dict(keep_ratio=True, scale_factor=0.5, type='Resize'),
                dict(keep_ratio=True, scale_factor=0.75, type='Resize'),
                dict(keep_ratio=True, scale_factor=1.0, type='Resize'),
                dict(keep_ratio=True, scale_factor=1.25, type='Resize'),
                dict(keep_ratio=True, scale_factor=1.5, type='Resize'),
                dict(keep_ratio=True, scale_factor=1.75, type='Resize'),
            ],
            [
                dict(direction='horizontal', prob=0.0, type='RandomFlip'),
                dict(direction='horizontal', prob=1.0, type='RandomFlip'),
            ],
            [
                dict(type='LoadAnnotations'),
            ],
            [
                dict(type='PackSegInputs'),
            ],
        ],
        type='TestTimeAug'),
]
val_cfg = dict(type='ValLoop')
val_dataloader = dict(
    batch_size=1,
    dataset=dict(
        data_prefix=dict(
            img_path='images/validation',
            seg_map_path='annotations/validation'),
        data_root='data/ade/ADEChallengeData2016',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(keep_ratio=True, scale=(
                2560,
                640,
            ), type='Resize'),
            dict(reduce_zero_label=True, type='LoadAnnotations'),
            dict(type='PackSegInputs'),
        ],
        type='ADE20KDataset'),
    num_workers=4,
    persistent_workers=True,
    sampler=dict(shuffle=False, type='DefaultSampler'))
val_evaluator = dict(
    iou_metrics=[
        'mIoU',
    ], type='IoUMetric')
vis_backends = [
    dict(type='LocalVisBackend'),
]
visualizer = dict(
    name='visualizer',
    type='SegLocalVisualizer',
    vis_backends=[
        dict(type='LocalVisBackend'),
    ])
work_dir = '../corruptions/work_dirs/ade20k/mask2former/mask2former_swin-b-in1k-384x384-pre_8xb2-160k_ade20k-512x512/shot_noise'

/pfs/work7/workspace/scratch/ma_mkacar-team_project_fss2024/benchmarking_robustness/semantic_segmentation/mmsegmentation/mmseg/ops_dcnv3/modules/dcnv3.py:20: UserWarning: Now, we support DCNv4 in InternImage.
  warnings.warn('Now, we support DCNv4 in InternImage.')
10/06 01:15:22 - mmengine - INFO - Distributed training is not used, all SyncBatchNorm (SyncBN) layers in the model will be automatically reverted to BatchNormXd layers if they are used.
10/06 01:15:22 - mmengine - INFO - Hooks will be executed in the following order:
before_run:
(VERY_HIGH   ) RuntimeInfoHook                    
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
before_train:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_train_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(NORMAL      ) DistSamplerSeedHook                
 -------------------- 
before_train_iter:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_train_iter:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(NORMAL      ) SegVisualizationHook               
(BELOW_NORMAL) LoggerHook                         
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
after_train_epoch:
(NORMAL      ) IterTimerHook                      
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_val:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
before_val_epoch:
(NORMAL      ) IterTimerHook                      
 -------------------- 
before_val_iter:
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_val_iter:
(NORMAL      ) IterTimerHook                      
(NORMAL      ) SegVisualizationHook               
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_val_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
after_val:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
after_train:
(VERY_HIGH   ) RuntimeInfoHook                    
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_test:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
before_test_epoch:
(NORMAL      ) IterTimerHook                      
 -------------------- 
before_test_iter:
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_test_iter:
(NORMAL      ) IterTimerHook                      
(NORMAL      ) SegVisualizationHook               
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_test_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_test:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
after_run:
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
10/06 01:15:23 - mmengine - WARNING - The prefix is not set in metric class IoUMetric.
Loads checkpoint by local backend from path: ../checkpoint_files/ade20k/mask2former/best_mIoU_iter_155000.pth
10/06 01:15:25 - mmengine - INFO - Load checkpoint from ../checkpoint_files/ade20k/mask2former/best_mIoU_iter_155000.pth
10/06 01:16:11 - mmengine - INFO - Iter(test) [  50/2000]    eta: 0:29:38  time: 0.5550  data_time: 0.0019  memory: 17181  
10/06 01:16:38 - mmengine - INFO - Iter(test) [ 100/2000]    eta: 0:22:55  time: 0.5449  data_time: 0.0019  memory: 17180  
10/06 01:17:00 - mmengine - INFO - Iter(test) [ 150/2000]    eta: 0:19:30  time: 0.4486  data_time: 0.0018  memory: 17150  
10/06 01:17:23 - mmengine - INFO - Iter(test) [ 200/2000]    eta: 0:17:38  time: 0.5029  data_time: 0.0018  memory: 17194  
10/06 01:17:47 - mmengine - INFO - Iter(test) [ 250/2000]    eta: 0:16:30  time: 0.3983  data_time: 0.0017  memory: 17202  
10/06 01:18:08 - mmengine - INFO - Iter(test) [ 300/2000]    eta: 0:15:24  time: 0.3164  data_time: 0.0019  memory: 17180  
10/06 01:18:31 - mmengine - INFO - Iter(test) [ 350/2000]    eta: 0:14:35  time: 0.4330  data_time: 0.0017  memory: 17178  
10/06 01:18:50 - mmengine - INFO - Iter(test) [ 400/2000]    eta: 0:13:37  time: 0.3306  data_time: 0.0017  memory: 17177  
10/06 01:19:06 - mmengine - INFO - Iter(test) [ 450/2000]    eta: 0:12:38  time: 0.3419  data_time: 0.0017  memory: 17147  
10/06 01:19:23 - mmengine - INFO - Iter(test) [ 500/2000]    eta: 0:11:54  time: 0.3803  data_time: 0.0017  memory: 17149  
10/06 01:19:41 - mmengine - INFO - Iter(test) [ 550/2000]    eta: 0:11:15  time: 0.4214  data_time: 0.0018  memory: 17179  
10/06 01:19:57 - mmengine - INFO - Iter(test) [ 600/2000]    eta: 0:10:33  time: 0.3159  data_time: 0.0019  memory: 3938  
10/06 01:20:16 - mmengine - INFO - Iter(test) [ 650/2000]    eta: 0:10:03  time: 0.4127  data_time: 0.0017  memory: 17181  
10/06 01:20:37 - mmengine - INFO - Iter(test) [ 700/2000]    eta: 0:09:38  time: 0.3744  data_time: 0.0019  memory: 17177  
10/06 01:20:58 - mmengine - INFO - Iter(test) [ 750/2000]    eta: 0:09:13  time: 0.6910  data_time: 0.0018  memory: 17184  
10/06 01:21:14 - mmengine - INFO - Iter(test) [ 800/2000]    eta: 0:08:42  time: 0.3131  data_time: 0.0019  memory: 17151  
10/06 01:21:29 - mmengine - INFO - Iter(test) [ 850/2000]    eta: 0:08:12  time: 0.3152  data_time: 0.0020  memory: 1428  
10/06 01:21:45 - mmengine - INFO - Iter(test) [ 900/2000]    eta: 0:07:44  time: 0.3327  data_time: 0.0017  memory: 17138  
10/06 01:22:05 - mmengine - INFO - Iter(test) [ 950/2000]    eta: 0:07:21  time: 0.4596  data_time: 0.0019  memory: 17133  
10/06 01:22:21 - mmengine - INFO - Iter(test) [1000/2000]    eta: 0:06:55  time: 0.2950  data_time: 0.0019  memory: 17096  
10/06 01:22:38 - mmengine - INFO - Iter(test) [1050/2000]    eta: 0:06:31  time: 0.3919  data_time: 0.0019  memory: 17182  
10/06 01:22:56 - mmengine - INFO - Iter(test) [1100/2000]    eta: 0:06:08  time: 0.2985  data_time: 0.0019  memory: 17175  
10/06 01:23:12 - mmengine - INFO - Iter(test) [1150/2000]    eta: 0:05:44  time: 0.3122  data_time: 0.0019  memory: 17117  
10/06 01:23:28 - mmengine - INFO - Iter(test) [1200/2000]    eta: 0:05:21  time: 0.2968  data_time: 0.0017  memory: 17113  
10/06 01:23:45 - mmengine - INFO - Iter(test) [1250/2000]    eta: 0:04:59  time: 0.3761  data_time: 0.0018  memory: 17172  
10/06 01:24:00 - mmengine - INFO - Iter(test) [1300/2000]    eta: 0:04:37  time: 0.3127  data_time: 0.0044  memory: 1430  
10/06 01:24:17 - mmengine - INFO - Iter(test) [1350/2000]    eta: 0:04:15  time: 0.2859  data_time: 0.0018  memory: 17110  
10/06 01:24:35 - mmengine - INFO - Iter(test) [1400/2000]    eta: 0:03:55  time: 0.3347  data_time: 0.0021  memory: 17154  
10/06 01:24:51 - mmengine - INFO - Iter(test) [1450/2000]    eta: 0:03:34  time: 0.3819  data_time: 0.0017  memory: 17130  
10/06 01:25:06 - mmengine - INFO - Iter(test) [1500/2000]    eta: 0:03:13  time: 0.2823  data_time: 0.0018  memory: 17125  
10/06 01:25:22 - mmengine - INFO - Iter(test) [1550/2000]    eta: 0:02:53  time: 0.3146  data_time: 0.0018  memory: 17154  
10/06 01:25:37 - mmengine - INFO - Iter(test) [1600/2000]    eta: 0:02:32  time: 0.3000  data_time: 0.0019  memory: 1425  
10/06 01:25:54 - mmengine - INFO - Iter(test) [1650/2000]    eta: 0:02:13  time: 0.2778  data_time: 0.0017  memory: 17192  
10/06 01:26:14 - mmengine - INFO - Iter(test) [1700/2000]    eta: 0:01:54  time: 0.3109  data_time: 0.0019  memory: 17151  
10/06 01:26:31 - mmengine - INFO - Iter(test) [1750/2000]    eta: 0:01:35  time: 0.3066  data_time: 0.0018  memory: 17111  
10/06 01:26:48 - mmengine - INFO - Iter(test) [1800/2000]    eta: 0:01:15  time: 0.3756  data_time: 0.0020  memory: 17114  
10/06 01:27:03 - mmengine - INFO - Iter(test) [1850/2000]    eta: 0:00:56  time: 0.3121  data_time: 0.0019  memory: 1317  
10/06 01:27:19 - mmengine - INFO - Iter(test) [1900/2000]    eta: 0:00:37  time: 0.3541  data_time: 0.0018  memory: 17182  
10/06 01:27:35 - mmengine - INFO - Iter(test) [1950/2000]    eta: 0:00:18  time: 0.2991  data_time: 0.0017  memory: 17197  
10/06 01:27:52 - mmengine - INFO - Iter(test) [2000/2000]    eta: 0:00:00  time: 0.2807  data_time: 0.0015  memory: 17131  
10/06 01:27:52 - mmengine - INFO - per class results:
10/06 01:27:52 - mmengine - INFO - 
+---------------------+-------+-------+
|        Class        |  IoU  |  Acc  |
+---------------------+-------+-------+
|         wall        | 72.49 | 86.36 |
|       building      | 79.42 | 89.96 |
|         sky         | 93.06 | 96.71 |
|        floor        | 77.74 | 89.31 |
|         tree        | 72.88 | 88.52 |
|       ceiling       | 77.86 | 84.29 |
|         road        | 79.98 | 91.75 |
|         bed         | 85.46 | 93.33 |
|      windowpane     | 56.98 | 74.58 |
|        grass        | 57.86 | 71.28 |
|       cabinet       | 56.29 |  71.0 |
|       sidewalk      | 53.32 | 62.68 |
|        person       | 78.62 |  86.8 |
|        earth        | 32.84 |  48.9 |
|         door        | 38.36 | 51.23 |
|        table        | 52.12 | 67.85 |
|       mountain      |  51.0 | 69.08 |
|        plant        | 48.64 | 57.08 |
|       curtain       | 68.93 | 80.23 |
|        chair        | 49.97 | 61.31 |
|         car         |  82.6 | 89.17 |
|        water        | 48.56 | 64.52 |
|       painting      | 69.08 | 80.76 |
|         sofa        | 60.64 | 80.21 |
|        shelf        | 36.37 | 55.75 |
|        house        |  49.6 | 74.67 |
|         sea         | 45.06 | 68.55 |
|        mirror       | 60.66 |  73.9 |
|         rug         | 46.73 | 50.18 |
|        field        | 28.22 | 78.17 |
|       armchair      | 33.84 | 53.85 |
|         seat        | 52.27 | 66.53 |
|        fence        | 40.83 | 64.01 |
|         desk        | 32.41 |  61.0 |
|         rock        | 39.39 |  63.9 |
|       wardrobe      | 46.83 | 62.24 |
|         lamp        | 56.02 | 69.68 |
|       bathtub       | 65.51 | 73.44 |
|       railing       | 34.72 | 42.93 |
|       cushion       | 50.36 | 63.94 |
|         base        | 26.72 | 45.17 |
|         box         |  23.5 | 31.34 |
|        column       | 41.33 | 50.03 |
|      signboard      |  37.7 | 46.59 |
|   chest of drawers  | 38.07 | 58.51 |
|       counter       | 30.33 | 38.58 |
|         sand        | 27.71 | 29.78 |
|         sink        |  67.5 | 74.97 |
|      skyscraper     | 52.58 | 68.97 |
|      fireplace      | 58.85 | 79.78 |
|     refrigerator    |  68.8 | 76.75 |
|      grandstand     | 50.59 | 75.07 |
|         path        | 17.52 | 24.91 |
|        stairs       | 13.75 | 15.95 |
|        runway       | 61.03 |  78.9 |
|         case        | 61.29 |  82.2 |
|      pool table     | 93.33 | 95.48 |
|        pillow       |  47.9 | 62.33 |
|     screen door     | 48.13 | 59.99 |
|       stairway      | 33.66 | 45.53 |
|        river        | 13.27 | 21.88 |
|        bridge       | 29.19 | 36.21 |
|       bookcase      | 26.52 | 48.33 |
|        blind        | 25.05 | 27.78 |
|     coffee table    | 55.64 | 78.44 |
|        toilet       | 81.07 | 86.38 |
|        flower       | 33.76 | 48.56 |
|         book        | 46.57 | 68.75 |
|         hill        |  7.16 | 12.09 |
|        bench        | 47.74 | 60.71 |
|      countertop     | 53.77 |  70.6 |
|        stove        | 62.05 | 74.51 |
|         palm        | 51.32 | 59.83 |
|    kitchen island   | 33.54 | 69.46 |
|       computer      | 52.39 |  59.6 |
|     swivel chair    | 38.54 | 61.02 |
|         boat        | 68.28 | 84.06 |
|         bar         | 51.78 | 58.48 |
|    arcade machine   | 29.92 | 33.81 |
|        hovel        | 35.41 | 43.86 |
|         bus         | 87.91 | 95.38 |
|        towel        | 56.85 | 63.94 |
|        light        | 50.71 | 63.57 |
|        truck        | 36.58 | 51.84 |
|        tower        | 35.64 | 53.83 |
|      chandelier     | 57.11 | 75.34 |
|        awning       |  26.4 | 34.91 |
|     streetlight     | 26.82 | 36.02 |
|        booth        | 27.02 | 27.13 |
| television receiver | 63.59 | 68.72 |
|       airplane      | 64.28 |  72.8 |
|      dirt track     |  0.25 |  0.29 |
|       apparel       | 36.68 | 51.22 |
|         pole        |  27.7 | 48.04 |
|         land        |  0.23 |  0.28 |
|      bannister      |  5.88 |  8.33 |
|      escalator      |  15.6 |  15.9 |
|       ottoman       | 40.35 | 57.04 |
|        bottle       | 17.81 | 22.82 |
|        buffet       |  52.4 |  65.4 |
|        poster       |  8.24 |  9.41 |
|        stage        |  7.31 | 13.42 |
|         van         |  43.1 | 66.58 |
|         ship        | 18.07 | 18.52 |
|       fountain      | 27.29 | 28.52 |
|    conveyer belt    | 41.26 | 66.11 |
|        canopy       | 19.05 | 30.21 |
|        washer       | 66.81 | 68.91 |
|      plaything      | 11.32 | 17.85 |
|    swimming pool    |  33.1 | 70.16 |
|        stool        | 34.98 | 47.72 |
|        barrel       | 35.19 | 41.67 |
|        basket       | 32.08 | 41.47 |
|      waterfall      | 66.06 |  90.0 |
|         tent        | 86.87 | 97.82 |
|         bag         | 11.04 | 14.34 |
|       minibike      | 69.45 | 83.68 |
|        cradle       | 69.72 | 95.36 |
|         oven        | 17.88 | 48.81 |
|         ball        | 36.34 | 51.23 |
|         food        | 54.64 | 75.46 |
|         step        |  3.5  |  4.11 |
|         tank        | 25.95 | 29.59 |
|      trade name     | 30.25 | 38.64 |
|      microwave      | 38.17 | 41.75 |
|         pot         |  41.5 | 49.96 |
|        animal       | 60.66 | 65.88 |
|       bicycle       | 49.31 | 73.16 |
|         lake        |  0.0  |  0.0  |
|      dishwasher     | 54.42 | 66.39 |
|        screen       | 69.02 | 88.36 |
|       blanket       | 11.72 | 13.22 |
|      sculpture      |  44.3 | 58.63 |
|         hood        | 29.59 | 34.06 |
|        sconce       | 29.11 | 35.47 |
|         vase        | 35.99 | 50.61 |
|    traffic light    | 30.83 | 45.11 |
|         tray        |  4.0  |  5.59 |
|        ashcan       | 37.03 | 47.96 |
|         fan         | 49.65 | 76.01 |
|         pier        |  47.3 | 71.35 |
|      crt screen     |  3.32 | 11.37 |
|        plate        |  54.3 | 69.55 |
|       monitor       |  3.04 |  3.3  |
|    bulletin board   | 37.02 | 39.53 |
|        shower       |  7.26 |  9.06 |
|       radiator      |  41.0 | 47.12 |
|        glass        |  13.4 | 15.85 |
|        clock        |  28.4 | 36.99 |
|         flag        | 37.38 | 42.07 |
+---------------------+-------+-------+
10/06 01:27:52 - mmengine - INFO - Iter(test) [2000/2000]    aAcc: 79.6200  mIoU: 42.9600  mAcc: 55.1000  data_time: 0.0022  time: 0.3731
Finished processing corruption type: shot_noise
Processing corruption type: impulse_noise
10/06 01:27:55 - mmengine - INFO - 
------------------------------------------------------------
System environment:
    sys.platform: linux
    Python: 3.10.13 | packaged by conda-forge | (main, Dec 23 2023, 15:36:39) [GCC 12.3.0]
    CUDA available: True
    MUSA available: False
    numpy_random_seed: 364000073
    GPU 0: Tesla V100-SXM2-32GB
    CUDA_HOME: /opt/bwhpc/common/devel/cuda/11.7
    NVCC: Cuda compilation tools, release 11.7, V11.7.99
    GCC: gcc (GCC) 8.5.0 20210514 (Red Hat 8.5.0-18)
    PyTorch: 1.13.1
    PyTorch compiling details: PyTorch built with:
  - GCC 9.3
  - C++ Version: 201402
  - Intel(R) oneAPI Math Kernel Library Version 2023.1-Product Build 20230303 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v2.6.0 (Git Hash 52b5f107dd9cf10910aaa19cb47f3abf9b349815)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - LAPACK is enabled (usually provided by MKL)
  - NNPACK is enabled
  - CPU capability usage: AVX2
  - CUDA Runtime 11.7
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_61,code=sm_61;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86;-gencode;arch=compute_37,code=compute_37
  - CuDNN 8.5
  - Magma 2.6.1
  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.7, CUDNN_VERSION=8.5.0, CXX_COMPILER=/opt/rh/devtoolset-9/root/usr/bin/c++, CXX_FLAGS= -fabi-version=11 -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -DEDGE_PROFILER_USE_KINETO -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Werror=non-virtual-dtor -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wunused-local-typedefs -Wno-unused-parameter -Wno-unused-function -Wno-unused-result -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Werror=cast-function-type -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.13.1, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, USE_ROCM=OFF, 

    TorchVision: 0.14.1
    OpenCV: 3.4.18
    MMEngine: 0.10.4

Runtime environment:
    cudnn_benchmark: True
    mp_cfg: {'mp_start_method': 'fork', 'opencv_num_threads': 0}
    dist_cfg: {'backend': 'nccl'}
    seed: 364000073
    Distributed launcher: none
    Distributed training: False
    GPU number: 1
------------------------------------------------------------

10/06 01:27:56 - mmengine - INFO - Config:
auto_scale_lr = dict(base_batch_size=16, enable=False)
backbone_embed_multi = dict(decay_mult=0.0, lr_mult=0.1)
backbone_norm_multi = dict(decay_mult=0.0, lr_mult=0.1)
crop_size = (
    512,
    512,
)
custom_keys = dict({
    'absolute_pos_embed':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone':
    dict(decay_mult=1.0, lr_mult=0.1),
    'backbone.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.patch_embed.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.0.blocks.0.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.0.blocks.1.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.0.downsample.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.1.blocks.0.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.1.blocks.1.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.1.downsample.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.0.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.1.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.10.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.11.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.12.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.13.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.14.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.15.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.16.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.17.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.2.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.3.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.4.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.5.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.6.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.7.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.8.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.9.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.downsample.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.3.blocks.0.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.3.blocks.1.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'level_embed':
    dict(decay_mult=0.0, lr_mult=1.0),
    'query_embed':
    dict(decay_mult=0.0, lr_mult=1.0),
    'query_feat':
    dict(decay_mult=0.0, lr_mult=1.0),
    'relative_position_bias_table':
    dict(decay_mult=0.0, lr_mult=0.1)
})
data_root = 'data/ade/ADEChallengeData2016'
dataset_type = 'ADE20KDataset'
default_hooks = dict(
    checkpoint=dict(
        by_epoch=False, interval=5000, save_best='mIoU',
        type='CheckpointHook'),
    logger=dict(interval=50, log_metric_by_epoch=False, type='LoggerHook'),
    param_scheduler=dict(type='ParamSchedulerHook'),
    sampler_seed=dict(type='DistSamplerSeedHook'),
    timer=dict(type='IterTimerHook'),
    visualization=dict(type='SegVisualizationHook'))
default_scope = 'mmseg'
depths = [
    2,
    2,
    18,
    2,
]
embed_multi = dict(decay_mult=0.0, lr_mult=1.0)
env_cfg = dict(
    cudnn_benchmark=True,
    dist_cfg=dict(backend='nccl'),
    mp_cfg=dict(mp_start_method='fork', opencv_num_threads=0))
img_ratios = [
    0.5,
    0.75,
    1.0,
    1.25,
    1.5,
    1.75,
]
launcher = 'none'
load_from = '../checkpoint_files/ade20k/mask2former/best_mIoU_iter_155000.pth'
log_level = 'INFO'
log_processor = dict(by_epoch=False)
model = dict(
    backbone=dict(
        attn_drop_rate=0.0,
        depths=[
            2,
            2,
            18,
            2,
        ],
        drop_path_rate=0.3,
        drop_rate=0.0,
        embed_dims=128,
        frozen_stages=-1,
        init_cfg=dict(
            checkpoint=
            'https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/swin/swin_base_patch4_window12_384_20220317-55b0104a.pth',
            type='Pretrained'),
        mlp_ratio=4,
        num_heads=[
            4,
            8,
            16,
            32,
        ],
        out_indices=(
            0,
            1,
            2,
            3,
        ),
        patch_norm=True,
        pretrain_img_size=384,
        qk_scale=None,
        qkv_bias=True,
        type='SwinTransformer',
        window_size=12,
        with_cp=False),
    data_preprocessor=dict(
        bgr_to_rgb=True,
        corruption='impulse_noise',
        mean=[
            123.675,
            116.28,
            103.53,
        ],
        pad_val=0,
        seg_pad_val=255,
        size=(
            512,
            512,
        ),
        std=[
            58.395,
            57.12,
            57.375,
        ],
        type='SegDataPreProcessor'),
    decode_head=dict(
        align_corners=False,
        enforce_decoder_input_project=False,
        feat_channels=256,
        in_channels=[
            128,
            256,
            512,
            1024,
        ],
        loss_cls=dict(
            class_weight=[
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                0.1,
            ],
            loss_weight=2.0,
            reduction='mean',
            type='mmdet.CrossEntropyLoss',
            use_sigmoid=False),
        loss_dice=dict(
            activate=True,
            eps=1.0,
            loss_weight=5.0,
            naive_dice=True,
            reduction='mean',
            type='mmdet.DiceLoss',
            use_sigmoid=True),
        loss_mask=dict(
            loss_weight=5.0,
            reduction='mean',
            type='mmdet.CrossEntropyLoss',
            use_sigmoid=True),
        num_classes=150,
        num_queries=100,
        num_transformer_feat_level=3,
        out_channels=256,
        pixel_decoder=dict(
            act_cfg=dict(type='ReLU'),
            encoder=dict(
                init_cfg=None,
                layer_cfg=dict(
                    ffn_cfg=dict(
                        act_cfg=dict(inplace=True, type='ReLU'),
                        embed_dims=256,
                        feedforward_channels=1024,
                        ffn_drop=0.0,
                        num_fcs=2),
                    self_attn_cfg=dict(
                        batch_first=True,
                        dropout=0.0,
                        embed_dims=256,
                        im2col_step=64,
                        init_cfg=None,
                        norm_cfg=None,
                        num_heads=8,
                        num_levels=3,
                        num_points=4)),
                num_layers=6),
            init_cfg=None,
            norm_cfg=dict(num_groups=32, type='GN'),
            num_outs=3,
            positional_encoding=dict(normalize=True, num_feats=128),
            type='mmdet.MSDeformAttnPixelDecoder'),
        positional_encoding=dict(normalize=True, num_feats=128),
        strides=[
            4,
            8,
            16,
            32,
        ],
        train_cfg=dict(
            assigner=dict(
                match_costs=[
                    dict(type='mmdet.ClassificationCost', weight=2.0),
                    dict(
                        type='mmdet.CrossEntropyLossCost',
                        use_sigmoid=True,
                        weight=5.0),
                    dict(
                        eps=1.0,
                        pred_act=True,
                        type='mmdet.DiceCost',
                        weight=5.0),
                ],
                type='mmdet.HungarianAssigner'),
            importance_sample_ratio=0.75,
            num_points=12544,
            oversample_ratio=3.0,
            sampler=dict(type='mmdet.MaskPseudoSampler')),
        transformer_decoder=dict(
            init_cfg=None,
            layer_cfg=dict(
                cross_attn_cfg=dict(
                    attn_drop=0.0,
                    batch_first=True,
                    dropout_layer=None,
                    embed_dims=256,
                    num_heads=8,
                    proj_drop=0.0),
                ffn_cfg=dict(
                    act_cfg=dict(inplace=True, type='ReLU'),
                    add_identity=True,
                    dropout_layer=None,
                    embed_dims=256,
                    feedforward_channels=2048,
                    ffn_drop=0.0,
                    num_fcs=2),
                self_attn_cfg=dict(
                    attn_drop=0.0,
                    batch_first=True,
                    dropout_layer=None,
                    embed_dims=256,
                    num_heads=8,
                    proj_drop=0.0)),
            num_layers=9,
            return_intermediate=True),
        type='Mask2FormerHead'),
    test_cfg=dict(mode='whole'),
    train_cfg=dict(),
    type='EncoderDecoder')
num_classes = 150
optim_wrapper = dict(
    clip_grad=dict(max_norm=0.01, norm_type=2),
    optimizer=dict(
        betas=(
            0.9,
            0.999,
        ),
        eps=1e-08,
        lr=0.0001,
        type='AdamW',
        weight_decay=0.05),
    paramwise_cfg=dict(
        custom_keys=dict({
            'absolute_pos_embed':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone':
            dict(decay_mult=1.0, lr_mult=0.1),
            'backbone.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.patch_embed.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.0.blocks.0.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.0.blocks.1.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.0.downsample.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.1.blocks.0.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.1.blocks.1.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.1.downsample.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.0.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.1.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.10.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.11.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.12.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.13.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.14.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.15.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.16.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.17.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.2.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.3.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.4.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.5.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.6.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.7.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.8.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.9.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.downsample.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.3.blocks.0.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.3.blocks.1.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'level_embed':
            dict(decay_mult=0.0, lr_mult=1.0),
            'query_embed':
            dict(decay_mult=0.0, lr_mult=1.0),
            'query_feat':
            dict(decay_mult=0.0, lr_mult=1.0),
            'relative_position_bias_table':
            dict(decay_mult=0.0, lr_mult=0.1)
        }),
        norm_decay_mult=0.0),
    type='OptimWrapper')
optimizer = dict(
    betas=(
        0.9,
        0.999,
    ),
    eps=1e-08,
    lr=0.0001,
    type='AdamW',
    weight_decay=0.05)
param_scheduler = [
    dict(
        begin=0,
        by_epoch=False,
        end=160000,
        eta_min=0,
        power=0.9,
        type='PolyLR'),
]
pretrained = 'https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/swin/swin_base_patch4_window12_384_20220317-55b0104a.pth'
resume = False
test_cfg = dict(type='TestLoop')
test_dataloader = dict(
    batch_size=1,
    dataset=dict(
        data_prefix=dict(
            img_path='images/validation',
            seg_map_path='annotations/validation'),
        data_root='data/ade/ADEChallengeData2016',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(keep_ratio=True, scale=(
                2560,
                640,
            ), type='Resize'),
            dict(reduce_zero_label=True, type='LoadAnnotations'),
            dict(type='PackSegInputs'),
        ],
        type='ADE20KDataset'),
    num_workers=4,
    persistent_workers=True,
    sampler=dict(shuffle=False, type='DefaultSampler'))
test_evaluator = dict(
    iou_metrics=[
        'mIoU',
    ], type='IoUMetric')
test_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(keep_ratio=True, scale=(
        2560,
        640,
    ), type='Resize'),
    dict(reduce_zero_label=True, type='LoadAnnotations'),
    dict(type='PackSegInputs'),
]
train_cfg = dict(
    max_iters=160000, type='IterBasedTrainLoop', val_interval=5000)
train_dataloader = dict(
    batch_size=2,
    dataset=dict(
        data_prefix=dict(
            img_path='images/training', seg_map_path='annotations/training'),
        data_root='data/ade/ADEChallengeData2016',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(reduce_zero_label=True, type='LoadAnnotations'),
            dict(
                max_size=2560,
                resize_type='ResizeShortestEdge',
                scales=[
                    320,
                    384,
                    448,
                    512,
                    576,
                    640,
                    704,
                    768,
                    832,
                    896,
                    960,
                    1024,
                    1088,
                    1152,
                    1216,
                    1280,
                ],
                type='RandomChoiceResize'),
            dict(
                cat_max_ratio=0.75, crop_size=(
                    512,
                    512,
                ), type='RandomCrop'),
            dict(prob=0.5, type='RandomFlip'),
            dict(type='PhotoMetricDistortion'),
            dict(type='PackSegInputs'),
        ],
        type='ADE20KDataset'),
    num_workers=4,
    persistent_workers=True,
    sampler=dict(shuffle=True, type='InfiniteSampler'))
train_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(reduce_zero_label=True, type='LoadAnnotations'),
    dict(
        max_size=2560,
        resize_type='ResizeShortestEdge',
        scales=[
            320,
            384,
            448,
            512,
            576,
            640,
            704,
            768,
            832,
            896,
            960,
            1024,
            1088,
            1152,
            1216,
            1280,
        ],
        type='RandomChoiceResize'),
    dict(cat_max_ratio=0.75, crop_size=(
        512,
        512,
    ), type='RandomCrop'),
    dict(prob=0.5, type='RandomFlip'),
    dict(type='PhotoMetricDistortion'),
    dict(type='PackSegInputs'),
]
tta_model = dict(type='SegTTAModel')
tta_pipeline = [
    dict(backend_args=None, type='LoadImageFromFile'),
    dict(
        transforms=[
            [
                dict(keep_ratio=True, scale_factor=0.5, type='Resize'),
                dict(keep_ratio=True, scale_factor=0.75, type='Resize'),
                dict(keep_ratio=True, scale_factor=1.0, type='Resize'),
                dict(keep_ratio=True, scale_factor=1.25, type='Resize'),
                dict(keep_ratio=True, scale_factor=1.5, type='Resize'),
                dict(keep_ratio=True, scale_factor=1.75, type='Resize'),
            ],
            [
                dict(direction='horizontal', prob=0.0, type='RandomFlip'),
                dict(direction='horizontal', prob=1.0, type='RandomFlip'),
            ],
            [
                dict(type='LoadAnnotations'),
            ],
            [
                dict(type='PackSegInputs'),
            ],
        ],
        type='TestTimeAug'),
]
val_cfg = dict(type='ValLoop')
val_dataloader = dict(
    batch_size=1,
    dataset=dict(
        data_prefix=dict(
            img_path='images/validation',
            seg_map_path='annotations/validation'),
        data_root='data/ade/ADEChallengeData2016',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(keep_ratio=True, scale=(
                2560,
                640,
            ), type='Resize'),
            dict(reduce_zero_label=True, type='LoadAnnotations'),
            dict(type='PackSegInputs'),
        ],
        type='ADE20KDataset'),
    num_workers=4,
    persistent_workers=True,
    sampler=dict(shuffle=False, type='DefaultSampler'))
val_evaluator = dict(
    iou_metrics=[
        'mIoU',
    ], type='IoUMetric')
vis_backends = [
    dict(type='LocalVisBackend'),
]
visualizer = dict(
    name='visualizer',
    type='SegLocalVisualizer',
    vis_backends=[
        dict(type='LocalVisBackend'),
    ])
work_dir = '../corruptions/work_dirs/ade20k/mask2former/mask2former_swin-b-in1k-384x384-pre_8xb2-160k_ade20k-512x512/impulse_noise'

/pfs/work7/workspace/scratch/ma_mkacar-team_project_fss2024/benchmarking_robustness/semantic_segmentation/mmsegmentation/mmseg/ops_dcnv3/modules/dcnv3.py:20: UserWarning: Now, we support DCNv4 in InternImage.
  warnings.warn('Now, we support DCNv4 in InternImage.')
10/06 01:28:00 - mmengine - INFO - Distributed training is not used, all SyncBatchNorm (SyncBN) layers in the model will be automatically reverted to BatchNormXd layers if they are used.
10/06 01:28:00 - mmengine - INFO - Hooks will be executed in the following order:
before_run:
(VERY_HIGH   ) RuntimeInfoHook                    
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
before_train:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_train_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(NORMAL      ) DistSamplerSeedHook                
 -------------------- 
before_train_iter:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_train_iter:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(NORMAL      ) SegVisualizationHook               
(BELOW_NORMAL) LoggerHook                         
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
after_train_epoch:
(NORMAL      ) IterTimerHook                      
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_val:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
before_val_epoch:
(NORMAL      ) IterTimerHook                      
 -------------------- 
before_val_iter:
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_val_iter:
(NORMAL      ) IterTimerHook                      
(NORMAL      ) SegVisualizationHook               
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_val_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
after_val:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
after_train:
(VERY_HIGH   ) RuntimeInfoHook                    
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_test:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
before_test_epoch:
(NORMAL      ) IterTimerHook                      
 -------------------- 
before_test_iter:
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_test_iter:
(NORMAL      ) IterTimerHook                      
(NORMAL      ) SegVisualizationHook               
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_test_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_test:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
after_run:
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
10/06 01:28:01 - mmengine - WARNING - The prefix is not set in metric class IoUMetric.
Loads checkpoint by local backend from path: ../checkpoint_files/ade20k/mask2former/best_mIoU_iter_155000.pth
10/06 01:28:02 - mmengine - INFO - Load checkpoint from ../checkpoint_files/ade20k/mask2former/best_mIoU_iter_155000.pth
10/06 01:28:33 - mmengine - INFO - Iter(test) [  50/2000]    eta: 0:20:18  time: 0.4156  data_time: 0.0020  memory: 17181  
10/06 01:28:53 - mmengine - INFO - Iter(test) [ 100/2000]    eta: 0:16:12  time: 0.3970  data_time: 0.0037  memory: 17180  
10/06 01:29:09 - mmengine - INFO - Iter(test) [ 150/2000]    eta: 0:13:40  time: 0.3072  data_time: 0.0019  memory: 17150  
10/06 01:29:24 - mmengine - INFO - Iter(test) [ 200/2000]    eta: 0:12:16  time: 0.3593  data_time: 0.0019  memory: 17194  
10/06 01:29:42 - mmengine - INFO - Iter(test) [ 250/2000]    eta: 0:11:36  time: 0.2590  data_time: 0.0018  memory: 17202  
10/06 01:29:57 - mmengine - INFO - Iter(test) [ 300/2000]    eta: 0:10:49  time: 0.1674  data_time: 0.0020  memory: 17180  
10/06 01:30:12 - mmengine - INFO - Iter(test) [ 350/2000]    eta: 0:10:13  time: 0.3000  data_time: 0.0026  memory: 17178  
10/06 01:30:23 - mmengine - INFO - Iter(test) [ 400/2000]    eta: 0:09:25  time: 0.1779  data_time: 0.0018  memory: 17177  
10/06 01:30:33 - mmengine - INFO - Iter(test) [ 450/2000]    eta: 0:08:38  time: 0.2062  data_time: 0.0017  memory: 17147  
10/06 01:30:43 - mmengine - INFO - Iter(test) [ 500/2000]    eta: 0:08:03  time: 0.2392  data_time: 0.0018  memory: 17149  
10/06 01:30:54 - mmengine - INFO - Iter(test) [ 550/2000]    eta: 0:07:32  time: 0.2681  data_time: 0.0019  memory: 17179  
10/06 01:31:02 - mmengine - INFO - Iter(test) [ 600/2000]    eta: 0:06:59  time: 0.1669  data_time: 0.0020  memory: 3938  
10/06 01:31:14 - mmengine - INFO - Iter(test) [ 650/2000]    eta: 0:06:37  time: 0.2871  data_time: 0.0017  memory: 17181  
10/06 01:31:27 - mmengine - INFO - Iter(test) [ 700/2000]    eta: 0:06:21  time: 0.2280  data_time: 0.0019  memory: 17177  
10/06 01:31:41 - mmengine - INFO - Iter(test) [ 750/2000]    eta: 0:06:04  time: 0.5848  data_time: 0.0017  memory: 17184  
10/06 01:31:50 - mmengine - INFO - Iter(test) [ 800/2000]    eta: 0:05:41  time: 0.1663  data_time: 0.0032  memory: 17151  
10/06 01:31:58 - mmengine - INFO - Iter(test) [ 850/2000]    eta: 0:05:19  time: 0.1615  data_time: 0.0019  memory: 1428  
10/06 01:32:07 - mmengine - INFO - Iter(test) [ 900/2000]    eta: 0:04:59  time: 0.2035  data_time: 0.0017  memory: 17138  
10/06 01:32:20 - mmengine - INFO - Iter(test) [ 950/2000]    eta: 0:04:44  time: 0.3147  data_time: 0.0019  memory: 17133  
10/06 01:32:29 - mmengine - INFO - Iter(test) [1000/2000]    eta: 0:04:26  time: 0.1555  data_time: 0.0019  memory: 17096  
10/06 01:32:38 - mmengine - INFO - Iter(test) [1050/2000]    eta: 0:04:09  time: 0.2433  data_time: 0.0018  memory: 17182  
10/06 01:32:49 - mmengine - INFO - Iter(test) [1100/2000]    eta: 0:03:54  time: 0.1562  data_time: 0.0018  memory: 17175  
10/06 01:32:58 - mmengine - INFO - Iter(test) [1150/2000]    eta: 0:03:38  time: 0.1627  data_time: 0.0018  memory: 17117  
10/06 01:33:06 - mmengine - INFO - Iter(test) [1200/2000]    eta: 0:03:22  time: 0.1547  data_time: 0.0018  memory: 17113  
10/06 01:33:17 - mmengine - INFO - Iter(test) [1250/2000]    eta: 0:03:08  time: 0.2362  data_time: 0.0017  memory: 17172  
10/06 01:33:24 - mmengine - INFO - Iter(test) [1300/2000]    eta: 0:02:53  time: 0.1594  data_time: 0.0017  memory: 1430  
10/06 01:33:34 - mmengine - INFO - Iter(test) [1350/2000]    eta: 0:02:39  time: 0.1476  data_time: 0.0018  memory: 17110  
10/06 01:33:45 - mmengine - INFO - Iter(test) [1400/2000]    eta: 0:02:26  time: 0.1794  data_time: 0.0018  memory: 17154  
10/06 01:33:54 - mmengine - INFO - Iter(test) [1450/2000]    eta: 0:02:13  time: 0.2260  data_time: 0.0017  memory: 17130  
10/06 01:34:02 - mmengine - INFO - Iter(test) [1500/2000]    eta: 0:01:59  time: 0.1529  data_time: 0.0017  memory: 17125  
10/06 01:34:11 - mmengine - INFO - Iter(test) [1550/2000]    eta: 0:01:47  time: 0.1631  data_time: 0.0018  memory: 17154  
10/06 01:34:19 - mmengine - INFO - Iter(test) [1600/2000]    eta: 0:01:34  time: 0.1631  data_time: 0.0020  memory: 1425  
10/06 01:34:29 - mmengine - INFO - Iter(test) [1650/2000]    eta: 0:01:22  time: 0.2140  data_time: 0.0016  memory: 17192  
10/06 01:34:43 - mmengine - INFO - Iter(test) [1700/2000]    eta: 0:01:10  time: 0.1601  data_time: 0.0019  memory: 17151  
10/06 01:34:52 - mmengine - INFO - Iter(test) [1750/2000]    eta: 0:00:58  time: 0.1529  data_time: 0.0017  memory: 17111  
10/06 01:35:01 - mmengine - INFO - Iter(test) [1800/2000]    eta: 0:00:46  time: 0.1679  data_time: 0.0045  memory: 17114  
10/06 01:35:09 - mmengine - INFO - Iter(test) [1850/2000]    eta: 0:00:34  time: 0.1612  data_time: 0.0019  memory: 1317  
10/06 01:35:17 - mmengine - INFO - Iter(test) [1900/2000]    eta: 0:00:22  time: 0.2183  data_time: 0.0017  memory: 17182  
10/06 01:35:26 - mmengine - INFO - Iter(test) [1950/2000]    eta: 0:00:11  time: 0.1527  data_time: 0.0016  memory: 17197  
10/06 01:35:36 - mmengine - INFO - Iter(test) [2000/2000]    eta: 0:00:00  time: 0.1385  data_time: 0.0015  memory: 17131  
10/06 01:35:36 - mmengine - INFO - per class results:
10/06 01:35:36 - mmengine - INFO - 
+---------------------+-------+-------+
|        Class        |  IoU  |  Acc  |
+---------------------+-------+-------+
|         wall        | 73.36 | 87.16 |
|       building      | 80.37 | 91.56 |
|         sky         | 93.37 | 96.37 |
|        floor        | 77.52 | 87.79 |
|         tree        | 74.32 | 88.15 |
|       ceiling       | 77.88 | 83.27 |
|         road        | 81.09 | 89.43 |
|         bed         | 85.41 | 93.36 |
|      windowpane     | 58.95 | 76.79 |
|        grass        | 60.06 | 72.69 |
|       cabinet       | 55.51 | 73.87 |
|       sidewalk      | 59.34 | 74.12 |
|        person       |  79.7 | 87.84 |
|        earth        | 34.66 |  48.5 |
|         door        | 35.45 | 45.07 |
|        table        | 50.31 | 65.42 |
|       mountain      | 54.62 | 75.22 |
|        plant        | 51.36 | 60.85 |
|       curtain       | 68.32 | 79.87 |
|        chair        | 50.36 | 60.95 |
|         car         | 84.04 | 90.87 |
|        water        | 52.41 | 72.11 |
|       painting      | 68.69 | 81.94 |
|         sofa        | 63.06 | 81.57 |
|        shelf        | 39.85 | 59.37 |
|        house        | 49.52 | 58.95 |
|         sea         | 55.42 | 72.85 |
|        mirror       | 60.77 | 76.05 |
|         rug         | 54.27 | 59.42 |
|        field        | 27.48 | 68.29 |
|       armchair      | 32.44 | 53.78 |
|         seat        | 52.32 | 65.35 |
|        fence        | 41.27 | 59.91 |
|         desk        | 32.95 | 58.83 |
|         rock        | 43.07 | 66.48 |
|       wardrobe      | 52.51 |  69.8 |
|         lamp        | 58.71 | 70.97 |
|       bathtub       | 62.61 | 74.57 |
|       railing       | 36.13 | 51.89 |
|       cushion       | 50.76 | 64.92 |
|         base        | 28.82 | 45.55 |
|         box         | 22.34 | 34.14 |
|        column       | 44.41 | 52.56 |
|      signboard      |  39.2 | 49.41 |
|   chest of drawers  |  38.1 | 59.01 |
|       counter       | 26.26 | 33.81 |
|         sand        | 40.61 |  46.2 |
|         sink        | 68.29 | 76.87 |
|      skyscraper     | 48.08 | 59.73 |
|      fireplace      | 62.33 | 82.29 |
|     refrigerator    | 62.42 | 68.59 |
|      grandstand     | 44.63 | 74.58 |
|         path        | 17.14 |  23.7 |
|        stairs       | 29.55 | 34.22 |
|        runway       | 61.67 | 91.14 |
|         case        | 61.06 | 84.03 |
|      pool table     | 90.33 | 94.99 |
|        pillow       | 52.02 | 66.26 |
|     screen door     | 73.14 | 80.62 |
|       stairway      | 31.84 | 43.71 |
|        river        | 16.76 |  21.4 |
|        bridge       | 55.53 | 69.74 |
|       bookcase      | 29.63 | 49.56 |
|        blind        | 36.29 | 41.72 |
|     coffee table    | 55.49 |  76.5 |
|        toilet       | 81.36 | 87.91 |
|        flower       | 33.61 | 49.48 |
|         book        | 47.76 | 67.18 |
|         hill        |  6.98 | 14.27 |
|        bench        | 49.31 | 66.36 |
|      countertop     | 52.58 | 66.93 |
|        stove        | 69.15 | 81.84 |
|         palm        | 52.59 | 62.53 |
|    kitchen island   | 34.24 | 65.22 |
|       computer      |  54.0 | 63.08 |
|     swivel chair    | 36.24 | 59.71 |
|         boat        |  47.8 | 51.83 |
|         bar         | 50.95 | 59.78 |
|    arcade machine   | 30.45 | 34.26 |
|        hovel        | 32.72 | 50.08 |
|         bus         | 86.23 | 96.06 |
|        towel        | 63.02 | 69.23 |
|        light        | 52.69 | 63.33 |
|        truck        |  32.3 | 51.69 |
|        tower        | 28.71 | 54.87 |
|      chandelier     | 61.59 | 77.06 |
|        awning       | 27.29 | 33.85 |
|     streetlight     | 28.73 | 37.95 |
|        booth        | 21.77 | 27.59 |
| television receiver | 67.63 | 75.63 |
|       airplane      | 62.08 |  68.9 |
|      dirt track     |  0.03 |  0.03 |
|       apparel       | 35.65 | 55.56 |
|         pole        | 29.34 | 49.47 |
|         land        |  0.15 |  0.16 |
|      bannister      |  8.71 |  11.7 |
|      escalator      | 21.25 | 22.26 |
|       ottoman       | 42.43 | 60.71 |
|        bottle       | 19.22 | 24.84 |
|        buffet       | 38.13 |  48.7 |
|        poster       | 19.67 | 21.98 |
|        stage        | 10.15 | 17.28 |
|         van         | 46.73 | 67.09 |
|         ship        | 19.12 | 28.37 |
|       fountain      | 29.04 | 29.85 |
|    conveyer belt    | 49.57 | 64.47 |
|        canopy       | 20.05 | 33.25 |
|        washer       | 68.48 | 69.44 |
|      plaything      | 24.58 | 44.32 |
|    swimming pool    | 23.68 | 45.11 |
|        stool        | 34.35 | 50.75 |
|        barrel       | 33.37 | 41.61 |
|        basket       | 29.46 | 40.42 |
|      waterfall      | 64.42 |  87.9 |
|         tent        | 92.18 | 97.85 |
|         bag         | 13.17 | 18.25 |
|       minibike      | 67.65 | 84.88 |
|        cradle       | 69.85 | 95.69 |
|         oven        | 16.53 | 45.78 |
|         ball        | 28.54 | 37.43 |
|         food        | 64.02 | 80.27 |
|         step        |  4.48 |  4.86 |
|         tank        | 27.99 | 34.22 |
|      trade name     | 29.02 | 39.34 |
|      microwave      | 40.56 | 44.61 |
|         pot         | 43.81 | 52.52 |
|        animal       | 65.89 | 70.66 |
|       bicycle       | 52.61 | 73.97 |
|         lake        |  0.0  |  0.0  |
|      dishwasher     | 54.27 | 63.51 |
|        screen       | 65.42 | 85.69 |
|       blanket       |  4.7  |  5.52 |
|      sculpture      | 40.09 | 60.58 |
|         hood        | 49.27 |  53.6 |
|        sconce       | 33.28 | 41.58 |
|         vase        | 34.52 |  53.1 |
|    traffic light    | 32.17 | 50.67 |
|         tray        |  5.07 |  6.84 |
|        ashcan       | 30.48 | 42.25 |
|         fan         | 56.56 | 79.16 |
|         pier        | 39.62 | 59.76 |
|      crt screen     |  3.14 | 10.81 |
|        plate        | 54.32 | 69.94 |
|       monitor       |  2.48 |  3.34 |
|    bulletin board   | 42.66 | 48.91 |
|        shower       | 10.48 | 15.05 |
|       radiator      | 50.22 | 55.85 |
|        glass        | 15.13 | 18.01 |
|        clock        | 27.43 | 40.27 |
|         flag        |  34.8 | 39.66 |
+---------------------+-------+-------+
10/06 01:35:36 - mmengine - INFO - Iter(test) [2000/2000]    aAcc: 80.3800  mIoU: 44.2500  mAcc: 56.6200  data_time: 0.0021  time: 0.2267
Finished processing corruption type: impulse_noise
Processing corruption type: defocus_blur
10/06 01:35:39 - mmengine - INFO - 
------------------------------------------------------------
System environment:
    sys.platform: linux
    Python: 3.10.13 | packaged by conda-forge | (main, Dec 23 2023, 15:36:39) [GCC 12.3.0]
    CUDA available: True
    MUSA available: False
    numpy_random_seed: 1329499607
    GPU 0: Tesla V100-SXM2-32GB
    CUDA_HOME: /opt/bwhpc/common/devel/cuda/11.7
    NVCC: Cuda compilation tools, release 11.7, V11.7.99
    GCC: gcc (GCC) 8.5.0 20210514 (Red Hat 8.5.0-18)
    PyTorch: 1.13.1
    PyTorch compiling details: PyTorch built with:
  - GCC 9.3
  - C++ Version: 201402
  - Intel(R) oneAPI Math Kernel Library Version 2023.1-Product Build 20230303 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v2.6.0 (Git Hash 52b5f107dd9cf10910aaa19cb47f3abf9b349815)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - LAPACK is enabled (usually provided by MKL)
  - NNPACK is enabled
  - CPU capability usage: AVX2
  - CUDA Runtime 11.7
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_61,code=sm_61;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86;-gencode;arch=compute_37,code=compute_37
  - CuDNN 8.5
  - Magma 2.6.1
  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.7, CUDNN_VERSION=8.5.0, CXX_COMPILER=/opt/rh/devtoolset-9/root/usr/bin/c++, CXX_FLAGS= -fabi-version=11 -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -DEDGE_PROFILER_USE_KINETO -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Werror=non-virtual-dtor -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wunused-local-typedefs -Wno-unused-parameter -Wno-unused-function -Wno-unused-result -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Werror=cast-function-type -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.13.1, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, USE_ROCM=OFF, 

    TorchVision: 0.14.1
    OpenCV: 3.4.18
    MMEngine: 0.10.4

Runtime environment:
    cudnn_benchmark: True
    mp_cfg: {'mp_start_method': 'fork', 'opencv_num_threads': 0}
    dist_cfg: {'backend': 'nccl'}
    seed: 1329499607
    Distributed launcher: none
    Distributed training: False
    GPU number: 1
------------------------------------------------------------

10/06 01:35:40 - mmengine - INFO - Config:
auto_scale_lr = dict(base_batch_size=16, enable=False)
backbone_embed_multi = dict(decay_mult=0.0, lr_mult=0.1)
backbone_norm_multi = dict(decay_mult=0.0, lr_mult=0.1)
crop_size = (
    512,
    512,
)
custom_keys = dict({
    'absolute_pos_embed':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone':
    dict(decay_mult=1.0, lr_mult=0.1),
    'backbone.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.patch_embed.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.0.blocks.0.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.0.blocks.1.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.0.downsample.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.1.blocks.0.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.1.blocks.1.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.1.downsample.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.0.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.1.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.10.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.11.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.12.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.13.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.14.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.15.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.16.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.17.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.2.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.3.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.4.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.5.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.6.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.7.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.8.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.9.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.downsample.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.3.blocks.0.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.3.blocks.1.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'level_embed':
    dict(decay_mult=0.0, lr_mult=1.0),
    'query_embed':
    dict(decay_mult=0.0, lr_mult=1.0),
    'query_feat':
    dict(decay_mult=0.0, lr_mult=1.0),
    'relative_position_bias_table':
    dict(decay_mult=0.0, lr_mult=0.1)
})
data_root = 'data/ade/ADEChallengeData2016'
dataset_type = 'ADE20KDataset'
default_hooks = dict(
    checkpoint=dict(
        by_epoch=False, interval=5000, save_best='mIoU',
        type='CheckpointHook'),
    logger=dict(interval=50, log_metric_by_epoch=False, type='LoggerHook'),
    param_scheduler=dict(type='ParamSchedulerHook'),
    sampler_seed=dict(type='DistSamplerSeedHook'),
    timer=dict(type='IterTimerHook'),
    visualization=dict(type='SegVisualizationHook'))
default_scope = 'mmseg'
depths = [
    2,
    2,
    18,
    2,
]
embed_multi = dict(decay_mult=0.0, lr_mult=1.0)
env_cfg = dict(
    cudnn_benchmark=True,
    dist_cfg=dict(backend='nccl'),
    mp_cfg=dict(mp_start_method='fork', opencv_num_threads=0))
img_ratios = [
    0.5,
    0.75,
    1.0,
    1.25,
    1.5,
    1.75,
]
launcher = 'none'
load_from = '../checkpoint_files/ade20k/mask2former/best_mIoU_iter_155000.pth'
log_level = 'INFO'
log_processor = dict(by_epoch=False)
model = dict(
    backbone=dict(
        attn_drop_rate=0.0,
        depths=[
            2,
            2,
            18,
            2,
        ],
        drop_path_rate=0.3,
        drop_rate=0.0,
        embed_dims=128,
        frozen_stages=-1,
        init_cfg=dict(
            checkpoint=
            'https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/swin/swin_base_patch4_window12_384_20220317-55b0104a.pth',
            type='Pretrained'),
        mlp_ratio=4,
        num_heads=[
            4,
            8,
            16,
            32,
        ],
        out_indices=(
            0,
            1,
            2,
            3,
        ),
        patch_norm=True,
        pretrain_img_size=384,
        qk_scale=None,
        qkv_bias=True,
        type='SwinTransformer',
        window_size=12,
        with_cp=False),
    data_preprocessor=dict(
        bgr_to_rgb=True,
        corruption='defocus_blur',
        mean=[
            123.675,
            116.28,
            103.53,
        ],
        pad_val=0,
        seg_pad_val=255,
        size=(
            512,
            512,
        ),
        std=[
            58.395,
            57.12,
            57.375,
        ],
        type='SegDataPreProcessor'),
    decode_head=dict(
        align_corners=False,
        enforce_decoder_input_project=False,
        feat_channels=256,
        in_channels=[
            128,
            256,
            512,
            1024,
        ],
        loss_cls=dict(
            class_weight=[
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                0.1,
            ],
            loss_weight=2.0,
            reduction='mean',
            type='mmdet.CrossEntropyLoss',
            use_sigmoid=False),
        loss_dice=dict(
            activate=True,
            eps=1.0,
            loss_weight=5.0,
            naive_dice=True,
            reduction='mean',
            type='mmdet.DiceLoss',
            use_sigmoid=True),
        loss_mask=dict(
            loss_weight=5.0,
            reduction='mean',
            type='mmdet.CrossEntropyLoss',
            use_sigmoid=True),
        num_classes=150,
        num_queries=100,
        num_transformer_feat_level=3,
        out_channels=256,
        pixel_decoder=dict(
            act_cfg=dict(type='ReLU'),
            encoder=dict(
                init_cfg=None,
                layer_cfg=dict(
                    ffn_cfg=dict(
                        act_cfg=dict(inplace=True, type='ReLU'),
                        embed_dims=256,
                        feedforward_channels=1024,
                        ffn_drop=0.0,
                        num_fcs=2),
                    self_attn_cfg=dict(
                        batch_first=True,
                        dropout=0.0,
                        embed_dims=256,
                        im2col_step=64,
                        init_cfg=None,
                        norm_cfg=None,
                        num_heads=8,
                        num_levels=3,
                        num_points=4)),
                num_layers=6),
            init_cfg=None,
            norm_cfg=dict(num_groups=32, type='GN'),
            num_outs=3,
            positional_encoding=dict(normalize=True, num_feats=128),
            type='mmdet.MSDeformAttnPixelDecoder'),
        positional_encoding=dict(normalize=True, num_feats=128),
        strides=[
            4,
            8,
            16,
            32,
        ],
        train_cfg=dict(
            assigner=dict(
                match_costs=[
                    dict(type='mmdet.ClassificationCost', weight=2.0),
                    dict(
                        type='mmdet.CrossEntropyLossCost',
                        use_sigmoid=True,
                        weight=5.0),
                    dict(
                        eps=1.0,
                        pred_act=True,
                        type='mmdet.DiceCost',
                        weight=5.0),
                ],
                type='mmdet.HungarianAssigner'),
            importance_sample_ratio=0.75,
            num_points=12544,
            oversample_ratio=3.0,
            sampler=dict(type='mmdet.MaskPseudoSampler')),
        transformer_decoder=dict(
            init_cfg=None,
            layer_cfg=dict(
                cross_attn_cfg=dict(
                    attn_drop=0.0,
                    batch_first=True,
                    dropout_layer=None,
                    embed_dims=256,
                    num_heads=8,
                    proj_drop=0.0),
                ffn_cfg=dict(
                    act_cfg=dict(inplace=True, type='ReLU'),
                    add_identity=True,
                    dropout_layer=None,
                    embed_dims=256,
                    feedforward_channels=2048,
                    ffn_drop=0.0,
                    num_fcs=2),
                self_attn_cfg=dict(
                    attn_drop=0.0,
                    batch_first=True,
                    dropout_layer=None,
                    embed_dims=256,
                    num_heads=8,
                    proj_drop=0.0)),
            num_layers=9,
            return_intermediate=True),
        type='Mask2FormerHead'),
    test_cfg=dict(mode='whole'),
    train_cfg=dict(),
    type='EncoderDecoder')
num_classes = 150
optim_wrapper = dict(
    clip_grad=dict(max_norm=0.01, norm_type=2),
    optimizer=dict(
        betas=(
            0.9,
            0.999,
        ),
        eps=1e-08,
        lr=0.0001,
        type='AdamW',
        weight_decay=0.05),
    paramwise_cfg=dict(
        custom_keys=dict({
            'absolute_pos_embed':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone':
            dict(decay_mult=1.0, lr_mult=0.1),
            'backbone.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.patch_embed.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.0.blocks.0.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.0.blocks.1.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.0.downsample.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.1.blocks.0.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.1.blocks.1.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.1.downsample.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.0.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.1.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.10.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.11.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.12.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.13.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.14.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.15.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.16.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.17.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.2.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.3.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.4.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.5.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.6.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.7.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.8.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.9.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.downsample.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.3.blocks.0.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.3.blocks.1.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'level_embed':
            dict(decay_mult=0.0, lr_mult=1.0),
            'query_embed':
            dict(decay_mult=0.0, lr_mult=1.0),
            'query_feat':
            dict(decay_mult=0.0, lr_mult=1.0),
            'relative_position_bias_table':
            dict(decay_mult=0.0, lr_mult=0.1)
        }),
        norm_decay_mult=0.0),
    type='OptimWrapper')
optimizer = dict(
    betas=(
        0.9,
        0.999,
    ),
    eps=1e-08,
    lr=0.0001,
    type='AdamW',
    weight_decay=0.05)
param_scheduler = [
    dict(
        begin=0,
        by_epoch=False,
        end=160000,
        eta_min=0,
        power=0.9,
        type='PolyLR'),
]
pretrained = 'https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/swin/swin_base_patch4_window12_384_20220317-55b0104a.pth'
resume = False
test_cfg = dict(type='TestLoop')
test_dataloader = dict(
    batch_size=1,
    dataset=dict(
        data_prefix=dict(
            img_path='images/validation',
            seg_map_path='annotations/validation'),
        data_root='data/ade/ADEChallengeData2016',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(keep_ratio=True, scale=(
                2560,
                640,
            ), type='Resize'),
            dict(reduce_zero_label=True, type='LoadAnnotations'),
            dict(type='PackSegInputs'),
        ],
        type='ADE20KDataset'),
    num_workers=4,
    persistent_workers=True,
    sampler=dict(shuffle=False, type='DefaultSampler'))
test_evaluator = dict(
    iou_metrics=[
        'mIoU',
    ], type='IoUMetric')
test_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(keep_ratio=True, scale=(
        2560,
        640,
    ), type='Resize'),
    dict(reduce_zero_label=True, type='LoadAnnotations'),
    dict(type='PackSegInputs'),
]
train_cfg = dict(
    max_iters=160000, type='IterBasedTrainLoop', val_interval=5000)
train_dataloader = dict(
    batch_size=2,
    dataset=dict(
        data_prefix=dict(
            img_path='images/training', seg_map_path='annotations/training'),
        data_root='data/ade/ADEChallengeData2016',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(reduce_zero_label=True, type='LoadAnnotations'),
            dict(
                max_size=2560,
                resize_type='ResizeShortestEdge',
                scales=[
                    320,
                    384,
                    448,
                    512,
                    576,
                    640,
                    704,
                    768,
                    832,
                    896,
                    960,
                    1024,
                    1088,
                    1152,
                    1216,
                    1280,
                ],
                type='RandomChoiceResize'),
            dict(
                cat_max_ratio=0.75, crop_size=(
                    512,
                    512,
                ), type='RandomCrop'),
            dict(prob=0.5, type='RandomFlip'),
            dict(type='PhotoMetricDistortion'),
            dict(type='PackSegInputs'),
        ],
        type='ADE20KDataset'),
    num_workers=4,
    persistent_workers=True,
    sampler=dict(shuffle=True, type='InfiniteSampler'))
train_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(reduce_zero_label=True, type='LoadAnnotations'),
    dict(
        max_size=2560,
        resize_type='ResizeShortestEdge',
        scales=[
            320,
            384,
            448,
            512,
            576,
            640,
            704,
            768,
            832,
            896,
            960,
            1024,
            1088,
            1152,
            1216,
            1280,
        ],
        type='RandomChoiceResize'),
    dict(cat_max_ratio=0.75, crop_size=(
        512,
        512,
    ), type='RandomCrop'),
    dict(prob=0.5, type='RandomFlip'),
    dict(type='PhotoMetricDistortion'),
    dict(type='PackSegInputs'),
]
tta_model = dict(type='SegTTAModel')
tta_pipeline = [
    dict(backend_args=None, type='LoadImageFromFile'),
    dict(
        transforms=[
            [
                dict(keep_ratio=True, scale_factor=0.5, type='Resize'),
                dict(keep_ratio=True, scale_factor=0.75, type='Resize'),
                dict(keep_ratio=True, scale_factor=1.0, type='Resize'),
                dict(keep_ratio=True, scale_factor=1.25, type='Resize'),
                dict(keep_ratio=True, scale_factor=1.5, type='Resize'),
                dict(keep_ratio=True, scale_factor=1.75, type='Resize'),
            ],
            [
                dict(direction='horizontal', prob=0.0, type='RandomFlip'),
                dict(direction='horizontal', prob=1.0, type='RandomFlip'),
            ],
            [
                dict(type='LoadAnnotations'),
            ],
            [
                dict(type='PackSegInputs'),
            ],
        ],
        type='TestTimeAug'),
]
val_cfg = dict(type='ValLoop')
val_dataloader = dict(
    batch_size=1,
    dataset=dict(
        data_prefix=dict(
            img_path='images/validation',
            seg_map_path='annotations/validation'),
        data_root='data/ade/ADEChallengeData2016',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(keep_ratio=True, scale=(
                2560,
                640,
            ), type='Resize'),
            dict(reduce_zero_label=True, type='LoadAnnotations'),
            dict(type='PackSegInputs'),
        ],
        type='ADE20KDataset'),
    num_workers=4,
    persistent_workers=True,
    sampler=dict(shuffle=False, type='DefaultSampler'))
val_evaluator = dict(
    iou_metrics=[
        'mIoU',
    ], type='IoUMetric')
vis_backends = [
    dict(type='LocalVisBackend'),
]
visualizer = dict(
    name='visualizer',
    type='SegLocalVisualizer',
    vis_backends=[
        dict(type='LocalVisBackend'),
    ])
work_dir = '../corruptions/work_dirs/ade20k/mask2former/mask2former_swin-b-in1k-384x384-pre_8xb2-160k_ade20k-512x512/defocus_blur'

/pfs/work7/workspace/scratch/ma_mkacar-team_project_fss2024/benchmarking_robustness/semantic_segmentation/mmsegmentation/mmseg/ops_dcnv3/modules/dcnv3.py:20: UserWarning: Now, we support DCNv4 in InternImage.
  warnings.warn('Now, we support DCNv4 in InternImage.')
10/06 01:35:44 - mmengine - INFO - Distributed training is not used, all SyncBatchNorm (SyncBN) layers in the model will be automatically reverted to BatchNormXd layers if they are used.
10/06 01:35:44 - mmengine - INFO - Hooks will be executed in the following order:
before_run:
(VERY_HIGH   ) RuntimeInfoHook                    
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
before_train:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_train_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(NORMAL      ) DistSamplerSeedHook                
 -------------------- 
before_train_iter:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_train_iter:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(NORMAL      ) SegVisualizationHook               
(BELOW_NORMAL) LoggerHook                         
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
after_train_epoch:
(NORMAL      ) IterTimerHook                      
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_val:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
before_val_epoch:
(NORMAL      ) IterTimerHook                      
 -------------------- 
before_val_iter:
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_val_iter:
(NORMAL      ) IterTimerHook                      
(NORMAL      ) SegVisualizationHook               
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_val_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
after_val:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
after_train:
(VERY_HIGH   ) RuntimeInfoHook                    
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_test:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
before_test_epoch:
(NORMAL      ) IterTimerHook                      
 -------------------- 
before_test_iter:
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_test_iter:
(NORMAL      ) IterTimerHook                      
(NORMAL      ) SegVisualizationHook               
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_test_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_test:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
after_run:
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
10/06 01:35:45 - mmengine - WARNING - The prefix is not set in metric class IoUMetric.
Loads checkpoint by local backend from path: ../checkpoint_files/ade20k/mask2former/best_mIoU_iter_155000.pth
10/06 01:35:46 - mmengine - INFO - Load checkpoint from ../checkpoint_files/ade20k/mask2former/best_mIoU_iter_155000.pth
10/06 01:36:18 - mmengine - INFO - Iter(test) [  50/2000]    eta: 0:20:33  time: 0.4203  data_time: 0.0019  memory: 17181  
10/06 01:36:38 - mmengine - INFO - Iter(test) [ 100/2000]    eta: 0:16:25  time: 0.4026  data_time: 0.0019  memory: 17180  
10/06 01:36:54 - mmengine - INFO - Iter(test) [ 150/2000]    eta: 0:13:53  time: 0.3162  data_time: 0.0019  memory: 17150  
10/06 01:37:09 - mmengine - INFO - Iter(test) [ 200/2000]    eta: 0:12:29  time: 0.3666  data_time: 0.0019  memory: 17194  
10/06 01:37:27 - mmengine - INFO - Iter(test) [ 250/2000]    eta: 0:11:46  time: 0.2574  data_time: 0.0017  memory: 17202  
10/06 01:37:42 - mmengine - INFO - Iter(test) [ 300/2000]    eta: 0:10:58  time: 0.1742  data_time: 0.0020  memory: 17180  
10/06 01:37:58 - mmengine - INFO - Iter(test) [ 350/2000]    eta: 0:10:21  time: 0.3040  data_time: 0.0018  memory: 17178  
10/06 01:38:10 - mmengine - INFO - Iter(test) [ 400/2000]    eta: 0:09:34  time: 0.1865  data_time: 0.0017  memory: 17177  
10/06 01:38:19 - mmengine - INFO - Iter(test) [ 450/2000]    eta: 0:08:47  time: 0.2116  data_time: 0.0017  memory: 17147  
10/06 01:38:30 - mmengine - INFO - Iter(test) [ 500/2000]    eta: 0:08:12  time: 0.2475  data_time: 0.0017  memory: 17149  
10/06 01:38:41 - mmengine - INFO - Iter(test) [ 550/2000]    eta: 0:07:40  time: 0.2706  data_time: 0.0019  memory: 17179  
10/06 01:38:49 - mmengine - INFO - Iter(test) [ 600/2000]    eta: 0:07:07  time: 0.1719  data_time: 0.0019  memory: 3938  
10/06 01:39:01 - mmengine - INFO - Iter(test) [ 650/2000]    eta: 0:06:45  time: 0.2945  data_time: 0.0017  memory: 17181  
10/06 01:39:15 - mmengine - INFO - Iter(test) [ 700/2000]    eta: 0:06:28  time: 0.2345  data_time: 0.0019  memory: 17177  
10/06 01:39:29 - mmengine - INFO - Iter(test) [ 750/2000]    eta: 0:06:11  time: 0.5849  data_time: 0.0017  memory: 17184  
10/06 01:39:38 - mmengine - INFO - Iter(test) [ 800/2000]    eta: 0:05:48  time: 0.1700  data_time: 0.0020  memory: 17151  
10/06 01:39:47 - mmengine - INFO - Iter(test) [ 850/2000]    eta: 0:05:25  time: 0.1691  data_time: 0.0020  memory: 1428  
10/06 01:39:57 - mmengine - INFO - Iter(test) [ 900/2000]    eta: 0:05:06  time: 0.2086  data_time: 0.0017  memory: 17138  
10/06 01:40:09 - mmengine - INFO - Iter(test) [ 950/2000]    eta: 0:04:50  time: 0.3196  data_time: 0.0018  memory: 17133  
10/06 01:40:18 - mmengine - INFO - Iter(test) [1000/2000]    eta: 0:04:31  time: 0.1616  data_time: 0.0018  memory: 17096  
10/06 01:40:28 - mmengine - INFO - Iter(test) [1050/2000]    eta: 0:04:14  time: 0.2471  data_time: 0.0018  memory: 17182  
10/06 01:40:39 - mmengine - INFO - Iter(test) [1100/2000]    eta: 0:03:59  time: 0.1590  data_time: 0.0018  memory: 17175  
10/06 01:40:48 - mmengine - INFO - Iter(test) [1150/2000]    eta: 0:03:43  time: 0.1687  data_time: 0.0017  memory: 17117  
10/06 01:40:57 - mmengine - INFO - Iter(test) [1200/2000]    eta: 0:03:27  time: 0.1618  data_time: 0.0018  memory: 17113  
10/06 01:41:08 - mmengine - INFO - Iter(test) [1250/2000]    eta: 0:03:12  time: 0.2406  data_time: 0.0020  memory: 17172  
10/06 01:41:15 - mmengine - INFO - Iter(test) [1300/2000]    eta: 0:02:57  time: 0.1689  data_time: 0.0018  memory: 1430  
10/06 01:41:25 - mmengine - INFO - Iter(test) [1350/2000]    eta: 0:02:43  time: 0.1547  data_time: 0.0017  memory: 17110  
10/06 01:41:37 - mmengine - INFO - Iter(test) [1400/2000]    eta: 0:02:30  time: 0.1867  data_time: 0.0018  memory: 17154  
10/06 01:41:45 - mmengine - INFO - Iter(test) [1450/2000]    eta: 0:02:16  time: 0.2309  data_time: 0.0018  memory: 17130  
10/06 01:41:54 - mmengine - INFO - Iter(test) [1500/2000]    eta: 0:02:02  time: 0.1564  data_time: 0.0017  memory: 17125  
10/06 01:42:04 - mmengine - INFO - Iter(test) [1550/2000]    eta: 0:01:49  time: 0.1715  data_time: 0.0018  memory: 17154  
10/06 01:42:12 - mmengine - INFO - Iter(test) [1600/2000]    eta: 0:01:36  time: 0.1626  data_time: 0.0019  memory: 1425  
10/06 01:42:21 - mmengine - INFO - Iter(test) [1650/2000]    eta: 0:01:23  time: 0.1530  data_time: 0.0017  memory: 17192  
10/06 01:42:35 - mmengine - INFO - Iter(test) [1700/2000]    eta: 0:01:12  time: 0.1731  data_time: 0.0021  memory: 17151  
10/06 01:42:44 - mmengine - INFO - Iter(test) [1750/2000]    eta: 0:00:59  time: 0.1583  data_time: 0.0017  memory: 17111  
10/06 01:42:53 - mmengine - INFO - Iter(test) [1800/2000]    eta: 0:00:47  time: 0.1687  data_time: 0.0020  memory: 17114  
10/06 01:43:02 - mmengine - INFO - Iter(test) [1850/2000]    eta: 0:00:35  time: 0.1689  data_time: 0.0019  memory: 1317  
10/06 01:43:11 - mmengine - INFO - Iter(test) [1900/2000]    eta: 0:00:23  time: 0.2279  data_time: 0.0018  memory: 17182  
10/06 01:43:20 - mmengine - INFO - Iter(test) [1950/2000]    eta: 0:00:11  time: 0.1621  data_time: 0.0017  memory: 17197  
10/06 01:43:30 - mmengine - INFO - Iter(test) [2000/2000]    eta: 0:00:00  time: 0.1499  data_time: 0.0015  memory: 17131  
10/06 01:43:30 - mmengine - INFO - per class results:
10/06 01:43:30 - mmengine - INFO - 
+---------------------+-------+-------+
|        Class        |  IoU  |  Acc  |
+---------------------+-------+-------+
|         wall        | 75.06 | 86.96 |
|       building      | 80.82 | 92.52 |
|         sky         | 94.23 | 96.66 |
|        floor        |  80.2 |  89.8 |
|         tree        | 74.52 |  85.9 |
|       ceiling       | 82.34 | 87.67 |
|         road        | 82.13 | 89.35 |
|         bed         | 87.18 | 94.52 |
|      windowpane     | 60.65 | 76.86 |
|        grass        | 60.83 | 71.76 |
|       cabinet       | 56.56 | 72.52 |
|       sidewalk      | 62.83 | 80.49 |
|        person       | 80.49 | 87.31 |
|        earth        | 34.02 | 44.28 |
|         door        | 43.16 | 54.82 |
|        table        |  52.0 | 67.59 |
|       mountain      | 58.55 |  78.5 |
|        plant        | 51.63 | 62.08 |
|       curtain       | 74.74 | 85.19 |
|        chair        | 52.54 | 65.97 |
|         car         |  85.1 | 92.32 |
|        water        | 55.36 |  73.5 |
|       painting      | 68.46 | 85.57 |
|         sofa        | 62.94 | 81.77 |
|        shelf        | 40.71 | 62.92 |
|        house        | 46.68 | 60.93 |
|         sea         | 60.13 | 76.97 |
|        mirror       | 63.56 | 77.63 |
|         rug         | 53.01 | 58.73 |
|        field        | 26.51 | 72.63 |
|       armchair      | 35.75 | 55.08 |
|         seat        | 58.66 | 75.64 |
|        fence        | 45.88 | 64.39 |
|         desk        |  33.3 | 63.64 |
|         rock        | 49.67 | 75.44 |
|       wardrobe      | 54.03 | 70.11 |
|         lamp        | 61.89 | 74.82 |
|       bathtub       | 68.83 | 84.37 |
|       railing       | 34.09 | 48.89 |
|       cushion       | 54.19 | 67.28 |
|         base        | 30.78 | 53.69 |
|         box         | 25.97 | 36.59 |
|        column       | 46.57 | 54.02 |
|      signboard      | 37.98 | 47.33 |
|   chest of drawers  | 36.24 | 59.47 |
|       counter       | 36.23 | 48.22 |
|         sand        | 33.75 | 46.67 |
|         sink        | 70.01 |  79.3 |
|      skyscraper     | 46.51 | 56.55 |
|      fireplace      | 61.36 | 83.72 |
|     refrigerator    | 68.05 | 76.14 |
|      grandstand     | 41.77 | 71.54 |
|         path        | 20.54 | 26.85 |
|        stairs       | 34.14 | 41.72 |
|        runway       | 58.79 | 77.16 |
|         case        | 54.92 | 71.18 |
|      pool table     | 92.55 |  95.6 |
|        pillow       | 53.08 | 67.82 |
|     screen door     | 62.62 | 82.97 |
|       stairway      | 34.76 | 46.01 |
|        river        | 13.37 | 23.51 |
|        bridge       | 30.86 | 36.83 |
|       bookcase      | 26.89 | 48.73 |
|        blind        | 33.04 | 35.65 |
|     coffee table    | 57.27 | 80.75 |
|        toilet       | 84.95 | 89.63 |
|        flower       | 30.75 | 49.69 |
|         book        | 46.83 | 64.43 |
|         hill        |  7.15 | 13.98 |
|        bench        | 53.53 | 70.94 |
|      countertop     | 55.07 | 70.52 |
|        stove        | 70.21 | 80.04 |
|         palm        | 50.18 | 60.18 |
|    kitchen island   | 32.53 | 66.19 |
|       computer      | 56.31 | 65.42 |
|     swivel chair    | 35.51 | 52.74 |
|         boat        | 71.59 | 88.83 |
|         bar         | 51.83 | 60.29 |
|    arcade machine   |  31.3 | 36.33 |
|        hovel        | 12.16 | 19.28 |
|         bus         | 87.35 | 95.64 |
|        towel        | 69.15 | 78.66 |
|        light        | 53.83 | 70.38 |
|        truck        | 37.98 | 52.91 |
|        tower        | 33.32 |  53.4 |
|      chandelier     | 60.87 |  76.0 |
|        awning       |  31.2 | 41.03 |
|     streetlight     | 25.42 | 43.09 |
|        booth        |  21.3 |  27.6 |
| television receiver | 66.52 | 73.67 |
|       airplane      | 63.36 | 71.16 |
|      dirt track     |  0.0  |  0.0  |
|       apparel       | 29.32 | 46.11 |
|         pole        |  25.9 |  35.6 |
|         land        | 13.49 | 14.66 |
|      bannister      |  7.34 | 10.84 |
|      escalator      | 18.27 | 19.22 |
|       ottoman       | 47.38 | 62.87 |
|        bottle       | 19.29 | 23.86 |
|        buffet       |  34.4 | 41.62 |
|        poster       |  25.9 |  29.8 |
|        stage        |  6.93 | 18.45 |
|         van         | 51.68 | 66.63 |
|         ship        | 92.61 | 94.22 |
|       fountain      | 31.11 | 32.71 |
|    conveyer belt    | 52.11 | 67.86 |
|        canopy       | 25.48 | 44.78 |
|        washer       | 62.64 | 62.88 |
|      plaything      |  13.4 | 26.46 |
|    swimming pool    | 35.11 | 76.49 |
|        stool        |  37.4 | 52.14 |
|        barrel       | 20.38 |  64.6 |
|        basket       | 22.23 | 32.79 |
|      waterfall      | 59.56 | 95.74 |
|         tent        | 90.93 | 98.45 |
|         bag         | 11.43 | 13.82 |
|       minibike      | 64.65 | 85.08 |
|        cradle       | 69.46 | 97.01 |
|         oven        | 17.74 | 54.57 |
|         ball        | 40.76 | 64.11 |
|         food        | 61.39 |  72.5 |
|         step        |  9.97 | 12.25 |
|         tank        | 35.78 | 41.28 |
|      trade name     | 28.06 | 36.04 |
|      microwave      | 36.73 | 40.63 |
|         pot         | 43.67 | 54.21 |
|        animal       | 64.64 | 66.86 |
|       bicycle       | 50.99 | 68.04 |
|         lake        |  0.0  |  0.0  |
|      dishwasher     | 71.47 | 79.65 |
|        screen       |  72.2 | 91.43 |
|       blanket       |  9.01 |  10.7 |
|      sculpture      | 40.78 | 51.04 |
|         hood        | 50.21 | 53.85 |
|        sconce       |  36.7 | 47.65 |
|         vase        | 36.57 | 54.09 |
|    traffic light    | 34.24 | 55.22 |
|         tray        |  4.8  |  7.06 |
|        ashcan       | 32.72 | 47.18 |
|         fan         | 59.11 |  80.0 |
|         pier        |  2.74 |  3.28 |
|      crt screen     |  5.99 | 21.46 |
|        plate        | 51.94 | 68.72 |
|       monitor       |  1.46 |  2.0  |
|    bulletin board   | 40.22 | 46.16 |
|        shower       | 11.57 | 16.14 |
|       radiator      | 46.34 |  48.5 |
|        glass        | 12.75 | 14.84 |
|        clock        | 25.56 | 35.09 |
|         flag        | 49.64 | 53.83 |
+---------------------+-------+-------+
10/06 01:43:30 - mmengine - INFO - Iter(test) [2000/2000]    aAcc: 81.3800  mIoU: 45.3700  mAcc: 58.1800  data_time: 0.0020  time: 0.2317
Finished processing corruption type: defocus_blur
Processing corruption type: glass_blur
10/06 01:43:33 - mmengine - INFO - 
------------------------------------------------------------
System environment:
    sys.platform: linux
    Python: 3.10.13 | packaged by conda-forge | (main, Dec 23 2023, 15:36:39) [GCC 12.3.0]
    CUDA available: True
    MUSA available: False
    numpy_random_seed: 199155108
    GPU 0: Tesla V100-SXM2-32GB
    CUDA_HOME: /opt/bwhpc/common/devel/cuda/11.7
    NVCC: Cuda compilation tools, release 11.7, V11.7.99
    GCC: gcc (GCC) 8.5.0 20210514 (Red Hat 8.5.0-18)
    PyTorch: 1.13.1
    PyTorch compiling details: PyTorch built with:
  - GCC 9.3
  - C++ Version: 201402
  - Intel(R) oneAPI Math Kernel Library Version 2023.1-Product Build 20230303 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v2.6.0 (Git Hash 52b5f107dd9cf10910aaa19cb47f3abf9b349815)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - LAPACK is enabled (usually provided by MKL)
  - NNPACK is enabled
  - CPU capability usage: AVX2
  - CUDA Runtime 11.7
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_61,code=sm_61;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86;-gencode;arch=compute_37,code=compute_37
  - CuDNN 8.5
  - Magma 2.6.1
  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.7, CUDNN_VERSION=8.5.0, CXX_COMPILER=/opt/rh/devtoolset-9/root/usr/bin/c++, CXX_FLAGS= -fabi-version=11 -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -DEDGE_PROFILER_USE_KINETO -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Werror=non-virtual-dtor -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wunused-local-typedefs -Wno-unused-parameter -Wno-unused-function -Wno-unused-result -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Werror=cast-function-type -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.13.1, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, USE_ROCM=OFF, 

    TorchVision: 0.14.1
    OpenCV: 3.4.18
    MMEngine: 0.10.4

Runtime environment:
    cudnn_benchmark: True
    mp_cfg: {'mp_start_method': 'fork', 'opencv_num_threads': 0}
    dist_cfg: {'backend': 'nccl'}
    seed: 199155108
    Distributed launcher: none
    Distributed training: False
    GPU number: 1
------------------------------------------------------------

10/06 01:43:34 - mmengine - INFO - Config:
auto_scale_lr = dict(base_batch_size=16, enable=False)
backbone_embed_multi = dict(decay_mult=0.0, lr_mult=0.1)
backbone_norm_multi = dict(decay_mult=0.0, lr_mult=0.1)
crop_size = (
    512,
    512,
)
custom_keys = dict({
    'absolute_pos_embed':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone':
    dict(decay_mult=1.0, lr_mult=0.1),
    'backbone.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.patch_embed.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.0.blocks.0.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.0.blocks.1.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.0.downsample.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.1.blocks.0.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.1.blocks.1.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.1.downsample.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.0.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.1.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.10.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.11.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.12.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.13.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.14.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.15.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.16.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.17.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.2.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.3.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.4.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.5.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.6.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.7.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.8.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.9.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.downsample.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.3.blocks.0.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.3.blocks.1.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'level_embed':
    dict(decay_mult=0.0, lr_mult=1.0),
    'query_embed':
    dict(decay_mult=0.0, lr_mult=1.0),
    'query_feat':
    dict(decay_mult=0.0, lr_mult=1.0),
    'relative_position_bias_table':
    dict(decay_mult=0.0, lr_mult=0.1)
})
data_root = 'data/ade/ADEChallengeData2016'
dataset_type = 'ADE20KDataset'
default_hooks = dict(
    checkpoint=dict(
        by_epoch=False, interval=5000, save_best='mIoU',
        type='CheckpointHook'),
    logger=dict(interval=50, log_metric_by_epoch=False, type='LoggerHook'),
    param_scheduler=dict(type='ParamSchedulerHook'),
    sampler_seed=dict(type='DistSamplerSeedHook'),
    timer=dict(type='IterTimerHook'),
    visualization=dict(type='SegVisualizationHook'))
default_scope = 'mmseg'
depths = [
    2,
    2,
    18,
    2,
]
embed_multi = dict(decay_mult=0.0, lr_mult=1.0)
env_cfg = dict(
    cudnn_benchmark=True,
    dist_cfg=dict(backend='nccl'),
    mp_cfg=dict(mp_start_method='fork', opencv_num_threads=0))
img_ratios = [
    0.5,
    0.75,
    1.0,
    1.25,
    1.5,
    1.75,
]
launcher = 'none'
load_from = '../checkpoint_files/ade20k/mask2former/best_mIoU_iter_155000.pth'
log_level = 'INFO'
log_processor = dict(by_epoch=False)
model = dict(
    backbone=dict(
        attn_drop_rate=0.0,
        depths=[
            2,
            2,
            18,
            2,
        ],
        drop_path_rate=0.3,
        drop_rate=0.0,
        embed_dims=128,
        frozen_stages=-1,
        init_cfg=dict(
            checkpoint=
            'https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/swin/swin_base_patch4_window12_384_20220317-55b0104a.pth',
            type='Pretrained'),
        mlp_ratio=4,
        num_heads=[
            4,
            8,
            16,
            32,
        ],
        out_indices=(
            0,
            1,
            2,
            3,
        ),
        patch_norm=True,
        pretrain_img_size=384,
        qk_scale=None,
        qkv_bias=True,
        type='SwinTransformer',
        window_size=12,
        with_cp=False),
    data_preprocessor=dict(
        bgr_to_rgb=True,
        corruption='glass_blur',
        mean=[
            123.675,
            116.28,
            103.53,
        ],
        pad_val=0,
        seg_pad_val=255,
        size=(
            512,
            512,
        ),
        std=[
            58.395,
            57.12,
            57.375,
        ],
        type='SegDataPreProcessor'),
    decode_head=dict(
        align_corners=False,
        enforce_decoder_input_project=False,
        feat_channels=256,
        in_channels=[
            128,
            256,
            512,
            1024,
        ],
        loss_cls=dict(
            class_weight=[
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                0.1,
            ],
            loss_weight=2.0,
            reduction='mean',
            type='mmdet.CrossEntropyLoss',
            use_sigmoid=False),
        loss_dice=dict(
            activate=True,
            eps=1.0,
            loss_weight=5.0,
            naive_dice=True,
            reduction='mean',
            type='mmdet.DiceLoss',
            use_sigmoid=True),
        loss_mask=dict(
            loss_weight=5.0,
            reduction='mean',
            type='mmdet.CrossEntropyLoss',
            use_sigmoid=True),
        num_classes=150,
        num_queries=100,
        num_transformer_feat_level=3,
        out_channels=256,
        pixel_decoder=dict(
            act_cfg=dict(type='ReLU'),
            encoder=dict(
                init_cfg=None,
                layer_cfg=dict(
                    ffn_cfg=dict(
                        act_cfg=dict(inplace=True, type='ReLU'),
                        embed_dims=256,
                        feedforward_channels=1024,
                        ffn_drop=0.0,
                        num_fcs=2),
                    self_attn_cfg=dict(
                        batch_first=True,
                        dropout=0.0,
                        embed_dims=256,
                        im2col_step=64,
                        init_cfg=None,
                        norm_cfg=None,
                        num_heads=8,
                        num_levels=3,
                        num_points=4)),
                num_layers=6),
            init_cfg=None,
            norm_cfg=dict(num_groups=32, type='GN'),
            num_outs=3,
            positional_encoding=dict(normalize=True, num_feats=128),
            type='mmdet.MSDeformAttnPixelDecoder'),
        positional_encoding=dict(normalize=True, num_feats=128),
        strides=[
            4,
            8,
            16,
            32,
        ],
        train_cfg=dict(
            assigner=dict(
                match_costs=[
                    dict(type='mmdet.ClassificationCost', weight=2.0),
                    dict(
                        type='mmdet.CrossEntropyLossCost',
                        use_sigmoid=True,
                        weight=5.0),
                    dict(
                        eps=1.0,
                        pred_act=True,
                        type='mmdet.DiceCost',
                        weight=5.0),
                ],
                type='mmdet.HungarianAssigner'),
            importance_sample_ratio=0.75,
            num_points=12544,
            oversample_ratio=3.0,
            sampler=dict(type='mmdet.MaskPseudoSampler')),
        transformer_decoder=dict(
            init_cfg=None,
            layer_cfg=dict(
                cross_attn_cfg=dict(
                    attn_drop=0.0,
                    batch_first=True,
                    dropout_layer=None,
                    embed_dims=256,
                    num_heads=8,
                    proj_drop=0.0),
                ffn_cfg=dict(
                    act_cfg=dict(inplace=True, type='ReLU'),
                    add_identity=True,
                    dropout_layer=None,
                    embed_dims=256,
                    feedforward_channels=2048,
                    ffn_drop=0.0,
                    num_fcs=2),
                self_attn_cfg=dict(
                    attn_drop=0.0,
                    batch_first=True,
                    dropout_layer=None,
                    embed_dims=256,
                    num_heads=8,
                    proj_drop=0.0)),
            num_layers=9,
            return_intermediate=True),
        type='Mask2FormerHead'),
    test_cfg=dict(mode='whole'),
    train_cfg=dict(),
    type='EncoderDecoder')
num_classes = 150
optim_wrapper = dict(
    clip_grad=dict(max_norm=0.01, norm_type=2),
    optimizer=dict(
        betas=(
            0.9,
            0.999,
        ),
        eps=1e-08,
        lr=0.0001,
        type='AdamW',
        weight_decay=0.05),
    paramwise_cfg=dict(
        custom_keys=dict({
            'absolute_pos_embed':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone':
            dict(decay_mult=1.0, lr_mult=0.1),
            'backbone.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.patch_embed.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.0.blocks.0.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.0.blocks.1.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.0.downsample.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.1.blocks.0.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.1.blocks.1.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.1.downsample.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.0.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.1.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.10.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.11.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.12.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.13.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.14.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.15.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.16.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.17.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.2.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.3.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.4.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.5.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.6.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.7.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.8.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.9.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.downsample.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.3.blocks.0.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.3.blocks.1.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'level_embed':
            dict(decay_mult=0.0, lr_mult=1.0),
            'query_embed':
            dict(decay_mult=0.0, lr_mult=1.0),
            'query_feat':
            dict(decay_mult=0.0, lr_mult=1.0),
            'relative_position_bias_table':
            dict(decay_mult=0.0, lr_mult=0.1)
        }),
        norm_decay_mult=0.0),
    type='OptimWrapper')
optimizer = dict(
    betas=(
        0.9,
        0.999,
    ),
    eps=1e-08,
    lr=0.0001,
    type='AdamW',
    weight_decay=0.05)
param_scheduler = [
    dict(
        begin=0,
        by_epoch=False,
        end=160000,
        eta_min=0,
        power=0.9,
        type='PolyLR'),
]
pretrained = 'https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/swin/swin_base_patch4_window12_384_20220317-55b0104a.pth'
resume = False
test_cfg = dict(type='TestLoop')
test_dataloader = dict(
    batch_size=1,
    dataset=dict(
        data_prefix=dict(
            img_path='images/validation',
            seg_map_path='annotations/validation'),
        data_root='data/ade/ADEChallengeData2016',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(keep_ratio=True, scale=(
                2560,
                640,
            ), type='Resize'),
            dict(reduce_zero_label=True, type='LoadAnnotations'),
            dict(type='PackSegInputs'),
        ],
        type='ADE20KDataset'),
    num_workers=4,
    persistent_workers=True,
    sampler=dict(shuffle=False, type='DefaultSampler'))
test_evaluator = dict(
    iou_metrics=[
        'mIoU',
    ], type='IoUMetric')
test_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(keep_ratio=True, scale=(
        2560,
        640,
    ), type='Resize'),
    dict(reduce_zero_label=True, type='LoadAnnotations'),
    dict(type='PackSegInputs'),
]
train_cfg = dict(
    max_iters=160000, type='IterBasedTrainLoop', val_interval=5000)
train_dataloader = dict(
    batch_size=2,
    dataset=dict(
        data_prefix=dict(
            img_path='images/training', seg_map_path='annotations/training'),
        data_root='data/ade/ADEChallengeData2016',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(reduce_zero_label=True, type='LoadAnnotations'),
            dict(
                max_size=2560,
                resize_type='ResizeShortestEdge',
                scales=[
                    320,
                    384,
                    448,
                    512,
                    576,
                    640,
                    704,
                    768,
                    832,
                    896,
                    960,
                    1024,
                    1088,
                    1152,
                    1216,
                    1280,
                ],
                type='RandomChoiceResize'),
            dict(
                cat_max_ratio=0.75, crop_size=(
                    512,
                    512,
                ), type='RandomCrop'),
            dict(prob=0.5, type='RandomFlip'),
            dict(type='PhotoMetricDistortion'),
            dict(type='PackSegInputs'),
        ],
        type='ADE20KDataset'),
    num_workers=4,
    persistent_workers=True,
    sampler=dict(shuffle=True, type='InfiniteSampler'))
train_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(reduce_zero_label=True, type='LoadAnnotations'),
    dict(
        max_size=2560,
        resize_type='ResizeShortestEdge',
        scales=[
            320,
            384,
            448,
            512,
            576,
            640,
            704,
            768,
            832,
            896,
            960,
            1024,
            1088,
            1152,
            1216,
            1280,
        ],
        type='RandomChoiceResize'),
    dict(cat_max_ratio=0.75, crop_size=(
        512,
        512,
    ), type='RandomCrop'),
    dict(prob=0.5, type='RandomFlip'),
    dict(type='PhotoMetricDistortion'),
    dict(type='PackSegInputs'),
]
tta_model = dict(type='SegTTAModel')
tta_pipeline = [
    dict(backend_args=None, type='LoadImageFromFile'),
    dict(
        transforms=[
            [
                dict(keep_ratio=True, scale_factor=0.5, type='Resize'),
                dict(keep_ratio=True, scale_factor=0.75, type='Resize'),
                dict(keep_ratio=True, scale_factor=1.0, type='Resize'),
                dict(keep_ratio=True, scale_factor=1.25, type='Resize'),
                dict(keep_ratio=True, scale_factor=1.5, type='Resize'),
                dict(keep_ratio=True, scale_factor=1.75, type='Resize'),
            ],
            [
                dict(direction='horizontal', prob=0.0, type='RandomFlip'),
                dict(direction='horizontal', prob=1.0, type='RandomFlip'),
            ],
            [
                dict(type='LoadAnnotations'),
            ],
            [
                dict(type='PackSegInputs'),
            ],
        ],
        type='TestTimeAug'),
]
val_cfg = dict(type='ValLoop')
val_dataloader = dict(
    batch_size=1,
    dataset=dict(
        data_prefix=dict(
            img_path='images/validation',
            seg_map_path='annotations/validation'),
        data_root='data/ade/ADEChallengeData2016',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(keep_ratio=True, scale=(
                2560,
                640,
            ), type='Resize'),
            dict(reduce_zero_label=True, type='LoadAnnotations'),
            dict(type='PackSegInputs'),
        ],
        type='ADE20KDataset'),
    num_workers=4,
    persistent_workers=True,
    sampler=dict(shuffle=False, type='DefaultSampler'))
val_evaluator = dict(
    iou_metrics=[
        'mIoU',
    ], type='IoUMetric')
vis_backends = [
    dict(type='LocalVisBackend'),
]
visualizer = dict(
    name='visualizer',
    type='SegLocalVisualizer',
    vis_backends=[
        dict(type='LocalVisBackend'),
    ])
work_dir = '../corruptions/work_dirs/ade20k/mask2former/mask2former_swin-b-in1k-384x384-pre_8xb2-160k_ade20k-512x512/glass_blur'

/pfs/work7/workspace/scratch/ma_mkacar-team_project_fss2024/benchmarking_robustness/semantic_segmentation/mmsegmentation/mmseg/ops_dcnv3/modules/dcnv3.py:20: UserWarning: Now, we support DCNv4 in InternImage.
  warnings.warn('Now, we support DCNv4 in InternImage.')
10/06 01:43:38 - mmengine - INFO - Distributed training is not used, all SyncBatchNorm (SyncBN) layers in the model will be automatically reverted to BatchNormXd layers if they are used.
10/06 01:43:38 - mmengine - INFO - Hooks will be executed in the following order:
before_run:
(VERY_HIGH   ) RuntimeInfoHook                    
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
before_train:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_train_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(NORMAL      ) DistSamplerSeedHook                
 -------------------- 
before_train_iter:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_train_iter:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(NORMAL      ) SegVisualizationHook               
(BELOW_NORMAL) LoggerHook                         
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
after_train_epoch:
(NORMAL      ) IterTimerHook                      
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_val:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
before_val_epoch:
(NORMAL      ) IterTimerHook                      
 -------------------- 
before_val_iter:
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_val_iter:
(NORMAL      ) IterTimerHook                      
(NORMAL      ) SegVisualizationHook               
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_val_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
after_val:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
after_train:
(VERY_HIGH   ) RuntimeInfoHook                    
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_test:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
before_test_epoch:
(NORMAL      ) IterTimerHook                      
 -------------------- 
before_test_iter:
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_test_iter:
(NORMAL      ) IterTimerHook                      
(NORMAL      ) SegVisualizationHook               
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_test_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_test:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
after_run:
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
10/06 01:43:39 - mmengine - WARNING - The prefix is not set in metric class IoUMetric.
Loads checkpoint by local backend from path: ../checkpoint_files/ade20k/mask2former/best_mIoU_iter_155000.pth
10/06 01:43:40 - mmengine - INFO - Load checkpoint from ../checkpoint_files/ade20k/mask2former/best_mIoU_iter_155000.pth
10/06 01:52:55 - mmengine - INFO - Iter(test) [  50/2000]    eta: 6:01:04  time: 11.5014  data_time: 0.0020  memory: 17181  
10/06 02:01:57 - mmengine - INFO - Iter(test) [ 100/2000]    eta: 5:47:26  time: 11.2106  data_time: 0.0020  memory: 17180  
10/06 02:10:53 - mmengine - INFO - Iter(test) [ 150/2000]    eta: 5:35:47  time: 11.0403  data_time: 0.0020  memory: 17150  
10/06 02:19:55 - mmengine - INFO - Iter(test) [ 200/2000]    eta: 5:26:20  time: 10.7037  data_time: 0.0040  memory: 17194  
10/06 02:28:33 - mmengine - INFO - Iter(test) [ 250/2000]    eta: 5:14:11  time: 10.3588  data_time: 0.0019  memory: 17202  
10/06 02:37:07 - mmengine - INFO - Iter(test) [ 300/2000]    eta: 5:02:53  time: 10.6789  data_time: 0.0020  memory: 17180  
10/06 02:45:55 - mmengine - INFO - Iter(test) [ 350/2000]    eta: 4:53:29  time: 10.0637  data_time: 0.0019  memory: 17178  
10/06 02:54:36 - mmengine - INFO - Iter(test) [ 400/2000]    eta: 4:43:43  time: 10.6444  data_time: 0.0019  memory: 17177  
10/06 03:02:30 - mmengine - INFO - Iter(test) [ 450/2000]    eta: 4:31:33  time: 9.6190  data_time: 0.0018  memory: 17147  
10/06 03:11:10 - mmengine - INFO - Iter(test) [ 500/2000]    eta: 4:22:30  time: 10.1776  data_time: 0.0040  memory: 17149  
10/06 03:20:22 - mmengine - INFO - Iter(test) [ 550/2000]    eta: 4:14:55  time: 11.0201  data_time: 0.0020  memory: 17179  
10/06 03:28:56 - mmengine - INFO - Iter(test) [ 600/2000]    eta: 4:05:37  time: 10.7643  data_time: 0.0020  memory: 3938  
10/06 03:37:35 - mmengine - INFO - Iter(test) [ 650/2000]    eta: 3:56:36  time: 10.5537  data_time: 0.0017  memory: 17181  
10/06 03:46:46 - mmengine - INFO - Iter(test) [ 700/2000]    eta: 3:48:36  time: 10.8459  data_time: 0.0020  memory: 17177  
10/06 03:55:38 - mmengine - INFO - Iter(test) [ 750/2000]    eta: 3:39:56  time: 10.5486  data_time: 0.0018  memory: 17184  
10/06 04:03:48 - mmengine - INFO - Iter(test) [ 800/2000]    eta: 3:30:12  time: 10.3909  data_time: 0.0019  memory: 17151  
10/06 04:12:34 - mmengine - INFO - Iter(test) [ 850/2000]    eta: 3:21:27  time: 10.5986  data_time: 0.0021  memory: 1428  
10/06 04:20:38 - mmengine - INFO - Iter(test) [ 900/2000]    eta: 3:11:51  time: 9.3968  data_time: 0.0018  memory: 17138  
10/06 04:29:34 - mmengine - INFO - Iter(test) [ 950/2000]    eta: 3:03:22  time: 10.4027  data_time: 0.0019  memory: 17133  
10/06 04:37:54 - mmengine - INFO - Iter(test) [1000/2000]    eta: 2:54:14  time: 9.9792  data_time: 0.0020  memory: 17096  
10/06 04:46:49 - mmengine - INFO - Iter(test) [1050/2000]    eta: 2:45:42  time: 10.8751  data_time: 0.0019  memory: 17182  
10/06 04:55:33 - mmengine - INFO - Iter(test) [1100/2000]    eta: 2:36:59  time: 10.2303  data_time: 0.0018  memory: 17175  
10/06 05:04:01 - mmengine - INFO - Iter(test) [1150/2000]    eta: 2:28:05  time: 10.3896  data_time: 0.0018  memory: 17117  
10/06 05:12:47 - mmengine - INFO - Iter(test) [1200/2000]    eta: 2:19:24  time: 10.0938  data_time: 0.0018  memory: 17113  
10/06 05:21:06 - mmengine - INFO - Iter(test) [1250/2000]    eta: 2:10:27  time: 10.0603  data_time: 0.0018  memory: 17172  
10/06 05:29:14 - mmengine - INFO - Iter(test) [1300/2000]    eta: 2:01:27  time: 10.3706  data_time: 0.0018  memory: 1430  
10/06 05:37:44 - mmengine - INFO - Iter(test) [1350/2000]    eta: 1:52:42  time: 9.5775  data_time: 0.0017  memory: 17110  
10/06 05:46:19 - mmengine - INFO - Iter(test) [1400/2000]    eta: 1:43:59  time: 10.8011  data_time: 0.0018  memory: 17154  
10/06 05:54:31 - mmengine - INFO - Iter(test) [1450/2000]    eta: 1:35:09  time: 10.7911  data_time: 0.0021  memory: 17130  
10/06 06:02:53 - mmengine - INFO - Iter(test) [1500/2000]    eta: 1:26:24  time: 9.5925  data_time: 0.0017  memory: 17125  
10/06 06:11:53 - mmengine - INFO - Iter(test) [1550/2000]    eta: 1:17:52  time: 10.5802  data_time: 0.0017  memory: 17154  
10/06 06:20:14 - mmengine - INFO - Iter(test) [1600/2000]    eta: 1:09:08  time: 10.1906  data_time: 0.0019  memory: 1425  
10/06 06:28:41 - mmengine - INFO - Iter(test) [1650/2000]    eta: 1:00:27  time: 9.5676  data_time: 0.0017  memory: 17192  
10/06 06:37:30 - mmengine - INFO - Iter(test) [1700/2000]    eta: 0:51:51  time: 10.5031  data_time: 0.0025  memory: 17151  
10/06 06:46:25 - mmengine - INFO - Iter(test) [1750/2000]    eta: 0:43:15  time: 10.4223  data_time: 0.0018  memory: 17111  
10/06 06:54:54 - mmengine - INFO - Iter(test) [1800/2000]    eta: 0:34:34  time: 10.8184  data_time: 0.0020  memory: 17114  
10/06 07:03:56 - mmengine - INFO - Iter(test) [1850/2000]    eta: 0:25:58  time: 11.0529  data_time: 0.0073  memory: 1317  
10/06 07:12:23 - mmengine - INFO - Iter(test) [1900/2000]    eta: 0:17:18  time: 10.6758  data_time: 0.0068  memory: 17182  
10/06 07:21:13 - mmengine - INFO - Iter(test) [1950/2000]    eta: 0:08:39  time: 10.2120  data_time: 0.0017  memory: 17197  
10/06 07:29:29 - mmengine - INFO - Iter(test) [2000/2000]    eta: 0:00:00  time: 9.3628  data_time: 0.0015  memory: 17131  
10/06 07:29:29 - mmengine - INFO - per class results:
10/06 07:29:29 - mmengine - INFO - 
+---------------------+-------+-------+
|        Class        |  IoU  |  Acc  |
+---------------------+-------+-------+
|         wall        | 75.52 | 87.98 |
|       building      | 80.99 | 91.23 |
|         sky         | 94.25 | 97.12 |
|        floor        | 80.41 |  89.4 |
|         tree        | 73.93 | 88.24 |
|       ceiling       | 82.42 | 89.29 |
|         road        | 81.64 | 89.14 |
|         bed         | 86.21 | 94.23 |
|      windowpane     | 57.63 | 74.96 |
|        grass        | 62.79 | 74.46 |
|       cabinet       | 56.94 | 70.75 |
|       sidewalk      | 59.88 | 72.51 |
|        person       | 80.77 | 88.12 |
|        earth        | 34.16 | 48.79 |
|         door        | 39.14 | 46.44 |
|        table        | 56.25 | 73.32 |
|       mountain      | 53.58 | 78.36 |
|        plant        | 49.28 |  58.1 |
|       curtain       | 66.92 | 86.92 |
|        chair        | 51.46 |  62.8 |
|         car         | 84.11 | 90.01 |
|        water        | 56.14 | 75.75 |
|       painting      | 69.22 | 86.38 |
|         sofa        | 59.99 | 76.44 |
|        shelf        | 39.03 | 59.88 |
|        house        |  45.3 |  63.5 |
|         sea         | 58.95 | 77.29 |
|        mirror       | 58.89 | 77.23 |
|         rug         | 56.71 | 64.08 |
|        field        | 29.94 | 71.35 |
|       armchair      | 32.26 | 51.39 |
|         seat        | 54.92 | 67.67 |
|        fence        | 42.67 |  63.6 |
|         desk        | 36.79 |  57.6 |
|         rock        | 29.06 |  44.1 |
|       wardrobe      | 44.77 | 56.28 |
|         lamp        | 61.51 |  73.6 |
|       bathtub       |  70.6 | 83.39 |
|       railing       | 33.74 | 44.36 |
|       cushion       | 52.44 | 70.07 |
|         base        | 28.02 | 49.03 |
|         box         | 23.81 |  37.3 |
|        column       | 40.08 | 47.76 |
|      signboard      | 37.37 | 44.39 |
|   chest of drawers  |  35.0 | 64.11 |
|       counter       |  38.2 |  43.0 |
|         sand        | 33.94 | 44.36 |
|         sink        | 73.03 | 78.02 |
|      skyscraper     | 45.49 | 54.26 |
|      fireplace      |  57.2 | 82.46 |
|     refrigerator    | 59.01 | 61.99 |
|      grandstand     | 37.03 | 78.07 |
|         path        | 25.93 | 35.92 |
|        stairs       | 26.83 | 31.56 |
|        runway       | 59.33 | 85.86 |
|         case        | 57.37 | 81.73 |
|      pool table     | 92.47 | 94.88 |
|        pillow       | 53.81 | 71.53 |
|     screen door     | 66.72 | 72.26 |
|       stairway      | 32.25 | 40.64 |
|        river        |  9.24 | 16.36 |
|        bridge       | 29.76 | 35.74 |
|       bookcase      | 25.42 | 38.66 |
|        blind        |  17.9 |  18.9 |
|     coffee table    | 55.67 | 79.66 |
|        toilet       | 84.92 |  88.8 |
|        flower       | 32.27 | 53.19 |
|         book        | 47.11 | 65.12 |
|         hill        |  5.93 | 11.73 |
|        bench        | 46.94 | 58.62 |
|      countertop     | 54.26 | 68.55 |
|        stove        | 67.53 | 73.89 |
|         palm        | 51.59 | 59.16 |
|    kitchen island   | 46.97 | 87.93 |
|       computer      | 60.48 | 67.19 |
|     swivel chair    | 37.06 | 51.87 |
|         boat        | 43.02 | 49.88 |
|         bar         | 51.93 |  59.4 |
|    arcade machine   | 34.46 | 39.09 |
|        hovel        | 25.54 | 49.06 |
|         bus         | 86.19 | 89.84 |
|        towel        | 66.54 | 80.83 |
|        light        | 56.14 | 69.28 |
|        truck        | 35.49 | 53.49 |
|        tower        |  32.6 | 53.95 |
|      chandelier     | 61.47 | 77.17 |
|        awning       | 30.07 | 41.45 |
|     streetlight     | 26.32 | 37.99 |
|        booth        | 27.08 | 27.17 |
| television receiver | 59.77 | 68.68 |
|       airplane      | 58.66 | 61.54 |
|      dirt track     |  0.26 |  0.27 |
|       apparel       | 31.92 | 50.41 |
|         pole        | 26.76 | 40.61 |
|         land        |  0.0  |  0.0  |
|      bannister      |  7.72 | 10.15 |
|      escalator      | 22.47 | 24.14 |
|       ottoman       | 40.07 | 62.71 |
|        bottle       | 17.59 |  22.6 |
|        buffet       | 35.29 | 45.45 |
|        poster       | 12.98 | 14.08 |
|        stage        | 10.23 | 32.71 |
|         van         | 39.66 | 68.55 |
|         ship        | 18.56 | 27.06 |
|       fountain      | 28.07 | 32.75 |
|    conveyer belt    |  50.5 | 64.53 |
|        canopy       | 23.53 | 49.23 |
|        washer       | 55.68 | 64.31 |
|      plaything      | 15.06 | 24.78 |
|    swimming pool    |  40.1 | 83.56 |
|        stool        | 38.49 | 51.21 |
|        barrel       |  4.35 | 64.88 |
|        basket       |  26.5 | 34.66 |
|      waterfall      | 52.23 | 95.12 |
|         tent        |  91.3 | 97.78 |
|         bag         | 12.55 | 15.46 |
|       minibike      | 67.32 | 82.85 |
|        cradle       | 60.41 | 97.16 |
|         oven        |  17.4 |  51.0 |
|         ball        | 40.59 | 62.76 |
|         food        | 60.08 | 74.26 |
|         step        | 11.45 | 13.69 |
|         tank        | 18.28 | 19.66 |
|      trade name     | 22.97 |  27.3 |
|      microwave      | 39.13 | 42.11 |
|         pot         | 42.34 | 50.72 |
|        animal       | 67.18 | 69.69 |
|       bicycle       | 52.39 | 66.96 |
|         lake        |  0.0  |  0.0  |
|      dishwasher     | 66.67 | 71.74 |
|        screen       | 69.99 | 92.14 |
|       blanket       |  8.22 |  11.8 |
|      sculpture      | 41.44 | 47.96 |
|         hood        | 45.98 | 49.23 |
|        sconce       | 34.95 | 47.06 |
|         vase        | 36.34 | 55.32 |
|    traffic light    | 31.93 | 49.51 |
|         tray        |  4.96 |  7.98 |
|        ashcan       | 38.32 | 50.93 |
|         fan         | 55.31 | 78.16 |
|         pier        | 37.79 | 45.15 |
|      crt screen     |  2.91 | 10.26 |
|        plate        | 51.68 | 67.38 |
|       monitor       |  1.7  |  1.77 |
|    bulletin board   | 41.95 | 47.29 |
|        shower       | 11.37 | 14.94 |
|       radiator      | 56.12 | 60.76 |
|        glass        | 13.73 | 15.75 |
|        clock        | 23.55 | 30.99 |
|         flag        | 48.37 | 52.87 |
+---------------------+-------+-------+
10/06 07:29:29 - mmengine - INFO - Iter(test) [2000/2000]    aAcc: 80.9600  mIoU: 43.7100  mAcc: 56.6200  data_time: 0.0023  time: 10.3746
Finished processing corruption type: glass_blur
Processing corruption type: motion_blur
10/06 07:29:33 - mmengine - INFO - 
------------------------------------------------------------
System environment:
    sys.platform: linux
    Python: 3.10.13 | packaged by conda-forge | (main, Dec 23 2023, 15:36:39) [GCC 12.3.0]
    CUDA available: True
    MUSA available: False
    numpy_random_seed: 1943263405
    GPU 0: Tesla V100-SXM2-32GB
    CUDA_HOME: /opt/bwhpc/common/devel/cuda/11.7
    NVCC: Cuda compilation tools, release 11.7, V11.7.99
    GCC: gcc (GCC) 8.5.0 20210514 (Red Hat 8.5.0-18)
    PyTorch: 1.13.1
    PyTorch compiling details: PyTorch built with:
  - GCC 9.3
  - C++ Version: 201402
  - Intel(R) oneAPI Math Kernel Library Version 2023.1-Product Build 20230303 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v2.6.0 (Git Hash 52b5f107dd9cf10910aaa19cb47f3abf9b349815)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - LAPACK is enabled (usually provided by MKL)
  - NNPACK is enabled
  - CPU capability usage: AVX2
  - CUDA Runtime 11.7
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_61,code=sm_61;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86;-gencode;arch=compute_37,code=compute_37
  - CuDNN 8.5
  - Magma 2.6.1
  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.7, CUDNN_VERSION=8.5.0, CXX_COMPILER=/opt/rh/devtoolset-9/root/usr/bin/c++, CXX_FLAGS= -fabi-version=11 -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -DEDGE_PROFILER_USE_KINETO -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Werror=non-virtual-dtor -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wunused-local-typedefs -Wno-unused-parameter -Wno-unused-function -Wno-unused-result -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Werror=cast-function-type -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.13.1, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, USE_ROCM=OFF, 

    TorchVision: 0.14.1
    OpenCV: 3.4.18
    MMEngine: 0.10.4

Runtime environment:
    cudnn_benchmark: True
    mp_cfg: {'mp_start_method': 'fork', 'opencv_num_threads': 0}
    dist_cfg: {'backend': 'nccl'}
    seed: 1943263405
    Distributed launcher: none
    Distributed training: False
    GPU number: 1
------------------------------------------------------------

10/06 07:29:34 - mmengine - INFO - Config:
auto_scale_lr = dict(base_batch_size=16, enable=False)
backbone_embed_multi = dict(decay_mult=0.0, lr_mult=0.1)
backbone_norm_multi = dict(decay_mult=0.0, lr_mult=0.1)
crop_size = (
    512,
    512,
)
custom_keys = dict({
    'absolute_pos_embed':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone':
    dict(decay_mult=1.0, lr_mult=0.1),
    'backbone.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.patch_embed.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.0.blocks.0.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.0.blocks.1.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.0.downsample.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.1.blocks.0.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.1.blocks.1.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.1.downsample.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.0.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.1.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.10.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.11.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.12.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.13.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.14.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.15.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.16.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.17.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.2.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.3.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.4.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.5.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.6.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.7.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.8.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.9.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.downsample.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.3.blocks.0.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.3.blocks.1.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'level_embed':
    dict(decay_mult=0.0, lr_mult=1.0),
    'query_embed':
    dict(decay_mult=0.0, lr_mult=1.0),
    'query_feat':
    dict(decay_mult=0.0, lr_mult=1.0),
    'relative_position_bias_table':
    dict(decay_mult=0.0, lr_mult=0.1)
})
data_root = 'data/ade/ADEChallengeData2016'
dataset_type = 'ADE20KDataset'
default_hooks = dict(
    checkpoint=dict(
        by_epoch=False, interval=5000, save_best='mIoU',
        type='CheckpointHook'),
    logger=dict(interval=50, log_metric_by_epoch=False, type='LoggerHook'),
    param_scheduler=dict(type='ParamSchedulerHook'),
    sampler_seed=dict(type='DistSamplerSeedHook'),
    timer=dict(type='IterTimerHook'),
    visualization=dict(type='SegVisualizationHook'))
default_scope = 'mmseg'
depths = [
    2,
    2,
    18,
    2,
]
embed_multi = dict(decay_mult=0.0, lr_mult=1.0)
env_cfg = dict(
    cudnn_benchmark=True,
    dist_cfg=dict(backend='nccl'),
    mp_cfg=dict(mp_start_method='fork', opencv_num_threads=0))
img_ratios = [
    0.5,
    0.75,
    1.0,
    1.25,
    1.5,
    1.75,
]
launcher = 'none'
load_from = '../checkpoint_files/ade20k/mask2former/best_mIoU_iter_155000.pth'
log_level = 'INFO'
log_processor = dict(by_epoch=False)
model = dict(
    backbone=dict(
        attn_drop_rate=0.0,
        depths=[
            2,
            2,
            18,
            2,
        ],
        drop_path_rate=0.3,
        drop_rate=0.0,
        embed_dims=128,
        frozen_stages=-1,
        init_cfg=dict(
            checkpoint=
            'https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/swin/swin_base_patch4_window12_384_20220317-55b0104a.pth',
            type='Pretrained'),
        mlp_ratio=4,
        num_heads=[
            4,
            8,
            16,
            32,
        ],
        out_indices=(
            0,
            1,
            2,
            3,
        ),
        patch_norm=True,
        pretrain_img_size=384,
        qk_scale=None,
        qkv_bias=True,
        type='SwinTransformer',
        window_size=12,
        with_cp=False),
    data_preprocessor=dict(
        bgr_to_rgb=True,
        corruption='motion_blur',
        mean=[
            123.675,
            116.28,
            103.53,
        ],
        pad_val=0,
        seg_pad_val=255,
        size=(
            512,
            512,
        ),
        std=[
            58.395,
            57.12,
            57.375,
        ],
        type='SegDataPreProcessor'),
    decode_head=dict(
        align_corners=False,
        enforce_decoder_input_project=False,
        feat_channels=256,
        in_channels=[
            128,
            256,
            512,
            1024,
        ],
        loss_cls=dict(
            class_weight=[
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                0.1,
            ],
            loss_weight=2.0,
            reduction='mean',
            type='mmdet.CrossEntropyLoss',
            use_sigmoid=False),
        loss_dice=dict(
            activate=True,
            eps=1.0,
            loss_weight=5.0,
            naive_dice=True,
            reduction='mean',
            type='mmdet.DiceLoss',
            use_sigmoid=True),
        loss_mask=dict(
            loss_weight=5.0,
            reduction='mean',
            type='mmdet.CrossEntropyLoss',
            use_sigmoid=True),
        num_classes=150,
        num_queries=100,
        num_transformer_feat_level=3,
        out_channels=256,
        pixel_decoder=dict(
            act_cfg=dict(type='ReLU'),
            encoder=dict(
                init_cfg=None,
                layer_cfg=dict(
                    ffn_cfg=dict(
                        act_cfg=dict(inplace=True, type='ReLU'),
                        embed_dims=256,
                        feedforward_channels=1024,
                        ffn_drop=0.0,
                        num_fcs=2),
                    self_attn_cfg=dict(
                        batch_first=True,
                        dropout=0.0,
                        embed_dims=256,
                        im2col_step=64,
                        init_cfg=None,
                        norm_cfg=None,
                        num_heads=8,
                        num_levels=3,
                        num_points=4)),
                num_layers=6),
            init_cfg=None,
            norm_cfg=dict(num_groups=32, type='GN'),
            num_outs=3,
            positional_encoding=dict(normalize=True, num_feats=128),
            type='mmdet.MSDeformAttnPixelDecoder'),
        positional_encoding=dict(normalize=True, num_feats=128),
        strides=[
            4,
            8,
            16,
            32,
        ],
        train_cfg=dict(
            assigner=dict(
                match_costs=[
                    dict(type='mmdet.ClassificationCost', weight=2.0),
                    dict(
                        type='mmdet.CrossEntropyLossCost',
                        use_sigmoid=True,
                        weight=5.0),
                    dict(
                        eps=1.0,
                        pred_act=True,
                        type='mmdet.DiceCost',
                        weight=5.0),
                ],
                type='mmdet.HungarianAssigner'),
            importance_sample_ratio=0.75,
            num_points=12544,
            oversample_ratio=3.0,
            sampler=dict(type='mmdet.MaskPseudoSampler')),
        transformer_decoder=dict(
            init_cfg=None,
            layer_cfg=dict(
                cross_attn_cfg=dict(
                    attn_drop=0.0,
                    batch_first=True,
                    dropout_layer=None,
                    embed_dims=256,
                    num_heads=8,
                    proj_drop=0.0),
                ffn_cfg=dict(
                    act_cfg=dict(inplace=True, type='ReLU'),
                    add_identity=True,
                    dropout_layer=None,
                    embed_dims=256,
                    feedforward_channels=2048,
                    ffn_drop=0.0,
                    num_fcs=2),
                self_attn_cfg=dict(
                    attn_drop=0.0,
                    batch_first=True,
                    dropout_layer=None,
                    embed_dims=256,
                    num_heads=8,
                    proj_drop=0.0)),
            num_layers=9,
            return_intermediate=True),
        type='Mask2FormerHead'),
    test_cfg=dict(mode='whole'),
    train_cfg=dict(),
    type='EncoderDecoder')
num_classes = 150
optim_wrapper = dict(
    clip_grad=dict(max_norm=0.01, norm_type=2),
    optimizer=dict(
        betas=(
            0.9,
            0.999,
        ),
        eps=1e-08,
        lr=0.0001,
        type='AdamW',
        weight_decay=0.05),
    paramwise_cfg=dict(
        custom_keys=dict({
            'absolute_pos_embed':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone':
            dict(decay_mult=1.0, lr_mult=0.1),
            'backbone.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.patch_embed.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.0.blocks.0.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.0.blocks.1.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.0.downsample.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.1.blocks.0.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.1.blocks.1.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.1.downsample.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.0.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.1.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.10.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.11.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.12.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.13.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.14.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.15.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.16.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.17.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.2.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.3.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.4.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.5.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.6.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.7.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.8.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.9.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.downsample.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.3.blocks.0.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.3.blocks.1.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'level_embed':
            dict(decay_mult=0.0, lr_mult=1.0),
            'query_embed':
            dict(decay_mult=0.0, lr_mult=1.0),
            'query_feat':
            dict(decay_mult=0.0, lr_mult=1.0),
            'relative_position_bias_table':
            dict(decay_mult=0.0, lr_mult=0.1)
        }),
        norm_decay_mult=0.0),
    type='OptimWrapper')
optimizer = dict(
    betas=(
        0.9,
        0.999,
    ),
    eps=1e-08,
    lr=0.0001,
    type='AdamW',
    weight_decay=0.05)
param_scheduler = [
    dict(
        begin=0,
        by_epoch=False,
        end=160000,
        eta_min=0,
        power=0.9,
        type='PolyLR'),
]
pretrained = 'https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/swin/swin_base_patch4_window12_384_20220317-55b0104a.pth'
resume = False
test_cfg = dict(type='TestLoop')
test_dataloader = dict(
    batch_size=1,
    dataset=dict(
        data_prefix=dict(
            img_path='images/validation',
            seg_map_path='annotations/validation'),
        data_root='data/ade/ADEChallengeData2016',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(keep_ratio=True, scale=(
                2560,
                640,
            ), type='Resize'),
            dict(reduce_zero_label=True, type='LoadAnnotations'),
            dict(type='PackSegInputs'),
        ],
        type='ADE20KDataset'),
    num_workers=4,
    persistent_workers=True,
    sampler=dict(shuffle=False, type='DefaultSampler'))
test_evaluator = dict(
    iou_metrics=[
        'mIoU',
    ], type='IoUMetric')
test_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(keep_ratio=True, scale=(
        2560,
        640,
    ), type='Resize'),
    dict(reduce_zero_label=True, type='LoadAnnotations'),
    dict(type='PackSegInputs'),
]
train_cfg = dict(
    max_iters=160000, type='IterBasedTrainLoop', val_interval=5000)
train_dataloader = dict(
    batch_size=2,
    dataset=dict(
        data_prefix=dict(
            img_path='images/training', seg_map_path='annotations/training'),
        data_root='data/ade/ADEChallengeData2016',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(reduce_zero_label=True, type='LoadAnnotations'),
            dict(
                max_size=2560,
                resize_type='ResizeShortestEdge',
                scales=[
                    320,
                    384,
                    448,
                    512,
                    576,
                    640,
                    704,
                    768,
                    832,
                    896,
                    960,
                    1024,
                    1088,
                    1152,
                    1216,
                    1280,
                ],
                type='RandomChoiceResize'),
            dict(
                cat_max_ratio=0.75, crop_size=(
                    512,
                    512,
                ), type='RandomCrop'),
            dict(prob=0.5, type='RandomFlip'),
            dict(type='PhotoMetricDistortion'),
            dict(type='PackSegInputs'),
        ],
        type='ADE20KDataset'),
    num_workers=4,
    persistent_workers=True,
    sampler=dict(shuffle=True, type='InfiniteSampler'))
train_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(reduce_zero_label=True, type='LoadAnnotations'),
    dict(
        max_size=2560,
        resize_type='ResizeShortestEdge',
        scales=[
            320,
            384,
            448,
            512,
            576,
            640,
            704,
            768,
            832,
            896,
            960,
            1024,
            1088,
            1152,
            1216,
            1280,
        ],
        type='RandomChoiceResize'),
    dict(cat_max_ratio=0.75, crop_size=(
        512,
        512,
    ), type='RandomCrop'),
    dict(prob=0.5, type='RandomFlip'),
    dict(type='PhotoMetricDistortion'),
    dict(type='PackSegInputs'),
]
tta_model = dict(type='SegTTAModel')
tta_pipeline = [
    dict(backend_args=None, type='LoadImageFromFile'),
    dict(
        transforms=[
            [
                dict(keep_ratio=True, scale_factor=0.5, type='Resize'),
                dict(keep_ratio=True, scale_factor=0.75, type='Resize'),
                dict(keep_ratio=True, scale_factor=1.0, type='Resize'),
                dict(keep_ratio=True, scale_factor=1.25, type='Resize'),
                dict(keep_ratio=True, scale_factor=1.5, type='Resize'),
                dict(keep_ratio=True, scale_factor=1.75, type='Resize'),
            ],
            [
                dict(direction='horizontal', prob=0.0, type='RandomFlip'),
                dict(direction='horizontal', prob=1.0, type='RandomFlip'),
            ],
            [
                dict(type='LoadAnnotations'),
            ],
            [
                dict(type='PackSegInputs'),
            ],
        ],
        type='TestTimeAug'),
]
val_cfg = dict(type='ValLoop')
val_dataloader = dict(
    batch_size=1,
    dataset=dict(
        data_prefix=dict(
            img_path='images/validation',
            seg_map_path='annotations/validation'),
        data_root='data/ade/ADEChallengeData2016',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(keep_ratio=True, scale=(
                2560,
                640,
            ), type='Resize'),
            dict(reduce_zero_label=True, type='LoadAnnotations'),
            dict(type='PackSegInputs'),
        ],
        type='ADE20KDataset'),
    num_workers=4,
    persistent_workers=True,
    sampler=dict(shuffle=False, type='DefaultSampler'))
val_evaluator = dict(
    iou_metrics=[
        'mIoU',
    ], type='IoUMetric')
vis_backends = [
    dict(type='LocalVisBackend'),
]
visualizer = dict(
    name='visualizer',
    type='SegLocalVisualizer',
    vis_backends=[
        dict(type='LocalVisBackend'),
    ])
work_dir = '../corruptions/work_dirs/ade20k/mask2former/mask2former_swin-b-in1k-384x384-pre_8xb2-160k_ade20k-512x512/motion_blur'

/pfs/work7/workspace/scratch/ma_mkacar-team_project_fss2024/benchmarking_robustness/semantic_segmentation/mmsegmentation/mmseg/ops_dcnv3/modules/dcnv3.py:20: UserWarning: Now, we support DCNv4 in InternImage.
  warnings.warn('Now, we support DCNv4 in InternImage.')
10/06 07:29:38 - mmengine - INFO - Distributed training is not used, all SyncBatchNorm (SyncBN) layers in the model will be automatically reverted to BatchNormXd layers if they are used.
10/06 07:29:38 - mmengine - INFO - Hooks will be executed in the following order:
before_run:
(VERY_HIGH   ) RuntimeInfoHook                    
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
before_train:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_train_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(NORMAL      ) DistSamplerSeedHook                
 -------------------- 
before_train_iter:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_train_iter:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(NORMAL      ) SegVisualizationHook               
(BELOW_NORMAL) LoggerHook                         
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
after_train_epoch:
(NORMAL      ) IterTimerHook                      
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_val:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
before_val_epoch:
(NORMAL      ) IterTimerHook                      
 -------------------- 
before_val_iter:
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_val_iter:
(NORMAL      ) IterTimerHook                      
(NORMAL      ) SegVisualizationHook               
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_val_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
after_val:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
after_train:
(VERY_HIGH   ) RuntimeInfoHook                    
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_test:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
before_test_epoch:
(NORMAL      ) IterTimerHook                      
 -------------------- 
before_test_iter:
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_test_iter:
(NORMAL      ) IterTimerHook                      
(NORMAL      ) SegVisualizationHook               
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_test_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_test:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
after_run:
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
10/06 07:29:39 - mmengine - WARNING - The prefix is not set in metric class IoUMetric.
Loads checkpoint by local backend from path: ../checkpoint_files/ade20k/mask2former/best_mIoU_iter_155000.pth
10/06 07:29:42 - mmengine - INFO - Load checkpoint from ../checkpoint_files/ade20k/mask2former/best_mIoU_iter_155000.pth
10/06 07:31:15 - mmengine - INFO - Iter(test) [  50/2000]    eta: 0:59:52  time: 1.5863  data_time: 0.0019  memory: 17181  
10/06 07:32:33 - mmengine - INFO - Iter(test) [ 100/2000]    eta: 0:54:08  time: 1.6033  data_time: 0.0020  memory: 17180  
10/06 07:33:46 - mmengine - INFO - Iter(test) [ 150/2000]    eta: 0:50:03  time: 1.4415  data_time: 0.0019  memory: 17150  
10/06 07:35:01 - mmengine - INFO - Iter(test) [ 200/2000]    eta: 0:47:43  time: 1.5266  data_time: 0.0019  memory: 17194  
10/06 07:36:15 - mmengine - INFO - Iter(test) [ 250/2000]    eta: 0:45:49  time: 1.4272  data_time: 0.0018  memory: 17202  
10/06 07:37:27 - mmengine - INFO - Iter(test) [ 300/2000]    eta: 0:43:55  time: 1.3966  data_time: 0.0020  memory: 17180  
10/06 07:38:40 - mmengine - INFO - Iter(test) [ 350/2000]    eta: 0:42:15  time: 1.4052  data_time: 0.0017  memory: 17178  
10/06 07:39:51 - mmengine - INFO - Iter(test) [ 400/2000]    eta: 0:40:33  time: 1.4176  data_time: 0.0030  memory: 17177  
10/06 07:40:52 - mmengine - INFO - Iter(test) [ 450/2000]    eta: 0:38:26  time: 1.2845  data_time: 0.0018  memory: 17147  
10/06 07:42:01 - mmengine - INFO - Iter(test) [ 500/2000]    eta: 0:36:54  time: 1.3248  data_time: 0.0018  memory: 17149  
10/06 07:43:11 - mmengine - INFO - Iter(test) [ 550/2000]    eta: 0:35:31  time: 1.4732  data_time: 0.0019  memory: 17179  
10/06 07:44:14 - mmengine - INFO - Iter(test) [ 600/2000]    eta: 0:33:54  time: 1.3100  data_time: 0.0019  memory: 3938  
10/06 07:45:23 - mmengine - INFO - Iter(test) [ 650/2000]    eta: 0:32:33  time: 1.3965  data_time: 0.0016  memory: 17181  
10/06 07:46:38 - mmengine - INFO - Iter(test) [ 700/2000]    eta: 0:31:25  time: 1.4363  data_time: 0.0019  memory: 17177  
10/06 07:47:51 - mmengine - INFO - Iter(test) [ 750/2000]    eta: 0:30:13  time: 1.6570  data_time: 0.0018  memory: 17184  
10/06 07:48:53 - mmengine - INFO - Iter(test) [ 800/2000]    eta: 0:28:46  time: 1.2832  data_time: 0.0020  memory: 17151  
10/06 07:49:59 - mmengine - INFO - Iter(test) [ 850/2000]    eta: 0:27:26  time: 1.3768  data_time: 0.0020  memory: 1428  
10/06 07:51:02 - mmengine - INFO - Iter(test) [ 900/2000]    eta: 0:26:04  time: 1.2366  data_time: 0.0017  memory: 17138  
10/06 07:52:14 - mmengine - INFO - Iter(test) [ 950/2000]    eta: 0:24:53  time: 1.4856  data_time: 0.0037  memory: 17133  
10/06 07:53:19 - mmengine - INFO - Iter(test) [1000/2000]    eta: 0:23:36  time: 1.2697  data_time: 0.0018  memory: 17096  
10/06 07:54:29 - mmengine - INFO - Iter(test) [1050/2000]    eta: 0:22:24  time: 1.5027  data_time: 0.0018  memory: 17182  
10/06 07:55:38 - mmengine - INFO - Iter(test) [1100/2000]    eta: 0:21:12  time: 1.3128  data_time: 0.0019  memory: 17175  
10/06 07:56:43 - mmengine - INFO - Iter(test) [1150/2000]    eta: 0:19:57  time: 1.3098  data_time: 0.0018  memory: 17117  
10/06 07:57:51 - mmengine - INFO - Iter(test) [1200/2000]    eta: 0:18:45  time: 1.2885  data_time: 0.0024  memory: 17113  
10/06 07:58:57 - mmengine - INFO - Iter(test) [1250/2000]    eta: 0:17:32  time: 1.3651  data_time: 0.0018  memory: 17172  
10/06 08:00:01 - mmengine - INFO - Iter(test) [1300/2000]    eta: 0:16:19  time: 1.3064  data_time: 0.0019  memory: 1430  
10/06 08:01:08 - mmengine - INFO - Iter(test) [1350/2000]    eta: 0:15:07  time: 1.2311  data_time: 0.0018  memory: 17110  
10/06 08:02:18 - mmengine - INFO - Iter(test) [1400/2000]    eta: 0:13:58  time: 1.4197  data_time: 0.0018  memory: 17154  
10/06 08:03:22 - mmengine - INFO - Iter(test) [1450/2000]    eta: 0:12:45  time: 1.4547  data_time: 0.0017  memory: 17130  
10/06 08:04:27 - mmengine - INFO - Iter(test) [1500/2000]    eta: 0:11:34  time: 1.2076  data_time: 0.0017  memory: 17125  
10/06 08:05:36 - mmengine - INFO - Iter(test) [1550/2000]    eta: 0:10:25  time: 1.3669  data_time: 0.0018  memory: 17154  
10/06 08:06:38 - mmengine - INFO - Iter(test) [1600/2000]    eta: 0:09:13  time: 1.2755  data_time: 0.0019  memory: 1425  
10/06 08:07:45 - mmengine - INFO - Iter(test) [1650/2000]    eta: 0:08:04  time: 1.2238  data_time: 0.0016  memory: 17192  
10/06 08:08:57 - mmengine - INFO - Iter(test) [1700/2000]    eta: 0:06:55  time: 1.3764  data_time: 0.0019  memory: 17151  
10/06 08:10:05 - mmengine - INFO - Iter(test) [1750/2000]    eta: 0:05:46  time: 1.3838  data_time: 0.0017  memory: 17111  
10/06 08:11:10 - mmengine - INFO - Iter(test) [1800/2000]    eta: 0:04:36  time: 1.3616  data_time: 0.0019  memory: 17114  
10/06 08:12:16 - mmengine - INFO - Iter(test) [1850/2000]    eta: 0:03:26  time: 1.3199  data_time: 0.0020  memory: 1317  
10/06 08:13:19 - mmengine - INFO - Iter(test) [1900/2000]    eta: 0:02:17  time: 1.3451  data_time: 0.0018  memory: 17182  
10/06 08:14:29 - mmengine - INFO - Iter(test) [1950/2000]    eta: 0:01:08  time: 1.3802  data_time: 0.0018  memory: 17197  
10/06 08:15:34 - mmengine - INFO - Iter(test) [2000/2000]    eta: 0:00:00  time: 1.1566  data_time: 0.0015  memory: 17131  
10/06 08:15:34 - mmengine - INFO - per class results:
10/06 08:15:34 - mmengine - INFO - 
+---------------------+-------+-------+
|        Class        |  IoU  |  Acc  |
+---------------------+-------+-------+
|         wall        | 75.44 | 86.49 |
|       building      | 80.76 |  93.1 |
|         sky         | 93.69 |  96.2 |
|        floor        | 80.09 | 89.29 |
|         tree        | 74.91 | 86.47 |
|       ceiling       | 83.09 | 89.69 |
|         road        | 81.28 | 87.88 |
|         bed         | 87.03 | 94.71 |
|      windowpane     | 60.47 | 77.14 |
|        grass        | 62.24 | 74.47 |
|       cabinet       | 57.75 | 73.19 |
|       sidewalk      |  60.4 | 80.87 |
|        person       | 80.04 | 87.13 |
|        earth        | 36.76 | 48.26 |
|         door        | 37.64 | 47.11 |
|        table        | 53.39 | 70.16 |
|       mountain      | 57.16 | 80.87 |
|        plant        | 53.04 |  62.1 |
|       curtain       | 72.06 | 83.93 |
|        chair        | 53.03 | 65.19 |
|         car         | 84.68 | 92.19 |
|        water        | 52.62 | 71.26 |
|       painting      | 68.42 | 83.53 |
|         sofa        | 64.74 | 83.28 |
|        shelf        |  39.7 | 62.89 |
|        house        | 42.51 | 53.26 |
|         sea         | 66.17 | 85.67 |
|        mirror       | 64.56 | 78.68 |
|         rug         | 57.34 | 63.39 |
|        field        | 30.08 | 69.46 |
|       armchair      | 36.38 | 55.74 |
|         seat        | 56.41 | 72.94 |
|        fence        | 42.92 | 62.14 |
|         desk        | 37.29 | 62.34 |
|         rock        | 37.21 |  54.8 |
|       wardrobe      | 48.97 |  62.8 |
|         lamp        | 60.08 | 72.75 |
|       bathtub       | 71.83 | 83.68 |
|       railing       | 33.51 | 47.58 |
|       cushion       | 55.78 | 69.99 |
|         base        | 28.61 | 46.67 |
|         box         | 25.05 | 40.42 |
|        column       | 48.26 | 54.85 |
|      signboard      | 38.95 | 47.88 |
|   chest of drawers  | 38.09 |  63.8 |
|       counter       | 40.69 | 50.84 |
|         sand        | 33.83 | 48.18 |
|         sink        |  70.4 | 81.74 |
|      skyscraper     | 44.61 | 53.07 |
|      fireplace      | 59.66 | 84.17 |
|     refrigerator    | 67.91 | 77.92 |
|      grandstand     | 45.23 | 73.18 |
|         path        | 19.86 | 25.05 |
|        stairs       | 33.87 | 41.17 |
|        runway       | 63.02 | 82.47 |
|         case        | 61.02 | 83.11 |
|      pool table     | 92.29 | 95.01 |
|        pillow       | 54.06 | 69.44 |
|     screen door     | 66.09 | 85.42 |
|       stairway      | 32.52 | 45.51 |
|        river        |  17.8 | 22.96 |
|        bridge       | 55.47 | 67.15 |
|       bookcase      |  29.0 | 46.94 |
|        blind        | 38.74 | 44.35 |
|     coffee table    | 54.38 |  77.8 |
|        toilet       | 84.84 | 89.33 |
|        flower       | 32.69 | 49.81 |
|         book        | 47.29 | 68.09 |
|         hill        |  6.03 | 13.73 |
|        bench        | 47.81 | 65.23 |
|      countertop     | 57.88 | 74.21 |
|        stove        | 71.37 | 83.47 |
|         palm        | 49.17 | 63.25 |
|    kitchen island   | 40.65 | 84.28 |
|       computer      |  62.1 | 71.06 |
|     swivel chair    | 35.86 | 55.09 |
|         boat        | 74.45 | 88.23 |
|         bar         | 31.24 | 36.16 |
|    arcade machine   | 32.05 | 36.91 |
|        hovel        | 12.65 | 19.63 |
|         bus         | 81.69 | 95.45 |
|        towel        | 67.35 |  79.5 |
|        light        | 54.45 | 72.48 |
|        truck        |  32.8 | 49.09 |
|        tower        | 33.09 | 52.56 |
|      chandelier     | 61.15 | 76.35 |
|        awning       | 35.62 | 49.36 |
|     streetlight     | 25.02 | 41.08 |
|        booth        | 25.01 | 27.29 |
| television receiver | 67.06 | 76.09 |
|       airplane      | 65.14 | 71.46 |
|      dirt track     |  0.01 |  0.02 |
|       apparel       | 41.78 |  60.0 |
|         pole        | 25.98 | 41.79 |
|         land        |  1.42 |  1.58 |
|      bannister      |  8.18 | 10.93 |
|      escalator      | 29.43 | 32.97 |
|       ottoman       | 42.33 | 64.01 |
|        bottle       | 19.23 | 25.09 |
|        buffet       | 30.11 | 38.64 |
|        poster       | 23.79 | 29.26 |
|        stage        |  7.88 | 17.58 |
|         van         | 46.68 | 68.65 |
|         ship        | 86.23 | 89.97 |
|       fountain      | 30.93 | 31.87 |
|    conveyer belt    | 45.77 | 70.82 |
|        canopy       | 23.24 | 36.34 |
|        washer       | 69.05 | 69.66 |
|      plaything      | 15.87 | 23.08 |
|    swimming pool    |  31.5 | 62.06 |
|        stool        | 36.25 | 50.79 |
|        barrel       | 20.49 | 64.63 |
|        basket       | 28.54 | 44.54 |
|      waterfall      | 62.12 | 94.78 |
|         tent        | 90.42 | 98.16 |
|         bag         | 13.57 | 17.67 |
|       minibike      | 66.86 | 84.67 |
|        cradle       | 57.41 |  77.4 |
|         oven        | 12.29 | 35.25 |
|         ball        | 39.61 | 60.44 |
|         food        | 62.29 | 75.58 |
|         step        | 10.97 | 13.85 |
|         tank        | 41.77 | 51.93 |
|      trade name     | 34.95 | 46.51 |
|      microwave      | 40.38 | 44.74 |
|         pot         | 43.06 | 54.38 |
|        animal       | 64.94 | 67.33 |
|       bicycle       | 55.39 | 75.88 |
|         lake        |  0.0  |  0.0  |
|      dishwasher     | 67.98 | 77.34 |
|        screen       | 70.79 | 88.92 |
|       blanket       | 11.46 | 15.16 |
|      sculpture      | 41.74 |  49.5 |
|         hood        |  55.6 | 58.79 |
|        sconce       | 35.92 | 45.78 |
|         vase        | 40.38 | 56.05 |
|    traffic light    | 29.37 | 50.45 |
|         tray        |  5.76 |  9.42 |
|        ashcan       | 32.97 | 51.83 |
|         fan         | 57.74 | 79.66 |
|         pier        | 18.66 | 21.51 |
|      crt screen     |  7.41 | 28.95 |
|        plate        | 52.75 | 71.69 |
|       monitor       |  1.4  |  1.9  |
|    bulletin board   | 41.05 | 47.17 |
|        shower       | 14.34 | 17.68 |
|       radiator      | 54.23 | 61.35 |
|        glass        | 14.45 |  17.0 |
|        clock        |  30.2 | 41.65 |
|         flag        | 47.96 |  53.1 |
+---------------------+-------+-------+
10/06 08:15:34 - mmengine - INFO - Iter(test) [2000/2000]    aAcc: 81.4500  mIoU: 45.8500  mAcc: 58.9200  data_time: 0.0020  time: 1.3757
Finished processing corruption type: motion_blur
Processing corruption type: zoom_blur
10/06 08:15:37 - mmengine - INFO - 
------------------------------------------------------------
System environment:
    sys.platform: linux
    Python: 3.10.13 | packaged by conda-forge | (main, Dec 23 2023, 15:36:39) [GCC 12.3.0]
    CUDA available: True
    MUSA available: False
    numpy_random_seed: 700437259
    GPU 0: Tesla V100-SXM2-32GB
    CUDA_HOME: /opt/bwhpc/common/devel/cuda/11.7
    NVCC: Cuda compilation tools, release 11.7, V11.7.99
    GCC: gcc (GCC) 8.5.0 20210514 (Red Hat 8.5.0-18)
    PyTorch: 1.13.1
    PyTorch compiling details: PyTorch built with:
  - GCC 9.3
  - C++ Version: 201402
  - Intel(R) oneAPI Math Kernel Library Version 2023.1-Product Build 20230303 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v2.6.0 (Git Hash 52b5f107dd9cf10910aaa19cb47f3abf9b349815)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - LAPACK is enabled (usually provided by MKL)
  - NNPACK is enabled
  - CPU capability usage: AVX2
  - CUDA Runtime 11.7
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_61,code=sm_61;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86;-gencode;arch=compute_37,code=compute_37
  - CuDNN 8.5
  - Magma 2.6.1
  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.7, CUDNN_VERSION=8.5.0, CXX_COMPILER=/opt/rh/devtoolset-9/root/usr/bin/c++, CXX_FLAGS= -fabi-version=11 -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -DEDGE_PROFILER_USE_KINETO -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Werror=non-virtual-dtor -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wunused-local-typedefs -Wno-unused-parameter -Wno-unused-function -Wno-unused-result -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Werror=cast-function-type -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.13.1, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, USE_ROCM=OFF, 

    TorchVision: 0.14.1
    OpenCV: 3.4.18
    MMEngine: 0.10.4

Runtime environment:
    cudnn_benchmark: True
    mp_cfg: {'mp_start_method': 'fork', 'opencv_num_threads': 0}
    dist_cfg: {'backend': 'nccl'}
    seed: 700437259
    Distributed launcher: none
    Distributed training: False
    GPU number: 1
------------------------------------------------------------

10/06 08:15:38 - mmengine - INFO - Config:
auto_scale_lr = dict(base_batch_size=16, enable=False)
backbone_embed_multi = dict(decay_mult=0.0, lr_mult=0.1)
backbone_norm_multi = dict(decay_mult=0.0, lr_mult=0.1)
crop_size = (
    512,
    512,
)
custom_keys = dict({
    'absolute_pos_embed':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone':
    dict(decay_mult=1.0, lr_mult=0.1),
    'backbone.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.patch_embed.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.0.blocks.0.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.0.blocks.1.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.0.downsample.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.1.blocks.0.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.1.blocks.1.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.1.downsample.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.0.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.1.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.10.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.11.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.12.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.13.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.14.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.15.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.16.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.17.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.2.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.3.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.4.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.5.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.6.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.7.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.8.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.9.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.downsample.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.3.blocks.0.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.3.blocks.1.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'level_embed':
    dict(decay_mult=0.0, lr_mult=1.0),
    'query_embed':
    dict(decay_mult=0.0, lr_mult=1.0),
    'query_feat':
    dict(decay_mult=0.0, lr_mult=1.0),
    'relative_position_bias_table':
    dict(decay_mult=0.0, lr_mult=0.1)
})
data_root = 'data/ade/ADEChallengeData2016'
dataset_type = 'ADE20KDataset'
default_hooks = dict(
    checkpoint=dict(
        by_epoch=False, interval=5000, save_best='mIoU',
        type='CheckpointHook'),
    logger=dict(interval=50, log_metric_by_epoch=False, type='LoggerHook'),
    param_scheduler=dict(type='ParamSchedulerHook'),
    sampler_seed=dict(type='DistSamplerSeedHook'),
    timer=dict(type='IterTimerHook'),
    visualization=dict(type='SegVisualizationHook'))
default_scope = 'mmseg'
depths = [
    2,
    2,
    18,
    2,
]
embed_multi = dict(decay_mult=0.0, lr_mult=1.0)
env_cfg = dict(
    cudnn_benchmark=True,
    dist_cfg=dict(backend='nccl'),
    mp_cfg=dict(mp_start_method='fork', opencv_num_threads=0))
img_ratios = [
    0.5,
    0.75,
    1.0,
    1.25,
    1.5,
    1.75,
]
launcher = 'none'
load_from = '../checkpoint_files/ade20k/mask2former/best_mIoU_iter_155000.pth'
log_level = 'INFO'
log_processor = dict(by_epoch=False)
model = dict(
    backbone=dict(
        attn_drop_rate=0.0,
        depths=[
            2,
            2,
            18,
            2,
        ],
        drop_path_rate=0.3,
        drop_rate=0.0,
        embed_dims=128,
        frozen_stages=-1,
        init_cfg=dict(
            checkpoint=
            'https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/swin/swin_base_patch4_window12_384_20220317-55b0104a.pth',
            type='Pretrained'),
        mlp_ratio=4,
        num_heads=[
            4,
            8,
            16,
            32,
        ],
        out_indices=(
            0,
            1,
            2,
            3,
        ),
        patch_norm=True,
        pretrain_img_size=384,
        qk_scale=None,
        qkv_bias=True,
        type='SwinTransformer',
        window_size=12,
        with_cp=False),
    data_preprocessor=dict(
        bgr_to_rgb=True,
        corruption='zoom_blur',
        mean=[
            123.675,
            116.28,
            103.53,
        ],
        pad_val=0,
        seg_pad_val=255,
        size=(
            512,
            512,
        ),
        std=[
            58.395,
            57.12,
            57.375,
        ],
        type='SegDataPreProcessor'),
    decode_head=dict(
        align_corners=False,
        enforce_decoder_input_project=False,
        feat_channels=256,
        in_channels=[
            128,
            256,
            512,
            1024,
        ],
        loss_cls=dict(
            class_weight=[
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                0.1,
            ],
            loss_weight=2.0,
            reduction='mean',
            type='mmdet.CrossEntropyLoss',
            use_sigmoid=False),
        loss_dice=dict(
            activate=True,
            eps=1.0,
            loss_weight=5.0,
            naive_dice=True,
            reduction='mean',
            type='mmdet.DiceLoss',
            use_sigmoid=True),
        loss_mask=dict(
            loss_weight=5.0,
            reduction='mean',
            type='mmdet.CrossEntropyLoss',
            use_sigmoid=True),
        num_classes=150,
        num_queries=100,
        num_transformer_feat_level=3,
        out_channels=256,
        pixel_decoder=dict(
            act_cfg=dict(type='ReLU'),
            encoder=dict(
                init_cfg=None,
                layer_cfg=dict(
                    ffn_cfg=dict(
                        act_cfg=dict(inplace=True, type='ReLU'),
                        embed_dims=256,
                        feedforward_channels=1024,
                        ffn_drop=0.0,
                        num_fcs=2),
                    self_attn_cfg=dict(
                        batch_first=True,
                        dropout=0.0,
                        embed_dims=256,
                        im2col_step=64,
                        init_cfg=None,
                        norm_cfg=None,
                        num_heads=8,
                        num_levels=3,
                        num_points=4)),
                num_layers=6),
            init_cfg=None,
            norm_cfg=dict(num_groups=32, type='GN'),
            num_outs=3,
            positional_encoding=dict(normalize=True, num_feats=128),
            type='mmdet.MSDeformAttnPixelDecoder'),
        positional_encoding=dict(normalize=True, num_feats=128),
        strides=[
            4,
            8,
            16,
            32,
        ],
        train_cfg=dict(
            assigner=dict(
                match_costs=[
                    dict(type='mmdet.ClassificationCost', weight=2.0),
                    dict(
                        type='mmdet.CrossEntropyLossCost',
                        use_sigmoid=True,
                        weight=5.0),
                    dict(
                        eps=1.0,
                        pred_act=True,
                        type='mmdet.DiceCost',
                        weight=5.0),
                ],
                type='mmdet.HungarianAssigner'),
            importance_sample_ratio=0.75,
            num_points=12544,
            oversample_ratio=3.0,
            sampler=dict(type='mmdet.MaskPseudoSampler')),
        transformer_decoder=dict(
            init_cfg=None,
            layer_cfg=dict(
                cross_attn_cfg=dict(
                    attn_drop=0.0,
                    batch_first=True,
                    dropout_layer=None,
                    embed_dims=256,
                    num_heads=8,
                    proj_drop=0.0),
                ffn_cfg=dict(
                    act_cfg=dict(inplace=True, type='ReLU'),
                    add_identity=True,
                    dropout_layer=None,
                    embed_dims=256,
                    feedforward_channels=2048,
                    ffn_drop=0.0,
                    num_fcs=2),
                self_attn_cfg=dict(
                    attn_drop=0.0,
                    batch_first=True,
                    dropout_layer=None,
                    embed_dims=256,
                    num_heads=8,
                    proj_drop=0.0)),
            num_layers=9,
            return_intermediate=True),
        type='Mask2FormerHead'),
    test_cfg=dict(mode='whole'),
    train_cfg=dict(),
    type='EncoderDecoder')
num_classes = 150
optim_wrapper = dict(
    clip_grad=dict(max_norm=0.01, norm_type=2),
    optimizer=dict(
        betas=(
            0.9,
            0.999,
        ),
        eps=1e-08,
        lr=0.0001,
        type='AdamW',
        weight_decay=0.05),
    paramwise_cfg=dict(
        custom_keys=dict({
            'absolute_pos_embed':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone':
            dict(decay_mult=1.0, lr_mult=0.1),
            'backbone.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.patch_embed.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.0.blocks.0.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.0.blocks.1.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.0.downsample.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.1.blocks.0.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.1.blocks.1.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.1.downsample.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.0.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.1.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.10.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.11.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.12.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.13.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.14.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.15.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.16.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.17.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.2.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.3.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.4.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.5.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.6.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.7.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.8.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.9.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.downsample.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.3.blocks.0.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.3.blocks.1.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'level_embed':
            dict(decay_mult=0.0, lr_mult=1.0),
            'query_embed':
            dict(decay_mult=0.0, lr_mult=1.0),
            'query_feat':
            dict(decay_mult=0.0, lr_mult=1.0),
            'relative_position_bias_table':
            dict(decay_mult=0.0, lr_mult=0.1)
        }),
        norm_decay_mult=0.0),
    type='OptimWrapper')
optimizer = dict(
    betas=(
        0.9,
        0.999,
    ),
    eps=1e-08,
    lr=0.0001,
    type='AdamW',
    weight_decay=0.05)
param_scheduler = [
    dict(
        begin=0,
        by_epoch=False,
        end=160000,
        eta_min=0,
        power=0.9,
        type='PolyLR'),
]
pretrained = 'https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/swin/swin_base_patch4_window12_384_20220317-55b0104a.pth'
resume = False
test_cfg = dict(type='TestLoop')
test_dataloader = dict(
    batch_size=1,
    dataset=dict(
        data_prefix=dict(
            img_path='images/validation',
            seg_map_path='annotations/validation'),
        data_root='data/ade/ADEChallengeData2016',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(keep_ratio=True, scale=(
                2560,
                640,
            ), type='Resize'),
            dict(reduce_zero_label=True, type='LoadAnnotations'),
            dict(type='PackSegInputs'),
        ],
        type='ADE20KDataset'),
    num_workers=4,
    persistent_workers=True,
    sampler=dict(shuffle=False, type='DefaultSampler'))
test_evaluator = dict(
    iou_metrics=[
        'mIoU',
    ], type='IoUMetric')
test_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(keep_ratio=True, scale=(
        2560,
        640,
    ), type='Resize'),
    dict(reduce_zero_label=True, type='LoadAnnotations'),
    dict(type='PackSegInputs'),
]
train_cfg = dict(
    max_iters=160000, type='IterBasedTrainLoop', val_interval=5000)
train_dataloader = dict(
    batch_size=2,
    dataset=dict(
        data_prefix=dict(
            img_path='images/training', seg_map_path='annotations/training'),
        data_root='data/ade/ADEChallengeData2016',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(reduce_zero_label=True, type='LoadAnnotations'),
            dict(
                max_size=2560,
                resize_type='ResizeShortestEdge',
                scales=[
                    320,
                    384,
                    448,
                    512,
                    576,
                    640,
                    704,
                    768,
                    832,
                    896,
                    960,
                    1024,
                    1088,
                    1152,
                    1216,
                    1280,
                ],
                type='RandomChoiceResize'),
            dict(
                cat_max_ratio=0.75, crop_size=(
                    512,
                    512,
                ), type='RandomCrop'),
            dict(prob=0.5, type='RandomFlip'),
            dict(type='PhotoMetricDistortion'),
            dict(type='PackSegInputs'),
        ],
        type='ADE20KDataset'),
    num_workers=4,
    persistent_workers=True,
    sampler=dict(shuffle=True, type='InfiniteSampler'))
train_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(reduce_zero_label=True, type='LoadAnnotations'),
    dict(
        max_size=2560,
        resize_type='ResizeShortestEdge',
        scales=[
            320,
            384,
            448,
            512,
            576,
            640,
            704,
            768,
            832,
            896,
            960,
            1024,
            1088,
            1152,
            1216,
            1280,
        ],
        type='RandomChoiceResize'),
    dict(cat_max_ratio=0.75, crop_size=(
        512,
        512,
    ), type='RandomCrop'),
    dict(prob=0.5, type='RandomFlip'),
    dict(type='PhotoMetricDistortion'),
    dict(type='PackSegInputs'),
]
tta_model = dict(type='SegTTAModel')
tta_pipeline = [
    dict(backend_args=None, type='LoadImageFromFile'),
    dict(
        transforms=[
            [
                dict(keep_ratio=True, scale_factor=0.5, type='Resize'),
                dict(keep_ratio=True, scale_factor=0.75, type='Resize'),
                dict(keep_ratio=True, scale_factor=1.0, type='Resize'),
                dict(keep_ratio=True, scale_factor=1.25, type='Resize'),
                dict(keep_ratio=True, scale_factor=1.5, type='Resize'),
                dict(keep_ratio=True, scale_factor=1.75, type='Resize'),
            ],
            [
                dict(direction='horizontal', prob=0.0, type='RandomFlip'),
                dict(direction='horizontal', prob=1.0, type='RandomFlip'),
            ],
            [
                dict(type='LoadAnnotations'),
            ],
            [
                dict(type='PackSegInputs'),
            ],
        ],
        type='TestTimeAug'),
]
val_cfg = dict(type='ValLoop')
val_dataloader = dict(
    batch_size=1,
    dataset=dict(
        data_prefix=dict(
            img_path='images/validation',
            seg_map_path='annotations/validation'),
        data_root='data/ade/ADEChallengeData2016',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(keep_ratio=True, scale=(
                2560,
                640,
            ), type='Resize'),
            dict(reduce_zero_label=True, type='LoadAnnotations'),
            dict(type='PackSegInputs'),
        ],
        type='ADE20KDataset'),
    num_workers=4,
    persistent_workers=True,
    sampler=dict(shuffle=False, type='DefaultSampler'))
val_evaluator = dict(
    iou_metrics=[
        'mIoU',
    ], type='IoUMetric')
vis_backends = [
    dict(type='LocalVisBackend'),
]
visualizer = dict(
    name='visualizer',
    type='SegLocalVisualizer',
    vis_backends=[
        dict(type='LocalVisBackend'),
    ])
work_dir = '../corruptions/work_dirs/ade20k/mask2former/mask2former_swin-b-in1k-384x384-pre_8xb2-160k_ade20k-512x512/zoom_blur'

/pfs/work7/workspace/scratch/ma_mkacar-team_project_fss2024/benchmarking_robustness/semantic_segmentation/mmsegmentation/mmseg/ops_dcnv3/modules/dcnv3.py:20: UserWarning: Now, we support DCNv4 in InternImage.
  warnings.warn('Now, we support DCNv4 in InternImage.')
10/06 08:15:42 - mmengine - INFO - Distributed training is not used, all SyncBatchNorm (SyncBN) layers in the model will be automatically reverted to BatchNormXd layers if they are used.
10/06 08:15:42 - mmengine - INFO - Hooks will be executed in the following order:
before_run:
(VERY_HIGH   ) RuntimeInfoHook                    
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
before_train:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_train_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(NORMAL      ) DistSamplerSeedHook                
 -------------------- 
before_train_iter:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_train_iter:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(NORMAL      ) SegVisualizationHook               
(BELOW_NORMAL) LoggerHook                         
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
after_train_epoch:
(NORMAL      ) IterTimerHook                      
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_val:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
before_val_epoch:
(NORMAL      ) IterTimerHook                      
 -------------------- 
before_val_iter:
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_val_iter:
(NORMAL      ) IterTimerHook                      
(NORMAL      ) SegVisualizationHook               
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_val_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
after_val:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
after_train:
(VERY_HIGH   ) RuntimeInfoHook                    
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_test:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
before_test_epoch:
(NORMAL      ) IterTimerHook                      
 -------------------- 
before_test_iter:
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_test_iter:
(NORMAL      ) IterTimerHook                      
(NORMAL      ) SegVisualizationHook               
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_test_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_test:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
after_run:
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
10/06 08:15:43 - mmengine - WARNING - The prefix is not set in metric class IoUMetric.
Loads checkpoint by local backend from path: ../checkpoint_files/ade20k/mask2former/best_mIoU_iter_155000.pth
10/06 08:15:44 - mmengine - INFO - Load checkpoint from ../checkpoint_files/ade20k/mask2former/best_mIoU_iter_155000.pth
10/06 08:17:03 - mmengine - INFO - Iter(test) [  50/2000]    eta: 0:51:26  time: 1.4676  data_time: 0.0019  memory: 17181  
10/06 08:18:13 - mmengine - INFO - Iter(test) [ 100/2000]    eta: 0:47:04  time: 1.4374  data_time: 0.0021  memory: 17180  
10/06 08:19:19 - mmengine - INFO - Iter(test) [ 150/2000]    eta: 0:44:04  time: 1.3293  data_time: 0.0033  memory: 17150  
10/06 08:20:25 - mmengine - INFO - Iter(test) [ 200/2000]    eta: 0:42:11  time: 1.3655  data_time: 0.0018  memory: 17194  
10/06 08:21:31 - mmengine - INFO - Iter(test) [ 250/2000]    eta: 0:40:31  time: 1.2544  data_time: 0.0018  memory: 17202  
10/06 08:22:35 - mmengine - INFO - Iter(test) [ 300/2000]    eta: 0:38:46  time: 1.1981  data_time: 0.0020  memory: 17180  
10/06 08:23:40 - mmengine - INFO - Iter(test) [ 350/2000]    eta: 0:37:23  time: 1.2590  data_time: 0.0018  memory: 17178  
10/06 08:24:41 - mmengine - INFO - Iter(test) [ 400/2000]    eta: 0:35:48  time: 1.2197  data_time: 0.0017  memory: 17177  
10/06 08:25:37 - mmengine - INFO - Iter(test) [ 450/2000]    eta: 0:34:00  time: 1.1383  data_time: 0.0017  memory: 17147  
10/06 08:26:37 - mmengine - INFO - Iter(test) [ 500/2000]    eta: 0:32:39  time: 1.2214  data_time: 0.0018  memory: 17149  
10/06 08:27:41 - mmengine - INFO - Iter(test) [ 550/2000]    eta: 0:31:29  time: 1.3200  data_time: 0.0019  memory: 17179  
10/06 08:28:39 - mmengine - INFO - Iter(test) [ 600/2000]    eta: 0:30:07  time: 1.2136  data_time: 0.0019  memory: 3938  
10/06 08:29:40 - mmengine - INFO - Iter(test) [ 650/2000]    eta: 0:28:57  time: 1.2849  data_time: 0.0017  memory: 17181  
10/06 08:30:47 - mmengine - INFO - Iter(test) [ 700/2000]    eta: 0:27:56  time: 1.2749  data_time: 0.0019  memory: 17177  
10/06 08:31:51 - mmengine - INFO - Iter(test) [ 750/2000]    eta: 0:26:51  time: 1.5036  data_time: 0.0017  memory: 17184  
10/06 08:32:48 - mmengine - INFO - Iter(test) [ 800/2000]    eta: 0:25:35  time: 1.1732  data_time: 0.0019  memory: 17151  
10/06 08:33:47 - mmengine - INFO - Iter(test) [ 850/2000]    eta: 0:24:24  time: 1.1920  data_time: 0.0020  memory: 1428  
10/06 08:34:43 - mmengine - INFO - Iter(test) [ 900/2000]    eta: 0:23:12  time: 1.1121  data_time: 0.0017  memory: 17138  
10/06 08:35:47 - mmengine - INFO - Iter(test) [ 950/2000]    eta: 0:22:09  time: 1.3098  data_time: 0.0019  memory: 17133  
10/06 08:36:45 - mmengine - INFO - Iter(test) [1000/2000]    eta: 0:21:00  time: 1.1300  data_time: 0.0018  memory: 17096  
10/06 08:37:46 - mmengine - INFO - Iter(test) [1050/2000]    eta: 0:19:56  time: 1.3042  data_time: 0.0018  memory: 17182  
10/06 08:38:48 - mmengine - INFO - Iter(test) [1100/2000]    eta: 0:18:52  time: 1.1572  data_time: 0.0018  memory: 17175  
10/06 08:39:47 - mmengine - INFO - Iter(test) [1150/2000]    eta: 0:17:46  time: 1.1818  data_time: 0.0017  memory: 17117  
10/06 08:40:47 - mmengine - INFO - Iter(test) [1200/2000]    eta: 0:16:41  time: 1.1425  data_time: 0.0017  memory: 17113  
10/06 08:41:46 - mmengine - INFO - Iter(test) [1250/2000]    eta: 0:15:37  time: 1.2190  data_time: 0.0017  memory: 17172  
10/06 08:42:41 - mmengine - INFO - Iter(test) [1300/2000]    eta: 0:14:30  time: 1.1812  data_time: 0.0043  memory: 1430  
10/06 08:43:41 - mmengine - INFO - Iter(test) [1350/2000]    eta: 0:13:27  time: 1.0890  data_time: 0.0018  memory: 17110  
10/06 08:44:42 - mmengine - INFO - Iter(test) [1400/2000]    eta: 0:12:24  time: 1.2506  data_time: 0.0018  memory: 17154  
10/06 08:45:39 - mmengine - INFO - Iter(test) [1450/2000]    eta: 0:11:20  time: 1.2799  data_time: 0.0016  memory: 17130  
10/06 08:46:37 - mmengine - INFO - Iter(test) [1500/2000]    eta: 0:10:17  time: 1.0956  data_time: 0.0017  memory: 17125  
10/06 08:47:39 - mmengine - INFO - Iter(test) [1550/2000]    eta: 0:09:15  time: 1.1971  data_time: 0.0018  memory: 17154  
10/06 08:48:36 - mmengine - INFO - Iter(test) [1600/2000]    eta: 0:08:12  time: 1.1578  data_time: 0.0019  memory: 1425  
10/06 08:49:35 - mmengine - INFO - Iter(test) [1650/2000]    eta: 0:07:10  time: 1.0828  data_time: 0.0016  memory: 17192  
10/06 08:50:39 - mmengine - INFO - Iter(test) [1700/2000]    eta: 0:06:09  time: 1.1801  data_time: 0.0019  memory: 17151  
10/06 08:51:40 - mmengine - INFO - Iter(test) [1750/2000]    eta: 0:05:07  time: 1.1683  data_time: 0.0017  memory: 17111  
10/06 08:52:38 - mmengine - INFO - Iter(test) [1800/2000]    eta: 0:04:06  time: 1.2907  data_time: 0.0020  memory: 17114  
10/06 08:53:38 - mmengine - INFO - Iter(test) [1850/2000]    eta: 0:03:04  time: 1.1891  data_time: 0.0020  memory: 1317  
10/06 08:54:35 - mmengine - INFO - Iter(test) [1900/2000]    eta: 0:02:02  time: 1.2095  data_time: 0.0018  memory: 17182  
10/06 08:55:35 - mmengine - INFO - Iter(test) [1950/2000]    eta: 0:01:01  time: 1.1434  data_time: 0.0018  memory: 17197  
10/06 08:56:34 - mmengine - INFO - Iter(test) [2000/2000]    eta: 0:00:00  time: 1.0689  data_time: 0.0015  memory: 17131  
10/06 08:56:34 - mmengine - INFO - per class results:
10/06 08:56:34 - mmengine - INFO - 
+---------------------+-------+-------+
|        Class        |  IoU  |  Acc  |
+---------------------+-------+-------+
|         wall        | 57.82 |  84.7 |
|       building      | 68.44 | 86.51 |
|         sky         | 85.26 | 88.11 |
|        floor        | 59.81 | 85.18 |
|         tree        | 53.75 | 63.28 |
|       ceiling       |  63.7 | 84.82 |
|         road        | 67.51 | 77.64 |
|         bed         | 69.39 | 89.37 |
|      windowpane     | 41.94 | 54.08 |
|        grass        | 44.79 | 66.75 |
|       cabinet       | 42.22 | 53.27 |
|       sidewalk      | 39.41 | 58.37 |
|        person       | 56.88 | 64.45 |
|        earth        | 18.95 | 31.32 |
|         door        | 15.39 | 18.07 |
|        table        | 36.84 |  48.6 |
|       mountain      | 31.83 | 39.79 |
|        plant        | 24.93 | 29.17 |
|       curtain       | 42.77 | 56.88 |
|        chair        |  27.3 | 31.89 |
|         car         | 65.62 | 79.83 |
|        water        | 37.01 | 44.67 |
|       painting      | 48.51 | 60.17 |
|         sofa        | 36.14 | 53.43 |
|        shelf        | 21.38 | 34.53 |
|        house        | 30.61 | 35.61 |
|         sea         | 42.71 | 60.27 |
|        mirror       |  37.1 | 47.76 |
|         rug         | 15.55 | 16.38 |
|        field        | 20.26 | 66.08 |
|       armchair      |  13.2 | 17.75 |
|         seat        | 23.36 | 37.73 |
|        fence        | 16.86 | 48.31 |
|         desk        | 27.44 |  56.0 |
|         rock        | 12.51 | 14.46 |
|       wardrobe      | 29.38 |  39.5 |
|         lamp        | 35.93 | 45.59 |
|       bathtub       | 65.64 | 74.85 |
|       railing       | 14.22 | 16.13 |
|       cushion       | 32.36 | 38.94 |
|         base        |  6.91 | 21.51 |
|         box         |  5.55 |  7.64 |
|        column       | 14.58 | 15.68 |
|      signboard      | 19.03 | 21.19 |
|   chest of drawers  | 22.68 | 28.59 |
|       counter       | 20.39 | 29.45 |
|         sand        | 13.68 | 16.38 |
|         sink        | 53.83 | 63.68 |
|      skyscraper     | 35.69 | 43.68 |
|      fireplace      | 52.63 | 64.52 |
|     refrigerator    | 42.78 | 47.95 |
|      grandstand     | 22.61 | 62.89 |
|         path        |  9.9  | 11.34 |
|        stairs       |  2.02 |  2.17 |
|        runway       | 58.23 | 91.68 |
|         case        | 30.28 | 47.88 |
|      pool table     | 71.51 | 85.49 |
|        pillow       | 37.08 | 48.64 |
|     screen door     | 21.93 | 24.93 |
|       stairway      | 23.09 | 25.88 |
|        river        |  8.85 | 10.25 |
|        bridge       | 21.99 | 24.82 |
|       bookcase      | 18.71 | 40.79 |
|        blind        |  18.9 |  20.5 |
|     coffee table    | 45.57 | 54.73 |
|        toilet       | 69.78 | 77.83 |
|        flower       | 15.89 | 18.64 |
|         book        | 25.43 | 32.08 |
|         hill        |  3.1  |  8.28 |
|        bench        | 19.39 | 20.89 |
|      countertop     | 36.14 | 47.47 |
|        stove        | 46.21 |  59.1 |
|         palm        | 26.34 | 33.14 |
|    kitchen island   | 32.68 | 56.67 |
|       computer      | 42.34 | 47.14 |
|     swivel chair    | 22.43 | 26.09 |
|         boat        | 33.95 | 40.03 |
|         bar         |  6.97 |  9.52 |
|    arcade machine   | 13.53 | 13.59 |
|        hovel        |  9.61 | 11.11 |
|         bus         | 61.65 | 74.85 |
|        towel        | 24.37 | 26.66 |
|        light        | 22.89 | 37.24 |
|        truck        | 15.02 | 19.21 |
|        tower        |  3.61 |  4.45 |
|      chandelier     | 42.35 | 48.92 |
|        awning       | 11.58 | 13.53 |
|     streetlight     |  4.98 |  5.7  |
|        booth        | 14.98 | 14.99 |
| television receiver | 36.04 | 44.54 |
|       airplane      | 37.32 | 57.01 |
|      dirt track     |  7.91 | 18.27 |
|       apparel       | 11.76 | 15.49 |
|         pole        |  9.1  | 11.11 |
|         land        |  0.0  |  0.0  |
|      bannister      |  2.28 |  2.72 |
|      escalator      |  5.05 |  5.15 |
|       ottoman       | 17.41 | 26.32 |
|        bottle       |  2.23 |  2.27 |
|        buffet       | 23.66 | 26.45 |
|        poster       |  5.7  |  6.17 |
|        stage        |  5.45 |  6.99 |
|         van         | 25.63 | 29.64 |
|         ship        |  6.44 |  6.83 |
|       fountain      | 18.74 | 19.43 |
|    conveyer belt    | 20.24 | 35.51 |
|        canopy       |  6.0  |  7.16 |
|        washer       | 63.56 | 66.35 |
|      plaything      |  0.78 |  0.9  |
|    swimming pool    | 32.85 | 80.39 |
|        stool        | 18.36 | 29.75 |
|        barrel       |  0.0  |  0.0  |
|        basket       |  9.01 | 11.09 |
|      waterfall      | 45.39 | 79.43 |
|         tent        | 80.61 | 99.44 |
|         bag         |  2.22 |  2.63 |
|       minibike      | 30.21 | 40.64 |
|        cradle       |  40.0 | 62.41 |
|         oven        | 15.57 | 19.47 |
|         ball        | 11.56 | 22.52 |
|         food        |  12.1 | 12.63 |
|         step        |  7.2  |  7.87 |
|         tank        |  0.0  |  0.0  |
|      trade name     |  8.84 |  9.42 |
|      microwave      | 27.34 |  28.8 |
|         pot         |  9.25 |  9.98 |
|        animal       | 43.83 | 45.94 |
|       bicycle       | 32.26 | 49.25 |
|         lake        |  0.0  |  0.0  |
|      dishwasher     | 24.26 |  29.5 |
|        screen       | 52.33 | 77.55 |
|       blanket       |  1.69 |  1.91 |
|      sculpture      | 28.85 | 33.42 |
|         hood        | 24.71 | 28.48 |
|        sconce       | 11.68 | 13.74 |
|         vase        | 14.53 | 18.43 |
|    traffic light    |  9.8  | 10.84 |
|         tray        |  0.42 |  0.48 |
|        ashcan       |  20.7 | 28.32 |
|         fan         | 27.23 | 42.13 |
|         pier        | 30.96 | 37.77 |
|      crt screen     |  4.49 | 10.63 |
|        plate        |  20.5 | 23.18 |
|       monitor       |  1.51 |  1.61 |
|    bulletin board   | 13.62 | 14.57 |
|        shower       |  3.97 |  5.98 |
|       radiator      |  29.1 | 31.45 |
|        glass        |  2.97 |  3.13 |
|        clock        |  7.33 |  8.06 |
|         flag        | 17.43 | 25.18 |
+---------------------+-------+-------+
10/06 08:56:34 - mmengine - INFO - Iter(test) [2000/2000]    aAcc: 68.0900  mIoU: 26.2600  mAcc: 34.7100  data_time: 0.0020  time: 1.2248
Finished processing corruption type: zoom_blur
Processing corruption type: snow
10/06 08:56:37 - mmengine - INFO - 
------------------------------------------------------------
System environment:
    sys.platform: linux
    Python: 3.10.13 | packaged by conda-forge | (main, Dec 23 2023, 15:36:39) [GCC 12.3.0]
    CUDA available: True
    MUSA available: False
    numpy_random_seed: 102907197
    GPU 0: Tesla V100-SXM2-32GB
    CUDA_HOME: /opt/bwhpc/common/devel/cuda/11.7
    NVCC: Cuda compilation tools, release 11.7, V11.7.99
    GCC: gcc (GCC) 8.5.0 20210514 (Red Hat 8.5.0-18)
    PyTorch: 1.13.1
    PyTorch compiling details: PyTorch built with:
  - GCC 9.3
  - C++ Version: 201402
  - Intel(R) oneAPI Math Kernel Library Version 2023.1-Product Build 20230303 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v2.6.0 (Git Hash 52b5f107dd9cf10910aaa19cb47f3abf9b349815)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - LAPACK is enabled (usually provided by MKL)
  - NNPACK is enabled
  - CPU capability usage: AVX2
  - CUDA Runtime 11.7
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_61,code=sm_61;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86;-gencode;arch=compute_37,code=compute_37
  - CuDNN 8.5
  - Magma 2.6.1
  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.7, CUDNN_VERSION=8.5.0, CXX_COMPILER=/opt/rh/devtoolset-9/root/usr/bin/c++, CXX_FLAGS= -fabi-version=11 -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -DEDGE_PROFILER_USE_KINETO -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Werror=non-virtual-dtor -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wunused-local-typedefs -Wno-unused-parameter -Wno-unused-function -Wno-unused-result -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Werror=cast-function-type -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.13.1, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, USE_ROCM=OFF, 

    TorchVision: 0.14.1
    OpenCV: 3.4.18
    MMEngine: 0.10.4

Runtime environment:
    cudnn_benchmark: True
    mp_cfg: {'mp_start_method': 'fork', 'opencv_num_threads': 0}
    dist_cfg: {'backend': 'nccl'}
    seed: 102907197
    Distributed launcher: none
    Distributed training: False
    GPU number: 1
------------------------------------------------------------

10/06 08:56:38 - mmengine - INFO - Config:
auto_scale_lr = dict(base_batch_size=16, enable=False)
backbone_embed_multi = dict(decay_mult=0.0, lr_mult=0.1)
backbone_norm_multi = dict(decay_mult=0.0, lr_mult=0.1)
crop_size = (
    512,
    512,
)
custom_keys = dict({
    'absolute_pos_embed':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone':
    dict(decay_mult=1.0, lr_mult=0.1),
    'backbone.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.patch_embed.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.0.blocks.0.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.0.blocks.1.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.0.downsample.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.1.blocks.0.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.1.blocks.1.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.1.downsample.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.0.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.1.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.10.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.11.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.12.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.13.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.14.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.15.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.16.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.17.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.2.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.3.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.4.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.5.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.6.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.7.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.8.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.9.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.downsample.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.3.blocks.0.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.3.blocks.1.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'level_embed':
    dict(decay_mult=0.0, lr_mult=1.0),
    'query_embed':
    dict(decay_mult=0.0, lr_mult=1.0),
    'query_feat':
    dict(decay_mult=0.0, lr_mult=1.0),
    'relative_position_bias_table':
    dict(decay_mult=0.0, lr_mult=0.1)
})
data_root = 'data/ade/ADEChallengeData2016'
dataset_type = 'ADE20KDataset'
default_hooks = dict(
    checkpoint=dict(
        by_epoch=False, interval=5000, save_best='mIoU',
        type='CheckpointHook'),
    logger=dict(interval=50, log_metric_by_epoch=False, type='LoggerHook'),
    param_scheduler=dict(type='ParamSchedulerHook'),
    sampler_seed=dict(type='DistSamplerSeedHook'),
    timer=dict(type='IterTimerHook'),
    visualization=dict(type='SegVisualizationHook'))
default_scope = 'mmseg'
depths = [
    2,
    2,
    18,
    2,
]
embed_multi = dict(decay_mult=0.0, lr_mult=1.0)
env_cfg = dict(
    cudnn_benchmark=True,
    dist_cfg=dict(backend='nccl'),
    mp_cfg=dict(mp_start_method='fork', opencv_num_threads=0))
img_ratios = [
    0.5,
    0.75,
    1.0,
    1.25,
    1.5,
    1.75,
]
launcher = 'none'
load_from = '../checkpoint_files/ade20k/mask2former/best_mIoU_iter_155000.pth'
log_level = 'INFO'
log_processor = dict(by_epoch=False)
model = dict(
    backbone=dict(
        attn_drop_rate=0.0,
        depths=[
            2,
            2,
            18,
            2,
        ],
        drop_path_rate=0.3,
        drop_rate=0.0,
        embed_dims=128,
        frozen_stages=-1,
        init_cfg=dict(
            checkpoint=
            'https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/swin/swin_base_patch4_window12_384_20220317-55b0104a.pth',
            type='Pretrained'),
        mlp_ratio=4,
        num_heads=[
            4,
            8,
            16,
            32,
        ],
        out_indices=(
            0,
            1,
            2,
            3,
        ),
        patch_norm=True,
        pretrain_img_size=384,
        qk_scale=None,
        qkv_bias=True,
        type='SwinTransformer',
        window_size=12,
        with_cp=False),
    data_preprocessor=dict(
        bgr_to_rgb=True,
        corruption='snow',
        mean=[
            123.675,
            116.28,
            103.53,
        ],
        pad_val=0,
        seg_pad_val=255,
        size=(
            512,
            512,
        ),
        std=[
            58.395,
            57.12,
            57.375,
        ],
        type='SegDataPreProcessor'),
    decode_head=dict(
        align_corners=False,
        enforce_decoder_input_project=False,
        feat_channels=256,
        in_channels=[
            128,
            256,
            512,
            1024,
        ],
        loss_cls=dict(
            class_weight=[
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                0.1,
            ],
            loss_weight=2.0,
            reduction='mean',
            type='mmdet.CrossEntropyLoss',
            use_sigmoid=False),
        loss_dice=dict(
            activate=True,
            eps=1.0,
            loss_weight=5.0,
            naive_dice=True,
            reduction='mean',
            type='mmdet.DiceLoss',
            use_sigmoid=True),
        loss_mask=dict(
            loss_weight=5.0,
            reduction='mean',
            type='mmdet.CrossEntropyLoss',
            use_sigmoid=True),
        num_classes=150,
        num_queries=100,
        num_transformer_feat_level=3,
        out_channels=256,
        pixel_decoder=dict(
            act_cfg=dict(type='ReLU'),
            encoder=dict(
                init_cfg=None,
                layer_cfg=dict(
                    ffn_cfg=dict(
                        act_cfg=dict(inplace=True, type='ReLU'),
                        embed_dims=256,
                        feedforward_channels=1024,
                        ffn_drop=0.0,
                        num_fcs=2),
                    self_attn_cfg=dict(
                        batch_first=True,
                        dropout=0.0,
                        embed_dims=256,
                        im2col_step=64,
                        init_cfg=None,
                        norm_cfg=None,
                        num_heads=8,
                        num_levels=3,
                        num_points=4)),
                num_layers=6),
            init_cfg=None,
            norm_cfg=dict(num_groups=32, type='GN'),
            num_outs=3,
            positional_encoding=dict(normalize=True, num_feats=128),
            type='mmdet.MSDeformAttnPixelDecoder'),
        positional_encoding=dict(normalize=True, num_feats=128),
        strides=[
            4,
            8,
            16,
            32,
        ],
        train_cfg=dict(
            assigner=dict(
                match_costs=[
                    dict(type='mmdet.ClassificationCost', weight=2.0),
                    dict(
                        type='mmdet.CrossEntropyLossCost',
                        use_sigmoid=True,
                        weight=5.0),
                    dict(
                        eps=1.0,
                        pred_act=True,
                        type='mmdet.DiceCost',
                        weight=5.0),
                ],
                type='mmdet.HungarianAssigner'),
            importance_sample_ratio=0.75,
            num_points=12544,
            oversample_ratio=3.0,
            sampler=dict(type='mmdet.MaskPseudoSampler')),
        transformer_decoder=dict(
            init_cfg=None,
            layer_cfg=dict(
                cross_attn_cfg=dict(
                    attn_drop=0.0,
                    batch_first=True,
                    dropout_layer=None,
                    embed_dims=256,
                    num_heads=8,
                    proj_drop=0.0),
                ffn_cfg=dict(
                    act_cfg=dict(inplace=True, type='ReLU'),
                    add_identity=True,
                    dropout_layer=None,
                    embed_dims=256,
                    feedforward_channels=2048,
                    ffn_drop=0.0,
                    num_fcs=2),
                self_attn_cfg=dict(
                    attn_drop=0.0,
                    batch_first=True,
                    dropout_layer=None,
                    embed_dims=256,
                    num_heads=8,
                    proj_drop=0.0)),
            num_layers=9,
            return_intermediate=True),
        type='Mask2FormerHead'),
    test_cfg=dict(mode='whole'),
    train_cfg=dict(),
    type='EncoderDecoder')
num_classes = 150
optim_wrapper = dict(
    clip_grad=dict(max_norm=0.01, norm_type=2),
    optimizer=dict(
        betas=(
            0.9,
            0.999,
        ),
        eps=1e-08,
        lr=0.0001,
        type='AdamW',
        weight_decay=0.05),
    paramwise_cfg=dict(
        custom_keys=dict({
            'absolute_pos_embed':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone':
            dict(decay_mult=1.0, lr_mult=0.1),
            'backbone.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.patch_embed.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.0.blocks.0.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.0.blocks.1.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.0.downsample.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.1.blocks.0.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.1.blocks.1.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.1.downsample.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.0.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.1.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.10.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.11.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.12.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.13.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.14.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.15.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.16.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.17.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.2.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.3.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.4.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.5.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.6.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.7.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.8.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.9.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.downsample.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.3.blocks.0.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.3.blocks.1.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'level_embed':
            dict(decay_mult=0.0, lr_mult=1.0),
            'query_embed':
            dict(decay_mult=0.0, lr_mult=1.0),
            'query_feat':
            dict(decay_mult=0.0, lr_mult=1.0),
            'relative_position_bias_table':
            dict(decay_mult=0.0, lr_mult=0.1)
        }),
        norm_decay_mult=0.0),
    type='OptimWrapper')
optimizer = dict(
    betas=(
        0.9,
        0.999,
    ),
    eps=1e-08,
    lr=0.0001,
    type='AdamW',
    weight_decay=0.05)
param_scheduler = [
    dict(
        begin=0,
        by_epoch=False,
        end=160000,
        eta_min=0,
        power=0.9,
        type='PolyLR'),
]
pretrained = 'https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/swin/swin_base_patch4_window12_384_20220317-55b0104a.pth'
resume = False
test_cfg = dict(type='TestLoop')
test_dataloader = dict(
    batch_size=1,
    dataset=dict(
        data_prefix=dict(
            img_path='images/validation',
            seg_map_path='annotations/validation'),
        data_root='data/ade/ADEChallengeData2016',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(keep_ratio=True, scale=(
                2560,
                640,
            ), type='Resize'),
            dict(reduce_zero_label=True, type='LoadAnnotations'),
            dict(type='PackSegInputs'),
        ],
        type='ADE20KDataset'),
    num_workers=4,
    persistent_workers=True,
    sampler=dict(shuffle=False, type='DefaultSampler'))
test_evaluator = dict(
    iou_metrics=[
        'mIoU',
    ], type='IoUMetric')
test_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(keep_ratio=True, scale=(
        2560,
        640,
    ), type='Resize'),
    dict(reduce_zero_label=True, type='LoadAnnotations'),
    dict(type='PackSegInputs'),
]
train_cfg = dict(
    max_iters=160000, type='IterBasedTrainLoop', val_interval=5000)
train_dataloader = dict(
    batch_size=2,
    dataset=dict(
        data_prefix=dict(
            img_path='images/training', seg_map_path='annotations/training'),
        data_root='data/ade/ADEChallengeData2016',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(reduce_zero_label=True, type='LoadAnnotations'),
            dict(
                max_size=2560,
                resize_type='ResizeShortestEdge',
                scales=[
                    320,
                    384,
                    448,
                    512,
                    576,
                    640,
                    704,
                    768,
                    832,
                    896,
                    960,
                    1024,
                    1088,
                    1152,
                    1216,
                    1280,
                ],
                type='RandomChoiceResize'),
            dict(
                cat_max_ratio=0.75, crop_size=(
                    512,
                    512,
                ), type='RandomCrop'),
            dict(prob=0.5, type='RandomFlip'),
            dict(type='PhotoMetricDistortion'),
            dict(type='PackSegInputs'),
        ],
        type='ADE20KDataset'),
    num_workers=4,
    persistent_workers=True,
    sampler=dict(shuffle=True, type='InfiniteSampler'))
train_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(reduce_zero_label=True, type='LoadAnnotations'),
    dict(
        max_size=2560,
        resize_type='ResizeShortestEdge',
        scales=[
            320,
            384,
            448,
            512,
            576,
            640,
            704,
            768,
            832,
            896,
            960,
            1024,
            1088,
            1152,
            1216,
            1280,
        ],
        type='RandomChoiceResize'),
    dict(cat_max_ratio=0.75, crop_size=(
        512,
        512,
    ), type='RandomCrop'),
    dict(prob=0.5, type='RandomFlip'),
    dict(type='PhotoMetricDistortion'),
    dict(type='PackSegInputs'),
]
tta_model = dict(type='SegTTAModel')
tta_pipeline = [
    dict(backend_args=None, type='LoadImageFromFile'),
    dict(
        transforms=[
            [
                dict(keep_ratio=True, scale_factor=0.5, type='Resize'),
                dict(keep_ratio=True, scale_factor=0.75, type='Resize'),
                dict(keep_ratio=True, scale_factor=1.0, type='Resize'),
                dict(keep_ratio=True, scale_factor=1.25, type='Resize'),
                dict(keep_ratio=True, scale_factor=1.5, type='Resize'),
                dict(keep_ratio=True, scale_factor=1.75, type='Resize'),
            ],
            [
                dict(direction='horizontal', prob=0.0, type='RandomFlip'),
                dict(direction='horizontal', prob=1.0, type='RandomFlip'),
            ],
            [
                dict(type='LoadAnnotations'),
            ],
            [
                dict(type='PackSegInputs'),
            ],
        ],
        type='TestTimeAug'),
]
val_cfg = dict(type='ValLoop')
val_dataloader = dict(
    batch_size=1,
    dataset=dict(
        data_prefix=dict(
            img_path='images/validation',
            seg_map_path='annotations/validation'),
        data_root='data/ade/ADEChallengeData2016',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(keep_ratio=True, scale=(
                2560,
                640,
            ), type='Resize'),
            dict(reduce_zero_label=True, type='LoadAnnotations'),
            dict(type='PackSegInputs'),
        ],
        type='ADE20KDataset'),
    num_workers=4,
    persistent_workers=True,
    sampler=dict(shuffle=False, type='DefaultSampler'))
val_evaluator = dict(
    iou_metrics=[
        'mIoU',
    ], type='IoUMetric')
vis_backends = [
    dict(type='LocalVisBackend'),
]
visualizer = dict(
    name='visualizer',
    type='SegLocalVisualizer',
    vis_backends=[
        dict(type='LocalVisBackend'),
    ])
work_dir = '../corruptions/work_dirs/ade20k/mask2former/mask2former_swin-b-in1k-384x384-pre_8xb2-160k_ade20k-512x512/snow'

/pfs/work7/workspace/scratch/ma_mkacar-team_project_fss2024/benchmarking_robustness/semantic_segmentation/mmsegmentation/mmseg/ops_dcnv3/modules/dcnv3.py:20: UserWarning: Now, we support DCNv4 in InternImage.
  warnings.warn('Now, we support DCNv4 in InternImage.')
10/06 08:56:42 - mmengine - INFO - Distributed training is not used, all SyncBatchNorm (SyncBN) layers in the model will be automatically reverted to BatchNormXd layers if they are used.
10/06 08:56:42 - mmengine - INFO - Hooks will be executed in the following order:
before_run:
(VERY_HIGH   ) RuntimeInfoHook                    
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
before_train:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_train_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(NORMAL      ) DistSamplerSeedHook                
 -------------------- 
before_train_iter:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_train_iter:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(NORMAL      ) SegVisualizationHook               
(BELOW_NORMAL) LoggerHook                         
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
after_train_epoch:
(NORMAL      ) IterTimerHook                      
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_val:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
before_val_epoch:
(NORMAL      ) IterTimerHook                      
 -------------------- 
before_val_iter:
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_val_iter:
(NORMAL      ) IterTimerHook                      
(NORMAL      ) SegVisualizationHook               
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_val_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
after_val:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
after_train:
(VERY_HIGH   ) RuntimeInfoHook                    
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_test:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
before_test_epoch:
(NORMAL      ) IterTimerHook                      
 -------------------- 
before_test_iter:
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_test_iter:
(NORMAL      ) IterTimerHook                      
(NORMAL      ) SegVisualizationHook               
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_test_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_test:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
after_run:
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
10/06 08:56:43 - mmengine - WARNING - The prefix is not set in metric class IoUMetric.
Loads checkpoint by local backend from path: ../checkpoint_files/ade20k/mask2former/best_mIoU_iter_155000.pth
10/06 08:56:44 - mmengine - INFO - Load checkpoint from ../checkpoint_files/ade20k/mask2former/best_mIoU_iter_155000.pth
10/06 08:57:29 - mmengine - INFO - Iter(test) [  50/2000]    eta: 0:29:39  time: 0.7450  data_time: 0.0019  memory: 17181  
10/06 08:58:06 - mmengine - INFO - Iter(test) [ 100/2000]    eta: 0:26:01  time: 0.7455  data_time: 0.0020  memory: 17180  
10/06 08:58:38 - mmengine - INFO - Iter(test) [ 150/2000]    eta: 0:23:33  time: 0.6493  data_time: 0.0019  memory: 17150  
10/06 08:59:11 - mmengine - INFO - Iter(test) [ 200/2000]    eta: 0:22:06  time: 0.7041  data_time: 0.0018  memory: 17194  
10/06 08:59:45 - mmengine - INFO - Iter(test) [ 250/2000]    eta: 0:21:06  time: 0.5938  data_time: 0.0018  memory: 17202  
10/06 09:00:17 - mmengine - INFO - Iter(test) [ 300/2000]    eta: 0:20:07  time: 0.5008  data_time: 0.0018  memory: 17180  
10/06 09:00:49 - mmengine - INFO - Iter(test) [ 350/2000]    eta: 0:19:14  time: 0.6048  data_time: 0.0017  memory: 17178  
10/06 09:01:16 - mmengine - INFO - Iter(test) [ 400/2000]    eta: 0:18:10  time: 0.5165  data_time: 0.0017  memory: 17177  
10/06 09:01:41 - mmengine - INFO - Iter(test) [ 450/2000]    eta: 0:17:03  time: 0.5183  data_time: 0.0017  memory: 17147  
10/06 09:02:08 - mmengine - INFO - Iter(test) [ 500/2000]    eta: 0:16:12  time: 0.5607  data_time: 0.0017  memory: 17149  
10/06 09:02:36 - mmengine - INFO - Iter(test) [ 550/2000]    eta: 0:15:27  time: 0.5979  data_time: 0.0018  memory: 17179  
10/06 09:03:00 - mmengine - INFO - Iter(test) [ 600/2000]    eta: 0:14:38  time: 0.5145  data_time: 0.0023  memory: 3938  
10/06 09:03:28 - mmengine - INFO - Iter(test) [ 650/2000]    eta: 0:14:00  time: 0.5979  data_time: 0.0017  memory: 17181  
10/06 09:03:59 - mmengine - INFO - Iter(test) [ 700/2000]    eta: 0:13:28  time: 0.5599  data_time: 0.0019  memory: 17177  
10/06 09:04:29 - mmengine - INFO - Iter(test) [ 750/2000]    eta: 0:12:55  time: 0.8369  data_time: 0.0017  memory: 17184  
10/06 09:04:53 - mmengine - INFO - Iter(test) [ 800/2000]    eta: 0:12:14  time: 0.4945  data_time: 0.0019  memory: 17151  
10/06 09:05:18 - mmengine - INFO - Iter(test) [ 850/2000]    eta: 0:11:35  time: 0.4988  data_time: 0.0019  memory: 1428  
10/06 09:05:43 - mmengine - INFO - Iter(test) [ 900/2000]    eta: 0:10:59  time: 0.5082  data_time: 0.0016  memory: 17138  
10/06 09:06:12 - mmengine - INFO - Iter(test) [ 950/2000]    eta: 0:10:28  time: 0.6450  data_time: 0.0018  memory: 17133  
10/06 09:06:37 - mmengine - INFO - Iter(test) [1000/2000]    eta: 0:09:53  time: 0.4711  data_time: 0.0018  memory: 17096  
10/06 09:07:04 - mmengine - INFO - Iter(test) [1050/2000]    eta: 0:09:20  time: 0.5848  data_time: 0.0018  memory: 17182  
10/06 09:07:31 - mmengine - INFO - Iter(test) [1100/2000]    eta: 0:08:49  time: 0.4859  data_time: 0.0019  memory: 17175  
10/06 09:07:56 - mmengine - INFO - Iter(test) [1150/2000]    eta: 0:08:16  time: 0.4928  data_time: 0.0018  memory: 17117  
10/06 09:08:21 - mmengine - INFO - Iter(test) [1200/2000]    eta: 0:07:44  time: 0.4732  data_time: 0.0018  memory: 17113  
10/06 09:08:47 - mmengine - INFO - Iter(test) [1250/2000]    eta: 0:07:13  time: 0.5532  data_time: 0.0018  memory: 17172  
10/06 09:09:11 - mmengine - INFO - Iter(test) [1300/2000]    eta: 0:06:41  time: 0.4999  data_time: 0.0018  memory: 1430  
10/06 09:09:36 - mmengine - INFO - Iter(test) [1350/2000]    eta: 0:06:11  time: 0.4519  data_time: 0.0018  memory: 17110  
10/06 09:10:03 - mmengine - INFO - Iter(test) [1400/2000]    eta: 0:05:42  time: 0.5342  data_time: 0.0018  memory: 17154  
10/06 09:10:27 - mmengine - INFO - Iter(test) [1450/2000]    eta: 0:05:12  time: 0.5572  data_time: 0.0017  memory: 17130  
10/06 09:10:52 - mmengine - INFO - Iter(test) [1500/2000]    eta: 0:04:42  time: 0.4562  data_time: 0.0017  memory: 17125  
10/06 09:11:18 - mmengine - INFO - Iter(test) [1550/2000]    eta: 0:04:13  time: 0.4895  data_time: 0.0018  memory: 17154  
10/06 09:11:42 - mmengine - INFO - Iter(test) [1600/2000]    eta: 0:03:44  time: 0.4941  data_time: 0.0019  memory: 1425  
10/06 09:12:07 - mmengine - INFO - Iter(test) [1650/2000]    eta: 0:03:15  time: 0.4482  data_time: 0.0017  memory: 17192  
10/06 09:12:36 - mmengine - INFO - Iter(test) [1700/2000]    eta: 0:02:47  time: 0.4854  data_time: 0.0020  memory: 17151  
10/06 09:13:02 - mmengine - INFO - Iter(test) [1750/2000]    eta: 0:02:19  time: 0.4814  data_time: 0.0017  memory: 17111  
10/06 09:13:26 - mmengine - INFO - Iter(test) [1800/2000]    eta: 0:01:51  time: 0.4897  data_time: 0.0020  memory: 17114  
10/06 09:13:51 - mmengine - INFO - Iter(test) [1850/2000]    eta: 0:01:23  time: 0.4926  data_time: 0.0020  memory: 1317  
10/06 09:14:14 - mmengine - INFO - Iter(test) [1900/2000]    eta: 0:00:55  time: 0.5344  data_time: 0.0017  memory: 17182  
10/06 09:14:40 - mmengine - INFO - Iter(test) [1950/2000]    eta: 0:00:27  time: 0.4762  data_time: 0.0018  memory: 17197  
10/06 09:15:05 - mmengine - INFO - Iter(test) [2000/2000]    eta: 0:00:00  time: 0.4389  data_time: 0.0015  memory: 17131  
10/06 09:15:05 - mmengine - INFO - per class results:
10/06 09:15:05 - mmengine - INFO - 
+---------------------+-------+-------+
|        Class        |  IoU  |  Acc  |
+---------------------+-------+-------+
|         wall        | 70.63 | 89.05 |
|       building      | 77.37 | 93.03 |
|         sky         | 90.85 | 93.59 |
|        floor        | 75.86 |  88.6 |
|         tree        | 71.86 | 84.76 |
|       ceiling       | 74.93 | 79.95 |
|         road        | 76.16 | 81.94 |
|         bed         | 81.38 |  91.9 |
|      windowpane     | 54.91 | 70.73 |
|        grass        | 58.43 | 71.86 |
|       cabinet       | 51.08 | 65.33 |
|       sidewalk      | 56.34 | 77.26 |
|        person       | 77.27 | 83.85 |
|        earth        | 32.78 | 46.75 |
|         door        | 25.78 | 29.77 |
|        table        | 47.71 | 62.57 |
|       mountain      | 49.78 | 64.94 |
|        plant        | 49.62 | 56.68 |
|       curtain       | 67.41 | 75.27 |
|        chair        | 45.69 | 53.81 |
|         car         | 83.22 | 91.44 |
|        water        |  45.5 | 75.09 |
|       painting      | 62.53 | 70.18 |
|         sofa        |  57.5 | 77.87 |
|        shelf        | 39.38 | 68.16 |
|        house        | 25.69 | 29.49 |
|         sea         | 57.34 | 80.25 |
|        mirror       | 55.51 | 79.15 |
|         rug         | 41.82 | 44.11 |
|        field        | 27.24 | 70.74 |
|       armchair      | 23.37 | 30.78 |
|         seat        | 37.72 | 63.63 |
|        fence        |  34.9 | 65.18 |
|         desk        | 28.44 | 53.71 |
|         rock        |  47.7 | 65.69 |
|       wardrobe      | 41.03 | 59.62 |
|         lamp        | 56.02 | 64.06 |
|       bathtub       | 59.45 | 73.03 |
|       railing       |  34.6 | 43.54 |
|       cushion       | 43.69 | 50.51 |
|         base        | 21.79 | 44.04 |
|         box         | 24.19 | 36.53 |
|        column       | 31.75 | 35.71 |
|      signboard      | 37.06 |  43.7 |
|   chest of drawers  | 40.62 | 49.51 |
|       counter       | 28.48 | 37.11 |
|         sand        | 36.57 | 45.89 |
|         sink        | 61.81 | 68.63 |
|      skyscraper     | 34.43 | 37.08 |
|      fireplace      | 56.64 |  75.2 |
|     refrigerator    | 55.06 | 59.14 |
|      grandstand     | 21.98 | 82.92 |
|         path        | 13.06 | 17.72 |
|        stairs       | 29.83 | 39.47 |
|        runway       | 59.08 | 83.51 |
|         case        | 52.29 | 72.42 |
|      pool table     | 90.37 |  94.0 |
|        pillow       | 47.95 | 60.29 |
|     screen door     | 56.36 |  84.3 |
|       stairway      | 25.88 | 35.04 |
|        river        | 18.57 | 22.37 |
|        bridge       | 29.79 | 36.69 |
|       bookcase      | 31.36 | 38.48 |
|        blind        |  10.5 | 11.04 |
|     coffee table    | 50.18 | 62.84 |
|        toilet       | 76.83 | 80.44 |
|        flower       | 31.77 |  43.9 |
|         book        |  43.5 | 55.22 |
|         hill        |  4.26 |  9.48 |
|        bench        |  30.3 | 38.54 |
|      countertop     | 55.32 | 77.67 |
|        stove        | 60.59 | 69.81 |
|         palm        | 44.22 | 52.29 |
|    kitchen island   | 38.07 |  72.6 |
|       computer      | 51.74 | 54.98 |
|     swivel chair    | 36.07 | 51.71 |
|         boat        | 41.67 | 53.79 |
|         bar         | 12.43 | 15.77 |
|    arcade machine   | 30.76 | 34.86 |
|        hovel        | 27.75 | 51.06 |
|         bus         | 80.57 | 94.94 |
|        towel        | 54.15 | 58.31 |
|        light        | 45.23 | 56.34 |
|        truck        |  19.4 | 27.91 |
|        tower        | 26.67 | 53.19 |
|      chandelier     | 60.31 | 71.47 |
|        awning       | 28.13 | 30.54 |
|     streetlight     |  24.8 | 34.28 |
|        booth        | 27.32 | 27.41 |
| television receiver |  42.8 | 46.76 |
|       airplane      | 54.04 | 62.12 |
|      dirt track     | 17.83 | 19.78 |
|       apparel       | 31.39 | 45.67 |
|         pole        | 25.21 | 36.97 |
|         land        |  0.09 |  0.11 |
|      bannister      |  6.24 |  8.71 |
|      escalator      |  15.4 | 15.72 |
|       ottoman       | 27.47 | 34.41 |
|        bottle       | 22.31 | 29.22 |
|        buffet       | 35.55 | 48.11 |
|        poster       | 11.87 |  13.1 |
|        stage        |  2.54 |  4.38 |
|         van         | 40.05 | 54.72 |
|         ship        | 64.63 | 94.85 |
|       fountain      | 31.94 |  43.1 |
|    conveyer belt    |  47.3 | 62.46 |
|        canopy       | 15.39 |  21.6 |
|        washer       | 68.35 | 69.05 |
|      plaything      | 10.33 | 17.32 |
|    swimming pool    | 25.46 | 50.14 |
|        stool        | 32.34 | 46.32 |
|        barrel       | 51.93 | 62.58 |
|        basket       | 18.69 | 30.17 |
|      waterfall      | 57.44 | 91.27 |
|         tent        | 84.76 | 98.43 |
|         bag         | 10.28 | 12.69 |
|       minibike      | 52.89 | 62.42 |
|        cradle       |  53.3 | 80.29 |
|         oven        | 29.01 | 42.67 |
|         ball        | 23.35 | 31.55 |
|         food        | 54.06 |  68.5 |
|         step        |  2.38 |  2.83 |
|         tank        | 22.51 | 23.44 |
|      trade name     | 29.45 | 35.65 |
|      microwave      | 34.49 | 36.93 |
|         pot         | 26.78 | 29.66 |
|        animal       | 60.89 | 63.65 |
|       bicycle       | 52.36 |  69.7 |
|         lake        |  0.0  |  0.0  |
|      dishwasher     | 46.87 | 54.56 |
|        screen       |  68.3 |  76.2 |
|       blanket       |  4.99 |  5.72 |
|      sculpture      | 44.62 |  58.2 |
|         hood        | 17.09 | 17.46 |
|        sconce       | 30.15 | 40.92 |
|         vase        | 37.39 | 49.93 |
|    traffic light    | 29.08 | 38.32 |
|         tray        |  3.92 |  5.16 |
|        ashcan       | 35.15 |  44.0 |
|         fan         | 51.94 | 68.25 |
|         pier        | 50.67 | 58.16 |
|      crt screen     | 13.07 | 30.67 |
|        plate        | 53.12 | 63.25 |
|       monitor       |  7.84 |  8.13 |
|    bulletin board   | 36.28 | 38.22 |
|        shower       |  9.4  | 14.86 |
|       radiator      | 42.06 |  43.8 |
|        glass        | 14.09 | 15.78 |
|        clock        | 26.73 | 36.15 |
|         flag        | 37.98 |  42.4 |
+---------------------+-------+-------+
10/06 09:15:05 - mmengine - INFO - Iter(test) [2000/2000]    aAcc: 77.8900  mIoU: 40.0700  mAcc: 51.2300  data_time: 0.0020  time: 0.5506
Finished processing corruption type: snow
Processing corruption type: frost
10/06 09:15:09 - mmengine - INFO - 
------------------------------------------------------------
System environment:
    sys.platform: linux
    Python: 3.10.13 | packaged by conda-forge | (main, Dec 23 2023, 15:36:39) [GCC 12.3.0]
    CUDA available: True
    MUSA available: False
    numpy_random_seed: 1573155411
    GPU 0: Tesla V100-SXM2-32GB
    CUDA_HOME: /opt/bwhpc/common/devel/cuda/11.7
    NVCC: Cuda compilation tools, release 11.7, V11.7.99
    GCC: gcc (GCC) 8.5.0 20210514 (Red Hat 8.5.0-18)
    PyTorch: 1.13.1
    PyTorch compiling details: PyTorch built with:
  - GCC 9.3
  - C++ Version: 201402
  - Intel(R) oneAPI Math Kernel Library Version 2023.1-Product Build 20230303 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v2.6.0 (Git Hash 52b5f107dd9cf10910aaa19cb47f3abf9b349815)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - LAPACK is enabled (usually provided by MKL)
  - NNPACK is enabled
  - CPU capability usage: AVX2
  - CUDA Runtime 11.7
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_61,code=sm_61;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86;-gencode;arch=compute_37,code=compute_37
  - CuDNN 8.5
  - Magma 2.6.1
  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.7, CUDNN_VERSION=8.5.0, CXX_COMPILER=/opt/rh/devtoolset-9/root/usr/bin/c++, CXX_FLAGS= -fabi-version=11 -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -DEDGE_PROFILER_USE_KINETO -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Werror=non-virtual-dtor -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wunused-local-typedefs -Wno-unused-parameter -Wno-unused-function -Wno-unused-result -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Werror=cast-function-type -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.13.1, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, USE_ROCM=OFF, 

    TorchVision: 0.14.1
    OpenCV: 3.4.18
    MMEngine: 0.10.4

Runtime environment:
    cudnn_benchmark: True
    mp_cfg: {'mp_start_method': 'fork', 'opencv_num_threads': 0}
    dist_cfg: {'backend': 'nccl'}
    seed: 1573155411
    Distributed launcher: none
    Distributed training: False
    GPU number: 1
------------------------------------------------------------

10/06 09:15:09 - mmengine - INFO - Config:
auto_scale_lr = dict(base_batch_size=16, enable=False)
backbone_embed_multi = dict(decay_mult=0.0, lr_mult=0.1)
backbone_norm_multi = dict(decay_mult=0.0, lr_mult=0.1)
crop_size = (
    512,
    512,
)
custom_keys = dict({
    'absolute_pos_embed':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone':
    dict(decay_mult=1.0, lr_mult=0.1),
    'backbone.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.patch_embed.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.0.blocks.0.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.0.blocks.1.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.0.downsample.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.1.blocks.0.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.1.blocks.1.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.1.downsample.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.0.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.1.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.10.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.11.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.12.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.13.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.14.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.15.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.16.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.17.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.2.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.3.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.4.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.5.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.6.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.7.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.8.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.9.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.downsample.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.3.blocks.0.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.3.blocks.1.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'level_embed':
    dict(decay_mult=0.0, lr_mult=1.0),
    'query_embed':
    dict(decay_mult=0.0, lr_mult=1.0),
    'query_feat':
    dict(decay_mult=0.0, lr_mult=1.0),
    'relative_position_bias_table':
    dict(decay_mult=0.0, lr_mult=0.1)
})
data_root = 'data/ade/ADEChallengeData2016'
dataset_type = 'ADE20KDataset'
default_hooks = dict(
    checkpoint=dict(
        by_epoch=False, interval=5000, save_best='mIoU',
        type='CheckpointHook'),
    logger=dict(interval=50, log_metric_by_epoch=False, type='LoggerHook'),
    param_scheduler=dict(type='ParamSchedulerHook'),
    sampler_seed=dict(type='DistSamplerSeedHook'),
    timer=dict(type='IterTimerHook'),
    visualization=dict(type='SegVisualizationHook'))
default_scope = 'mmseg'
depths = [
    2,
    2,
    18,
    2,
]
embed_multi = dict(decay_mult=0.0, lr_mult=1.0)
env_cfg = dict(
    cudnn_benchmark=True,
    dist_cfg=dict(backend='nccl'),
    mp_cfg=dict(mp_start_method='fork', opencv_num_threads=0))
img_ratios = [
    0.5,
    0.75,
    1.0,
    1.25,
    1.5,
    1.75,
]
launcher = 'none'
load_from = '../checkpoint_files/ade20k/mask2former/best_mIoU_iter_155000.pth'
log_level = 'INFO'
log_processor = dict(by_epoch=False)
model = dict(
    backbone=dict(
        attn_drop_rate=0.0,
        depths=[
            2,
            2,
            18,
            2,
        ],
        drop_path_rate=0.3,
        drop_rate=0.0,
        embed_dims=128,
        frozen_stages=-1,
        init_cfg=dict(
            checkpoint=
            'https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/swin/swin_base_patch4_window12_384_20220317-55b0104a.pth',
            type='Pretrained'),
        mlp_ratio=4,
        num_heads=[
            4,
            8,
            16,
            32,
        ],
        out_indices=(
            0,
            1,
            2,
            3,
        ),
        patch_norm=True,
        pretrain_img_size=384,
        qk_scale=None,
        qkv_bias=True,
        type='SwinTransformer',
        window_size=12,
        with_cp=False),
    data_preprocessor=dict(
        bgr_to_rgb=True,
        corruption='frost',
        mean=[
            123.675,
            116.28,
            103.53,
        ],
        pad_val=0,
        seg_pad_val=255,
        size=(
            512,
            512,
        ),
        std=[
            58.395,
            57.12,
            57.375,
        ],
        type='SegDataPreProcessor'),
    decode_head=dict(
        align_corners=False,
        enforce_decoder_input_project=False,
        feat_channels=256,
        in_channels=[
            128,
            256,
            512,
            1024,
        ],
        loss_cls=dict(
            class_weight=[
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                0.1,
            ],
            loss_weight=2.0,
            reduction='mean',
            type='mmdet.CrossEntropyLoss',
            use_sigmoid=False),
        loss_dice=dict(
            activate=True,
            eps=1.0,
            loss_weight=5.0,
            naive_dice=True,
            reduction='mean',
            type='mmdet.DiceLoss',
            use_sigmoid=True),
        loss_mask=dict(
            loss_weight=5.0,
            reduction='mean',
            type='mmdet.CrossEntropyLoss',
            use_sigmoid=True),
        num_classes=150,
        num_queries=100,
        num_transformer_feat_level=3,
        out_channels=256,
        pixel_decoder=dict(
            act_cfg=dict(type='ReLU'),
            encoder=dict(
                init_cfg=None,
                layer_cfg=dict(
                    ffn_cfg=dict(
                        act_cfg=dict(inplace=True, type='ReLU'),
                        embed_dims=256,
                        feedforward_channels=1024,
                        ffn_drop=0.0,
                        num_fcs=2),
                    self_attn_cfg=dict(
                        batch_first=True,
                        dropout=0.0,
                        embed_dims=256,
                        im2col_step=64,
                        init_cfg=None,
                        norm_cfg=None,
                        num_heads=8,
                        num_levels=3,
                        num_points=4)),
                num_layers=6),
            init_cfg=None,
            norm_cfg=dict(num_groups=32, type='GN'),
            num_outs=3,
            positional_encoding=dict(normalize=True, num_feats=128),
            type='mmdet.MSDeformAttnPixelDecoder'),
        positional_encoding=dict(normalize=True, num_feats=128),
        strides=[
            4,
            8,
            16,
            32,
        ],
        train_cfg=dict(
            assigner=dict(
                match_costs=[
                    dict(type='mmdet.ClassificationCost', weight=2.0),
                    dict(
                        type='mmdet.CrossEntropyLossCost',
                        use_sigmoid=True,
                        weight=5.0),
                    dict(
                        eps=1.0,
                        pred_act=True,
                        type='mmdet.DiceCost',
                        weight=5.0),
                ],
                type='mmdet.HungarianAssigner'),
            importance_sample_ratio=0.75,
            num_points=12544,
            oversample_ratio=3.0,
            sampler=dict(type='mmdet.MaskPseudoSampler')),
        transformer_decoder=dict(
            init_cfg=None,
            layer_cfg=dict(
                cross_attn_cfg=dict(
                    attn_drop=0.0,
                    batch_first=True,
                    dropout_layer=None,
                    embed_dims=256,
                    num_heads=8,
                    proj_drop=0.0),
                ffn_cfg=dict(
                    act_cfg=dict(inplace=True, type='ReLU'),
                    add_identity=True,
                    dropout_layer=None,
                    embed_dims=256,
                    feedforward_channels=2048,
                    ffn_drop=0.0,
                    num_fcs=2),
                self_attn_cfg=dict(
                    attn_drop=0.0,
                    batch_first=True,
                    dropout_layer=None,
                    embed_dims=256,
                    num_heads=8,
                    proj_drop=0.0)),
            num_layers=9,
            return_intermediate=True),
        type='Mask2FormerHead'),
    test_cfg=dict(mode='whole'),
    train_cfg=dict(),
    type='EncoderDecoder')
num_classes = 150
optim_wrapper = dict(
    clip_grad=dict(max_norm=0.01, norm_type=2),
    optimizer=dict(
        betas=(
            0.9,
            0.999,
        ),
        eps=1e-08,
        lr=0.0001,
        type='AdamW',
        weight_decay=0.05),
    paramwise_cfg=dict(
        custom_keys=dict({
            'absolute_pos_embed':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone':
            dict(decay_mult=1.0, lr_mult=0.1),
            'backbone.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.patch_embed.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.0.blocks.0.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.0.blocks.1.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.0.downsample.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.1.blocks.0.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.1.blocks.1.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.1.downsample.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.0.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.1.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.10.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.11.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.12.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.13.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.14.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.15.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.16.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.17.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.2.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.3.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.4.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.5.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.6.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.7.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.8.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.9.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.downsample.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.3.blocks.0.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.3.blocks.1.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'level_embed':
            dict(decay_mult=0.0, lr_mult=1.0),
            'query_embed':
            dict(decay_mult=0.0, lr_mult=1.0),
            'query_feat':
            dict(decay_mult=0.0, lr_mult=1.0),
            'relative_position_bias_table':
            dict(decay_mult=0.0, lr_mult=0.1)
        }),
        norm_decay_mult=0.0),
    type='OptimWrapper')
optimizer = dict(
    betas=(
        0.9,
        0.999,
    ),
    eps=1e-08,
    lr=0.0001,
    type='AdamW',
    weight_decay=0.05)
param_scheduler = [
    dict(
        begin=0,
        by_epoch=False,
        end=160000,
        eta_min=0,
        power=0.9,
        type='PolyLR'),
]
pretrained = 'https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/swin/swin_base_patch4_window12_384_20220317-55b0104a.pth'
resume = False
test_cfg = dict(type='TestLoop')
test_dataloader = dict(
    batch_size=1,
    dataset=dict(
        data_prefix=dict(
            img_path='images/validation',
            seg_map_path='annotations/validation'),
        data_root='data/ade/ADEChallengeData2016',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(keep_ratio=True, scale=(
                2560,
                640,
            ), type='Resize'),
            dict(reduce_zero_label=True, type='LoadAnnotations'),
            dict(type='PackSegInputs'),
        ],
        type='ADE20KDataset'),
    num_workers=4,
    persistent_workers=True,
    sampler=dict(shuffle=False, type='DefaultSampler'))
test_evaluator = dict(
    iou_metrics=[
        'mIoU',
    ], type='IoUMetric')
test_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(keep_ratio=True, scale=(
        2560,
        640,
    ), type='Resize'),
    dict(reduce_zero_label=True, type='LoadAnnotations'),
    dict(type='PackSegInputs'),
]
train_cfg = dict(
    max_iters=160000, type='IterBasedTrainLoop', val_interval=5000)
train_dataloader = dict(
    batch_size=2,
    dataset=dict(
        data_prefix=dict(
            img_path='images/training', seg_map_path='annotations/training'),
        data_root='data/ade/ADEChallengeData2016',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(reduce_zero_label=True, type='LoadAnnotations'),
            dict(
                max_size=2560,
                resize_type='ResizeShortestEdge',
                scales=[
                    320,
                    384,
                    448,
                    512,
                    576,
                    640,
                    704,
                    768,
                    832,
                    896,
                    960,
                    1024,
                    1088,
                    1152,
                    1216,
                    1280,
                ],
                type='RandomChoiceResize'),
            dict(
                cat_max_ratio=0.75, crop_size=(
                    512,
                    512,
                ), type='RandomCrop'),
            dict(prob=0.5, type='RandomFlip'),
            dict(type='PhotoMetricDistortion'),
            dict(type='PackSegInputs'),
        ],
        type='ADE20KDataset'),
    num_workers=4,
    persistent_workers=True,
    sampler=dict(shuffle=True, type='InfiniteSampler'))
train_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(reduce_zero_label=True, type='LoadAnnotations'),
    dict(
        max_size=2560,
        resize_type='ResizeShortestEdge',
        scales=[
            320,
            384,
            448,
            512,
            576,
            640,
            704,
            768,
            832,
            896,
            960,
            1024,
            1088,
            1152,
            1216,
            1280,
        ],
        type='RandomChoiceResize'),
    dict(cat_max_ratio=0.75, crop_size=(
        512,
        512,
    ), type='RandomCrop'),
    dict(prob=0.5, type='RandomFlip'),
    dict(type='PhotoMetricDistortion'),
    dict(type='PackSegInputs'),
]
tta_model = dict(type='SegTTAModel')
tta_pipeline = [
    dict(backend_args=None, type='LoadImageFromFile'),
    dict(
        transforms=[
            [
                dict(keep_ratio=True, scale_factor=0.5, type='Resize'),
                dict(keep_ratio=True, scale_factor=0.75, type='Resize'),
                dict(keep_ratio=True, scale_factor=1.0, type='Resize'),
                dict(keep_ratio=True, scale_factor=1.25, type='Resize'),
                dict(keep_ratio=True, scale_factor=1.5, type='Resize'),
                dict(keep_ratio=True, scale_factor=1.75, type='Resize'),
            ],
            [
                dict(direction='horizontal', prob=0.0, type='RandomFlip'),
                dict(direction='horizontal', prob=1.0, type='RandomFlip'),
            ],
            [
                dict(type='LoadAnnotations'),
            ],
            [
                dict(type='PackSegInputs'),
            ],
        ],
        type='TestTimeAug'),
]
val_cfg = dict(type='ValLoop')
val_dataloader = dict(
    batch_size=1,
    dataset=dict(
        data_prefix=dict(
            img_path='images/validation',
            seg_map_path='annotations/validation'),
        data_root='data/ade/ADEChallengeData2016',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(keep_ratio=True, scale=(
                2560,
                640,
            ), type='Resize'),
            dict(reduce_zero_label=True, type='LoadAnnotations'),
            dict(type='PackSegInputs'),
        ],
        type='ADE20KDataset'),
    num_workers=4,
    persistent_workers=True,
    sampler=dict(shuffle=False, type='DefaultSampler'))
val_evaluator = dict(
    iou_metrics=[
        'mIoU',
    ], type='IoUMetric')
vis_backends = [
    dict(type='LocalVisBackend'),
]
visualizer = dict(
    name='visualizer',
    type='SegLocalVisualizer',
    vis_backends=[
        dict(type='LocalVisBackend'),
    ])
work_dir = '../corruptions/work_dirs/ade20k/mask2former/mask2former_swin-b-in1k-384x384-pre_8xb2-160k_ade20k-512x512/frost'

/pfs/work7/workspace/scratch/ma_mkacar-team_project_fss2024/benchmarking_robustness/semantic_segmentation/mmsegmentation/mmseg/ops_dcnv3/modules/dcnv3.py:20: UserWarning: Now, we support DCNv4 in InternImage.
  warnings.warn('Now, we support DCNv4 in InternImage.')
10/06 09:15:13 - mmengine - INFO - Distributed training is not used, all SyncBatchNorm (SyncBN) layers in the model will be automatically reverted to BatchNormXd layers if they are used.
10/06 09:15:13 - mmengine - INFO - Hooks will be executed in the following order:
before_run:
(VERY_HIGH   ) RuntimeInfoHook                    
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
before_train:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_train_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(NORMAL      ) DistSamplerSeedHook                
 -------------------- 
before_train_iter:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_train_iter:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(NORMAL      ) SegVisualizationHook               
(BELOW_NORMAL) LoggerHook                         
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
after_train_epoch:
(NORMAL      ) IterTimerHook                      
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_val:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
before_val_epoch:
(NORMAL      ) IterTimerHook                      
 -------------------- 
before_val_iter:
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_val_iter:
(NORMAL      ) IterTimerHook                      
(NORMAL      ) SegVisualizationHook               
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_val_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
after_val:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
after_train:
(VERY_HIGH   ) RuntimeInfoHook                    
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_test:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
before_test_epoch:
(NORMAL      ) IterTimerHook                      
 -------------------- 
before_test_iter:
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_test_iter:
(NORMAL      ) IterTimerHook                      
(NORMAL      ) SegVisualizationHook               
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_test_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_test:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
after_run:
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
10/06 09:15:14 - mmengine - WARNING - The prefix is not set in metric class IoUMetric.
Loads checkpoint by local backend from path: ../checkpoint_files/ade20k/mask2former/best_mIoU_iter_155000.pth
10/06 09:15:15 - mmengine - INFO - Load checkpoint from ../checkpoint_files/ade20k/mask2former/best_mIoU_iter_155000.pth
10/06 09:15:46 - mmengine - INFO - Iter(test) [  50/2000]    eta: 0:19:57  time: 0.3942  data_time: 0.0018  memory: 17181  
10/06 09:16:05 - mmengine - INFO - Iter(test) [ 100/2000]    eta: 0:15:46  time: 0.3850  data_time: 0.0019  memory: 17180  
10/06 09:16:20 - mmengine - INFO - Iter(test) [ 150/2000]    eta: 0:13:15  time: 0.2970  data_time: 0.0019  memory: 17150  
10/06 09:16:34 - mmengine - INFO - Iter(test) [ 200/2000]    eta: 0:11:49  time: 0.3421  data_time: 0.0018  memory: 17194  
10/06 09:16:51 - mmengine - INFO - Iter(test) [ 250/2000]    eta: 0:11:09  time: 0.2348  data_time: 0.0017  memory: 17202  
10/06 09:17:05 - mmengine - INFO - Iter(test) [ 300/2000]    eta: 0:10:21  time: 0.1451  data_time: 0.0019  memory: 17180  
10/06 09:17:19 - mmengine - INFO - Iter(test) [ 350/2000]    eta: 0:09:45  time: 0.2817  data_time: 0.0018  memory: 17178  
10/06 09:17:30 - mmengine - INFO - Iter(test) [ 400/2000]    eta: 0:08:58  time: 0.1575  data_time: 0.0031  memory: 17177  
10/06 09:17:38 - mmengine - INFO - Iter(test) [ 450/2000]    eta: 0:08:12  time: 0.1923  data_time: 0.0017  memory: 17147  
10/06 09:17:48 - mmengine - INFO - Iter(test) [ 500/2000]    eta: 0:07:37  time: 0.2211  data_time: 0.0017  memory: 17149  
10/06 09:17:57 - mmengine - INFO - Iter(test) [ 550/2000]    eta: 0:07:06  time: 0.2588  data_time: 0.0018  memory: 17179  
10/06 09:18:04 - mmengine - INFO - Iter(test) [ 600/2000]    eta: 0:06:34  time: 0.1413  data_time: 0.0019  memory: 3938  
10/06 09:18:15 - mmengine - INFO - Iter(test) [ 650/2000]    eta: 0:06:13  time: 0.2728  data_time: 0.0016  memory: 17181  
10/06 09:18:28 - mmengine - INFO - Iter(test) [ 700/2000]    eta: 0:05:57  time: 0.2054  data_time: 0.0019  memory: 17177  
10/06 09:18:40 - mmengine - INFO - Iter(test) [ 750/2000]    eta: 0:05:41  time: 0.5651  data_time: 0.0017  memory: 17184  
10/06 09:18:48 - mmengine - INFO - Iter(test) [ 800/2000]    eta: 0:05:19  time: 0.1388  data_time: 0.0019  memory: 17151  
10/06 09:18:55 - mmengine - INFO - Iter(test) [ 850/2000]    eta: 0:04:57  time: 0.1395  data_time: 0.0020  memory: 1428  
10/06 09:19:04 - mmengine - INFO - Iter(test) [ 900/2000]    eta: 0:04:39  time: 0.1886  data_time: 0.0017  memory: 17138  
10/06 09:19:15 - mmengine - INFO - Iter(test) [ 950/2000]    eta: 0:04:25  time: 0.2949  data_time: 0.0018  memory: 17133  
10/06 09:19:23 - mmengine - INFO - Iter(test) [1000/2000]    eta: 0:04:07  time: 0.1345  data_time: 0.0017  memory: 17096  
10/06 09:19:32 - mmengine - INFO - Iter(test) [1050/2000]    eta: 0:03:52  time: 0.2255  data_time: 0.0018  memory: 17182  
10/06 09:19:41 - mmengine - INFO - Iter(test) [1100/2000]    eta: 0:03:37  time: 0.1358  data_time: 0.0019  memory: 17175  
10/06 09:19:49 - mmengine - INFO - Iter(test) [1150/2000]    eta: 0:03:22  time: 0.1428  data_time: 0.0017  memory: 17117  
10/06 09:19:57 - mmengine - INFO - Iter(test) [1200/2000]    eta: 0:03:07  time: 0.1352  data_time: 0.0018  memory: 17113  
10/06 09:20:06 - mmengine - INFO - Iter(test) [1250/2000]    eta: 0:02:54  time: 0.2176  data_time: 0.0017  memory: 17172  
10/06 09:20:13 - mmengine - INFO - Iter(test) [1300/2000]    eta: 0:02:40  time: 0.1368  data_time: 0.0018  memory: 1430  
10/06 09:20:21 - mmengine - INFO - Iter(test) [1350/2000]    eta: 0:02:27  time: 0.1320  data_time: 0.0017  memory: 17110  
10/06 09:20:32 - mmengine - INFO - Iter(test) [1400/2000]    eta: 0:02:15  time: 0.1572  data_time: 0.0017  memory: 17154  
10/06 09:20:39 - mmengine - INFO - Iter(test) [1450/2000]    eta: 0:02:02  time: 0.2019  data_time: 0.0017  memory: 17130  
10/06 09:20:47 - mmengine - INFO - Iter(test) [1500/2000]    eta: 0:01:50  time: 0.1329  data_time: 0.0017  memory: 17125  
10/06 09:20:55 - mmengine - INFO - Iter(test) [1550/2000]    eta: 0:01:38  time: 0.1408  data_time: 0.0018  memory: 17154  
10/06 09:21:01 - mmengine - INFO - Iter(test) [1600/2000]    eta: 0:01:26  time: 0.1342  data_time: 0.0019  memory: 1425  
10/06 09:21:10 - mmengine - INFO - Iter(test) [1650/2000]    eta: 0:01:15  time: 0.1342  data_time: 0.0017  memory: 17192  
10/06 09:21:22 - mmengine - INFO - Iter(test) [1700/2000]    eta: 0:01:04  time: 0.1404  data_time: 0.0020  memory: 17151  
10/06 09:21:30 - mmengine - INFO - Iter(test) [1750/2000]    eta: 0:00:53  time: 0.1381  data_time: 0.0032  memory: 17111  
10/06 09:21:37 - mmengine - INFO - Iter(test) [1800/2000]    eta: 0:00:42  time: 0.1426  data_time: 0.0020  memory: 17114  
10/06 09:21:44 - mmengine - INFO - Iter(test) [1850/2000]    eta: 0:00:31  time: 0.1436  data_time: 0.0020  memory: 1317  
10/06 09:21:52 - mmengine - INFO - Iter(test) [1900/2000]    eta: 0:00:20  time: 0.2022  data_time: 0.0018  memory: 17182  
10/06 09:22:01 - mmengine - INFO - Iter(test) [1950/2000]    eta: 0:00:10  time: 0.1372  data_time: 0.0018  memory: 17197  
10/06 09:22:09 - mmengine - INFO - Iter(test) [2000/2000]    eta: 0:00:00  time: 0.1262  data_time: 0.0015  memory: 17131  
10/06 09:22:09 - mmengine - INFO - per class results:
10/06 09:22:09 - mmengine - INFO - 
+---------------------+-------+-------+
|        Class        |  IoU  |  Acc  |
+---------------------+-------+-------+
|         wall        | 69.24 | 88.06 |
|       building      | 78.04 | 92.08 |
|         sky         | 67.98 | 69.98 |
|        floor        | 75.53 | 87.41 |
|         tree        | 71.88 | 84.36 |
|       ceiling       | 74.42 | 82.58 |
|         road        | 73.86 | 81.28 |
|         bed         | 83.22 | 92.33 |
|      windowpane     | 53.45 | 67.76 |
|        grass        | 61.87 | 74.41 |
|       cabinet       | 51.62 | 64.98 |
|       sidewalk      | 56.36 | 71.06 |
|        person       | 77.57 | 83.92 |
|        earth        | 32.33 | 53.23 |
|         door        |  30.1 | 37.84 |
|        table        | 50.94 | 70.05 |
|       mountain      | 26.44 | 79.22 |
|        plant        | 50.54 | 58.56 |
|       curtain       | 64.79 | 72.82 |
|        chair        | 49.72 | 60.34 |
|         car         | 83.02 | 89.99 |
|        water        | 50.14 | 74.16 |
|       painting      | 63.19 | 80.46 |
|         sofa        | 61.39 | 80.22 |
|        shelf        | 40.41 | 57.68 |
|        house        | 37.01 | 50.82 |
|         sea         | 41.79 |  49.3 |
|        mirror       |  52.8 | 76.67 |
|         rug         | 45.35 | 48.69 |
|        field        | 30.46 | 68.18 |
|       armchair      | 31.03 | 46.67 |
|         seat        | 49.65 | 61.15 |
|        fence        | 39.53 | 60.14 |
|         desk        | 27.67 | 39.32 |
|         rock        | 43.95 | 63.67 |
|       wardrobe      |  42.6 | 52.84 |
|         lamp        | 56.16 | 66.41 |
|       bathtub       | 54.47 | 71.41 |
|       railing       | 33.24 | 42.13 |
|       cushion       | 50.35 |  64.9 |
|         base        | 23.86 | 45.58 |
|         box         | 22.73 | 31.03 |
|        column       | 41.74 | 47.34 |
|      signboard      | 37.84 | 44.91 |
|   chest of drawers  | 29.93 | 46.38 |
|       counter       | 18.39 | 23.86 |
|         sand        | 40.12 | 43.04 |
|         sink        | 62.83 | 73.32 |
|      skyscraper     | 34.12 | 39.96 |
|      fireplace      | 58.32 | 82.69 |
|     refrigerator    | 63.74 | 67.47 |
|      grandstand     | 43.58 | 79.88 |
|         path        | 16.23 | 21.16 |
|        stairs       |  32.7 | 41.81 |
|        runway       | 43.83 | 50.36 |
|         case        | 51.38 | 84.53 |
|      pool table     | 92.14 | 94.09 |
|        pillow       | 52.21 | 63.57 |
|     screen door     | 42.73 | 69.34 |
|       stairway      | 36.59 | 50.05 |
|        river        |  7.38 | 11.46 |
|        bridge       | 57.55 | 69.78 |
|       bookcase      | 30.97 | 44.95 |
|        blind        |  29.3 | 31.93 |
|     coffee table    | 48.25 | 76.26 |
|        toilet       | 73.31 | 76.66 |
|        flower       | 32.61 | 50.33 |
|         book        |  48.8 | 67.95 |
|         hill        |  6.49 |  13.3 |
|        bench        | 48.48 | 60.65 |
|      countertop     | 48.43 |  78.0 |
|        stove        | 60.81 | 67.74 |
|         palm        | 48.84 | 61.01 |
|    kitchen island   | 37.45 | 73.93 |
|       computer      |  54.1 | 57.05 |
|     swivel chair    | 38.81 | 46.77 |
|         boat        | 38.18 | 43.17 |
|         bar         | 49.37 | 60.06 |
|    arcade machine   | 30.27 | 33.21 |
|        hovel        | 32.94 | 53.35 |
|         bus         | 88.76 |  94.8 |
|        towel        |  43.0 |  49.7 |
|        light        | 51.62 | 62.27 |
|        truck        | 14.13 | 18.91 |
|        tower        | 26.48 | 52.25 |
|      chandelier     | 56.71 | 69.31 |
|        awning       | 32.02 | 37.41 |
|     streetlight     | 25.11 | 34.63 |
|        booth        | 27.78 | 27.87 |
| television receiver | 58.71 | 64.38 |
|       airplane      |  58.9 | 62.59 |
|      dirt track     | 13.99 | 19.94 |
|       apparel       | 29.02 | 46.83 |
|         pole        | 25.56 | 37.25 |
|         land        |  1.64 |  1.88 |
|      bannister      |  6.26 |  8.49 |
|      escalator      |  15.4 | 15.74 |
|       ottoman       | 43.02 | 60.52 |
|        bottle       | 19.79 | 25.64 |
|        buffet       | 33.96 | 42.44 |
|        poster       |  9.96 | 10.88 |
|        stage        |  3.79 |  6.28 |
|         van         | 47.13 |  65.4 |
|         ship        |  4.87 |  6.34 |
|       fountain      | 38.78 | 40.28 |
|    conveyer belt    | 43.03 | 58.27 |
|        canopy       | 29.51 | 50.24 |
|        washer       | 65.13 | 68.84 |
|      plaything      | 11.83 | 20.11 |
|    swimming pool    | 37.79 | 70.92 |
|        stool        | 32.55 | 43.36 |
|        barrel       | 41.04 |  41.3 |
|        basket       |  29.4 | 40.39 |
|      waterfall      | 56.04 | 92.47 |
|         tent        | 93.72 | 98.31 |
|         bag         | 12.21 | 15.42 |
|       minibike      | 57.18 | 63.88 |
|        cradle       | 57.84 | 83.46 |
|         oven        | 18.64 | 28.28 |
|         ball        | 17.16 |  25.6 |
|         food        | 64.12 | 79.65 |
|         step        |  2.84 |  3.43 |
|         tank        | 34.64 | 37.58 |
|      trade name     | 31.84 | 38.36 |
|      microwave      | 43.12 | 46.44 |
|         pot         | 39.61 | 46.42 |
|        animal       | 74.18 |  78.0 |
|       bicycle       | 53.09 | 74.37 |
|         lake        |  0.0  |  0.0  |
|      dishwasher     | 58.34 | 66.24 |
|        screen       | 59.76 |  67.5 |
|       blanket       | 12.52 | 14.09 |
|      sculpture      | 40.23 | 61.23 |
|         hood        | 36.98 | 38.34 |
|        sconce       | 28.66 |  34.4 |
|         vase        | 34.38 | 50.29 |
|    traffic light    |  27.5 | 40.04 |
|         tray        |  3.37 |  4.83 |
|        ashcan       | 26.33 | 32.12 |
|         fan         | 54.72 | 69.08 |
|         pier        | 57.89 | 72.22 |
|      crt screen     |  3.77 | 10.76 |
|        plate        | 54.02 | 67.67 |
|       monitor       |  1.32 |  1.43 |
|    bulletin board   | 37.84 | 40.79 |
|        shower       |  7.12 |  9.05 |
|       radiator      | 42.16 |  43.9 |
|        glass        | 15.09 | 17.45 |
|        clock        | 27.88 | 37.18 |
|         flag        | 46.74 | 51.24 |
+---------------------+-------+-------+
10/06 09:22:09 - mmengine - INFO - Iter(test) [2000/2000]    aAcc: 76.2300  mIoU: 41.3400  mAcc: 52.6100  data_time: 0.0020  time: 0.2069
Finished processing corruption type: frost
Processing corruption type: fog
10/06 09:22:19 - mmengine - INFO - 
------------------------------------------------------------
System environment:
    sys.platform: linux
    Python: 3.10.13 | packaged by conda-forge | (main, Dec 23 2023, 15:36:39) [GCC 12.3.0]
    CUDA available: True
    MUSA available: False
    numpy_random_seed: 469371046
    GPU 0: Tesla V100-SXM2-32GB
    CUDA_HOME: /opt/bwhpc/common/devel/cuda/11.7
    NVCC: Cuda compilation tools, release 11.7, V11.7.99
    GCC: gcc (GCC) 8.5.0 20210514 (Red Hat 8.5.0-18)
    PyTorch: 1.13.1
    PyTorch compiling details: PyTorch built with:
  - GCC 9.3
  - C++ Version: 201402
  - Intel(R) oneAPI Math Kernel Library Version 2023.1-Product Build 20230303 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v2.6.0 (Git Hash 52b5f107dd9cf10910aaa19cb47f3abf9b349815)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - LAPACK is enabled (usually provided by MKL)
  - NNPACK is enabled
  - CPU capability usage: AVX2
  - CUDA Runtime 11.7
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_61,code=sm_61;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86;-gencode;arch=compute_37,code=compute_37
  - CuDNN 8.5
  - Magma 2.6.1
  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.7, CUDNN_VERSION=8.5.0, CXX_COMPILER=/opt/rh/devtoolset-9/root/usr/bin/c++, CXX_FLAGS= -fabi-version=11 -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -DEDGE_PROFILER_USE_KINETO -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Werror=non-virtual-dtor -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wunused-local-typedefs -Wno-unused-parameter -Wno-unused-function -Wno-unused-result -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Werror=cast-function-type -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.13.1, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, USE_ROCM=OFF, 

    TorchVision: 0.14.1
    OpenCV: 3.4.18
    MMEngine: 0.10.4

Runtime environment:
    cudnn_benchmark: True
    mp_cfg: {'mp_start_method': 'fork', 'opencv_num_threads': 0}
    dist_cfg: {'backend': 'nccl'}
    seed: 469371046
    Distributed launcher: none
    Distributed training: False
    GPU number: 1
------------------------------------------------------------

10/06 09:22:20 - mmengine - INFO - Config:
auto_scale_lr = dict(base_batch_size=16, enable=False)
backbone_embed_multi = dict(decay_mult=0.0, lr_mult=0.1)
backbone_norm_multi = dict(decay_mult=0.0, lr_mult=0.1)
crop_size = (
    512,
    512,
)
custom_keys = dict({
    'absolute_pos_embed':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone':
    dict(decay_mult=1.0, lr_mult=0.1),
    'backbone.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.patch_embed.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.0.blocks.0.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.0.blocks.1.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.0.downsample.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.1.blocks.0.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.1.blocks.1.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.1.downsample.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.0.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.1.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.10.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.11.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.12.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.13.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.14.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.15.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.16.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.17.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.2.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.3.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.4.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.5.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.6.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.7.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.8.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.9.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.downsample.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.3.blocks.0.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.3.blocks.1.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'level_embed':
    dict(decay_mult=0.0, lr_mult=1.0),
    'query_embed':
    dict(decay_mult=0.0, lr_mult=1.0),
    'query_feat':
    dict(decay_mult=0.0, lr_mult=1.0),
    'relative_position_bias_table':
    dict(decay_mult=0.0, lr_mult=0.1)
})
data_root = 'data/ade/ADEChallengeData2016'
dataset_type = 'ADE20KDataset'
default_hooks = dict(
    checkpoint=dict(
        by_epoch=False, interval=5000, save_best='mIoU',
        type='CheckpointHook'),
    logger=dict(interval=50, log_metric_by_epoch=False, type='LoggerHook'),
    param_scheduler=dict(type='ParamSchedulerHook'),
    sampler_seed=dict(type='DistSamplerSeedHook'),
    timer=dict(type='IterTimerHook'),
    visualization=dict(type='SegVisualizationHook'))
default_scope = 'mmseg'
depths = [
    2,
    2,
    18,
    2,
]
embed_multi = dict(decay_mult=0.0, lr_mult=1.0)
env_cfg = dict(
    cudnn_benchmark=True,
    dist_cfg=dict(backend='nccl'),
    mp_cfg=dict(mp_start_method='fork', opencv_num_threads=0))
img_ratios = [
    0.5,
    0.75,
    1.0,
    1.25,
    1.5,
    1.75,
]
launcher = 'none'
load_from = '../checkpoint_files/ade20k/mask2former/best_mIoU_iter_155000.pth'
log_level = 'INFO'
log_processor = dict(by_epoch=False)
model = dict(
    backbone=dict(
        attn_drop_rate=0.0,
        depths=[
            2,
            2,
            18,
            2,
        ],
        drop_path_rate=0.3,
        drop_rate=0.0,
        embed_dims=128,
        frozen_stages=-1,
        init_cfg=dict(
            checkpoint=
            'https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/swin/swin_base_patch4_window12_384_20220317-55b0104a.pth',
            type='Pretrained'),
        mlp_ratio=4,
        num_heads=[
            4,
            8,
            16,
            32,
        ],
        out_indices=(
            0,
            1,
            2,
            3,
        ),
        patch_norm=True,
        pretrain_img_size=384,
        qk_scale=None,
        qkv_bias=True,
        type='SwinTransformer',
        window_size=12,
        with_cp=False),
    data_preprocessor=dict(
        bgr_to_rgb=True,
        corruption='fog',
        mean=[
            123.675,
            116.28,
            103.53,
        ],
        pad_val=0,
        seg_pad_val=255,
        size=(
            512,
            512,
        ),
        std=[
            58.395,
            57.12,
            57.375,
        ],
        type='SegDataPreProcessor'),
    decode_head=dict(
        align_corners=False,
        enforce_decoder_input_project=False,
        feat_channels=256,
        in_channels=[
            128,
            256,
            512,
            1024,
        ],
        loss_cls=dict(
            class_weight=[
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                0.1,
            ],
            loss_weight=2.0,
            reduction='mean',
            type='mmdet.CrossEntropyLoss',
            use_sigmoid=False),
        loss_dice=dict(
            activate=True,
            eps=1.0,
            loss_weight=5.0,
            naive_dice=True,
            reduction='mean',
            type='mmdet.DiceLoss',
            use_sigmoid=True),
        loss_mask=dict(
            loss_weight=5.0,
            reduction='mean',
            type='mmdet.CrossEntropyLoss',
            use_sigmoid=True),
        num_classes=150,
        num_queries=100,
        num_transformer_feat_level=3,
        out_channels=256,
        pixel_decoder=dict(
            act_cfg=dict(type='ReLU'),
            encoder=dict(
                init_cfg=None,
                layer_cfg=dict(
                    ffn_cfg=dict(
                        act_cfg=dict(inplace=True, type='ReLU'),
                        embed_dims=256,
                        feedforward_channels=1024,
                        ffn_drop=0.0,
                        num_fcs=2),
                    self_attn_cfg=dict(
                        batch_first=True,
                        dropout=0.0,
                        embed_dims=256,
                        im2col_step=64,
                        init_cfg=None,
                        norm_cfg=None,
                        num_heads=8,
                        num_levels=3,
                        num_points=4)),
                num_layers=6),
            init_cfg=None,
            norm_cfg=dict(num_groups=32, type='GN'),
            num_outs=3,
            positional_encoding=dict(normalize=True, num_feats=128),
            type='mmdet.MSDeformAttnPixelDecoder'),
        positional_encoding=dict(normalize=True, num_feats=128),
        strides=[
            4,
            8,
            16,
            32,
        ],
        train_cfg=dict(
            assigner=dict(
                match_costs=[
                    dict(type='mmdet.ClassificationCost', weight=2.0),
                    dict(
                        type='mmdet.CrossEntropyLossCost',
                        use_sigmoid=True,
                        weight=5.0),
                    dict(
                        eps=1.0,
                        pred_act=True,
                        type='mmdet.DiceCost',
                        weight=5.0),
                ],
                type='mmdet.HungarianAssigner'),
            importance_sample_ratio=0.75,
            num_points=12544,
            oversample_ratio=3.0,
            sampler=dict(type='mmdet.MaskPseudoSampler')),
        transformer_decoder=dict(
            init_cfg=None,
            layer_cfg=dict(
                cross_attn_cfg=dict(
                    attn_drop=0.0,
                    batch_first=True,
                    dropout_layer=None,
                    embed_dims=256,
                    num_heads=8,
                    proj_drop=0.0),
                ffn_cfg=dict(
                    act_cfg=dict(inplace=True, type='ReLU'),
                    add_identity=True,
                    dropout_layer=None,
                    embed_dims=256,
                    feedforward_channels=2048,
                    ffn_drop=0.0,
                    num_fcs=2),
                self_attn_cfg=dict(
                    attn_drop=0.0,
                    batch_first=True,
                    dropout_layer=None,
                    embed_dims=256,
                    num_heads=8,
                    proj_drop=0.0)),
            num_layers=9,
            return_intermediate=True),
        type='Mask2FormerHead'),
    test_cfg=dict(mode='whole'),
    train_cfg=dict(),
    type='EncoderDecoder')
num_classes = 150
optim_wrapper = dict(
    clip_grad=dict(max_norm=0.01, norm_type=2),
    optimizer=dict(
        betas=(
            0.9,
            0.999,
        ),
        eps=1e-08,
        lr=0.0001,
        type='AdamW',
        weight_decay=0.05),
    paramwise_cfg=dict(
        custom_keys=dict({
            'absolute_pos_embed':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone':
            dict(decay_mult=1.0, lr_mult=0.1),
            'backbone.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.patch_embed.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.0.blocks.0.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.0.blocks.1.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.0.downsample.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.1.blocks.0.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.1.blocks.1.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.1.downsample.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.0.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.1.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.10.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.11.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.12.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.13.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.14.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.15.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.16.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.17.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.2.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.3.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.4.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.5.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.6.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.7.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.8.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.9.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.downsample.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.3.blocks.0.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.3.blocks.1.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'level_embed':
            dict(decay_mult=0.0, lr_mult=1.0),
            'query_embed':
            dict(decay_mult=0.0, lr_mult=1.0),
            'query_feat':
            dict(decay_mult=0.0, lr_mult=1.0),
            'relative_position_bias_table':
            dict(decay_mult=0.0, lr_mult=0.1)
        }),
        norm_decay_mult=0.0),
    type='OptimWrapper')
optimizer = dict(
    betas=(
        0.9,
        0.999,
    ),
    eps=1e-08,
    lr=0.0001,
    type='AdamW',
    weight_decay=0.05)
param_scheduler = [
    dict(
        begin=0,
        by_epoch=False,
        end=160000,
        eta_min=0,
        power=0.9,
        type='PolyLR'),
]
pretrained = 'https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/swin/swin_base_patch4_window12_384_20220317-55b0104a.pth'
resume = False
test_cfg = dict(type='TestLoop')
test_dataloader = dict(
    batch_size=1,
    dataset=dict(
        data_prefix=dict(
            img_path='images/validation',
            seg_map_path='annotations/validation'),
        data_root='data/ade/ADEChallengeData2016',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(keep_ratio=True, scale=(
                2560,
                640,
            ), type='Resize'),
            dict(reduce_zero_label=True, type='LoadAnnotations'),
            dict(type='PackSegInputs'),
        ],
        type='ADE20KDataset'),
    num_workers=4,
    persistent_workers=True,
    sampler=dict(shuffle=False, type='DefaultSampler'))
test_evaluator = dict(
    iou_metrics=[
        'mIoU',
    ], type='IoUMetric')
test_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(keep_ratio=True, scale=(
        2560,
        640,
    ), type='Resize'),
    dict(reduce_zero_label=True, type='LoadAnnotations'),
    dict(type='PackSegInputs'),
]
train_cfg = dict(
    max_iters=160000, type='IterBasedTrainLoop', val_interval=5000)
train_dataloader = dict(
    batch_size=2,
    dataset=dict(
        data_prefix=dict(
            img_path='images/training', seg_map_path='annotations/training'),
        data_root='data/ade/ADEChallengeData2016',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(reduce_zero_label=True, type='LoadAnnotations'),
            dict(
                max_size=2560,
                resize_type='ResizeShortestEdge',
                scales=[
                    320,
                    384,
                    448,
                    512,
                    576,
                    640,
                    704,
                    768,
                    832,
                    896,
                    960,
                    1024,
                    1088,
                    1152,
                    1216,
                    1280,
                ],
                type='RandomChoiceResize'),
            dict(
                cat_max_ratio=0.75, crop_size=(
                    512,
                    512,
                ), type='RandomCrop'),
            dict(prob=0.5, type='RandomFlip'),
            dict(type='PhotoMetricDistortion'),
            dict(type='PackSegInputs'),
        ],
        type='ADE20KDataset'),
    num_workers=4,
    persistent_workers=True,
    sampler=dict(shuffle=True, type='InfiniteSampler'))
train_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(reduce_zero_label=True, type='LoadAnnotations'),
    dict(
        max_size=2560,
        resize_type='ResizeShortestEdge',
        scales=[
            320,
            384,
            448,
            512,
            576,
            640,
            704,
            768,
            832,
            896,
            960,
            1024,
            1088,
            1152,
            1216,
            1280,
        ],
        type='RandomChoiceResize'),
    dict(cat_max_ratio=0.75, crop_size=(
        512,
        512,
    ), type='RandomCrop'),
    dict(prob=0.5, type='RandomFlip'),
    dict(type='PhotoMetricDistortion'),
    dict(type='PackSegInputs'),
]
tta_model = dict(type='SegTTAModel')
tta_pipeline = [
    dict(backend_args=None, type='LoadImageFromFile'),
    dict(
        transforms=[
            [
                dict(keep_ratio=True, scale_factor=0.5, type='Resize'),
                dict(keep_ratio=True, scale_factor=0.75, type='Resize'),
                dict(keep_ratio=True, scale_factor=1.0, type='Resize'),
                dict(keep_ratio=True, scale_factor=1.25, type='Resize'),
                dict(keep_ratio=True, scale_factor=1.5, type='Resize'),
                dict(keep_ratio=True, scale_factor=1.75, type='Resize'),
            ],
            [
                dict(direction='horizontal', prob=0.0, type='RandomFlip'),
                dict(direction='horizontal', prob=1.0, type='RandomFlip'),
            ],
            [
                dict(type='LoadAnnotations'),
            ],
            [
                dict(type='PackSegInputs'),
            ],
        ],
        type='TestTimeAug'),
]
val_cfg = dict(type='ValLoop')
val_dataloader = dict(
    batch_size=1,
    dataset=dict(
        data_prefix=dict(
            img_path='images/validation',
            seg_map_path='annotations/validation'),
        data_root='data/ade/ADEChallengeData2016',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(keep_ratio=True, scale=(
                2560,
                640,
            ), type='Resize'),
            dict(reduce_zero_label=True, type='LoadAnnotations'),
            dict(type='PackSegInputs'),
        ],
        type='ADE20KDataset'),
    num_workers=4,
    persistent_workers=True,
    sampler=dict(shuffle=False, type='DefaultSampler'))
val_evaluator = dict(
    iou_metrics=[
        'mIoU',
    ], type='IoUMetric')
vis_backends = [
    dict(type='LocalVisBackend'),
]
visualizer = dict(
    name='visualizer',
    type='SegLocalVisualizer',
    vis_backends=[
        dict(type='LocalVisBackend'),
    ])
work_dir = '../corruptions/work_dirs/ade20k/mask2former/mask2former_swin-b-in1k-384x384-pre_8xb2-160k_ade20k-512x512/fog'

/pfs/work7/workspace/scratch/ma_mkacar-team_project_fss2024/benchmarking_robustness/semantic_segmentation/mmsegmentation/mmseg/ops_dcnv3/modules/dcnv3.py:20: UserWarning: Now, we support DCNv4 in InternImage.
  warnings.warn('Now, we support DCNv4 in InternImage.')
10/06 09:22:24 - mmengine - INFO - Distributed training is not used, all SyncBatchNorm (SyncBN) layers in the model will be automatically reverted to BatchNormXd layers if they are used.
10/06 09:22:24 - mmengine - INFO - Hooks will be executed in the following order:
before_run:
(VERY_HIGH   ) RuntimeInfoHook                    
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
before_train:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_train_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(NORMAL      ) DistSamplerSeedHook                
 -------------------- 
before_train_iter:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_train_iter:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(NORMAL      ) SegVisualizationHook               
(BELOW_NORMAL) LoggerHook                         
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
after_train_epoch:
(NORMAL      ) IterTimerHook                      
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_val:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
before_val_epoch:
(NORMAL      ) IterTimerHook                      
 -------------------- 
before_val_iter:
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_val_iter:
(NORMAL      ) IterTimerHook                      
(NORMAL      ) SegVisualizationHook               
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_val_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
after_val:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
after_train:
(VERY_HIGH   ) RuntimeInfoHook                    
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_test:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
before_test_epoch:
(NORMAL      ) IterTimerHook                      
 -------------------- 
before_test_iter:
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_test_iter:
(NORMAL      ) IterTimerHook                      
(NORMAL      ) SegVisualizationHook               
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_test_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_test:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
after_run:
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
10/06 09:22:25 - mmengine - WARNING - The prefix is not set in metric class IoUMetric.
Loads checkpoint by local backend from path: ../checkpoint_files/ade20k/mask2former/best_mIoU_iter_155000.pth
10/06 09:22:26 - mmengine - INFO - Load checkpoint from ../checkpoint_files/ade20k/mask2former/best_mIoU_iter_155000.pth
10/06 09:23:01 - mmengine - INFO - Iter(test) [  50/2000]    eta: 0:22:47  time: 0.5178  data_time: 0.0034  memory: 17181  
10/06 09:23:26 - mmengine - INFO - Iter(test) [ 100/2000]    eta: 0:19:04  time: 0.5075  data_time: 0.0019  memory: 17180  
10/06 09:23:47 - mmengine - INFO - Iter(test) [ 150/2000]    eta: 0:16:40  time: 0.4097  data_time: 0.0018  memory: 17150  
10/06 09:24:08 - mmengine - INFO - Iter(test) [ 200/2000]    eta: 0:15:17  time: 0.4672  data_time: 0.0018  memory: 17194  
10/06 09:24:30 - mmengine - INFO - Iter(test) [ 250/2000]    eta: 0:14:31  time: 0.3671  data_time: 0.0018  memory: 17202  
10/06 09:24:51 - mmengine - INFO - Iter(test) [ 300/2000]    eta: 0:13:39  time: 0.2773  data_time: 0.0019  memory: 17180  
10/06 09:25:11 - mmengine - INFO - Iter(test) [ 350/2000]    eta: 0:12:59  time: 0.4068  data_time: 0.0017  memory: 17178  
10/06 09:25:28 - mmengine - INFO - Iter(test) [ 400/2000]    eta: 0:12:08  time: 0.2834  data_time: 0.0017  memory: 17177  
10/06 09:25:43 - mmengine - INFO - Iter(test) [ 450/2000]    eta: 0:11:18  time: 0.3201  data_time: 0.0016  memory: 17147  
10/06 09:25:59 - mmengine - INFO - Iter(test) [ 500/2000]    eta: 0:10:38  time: 0.3471  data_time: 0.0017  memory: 17149  
10/06 09:26:15 - mmengine - INFO - Iter(test) [ 550/2000]    eta: 0:10:03  time: 0.3660  data_time: 0.0018  memory: 17179  
10/06 09:26:28 - mmengine - INFO - Iter(test) [ 600/2000]    eta: 0:09:25  time: 0.2710  data_time: 0.0018  memory: 3938  
10/06 09:26:45 - mmengine - INFO - Iter(test) [ 650/2000]    eta: 0:08:58  time: 0.3884  data_time: 0.0017  memory: 17181  
10/06 09:27:04 - mmengine - INFO - Iter(test) [ 700/2000]    eta: 0:08:37  time: 0.3340  data_time: 0.0019  memory: 17177  
10/06 09:27:23 - mmengine - INFO - Iter(test) [ 750/2000]    eta: 0:08:15  time: 0.6632  data_time: 0.0017  memory: 17184  
10/06 09:27:37 - mmengine - INFO - Iter(test) [ 800/2000]    eta: 0:07:47  time: 0.2666  data_time: 0.0019  memory: 17151  
10/06 09:27:51 - mmengine - INFO - Iter(test) [ 850/2000]    eta: 0:07:19  time: 0.2702  data_time: 0.0020  memory: 1428  
10/06 09:28:06 - mmengine - INFO - Iter(test) [ 900/2000]    eta: 0:06:55  time: 0.3162  data_time: 0.0017  memory: 17138  
10/06 09:28:24 - mmengine - INFO - Iter(test) [ 950/2000]    eta: 0:06:35  time: 0.4237  data_time: 0.0018  memory: 17133  
10/06 09:28:38 - mmengine - INFO - Iter(test) [1000/2000]    eta: 0:06:11  time: 0.2616  data_time: 0.0017  memory: 17096  
10/06 09:28:53 - mmengine - INFO - Iter(test) [1050/2000]    eta: 0:05:49  time: 0.3499  data_time: 0.0018  memory: 17182  
10/06 09:29:09 - mmengine - INFO - Iter(test) [1100/2000]    eta: 0:05:29  time: 0.2671  data_time: 0.0018  memory: 17175  
10/06 09:29:23 - mmengine - INFO - Iter(test) [1150/2000]    eta: 0:05:08  time: 0.2713  data_time: 0.0017  memory: 17117  
10/06 09:29:37 - mmengine - INFO - Iter(test) [1200/2000]    eta: 0:04:47  time: 0.2626  data_time: 0.0017  memory: 17113  
10/06 09:29:53 - mmengine - INFO - Iter(test) [1250/2000]    eta: 0:04:28  time: 0.3443  data_time: 0.0017  memory: 17172  
10/06 09:30:06 - mmengine - INFO - Iter(test) [1300/2000]    eta: 0:04:07  time: 0.2675  data_time: 0.0017  memory: 1430  
10/06 09:30:21 - mmengine - INFO - Iter(test) [1350/2000]    eta: 0:03:48  time: 0.2587  data_time: 0.0018  memory: 17110  
10/06 09:30:38 - mmengine - INFO - Iter(test) [1400/2000]    eta: 0:03:30  time: 0.2887  data_time: 0.0017  memory: 17154  
10/06 09:30:52 - mmengine - INFO - Iter(test) [1450/2000]    eta: 0:03:11  time: 0.3392  data_time: 0.0046  memory: 17130  
10/06 09:31:06 - mmengine - INFO - Iter(test) [1500/2000]    eta: 0:02:53  time: 0.2592  data_time: 0.0017  memory: 17125  
10/06 09:31:20 - mmengine - INFO - Iter(test) [1550/2000]    eta: 0:02:35  time: 0.2747  data_time: 0.0018  memory: 17154  
10/06 09:31:34 - mmengine - INFO - Iter(test) [1600/2000]    eta: 0:02:16  time: 0.2637  data_time: 0.0019  memory: 1425  
10/06 09:31:48 - mmengine - INFO - Iter(test) [1650/2000]    eta: 0:01:59  time: 0.2588  data_time: 0.0016  memory: 17192  
10/06 09:32:07 - mmengine - INFO - Iter(test) [1700/2000]    eta: 0:01:42  time: 0.2682  data_time: 0.0019  memory: 17151  
10/06 09:32:21 - mmengine - INFO - Iter(test) [1750/2000]    eta: 0:01:25  time: 0.2697  data_time: 0.0017  memory: 17111  
10/06 09:32:35 - mmengine - INFO - Iter(test) [1800/2000]    eta: 0:01:07  time: 0.2696  data_time: 0.0020  memory: 17114  
10/06 09:32:49 - mmengine - INFO - Iter(test) [1850/2000]    eta: 0:00:50  time: 0.2674  data_time: 0.0019  memory: 1317  
10/06 09:33:03 - mmengine - INFO - Iter(test) [1900/2000]    eta: 0:00:33  time: 0.3285  data_time: 0.0017  memory: 17182  
10/06 09:33:17 - mmengine - INFO - Iter(test) [1950/2000]    eta: 0:00:16  time: 0.2622  data_time: 0.0017  memory: 17197  
10/06 09:33:32 - mmengine - INFO - Iter(test) [2000/2000]    eta: 0:00:00  time: 0.2520  data_time: 0.0014  memory: 17131  
10/06 09:33:32 - mmengine - INFO - per class results:
10/06 09:33:32 - mmengine - INFO - 
+---------------------+-------+-------+
|        Class        |  IoU  |  Acc  |
+---------------------+-------+-------+
|         wall        | 76.16 | 87.85 |
|       building      | 81.73 | 93.03 |
|         sky         |  93.8 | 96.92 |
|        floor        | 81.05 | 90.08 |
|         tree        | 74.17 | 86.15 |
|       ceiling       | 82.14 | 88.71 |
|         road        | 82.24 | 89.53 |
|         bed         | 87.18 | 94.12 |
|      windowpane     | 60.01 | 76.78 |
|        grass        | 63.19 | 75.61 |
|       cabinet       | 58.63 |  74.7 |
|       sidewalk      | 64.16 | 79.74 |
|        person       | 81.64 | 88.33 |
|        earth        | 36.89 | 50.64 |
|         door        | 41.84 | 54.87 |
|        table        | 52.57 | 68.82 |
|       mountain      | 58.05 | 79.19 |
|        plant        | 51.85 | 59.41 |
|       curtain       | 73.18 | 84.85 |
|        chair        | 52.88 | 64.56 |
|         car         | 85.79 | 91.57 |
|        water        | 54.82 | 76.48 |
|       painting      | 69.92 | 85.63 |
|         sofa        | 62.95 | 80.66 |
|        shelf        | 39.86 | 58.15 |
|        house        | 42.27 |  50.9 |
|         sea         | 60.08 | 79.35 |
|        mirror       | 63.32 | 79.47 |
|         rug         | 55.96 | 60.58 |
|        field        | 31.57 | 69.29 |
|       armchair      | 32.72 | 53.48 |
|         seat        | 55.13 | 73.97 |
|        fence        | 42.81 | 62.09 |
|         desk        | 36.59 | 63.01 |
|         rock        | 31.27 | 45.13 |
|       wardrobe      | 50.61 |  62.7 |
|         lamp        | 61.76 | 73.46 |
|       bathtub       | 69.76 | 82.79 |
|       railing       | 34.46 | 48.76 |
|       cushion       | 54.68 | 69.59 |
|         base        | 27.18 | 45.97 |
|         box         | 27.05 | 40.91 |
|        column       | 49.82 |  55.2 |
|      signboard      | 40.71 | 51.98 |
|   chest of drawers  | 38.51 | 60.63 |
|       counter       | 32.75 | 39.68 |
|         sand        | 32.02 | 46.66 |
|         sink        | 72.65 | 81.14 |
|      skyscraper     | 46.62 | 55.98 |
|      fireplace      | 64.61 | 84.74 |
|     refrigerator    | 70.78 | 80.73 |
|      grandstand     |  47.4 | 68.56 |
|         path        | 26.77 | 35.24 |
|        stairs       | 25.42 | 29.98 |
|        runway       |  54.0 |  71.9 |
|         case        | 54.12 | 84.26 |
|      pool table     | 92.54 | 94.66 |
|        pillow       | 53.48 | 70.74 |
|     screen door     | 68.12 | 84.37 |
|       stairway      | 30.74 | 45.37 |
|        river        | 17.51 | 20.87 |
|        bridge       |  58.7 | 70.87 |
|       bookcase      | 30.08 | 48.83 |
|        blind        | 36.54 | 42.83 |
|     coffee table    | 56.23 | 76.46 |
|        toilet       | 86.37 |  90.1 |
|        flower       | 32.31 | 49.09 |
|         book        |  48.5 | 69.35 |
|         hill        |  5.89 | 10.33 |
|        bench        | 50.47 | 68.89 |
|      countertop     |  57.0 | 72.74 |
|        stove        | 67.78 | 77.43 |
|         palm        | 51.95 | 66.32 |
|    kitchen island   | 46.82 | 85.94 |
|       computer      | 66.32 | 77.35 |
|     swivel chair    | 37.96 | 56.43 |
|         boat        | 44.23 |  53.7 |
|         bar         | 51.25 | 60.38 |
|    arcade machine   | 31.58 | 36.12 |
|        hovel        | 12.53 | 21.26 |
|         bus         | 87.99 | 95.76 |
|        towel        | 72.39 | 82.21 |
|        light        | 56.02 | 71.07 |
|        truck        | 25.01 | 36.37 |
|        tower        | 30.54 | 50.69 |
|      chandelier     | 63.09 | 76.96 |
|        awning       | 31.46 |  39.2 |
|     streetlight     | 28.47 | 42.84 |
|        booth        | 19.68 | 27.28 |
| television receiver |  68.4 | 75.07 |
|       airplane      | 61.87 | 66.74 |
|      dirt track     |  0.12 |  0.49 |
|       apparel       | 39.55 | 56.04 |
|         pole        |  28.0 | 46.67 |
|         land        |  1.16 |  1.28 |
|      bannister      |  8.25 | 10.93 |
|      escalator      | 20.26 | 20.76 |
|       ottoman       | 44.47 | 63.57 |
|        bottle       | 25.59 | 34.54 |
|        buffet       | 43.65 | 51.35 |
|        poster       | 23.09 | 31.64 |
|        stage        |  6.8  | 11.59 |
|         van         | 46.27 | 71.76 |
|         ship        | 31.57 | 46.15 |
|       fountain      | 20.71 | 21.95 |
|    conveyer belt    | 48.05 | 64.08 |
|        canopy       | 21.94 | 35.71 |
|        washer       |  69.0 | 69.48 |
|      plaything      | 11.82 | 24.81 |
|    swimming pool    | 32.67 | 67.08 |
|        stool        | 37.85 | 48.37 |
|        barrel       | 20.48 |  64.9 |
|        basket       | 30.26 | 44.82 |
|      waterfall      |  53.2 | 92.81 |
|         tent        | 89.45 | 98.59 |
|         bag         | 12.29 | 17.28 |
|       minibike      | 70.84 | 83.75 |
|        cradle       |  67.4 | 84.61 |
|         oven        | 15.06 | 41.17 |
|         ball        | 25.21 | 37.51 |
|         food        | 65.44 | 76.04 |
|         step        | 10.25 | 12.79 |
|         tank        | 36.73 | 40.38 |
|      trade name     | 28.92 | 37.98 |
|      microwave      | 39.62 | 44.51 |
|         pot         | 46.15 | 57.31 |
|        animal       | 67.17 | 70.64 |
|       bicycle       | 51.88 | 73.33 |
|         lake        |  0.0  |  0.0  |
|      dishwasher     | 66.45 | 80.62 |
|        screen       | 71.14 | 89.98 |
|       blanket       | 10.61 | 12.27 |
|      sculpture      | 43.22 | 59.15 |
|         hood        | 51.44 | 56.11 |
|        sconce       | 33.29 |  41.0 |
|         vase        | 38.52 | 55.54 |
|    traffic light    | 33.35 | 56.29 |
|         tray        |  5.35 |  7.87 |
|        ashcan       | 32.26 | 46.88 |
|         fan         | 61.07 | 79.85 |
|         pier        |  2.46 |  3.45 |
|      crt screen     |  9.0  | 28.17 |
|        plate        | 55.26 | 73.34 |
|       monitor       |  1.68 |  1.83 |
|    bulletin board   | 40.77 | 49.15 |
|        shower       |  7.9  | 16.73 |
|       radiator      | 56.31 | 62.42 |
|        glass        | 16.98 |  20.9 |
|        clock        | 29.38 | 42.85 |
|         flag        | 48.09 | 52.74 |
+---------------------+-------+-------+
10/06 09:33:32 - mmengine - INFO - Iter(test) [2000/2000]    aAcc: 81.7500  mIoU: 45.2400  mAcc: 57.9500  data_time: 0.0020  time: 0.3332
Finished processing corruption type: fog
Processing corruption type: brightness
10/06 09:33:36 - mmengine - INFO - 
------------------------------------------------------------
System environment:
    sys.platform: linux
    Python: 3.10.13 | packaged by conda-forge | (main, Dec 23 2023, 15:36:39) [GCC 12.3.0]
    CUDA available: True
    MUSA available: False
    numpy_random_seed: 168972222
    GPU 0: Tesla V100-SXM2-32GB
    CUDA_HOME: /opt/bwhpc/common/devel/cuda/11.7
    NVCC: Cuda compilation tools, release 11.7, V11.7.99
    GCC: gcc (GCC) 8.5.0 20210514 (Red Hat 8.5.0-18)
    PyTorch: 1.13.1
    PyTorch compiling details: PyTorch built with:
  - GCC 9.3
  - C++ Version: 201402
  - Intel(R) oneAPI Math Kernel Library Version 2023.1-Product Build 20230303 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v2.6.0 (Git Hash 52b5f107dd9cf10910aaa19cb47f3abf9b349815)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - LAPACK is enabled (usually provided by MKL)
  - NNPACK is enabled
  - CPU capability usage: AVX2
  - CUDA Runtime 11.7
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_61,code=sm_61;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86;-gencode;arch=compute_37,code=compute_37
  - CuDNN 8.5
  - Magma 2.6.1
  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.7, CUDNN_VERSION=8.5.0, CXX_COMPILER=/opt/rh/devtoolset-9/root/usr/bin/c++, CXX_FLAGS= -fabi-version=11 -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -DEDGE_PROFILER_USE_KINETO -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Werror=non-virtual-dtor -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wunused-local-typedefs -Wno-unused-parameter -Wno-unused-function -Wno-unused-result -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Werror=cast-function-type -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.13.1, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, USE_ROCM=OFF, 

    TorchVision: 0.14.1
    OpenCV: 3.4.18
    MMEngine: 0.10.4

Runtime environment:
    cudnn_benchmark: True
    mp_cfg: {'mp_start_method': 'fork', 'opencv_num_threads': 0}
    dist_cfg: {'backend': 'nccl'}
    seed: 168972222
    Distributed launcher: none
    Distributed training: False
    GPU number: 1
------------------------------------------------------------

10/06 09:33:36 - mmengine - INFO - Config:
auto_scale_lr = dict(base_batch_size=16, enable=False)
backbone_embed_multi = dict(decay_mult=0.0, lr_mult=0.1)
backbone_norm_multi = dict(decay_mult=0.0, lr_mult=0.1)
crop_size = (
    512,
    512,
)
custom_keys = dict({
    'absolute_pos_embed':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone':
    dict(decay_mult=1.0, lr_mult=0.1),
    'backbone.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.patch_embed.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.0.blocks.0.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.0.blocks.1.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.0.downsample.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.1.blocks.0.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.1.blocks.1.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.1.downsample.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.0.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.1.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.10.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.11.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.12.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.13.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.14.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.15.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.16.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.17.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.2.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.3.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.4.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.5.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.6.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.7.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.8.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.9.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.downsample.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.3.blocks.0.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.3.blocks.1.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'level_embed':
    dict(decay_mult=0.0, lr_mult=1.0),
    'query_embed':
    dict(decay_mult=0.0, lr_mult=1.0),
    'query_feat':
    dict(decay_mult=0.0, lr_mult=1.0),
    'relative_position_bias_table':
    dict(decay_mult=0.0, lr_mult=0.1)
})
data_root = 'data/ade/ADEChallengeData2016'
dataset_type = 'ADE20KDataset'
default_hooks = dict(
    checkpoint=dict(
        by_epoch=False, interval=5000, save_best='mIoU',
        type='CheckpointHook'),
    logger=dict(interval=50, log_metric_by_epoch=False, type='LoggerHook'),
    param_scheduler=dict(type='ParamSchedulerHook'),
    sampler_seed=dict(type='DistSamplerSeedHook'),
    timer=dict(type='IterTimerHook'),
    visualization=dict(type='SegVisualizationHook'))
default_scope = 'mmseg'
depths = [
    2,
    2,
    18,
    2,
]
embed_multi = dict(decay_mult=0.0, lr_mult=1.0)
env_cfg = dict(
    cudnn_benchmark=True,
    dist_cfg=dict(backend='nccl'),
    mp_cfg=dict(mp_start_method='fork', opencv_num_threads=0))
img_ratios = [
    0.5,
    0.75,
    1.0,
    1.25,
    1.5,
    1.75,
]
launcher = 'none'
load_from = '../checkpoint_files/ade20k/mask2former/best_mIoU_iter_155000.pth'
log_level = 'INFO'
log_processor = dict(by_epoch=False)
model = dict(
    backbone=dict(
        attn_drop_rate=0.0,
        depths=[
            2,
            2,
            18,
            2,
        ],
        drop_path_rate=0.3,
        drop_rate=0.0,
        embed_dims=128,
        frozen_stages=-1,
        init_cfg=dict(
            checkpoint=
            'https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/swin/swin_base_patch4_window12_384_20220317-55b0104a.pth',
            type='Pretrained'),
        mlp_ratio=4,
        num_heads=[
            4,
            8,
            16,
            32,
        ],
        out_indices=(
            0,
            1,
            2,
            3,
        ),
        patch_norm=True,
        pretrain_img_size=384,
        qk_scale=None,
        qkv_bias=True,
        type='SwinTransformer',
        window_size=12,
        with_cp=False),
    data_preprocessor=dict(
        bgr_to_rgb=True,
        corruption='brightness',
        mean=[
            123.675,
            116.28,
            103.53,
        ],
        pad_val=0,
        seg_pad_val=255,
        size=(
            512,
            512,
        ),
        std=[
            58.395,
            57.12,
            57.375,
        ],
        type='SegDataPreProcessor'),
    decode_head=dict(
        align_corners=False,
        enforce_decoder_input_project=False,
        feat_channels=256,
        in_channels=[
            128,
            256,
            512,
            1024,
        ],
        loss_cls=dict(
            class_weight=[
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                0.1,
            ],
            loss_weight=2.0,
            reduction='mean',
            type='mmdet.CrossEntropyLoss',
            use_sigmoid=False),
        loss_dice=dict(
            activate=True,
            eps=1.0,
            loss_weight=5.0,
            naive_dice=True,
            reduction='mean',
            type='mmdet.DiceLoss',
            use_sigmoid=True),
        loss_mask=dict(
            loss_weight=5.0,
            reduction='mean',
            type='mmdet.CrossEntropyLoss',
            use_sigmoid=True),
        num_classes=150,
        num_queries=100,
        num_transformer_feat_level=3,
        out_channels=256,
        pixel_decoder=dict(
            act_cfg=dict(type='ReLU'),
            encoder=dict(
                init_cfg=None,
                layer_cfg=dict(
                    ffn_cfg=dict(
                        act_cfg=dict(inplace=True, type='ReLU'),
                        embed_dims=256,
                        feedforward_channels=1024,
                        ffn_drop=0.0,
                        num_fcs=2),
                    self_attn_cfg=dict(
                        batch_first=True,
                        dropout=0.0,
                        embed_dims=256,
                        im2col_step=64,
                        init_cfg=None,
                        norm_cfg=None,
                        num_heads=8,
                        num_levels=3,
                        num_points=4)),
                num_layers=6),
            init_cfg=None,
            norm_cfg=dict(num_groups=32, type='GN'),
            num_outs=3,
            positional_encoding=dict(normalize=True, num_feats=128),
            type='mmdet.MSDeformAttnPixelDecoder'),
        positional_encoding=dict(normalize=True, num_feats=128),
        strides=[
            4,
            8,
            16,
            32,
        ],
        train_cfg=dict(
            assigner=dict(
                match_costs=[
                    dict(type='mmdet.ClassificationCost', weight=2.0),
                    dict(
                        type='mmdet.CrossEntropyLossCost',
                        use_sigmoid=True,
                        weight=5.0),
                    dict(
                        eps=1.0,
                        pred_act=True,
                        type='mmdet.DiceCost',
                        weight=5.0),
                ],
                type='mmdet.HungarianAssigner'),
            importance_sample_ratio=0.75,
            num_points=12544,
            oversample_ratio=3.0,
            sampler=dict(type='mmdet.MaskPseudoSampler')),
        transformer_decoder=dict(
            init_cfg=None,
            layer_cfg=dict(
                cross_attn_cfg=dict(
                    attn_drop=0.0,
                    batch_first=True,
                    dropout_layer=None,
                    embed_dims=256,
                    num_heads=8,
                    proj_drop=0.0),
                ffn_cfg=dict(
                    act_cfg=dict(inplace=True, type='ReLU'),
                    add_identity=True,
                    dropout_layer=None,
                    embed_dims=256,
                    feedforward_channels=2048,
                    ffn_drop=0.0,
                    num_fcs=2),
                self_attn_cfg=dict(
                    attn_drop=0.0,
                    batch_first=True,
                    dropout_layer=None,
                    embed_dims=256,
                    num_heads=8,
                    proj_drop=0.0)),
            num_layers=9,
            return_intermediate=True),
        type='Mask2FormerHead'),
    test_cfg=dict(mode='whole'),
    train_cfg=dict(),
    type='EncoderDecoder')
num_classes = 150
optim_wrapper = dict(
    clip_grad=dict(max_norm=0.01, norm_type=2),
    optimizer=dict(
        betas=(
            0.9,
            0.999,
        ),
        eps=1e-08,
        lr=0.0001,
        type='AdamW',
        weight_decay=0.05),
    paramwise_cfg=dict(
        custom_keys=dict({
            'absolute_pos_embed':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone':
            dict(decay_mult=1.0, lr_mult=0.1),
            'backbone.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.patch_embed.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.0.blocks.0.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.0.blocks.1.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.0.downsample.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.1.blocks.0.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.1.blocks.1.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.1.downsample.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.0.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.1.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.10.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.11.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.12.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.13.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.14.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.15.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.16.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.17.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.2.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.3.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.4.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.5.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.6.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.7.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.8.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.9.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.downsample.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.3.blocks.0.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.3.blocks.1.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'level_embed':
            dict(decay_mult=0.0, lr_mult=1.0),
            'query_embed':
            dict(decay_mult=0.0, lr_mult=1.0),
            'query_feat':
            dict(decay_mult=0.0, lr_mult=1.0),
            'relative_position_bias_table':
            dict(decay_mult=0.0, lr_mult=0.1)
        }),
        norm_decay_mult=0.0),
    type='OptimWrapper')
optimizer = dict(
    betas=(
        0.9,
        0.999,
    ),
    eps=1e-08,
    lr=0.0001,
    type='AdamW',
    weight_decay=0.05)
param_scheduler = [
    dict(
        begin=0,
        by_epoch=False,
        end=160000,
        eta_min=0,
        power=0.9,
        type='PolyLR'),
]
pretrained = 'https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/swin/swin_base_patch4_window12_384_20220317-55b0104a.pth'
resume = False
test_cfg = dict(type='TestLoop')
test_dataloader = dict(
    batch_size=1,
    dataset=dict(
        data_prefix=dict(
            img_path='images/validation',
            seg_map_path='annotations/validation'),
        data_root='data/ade/ADEChallengeData2016',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(keep_ratio=True, scale=(
                2560,
                640,
            ), type='Resize'),
            dict(reduce_zero_label=True, type='LoadAnnotations'),
            dict(type='PackSegInputs'),
        ],
        type='ADE20KDataset'),
    num_workers=4,
    persistent_workers=True,
    sampler=dict(shuffle=False, type='DefaultSampler'))
test_evaluator = dict(
    iou_metrics=[
        'mIoU',
    ], type='IoUMetric')
test_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(keep_ratio=True, scale=(
        2560,
        640,
    ), type='Resize'),
    dict(reduce_zero_label=True, type='LoadAnnotations'),
    dict(type='PackSegInputs'),
]
train_cfg = dict(
    max_iters=160000, type='IterBasedTrainLoop', val_interval=5000)
train_dataloader = dict(
    batch_size=2,
    dataset=dict(
        data_prefix=dict(
            img_path='images/training', seg_map_path='annotations/training'),
        data_root='data/ade/ADEChallengeData2016',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(reduce_zero_label=True, type='LoadAnnotations'),
            dict(
                max_size=2560,
                resize_type='ResizeShortestEdge',
                scales=[
                    320,
                    384,
                    448,
                    512,
                    576,
                    640,
                    704,
                    768,
                    832,
                    896,
                    960,
                    1024,
                    1088,
                    1152,
                    1216,
                    1280,
                ],
                type='RandomChoiceResize'),
            dict(
                cat_max_ratio=0.75, crop_size=(
                    512,
                    512,
                ), type='RandomCrop'),
            dict(prob=0.5, type='RandomFlip'),
            dict(type='PhotoMetricDistortion'),
            dict(type='PackSegInputs'),
        ],
        type='ADE20KDataset'),
    num_workers=4,
    persistent_workers=True,
    sampler=dict(shuffle=True, type='InfiniteSampler'))
train_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(reduce_zero_label=True, type='LoadAnnotations'),
    dict(
        max_size=2560,
        resize_type='ResizeShortestEdge',
        scales=[
            320,
            384,
            448,
            512,
            576,
            640,
            704,
            768,
            832,
            896,
            960,
            1024,
            1088,
            1152,
            1216,
            1280,
        ],
        type='RandomChoiceResize'),
    dict(cat_max_ratio=0.75, crop_size=(
        512,
        512,
    ), type='RandomCrop'),
    dict(prob=0.5, type='RandomFlip'),
    dict(type='PhotoMetricDistortion'),
    dict(type='PackSegInputs'),
]
tta_model = dict(type='SegTTAModel')
tta_pipeline = [
    dict(backend_args=None, type='LoadImageFromFile'),
    dict(
        transforms=[
            [
                dict(keep_ratio=True, scale_factor=0.5, type='Resize'),
                dict(keep_ratio=True, scale_factor=0.75, type='Resize'),
                dict(keep_ratio=True, scale_factor=1.0, type='Resize'),
                dict(keep_ratio=True, scale_factor=1.25, type='Resize'),
                dict(keep_ratio=True, scale_factor=1.5, type='Resize'),
                dict(keep_ratio=True, scale_factor=1.75, type='Resize'),
            ],
            [
                dict(direction='horizontal', prob=0.0, type='RandomFlip'),
                dict(direction='horizontal', prob=1.0, type='RandomFlip'),
            ],
            [
                dict(type='LoadAnnotations'),
            ],
            [
                dict(type='PackSegInputs'),
            ],
        ],
        type='TestTimeAug'),
]
val_cfg = dict(type='ValLoop')
val_dataloader = dict(
    batch_size=1,
    dataset=dict(
        data_prefix=dict(
            img_path='images/validation',
            seg_map_path='annotations/validation'),
        data_root='data/ade/ADEChallengeData2016',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(keep_ratio=True, scale=(
                2560,
                640,
            ), type='Resize'),
            dict(reduce_zero_label=True, type='LoadAnnotations'),
            dict(type='PackSegInputs'),
        ],
        type='ADE20KDataset'),
    num_workers=4,
    persistent_workers=True,
    sampler=dict(shuffle=False, type='DefaultSampler'))
val_evaluator = dict(
    iou_metrics=[
        'mIoU',
    ], type='IoUMetric')
vis_backends = [
    dict(type='LocalVisBackend'),
]
visualizer = dict(
    name='visualizer',
    type='SegLocalVisualizer',
    vis_backends=[
        dict(type='LocalVisBackend'),
    ])
work_dir = '../corruptions/work_dirs/ade20k/mask2former/mask2former_swin-b-in1k-384x384-pre_8xb2-160k_ade20k-512x512/brightness'

/pfs/work7/workspace/scratch/ma_mkacar-team_project_fss2024/benchmarking_robustness/semantic_segmentation/mmsegmentation/mmseg/ops_dcnv3/modules/dcnv3.py:20: UserWarning: Now, we support DCNv4 in InternImage.
  warnings.warn('Now, we support DCNv4 in InternImage.')
10/06 09:33:40 - mmengine - INFO - Distributed training is not used, all SyncBatchNorm (SyncBN) layers in the model will be automatically reverted to BatchNormXd layers if they are used.
10/06 09:33:41 - mmengine - INFO - Hooks will be executed in the following order:
before_run:
(VERY_HIGH   ) RuntimeInfoHook                    
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
before_train:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_train_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(NORMAL      ) DistSamplerSeedHook                
 -------------------- 
before_train_iter:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_train_iter:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(NORMAL      ) SegVisualizationHook               
(BELOW_NORMAL) LoggerHook                         
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
after_train_epoch:
(NORMAL      ) IterTimerHook                      
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_val:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
before_val_epoch:
(NORMAL      ) IterTimerHook                      
 -------------------- 
before_val_iter:
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_val_iter:
(NORMAL      ) IterTimerHook                      
(NORMAL      ) SegVisualizationHook               
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_val_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
after_val:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
after_train:
(VERY_HIGH   ) RuntimeInfoHook                    
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_test:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
before_test_epoch:
(NORMAL      ) IterTimerHook                      
 -------------------- 
before_test_iter:
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_test_iter:
(NORMAL      ) IterTimerHook                      
(NORMAL      ) SegVisualizationHook               
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_test_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_test:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
after_run:
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
10/06 09:33:41 - mmengine - WARNING - The prefix is not set in metric class IoUMetric.
Loads checkpoint by local backend from path: ../checkpoint_files/ade20k/mask2former/best_mIoU_iter_155000.pth
10/06 09:33:42 - mmengine - INFO - Load checkpoint from ../checkpoint_files/ade20k/mask2former/best_mIoU_iter_155000.pth
10/06 09:34:22 - mmengine - INFO - Iter(test) [  50/2000]    eta: 0:25:29  time: 0.6102  data_time: 0.0019  memory: 17181  
10/06 09:34:51 - mmengine - INFO - Iter(test) [ 100/2000]    eta: 0:21:42  time: 0.6008  data_time: 0.0045  memory: 17180  
10/06 09:35:16 - mmengine - INFO - Iter(test) [ 150/2000]    eta: 0:19:14  time: 0.4976  data_time: 0.0018  memory: 17150  
10/06 09:35:41 - mmengine - INFO - Iter(test) [ 200/2000]    eta: 0:17:49  time: 0.5532  data_time: 0.0018  memory: 17194  
10/06 09:36:08 - mmengine - INFO - Iter(test) [ 250/2000]    eta: 0:16:56  time: 0.4453  data_time: 0.0017  memory: 17202  
10/06 09:36:32 - mmengine - INFO - Iter(test) [ 300/2000]    eta: 0:15:58  time: 0.3710  data_time: 0.0018  memory: 17180  
10/06 09:36:57 - mmengine - INFO - Iter(test) [ 350/2000]    eta: 0:15:15  time: 0.4820  data_time: 0.0017  memory: 17178  
10/06 09:37:18 - mmengine - INFO - Iter(test) [ 400/2000]    eta: 0:14:20  time: 0.3778  data_time: 0.0016  memory: 17177  
10/06 09:37:36 - mmengine - INFO - Iter(test) [ 450/2000]    eta: 0:13:24  time: 0.3914  data_time: 0.0017  memory: 17147  
10/06 09:37:56 - mmengine - INFO - Iter(test) [ 500/2000]    eta: 0:12:41  time: 0.4305  data_time: 0.0018  memory: 17149  
10/06 09:38:17 - mmengine - INFO - Iter(test) [ 550/2000]    eta: 0:12:03  time: 0.4623  data_time: 0.0018  memory: 17179  
10/06 09:38:35 - mmengine - INFO - Iter(test) [ 600/2000]    eta: 0:11:21  time: 0.3653  data_time: 0.0019  memory: 3938  
10/06 09:38:56 - mmengine - INFO - Iter(test) [ 650/2000]    eta: 0:10:51  time: 0.4635  data_time: 0.0016  memory: 17181  
10/06 09:39:20 - mmengine - INFO - Iter(test) [ 700/2000]    eta: 0:10:26  time: 0.4325  data_time: 0.0018  memory: 17177  
10/06 09:39:43 - mmengine - INFO - Iter(test) [ 750/2000]    eta: 0:10:00  time: 0.7359  data_time: 0.0032  memory: 17184  
10/06 09:40:01 - mmengine - INFO - Iter(test) [ 800/2000]    eta: 0:09:27  time: 0.3641  data_time: 0.0051  memory: 17151  
10/06 09:40:19 - mmengine - INFO - Iter(test) [ 850/2000]    eta: 0:08:56  time: 0.3624  data_time: 0.0019  memory: 1428  
10/06 09:40:38 - mmengine - INFO - Iter(test) [ 900/2000]    eta: 0:08:27  time: 0.3817  data_time: 0.0017  memory: 17138  
10/06 09:41:00 - mmengine - INFO - Iter(test) [ 950/2000]    eta: 0:08:03  time: 0.5042  data_time: 0.0018  memory: 17133  
10/06 09:41:18 - mmengine - INFO - Iter(test) [1000/2000]    eta: 0:07:35  time: 0.3425  data_time: 0.0017  memory: 17096  
10/06 09:41:38 - mmengine - INFO - Iter(test) [1050/2000]    eta: 0:07:09  time: 0.4447  data_time: 0.0017  memory: 17182  
10/06 09:41:58 - mmengine - INFO - Iter(test) [1100/2000]    eta: 0:06:45  time: 0.3488  data_time: 0.0019  memory: 17175  
10/06 09:42:16 - mmengine - INFO - Iter(test) [1150/2000]    eta: 0:06:19  time: 0.3569  data_time: 0.0018  memory: 17117  
10/06 09:42:35 - mmengine - INFO - Iter(test) [1200/2000]    eta: 0:05:54  time: 0.3456  data_time: 0.0017  memory: 17113  
10/06 09:42:55 - mmengine - INFO - Iter(test) [1250/2000]    eta: 0:05:31  time: 0.4220  data_time: 0.0017  memory: 17172  
10/06 09:43:11 - mmengine - INFO - Iter(test) [1300/2000]    eta: 0:05:06  time: 0.3613  data_time: 0.0027  memory: 1430  
10/06 09:43:30 - mmengine - INFO - Iter(test) [1350/2000]    eta: 0:04:43  time: 0.3338  data_time: 0.0040  memory: 17110  
10/06 09:43:51 - mmengine - INFO - Iter(test) [1400/2000]    eta: 0:04:20  time: 0.3857  data_time: 0.0017  memory: 17154  
10/06 09:44:09 - mmengine - INFO - Iter(test) [1450/2000]    eta: 0:03:57  time: 0.4243  data_time: 0.0017  memory: 17130  
10/06 09:44:27 - mmengine - INFO - Iter(test) [1500/2000]    eta: 0:03:34  time: 0.3342  data_time: 0.0017  memory: 17125  
10/06 09:44:46 - mmengine - INFO - Iter(test) [1550/2000]    eta: 0:03:12  time: 0.3596  data_time: 0.0017  memory: 17154  
10/06 09:45:04 - mmengine - INFO - Iter(test) [1600/2000]    eta: 0:02:50  time: 0.3468  data_time: 0.0019  memory: 1425  
10/06 09:45:23 - mmengine - INFO - Iter(test) [1650/2000]    eta: 0:02:28  time: 0.3355  data_time: 0.0033  memory: 17192  
10/06 09:45:45 - mmengine - INFO - Iter(test) [1700/2000]    eta: 0:02:07  time: 0.3538  data_time: 0.0019  memory: 17151  
10/06 09:46:04 - mmengine - INFO - Iter(test) [1750/2000]    eta: 0:01:45  time: 0.3479  data_time: 0.0017  memory: 17111  
10/06 09:46:22 - mmengine - INFO - Iter(test) [1800/2000]    eta: 0:01:24  time: 0.3668  data_time: 0.0019  memory: 17114  
10/06 09:46:40 - mmengine - INFO - Iter(test) [1850/2000]    eta: 0:01:03  time: 0.3665  data_time: 0.0019  memory: 1317  
10/06 09:46:58 - mmengine - INFO - Iter(test) [1900/2000]    eta: 0:00:41  time: 0.4063  data_time: 0.0017  memory: 17182  
10/06 09:47:17 - mmengine - INFO - Iter(test) [1950/2000]    eta: 0:00:20  time: 0.3411  data_time: 0.0016  memory: 17197  
10/06 09:47:36 - mmengine - INFO - Iter(test) [2000/2000]    eta: 0:00:00  time: 0.3246  data_time: 0.0014  memory: 17131  
10/06 09:47:36 - mmengine - INFO - per class results:
10/06 09:47:36 - mmengine - INFO - 
+---------------------+-------+-------+
|        Class        |  IoU  |  Acc  |
+---------------------+-------+-------+
|         wall        | 76.08 | 86.66 |
|       building      | 81.24 | 92.81 |
|         sky         | 94.32 | 97.07 |
|        floor        | 81.09 | 89.55 |
|         tree        | 74.47 | 86.27 |
|       ceiling       |  83.2 | 89.75 |
|         road        | 82.11 | 88.81 |
|         bed         | 87.27 | 94.52 |
|      windowpane     | 60.31 | 77.51 |
|        grass        | 60.72 | 74.15 |
|       cabinet       | 58.49 | 74.81 |
|       sidewalk      | 63.58 | 80.42 |
|        person       | 81.93 | 89.01 |
|        earth        |  36.3 | 48.79 |
|         door        | 41.59 | 54.88 |
|        table        | 56.03 | 72.56 |
|       mountain      | 59.98 |  80.2 |
|        plant        |  52.7 | 61.55 |
|       curtain       | 73.51 | 84.28 |
|        chair        |  53.7 | 66.23 |
|         car         | 86.25 | 92.41 |
|        water        | 52.47 | 73.98 |
|       painting      | 71.76 | 86.94 |
|         sofa        | 63.04 | 81.02 |
|        shelf        | 41.07 | 61.15 |
|        house        | 39.72 | 48.18 |
|         sea         | 57.59 | 77.53 |
|        mirror       | 63.61 | 80.22 |
|         rug         | 59.41 | 65.21 |
|        field        | 27.95 | 66.86 |
|       armchair      | 34.78 |  56.2 |
|         seat        | 57.14 |  71.1 |
|        fence        | 46.89 | 70.35 |
|         desk        | 36.51 | 60.46 |
|         rock        | 45.89 | 67.11 |
|       wardrobe      | 54.26 | 67.29 |
|         lamp        | 62.77 | 74.81 |
|       bathtub       | 67.03 | 84.04 |
|       railing       | 36.47 | 49.58 |
|       cushion       | 55.77 | 71.49 |
|         base        | 28.21 | 46.64 |
|         box         | 27.37 | 42.21 |
|        column       | 50.18 | 56.16 |
|      signboard      | 40.25 | 52.36 |
|   chest of drawers  | 37.12 | 61.23 |
|       counter       | 37.66 | 46.21 |
|         sand        | 32.41 | 46.12 |
|         sink        | 71.37 | 80.98 |
|      skyscraper     | 43.57 | 52.13 |
|      fireplace      | 66.38 |  85.7 |
|     refrigerator    | 71.15 |  80.8 |
|      grandstand     | 47.21 | 67.74 |
|         path        | 17.79 | 23.57 |
|        stairs       | 28.62 | 34.32 |
|        runway       |  59.5 | 77.98 |
|         case        | 60.94 | 84.29 |
|      pool table     | 92.85 | 95.09 |
|        pillow       | 55.89 | 70.76 |
|     screen door     | 70.01 | 84.25 |
|       stairway      | 34.57 | 46.81 |
|        river        | 13.87 |  17.7 |
|        bridge       | 56.32 | 68.52 |
|       bookcase      | 30.05 | 49.32 |
|        blind        | 39.91 | 45.53 |
|     coffee table    | 57.38 | 78.66 |
|        toilet       | 86.48 | 90.99 |
|        flower       | 33.02 | 53.01 |
|         book        | 49.13 |  70.0 |
|         hill        |  6.87 | 11.93 |
|        bench        | 54.45 | 75.46 |
|      countertop     | 54.58 | 71.73 |
|        stove        | 71.24 | 81.02 |
|         palm        | 52.56 |  68.5 |
|    kitchen island   | 44.63 | 83.42 |
|       computer      | 69.87 | 80.45 |
|     swivel chair    | 37.57 | 54.83 |
|         boat        | 69.26 |  89.2 |
|         bar         | 51.33 | 58.94 |
|    arcade machine   | 19.23 | 22.26 |
|        hovel        | 26.28 | 44.66 |
|         bus         |  89.4 | 96.21 |
|        towel        | 71.54 | 81.76 |
|        light        | 55.85 | 72.12 |
|        truck        | 32.32 | 48.49 |
|        tower        | 30.29 | 50.82 |
|      chandelier     |  62.6 | 76.53 |
|        awning       | 36.83 | 47.06 |
|     streetlight     | 30.87 | 42.94 |
|        booth        | 20.56 | 27.33 |
| television receiver | 67.78 | 77.18 |
|       airplane      | 64.01 | 68.79 |
|      dirt track     |  0.05 |  0.18 |
|       apparel       |  39.1 | 55.76 |
|         pole        | 32.84 | 55.05 |
|         land        |  1.31 |  1.43 |
|      bannister      |  8.28 | 10.96 |
|      escalator      | 16.85 | 17.27 |
|       ottoman       | 44.31 | 61.72 |
|        bottle       | 21.24 | 28.52 |
|        buffet       |  46.1 | 53.57 |
|        poster       | 26.38 | 31.56 |
|        stage        |  6.28 | 14.06 |
|         van         | 46.12 | 70.31 |
|         ship        | 86.91 | 89.65 |
|       fountain      | 30.69 | 32.51 |
|    conveyer belt    | 52.45 | 68.63 |
|        canopy       | 25.19 | 46.67 |
|        washer       | 67.51 | 67.86 |
|      plaything      | 18.12 | 28.74 |
|    swimming pool    | 35.13 |  69.0 |
|        stool        | 38.21 | 53.79 |
|        barrel       | 55.93 | 64.83 |
|        basket       | 29.94 | 45.33 |
|      waterfall      | 55.65 | 94.86 |
|         tent        | 94.74 | 97.94 |
|         bag         | 16.39 | 22.43 |
|       minibike      | 72.56 | 84.98 |
|        cradle       | 74.48 |  93.3 |
|         oven        | 17.03 | 49.71 |
|         ball        | 30.52 | 46.61 |
|         food        | 64.85 | 80.98 |
|         step        |  9.84 | 13.01 |
|         tank        | 41.48 | 45.58 |
|      trade name     | 29.36 | 39.45 |
|      microwave      | 38.21 | 42.08 |
|         pot         | 45.16 | 53.85 |
|        animal       | 70.13 | 75.36 |
|       bicycle       | 56.58 | 77.79 |
|         lake        |  0.0  |  0.0  |
|      dishwasher     | 70.24 | 78.64 |
|        screen       | 73.26 | 89.04 |
|       blanket       | 13.55 | 16.07 |
|      sculpture      | 49.27 | 65.66 |
|         hood        | 55.98 |  61.2 |
|        sconce       | 36.64 | 46.16 |
|         vase        | 37.99 | 57.14 |
|    traffic light    | 35.47 | 58.77 |
|         tray        |  4.68 |  6.43 |
|        ashcan       | 39.19 | 57.66 |
|         fan         | 59.22 | 81.58 |
|         pier        |  4.27 |  5.53 |
|      crt screen     |  8.34 | 28.12 |
|        plate        | 53.84 | 71.35 |
|       monitor       |  3.03 |  3.28 |
|    bulletin board   | 46.86 | 52.58 |
|        shower       | 12.96 | 15.93 |
|       radiator      | 55.44 | 62.53 |
|        glass        | 16.81 |  20.2 |
|        clock        | 28.51 |  42.7 |
|         flag        | 47.58 | 53.61 |
+---------------------+-------+-------+
10/06 09:47:36 - mmengine - INFO - Iter(test) [2000/2000]    aAcc: 81.9500  mIoU: 47.1800  mAcc: 59.9700  data_time: 0.0021  time: 0.4167
Finished processing corruption type: brightness
Processing corruption type: contrast
10/06 09:47:39 - mmengine - INFO - 
------------------------------------------------------------
System environment:
    sys.platform: linux
    Python: 3.10.13 | packaged by conda-forge | (main, Dec 23 2023, 15:36:39) [GCC 12.3.0]
    CUDA available: True
    MUSA available: False
    numpy_random_seed: 1352460305
    GPU 0: Tesla V100-SXM2-32GB
    CUDA_HOME: /opt/bwhpc/common/devel/cuda/11.7
    NVCC: Cuda compilation tools, release 11.7, V11.7.99
    GCC: gcc (GCC) 8.5.0 20210514 (Red Hat 8.5.0-18)
    PyTorch: 1.13.1
    PyTorch compiling details: PyTorch built with:
  - GCC 9.3
  - C++ Version: 201402
  - Intel(R) oneAPI Math Kernel Library Version 2023.1-Product Build 20230303 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v2.6.0 (Git Hash 52b5f107dd9cf10910aaa19cb47f3abf9b349815)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - LAPACK is enabled (usually provided by MKL)
  - NNPACK is enabled
  - CPU capability usage: AVX2
  - CUDA Runtime 11.7
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_61,code=sm_61;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86;-gencode;arch=compute_37,code=compute_37
  - CuDNN 8.5
  - Magma 2.6.1
  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.7, CUDNN_VERSION=8.5.0, CXX_COMPILER=/opt/rh/devtoolset-9/root/usr/bin/c++, CXX_FLAGS= -fabi-version=11 -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -DEDGE_PROFILER_USE_KINETO -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Werror=non-virtual-dtor -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wunused-local-typedefs -Wno-unused-parameter -Wno-unused-function -Wno-unused-result -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Werror=cast-function-type -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.13.1, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, USE_ROCM=OFF, 

    TorchVision: 0.14.1
    OpenCV: 3.4.18
    MMEngine: 0.10.4

Runtime environment:
    cudnn_benchmark: True
    mp_cfg: {'mp_start_method': 'fork', 'opencv_num_threads': 0}
    dist_cfg: {'backend': 'nccl'}
    seed: 1352460305
    Distributed launcher: none
    Distributed training: False
    GPU number: 1
------------------------------------------------------------

10/06 09:47:40 - mmengine - INFO - Config:
auto_scale_lr = dict(base_batch_size=16, enable=False)
backbone_embed_multi = dict(decay_mult=0.0, lr_mult=0.1)
backbone_norm_multi = dict(decay_mult=0.0, lr_mult=0.1)
crop_size = (
    512,
    512,
)
custom_keys = dict({
    'absolute_pos_embed':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone':
    dict(decay_mult=1.0, lr_mult=0.1),
    'backbone.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.patch_embed.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.0.blocks.0.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.0.blocks.1.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.0.downsample.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.1.blocks.0.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.1.blocks.1.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.1.downsample.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.0.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.1.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.10.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.11.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.12.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.13.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.14.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.15.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.16.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.17.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.2.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.3.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.4.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.5.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.6.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.7.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.8.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.9.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.downsample.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.3.blocks.0.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.3.blocks.1.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'level_embed':
    dict(decay_mult=0.0, lr_mult=1.0),
    'query_embed':
    dict(decay_mult=0.0, lr_mult=1.0),
    'query_feat':
    dict(decay_mult=0.0, lr_mult=1.0),
    'relative_position_bias_table':
    dict(decay_mult=0.0, lr_mult=0.1)
})
data_root = 'data/ade/ADEChallengeData2016'
dataset_type = 'ADE20KDataset'
default_hooks = dict(
    checkpoint=dict(
        by_epoch=False, interval=5000, save_best='mIoU',
        type='CheckpointHook'),
    logger=dict(interval=50, log_metric_by_epoch=False, type='LoggerHook'),
    param_scheduler=dict(type='ParamSchedulerHook'),
    sampler_seed=dict(type='DistSamplerSeedHook'),
    timer=dict(type='IterTimerHook'),
    visualization=dict(type='SegVisualizationHook'))
default_scope = 'mmseg'
depths = [
    2,
    2,
    18,
    2,
]
embed_multi = dict(decay_mult=0.0, lr_mult=1.0)
env_cfg = dict(
    cudnn_benchmark=True,
    dist_cfg=dict(backend='nccl'),
    mp_cfg=dict(mp_start_method='fork', opencv_num_threads=0))
img_ratios = [
    0.5,
    0.75,
    1.0,
    1.25,
    1.5,
    1.75,
]
launcher = 'none'
load_from = '../checkpoint_files/ade20k/mask2former/best_mIoU_iter_155000.pth'
log_level = 'INFO'
log_processor = dict(by_epoch=False)
model = dict(
    backbone=dict(
        attn_drop_rate=0.0,
        depths=[
            2,
            2,
            18,
            2,
        ],
        drop_path_rate=0.3,
        drop_rate=0.0,
        embed_dims=128,
        frozen_stages=-1,
        init_cfg=dict(
            checkpoint=
            'https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/swin/swin_base_patch4_window12_384_20220317-55b0104a.pth',
            type='Pretrained'),
        mlp_ratio=4,
        num_heads=[
            4,
            8,
            16,
            32,
        ],
        out_indices=(
            0,
            1,
            2,
            3,
        ),
        patch_norm=True,
        pretrain_img_size=384,
        qk_scale=None,
        qkv_bias=True,
        type='SwinTransformer',
        window_size=12,
        with_cp=False),
    data_preprocessor=dict(
        bgr_to_rgb=True,
        corruption='contrast',
        mean=[
            123.675,
            116.28,
            103.53,
        ],
        pad_val=0,
        seg_pad_val=255,
        size=(
            512,
            512,
        ),
        std=[
            58.395,
            57.12,
            57.375,
        ],
        type='SegDataPreProcessor'),
    decode_head=dict(
        align_corners=False,
        enforce_decoder_input_project=False,
        feat_channels=256,
        in_channels=[
            128,
            256,
            512,
            1024,
        ],
        loss_cls=dict(
            class_weight=[
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                0.1,
            ],
            loss_weight=2.0,
            reduction='mean',
            type='mmdet.CrossEntropyLoss',
            use_sigmoid=False),
        loss_dice=dict(
            activate=True,
            eps=1.0,
            loss_weight=5.0,
            naive_dice=True,
            reduction='mean',
            type='mmdet.DiceLoss',
            use_sigmoid=True),
        loss_mask=dict(
            loss_weight=5.0,
            reduction='mean',
            type='mmdet.CrossEntropyLoss',
            use_sigmoid=True),
        num_classes=150,
        num_queries=100,
        num_transformer_feat_level=3,
        out_channels=256,
        pixel_decoder=dict(
            act_cfg=dict(type='ReLU'),
            encoder=dict(
                init_cfg=None,
                layer_cfg=dict(
                    ffn_cfg=dict(
                        act_cfg=dict(inplace=True, type='ReLU'),
                        embed_dims=256,
                        feedforward_channels=1024,
                        ffn_drop=0.0,
                        num_fcs=2),
                    self_attn_cfg=dict(
                        batch_first=True,
                        dropout=0.0,
                        embed_dims=256,
                        im2col_step=64,
                        init_cfg=None,
                        norm_cfg=None,
                        num_heads=8,
                        num_levels=3,
                        num_points=4)),
                num_layers=6),
            init_cfg=None,
            norm_cfg=dict(num_groups=32, type='GN'),
            num_outs=3,
            positional_encoding=dict(normalize=True, num_feats=128),
            type='mmdet.MSDeformAttnPixelDecoder'),
        positional_encoding=dict(normalize=True, num_feats=128),
        strides=[
            4,
            8,
            16,
            32,
        ],
        train_cfg=dict(
            assigner=dict(
                match_costs=[
                    dict(type='mmdet.ClassificationCost', weight=2.0),
                    dict(
                        type='mmdet.CrossEntropyLossCost',
                        use_sigmoid=True,
                        weight=5.0),
                    dict(
                        eps=1.0,
                        pred_act=True,
                        type='mmdet.DiceCost',
                        weight=5.0),
                ],
                type='mmdet.HungarianAssigner'),
            importance_sample_ratio=0.75,
            num_points=12544,
            oversample_ratio=3.0,
            sampler=dict(type='mmdet.MaskPseudoSampler')),
        transformer_decoder=dict(
            init_cfg=None,
            layer_cfg=dict(
                cross_attn_cfg=dict(
                    attn_drop=0.0,
                    batch_first=True,
                    dropout_layer=None,
                    embed_dims=256,
                    num_heads=8,
                    proj_drop=0.0),
                ffn_cfg=dict(
                    act_cfg=dict(inplace=True, type='ReLU'),
                    add_identity=True,
                    dropout_layer=None,
                    embed_dims=256,
                    feedforward_channels=2048,
                    ffn_drop=0.0,
                    num_fcs=2),
                self_attn_cfg=dict(
                    attn_drop=0.0,
                    batch_first=True,
                    dropout_layer=None,
                    embed_dims=256,
                    num_heads=8,
                    proj_drop=0.0)),
            num_layers=9,
            return_intermediate=True),
        type='Mask2FormerHead'),
    test_cfg=dict(mode='whole'),
    train_cfg=dict(),
    type='EncoderDecoder')
num_classes = 150
optim_wrapper = dict(
    clip_grad=dict(max_norm=0.01, norm_type=2),
    optimizer=dict(
        betas=(
            0.9,
            0.999,
        ),
        eps=1e-08,
        lr=0.0001,
        type='AdamW',
        weight_decay=0.05),
    paramwise_cfg=dict(
        custom_keys=dict({
            'absolute_pos_embed':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone':
            dict(decay_mult=1.0, lr_mult=0.1),
            'backbone.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.patch_embed.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.0.blocks.0.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.0.blocks.1.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.0.downsample.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.1.blocks.0.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.1.blocks.1.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.1.downsample.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.0.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.1.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.10.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.11.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.12.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.13.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.14.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.15.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.16.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.17.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.2.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.3.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.4.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.5.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.6.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.7.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.8.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.9.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.downsample.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.3.blocks.0.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.3.blocks.1.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'level_embed':
            dict(decay_mult=0.0, lr_mult=1.0),
            'query_embed':
            dict(decay_mult=0.0, lr_mult=1.0),
            'query_feat':
            dict(decay_mult=0.0, lr_mult=1.0),
            'relative_position_bias_table':
            dict(decay_mult=0.0, lr_mult=0.1)
        }),
        norm_decay_mult=0.0),
    type='OptimWrapper')
optimizer = dict(
    betas=(
        0.9,
        0.999,
    ),
    eps=1e-08,
    lr=0.0001,
    type='AdamW',
    weight_decay=0.05)
param_scheduler = [
    dict(
        begin=0,
        by_epoch=False,
        end=160000,
        eta_min=0,
        power=0.9,
        type='PolyLR'),
]
pretrained = 'https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/swin/swin_base_patch4_window12_384_20220317-55b0104a.pth'
resume = False
test_cfg = dict(type='TestLoop')
test_dataloader = dict(
    batch_size=1,
    dataset=dict(
        data_prefix=dict(
            img_path='images/validation',
            seg_map_path='annotations/validation'),
        data_root='data/ade/ADEChallengeData2016',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(keep_ratio=True, scale=(
                2560,
                640,
            ), type='Resize'),
            dict(reduce_zero_label=True, type='LoadAnnotations'),
            dict(type='PackSegInputs'),
        ],
        type='ADE20KDataset'),
    num_workers=4,
    persistent_workers=True,
    sampler=dict(shuffle=False, type='DefaultSampler'))
test_evaluator = dict(
    iou_metrics=[
        'mIoU',
    ], type='IoUMetric')
test_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(keep_ratio=True, scale=(
        2560,
        640,
    ), type='Resize'),
    dict(reduce_zero_label=True, type='LoadAnnotations'),
    dict(type='PackSegInputs'),
]
train_cfg = dict(
    max_iters=160000, type='IterBasedTrainLoop', val_interval=5000)
train_dataloader = dict(
    batch_size=2,
    dataset=dict(
        data_prefix=dict(
            img_path='images/training', seg_map_path='annotations/training'),
        data_root='data/ade/ADEChallengeData2016',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(reduce_zero_label=True, type='LoadAnnotations'),
            dict(
                max_size=2560,
                resize_type='ResizeShortestEdge',
                scales=[
                    320,
                    384,
                    448,
                    512,
                    576,
                    640,
                    704,
                    768,
                    832,
                    896,
                    960,
                    1024,
                    1088,
                    1152,
                    1216,
                    1280,
                ],
                type='RandomChoiceResize'),
            dict(
                cat_max_ratio=0.75, crop_size=(
                    512,
                    512,
                ), type='RandomCrop'),
            dict(prob=0.5, type='RandomFlip'),
            dict(type='PhotoMetricDistortion'),
            dict(type='PackSegInputs'),
        ],
        type='ADE20KDataset'),
    num_workers=4,
    persistent_workers=True,
    sampler=dict(shuffle=True, type='InfiniteSampler'))
train_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(reduce_zero_label=True, type='LoadAnnotations'),
    dict(
        max_size=2560,
        resize_type='ResizeShortestEdge',
        scales=[
            320,
            384,
            448,
            512,
            576,
            640,
            704,
            768,
            832,
            896,
            960,
            1024,
            1088,
            1152,
            1216,
            1280,
        ],
        type='RandomChoiceResize'),
    dict(cat_max_ratio=0.75, crop_size=(
        512,
        512,
    ), type='RandomCrop'),
    dict(prob=0.5, type='RandomFlip'),
    dict(type='PhotoMetricDistortion'),
    dict(type='PackSegInputs'),
]
tta_model = dict(type='SegTTAModel')
tta_pipeline = [
    dict(backend_args=None, type='LoadImageFromFile'),
    dict(
        transforms=[
            [
                dict(keep_ratio=True, scale_factor=0.5, type='Resize'),
                dict(keep_ratio=True, scale_factor=0.75, type='Resize'),
                dict(keep_ratio=True, scale_factor=1.0, type='Resize'),
                dict(keep_ratio=True, scale_factor=1.25, type='Resize'),
                dict(keep_ratio=True, scale_factor=1.5, type='Resize'),
                dict(keep_ratio=True, scale_factor=1.75, type='Resize'),
            ],
            [
                dict(direction='horizontal', prob=0.0, type='RandomFlip'),
                dict(direction='horizontal', prob=1.0, type='RandomFlip'),
            ],
            [
                dict(type='LoadAnnotations'),
            ],
            [
                dict(type='PackSegInputs'),
            ],
        ],
        type='TestTimeAug'),
]
val_cfg = dict(type='ValLoop')
val_dataloader = dict(
    batch_size=1,
    dataset=dict(
        data_prefix=dict(
            img_path='images/validation',
            seg_map_path='annotations/validation'),
        data_root='data/ade/ADEChallengeData2016',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(keep_ratio=True, scale=(
                2560,
                640,
            ), type='Resize'),
            dict(reduce_zero_label=True, type='LoadAnnotations'),
            dict(type='PackSegInputs'),
        ],
        type='ADE20KDataset'),
    num_workers=4,
    persistent_workers=True,
    sampler=dict(shuffle=False, type='DefaultSampler'))
val_evaluator = dict(
    iou_metrics=[
        'mIoU',
    ], type='IoUMetric')
vis_backends = [
    dict(type='LocalVisBackend'),
]
visualizer = dict(
    name='visualizer',
    type='SegLocalVisualizer',
    vis_backends=[
        dict(type='LocalVisBackend'),
    ])
work_dir = '../corruptions/work_dirs/ade20k/mask2former/mask2former_swin-b-in1k-384x384-pre_8xb2-160k_ade20k-512x512/contrast'

/pfs/work7/workspace/scratch/ma_mkacar-team_project_fss2024/benchmarking_robustness/semantic_segmentation/mmsegmentation/mmseg/ops_dcnv3/modules/dcnv3.py:20: UserWarning: Now, we support DCNv4 in InternImage.
  warnings.warn('Now, we support DCNv4 in InternImage.')
10/06 09:47:44 - mmengine - INFO - Distributed training is not used, all SyncBatchNorm (SyncBN) layers in the model will be automatically reverted to BatchNormXd layers if they are used.
10/06 09:47:44 - mmengine - INFO - Hooks will be executed in the following order:
before_run:
(VERY_HIGH   ) RuntimeInfoHook                    
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
before_train:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_train_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(NORMAL      ) DistSamplerSeedHook                
 -------------------- 
before_train_iter:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_train_iter:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(NORMAL      ) SegVisualizationHook               
(BELOW_NORMAL) LoggerHook                         
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
after_train_epoch:
(NORMAL      ) IterTimerHook                      
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_val:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
before_val_epoch:
(NORMAL      ) IterTimerHook                      
 -------------------- 
before_val_iter:
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_val_iter:
(NORMAL      ) IterTimerHook                      
(NORMAL      ) SegVisualizationHook               
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_val_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
after_val:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
after_train:
(VERY_HIGH   ) RuntimeInfoHook                    
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_test:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
before_test_epoch:
(NORMAL      ) IterTimerHook                      
 -------------------- 
before_test_iter:
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_test_iter:
(NORMAL      ) IterTimerHook                      
(NORMAL      ) SegVisualizationHook               
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_test_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_test:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
after_run:
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
10/06 09:47:45 - mmengine - WARNING - The prefix is not set in metric class IoUMetric.
Loads checkpoint by local backend from path: ../checkpoint_files/ade20k/mask2former/best_mIoU_iter_155000.pth
10/06 09:47:46 - mmengine - INFO - Load checkpoint from ../checkpoint_files/ade20k/mask2former/best_mIoU_iter_155000.pth
10/06 09:48:17 - mmengine - INFO - Iter(test) [  50/2000]    eta: 0:20:02  time: 0.4046  data_time: 0.0018  memory: 17181  
10/06 09:48:36 - mmengine - INFO - Iter(test) [ 100/2000]    eta: 0:15:54  time: 0.3893  data_time: 0.0019  memory: 17180  
10/06 09:48:51 - mmengine - INFO - Iter(test) [ 150/2000]    eta: 0:13:24  time: 0.3037  data_time: 0.0018  memory: 17150  
10/06 09:49:06 - mmengine - INFO - Iter(test) [ 200/2000]    eta: 0:11:59  time: 0.3471  data_time: 0.0017  memory: 17194  
10/06 09:49:23 - mmengine - INFO - Iter(test) [ 250/2000]    eta: 0:11:18  time: 0.2379  data_time: 0.0017  memory: 17202  
10/06 09:49:37 - mmengine - INFO - Iter(test) [ 300/2000]    eta: 0:10:29  time: 0.1470  data_time: 0.0019  memory: 17180  
10/06 09:49:52 - mmengine - INFO - Iter(test) [ 350/2000]    eta: 0:09:53  time: 0.2847  data_time: 0.0018  memory: 17178  
10/06 09:50:02 - mmengine - INFO - Iter(test) [ 400/2000]    eta: 0:09:04  time: 0.1575  data_time: 0.0016  memory: 17177  
10/06 09:50:11 - mmengine - INFO - Iter(test) [ 450/2000]    eta: 0:08:18  time: 0.1937  data_time: 0.0017  memory: 17147  
10/06 09:50:21 - mmengine - INFO - Iter(test) [ 500/2000]    eta: 0:07:43  time: 0.2253  data_time: 0.0017  memory: 17149  
10/06 09:50:30 - mmengine - INFO - Iter(test) [ 550/2000]    eta: 0:07:12  time: 0.2645  data_time: 0.0036  memory: 17179  
10/06 09:50:37 - mmengine - INFO - Iter(test) [ 600/2000]    eta: 0:06:39  time: 0.1452  data_time: 0.0019  memory: 3938  
10/06 09:50:48 - mmengine - INFO - Iter(test) [ 650/2000]    eta: 0:06:18  time: 0.2733  data_time: 0.0016  memory: 17181  
10/06 09:51:01 - mmengine - INFO - Iter(test) [ 700/2000]    eta: 0:06:02  time: 0.2104  data_time: 0.0019  memory: 17177  
10/06 09:51:14 - mmengine - INFO - Iter(test) [ 750/2000]    eta: 0:05:46  time: 0.5660  data_time: 0.0017  memory: 17184  
10/06 09:51:22 - mmengine - INFO - Iter(test) [ 800/2000]    eta: 0:05:23  time: 0.1407  data_time: 0.0019  memory: 17151  
10/06 09:51:29 - mmengine - INFO - Iter(test) [ 850/2000]    eta: 0:05:01  time: 0.1427  data_time: 0.0019  memory: 1428  
10/06 09:51:38 - mmengine - INFO - Iter(test) [ 900/2000]    eta: 0:04:43  time: 0.1895  data_time: 0.0017  memory: 17138  
10/06 09:51:49 - mmengine - INFO - Iter(test) [ 950/2000]    eta: 0:04:28  time: 0.2985  data_time: 0.0018  memory: 17133  
10/06 09:51:57 - mmengine - INFO - Iter(test) [1000/2000]    eta: 0:04:11  time: 0.1359  data_time: 0.0017  memory: 17096  
10/06 09:52:06 - mmengine - INFO - Iter(test) [1050/2000]    eta: 0:03:54  time: 0.2233  data_time: 0.0017  memory: 17182  
10/06 09:52:16 - mmengine - INFO - Iter(test) [1100/2000]    eta: 0:03:40  time: 0.1409  data_time: 0.0018  memory: 17175  
10/06 09:52:23 - mmengine - INFO - Iter(test) [1150/2000]    eta: 0:03:24  time: 0.1442  data_time: 0.0017  memory: 17117  
10/06 09:52:31 - mmengine - INFO - Iter(test) [1200/2000]    eta: 0:03:10  time: 0.1370  data_time: 0.0017  memory: 17113  
10/06 09:52:41 - mmengine - INFO - Iter(test) [1250/2000]    eta: 0:02:56  time: 0.2184  data_time: 0.0017  memory: 17172  
10/06 09:52:47 - mmengine - INFO - Iter(test) [1300/2000]    eta: 0:02:42  time: 0.1416  data_time: 0.0017  memory: 1430  
10/06 09:52:56 - mmengine - INFO - Iter(test) [1350/2000]    eta: 0:02:29  time: 0.1305  data_time: 0.0017  memory: 17110  
10/06 09:53:07 - mmengine - INFO - Iter(test) [1400/2000]    eta: 0:02:17  time: 0.1613  data_time: 0.0017  memory: 17154  
10/06 09:53:14 - mmengine - INFO - Iter(test) [1450/2000]    eta: 0:02:04  time: 0.2076  data_time: 0.0016  memory: 17130  
10/06 09:53:22 - mmengine - INFO - Iter(test) [1500/2000]    eta: 0:01:51  time: 0.1329  data_time: 0.0017  memory: 17125  
10/06 09:53:30 - mmengine - INFO - Iter(test) [1550/2000]    eta: 0:01:39  time: 0.1464  data_time: 0.0017  memory: 17154  
10/06 09:53:37 - mmengine - INFO - Iter(test) [1600/2000]    eta: 0:01:27  time: 0.1366  data_time: 0.0018  memory: 1425  
10/06 09:53:45 - mmengine - INFO - Iter(test) [1650/2000]    eta: 0:01:16  time: 0.1299  data_time: 0.0016  memory: 17192  
10/06 09:53:57 - mmengine - INFO - Iter(test) [1700/2000]    eta: 0:01:05  time: 0.1421  data_time: 0.0019  memory: 17151  
10/06 09:54:05 - mmengine - INFO - Iter(test) [1750/2000]    eta: 0:00:54  time: 0.1401  data_time: 0.0016  memory: 17111  
10/06 09:54:13 - mmengine - INFO - Iter(test) [1800/2000]    eta: 0:00:42  time: 0.1423  data_time: 0.0019  memory: 17114  
10/06 09:54:20 - mmengine - INFO - Iter(test) [1850/2000]    eta: 0:00:31  time: 0.1445  data_time: 0.0019  memory: 1317  
10/06 09:54:28 - mmengine - INFO - Iter(test) [1900/2000]    eta: 0:00:21  time: 0.2028  data_time: 0.0017  memory: 17182  
10/06 09:54:36 - mmengine - INFO - Iter(test) [1950/2000]    eta: 0:00:10  time: 0.1361  data_time: 0.0017  memory: 17197  
10/06 09:54:45 - mmengine - INFO - Iter(test) [2000/2000]    eta: 0:00:00  time: 0.1253  data_time: 0.0014  memory: 17131  
10/06 09:54:45 - mmengine - INFO - per class results:
10/06 09:54:45 - mmengine - INFO - 
+---------------------+-------+-------+
|        Class        |  IoU  |  Acc  |
+---------------------+-------+-------+
|         wall        | 76.14 |  87.5 |
|       building      | 81.76 | 92.83 |
|         sky         | 94.14 | 96.95 |
|        floor        |  81.6 | 89.96 |
|         tree        | 74.28 | 86.58 |
|       ceiling       | 82.65 | 89.01 |
|         road        | 81.27 | 90.04 |
|         bed         | 87.37 | 94.17 |
|      windowpane     | 59.58 | 75.59 |
|        grass        | 62.83 | 76.36 |
|       cabinet       |  57.6 |  74.4 |
|       sidewalk      | 61.98 | 78.71 |
|        person       | 81.64 | 88.21 |
|        earth        | 34.39 | 46.28 |
|         door        | 43.57 | 56.17 |
|        table        | 53.71 | 69.94 |
|       mountain      | 57.43 | 79.97 |
|        plant        | 51.93 | 59.65 |
|       curtain       |  75.0 | 86.59 |
|        chair        | 52.48 | 64.19 |
|         car         | 85.73 | 91.47 |
|        water        | 50.46 |  72.4 |
|       painting      | 68.68 | 85.23 |
|         sofa        | 63.05 |  79.4 |
|        shelf        | 39.44 | 57.75 |
|        house        | 43.53 | 52.59 |
|         sea         | 61.62 | 79.44 |
|        mirror       | 62.31 | 79.43 |
|         rug         | 57.87 | 63.06 |
|        field        | 28.09 | 65.46 |
|       armchair      | 33.91 | 56.25 |
|         seat        | 56.36 | 71.38 |
|        fence        | 43.62 | 64.37 |
|         desk        | 33.64 |  58.4 |
|         rock        | 36.16 | 51.59 |
|       wardrobe      | 54.06 | 67.92 |
|         lamp        | 62.66 | 74.09 |
|       bathtub       | 64.45 | 82.89 |
|       railing       | 36.75 | 51.45 |
|       cushion       | 54.74 | 69.36 |
|         base        | 29.72 | 48.09 |
|         box         | 26.59 | 41.47 |
|        column       | 49.36 |  55.5 |
|      signboard      | 39.28 | 50.79 |
|   chest of drawers  | 38.03 |  61.5 |
|       counter       | 35.71 | 44.42 |
|         sand        | 33.08 | 47.06 |
|         sink        | 71.44 | 81.13 |
|      skyscraper     |  48.4 |  58.6 |
|      fireplace      | 65.32 | 82.79 |
|     refrigerator    | 69.97 | 79.71 |
|      grandstand     | 50.41 | 71.25 |
|         path        | 21.16 | 26.86 |
|        stairs       | 26.87 | 31.69 |
|        runway       | 53.94 | 72.81 |
|         case        | 52.57 | 85.05 |
|      pool table     | 92.76 | 94.88 |
|        pillow       | 52.96 | 69.29 |
|     screen door     | 68.62 | 84.39 |
|       stairway      | 33.06 | 44.35 |
|        river        | 19.46 | 24.92 |
|        bridge       | 59.19 | 71.89 |
|       bookcase      |  30.8 |  50.2 |
|        blind        | 39.36 | 46.21 |
|     coffee table    | 55.43 | 77.13 |
|        toilet       |  86.8 | 90.63 |
|        flower       |  31.0 | 46.85 |
|         book        | 48.39 | 68.88 |
|         hill        |  6.39 | 10.92 |
|        bench        |  50.7 |  70.3 |
|      countertop     | 54.64 | 72.03 |
|        stove        | 67.56 | 76.34 |
|         palm        | 52.37 | 66.25 |
|    kitchen island   | 37.28 | 73.79 |
|       computer      | 66.42 | 76.66 |
|     swivel chair    | 38.19 |  54.7 |
|         boat        | 42.99 | 53.39 |
|         bar         | 48.17 | 55.71 |
|    arcade machine   | 22.11 | 24.83 |
|        hovel        | 27.26 | 47.29 |
|         bus         | 84.48 | 95.73 |
|        towel        | 74.95 | 85.61 |
|        light        |  56.9 | 71.57 |
|        truck        | 27.76 | 40.13 |
|        tower        | 31.04 |  51.6 |
|      chandelier     | 63.26 | 76.34 |
|        awning       | 31.13 | 39.13 |
|     streetlight     | 27.91 | 42.68 |
|        booth        | 19.64 | 27.39 |
| television receiver |  70.1 |  75.5 |
|       airplane      | 64.35 | 69.39 |
|      dirt track     |  0.16 |  0.17 |
|       apparel       | 38.63 | 53.24 |
|         pole        | 24.26 | 39.22 |
|         land        |  0.34 |  0.42 |
|      bannister      |  8.56 | 10.84 |
|      escalator      | 22.93 | 23.59 |
|       ottoman       | 46.05 | 65.35 |
|        bottle       | 22.51 | 29.98 |
|        buffet       | 40.18 | 47.58 |
|        poster       | 24.76 | 32.77 |
|        stage        |  5.02 | 11.41 |
|         van         | 46.99 | 71.45 |
|         ship        | 64.47 | 95.11 |
|       fountain      | 24.36 | 25.78 |
|    conveyer belt    | 50.65 | 66.56 |
|        canopy       | 19.68 |  32.9 |
|        washer       | 59.64 | 66.75 |
|      plaything      | 16.39 | 24.94 |
|    swimming pool    | 20.74 | 42.21 |
|        stool        |  34.8 | 48.45 |
|        barrel       | 21.23 | 64.68 |
|        basket       | 29.61 | 41.31 |
|      waterfall      | 59.49 | 92.71 |
|         tent        | 85.15 | 98.32 |
|         bag         | 13.69 | 18.33 |
|       minibike      | 69.74 | 84.84 |
|        cradle       | 66.52 | 92.46 |
|         oven        | 16.59 | 43.55 |
|         ball        | 27.69 | 40.47 |
|         food        | 62.99 | 73.52 |
|         step        |  9.59 | 12.35 |
|         tank        | 36.88 | 40.35 |
|      trade name     | 28.26 |  36.9 |
|      microwave      | 46.71 | 51.54 |
|         pot         | 46.08 | 56.99 |
|        animal       | 66.54 | 70.52 |
|       bicycle       | 53.65 | 73.23 |
|         lake        |  0.0  |  0.0  |
|      dishwasher     | 61.05 | 80.02 |
|        screen       | 72.32 | 90.25 |
|       blanket       | 11.54 | 13.87 |
|      sculpture      | 39.13 | 53.07 |
|         hood        | 49.59 |  54.0 |
|        sconce       | 32.92 | 40.67 |
|         vase        | 38.09 | 55.27 |
|    traffic light    | 31.15 | 55.71 |
|         tray        |  7.19 |  9.75 |
|        ashcan       | 35.91 | 50.79 |
|         fan         | 56.95 | 77.11 |
|         pier        |  3.02 |  3.9  |
|      crt screen     |  8.04 | 27.44 |
|        plate        | 53.19 | 71.11 |
|       monitor       |  2.98 |  3.16 |
|    bulletin board   | 44.56 | 51.71 |
|        shower       |  8.52 | 15.15 |
|       radiator      | 60.59 | 65.87 |
|        glass        | 16.49 | 20.11 |
|        clock        | 28.79 | 41.48 |
|         flag        | 48.08 | 52.27 |
+---------------------+-------+-------+
10/06 09:54:45 - mmengine - INFO - Iter(test) [2000/2000]    aAcc: 81.7200  mIoU: 45.3700  mAcc: 58.2400  data_time: 0.0020  time: 0.2094
Finished processing corruption type: contrast
Processing corruption type: elastic_transform
10/06 09:54:48 - mmengine - INFO - 
------------------------------------------------------------
System environment:
    sys.platform: linux
    Python: 3.10.13 | packaged by conda-forge | (main, Dec 23 2023, 15:36:39) [GCC 12.3.0]
    CUDA available: True
    MUSA available: False
    numpy_random_seed: 536043096
    GPU 0: Tesla V100-SXM2-32GB
    CUDA_HOME: /opt/bwhpc/common/devel/cuda/11.7
    NVCC: Cuda compilation tools, release 11.7, V11.7.99
    GCC: gcc (GCC) 8.5.0 20210514 (Red Hat 8.5.0-18)
    PyTorch: 1.13.1
    PyTorch compiling details: PyTorch built with:
  - GCC 9.3
  - C++ Version: 201402
  - Intel(R) oneAPI Math Kernel Library Version 2023.1-Product Build 20230303 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v2.6.0 (Git Hash 52b5f107dd9cf10910aaa19cb47f3abf9b349815)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - LAPACK is enabled (usually provided by MKL)
  - NNPACK is enabled
  - CPU capability usage: AVX2
  - CUDA Runtime 11.7
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_61,code=sm_61;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86;-gencode;arch=compute_37,code=compute_37
  - CuDNN 8.5
  - Magma 2.6.1
  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.7, CUDNN_VERSION=8.5.0, CXX_COMPILER=/opt/rh/devtoolset-9/root/usr/bin/c++, CXX_FLAGS= -fabi-version=11 -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -DEDGE_PROFILER_USE_KINETO -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Werror=non-virtual-dtor -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wunused-local-typedefs -Wno-unused-parameter -Wno-unused-function -Wno-unused-result -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Werror=cast-function-type -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.13.1, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, USE_ROCM=OFF, 

    TorchVision: 0.14.1
    OpenCV: 3.4.18
    MMEngine: 0.10.4

Runtime environment:
    cudnn_benchmark: True
    mp_cfg: {'mp_start_method': 'fork', 'opencv_num_threads': 0}
    dist_cfg: {'backend': 'nccl'}
    seed: 536043096
    Distributed launcher: none
    Distributed training: False
    GPU number: 1
------------------------------------------------------------

10/06 09:54:49 - mmengine - INFO - Config:
auto_scale_lr = dict(base_batch_size=16, enable=False)
backbone_embed_multi = dict(decay_mult=0.0, lr_mult=0.1)
backbone_norm_multi = dict(decay_mult=0.0, lr_mult=0.1)
crop_size = (
    512,
    512,
)
custom_keys = dict({
    'absolute_pos_embed':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone':
    dict(decay_mult=1.0, lr_mult=0.1),
    'backbone.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.patch_embed.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.0.blocks.0.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.0.blocks.1.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.0.downsample.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.1.blocks.0.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.1.blocks.1.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.1.downsample.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.0.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.1.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.10.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.11.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.12.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.13.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.14.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.15.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.16.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.17.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.2.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.3.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.4.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.5.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.6.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.7.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.8.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.9.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.downsample.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.3.blocks.0.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.3.blocks.1.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'level_embed':
    dict(decay_mult=0.0, lr_mult=1.0),
    'query_embed':
    dict(decay_mult=0.0, lr_mult=1.0),
    'query_feat':
    dict(decay_mult=0.0, lr_mult=1.0),
    'relative_position_bias_table':
    dict(decay_mult=0.0, lr_mult=0.1)
})
data_root = 'data/ade/ADEChallengeData2016'
dataset_type = 'ADE20KDataset'
default_hooks = dict(
    checkpoint=dict(
        by_epoch=False, interval=5000, save_best='mIoU',
        type='CheckpointHook'),
    logger=dict(interval=50, log_metric_by_epoch=False, type='LoggerHook'),
    param_scheduler=dict(type='ParamSchedulerHook'),
    sampler_seed=dict(type='DistSamplerSeedHook'),
    timer=dict(type='IterTimerHook'),
    visualization=dict(type='SegVisualizationHook'))
default_scope = 'mmseg'
depths = [
    2,
    2,
    18,
    2,
]
embed_multi = dict(decay_mult=0.0, lr_mult=1.0)
env_cfg = dict(
    cudnn_benchmark=True,
    dist_cfg=dict(backend='nccl'),
    mp_cfg=dict(mp_start_method='fork', opencv_num_threads=0))
img_ratios = [
    0.5,
    0.75,
    1.0,
    1.25,
    1.5,
    1.75,
]
launcher = 'none'
load_from = '../checkpoint_files/ade20k/mask2former/best_mIoU_iter_155000.pth'
log_level = 'INFO'
log_processor = dict(by_epoch=False)
model = dict(
    backbone=dict(
        attn_drop_rate=0.0,
        depths=[
            2,
            2,
            18,
            2,
        ],
        drop_path_rate=0.3,
        drop_rate=0.0,
        embed_dims=128,
        frozen_stages=-1,
        init_cfg=dict(
            checkpoint=
            'https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/swin/swin_base_patch4_window12_384_20220317-55b0104a.pth',
            type='Pretrained'),
        mlp_ratio=4,
        num_heads=[
            4,
            8,
            16,
            32,
        ],
        out_indices=(
            0,
            1,
            2,
            3,
        ),
        patch_norm=True,
        pretrain_img_size=384,
        qk_scale=None,
        qkv_bias=True,
        type='SwinTransformer',
        window_size=12,
        with_cp=False),
    data_preprocessor=dict(
        bgr_to_rgb=True,
        corruption='elastic_transform',
        mean=[
            123.675,
            116.28,
            103.53,
        ],
        pad_val=0,
        seg_pad_val=255,
        size=(
            512,
            512,
        ),
        std=[
            58.395,
            57.12,
            57.375,
        ],
        type='SegDataPreProcessor'),
    decode_head=dict(
        align_corners=False,
        enforce_decoder_input_project=False,
        feat_channels=256,
        in_channels=[
            128,
            256,
            512,
            1024,
        ],
        loss_cls=dict(
            class_weight=[
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                0.1,
            ],
            loss_weight=2.0,
            reduction='mean',
            type='mmdet.CrossEntropyLoss',
            use_sigmoid=False),
        loss_dice=dict(
            activate=True,
            eps=1.0,
            loss_weight=5.0,
            naive_dice=True,
            reduction='mean',
            type='mmdet.DiceLoss',
            use_sigmoid=True),
        loss_mask=dict(
            loss_weight=5.0,
            reduction='mean',
            type='mmdet.CrossEntropyLoss',
            use_sigmoid=True),
        num_classes=150,
        num_queries=100,
        num_transformer_feat_level=3,
        out_channels=256,
        pixel_decoder=dict(
            act_cfg=dict(type='ReLU'),
            encoder=dict(
                init_cfg=None,
                layer_cfg=dict(
                    ffn_cfg=dict(
                        act_cfg=dict(inplace=True, type='ReLU'),
                        embed_dims=256,
                        feedforward_channels=1024,
                        ffn_drop=0.0,
                        num_fcs=2),
                    self_attn_cfg=dict(
                        batch_first=True,
                        dropout=0.0,
                        embed_dims=256,
                        im2col_step=64,
                        init_cfg=None,
                        norm_cfg=None,
                        num_heads=8,
                        num_levels=3,
                        num_points=4)),
                num_layers=6),
            init_cfg=None,
            norm_cfg=dict(num_groups=32, type='GN'),
            num_outs=3,
            positional_encoding=dict(normalize=True, num_feats=128),
            type='mmdet.MSDeformAttnPixelDecoder'),
        positional_encoding=dict(normalize=True, num_feats=128),
        strides=[
            4,
            8,
            16,
            32,
        ],
        train_cfg=dict(
            assigner=dict(
                match_costs=[
                    dict(type='mmdet.ClassificationCost', weight=2.0),
                    dict(
                        type='mmdet.CrossEntropyLossCost',
                        use_sigmoid=True,
                        weight=5.0),
                    dict(
                        eps=1.0,
                        pred_act=True,
                        type='mmdet.DiceCost',
                        weight=5.0),
                ],
                type='mmdet.HungarianAssigner'),
            importance_sample_ratio=0.75,
            num_points=12544,
            oversample_ratio=3.0,
            sampler=dict(type='mmdet.MaskPseudoSampler')),
        transformer_decoder=dict(
            init_cfg=None,
            layer_cfg=dict(
                cross_attn_cfg=dict(
                    attn_drop=0.0,
                    batch_first=True,
                    dropout_layer=None,
                    embed_dims=256,
                    num_heads=8,
                    proj_drop=0.0),
                ffn_cfg=dict(
                    act_cfg=dict(inplace=True, type='ReLU'),
                    add_identity=True,
                    dropout_layer=None,
                    embed_dims=256,
                    feedforward_channels=2048,
                    ffn_drop=0.0,
                    num_fcs=2),
                self_attn_cfg=dict(
                    attn_drop=0.0,
                    batch_first=True,
                    dropout_layer=None,
                    embed_dims=256,
                    num_heads=8,
                    proj_drop=0.0)),
            num_layers=9,
            return_intermediate=True),
        type='Mask2FormerHead'),
    test_cfg=dict(mode='whole'),
    train_cfg=dict(),
    type='EncoderDecoder')
num_classes = 150
optim_wrapper = dict(
    clip_grad=dict(max_norm=0.01, norm_type=2),
    optimizer=dict(
        betas=(
            0.9,
            0.999,
        ),
        eps=1e-08,
        lr=0.0001,
        type='AdamW',
        weight_decay=0.05),
    paramwise_cfg=dict(
        custom_keys=dict({
            'absolute_pos_embed':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone':
            dict(decay_mult=1.0, lr_mult=0.1),
            'backbone.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.patch_embed.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.0.blocks.0.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.0.blocks.1.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.0.downsample.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.1.blocks.0.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.1.blocks.1.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.1.downsample.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.0.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.1.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.10.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.11.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.12.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.13.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.14.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.15.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.16.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.17.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.2.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.3.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.4.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.5.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.6.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.7.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.8.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.9.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.downsample.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.3.blocks.0.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.3.blocks.1.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'level_embed':
            dict(decay_mult=0.0, lr_mult=1.0),
            'query_embed':
            dict(decay_mult=0.0, lr_mult=1.0),
            'query_feat':
            dict(decay_mult=0.0, lr_mult=1.0),
            'relative_position_bias_table':
            dict(decay_mult=0.0, lr_mult=0.1)
        }),
        norm_decay_mult=0.0),
    type='OptimWrapper')
optimizer = dict(
    betas=(
        0.9,
        0.999,
    ),
    eps=1e-08,
    lr=0.0001,
    type='AdamW',
    weight_decay=0.05)
param_scheduler = [
    dict(
        begin=0,
        by_epoch=False,
        end=160000,
        eta_min=0,
        power=0.9,
        type='PolyLR'),
]
pretrained = 'https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/swin/swin_base_patch4_window12_384_20220317-55b0104a.pth'
resume = False
test_cfg = dict(type='TestLoop')
test_dataloader = dict(
    batch_size=1,
    dataset=dict(
        data_prefix=dict(
            img_path='images/validation',
            seg_map_path='annotations/validation'),
        data_root='data/ade/ADEChallengeData2016',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(keep_ratio=True, scale=(
                2560,
                640,
            ), type='Resize'),
            dict(reduce_zero_label=True, type='LoadAnnotations'),
            dict(type='PackSegInputs'),
        ],
        type='ADE20KDataset'),
    num_workers=4,
    persistent_workers=True,
    sampler=dict(shuffle=False, type='DefaultSampler'))
test_evaluator = dict(
    iou_metrics=[
        'mIoU',
    ], type='IoUMetric')
test_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(keep_ratio=True, scale=(
        2560,
        640,
    ), type='Resize'),
    dict(reduce_zero_label=True, type='LoadAnnotations'),
    dict(type='PackSegInputs'),
]
train_cfg = dict(
    max_iters=160000, type='IterBasedTrainLoop', val_interval=5000)
train_dataloader = dict(
    batch_size=2,
    dataset=dict(
        data_prefix=dict(
            img_path='images/training', seg_map_path='annotations/training'),
        data_root='data/ade/ADEChallengeData2016',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(reduce_zero_label=True, type='LoadAnnotations'),
            dict(
                max_size=2560,
                resize_type='ResizeShortestEdge',
                scales=[
                    320,
                    384,
                    448,
                    512,
                    576,
                    640,
                    704,
                    768,
                    832,
                    896,
                    960,
                    1024,
                    1088,
                    1152,
                    1216,
                    1280,
                ],
                type='RandomChoiceResize'),
            dict(
                cat_max_ratio=0.75, crop_size=(
                    512,
                    512,
                ), type='RandomCrop'),
            dict(prob=0.5, type='RandomFlip'),
            dict(type='PhotoMetricDistortion'),
            dict(type='PackSegInputs'),
        ],
        type='ADE20KDataset'),
    num_workers=4,
    persistent_workers=True,
    sampler=dict(shuffle=True, type='InfiniteSampler'))
train_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(reduce_zero_label=True, type='LoadAnnotations'),
    dict(
        max_size=2560,
        resize_type='ResizeShortestEdge',
        scales=[
            320,
            384,
            448,
            512,
            576,
            640,
            704,
            768,
            832,
            896,
            960,
            1024,
            1088,
            1152,
            1216,
            1280,
        ],
        type='RandomChoiceResize'),
    dict(cat_max_ratio=0.75, crop_size=(
        512,
        512,
    ), type='RandomCrop'),
    dict(prob=0.5, type='RandomFlip'),
    dict(type='PhotoMetricDistortion'),
    dict(type='PackSegInputs'),
]
tta_model = dict(type='SegTTAModel')
tta_pipeline = [
    dict(backend_args=None, type='LoadImageFromFile'),
    dict(
        transforms=[
            [
                dict(keep_ratio=True, scale_factor=0.5, type='Resize'),
                dict(keep_ratio=True, scale_factor=0.75, type='Resize'),
                dict(keep_ratio=True, scale_factor=1.0, type='Resize'),
                dict(keep_ratio=True, scale_factor=1.25, type='Resize'),
                dict(keep_ratio=True, scale_factor=1.5, type='Resize'),
                dict(keep_ratio=True, scale_factor=1.75, type='Resize'),
            ],
            [
                dict(direction='horizontal', prob=0.0, type='RandomFlip'),
                dict(direction='horizontal', prob=1.0, type='RandomFlip'),
            ],
            [
                dict(type='LoadAnnotations'),
            ],
            [
                dict(type='PackSegInputs'),
            ],
        ],
        type='TestTimeAug'),
]
val_cfg = dict(type='ValLoop')
val_dataloader = dict(
    batch_size=1,
    dataset=dict(
        data_prefix=dict(
            img_path='images/validation',
            seg_map_path='annotations/validation'),
        data_root='data/ade/ADEChallengeData2016',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(keep_ratio=True, scale=(
                2560,
                640,
            ), type='Resize'),
            dict(reduce_zero_label=True, type='LoadAnnotations'),
            dict(type='PackSegInputs'),
        ],
        type='ADE20KDataset'),
    num_workers=4,
    persistent_workers=True,
    sampler=dict(shuffle=False, type='DefaultSampler'))
val_evaluator = dict(
    iou_metrics=[
        'mIoU',
    ], type='IoUMetric')
vis_backends = [
    dict(type='LocalVisBackend'),
]
visualizer = dict(
    name='visualizer',
    type='SegLocalVisualizer',
    vis_backends=[
        dict(type='LocalVisBackend'),
    ])
work_dir = '../corruptions/work_dirs/ade20k/mask2former/mask2former_swin-b-in1k-384x384-pre_8xb2-160k_ade20k-512x512/elastic_transform'

/pfs/work7/workspace/scratch/ma_mkacar-team_project_fss2024/benchmarking_robustness/semantic_segmentation/mmsegmentation/mmseg/ops_dcnv3/modules/dcnv3.py:20: UserWarning: Now, we support DCNv4 in InternImage.
  warnings.warn('Now, we support DCNv4 in InternImage.')
10/06 09:54:53 - mmengine - INFO - Distributed training is not used, all SyncBatchNorm (SyncBN) layers in the model will be automatically reverted to BatchNormXd layers if they are used.
10/06 09:54:53 - mmengine - INFO - Hooks will be executed in the following order:
before_run:
(VERY_HIGH   ) RuntimeInfoHook                    
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
before_train:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_train_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(NORMAL      ) DistSamplerSeedHook                
 -------------------- 
before_train_iter:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_train_iter:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(NORMAL      ) SegVisualizationHook               
(BELOW_NORMAL) LoggerHook                         
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
after_train_epoch:
(NORMAL      ) IterTimerHook                      
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_val:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
before_val_epoch:
(NORMAL      ) IterTimerHook                      
 -------------------- 
before_val_iter:
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_val_iter:
(NORMAL      ) IterTimerHook                      
(NORMAL      ) SegVisualizationHook               
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_val_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
after_val:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
after_train:
(VERY_HIGH   ) RuntimeInfoHook                    
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_test:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
before_test_epoch:
(NORMAL      ) IterTimerHook                      
 -------------------- 
before_test_iter:
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_test_iter:
(NORMAL      ) IterTimerHook                      
(NORMAL      ) SegVisualizationHook               
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_test_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_test:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
after_run:
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
10/06 09:54:54 - mmengine - WARNING - The prefix is not set in metric class IoUMetric.
Loads checkpoint by local backend from path: ../checkpoint_files/ade20k/mask2former/best_mIoU_iter_155000.pth
10/06 09:54:55 - mmengine - INFO - Load checkpoint from ../checkpoint_files/ade20k/mask2former/best_mIoU_iter_155000.pth
10/06 09:56:35 - mmengine - INFO - Iter(test) [  50/2000]    eta: 1:05:23  time: 1.9189  data_time: 0.0030  memory: 17181  
10/06 09:58:06 - mmengine - INFO - Iter(test) [ 100/2000]    eta: 1:00:42  time: 1.8836  data_time: 0.0019  memory: 17180  
10/06 09:59:33 - mmengine - INFO - Iter(test) [ 150/2000]    eta: 0:57:14  time: 1.7618  data_time: 0.0019  memory: 17150  
10/06 10:01:01 - mmengine - INFO - Iter(test) [ 200/2000]    eta: 0:54:57  time: 1.7763  data_time: 0.0018  memory: 17194  
10/06 10:02:28 - mmengine - INFO - Iter(test) [ 250/2000]    eta: 0:52:50  time: 1.6549  data_time: 0.0018  memory: 17202  
10/06 10:03:50 - mmengine - INFO - Iter(test) [ 300/2000]    eta: 0:50:35  time: 1.5738  data_time: 0.0018  memory: 17180  
10/06 10:05:16 - mmengine - INFO - Iter(test) [ 350/2000]    eta: 0:48:48  time: 1.6439  data_time: 0.0017  memory: 17178  
10/06 10:06:38 - mmengine - INFO - Iter(test) [ 400/2000]    eta: 0:46:51  time: 1.6272  data_time: 0.0017  memory: 17177  
10/06 10:07:51 - mmengine - INFO - Iter(test) [ 450/2000]    eta: 0:44:35  time: 1.5136  data_time: 0.0017  memory: 17147  
10/06 10:09:12 - mmengine - INFO - Iter(test) [ 500/2000]    eta: 0:42:52  time: 1.6087  data_time: 0.0018  memory: 17149  
10/06 10:10:37 - mmengine - INFO - Iter(test) [ 550/2000]    eta: 0:41:24  time: 1.7378  data_time: 0.0018  memory: 17179  
10/06 10:11:55 - mmengine - INFO - Iter(test) [ 600/2000]    eta: 0:39:40  time: 1.6279  data_time: 0.0019  memory: 3938  
10/06 10:13:17 - mmengine - INFO - Iter(test) [ 650/2000]    eta: 0:38:08  time: 1.6836  data_time: 0.0017  memory: 17181  
10/06 10:14:44 - mmengine - INFO - Iter(test) [ 700/2000]    eta: 0:36:48  time: 1.6888  data_time: 0.0019  memory: 17177  
10/06 10:16:08 - mmengine - INFO - Iter(test) [ 750/2000]    eta: 0:35:22  time: 1.8902  data_time: 0.0017  memory: 17184  
10/06 10:17:24 - mmengine - INFO - Iter(test) [ 800/2000]    eta: 0:33:43  time: 1.5799  data_time: 0.0019  memory: 17151  
10/06 10:18:43 - mmengine - INFO - Iter(test) [ 850/2000]    eta: 0:32:12  time: 1.6037  data_time: 0.0019  memory: 1428  
10/06 10:19:58 - mmengine - INFO - Iter(test) [ 900/2000]    eta: 0:30:37  time: 1.4698  data_time: 0.0022  memory: 17138  
10/06 10:21:22 - mmengine - INFO - Iter(test) [ 950/2000]    eta: 0:29:14  time: 1.7037  data_time: 0.0018  memory: 17133  
10/06 10:22:39 - mmengine - INFO - Iter(test) [1000/2000]    eta: 0:27:44  time: 1.5093  data_time: 0.0017  memory: 17096  
10/06 10:24:01 - mmengine - INFO - Iter(test) [1050/2000]    eta: 0:26:19  time: 1.7174  data_time: 0.0028  memory: 17182  
10/06 10:25:23 - mmengine - INFO - Iter(test) [1100/2000]    eta: 0:24:55  time: 1.5517  data_time: 0.0019  memory: 17175  
10/06 10:26:41 - mmengine - INFO - Iter(test) [1150/2000]    eta: 0:23:28  time: 1.5814  data_time: 0.0018  memory: 17117  
10/06 10:28:01 - mmengine - INFO - Iter(test) [1200/2000]    eta: 0:22:04  time: 1.5388  data_time: 0.0018  memory: 17113  
10/06 10:29:19 - mmengine - INFO - Iter(test) [1250/2000]    eta: 0:20:38  time: 1.5975  data_time: 0.0018  memory: 17172  
10/06 10:30:33 - mmengine - INFO - Iter(test) [1300/2000]    eta: 0:19:11  time: 1.5781  data_time: 0.0018  memory: 1430  
10/06 10:31:52 - mmengine - INFO - Iter(test) [1350/2000]    eta: 0:17:47  time: 1.4627  data_time: 0.0018  memory: 17110  
10/06 10:33:13 - mmengine - INFO - Iter(test) [1400/2000]    eta: 0:16:24  time: 1.6574  data_time: 0.0017  memory: 17154  
10/06 10:34:29 - mmengine - INFO - Iter(test) [1450/2000]    eta: 0:15:00  time: 1.6866  data_time: 0.0017  memory: 17130  
10/06 10:35:46 - mmengine - INFO - Iter(test) [1500/2000]    eta: 0:13:36  time: 1.4630  data_time: 0.0017  memory: 17125  
10/06 10:37:08 - mmengine - INFO - Iter(test) [1550/2000]    eta: 0:12:15  time: 1.6025  data_time: 0.0018  memory: 17154  
10/06 10:38:24 - mmengine - INFO - Iter(test) [1600/2000]    eta: 0:10:52  time: 1.5499  data_time: 0.0019  memory: 1425  
10/06 10:39:43 - mmengine - INFO - Iter(test) [1650/2000]    eta: 0:09:30  time: 1.4526  data_time: 0.0016  memory: 17192  
10/06 10:41:06 - mmengine - INFO - Iter(test) [1700/2000]    eta: 0:08:09  time: 1.5750  data_time: 0.0019  memory: 17151  
10/06 10:42:27 - mmengine - INFO - Iter(test) [1750/2000]    eta: 0:06:47  time: 1.5539  data_time: 0.0017  memory: 17111  
10/06 10:43:44 - mmengine - INFO - Iter(test) [1800/2000]    eta: 0:05:25  time: 1.5997  data_time: 0.0019  memory: 17114  
10/06 10:45:02 - mmengine - INFO - Iter(test) [1850/2000]    eta: 0:04:03  time: 1.5790  data_time: 0.0019  memory: 1317  
10/06 10:46:17 - mmengine - INFO - Iter(test) [1900/2000]    eta: 0:02:42  time: 1.5873  data_time: 0.0017  memory: 17182  
10/06 10:47:38 - mmengine - INFO - Iter(test) [1950/2000]    eta: 0:01:21  time: 1.5187  data_time: 0.0017  memory: 17197  
10/06 10:48:54 - mmengine - INFO - Iter(test) [2000/2000]    eta: 0:00:00  time: 1.4192  data_time: 0.0015  memory: 17131  
10/06 10:48:54 - mmengine - INFO - per class results:
10/06 10:48:54 - mmengine - INFO - 
+---------------------+-------+-------+
|        Class        |  IoU  |  Acc  |
+---------------------+-------+-------+
|         wall        | 64.88 | 78.66 |
|       building      | 74.47 | 88.75 |
|         sky         | 85.75 | 91.82 |
|        floor        | 70.13 | 82.59 |
|         tree        | 65.59 | 80.16 |
|       ceiling       | 70.97 | 82.12 |
|         road        | 75.41 | 84.25 |
|         bed         | 77.61 | 88.34 |
|      windowpane     | 50.18 | 68.75 |
|        grass        | 58.69 | 71.54 |
|       cabinet       | 49.89 | 66.81 |
|       sidewalk      | 53.93 | 72.15 |
|        person       | 63.74 | 76.79 |
|        earth        | 34.61 | 47.34 |
|         door        | 32.06 |  44.1 |
|        table        | 42.28 | 59.59 |
|       mountain      | 58.11 | 76.82 |
|        plant        | 45.45 | 56.85 |
|       curtain       | 58.44 | 75.33 |
|        chair        | 39.83 | 54.27 |
|         car         | 67.12 | 79.78 |
|        water        | 51.48 | 73.49 |
|       painting      | 49.07 | 69.67 |
|         sofa        | 55.57 | 75.22 |
|        shelf        | 33.22 | 50.31 |
|        house        | 39.93 | 49.31 |
|         sea         | 54.51 | 72.25 |
|        mirror       | 54.41 | 72.12 |
|         rug         | 43.53 | 51.97 |
|        field        | 30.03 | 71.29 |
|       armchair      | 30.75 | 50.88 |
|         seat        | 51.35 | 70.45 |
|        fence        | 37.28 | 56.06 |
|         desk        | 28.26 | 50.04 |
|         rock        | 38.65 | 60.61 |
|       wardrobe      | 43.67 | 58.25 |
|         lamp        | 32.87 | 48.73 |
|       bathtub       | 61.32 | 74.57 |
|       railing       |  32.3 | 45.86 |
|       cushion       | 42.11 | 58.77 |
|         base        | 25.03 | 47.25 |
|         box         | 20.31 | 32.95 |
|        column       | 32.55 | 43.58 |
|      signboard      | 28.28 | 40.76 |
|   chest of drawers  | 32.14 | 53.51 |
|       counter       | 34.14 | 42.34 |
|         sand        | 30.08 | 44.35 |
|         sink        | 51.31 |  67.0 |
|      skyscraper     | 45.73 | 56.14 |
|      fireplace      | 55.16 | 78.43 |
|     refrigerator    | 57.59 | 71.36 |
|      grandstand     | 46.16 | 70.69 |
|         path        | 16.02 | 21.99 |
|        stairs       | 22.18 | 28.24 |
|        runway       | 56.45 |  75.8 |
|         case        | 55.75 | 82.16 |
|      pool table     | 75.69 | 86.06 |
|        pillow       | 43.25 |  59.7 |
|     screen door     | 63.39 | 80.91 |
|       stairway      | 31.83 | 43.91 |
|        river        | 12.49 | 17.02 |
|        bridge       | 48.71 | 66.27 |
|       bookcase      | 25.65 | 45.07 |
|        blind        | 31.97 | 38.07 |
|     coffee table    | 48.64 | 69.77 |
|        toilet       |  62.7 | 74.44 |
|        flower       | 24.61 | 40.46 |
|         book        | 35.27 | 57.25 |
|         hill        |  6.2  | 10.27 |
|        bench        |  45.9 | 65.41 |
|      countertop     | 44.08 |  60.0 |
|        stove        | 60.55 | 71.96 |
|         palm        | 37.31 | 52.86 |
|    kitchen island   | 28.59 | 62.81 |
|       computer      | 54.23 | 69.51 |
|     swivel chair    | 29.11 | 45.48 |
|         boat        | 35.95 | 46.23 |
|         bar         |  48.5 |  58.4 |
|    arcade machine   | 52.44 | 67.85 |
|        hovel        | 25.65 | 50.75 |
|         bus         | 70.85 | 87.11 |
|        towel        | 46.11 | 61.98 |
|        light        | 18.52 |  31.6 |
|        truck        | 29.95 | 54.21 |
|        tower        | 13.77 | 22.44 |
|      chandelier     | 43.04 | 60.26 |
|        awning       | 22.37 | 35.77 |
|     streetlight     |  9.89 | 18.46 |
|        booth        | 20.03 | 22.62 |
| television receiver | 53.06 | 64.94 |
|       airplane      | 44.15 | 54.03 |
|      dirt track     |  0.03 |  0.11 |
|       apparel       | 26.99 | 50.83 |
|         pole        | 10.67 | 21.45 |
|         land        |  0.35 |  0.36 |
|      bannister      |  4.62 |  6.79 |
|      escalator      | 18.77 | 20.11 |
|       ottoman       | 39.28 |  52.9 |
|        bottle       | 14.26 | 22.14 |
|        buffet       | 30.79 | 40.33 |
|        poster       | 22.97 | 28.59 |
|        stage        |  6.38 | 15.82 |
|         van         | 40.16 | 59.86 |
|         ship        | 56.33 | 83.32 |
|       fountain      |  33.7 |  36.2 |
|    conveyer belt    | 44.76 | 63.17 |
|        canopy       | 17.56 | 35.27 |
|        washer       | 61.88 |  65.2 |
|      plaything      | 16.62 |  29.4 |
|    swimming pool    | 36.87 | 68.56 |
|        stool        | 24.02 |  36.8 |
|        barrel       | 57.17 |  66.4 |
|        basket       | 24.31 | 39.25 |
|      waterfall      | 49.87 | 86.26 |
|         tent        | 84.77 | 97.54 |
|         bag         | 11.49 | 16.71 |
|       minibike      | 53.59 | 68.98 |
|        cradle       | 58.64 | 79.18 |
|         oven        | 15.07 | 44.62 |
|         ball        | 35.09 | 55.45 |
|         food        | 54.44 | 72.08 |
|         step        |  7.21 |  8.94 |
|         tank        | 39.33 | 50.28 |
|      trade name     | 25.65 | 36.48 |
|      microwave      |  32.0 | 37.38 |
|         pot         | 28.16 | 38.96 |
|        animal       | 55.71 | 64.99 |
|       bicycle       | 37.69 | 59.79 |
|         lake        |  0.0  |  0.0  |
|      dishwasher     |  53.6 | 66.27 |
|        screen       | 58.63 | 79.97 |
|       blanket       |  9.1  | 11.08 |
|      sculpture      | 41.12 | 54.71 |
|         hood        | 44.25 | 52.52 |
|        sconce       | 18.44 | 26.77 |
|         vase        |  23.8 | 43.21 |
|    traffic light    | 18.38 | 33.57 |
|         tray        |  3.09 |  4.83 |
|        ashcan       | 25.62 | 45.47 |
|         fan         | 28.67 | 49.41 |
|         pier        |  29.4 | 42.04 |
|      crt screen     |  7.95 | 26.93 |
|        plate        |  36.7 |  55.2 |
|       monitor       |  7.8  |  8.84 |
|    bulletin board   | 34.47 |  49.8 |
|        shower       |  5.52 |  8.31 |
|       radiator      |  38.8 | 47.34 |
|        glass        | 11.65 |  15.1 |
|        clock        | 14.22 | 23.69 |
|         flag        |  48.1 | 61.05 |
+---------------------+-------+-------+
10/06 10:48:54 - mmengine - INFO - Iter(test) [2000/2000]    aAcc: 75.1500  mIoU: 38.2600  mAcc: 52.4200  data_time: 0.0020  time: 1.6198
Finished processing corruption type: elastic_transform
Processing corruption type: pixelate
10/06 10:49:34 - mmengine - INFO - 
------------------------------------------------------------
System environment:
    sys.platform: linux
    Python: 3.10.13 | packaged by conda-forge | (main, Dec 23 2023, 15:36:39) [GCC 12.3.0]
    CUDA available: True
    MUSA available: False
    numpy_random_seed: 1479453887
    GPU 0: Tesla V100-SXM2-32GB
    CUDA_HOME: /opt/bwhpc/common/devel/cuda/11.7
    NVCC: Cuda compilation tools, release 11.7, V11.7.99
    GCC: gcc (GCC) 8.5.0 20210514 (Red Hat 8.5.0-18)
    PyTorch: 1.13.1
    PyTorch compiling details: PyTorch built with:
  - GCC 9.3
  - C++ Version: 201402
  - Intel(R) oneAPI Math Kernel Library Version 2023.1-Product Build 20230303 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v2.6.0 (Git Hash 52b5f107dd9cf10910aaa19cb47f3abf9b349815)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - LAPACK is enabled (usually provided by MKL)
  - NNPACK is enabled
  - CPU capability usage: AVX2
  - CUDA Runtime 11.7
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_61,code=sm_61;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86;-gencode;arch=compute_37,code=compute_37
  - CuDNN 8.5
  - Magma 2.6.1
  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.7, CUDNN_VERSION=8.5.0, CXX_COMPILER=/opt/rh/devtoolset-9/root/usr/bin/c++, CXX_FLAGS= -fabi-version=11 -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -DEDGE_PROFILER_USE_KINETO -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Werror=non-virtual-dtor -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wunused-local-typedefs -Wno-unused-parameter -Wno-unused-function -Wno-unused-result -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Werror=cast-function-type -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.13.1, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, USE_ROCM=OFF, 

    TorchVision: 0.14.1
    OpenCV: 3.4.18
    MMEngine: 0.10.4

Runtime environment:
    cudnn_benchmark: True
    mp_cfg: {'mp_start_method': 'fork', 'opencv_num_threads': 0}
    dist_cfg: {'backend': 'nccl'}
    seed: 1479453887
    Distributed launcher: none
    Distributed training: False
    GPU number: 1
------------------------------------------------------------

10/06 10:49:35 - mmengine - INFO - Config:
auto_scale_lr = dict(base_batch_size=16, enable=False)
backbone_embed_multi = dict(decay_mult=0.0, lr_mult=0.1)
backbone_norm_multi = dict(decay_mult=0.0, lr_mult=0.1)
crop_size = (
    512,
    512,
)
custom_keys = dict({
    'absolute_pos_embed':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone':
    dict(decay_mult=1.0, lr_mult=0.1),
    'backbone.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.patch_embed.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.0.blocks.0.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.0.blocks.1.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.0.downsample.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.1.blocks.0.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.1.blocks.1.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.1.downsample.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.0.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.1.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.10.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.11.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.12.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.13.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.14.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.15.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.16.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.17.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.2.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.3.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.4.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.5.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.6.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.7.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.8.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.9.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.downsample.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.3.blocks.0.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.3.blocks.1.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'level_embed':
    dict(decay_mult=0.0, lr_mult=1.0),
    'query_embed':
    dict(decay_mult=0.0, lr_mult=1.0),
    'query_feat':
    dict(decay_mult=0.0, lr_mult=1.0),
    'relative_position_bias_table':
    dict(decay_mult=0.0, lr_mult=0.1)
})
data_root = 'data/ade/ADEChallengeData2016'
dataset_type = 'ADE20KDataset'
default_hooks = dict(
    checkpoint=dict(
        by_epoch=False, interval=5000, save_best='mIoU',
        type='CheckpointHook'),
    logger=dict(interval=50, log_metric_by_epoch=False, type='LoggerHook'),
    param_scheduler=dict(type='ParamSchedulerHook'),
    sampler_seed=dict(type='DistSamplerSeedHook'),
    timer=dict(type='IterTimerHook'),
    visualization=dict(type='SegVisualizationHook'))
default_scope = 'mmseg'
depths = [
    2,
    2,
    18,
    2,
]
embed_multi = dict(decay_mult=0.0, lr_mult=1.0)
env_cfg = dict(
    cudnn_benchmark=True,
    dist_cfg=dict(backend='nccl'),
    mp_cfg=dict(mp_start_method='fork', opencv_num_threads=0))
img_ratios = [
    0.5,
    0.75,
    1.0,
    1.25,
    1.5,
    1.75,
]
launcher = 'none'
load_from = '../checkpoint_files/ade20k/mask2former/best_mIoU_iter_155000.pth'
log_level = 'INFO'
log_processor = dict(by_epoch=False)
model = dict(
    backbone=dict(
        attn_drop_rate=0.0,
        depths=[
            2,
            2,
            18,
            2,
        ],
        drop_path_rate=0.3,
        drop_rate=0.0,
        embed_dims=128,
        frozen_stages=-1,
        init_cfg=dict(
            checkpoint=
            'https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/swin/swin_base_patch4_window12_384_20220317-55b0104a.pth',
            type='Pretrained'),
        mlp_ratio=4,
        num_heads=[
            4,
            8,
            16,
            32,
        ],
        out_indices=(
            0,
            1,
            2,
            3,
        ),
        patch_norm=True,
        pretrain_img_size=384,
        qk_scale=None,
        qkv_bias=True,
        type='SwinTransformer',
        window_size=12,
        with_cp=False),
    data_preprocessor=dict(
        bgr_to_rgb=True,
        corruption='pixelate',
        mean=[
            123.675,
            116.28,
            103.53,
        ],
        pad_val=0,
        seg_pad_val=255,
        size=(
            512,
            512,
        ),
        std=[
            58.395,
            57.12,
            57.375,
        ],
        type='SegDataPreProcessor'),
    decode_head=dict(
        align_corners=False,
        enforce_decoder_input_project=False,
        feat_channels=256,
        in_channels=[
            128,
            256,
            512,
            1024,
        ],
        loss_cls=dict(
            class_weight=[
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                0.1,
            ],
            loss_weight=2.0,
            reduction='mean',
            type='mmdet.CrossEntropyLoss',
            use_sigmoid=False),
        loss_dice=dict(
            activate=True,
            eps=1.0,
            loss_weight=5.0,
            naive_dice=True,
            reduction='mean',
            type='mmdet.DiceLoss',
            use_sigmoid=True),
        loss_mask=dict(
            loss_weight=5.0,
            reduction='mean',
            type='mmdet.CrossEntropyLoss',
            use_sigmoid=True),
        num_classes=150,
        num_queries=100,
        num_transformer_feat_level=3,
        out_channels=256,
        pixel_decoder=dict(
            act_cfg=dict(type='ReLU'),
            encoder=dict(
                init_cfg=None,
                layer_cfg=dict(
                    ffn_cfg=dict(
                        act_cfg=dict(inplace=True, type='ReLU'),
                        embed_dims=256,
                        feedforward_channels=1024,
                        ffn_drop=0.0,
                        num_fcs=2),
                    self_attn_cfg=dict(
                        batch_first=True,
                        dropout=0.0,
                        embed_dims=256,
                        im2col_step=64,
                        init_cfg=None,
                        norm_cfg=None,
                        num_heads=8,
                        num_levels=3,
                        num_points=4)),
                num_layers=6),
            init_cfg=None,
            norm_cfg=dict(num_groups=32, type='GN'),
            num_outs=3,
            positional_encoding=dict(normalize=True, num_feats=128),
            type='mmdet.MSDeformAttnPixelDecoder'),
        positional_encoding=dict(normalize=True, num_feats=128),
        strides=[
            4,
            8,
            16,
            32,
        ],
        train_cfg=dict(
            assigner=dict(
                match_costs=[
                    dict(type='mmdet.ClassificationCost', weight=2.0),
                    dict(
                        type='mmdet.CrossEntropyLossCost',
                        use_sigmoid=True,
                        weight=5.0),
                    dict(
                        eps=1.0,
                        pred_act=True,
                        type='mmdet.DiceCost',
                        weight=5.0),
                ],
                type='mmdet.HungarianAssigner'),
            importance_sample_ratio=0.75,
            num_points=12544,
            oversample_ratio=3.0,
            sampler=dict(type='mmdet.MaskPseudoSampler')),
        transformer_decoder=dict(
            init_cfg=None,
            layer_cfg=dict(
                cross_attn_cfg=dict(
                    attn_drop=0.0,
                    batch_first=True,
                    dropout_layer=None,
                    embed_dims=256,
                    num_heads=8,
                    proj_drop=0.0),
                ffn_cfg=dict(
                    act_cfg=dict(inplace=True, type='ReLU'),
                    add_identity=True,
                    dropout_layer=None,
                    embed_dims=256,
                    feedforward_channels=2048,
                    ffn_drop=0.0,
                    num_fcs=2),
                self_attn_cfg=dict(
                    attn_drop=0.0,
                    batch_first=True,
                    dropout_layer=None,
                    embed_dims=256,
                    num_heads=8,
                    proj_drop=0.0)),
            num_layers=9,
            return_intermediate=True),
        type='Mask2FormerHead'),
    test_cfg=dict(mode='whole'),
    train_cfg=dict(),
    type='EncoderDecoder')
num_classes = 150
optim_wrapper = dict(
    clip_grad=dict(max_norm=0.01, norm_type=2),
    optimizer=dict(
        betas=(
            0.9,
            0.999,
        ),
        eps=1e-08,
        lr=0.0001,
        type='AdamW',
        weight_decay=0.05),
    paramwise_cfg=dict(
        custom_keys=dict({
            'absolute_pos_embed':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone':
            dict(decay_mult=1.0, lr_mult=0.1),
            'backbone.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.patch_embed.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.0.blocks.0.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.0.blocks.1.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.0.downsample.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.1.blocks.0.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.1.blocks.1.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.1.downsample.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.0.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.1.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.10.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.11.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.12.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.13.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.14.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.15.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.16.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.17.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.2.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.3.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.4.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.5.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.6.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.7.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.8.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.9.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.downsample.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.3.blocks.0.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.3.blocks.1.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'level_embed':
            dict(decay_mult=0.0, lr_mult=1.0),
            'query_embed':
            dict(decay_mult=0.0, lr_mult=1.0),
            'query_feat':
            dict(decay_mult=0.0, lr_mult=1.0),
            'relative_position_bias_table':
            dict(decay_mult=0.0, lr_mult=0.1)
        }),
        norm_decay_mult=0.0),
    type='OptimWrapper')
optimizer = dict(
    betas=(
        0.9,
        0.999,
    ),
    eps=1e-08,
    lr=0.0001,
    type='AdamW',
    weight_decay=0.05)
param_scheduler = [
    dict(
        begin=0,
        by_epoch=False,
        end=160000,
        eta_min=0,
        power=0.9,
        type='PolyLR'),
]
pretrained = 'https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/swin/swin_base_patch4_window12_384_20220317-55b0104a.pth'
resume = False
test_cfg = dict(type='TestLoop')
test_dataloader = dict(
    batch_size=1,
    dataset=dict(
        data_prefix=dict(
            img_path='images/validation',
            seg_map_path='annotations/validation'),
        data_root='data/ade/ADEChallengeData2016',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(keep_ratio=True, scale=(
                2560,
                640,
            ), type='Resize'),
            dict(reduce_zero_label=True, type='LoadAnnotations'),
            dict(type='PackSegInputs'),
        ],
        type='ADE20KDataset'),
    num_workers=4,
    persistent_workers=True,
    sampler=dict(shuffle=False, type='DefaultSampler'))
test_evaluator = dict(
    iou_metrics=[
        'mIoU',
    ], type='IoUMetric')
test_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(keep_ratio=True, scale=(
        2560,
        640,
    ), type='Resize'),
    dict(reduce_zero_label=True, type='LoadAnnotations'),
    dict(type='PackSegInputs'),
]
train_cfg = dict(
    max_iters=160000, type='IterBasedTrainLoop', val_interval=5000)
train_dataloader = dict(
    batch_size=2,
    dataset=dict(
        data_prefix=dict(
            img_path='images/training', seg_map_path='annotations/training'),
        data_root='data/ade/ADEChallengeData2016',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(reduce_zero_label=True, type='LoadAnnotations'),
            dict(
                max_size=2560,
                resize_type='ResizeShortestEdge',
                scales=[
                    320,
                    384,
                    448,
                    512,
                    576,
                    640,
                    704,
                    768,
                    832,
                    896,
                    960,
                    1024,
                    1088,
                    1152,
                    1216,
                    1280,
                ],
                type='RandomChoiceResize'),
            dict(
                cat_max_ratio=0.75, crop_size=(
                    512,
                    512,
                ), type='RandomCrop'),
            dict(prob=0.5, type='RandomFlip'),
            dict(type='PhotoMetricDistortion'),
            dict(type='PackSegInputs'),
        ],
        type='ADE20KDataset'),
    num_workers=4,
    persistent_workers=True,
    sampler=dict(shuffle=True, type='InfiniteSampler'))
train_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(reduce_zero_label=True, type='LoadAnnotations'),
    dict(
        max_size=2560,
        resize_type='ResizeShortestEdge',
        scales=[
            320,
            384,
            448,
            512,
            576,
            640,
            704,
            768,
            832,
            896,
            960,
            1024,
            1088,
            1152,
            1216,
            1280,
        ],
        type='RandomChoiceResize'),
    dict(cat_max_ratio=0.75, crop_size=(
        512,
        512,
    ), type='RandomCrop'),
    dict(prob=0.5, type='RandomFlip'),
    dict(type='PhotoMetricDistortion'),
    dict(type='PackSegInputs'),
]
tta_model = dict(type='SegTTAModel')
tta_pipeline = [
    dict(backend_args=None, type='LoadImageFromFile'),
    dict(
        transforms=[
            [
                dict(keep_ratio=True, scale_factor=0.5, type='Resize'),
                dict(keep_ratio=True, scale_factor=0.75, type='Resize'),
                dict(keep_ratio=True, scale_factor=1.0, type='Resize'),
                dict(keep_ratio=True, scale_factor=1.25, type='Resize'),
                dict(keep_ratio=True, scale_factor=1.5, type='Resize'),
                dict(keep_ratio=True, scale_factor=1.75, type='Resize'),
            ],
            [
                dict(direction='horizontal', prob=0.0, type='RandomFlip'),
                dict(direction='horizontal', prob=1.0, type='RandomFlip'),
            ],
            [
                dict(type='LoadAnnotations'),
            ],
            [
                dict(type='PackSegInputs'),
            ],
        ],
        type='TestTimeAug'),
]
val_cfg = dict(type='ValLoop')
val_dataloader = dict(
    batch_size=1,
    dataset=dict(
        data_prefix=dict(
            img_path='images/validation',
            seg_map_path='annotations/validation'),
        data_root='data/ade/ADEChallengeData2016',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(keep_ratio=True, scale=(
                2560,
                640,
            ), type='Resize'),
            dict(reduce_zero_label=True, type='LoadAnnotations'),
            dict(type='PackSegInputs'),
        ],
        type='ADE20KDataset'),
    num_workers=4,
    persistent_workers=True,
    sampler=dict(shuffle=False, type='DefaultSampler'))
val_evaluator = dict(
    iou_metrics=[
        'mIoU',
    ], type='IoUMetric')
vis_backends = [
    dict(type='LocalVisBackend'),
]
visualizer = dict(
    name='visualizer',
    type='SegLocalVisualizer',
    vis_backends=[
        dict(type='LocalVisBackend'),
    ])
work_dir = '../corruptions/work_dirs/ade20k/mask2former/mask2former_swin-b-in1k-384x384-pre_8xb2-160k_ade20k-512x512/pixelate'

/pfs/work7/workspace/scratch/ma_mkacar-team_project_fss2024/benchmarking_robustness/semantic_segmentation/mmsegmentation/mmseg/ops_dcnv3/modules/dcnv3.py:20: UserWarning: Now, we support DCNv4 in InternImage.
  warnings.warn('Now, we support DCNv4 in InternImage.')
10/06 10:49:52 - mmengine - INFO - Distributed training is not used, all SyncBatchNorm (SyncBN) layers in the model will be automatically reverted to BatchNormXd layers if they are used.
10/06 10:49:52 - mmengine - INFO - Hooks will be executed in the following order:
before_run:
(VERY_HIGH   ) RuntimeInfoHook                    
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
before_train:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_train_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(NORMAL      ) DistSamplerSeedHook                
 -------------------- 
before_train_iter:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_train_iter:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(NORMAL      ) SegVisualizationHook               
(BELOW_NORMAL) LoggerHook                         
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
after_train_epoch:
(NORMAL      ) IterTimerHook                      
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_val:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
before_val_epoch:
(NORMAL      ) IterTimerHook                      
 -------------------- 
before_val_iter:
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_val_iter:
(NORMAL      ) IterTimerHook                      
(NORMAL      ) SegVisualizationHook               
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_val_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
after_val:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
after_train:
(VERY_HIGH   ) RuntimeInfoHook                    
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_test:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
before_test_epoch:
(NORMAL      ) IterTimerHook                      
 -------------------- 
before_test_iter:
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_test_iter:
(NORMAL      ) IterTimerHook                      
(NORMAL      ) SegVisualizationHook               
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_test_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_test:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
after_run:
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
10/06 10:49:53 - mmengine - WARNING - The prefix is not set in metric class IoUMetric.
Loads checkpoint by local backend from path: ../checkpoint_files/ade20k/mask2former/best_mIoU_iter_155000.pth
10/06 10:49:55 - mmengine - INFO - Load checkpoint from ../checkpoint_files/ade20k/mask2former/best_mIoU_iter_155000.pth
10/06 10:50:48 - mmengine - INFO - Iter(test) [  50/2000]    eta: 0:34:28  time: 0.3753  data_time: 0.0016  memory: 17181  
10/06 10:51:07 - mmengine - INFO - Iter(test) [ 100/2000]    eta: 0:22:43  time: 0.3737  data_time: 0.0017  memory: 17180  
10/06 10:51:21 - mmengine - INFO - Iter(test) [ 150/2000]    eta: 0:17:33  time: 0.2755  data_time: 0.0016  memory: 17150  
10/06 10:51:34 - mmengine - INFO - Iter(test) [ 200/2000]    eta: 0:14:50  time: 0.3345  data_time: 0.0017  memory: 17194  
10/06 10:51:50 - mmengine - INFO - Iter(test) [ 250/2000]    eta: 0:13:24  time: 0.2165  data_time: 0.0016  memory: 17202  
10/06 10:52:04 - mmengine - INFO - Iter(test) [ 300/2000]    eta: 0:12:07  time: 0.1253  data_time: 0.0017  memory: 17180  
10/06 10:52:18 - mmengine - INFO - Iter(test) [ 350/2000]    eta: 0:11:11  time: 0.2585  data_time: 0.0016  memory: 17178  
10/06 10:52:27 - mmengine - INFO - Iter(test) [ 400/2000]    eta: 0:10:07  time: 0.1383  data_time: 0.0016  memory: 17177  
10/06 10:52:35 - mmengine - INFO - Iter(test) [ 450/2000]    eta: 0:09:09  time: 0.1731  data_time: 0.0017  memory: 17147  
10/06 10:52:43 - mmengine - INFO - Iter(test) [ 500/2000]    eta: 0:08:24  time: 0.2012  data_time: 0.0017  memory: 17149  
10/06 10:52:52 - mmengine - INFO - Iter(test) [ 550/2000]    eta: 0:07:45  time: 0.2371  data_time: 0.0018  memory: 17179  
10/06 10:52:58 - mmengine - INFO - Iter(test) [ 600/2000]    eta: 0:07:06  time: 0.1251  data_time: 0.0019  memory: 3938  
10/06 10:53:08 - mmengine - INFO - Iter(test) [ 650/2000]    eta: 0:06:40  time: 0.2546  data_time: 0.0016  memory: 17181  
10/06 10:53:20 - mmengine - INFO - Iter(test) [ 700/2000]    eta: 0:06:20  time: 0.1881  data_time: 0.0018  memory: 17177  
10/06 10:53:32 - mmengine - INFO - Iter(test) [ 750/2000]    eta: 0:06:00  time: 0.5641  data_time: 0.0017  memory: 17184  
10/06 10:53:39 - mmengine - INFO - Iter(test) [ 800/2000]    eta: 0:05:35  time: 0.1239  data_time: 0.0018  memory: 17151  
10/06 10:53:46 - mmengine - INFO - Iter(test) [ 850/2000]    eta: 0:05:11  time: 0.1237  data_time: 0.0019  memory: 1428  
10/06 10:53:53 - mmengine - INFO - Iter(test) [ 900/2000]    eta: 0:04:50  time: 0.1727  data_time: 0.0017  memory: 17138  
10/06 10:54:04 - mmengine - INFO - Iter(test) [ 950/2000]    eta: 0:04:34  time: 0.2787  data_time: 0.0018  memory: 17133  
10/06 10:54:11 - mmengine - INFO - Iter(test) [1000/2000]    eta: 0:04:15  time: 0.1192  data_time: 0.0018  memory: 17096  
10/06 10:54:19 - mmengine - INFO - Iter(test) [1050/2000]    eta: 0:03:57  time: 0.2032  data_time: 0.0018  memory: 17182  
10/06 10:54:27 - mmengine - INFO - Iter(test) [1100/2000]    eta: 0:03:42  time: 0.1214  data_time: 0.0018  memory: 17175  
10/06 10:54:34 - mmengine - INFO - Iter(test) [1150/2000]    eta: 0:03:25  time: 0.1237  data_time: 0.0018  memory: 17117  
10/06 10:54:41 - mmengine - INFO - Iter(test) [1200/2000]    eta: 0:03:10  time: 0.1186  data_time: 0.0017  memory: 17113  
10/06 10:54:50 - mmengine - INFO - Iter(test) [1250/2000]    eta: 0:02:56  time: 0.2011  data_time: 0.0027  memory: 17172  
10/06 10:54:55 - mmengine - INFO - Iter(test) [1300/2000]    eta: 0:02:41  time: 0.1231  data_time: 0.0017  memory: 1430  
10/06 10:55:03 - mmengine - INFO - Iter(test) [1350/2000]    eta: 0:02:28  time: 0.1150  data_time: 0.0017  memory: 17110  
10/06 10:55:13 - mmengine - INFO - Iter(test) [1400/2000]    eta: 0:02:15  time: 0.1399  data_time: 0.0017  memory: 17154  
10/06 10:55:19 - mmengine - INFO - Iter(test) [1450/2000]    eta: 0:02:02  time: 0.1859  data_time: 0.0018  memory: 17130  
10/06 10:55:26 - mmengine - INFO - Iter(test) [1500/2000]    eta: 0:01:50  time: 0.1175  data_time: 0.0017  memory: 17125  
10/06 10:55:33 - mmengine - INFO - Iter(test) [1550/2000]    eta: 0:01:37  time: 0.1233  data_time: 0.0018  memory: 17154  
10/06 10:55:39 - mmengine - INFO - Iter(test) [1600/2000]    eta: 0:01:25  time: 0.1197  data_time: 0.0019  memory: 1425  
10/06 10:55:47 - mmengine - INFO - Iter(test) [1650/2000]    eta: 0:01:14  time: 0.1146  data_time: 0.0016  memory: 17192  
10/06 10:55:57 - mmengine - INFO - Iter(test) [1700/2000]    eta: 0:01:03  time: 0.1230  data_time: 0.0019  memory: 17151  
10/06 10:56:05 - mmengine - INFO - Iter(test) [1750/2000]    eta: 0:00:52  time: 0.1187  data_time: 0.0017  memory: 17111  
10/06 10:56:11 - mmengine - INFO - Iter(test) [1800/2000]    eta: 0:00:41  time: 0.1250  data_time: 0.0019  memory: 17114  
10/06 10:56:18 - mmengine - INFO - Iter(test) [1850/2000]    eta: 0:00:30  time: 0.1249  data_time: 0.0019  memory: 1317  
10/06 10:56:25 - mmengine - INFO - Iter(test) [1900/2000]    eta: 0:00:20  time: 0.1828  data_time: 0.0017  memory: 17182  
10/06 10:56:32 - mmengine - INFO - Iter(test) [1950/2000]    eta: 0:00:10  time: 0.1188  data_time: 0.0017  memory: 17197  
10/06 10:56:40 - mmengine - INFO - Iter(test) [2000/2000]    eta: 0:00:00  time: 0.1122  data_time: 0.0015  memory: 17131  
10/06 10:56:40 - mmengine - INFO - per class results:
10/06 10:56:40 - mmengine - INFO - 
+---------------------+-------+-------+
|        Class        |  IoU  |  Acc  |
+---------------------+-------+-------+
|         wall        |  75.4 | 87.86 |
|       building      |  79.5 | 93.96 |
|         sky         | 94.24 | 96.56 |
|        floor        | 80.26 | 90.54 |
|         tree        | 73.51 | 85.52 |
|       ceiling       | 81.98 |  88.3 |
|         road        | 82.05 | 89.74 |
|         bed         |  85.8 | 93.35 |
|      windowpane     | 59.39 | 77.33 |
|        grass        | 61.24 | 73.36 |
|       cabinet       | 58.24 | 74.09 |
|       sidewalk      | 61.47 | 80.04 |
|        person       | 79.31 | 84.92 |
|        earth        | 37.16 | 48.56 |
|         door        | 40.27 | 53.01 |
|        table        | 53.45 |  69.7 |
|       mountain      | 57.49 | 72.35 |
|        plant        | 49.57 | 57.67 |
|       curtain       | 73.64 |  82.3 |
|        chair        | 52.01 | 65.79 |
|         car         | 80.51 | 86.56 |
|        water        | 51.78 | 71.55 |
|       painting      | 67.46 | 87.58 |
|         sofa        | 61.89 | 80.94 |
|        shelf        | 39.12 | 58.21 |
|        house        | 31.76 | 37.53 |
|         sea         | 52.85 | 67.98 |
|        mirror       | 63.39 | 76.42 |
|         rug         | 53.62 | 58.26 |
|        field        | 28.53 | 69.27 |
|       armchair      | 28.27 | 41.54 |
|         seat        | 51.64 | 68.91 |
|        fence        | 44.25 | 64.57 |
|         desk        | 35.53 | 65.02 |
|         rock        |  43.7 | 62.88 |
|       wardrobe      | 50.09 | 58.79 |
|         lamp        | 61.43 | 71.34 |
|       bathtub       |  70.9 |  81.1 |
|       railing       | 35.43 | 47.82 |
|       cushion       | 53.17 | 65.55 |
|         base        |  21.4 | 42.29 |
|         box         | 23.28 |  36.2 |
|        column       | 45.34 | 53.74 |
|      signboard      | 37.96 | 47.98 |
|   chest of drawers  | 33.94 | 58.23 |
|       counter       | 33.63 |  42.0 |
|         sand        | 30.14 |  42.2 |
|         sink        | 66.73 | 73.68 |
|      skyscraper     | 44.59 | 48.36 |
|      fireplace      | 62.41 | 81.93 |
|     refrigerator    | 72.69 | 83.94 |
|      grandstand     | 35.08 | 74.24 |
|         path        | 15.63 | 21.12 |
|        stairs       | 22.36 | 26.69 |
|        runway       | 53.17 |  79.7 |
|         case        | 62.78 | 84.06 |
|      pool table     | 91.15 | 93.04 |
|        pillow       | 53.26 | 66.83 |
|     screen door     | 68.17 | 84.31 |
|       stairway      | 34.48 | 49.28 |
|        river        | 12.53 | 21.14 |
|        bridge       | 27.69 | 34.66 |
|       bookcase      | 26.21 | 52.85 |
|        blind        | 39.17 | 44.13 |
|     coffee table    | 56.23 | 75.07 |
|        toilet       | 85.78 | 88.99 |
|        flower       | 31.68 | 45.52 |
|         book        | 44.68 | 67.78 |
|         hill        |  5.2  | 11.39 |
|        bench        | 52.71 | 74.59 |
|      countertop     |  51.3 | 60.63 |
|        stove        | 65.41 | 73.12 |
|         palm        | 53.26 |  67.9 |
|    kitchen island   |  41.4 | 86.24 |
|       computer      | 55.79 | 62.72 |
|     swivel chair    | 36.42 | 53.28 |
|         boat        |  45.1 | 48.47 |
|         bar         | 45.92 | 57.88 |
|    arcade machine   | 29.97 | 31.48 |
|        hovel        |  7.77 |  11.3 |
|         bus         | 86.89 | 95.78 |
|        towel        | 71.36 | 79.47 |
|        light        |  54.4 | 69.04 |
|        truck        | 28.37 | 44.57 |
|        tower        |  4.58 |  7.29 |
|      chandelier     | 62.31 | 75.46 |
|        awning       | 31.15 | 37.86 |
|     streetlight     |  27.9 | 41.22 |
|        booth        | 27.13 |  29.1 |
| television receiver | 65.17 | 72.98 |
|       airplane      | 56.96 | 59.72 |
|      dirt track     |  0.0  |  0.0  |
|       apparel       | 30.83 | 44.88 |
|         pole        | 26.25 | 43.49 |
|         land        |  13.6 | 15.79 |
|      bannister      |  7.11 | 10.29 |
|      escalator      | 19.59 | 20.16 |
|       ottoman       | 32.79 | 38.76 |
|        bottle       | 16.65 | 19.89 |
|        buffet       | 40.42 | 45.99 |
|        poster       | 16.46 | 22.49 |
|        stage        |  7.12 | 15.92 |
|         van         | 37.63 | 78.43 |
|         ship        |  9.56 | 14.02 |
|       fountain      | 19.19 | 22.48 |
|    conveyer belt    | 42.93 | 68.25 |
|        canopy       | 25.34 | 35.41 |
|        washer       | 63.23 | 63.42 |
|      plaything      | 16.53 | 20.48 |
|    swimming pool    | 32.86 | 62.32 |
|        stool        | 43.02 | 54.69 |
|        barrel       | 63.25 | 73.13 |
|        basket       | 27.81 | 35.67 |
|      waterfall      | 79.48 | 89.45 |
|         tent        |  73.6 | 97.81 |
|         bag         |  9.99 | 12.26 |
|       minibike      | 54.46 | 59.01 |
|        cradle       | 73.94 |  92.8 |
|         oven        | 18.83 | 50.55 |
|         ball        |  37.0 | 57.56 |
|         food        | 56.91 | 63.36 |
|         step        |  9.3  | 11.21 |
|         tank        | 36.18 | 37.67 |
|      trade name     | 30.65 | 39.15 |
|      microwave      | 37.81 |  41.8 |
|         pot         | 47.27 | 56.68 |
|        animal       | 62.46 | 64.66 |
|       bicycle       |  55.1 |  67.5 |
|         lake        |  0.0  |  0.0  |
|      dishwasher     | 59.74 | 74.98 |
|        screen       | 57.16 | 91.02 |
|       blanket       | 10.63 |  13.2 |
|      sculpture      | 49.39 | 58.15 |
|         hood        | 42.55 | 46.43 |
|        sconce       | 33.01 | 41.36 |
|         vase        | 37.21 | 50.18 |
|    traffic light    | 31.05 | 47.69 |
|         tray        |  7.13 |  9.13 |
|        ashcan       | 32.24 | 54.02 |
|         fan         | 62.92 | 77.57 |
|         pier        | 18.62 | 25.81 |
|      crt screen     |  4.06 | 14.71 |
|        plate        | 54.51 | 67.39 |
|       monitor       |  1.81 |  2.03 |
|    bulletin board   |  39.8 | 46.55 |
|        shower       | 11.44 | 13.72 |
|       radiator      | 58.39 | 63.33 |
|        glass        | 14.84 | 16.89 |
|        clock        | 28.65 | 36.51 |
|         flag        | 31.98 | 37.16 |
+---------------------+-------+-------+
10/06 10:56:40 - mmengine - INFO - Iter(test) [2000/2000]    aAcc: 80.9100  mIoU: 43.6100  mAcc: 55.2900  data_time: 0.0020  time: 0.2020
Finished processing corruption type: pixelate
Processing corruption type: jpeg_compression
10/06 10:56:43 - mmengine - INFO - 
------------------------------------------------------------
System environment:
    sys.platform: linux
    Python: 3.10.13 | packaged by conda-forge | (main, Dec 23 2023, 15:36:39) [GCC 12.3.0]
    CUDA available: True
    MUSA available: False
    numpy_random_seed: 423598629
    GPU 0: Tesla V100-SXM2-32GB
    CUDA_HOME: /opt/bwhpc/common/devel/cuda/11.7
    NVCC: Cuda compilation tools, release 11.7, V11.7.99
    GCC: gcc (GCC) 8.5.0 20210514 (Red Hat 8.5.0-18)
    PyTorch: 1.13.1
    PyTorch compiling details: PyTorch built with:
  - GCC 9.3
  - C++ Version: 201402
  - Intel(R) oneAPI Math Kernel Library Version 2023.1-Product Build 20230303 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v2.6.0 (Git Hash 52b5f107dd9cf10910aaa19cb47f3abf9b349815)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - LAPACK is enabled (usually provided by MKL)
  - NNPACK is enabled
  - CPU capability usage: AVX2
  - CUDA Runtime 11.7
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_61,code=sm_61;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86;-gencode;arch=compute_37,code=compute_37
  - CuDNN 8.5
  - Magma 2.6.1
  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.7, CUDNN_VERSION=8.5.0, CXX_COMPILER=/opt/rh/devtoolset-9/root/usr/bin/c++, CXX_FLAGS= -fabi-version=11 -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -DEDGE_PROFILER_USE_KINETO -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Werror=non-virtual-dtor -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wunused-local-typedefs -Wno-unused-parameter -Wno-unused-function -Wno-unused-result -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Werror=cast-function-type -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.13.1, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, USE_ROCM=OFF, 

    TorchVision: 0.14.1
    OpenCV: 3.4.18
    MMEngine: 0.10.4

Runtime environment:
    cudnn_benchmark: True
    mp_cfg: {'mp_start_method': 'fork', 'opencv_num_threads': 0}
    dist_cfg: {'backend': 'nccl'}
    seed: 423598629
    Distributed launcher: none
    Distributed training: False
    GPU number: 1
------------------------------------------------------------

10/06 10:56:44 - mmengine - INFO - Config:
auto_scale_lr = dict(base_batch_size=16, enable=False)
backbone_embed_multi = dict(decay_mult=0.0, lr_mult=0.1)
backbone_norm_multi = dict(decay_mult=0.0, lr_mult=0.1)
crop_size = (
    512,
    512,
)
custom_keys = dict({
    'absolute_pos_embed':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone':
    dict(decay_mult=1.0, lr_mult=0.1),
    'backbone.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.patch_embed.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.0.blocks.0.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.0.blocks.1.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.0.downsample.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.1.blocks.0.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.1.blocks.1.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.1.downsample.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.0.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.1.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.10.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.11.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.12.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.13.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.14.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.15.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.16.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.17.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.2.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.3.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.4.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.5.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.6.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.7.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.8.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.9.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.downsample.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.3.blocks.0.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.3.blocks.1.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'level_embed':
    dict(decay_mult=0.0, lr_mult=1.0),
    'query_embed':
    dict(decay_mult=0.0, lr_mult=1.0),
    'query_feat':
    dict(decay_mult=0.0, lr_mult=1.0),
    'relative_position_bias_table':
    dict(decay_mult=0.0, lr_mult=0.1)
})
data_root = 'data/ade/ADEChallengeData2016'
dataset_type = 'ADE20KDataset'
default_hooks = dict(
    checkpoint=dict(
        by_epoch=False, interval=5000, save_best='mIoU',
        type='CheckpointHook'),
    logger=dict(interval=50, log_metric_by_epoch=False, type='LoggerHook'),
    param_scheduler=dict(type='ParamSchedulerHook'),
    sampler_seed=dict(type='DistSamplerSeedHook'),
    timer=dict(type='IterTimerHook'),
    visualization=dict(type='SegVisualizationHook'))
default_scope = 'mmseg'
depths = [
    2,
    2,
    18,
    2,
]
embed_multi = dict(decay_mult=0.0, lr_mult=1.0)
env_cfg = dict(
    cudnn_benchmark=True,
    dist_cfg=dict(backend='nccl'),
    mp_cfg=dict(mp_start_method='fork', opencv_num_threads=0))
img_ratios = [
    0.5,
    0.75,
    1.0,
    1.25,
    1.5,
    1.75,
]
launcher = 'none'
load_from = '../checkpoint_files/ade20k/mask2former/best_mIoU_iter_155000.pth'
log_level = 'INFO'
log_processor = dict(by_epoch=False)
model = dict(
    backbone=dict(
        attn_drop_rate=0.0,
        depths=[
            2,
            2,
            18,
            2,
        ],
        drop_path_rate=0.3,
        drop_rate=0.0,
        embed_dims=128,
        frozen_stages=-1,
        init_cfg=dict(
            checkpoint=
            'https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/swin/swin_base_patch4_window12_384_20220317-55b0104a.pth',
            type='Pretrained'),
        mlp_ratio=4,
        num_heads=[
            4,
            8,
            16,
            32,
        ],
        out_indices=(
            0,
            1,
            2,
            3,
        ),
        patch_norm=True,
        pretrain_img_size=384,
        qk_scale=None,
        qkv_bias=True,
        type='SwinTransformer',
        window_size=12,
        with_cp=False),
    data_preprocessor=dict(
        bgr_to_rgb=True,
        corruption='jpeg_compression',
        mean=[
            123.675,
            116.28,
            103.53,
        ],
        pad_val=0,
        seg_pad_val=255,
        size=(
            512,
            512,
        ),
        std=[
            58.395,
            57.12,
            57.375,
        ],
        type='SegDataPreProcessor'),
    decode_head=dict(
        align_corners=False,
        enforce_decoder_input_project=False,
        feat_channels=256,
        in_channels=[
            128,
            256,
            512,
            1024,
        ],
        loss_cls=dict(
            class_weight=[
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                0.1,
            ],
            loss_weight=2.0,
            reduction='mean',
            type='mmdet.CrossEntropyLoss',
            use_sigmoid=False),
        loss_dice=dict(
            activate=True,
            eps=1.0,
            loss_weight=5.0,
            naive_dice=True,
            reduction='mean',
            type='mmdet.DiceLoss',
            use_sigmoid=True),
        loss_mask=dict(
            loss_weight=5.0,
            reduction='mean',
            type='mmdet.CrossEntropyLoss',
            use_sigmoid=True),
        num_classes=150,
        num_queries=100,
        num_transformer_feat_level=3,
        out_channels=256,
        pixel_decoder=dict(
            act_cfg=dict(type='ReLU'),
            encoder=dict(
                init_cfg=None,
                layer_cfg=dict(
                    ffn_cfg=dict(
                        act_cfg=dict(inplace=True, type='ReLU'),
                        embed_dims=256,
                        feedforward_channels=1024,
                        ffn_drop=0.0,
                        num_fcs=2),
                    self_attn_cfg=dict(
                        batch_first=True,
                        dropout=0.0,
                        embed_dims=256,
                        im2col_step=64,
                        init_cfg=None,
                        norm_cfg=None,
                        num_heads=8,
                        num_levels=3,
                        num_points=4)),
                num_layers=6),
            init_cfg=None,
            norm_cfg=dict(num_groups=32, type='GN'),
            num_outs=3,
            positional_encoding=dict(normalize=True, num_feats=128),
            type='mmdet.MSDeformAttnPixelDecoder'),
        positional_encoding=dict(normalize=True, num_feats=128),
        strides=[
            4,
            8,
            16,
            32,
        ],
        train_cfg=dict(
            assigner=dict(
                match_costs=[
                    dict(type='mmdet.ClassificationCost', weight=2.0),
                    dict(
                        type='mmdet.CrossEntropyLossCost',
                        use_sigmoid=True,
                        weight=5.0),
                    dict(
                        eps=1.0,
                        pred_act=True,
                        type='mmdet.DiceCost',
                        weight=5.0),
                ],
                type='mmdet.HungarianAssigner'),
            importance_sample_ratio=0.75,
            num_points=12544,
            oversample_ratio=3.0,
            sampler=dict(type='mmdet.MaskPseudoSampler')),
        transformer_decoder=dict(
            init_cfg=None,
            layer_cfg=dict(
                cross_attn_cfg=dict(
                    attn_drop=0.0,
                    batch_first=True,
                    dropout_layer=None,
                    embed_dims=256,
                    num_heads=8,
                    proj_drop=0.0),
                ffn_cfg=dict(
                    act_cfg=dict(inplace=True, type='ReLU'),
                    add_identity=True,
                    dropout_layer=None,
                    embed_dims=256,
                    feedforward_channels=2048,
                    ffn_drop=0.0,
                    num_fcs=2),
                self_attn_cfg=dict(
                    attn_drop=0.0,
                    batch_first=True,
                    dropout_layer=None,
                    embed_dims=256,
                    num_heads=8,
                    proj_drop=0.0)),
            num_layers=9,
            return_intermediate=True),
        type='Mask2FormerHead'),
    test_cfg=dict(mode='whole'),
    train_cfg=dict(),
    type='EncoderDecoder')
num_classes = 150
optim_wrapper = dict(
    clip_grad=dict(max_norm=0.01, norm_type=2),
    optimizer=dict(
        betas=(
            0.9,
            0.999,
        ),
        eps=1e-08,
        lr=0.0001,
        type='AdamW',
        weight_decay=0.05),
    paramwise_cfg=dict(
        custom_keys=dict({
            'absolute_pos_embed':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone':
            dict(decay_mult=1.0, lr_mult=0.1),
            'backbone.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.patch_embed.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.0.blocks.0.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.0.blocks.1.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.0.downsample.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.1.blocks.0.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.1.blocks.1.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.1.downsample.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.0.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.1.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.10.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.11.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.12.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.13.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.14.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.15.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.16.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.17.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.2.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.3.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.4.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.5.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.6.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.7.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.8.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.9.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.downsample.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.3.blocks.0.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.3.blocks.1.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'level_embed':
            dict(decay_mult=0.0, lr_mult=1.0),
            'query_embed':
            dict(decay_mult=0.0, lr_mult=1.0),
            'query_feat':
            dict(decay_mult=0.0, lr_mult=1.0),
            'relative_position_bias_table':
            dict(decay_mult=0.0, lr_mult=0.1)
        }),
        norm_decay_mult=0.0),
    type='OptimWrapper')
optimizer = dict(
    betas=(
        0.9,
        0.999,
    ),
    eps=1e-08,
    lr=0.0001,
    type='AdamW',
    weight_decay=0.05)
param_scheduler = [
    dict(
        begin=0,
        by_epoch=False,
        end=160000,
        eta_min=0,
        power=0.9,
        type='PolyLR'),
]
pretrained = 'https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/swin/swin_base_patch4_window12_384_20220317-55b0104a.pth'
resume = False
test_cfg = dict(type='TestLoop')
test_dataloader = dict(
    batch_size=1,
    dataset=dict(
        data_prefix=dict(
            img_path='images/validation',
            seg_map_path='annotations/validation'),
        data_root='data/ade/ADEChallengeData2016',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(keep_ratio=True, scale=(
                2560,
                640,
            ), type='Resize'),
            dict(reduce_zero_label=True, type='LoadAnnotations'),
            dict(type='PackSegInputs'),
        ],
        type='ADE20KDataset'),
    num_workers=4,
    persistent_workers=True,
    sampler=dict(shuffle=False, type='DefaultSampler'))
test_evaluator = dict(
    iou_metrics=[
        'mIoU',
    ], type='IoUMetric')
test_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(keep_ratio=True, scale=(
        2560,
        640,
    ), type='Resize'),
    dict(reduce_zero_label=True, type='LoadAnnotations'),
    dict(type='PackSegInputs'),
]
train_cfg = dict(
    max_iters=160000, type='IterBasedTrainLoop', val_interval=5000)
train_dataloader = dict(
    batch_size=2,
    dataset=dict(
        data_prefix=dict(
            img_path='images/training', seg_map_path='annotations/training'),
        data_root='data/ade/ADEChallengeData2016',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(reduce_zero_label=True, type='LoadAnnotations'),
            dict(
                max_size=2560,
                resize_type='ResizeShortestEdge',
                scales=[
                    320,
                    384,
                    448,
                    512,
                    576,
                    640,
                    704,
                    768,
                    832,
                    896,
                    960,
                    1024,
                    1088,
                    1152,
                    1216,
                    1280,
                ],
                type='RandomChoiceResize'),
            dict(
                cat_max_ratio=0.75, crop_size=(
                    512,
                    512,
                ), type='RandomCrop'),
            dict(prob=0.5, type='RandomFlip'),
            dict(type='PhotoMetricDistortion'),
            dict(type='PackSegInputs'),
        ],
        type='ADE20KDataset'),
    num_workers=4,
    persistent_workers=True,
    sampler=dict(shuffle=True, type='InfiniteSampler'))
train_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(reduce_zero_label=True, type='LoadAnnotations'),
    dict(
        max_size=2560,
        resize_type='ResizeShortestEdge',
        scales=[
            320,
            384,
            448,
            512,
            576,
            640,
            704,
            768,
            832,
            896,
            960,
            1024,
            1088,
            1152,
            1216,
            1280,
        ],
        type='RandomChoiceResize'),
    dict(cat_max_ratio=0.75, crop_size=(
        512,
        512,
    ), type='RandomCrop'),
    dict(prob=0.5, type='RandomFlip'),
    dict(type='PhotoMetricDistortion'),
    dict(type='PackSegInputs'),
]
tta_model = dict(type='SegTTAModel')
tta_pipeline = [
    dict(backend_args=None, type='LoadImageFromFile'),
    dict(
        transforms=[
            [
                dict(keep_ratio=True, scale_factor=0.5, type='Resize'),
                dict(keep_ratio=True, scale_factor=0.75, type='Resize'),
                dict(keep_ratio=True, scale_factor=1.0, type='Resize'),
                dict(keep_ratio=True, scale_factor=1.25, type='Resize'),
                dict(keep_ratio=True, scale_factor=1.5, type='Resize'),
                dict(keep_ratio=True, scale_factor=1.75, type='Resize'),
            ],
            [
                dict(direction='horizontal', prob=0.0, type='RandomFlip'),
                dict(direction='horizontal', prob=1.0, type='RandomFlip'),
            ],
            [
                dict(type='LoadAnnotations'),
            ],
            [
                dict(type='PackSegInputs'),
            ],
        ],
        type='TestTimeAug'),
]
val_cfg = dict(type='ValLoop')
val_dataloader = dict(
    batch_size=1,
    dataset=dict(
        data_prefix=dict(
            img_path='images/validation',
            seg_map_path='annotations/validation'),
        data_root='data/ade/ADEChallengeData2016',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(keep_ratio=True, scale=(
                2560,
                640,
            ), type='Resize'),
            dict(reduce_zero_label=True, type='LoadAnnotations'),
            dict(type='PackSegInputs'),
        ],
        type='ADE20KDataset'),
    num_workers=4,
    persistent_workers=True,
    sampler=dict(shuffle=False, type='DefaultSampler'))
val_evaluator = dict(
    iou_metrics=[
        'mIoU',
    ], type='IoUMetric')
vis_backends = [
    dict(type='LocalVisBackend'),
]
visualizer = dict(
    name='visualizer',
    type='SegLocalVisualizer',
    vis_backends=[
        dict(type='LocalVisBackend'),
    ])
work_dir = '../corruptions/work_dirs/ade20k/mask2former/mask2former_swin-b-in1k-384x384-pre_8xb2-160k_ade20k-512x512/jpeg_compression'

/pfs/work7/workspace/scratch/ma_mkacar-team_project_fss2024/benchmarking_robustness/semantic_segmentation/mmsegmentation/mmseg/ops_dcnv3/modules/dcnv3.py:20: UserWarning: Now, we support DCNv4 in InternImage.
  warnings.warn('Now, we support DCNv4 in InternImage.')
10/06 10:56:48 - mmengine - INFO - Distributed training is not used, all SyncBatchNorm (SyncBN) layers in the model will be automatically reverted to BatchNormXd layers if they are used.
10/06 10:56:48 - mmengine - INFO - Hooks will be executed in the following order:
before_run:
(VERY_HIGH   ) RuntimeInfoHook                    
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
before_train:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_train_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(NORMAL      ) DistSamplerSeedHook                
 -------------------- 
before_train_iter:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_train_iter:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(NORMAL      ) SegVisualizationHook               
(BELOW_NORMAL) LoggerHook                         
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
after_train_epoch:
(NORMAL      ) IterTimerHook                      
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_val:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
before_val_epoch:
(NORMAL      ) IterTimerHook                      
 -------------------- 
before_val_iter:
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_val_iter:
(NORMAL      ) IterTimerHook                      
(NORMAL      ) SegVisualizationHook               
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_val_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
after_val:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
after_train:
(VERY_HIGH   ) RuntimeInfoHook                    
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_test:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
before_test_epoch:
(NORMAL      ) IterTimerHook                      
 -------------------- 
before_test_iter:
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_test_iter:
(NORMAL      ) IterTimerHook                      
(NORMAL      ) SegVisualizationHook               
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_test_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_test:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
after_run:
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
10/06 10:56:49 - mmengine - WARNING - The prefix is not set in metric class IoUMetric.
Loads checkpoint by local backend from path: ../checkpoint_files/ade20k/mask2former/best_mIoU_iter_155000.pth
10/06 10:56:50 - mmengine - INFO - Load checkpoint from ../checkpoint_files/ade20k/mask2former/best_mIoU_iter_155000.pth
10/06 10:57:20 - mmengine - INFO - Iter(test) [  50/2000]    eta: 0:19:35  time: 0.3923  data_time: 0.0019  memory: 17181  
10/06 10:57:39 - mmengine - INFO - Iter(test) [ 100/2000]    eta: 0:15:38  time: 0.3861  data_time: 0.0020  memory: 17180  
10/06 10:57:53 - mmengine - INFO - Iter(test) [ 150/2000]    eta: 0:13:04  time: 0.2849  data_time: 0.0019  memory: 17150  
10/06 10:58:07 - mmengine - INFO - Iter(test) [ 200/2000]    eta: 0:11:38  time: 0.3421  data_time: 0.0018  memory: 17194  
10/06 10:58:24 - mmengine - INFO - Iter(test) [ 250/2000]    eta: 0:10:58  time: 0.2266  data_time: 0.0017  memory: 17202  
10/06 10:58:38 - mmengine - INFO - Iter(test) [ 300/2000]    eta: 0:10:11  time: 0.1353  data_time: 0.0018  memory: 17180  
10/06 10:58:52 - mmengine - INFO - Iter(test) [ 350/2000]    eta: 0:09:35  time: 0.2695  data_time: 0.0017  memory: 17178  
10/06 10:59:02 - mmengine - INFO - Iter(test) [ 400/2000]    eta: 0:08:47  time: 0.1482  data_time: 0.0017  memory: 17177  
10/06 10:59:10 - mmengine - INFO - Iter(test) [ 450/2000]    eta: 0:08:02  time: 0.1843  data_time: 0.0018  memory: 17147  
10/06 10:59:19 - mmengine - INFO - Iter(test) [ 500/2000]    eta: 0:07:27  time: 0.2121  data_time: 0.0019  memory: 17149  
10/06 10:59:28 - mmengine - INFO - Iter(test) [ 550/2000]    eta: 0:06:56  time: 0.2448  data_time: 0.0019  memory: 17179  
10/06 10:59:35 - mmengine - INFO - Iter(test) [ 600/2000]    eta: 0:06:24  time: 0.1354  data_time: 0.0019  memory: 3938  
10/06 10:59:45 - mmengine - INFO - Iter(test) [ 650/2000]    eta: 0:06:04  time: 0.2647  data_time: 0.0017  memory: 17181  
10/06 10:59:58 - mmengine - INFO - Iter(test) [ 700/2000]    eta: 0:05:48  time: 0.1969  data_time: 0.0019  memory: 17177  
10/06 11:00:10 - mmengine - INFO - Iter(test) [ 750/2000]    eta: 0:05:33  time: 0.5563  data_time: 0.0018  memory: 17184  
10/06 11:00:18 - mmengine - INFO - Iter(test) [ 800/2000]    eta: 0:05:11  time: 0.1349  data_time: 0.0019  memory: 17151  
10/06 11:00:24 - mmengine - INFO - Iter(test) [ 850/2000]    eta: 0:04:50  time: 0.1355  data_time: 0.0020  memory: 1428  
10/06 11:00:33 - mmengine - INFO - Iter(test) [ 900/2000]    eta: 0:04:32  time: 0.1808  data_time: 0.0017  memory: 17138  
10/06 11:00:44 - mmengine - INFO - Iter(test) [ 950/2000]    eta: 0:04:18  time: 0.2864  data_time: 0.0018  memory: 17133  
10/06 11:00:51 - mmengine - INFO - Iter(test) [1000/2000]    eta: 0:04:01  time: 0.1279  data_time: 0.0018  memory: 17096  
10/06 11:00:59 - mmengine - INFO - Iter(test) [1050/2000]    eta: 0:03:45  time: 0.2121  data_time: 0.0018  memory: 17182  
10/06 11:01:08 - mmengine - INFO - Iter(test) [1100/2000]    eta: 0:03:31  time: 0.1303  data_time: 0.0018  memory: 17175  
10/06 11:01:16 - mmengine - INFO - Iter(test) [1150/2000]    eta: 0:03:16  time: 0.1322  data_time: 0.0017  memory: 17117  
10/06 11:01:23 - mmengine - INFO - Iter(test) [1200/2000]    eta: 0:03:02  time: 0.1276  data_time: 0.0018  memory: 17113  
10/06 11:01:32 - mmengine - INFO - Iter(test) [1250/2000]    eta: 0:02:49  time: 0.2079  data_time: 0.0017  memory: 17172  
10/06 11:01:38 - mmengine - INFO - Iter(test) [1300/2000]    eta: 0:02:35  time: 0.1328  data_time: 0.0018  memory: 1430  
10/06 11:01:46 - mmengine - INFO - Iter(test) [1350/2000]    eta: 0:02:22  time: 0.1240  data_time: 0.0017  memory: 17110  
10/06 11:01:56 - mmengine - INFO - Iter(test) [1400/2000]    eta: 0:02:11  time: 0.1494  data_time: 0.0017  memory: 17154  
10/06 11:02:03 - mmengine - INFO - Iter(test) [1450/2000]    eta: 0:01:58  time: 0.1949  data_time: 0.0017  memory: 17130  
10/06 11:02:10 - mmengine - INFO - Iter(test) [1500/2000]    eta: 0:01:46  time: 0.1280  data_time: 0.0017  memory: 17125  
10/06 11:02:18 - mmengine - INFO - Iter(test) [1550/2000]    eta: 0:01:35  time: 0.1337  data_time: 0.0017  memory: 17154  
10/06 11:02:24 - mmengine - INFO - Iter(test) [1600/2000]    eta: 0:01:23  time: 0.1291  data_time: 0.0018  memory: 1425  
10/06 11:02:32 - mmengine - INFO - Iter(test) [1650/2000]    eta: 0:01:12  time: 0.1228  data_time: 0.0016  memory: 17192  
10/06 11:02:44 - mmengine - INFO - Iter(test) [1700/2000]    eta: 0:01:02  time: 0.1326  data_time: 0.0019  memory: 17151  
10/06 11:02:51 - mmengine - INFO - Iter(test) [1750/2000]    eta: 0:00:51  time: 0.1280  data_time: 0.0016  memory: 17111  
10/06 11:02:59 - mmengine - INFO - Iter(test) [1800/2000]    eta: 0:00:40  time: 0.1358  data_time: 0.0019  memory: 17114  
10/06 11:03:05 - mmengine - INFO - Iter(test) [1850/2000]    eta: 0:00:30  time: 0.1347  data_time: 0.0020  memory: 1317  
10/06 11:03:13 - mmengine - INFO - Iter(test) [1900/2000]    eta: 0:00:20  time: 0.1913  data_time: 0.0018  memory: 17182  
10/06 11:03:21 - mmengine - INFO - Iter(test) [1950/2000]    eta: 0:00:10  time: 0.1276  data_time: 0.0018  memory: 17197  
10/06 11:03:29 - mmengine - INFO - Iter(test) [2000/2000]    eta: 0:00:00  time: 0.1183  data_time: 0.0015  memory: 17131  
10/06 11:03:29 - mmengine - INFO - per class results:
10/06 11:03:29 - mmengine - INFO - 
+---------------------+-------+-------+
|        Class        |  IoU  |  Acc  |
+---------------------+-------+-------+
|         wall        |  74.4 | 86.97 |
|       building      |  80.1 | 93.39 |
|         sky         | 93.79 | 96.55 |
|        floor        | 78.99 | 89.92 |
|         tree        | 73.57 | 85.51 |
|       ceiling       | 80.56 | 85.84 |
|         road        | 81.13 | 89.95 |
|         bed         | 86.72 | 94.42 |
|      windowpane     | 60.16 | 77.27 |
|        grass        | 61.65 | 75.01 |
|       cabinet       | 56.95 | 74.03 |
|       sidewalk      | 61.72 | 80.08 |
|        person       | 79.42 | 85.86 |
|        earth        | 32.97 | 42.83 |
|         door        | 39.53 | 51.98 |
|        table        |  51.8 | 67.47 |
|       mountain      | 59.87 | 78.43 |
|        plant        | 52.56 | 60.98 |
|       curtain       |  73.4 | 80.83 |
|        chair        | 51.44 | 63.59 |
|         car         | 84.07 | 91.23 |
|        water        | 53.77 | 70.81 |
|       painting      | 69.29 | 80.96 |
|         sofa        | 62.37 | 79.79 |
|        shelf        | 40.89 | 61.29 |
|        house        | 39.72 | 49.52 |
|         sea         | 55.36 | 76.67 |
|        mirror       | 58.94 | 78.52 |
|         rug         | 49.56 | 53.02 |
|        field        | 28.85 | 70.75 |
|       armchair      | 35.38 | 55.37 |
|         seat        | 56.93 | 75.53 |
|        fence        | 45.24 | 63.04 |
|         desk        | 32.79 | 62.75 |
|         rock        | 50.32 | 72.08 |
|       wardrobe      | 53.52 | 69.82 |
|         lamp        |  60.5 | 72.33 |
|       bathtub       | 71.05 | 83.94 |
|       railing       | 33.47 | 43.99 |
|       cushion       | 51.16 |  67.8 |
|         base        | 26.01 | 46.54 |
|         box         |  24.2 | 33.97 |
|        column       | 46.35 | 52.41 |
|      signboard      | 39.01 | 48.88 |
|   chest of drawers  | 35.27 | 56.87 |
|       counter       | 33.74 | 42.61 |
|         sand        | 34.16 | 47.15 |
|         sink        | 70.73 | 79.42 |
|      skyscraper     | 49.67 | 60.57 |
|      fireplace      | 63.65 | 82.08 |
|     refrigerator    | 67.92 | 80.45 |
|      grandstand     | 41.64 | 70.07 |
|         path        | 13.35 | 18.38 |
|        stairs       | 25.13 | 28.44 |
|        runway       | 58.76 | 77.87 |
|         case        | 63.98 | 84.75 |
|      pool table     | 93.17 | 95.98 |
|        pillow       | 51.02 | 61.59 |
|     screen door     | 54.73 | 62.17 |
|       stairway      | 29.04 |  43.7 |
|        river        | 13.96 | 24.33 |
|        bridge       | 53.96 | 68.49 |
|       bookcase      | 26.98 | 49.27 |
|        blind        | 20.28 | 21.45 |
|     coffee table    | 55.67 | 76.41 |
|        toilet       | 83.95 | 89.19 |
|        flower       | 32.15 | 46.07 |
|         book        | 48.44 | 66.72 |
|         hill        |  6.68 | 12.52 |
|        bench        | 52.67 | 69.98 |
|      countertop     | 54.07 | 67.69 |
|        stove        | 66.91 | 78.39 |
|         palm        | 48.73 | 59.13 |
|    kitchen island   | 33.27 | 64.82 |
|       computer      | 61.78 | 72.11 |
|     swivel chair    | 38.47 | 54.13 |
|         boat        | 68.54 | 88.74 |
|         bar         | 48.25 | 59.66 |
|    arcade machine   | 55.34 | 63.73 |
|        hovel        | 16.87 | 27.18 |
|         bus         | 86.62 | 95.68 |
|        towel        |  66.2 | 70.07 |
|        light        | 56.08 | 70.93 |
|        truck        | 39.24 | 52.48 |
|        tower        |  31.4 | 52.62 |
|      chandelier     | 60.87 | 74.11 |
|        awning       | 34.86 | 46.41 |
|     streetlight     | 24.95 | 40.27 |
|        booth        | 25.87 | 27.26 |
| television receiver |  66.9 | 75.69 |
|       airplane      | 59.94 | 64.65 |
|      dirt track     |  0.0  |  0.0  |
|       apparel       | 39.78 | 56.63 |
|         pole        | 26.98 | 38.47 |
|         land        |  0.29 |  0.32 |
|      bannister      |  8.41 | 10.68 |
|      escalator      | 18.25 | 19.64 |
|       ottoman       | 49.07 | 65.22 |
|        bottle       | 17.62 | 20.85 |
|        buffet       | 37.31 | 42.88 |
|        poster       |  17.8 | 22.05 |
|        stage        |  7.11 | 17.97 |
|         van         | 46.27 | 64.93 |
|         ship        | 91.84 | 93.21 |
|       fountain      |  25.0 | 25.79 |
|    conveyer belt    | 44.25 |  65.2 |
|        canopy       | 27.06 |  44.3 |
|        washer       | 65.27 | 69.79 |
|      plaything      | 10.87 | 18.61 |
|    swimming pool    | 31.25 | 65.77 |
|        stool        | 35.17 | 49.07 |
|        barrel       | 57.05 | 63.14 |
|        basket       | 36.23 | 45.67 |
|      waterfall      | 62.02 | 90.33 |
|         tent        | 90.74 | 97.84 |
|         bag         | 11.09 | 14.32 |
|       minibike      | 65.67 | 81.85 |
|        cradle       | 65.73 | 82.42 |
|         oven        | 18.27 | 50.22 |
|         ball        | 24.86 |  33.8 |
|         food        | 59.15 | 69.92 |
|         step        |  2.18 |  2.54 |
|         tank        | 45.61 | 51.64 |
|      trade name     | 30.86 | 41.29 |
|      microwave      | 36.55 | 40.41 |
|         pot         | 42.11 | 50.49 |
|        animal       | 58.48 | 62.51 |
|       bicycle       | 49.67 | 65.91 |
|         lake        |  0.0  |  0.0  |
|      dishwasher     | 65.51 | 76.45 |
|        screen       | 65.79 | 90.45 |
|       blanket       | 11.78 | 12.49 |
|      sculpture      | 45.73 |  60.4 |
|         hood        | 37.37 | 39.62 |
|        sconce       | 37.14 | 45.56 |
|         vase        | 34.92 |  51.3 |
|    traffic light    | 32.02 | 48.54 |
|         tray        |  3.53 |  4.71 |
|        ashcan       | 39.11 | 60.01 |
|         fan         | 53.69 | 75.21 |
|         pier        |  2.75 |  3.69 |
|      crt screen     |  3.24 | 10.92 |
|        plate        | 54.65 | 69.39 |
|       monitor       |  1.38 |  1.9  |
|    bulletin board   | 41.21 | 48.32 |
|        shower       | 10.71 | 11.48 |
|       radiator      | 51.94 | 58.63 |
|        glass        | 14.55 | 17.15 |
|        clock        | 26.54 | 34.19 |
|         flag        | 45.83 | 50.24 |
+---------------------+-------+-------+
10/06 11:03:29 - mmengine - INFO - Iter(test) [2000/2000]    aAcc: 80.9700  mIoU: 45.0700  mAcc: 57.0000  data_time: 0.0020  time: 0.1994
Finished processing corruption type: jpeg_compression
Processing corruption type: elastic_transform
10/06 11:03:34 - mmengine - INFO - 
------------------------------------------------------------
System environment:
    sys.platform: linux
    Python: 3.10.13 | packaged by conda-forge | (main, Dec 23 2023, 15:36:39) [GCC 12.3.0]
    CUDA available: True
    MUSA available: False
    numpy_random_seed: 135083999
    GPU 0: Tesla V100-SXM2-32GB
    CUDA_HOME: /opt/bwhpc/common/devel/cuda/11.7
    NVCC: Cuda compilation tools, release 11.7, V11.7.99
    GCC: gcc (GCC) 8.5.0 20210514 (Red Hat 8.5.0-18)
    PyTorch: 1.13.1
    PyTorch compiling details: PyTorch built with:
  - GCC 9.3
  - C++ Version: 201402
  - Intel(R) oneAPI Math Kernel Library Version 2023.1-Product Build 20230303 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v2.6.0 (Git Hash 52b5f107dd9cf10910aaa19cb47f3abf9b349815)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - LAPACK is enabled (usually provided by MKL)
  - NNPACK is enabled
  - CPU capability usage: AVX2
  - CUDA Runtime 11.7
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_61,code=sm_61;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86;-gencode;arch=compute_37,code=compute_37
  - CuDNN 8.5
  - Magma 2.6.1
  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.7, CUDNN_VERSION=8.5.0, CXX_COMPILER=/opt/rh/devtoolset-9/root/usr/bin/c++, CXX_FLAGS= -fabi-version=11 -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -DEDGE_PROFILER_USE_KINETO -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Werror=non-virtual-dtor -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wunused-local-typedefs -Wno-unused-parameter -Wno-unused-function -Wno-unused-result -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Werror=cast-function-type -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.13.1, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, USE_ROCM=OFF, 

    TorchVision: 0.14.1
    OpenCV: 3.4.18
    MMEngine: 0.10.4

Runtime environment:
    cudnn_benchmark: True
    mp_cfg: {'mp_start_method': 'fork', 'opencv_num_threads': 0}
    dist_cfg: {'backend': 'nccl'}
    seed: 135083999
    Distributed launcher: none
    Distributed training: False
    GPU number: 1
------------------------------------------------------------

10/06 11:03:34 - mmengine - INFO - Config:
auto_scale_lr = dict(base_batch_size=16, enable=False)
backbone_embed_multi = dict(decay_mult=0.0, lr_mult=0.1)
backbone_norm_multi = dict(decay_mult=0.0, lr_mult=0.1)
crop_size = (
    512,
    512,
)
custom_keys = dict({
    'absolute_pos_embed':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone':
    dict(decay_mult=1.0, lr_mult=0.1),
    'backbone.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.patch_embed.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.0.blocks.0.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.0.blocks.1.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.0.downsample.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.1.blocks.0.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.1.blocks.1.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.1.downsample.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.0.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.1.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.10.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.11.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.12.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.13.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.14.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.15.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.16.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.17.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.2.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.3.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.4.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.5.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.6.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.7.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.8.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.9.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.downsample.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.3.blocks.0.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.3.blocks.1.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'level_embed':
    dict(decay_mult=0.0, lr_mult=1.0),
    'query_embed':
    dict(decay_mult=0.0, lr_mult=1.0),
    'query_feat':
    dict(decay_mult=0.0, lr_mult=1.0),
    'relative_position_bias_table':
    dict(decay_mult=0.0, lr_mult=0.1)
})
data_root = 'data/ade/ADEChallengeData2016'
dataset_type = 'ADE20KDataset'
default_hooks = dict(
    checkpoint=dict(
        by_epoch=False, interval=5000, save_best='mIoU',
        type='CheckpointHook'),
    logger=dict(interval=50, log_metric_by_epoch=False, type='LoggerHook'),
    param_scheduler=dict(type='ParamSchedulerHook'),
    sampler_seed=dict(type='DistSamplerSeedHook'),
    timer=dict(type='IterTimerHook'),
    visualization=dict(type='SegVisualizationHook'))
default_scope = 'mmseg'
depths = [
    2,
    2,
    18,
    2,
]
embed_multi = dict(decay_mult=0.0, lr_mult=1.0)
env_cfg = dict(
    cudnn_benchmark=True,
    dist_cfg=dict(backend='nccl'),
    mp_cfg=dict(mp_start_method='fork', opencv_num_threads=0))
img_ratios = [
    0.5,
    0.75,
    1.0,
    1.25,
    1.5,
    1.75,
]
launcher = 'none'
load_from = '../checkpoint_files/ade20k/mask2former/best_mIoU_iter_155000.pth'
log_level = 'INFO'
log_processor = dict(by_epoch=False)
model = dict(
    backbone=dict(
        attn_drop_rate=0.0,
        depths=[
            2,
            2,
            18,
            2,
        ],
        drop_path_rate=0.3,
        drop_rate=0.0,
        embed_dims=128,
        frozen_stages=-1,
        init_cfg=dict(
            checkpoint=
            'https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/swin/swin_base_patch4_window12_384_20220317-55b0104a.pth',
            type='Pretrained'),
        mlp_ratio=4,
        num_heads=[
            4,
            8,
            16,
            32,
        ],
        out_indices=(
            0,
            1,
            2,
            3,
        ),
        patch_norm=True,
        pretrain_img_size=384,
        qk_scale=None,
        qkv_bias=True,
        type='SwinTransformer',
        window_size=12,
        with_cp=False),
    data_preprocessor=dict(
        bgr_to_rgb=True,
        corruption='elastic_transform',
        mean=[
            123.675,
            116.28,
            103.53,
        ],
        pad_val=0,
        seg_pad_val=255,
        size=(
            512,
            512,
        ),
        std=[
            58.395,
            57.12,
            57.375,
        ],
        type='SegDataPreProcessor'),
    decode_head=dict(
        align_corners=False,
        enforce_decoder_input_project=False,
        feat_channels=256,
        in_channels=[
            128,
            256,
            512,
            1024,
        ],
        loss_cls=dict(
            class_weight=[
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                0.1,
            ],
            loss_weight=2.0,
            reduction='mean',
            type='mmdet.CrossEntropyLoss',
            use_sigmoid=False),
        loss_dice=dict(
            activate=True,
            eps=1.0,
            loss_weight=5.0,
            naive_dice=True,
            reduction='mean',
            type='mmdet.DiceLoss',
            use_sigmoid=True),
        loss_mask=dict(
            loss_weight=5.0,
            reduction='mean',
            type='mmdet.CrossEntropyLoss',
            use_sigmoid=True),
        num_classes=150,
        num_queries=100,
        num_transformer_feat_level=3,
        out_channels=256,
        pixel_decoder=dict(
            act_cfg=dict(type='ReLU'),
            encoder=dict(
                init_cfg=None,
                layer_cfg=dict(
                    ffn_cfg=dict(
                        act_cfg=dict(inplace=True, type='ReLU'),
                        embed_dims=256,
                        feedforward_channels=1024,
                        ffn_drop=0.0,
                        num_fcs=2),
                    self_attn_cfg=dict(
                        batch_first=True,
                        dropout=0.0,
                        embed_dims=256,
                        im2col_step=64,
                        init_cfg=None,
                        norm_cfg=None,
                        num_heads=8,
                        num_levels=3,
                        num_points=4)),
                num_layers=6),
            init_cfg=None,
            norm_cfg=dict(num_groups=32, type='GN'),
            num_outs=3,
            positional_encoding=dict(normalize=True, num_feats=128),
            type='mmdet.MSDeformAttnPixelDecoder'),
        positional_encoding=dict(normalize=True, num_feats=128),
        strides=[
            4,
            8,
            16,
            32,
        ],
        train_cfg=dict(
            assigner=dict(
                match_costs=[
                    dict(type='mmdet.ClassificationCost', weight=2.0),
                    dict(
                        type='mmdet.CrossEntropyLossCost',
                        use_sigmoid=True,
                        weight=5.0),
                    dict(
                        eps=1.0,
                        pred_act=True,
                        type='mmdet.DiceCost',
                        weight=5.0),
                ],
                type='mmdet.HungarianAssigner'),
            importance_sample_ratio=0.75,
            num_points=12544,
            oversample_ratio=3.0,
            sampler=dict(type='mmdet.MaskPseudoSampler')),
        transformer_decoder=dict(
            init_cfg=None,
            layer_cfg=dict(
                cross_attn_cfg=dict(
                    attn_drop=0.0,
                    batch_first=True,
                    dropout_layer=None,
                    embed_dims=256,
                    num_heads=8,
                    proj_drop=0.0),
                ffn_cfg=dict(
                    act_cfg=dict(inplace=True, type='ReLU'),
                    add_identity=True,
                    dropout_layer=None,
                    embed_dims=256,
                    feedforward_channels=2048,
                    ffn_drop=0.0,
                    num_fcs=2),
                self_attn_cfg=dict(
                    attn_drop=0.0,
                    batch_first=True,
                    dropout_layer=None,
                    embed_dims=256,
                    num_heads=8,
                    proj_drop=0.0)),
            num_layers=9,
            return_intermediate=True),
        type='Mask2FormerHead'),
    test_cfg=dict(mode='whole'),
    train_cfg=dict(),
    type='EncoderDecoder')
num_classes = 150
optim_wrapper = dict(
    clip_grad=dict(max_norm=0.01, norm_type=2),
    optimizer=dict(
        betas=(
            0.9,
            0.999,
        ),
        eps=1e-08,
        lr=0.0001,
        type='AdamW',
        weight_decay=0.05),
    paramwise_cfg=dict(
        custom_keys=dict({
            'absolute_pos_embed':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone':
            dict(decay_mult=1.0, lr_mult=0.1),
            'backbone.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.patch_embed.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.0.blocks.0.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.0.blocks.1.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.0.downsample.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.1.blocks.0.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.1.blocks.1.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.1.downsample.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.0.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.1.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.10.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.11.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.12.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.13.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.14.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.15.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.16.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.17.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.2.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.3.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.4.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.5.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.6.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.7.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.8.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.9.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.downsample.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.3.blocks.0.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.3.blocks.1.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'level_embed':
            dict(decay_mult=0.0, lr_mult=1.0),
            'query_embed':
            dict(decay_mult=0.0, lr_mult=1.0),
            'query_feat':
            dict(decay_mult=0.0, lr_mult=1.0),
            'relative_position_bias_table':
            dict(decay_mult=0.0, lr_mult=0.1)
        }),
        norm_decay_mult=0.0),
    type='OptimWrapper')
optimizer = dict(
    betas=(
        0.9,
        0.999,
    ),
    eps=1e-08,
    lr=0.0001,
    type='AdamW',
    weight_decay=0.05)
param_scheduler = [
    dict(
        begin=0,
        by_epoch=False,
        end=160000,
        eta_min=0,
        power=0.9,
        type='PolyLR'),
]
pretrained = 'https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/swin/swin_base_patch4_window12_384_20220317-55b0104a.pth'
resume = False
test_cfg = dict(type='TestLoop')
test_dataloader = dict(
    batch_size=1,
    dataset=dict(
        data_prefix=dict(
            img_path='images/validation',
            seg_map_path='annotations/validation'),
        data_root='data/ade/ADEChallengeData2016',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(keep_ratio=True, scale=(
                2560,
                640,
            ), type='Resize'),
            dict(reduce_zero_label=True, type='LoadAnnotations'),
            dict(type='PackSegInputs'),
        ],
        type='ADE20KDataset'),
    num_workers=4,
    persistent_workers=True,
    sampler=dict(shuffle=False, type='DefaultSampler'))
test_evaluator = dict(
    iou_metrics=[
        'mIoU',
    ], type='IoUMetric')
test_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(keep_ratio=True, scale=(
        2560,
        640,
    ), type='Resize'),
    dict(reduce_zero_label=True, type='LoadAnnotations'),
    dict(type='PackSegInputs'),
]
train_cfg = dict(
    max_iters=160000, type='IterBasedTrainLoop', val_interval=5000)
train_dataloader = dict(
    batch_size=2,
    dataset=dict(
        data_prefix=dict(
            img_path='images/training', seg_map_path='annotations/training'),
        data_root='data/ade/ADEChallengeData2016',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(reduce_zero_label=True, type='LoadAnnotations'),
            dict(
                max_size=2560,
                resize_type='ResizeShortestEdge',
                scales=[
                    320,
                    384,
                    448,
                    512,
                    576,
                    640,
                    704,
                    768,
                    832,
                    896,
                    960,
                    1024,
                    1088,
                    1152,
                    1216,
                    1280,
                ],
                type='RandomChoiceResize'),
            dict(
                cat_max_ratio=0.75, crop_size=(
                    512,
                    512,
                ), type='RandomCrop'),
            dict(prob=0.5, type='RandomFlip'),
            dict(type='PhotoMetricDistortion'),
            dict(type='PackSegInputs'),
        ],
        type='ADE20KDataset'),
    num_workers=4,
    persistent_workers=True,
    sampler=dict(shuffle=True, type='InfiniteSampler'))
train_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(reduce_zero_label=True, type='LoadAnnotations'),
    dict(
        max_size=2560,
        resize_type='ResizeShortestEdge',
        scales=[
            320,
            384,
            448,
            512,
            576,
            640,
            704,
            768,
            832,
            896,
            960,
            1024,
            1088,
            1152,
            1216,
            1280,
        ],
        type='RandomChoiceResize'),
    dict(cat_max_ratio=0.75, crop_size=(
        512,
        512,
    ), type='RandomCrop'),
    dict(prob=0.5, type='RandomFlip'),
    dict(type='PhotoMetricDistortion'),
    dict(type='PackSegInputs'),
]
tta_model = dict(type='SegTTAModel')
tta_pipeline = [
    dict(backend_args=None, type='LoadImageFromFile'),
    dict(
        transforms=[
            [
                dict(keep_ratio=True, scale_factor=0.5, type='Resize'),
                dict(keep_ratio=True, scale_factor=0.75, type='Resize'),
                dict(keep_ratio=True, scale_factor=1.0, type='Resize'),
                dict(keep_ratio=True, scale_factor=1.25, type='Resize'),
                dict(keep_ratio=True, scale_factor=1.5, type='Resize'),
                dict(keep_ratio=True, scale_factor=1.75, type='Resize'),
            ],
            [
                dict(direction='horizontal', prob=0.0, type='RandomFlip'),
                dict(direction='horizontal', prob=1.0, type='RandomFlip'),
            ],
            [
                dict(type='LoadAnnotations'),
            ],
            [
                dict(type='PackSegInputs'),
            ],
        ],
        type='TestTimeAug'),
]
val_cfg = dict(type='ValLoop')
val_dataloader = dict(
    batch_size=1,
    dataset=dict(
        data_prefix=dict(
            img_path='images/validation',
            seg_map_path='annotations/validation'),
        data_root='data/ade/ADEChallengeData2016',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(keep_ratio=True, scale=(
                2560,
                640,
            ), type='Resize'),
            dict(reduce_zero_label=True, type='LoadAnnotations'),
            dict(type='PackSegInputs'),
        ],
        type='ADE20KDataset'),
    num_workers=4,
    persistent_workers=True,
    sampler=dict(shuffle=False, type='DefaultSampler'))
val_evaluator = dict(
    iou_metrics=[
        'mIoU',
    ], type='IoUMetric')
vis_backends = [
    dict(type='LocalVisBackend'),
]
visualizer = dict(
    name='visualizer',
    type='SegLocalVisualizer',
    vis_backends=[
        dict(type='LocalVisBackend'),
    ])
work_dir = '../corruptions/work_dirs/ade20k/mask2former/mask2former_swin-b-in1k-384x384-pre_8xb2-160k_ade20k-512x512/elastic_transform'

/pfs/work7/workspace/scratch/ma_mkacar-team_project_fss2024/benchmarking_robustness/semantic_segmentation/mmsegmentation/mmseg/ops_dcnv3/modules/dcnv3.py:20: UserWarning: Now, we support DCNv4 in InternImage.
  warnings.warn('Now, we support DCNv4 in InternImage.')
10/06 11:03:38 - mmengine - INFO - Distributed training is not used, all SyncBatchNorm (SyncBN) layers in the model will be automatically reverted to BatchNormXd layers if they are used.
10/06 11:03:38 - mmengine - INFO - Hooks will be executed in the following order:
before_run:
(VERY_HIGH   ) RuntimeInfoHook                    
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
before_train:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_train_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(NORMAL      ) DistSamplerSeedHook                
 -------------------- 
before_train_iter:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_train_iter:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(NORMAL      ) SegVisualizationHook               
(BELOW_NORMAL) LoggerHook                         
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
after_train_epoch:
(NORMAL      ) IterTimerHook                      
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_val:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
before_val_epoch:
(NORMAL      ) IterTimerHook                      
 -------------------- 
before_val_iter:
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_val_iter:
(NORMAL      ) IterTimerHook                      
(NORMAL      ) SegVisualizationHook               
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_val_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
after_val:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
after_train:
(VERY_HIGH   ) RuntimeInfoHook                    
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_test:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
before_test_epoch:
(NORMAL      ) IterTimerHook                      
 -------------------- 
before_test_iter:
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_test_iter:
(NORMAL      ) IterTimerHook                      
(NORMAL      ) SegVisualizationHook               
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_test_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_test:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
after_run:
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
10/06 11:03:39 - mmengine - WARNING - The prefix is not set in metric class IoUMetric.
Loads checkpoint by local backend from path: ../checkpoint_files/ade20k/mask2former/best_mIoU_iter_155000.pth
10/06 11:03:40 - mmengine - INFO - Load checkpoint from ../checkpoint_files/ade20k/mask2former/best_mIoU_iter_155000.pth
10/06 11:05:21 - mmengine - INFO - Iter(test) [  50/2000]    eta: 1:05:26  time: 1.9088  data_time: 0.0018  memory: 17181  
10/06 11:06:52 - mmengine - INFO - Iter(test) [ 100/2000]    eta: 1:00:39  time: 1.8783  data_time: 0.0020  memory: 17180  
10/06 11:08:19 - mmengine - INFO - Iter(test) [ 150/2000]    eta: 0:57:11  time: 1.7586  data_time: 0.0018  memory: 17150  
10/06 11:09:47 - mmengine - INFO - Iter(test) [ 200/2000]    eta: 0:54:55  time: 1.7812  data_time: 0.0018  memory: 17194  
10/06 11:11:13 - mmengine - INFO - Iter(test) [ 250/2000]    eta: 0:52:46  time: 1.6602  data_time: 0.0017  memory: 17202  
10/06 11:12:36 - mmengine - INFO - Iter(test) [ 300/2000]    eta: 0:50:35  time: 1.6282  data_time: 0.0018  memory: 17180  
10/06 11:14:02 - mmengine - INFO - Iter(test) [ 350/2000]    eta: 0:48:49  time: 1.6429  data_time: 0.0016  memory: 17178  
10/06 11:15:24 - mmengine - INFO - Iter(test) [ 400/2000]    eta: 0:46:52  time: 1.6277  data_time: 0.0017  memory: 17177  
10/06 11:16:38 - mmengine - INFO - Iter(test) [ 450/2000]    eta: 0:44:36  time: 1.5147  data_time: 0.0017  memory: 17147  
10/06 11:17:58 - mmengine - INFO - Iter(test) [ 500/2000]    eta: 0:42:53  time: 1.6102  data_time: 0.0031  memory: 17149  
10/06 11:19:23 - mmengine - INFO - Iter(test) [ 550/2000]    eta: 0:41:25  time: 1.7418  data_time: 0.0019  memory: 17179  
10/06 11:20:41 - mmengine - INFO - Iter(test) [ 600/2000]    eta: 0:39:41  time: 1.6265  data_time: 0.0018  memory: 3938  
10/06 11:22:03 - mmengine - INFO - Iter(test) [ 650/2000]    eta: 0:38:09  time: 1.6858  data_time: 0.0016  memory: 17181  
10/06 11:23:30 - mmengine - INFO - Iter(test) [ 700/2000]    eta: 0:36:49  time: 1.6865  data_time: 0.0018  memory: 17177  
10/06 11:24:55 - mmengine - INFO - Iter(test) [ 750/2000]    eta: 0:35:23  time: 1.8963  data_time: 0.0017  memory: 17184  
10/06 11:26:10 - mmengine - INFO - Iter(test) [ 800/2000]    eta: 0:33:44  time: 1.5847  data_time: 0.0044  memory: 17151  
10/06 11:27:30 - mmengine - INFO - Iter(test) [ 850/2000]    eta: 0:32:13  time: 1.6004  data_time: 0.0019  memory: 1428  
10/06 11:28:45 - mmengine - INFO - Iter(test) [ 900/2000]    eta: 0:30:38  time: 1.4713  data_time: 0.0029  memory: 17138  
10/06 11:30:09 - mmengine - INFO - Iter(test) [ 950/2000]    eta: 0:29:15  time: 1.7013  data_time: 0.0018  memory: 17133  
10/06 11:31:26 - mmengine - INFO - Iter(test) [1000/2000]    eta: 0:27:45  time: 1.5134  data_time: 0.0017  memory: 17096  
10/06 11:32:48 - mmengine - INFO - Iter(test) [1050/2000]    eta: 0:26:20  time: 1.7126  data_time: 0.0026  memory: 17182  
10/06 11:34:09 - mmengine - INFO - Iter(test) [1100/2000]    eta: 0:24:56  time: 1.5512  data_time: 0.0018  memory: 17175  
10/06 11:35:27 - mmengine - INFO - Iter(test) [1150/2000]    eta: 0:23:29  time: 1.5792  data_time: 0.0017  memory: 17117  
10/06 11:36:48 - mmengine - INFO - Iter(test) [1200/2000]    eta: 0:22:04  time: 1.5381  data_time: 0.0017  memory: 17113  
10/06 11:38:06 - mmengine - INFO - Iter(test) [1250/2000]    eta: 0:20:39  time: 1.6029  data_time: 0.0017  memory: 17172  
10/06 11:39:20 - mmengine - INFO - Iter(test) [1300/2000]    eta: 0:19:11  time: 1.5829  data_time: 0.0018  memory: 1430  
10/06 11:40:39 - mmengine - INFO - Iter(test) [1350/2000]    eta: 0:17:48  time: 1.4598  data_time: 0.0017  memory: 17110  
10/06 11:42:00 - mmengine - INFO - Iter(test) [1400/2000]    eta: 0:16:25  time: 1.6578  data_time: 0.0017  memory: 17154  
10/06 11:43:16 - mmengine - INFO - Iter(test) [1450/2000]    eta: 0:15:00  time: 1.6854  data_time: 0.0017  memory: 17130  
10/06 11:44:33 - mmengine - INFO - Iter(test) [1500/2000]    eta: 0:13:37  time: 1.4665  data_time: 0.0017  memory: 17125  
10/06 11:45:55 - mmengine - INFO - Iter(test) [1550/2000]    eta: 0:12:15  time: 1.5996  data_time: 0.0017  memory: 17154  
10/06 11:47:11 - mmengine - INFO - Iter(test) [1600/2000]    eta: 0:10:52  time: 1.5450  data_time: 0.0019  memory: 1425  
10/06 11:48:29 - mmengine - INFO - Iter(test) [1650/2000]    eta: 0:09:30  time: 1.4491  data_time: 0.0016  memory: 17192  
10/06 11:49:53 - mmengine - INFO - Iter(test) [1700/2000]    eta: 0:08:09  time: 1.5754  data_time: 0.0019  memory: 17151  
10/06 11:51:14 - mmengine - INFO - Iter(test) [1750/2000]    eta: 0:06:47  time: 1.5514  data_time: 0.0016  memory: 17111  
10/06 11:52:30 - mmengine - INFO - Iter(test) [1800/2000]    eta: 0:05:25  time: 1.5936  data_time: 0.0019  memory: 17114  
10/06 11:53:48 - mmengine - INFO - Iter(test) [1850/2000]    eta: 0:04:03  time: 1.5732  data_time: 0.0020  memory: 1317  
10/06 11:55:09 - mmengine - INFO - Iter(test) [1900/2000]    eta: 0:02:42  time: 2.0101  data_time: 0.0302  memory: 17182  
10/06 11:56:30 - mmengine - INFO - Iter(test) [1950/2000]    eta: 0:01:21  time: 1.5233  data_time: 0.0018  memory: 17197  
10/06 11:57:46 - mmengine - INFO - Iter(test) [2000/2000]    eta: 0:00:00  time: 1.4166  data_time: 0.0015  memory: 17131  
10/06 11:57:47 - mmengine - INFO - per class results:
10/06 11:57:47 - mmengine - INFO - 
+---------------------+-------+-------+
|        Class        |  IoU  |  Acc  |
+---------------------+-------+-------+
|         wall        | 65.44 | 79.24 |
|       building      | 75.31 |  88.8 |
|         sky         | 85.92 | 91.94 |
|        floor        | 69.79 | 82.19 |
|         tree        | 65.24 | 79.82 |
|       ceiling       | 71.85 | 83.26 |
|         road        | 76.13 |  85.8 |
|         bed         | 77.05 | 88.25 |
|      windowpane     |  51.1 | 68.86 |
|        grass        | 56.13 | 68.82 |
|       cabinet       | 50.22 | 66.09 |
|       sidewalk      | 53.37 | 72.19 |
|        person       | 64.21 | 76.42 |
|        earth        |  33.5 | 44.27 |
|         door        | 39.04 | 51.23 |
|        table        | 42.51 | 60.48 |
|       mountain      | 54.47 | 74.13 |
|        plant        | 45.42 | 56.47 |
|       curtain       | 58.72 | 76.28 |
|        chair        | 39.49 | 54.38 |
|         car         | 66.24 | 79.12 |
|        water        | 51.81 | 73.69 |
|       painting      | 48.94 | 69.69 |
|         sofa        | 50.94 | 69.44 |
|        shelf        | 33.98 | 53.15 |
|        house        | 38.18 | 46.36 |
|         sea         | 54.31 | 73.11 |
|        mirror       | 54.03 | 71.61 |
|         rug         | 45.09 | 54.38 |
|        field        | 27.73 | 67.65 |
|       armchair      | 27.58 | 45.95 |
|         seat        | 52.88 | 72.11 |
|        fence        | 37.92 | 60.09 |
|         desk        | 31.58 | 52.22 |
|         rock        | 34.16 | 55.36 |
|       wardrobe      | 50.14 | 61.58 |
|         lamp        | 33.97 | 50.93 |
|       bathtub       | 63.22 | 77.13 |
|       railing       | 30.34 |  44.3 |
|       cushion       | 40.54 | 58.22 |
|         base        | 21.26 | 40.78 |
|         box         | 21.76 | 35.35 |
|        column       | 32.33 | 44.24 |
|      signboard      | 26.18 | 38.45 |
|   chest of drawers  | 33.26 | 56.65 |
|       counter       | 30.03 | 37.57 |
|         sand        | 30.67 | 44.16 |
|         sink        | 54.82 | 68.74 |
|      skyscraper     | 43.52 | 53.69 |
|      fireplace      | 52.38 | 78.06 |
|     refrigerator    |  60.2 | 74.48 |
|      grandstand     | 40.07 | 72.41 |
|         path        | 14.91 | 20.48 |
|        stairs       | 22.75 | 27.92 |
|        runway       | 50.12 | 67.15 |
|         case        | 55.97 | 81.18 |
|      pool table     | 79.74 | 87.53 |
|        pillow       | 41.44 | 57.07 |
|     screen door     | 59.95 | 78.79 |
|       stairway      | 28.48 | 42.13 |
|        river        |  13.9 | 18.55 |
|        bridge       | 48.07 | 65.91 |
|       bookcase      | 23.55 | 41.66 |
|        blind        | 32.03 | 37.11 |
|     coffee table    | 46.66 | 69.36 |
|        toilet       | 64.06 | 76.07 |
|        flower       | 24.64 | 40.54 |
|         book        | 33.82 | 56.27 |
|         hill        |  6.12 |  11.8 |
|        bench        | 39.31 | 59.06 |
|      countertop     |  43.9 | 61.91 |
|        stove        | 54.81 | 70.81 |
|         palm        | 37.57 | 54.16 |
|    kitchen island   |  33.5 | 74.73 |
|       computer      | 48.79 | 60.72 |
|     swivel chair    | 27.62 | 45.76 |
|         boat        | 36.69 | 49.08 |
|         bar         | 46.92 | 56.89 |
|    arcade machine   | 29.53 | 35.73 |
|        hovel        | 23.09 | 49.56 |
|         bus         | 78.88 | 88.14 |
|        towel        | 52.22 |  69.5 |
|        light        | 18.52 | 32.43 |
|        truck        | 27.89 | 50.54 |
|        tower        |  21.8 | 39.68 |
|      chandelier     | 43.63 | 60.71 |
|        awning       | 20.76 |  30.8 |
|     streetlight     |  8.54 |  16.7 |
|        booth        | 16.08 | 26.86 |
| television receiver | 51.29 | 67.45 |
|       airplane      | 36.06 | 48.36 |
|      dirt track     |  0.0  |  0.0  |
|       apparel       | 22.48 | 45.57 |
|         pole        | 12.12 | 22.12 |
|         land        |  1.22 |  1.29 |
|      bannister      |  4.71 |  7.62 |
|      escalator      | 19.07 | 21.36 |
|       ottoman       | 39.11 | 57.43 |
|        bottle       | 12.51 | 19.65 |
|        buffet       | 30.35 | 40.43 |
|        poster       | 24.69 | 30.55 |
|        stage        |  8.51 | 22.62 |
|         van         | 36.14 |  55.7 |
|         ship        | 58.82 | 87.63 |
|       fountain      | 34.48 | 40.25 |
|    conveyer belt    | 43.05 | 61.82 |
|        canopy       | 23.33 | 39.55 |
|        washer       |  63.0 | 69.21 |
|      plaything      | 17.64 | 29.36 |
|    swimming pool    | 32.91 | 59.31 |
|        stool        | 22.94 | 34.47 |
|        barrel       | 35.63 | 53.52 |
|        basket       |  25.2 | 40.66 |
|      waterfall      | 52.05 | 90.76 |
|         tent        | 76.93 |  93.4 |
|         bag         | 11.72 | 16.98 |
|       minibike      | 54.63 | 71.31 |
|        cradle       | 59.98 | 79.24 |
|         oven        |  8.54 | 22.71 |
|         ball        | 33.02 | 54.94 |
|         food        | 56.79 | 70.82 |
|         step        |  7.59 |  8.69 |
|         tank        | 44.56 | 50.46 |
|      trade name     | 20.37 | 29.27 |
|      microwave      |  32.4 | 37.84 |
|         pot         | 29.71 | 40.85 |
|        animal       | 56.77 | 66.69 |
|       bicycle       | 39.56 | 57.82 |
|         lake        |  0.0  |  0.0  |
|      dishwasher     | 50.22 | 66.33 |
|        screen       | 58.14 | 81.72 |
|       blanket       |  9.19 | 11.32 |
|      sculpture      | 39.87 | 58.47 |
|         hood        |  44.1 | 52.58 |
|        sconce       | 23.34 | 32.71 |
|         vase        | 19.43 | 40.47 |
|    traffic light    | 16.77 | 33.24 |
|         tray        |  3.23 |  5.03 |
|        ashcan       | 32.13 |  52.5 |
|         fan         | 28.58 | 48.43 |
|         pier        | 27.31 | 41.33 |
|      crt screen     |  1.96 |  6.11 |
|        plate        | 34.99 |  53.3 |
|       monitor       |  6.01 |  7.8  |
|    bulletin board   | 32.67 | 45.58 |
|        shower       |  5.36 |  8.33 |
|       radiator      | 39.33 | 51.83 |
|        glass        | 10.04 |  13.0 |
|        clock        | 14.67 | 24.42 |
|         flag        |  28.4 | 37.33 |
+---------------------+-------+-------+
10/06 11:57:47 - mmengine - INFO - Iter(test) [2000/2000]    aAcc: 75.1700  mIoU: 37.4500  mAcc: 51.7500  data_time: 0.0022  time: 1.6228
Finished processing corruption type: elastic_transform
Processing corruption type: pixelate
10/06 11:58:10 - mmengine - INFO - 
------------------------------------------------------------
System environment:
    sys.platform: linux
    Python: 3.10.13 | packaged by conda-forge | (main, Dec 23 2023, 15:36:39) [GCC 12.3.0]
    CUDA available: True
    MUSA available: False
    numpy_random_seed: 792642736
    GPU 0: Tesla V100-SXM2-32GB
    CUDA_HOME: /opt/bwhpc/common/devel/cuda/11.7
    NVCC: Cuda compilation tools, release 11.7, V11.7.99
    GCC: gcc (GCC) 8.5.0 20210514 (Red Hat 8.5.0-18)
    PyTorch: 1.13.1
    PyTorch compiling details: PyTorch built with:
  - GCC 9.3
  - C++ Version: 201402
  - Intel(R) oneAPI Math Kernel Library Version 2023.1-Product Build 20230303 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v2.6.0 (Git Hash 52b5f107dd9cf10910aaa19cb47f3abf9b349815)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - LAPACK is enabled (usually provided by MKL)
  - NNPACK is enabled
  - CPU capability usage: AVX2
  - CUDA Runtime 11.7
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_61,code=sm_61;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86;-gencode;arch=compute_37,code=compute_37
  - CuDNN 8.5
  - Magma 2.6.1
  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.7, CUDNN_VERSION=8.5.0, CXX_COMPILER=/opt/rh/devtoolset-9/root/usr/bin/c++, CXX_FLAGS= -fabi-version=11 -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -DEDGE_PROFILER_USE_KINETO -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Werror=non-virtual-dtor -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wunused-local-typedefs -Wno-unused-parameter -Wno-unused-function -Wno-unused-result -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Werror=cast-function-type -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.13.1, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, USE_ROCM=OFF, 

    TorchVision: 0.14.1
    OpenCV: 3.4.18
    MMEngine: 0.10.4

Runtime environment:
    cudnn_benchmark: True
    mp_cfg: {'mp_start_method': 'fork', 'opencv_num_threads': 0}
    dist_cfg: {'backend': 'nccl'}
    seed: 792642736
    Distributed launcher: none
    Distributed training: False
    GPU number: 1
------------------------------------------------------------

10/06 11:58:10 - mmengine - INFO - Config:
auto_scale_lr = dict(base_batch_size=16, enable=False)
backbone_embed_multi = dict(decay_mult=0.0, lr_mult=0.1)
backbone_norm_multi = dict(decay_mult=0.0, lr_mult=0.1)
crop_size = (
    512,
    512,
)
custom_keys = dict({
    'absolute_pos_embed':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone':
    dict(decay_mult=1.0, lr_mult=0.1),
    'backbone.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.patch_embed.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.0.blocks.0.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.0.blocks.1.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.0.downsample.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.1.blocks.0.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.1.blocks.1.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.1.downsample.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.0.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.1.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.10.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.11.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.12.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.13.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.14.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.15.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.16.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.17.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.2.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.3.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.4.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.5.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.6.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.7.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.8.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.9.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.downsample.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.3.blocks.0.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.3.blocks.1.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'level_embed':
    dict(decay_mult=0.0, lr_mult=1.0),
    'query_embed':
    dict(decay_mult=0.0, lr_mult=1.0),
    'query_feat':
    dict(decay_mult=0.0, lr_mult=1.0),
    'relative_position_bias_table':
    dict(decay_mult=0.0, lr_mult=0.1)
})
data_root = 'data/ade/ADEChallengeData2016'
dataset_type = 'ADE20KDataset'
default_hooks = dict(
    checkpoint=dict(
        by_epoch=False, interval=5000, save_best='mIoU',
        type='CheckpointHook'),
    logger=dict(interval=50, log_metric_by_epoch=False, type='LoggerHook'),
    param_scheduler=dict(type='ParamSchedulerHook'),
    sampler_seed=dict(type='DistSamplerSeedHook'),
    timer=dict(type='IterTimerHook'),
    visualization=dict(type='SegVisualizationHook'))
default_scope = 'mmseg'
depths = [
    2,
    2,
    18,
    2,
]
embed_multi = dict(decay_mult=0.0, lr_mult=1.0)
env_cfg = dict(
    cudnn_benchmark=True,
    dist_cfg=dict(backend='nccl'),
    mp_cfg=dict(mp_start_method='fork', opencv_num_threads=0))
img_ratios = [
    0.5,
    0.75,
    1.0,
    1.25,
    1.5,
    1.75,
]
launcher = 'none'
load_from = '../checkpoint_files/ade20k/mask2former/best_mIoU_iter_155000.pth'
log_level = 'INFO'
log_processor = dict(by_epoch=False)
model = dict(
    backbone=dict(
        attn_drop_rate=0.0,
        depths=[
            2,
            2,
            18,
            2,
        ],
        drop_path_rate=0.3,
        drop_rate=0.0,
        embed_dims=128,
        frozen_stages=-1,
        init_cfg=dict(
            checkpoint=
            'https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/swin/swin_base_patch4_window12_384_20220317-55b0104a.pth',
            type='Pretrained'),
        mlp_ratio=4,
        num_heads=[
            4,
            8,
            16,
            32,
        ],
        out_indices=(
            0,
            1,
            2,
            3,
        ),
        patch_norm=True,
        pretrain_img_size=384,
        qk_scale=None,
        qkv_bias=True,
        type='SwinTransformer',
        window_size=12,
        with_cp=False),
    data_preprocessor=dict(
        bgr_to_rgb=True,
        corruption='pixelate',
        mean=[
            123.675,
            116.28,
            103.53,
        ],
        pad_val=0,
        seg_pad_val=255,
        size=(
            512,
            512,
        ),
        std=[
            58.395,
            57.12,
            57.375,
        ],
        type='SegDataPreProcessor'),
    decode_head=dict(
        align_corners=False,
        enforce_decoder_input_project=False,
        feat_channels=256,
        in_channels=[
            128,
            256,
            512,
            1024,
        ],
        loss_cls=dict(
            class_weight=[
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                0.1,
            ],
            loss_weight=2.0,
            reduction='mean',
            type='mmdet.CrossEntropyLoss',
            use_sigmoid=False),
        loss_dice=dict(
            activate=True,
            eps=1.0,
            loss_weight=5.0,
            naive_dice=True,
            reduction='mean',
            type='mmdet.DiceLoss',
            use_sigmoid=True),
        loss_mask=dict(
            loss_weight=5.0,
            reduction='mean',
            type='mmdet.CrossEntropyLoss',
            use_sigmoid=True),
        num_classes=150,
        num_queries=100,
        num_transformer_feat_level=3,
        out_channels=256,
        pixel_decoder=dict(
            act_cfg=dict(type='ReLU'),
            encoder=dict(
                init_cfg=None,
                layer_cfg=dict(
                    ffn_cfg=dict(
                        act_cfg=dict(inplace=True, type='ReLU'),
                        embed_dims=256,
                        feedforward_channels=1024,
                        ffn_drop=0.0,
                        num_fcs=2),
                    self_attn_cfg=dict(
                        batch_first=True,
                        dropout=0.0,
                        embed_dims=256,
                        im2col_step=64,
                        init_cfg=None,
                        norm_cfg=None,
                        num_heads=8,
                        num_levels=3,
                        num_points=4)),
                num_layers=6),
            init_cfg=None,
            norm_cfg=dict(num_groups=32, type='GN'),
            num_outs=3,
            positional_encoding=dict(normalize=True, num_feats=128),
            type='mmdet.MSDeformAttnPixelDecoder'),
        positional_encoding=dict(normalize=True, num_feats=128),
        strides=[
            4,
            8,
            16,
            32,
        ],
        train_cfg=dict(
            assigner=dict(
                match_costs=[
                    dict(type='mmdet.ClassificationCost', weight=2.0),
                    dict(
                        type='mmdet.CrossEntropyLossCost',
                        use_sigmoid=True,
                        weight=5.0),
                    dict(
                        eps=1.0,
                        pred_act=True,
                        type='mmdet.DiceCost',
                        weight=5.0),
                ],
                type='mmdet.HungarianAssigner'),
            importance_sample_ratio=0.75,
            num_points=12544,
            oversample_ratio=3.0,
            sampler=dict(type='mmdet.MaskPseudoSampler')),
        transformer_decoder=dict(
            init_cfg=None,
            layer_cfg=dict(
                cross_attn_cfg=dict(
                    attn_drop=0.0,
                    batch_first=True,
                    dropout_layer=None,
                    embed_dims=256,
                    num_heads=8,
                    proj_drop=0.0),
                ffn_cfg=dict(
                    act_cfg=dict(inplace=True, type='ReLU'),
                    add_identity=True,
                    dropout_layer=None,
                    embed_dims=256,
                    feedforward_channels=2048,
                    ffn_drop=0.0,
                    num_fcs=2),
                self_attn_cfg=dict(
                    attn_drop=0.0,
                    batch_first=True,
                    dropout_layer=None,
                    embed_dims=256,
                    num_heads=8,
                    proj_drop=0.0)),
            num_layers=9,
            return_intermediate=True),
        type='Mask2FormerHead'),
    test_cfg=dict(mode='whole'),
    train_cfg=dict(),
    type='EncoderDecoder')
num_classes = 150
optim_wrapper = dict(
    clip_grad=dict(max_norm=0.01, norm_type=2),
    optimizer=dict(
        betas=(
            0.9,
            0.999,
        ),
        eps=1e-08,
        lr=0.0001,
        type='AdamW',
        weight_decay=0.05),
    paramwise_cfg=dict(
        custom_keys=dict({
            'absolute_pos_embed':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone':
            dict(decay_mult=1.0, lr_mult=0.1),
            'backbone.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.patch_embed.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.0.blocks.0.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.0.blocks.1.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.0.downsample.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.1.blocks.0.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.1.blocks.1.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.1.downsample.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.0.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.1.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.10.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.11.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.12.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.13.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.14.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.15.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.16.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.17.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.2.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.3.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.4.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.5.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.6.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.7.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.8.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.9.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.downsample.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.3.blocks.0.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.3.blocks.1.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'level_embed':
            dict(decay_mult=0.0, lr_mult=1.0),
            'query_embed':
            dict(decay_mult=0.0, lr_mult=1.0),
            'query_feat':
            dict(decay_mult=0.0, lr_mult=1.0),
            'relative_position_bias_table':
            dict(decay_mult=0.0, lr_mult=0.1)
        }),
        norm_decay_mult=0.0),
    type='OptimWrapper')
optimizer = dict(
    betas=(
        0.9,
        0.999,
    ),
    eps=1e-08,
    lr=0.0001,
    type='AdamW',
    weight_decay=0.05)
param_scheduler = [
    dict(
        begin=0,
        by_epoch=False,
        end=160000,
        eta_min=0,
        power=0.9,
        type='PolyLR'),
]
pretrained = 'https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/swin/swin_base_patch4_window12_384_20220317-55b0104a.pth'
resume = False
test_cfg = dict(type='TestLoop')
test_dataloader = dict(
    batch_size=1,
    dataset=dict(
        data_prefix=dict(
            img_path='images/validation',
            seg_map_path='annotations/validation'),
        data_root='data/ade/ADEChallengeData2016',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(keep_ratio=True, scale=(
                2560,
                640,
            ), type='Resize'),
            dict(reduce_zero_label=True, type='LoadAnnotations'),
            dict(type='PackSegInputs'),
        ],
        type='ADE20KDataset'),
    num_workers=4,
    persistent_workers=True,
    sampler=dict(shuffle=False, type='DefaultSampler'))
test_evaluator = dict(
    iou_metrics=[
        'mIoU',
    ], type='IoUMetric')
test_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(keep_ratio=True, scale=(
        2560,
        640,
    ), type='Resize'),
    dict(reduce_zero_label=True, type='LoadAnnotations'),
    dict(type='PackSegInputs'),
]
train_cfg = dict(
    max_iters=160000, type='IterBasedTrainLoop', val_interval=5000)
train_dataloader = dict(
    batch_size=2,
    dataset=dict(
        data_prefix=dict(
            img_path='images/training', seg_map_path='annotations/training'),
        data_root='data/ade/ADEChallengeData2016',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(reduce_zero_label=True, type='LoadAnnotations'),
            dict(
                max_size=2560,
                resize_type='ResizeShortestEdge',
                scales=[
                    320,
                    384,
                    448,
                    512,
                    576,
                    640,
                    704,
                    768,
                    832,
                    896,
                    960,
                    1024,
                    1088,
                    1152,
                    1216,
                    1280,
                ],
                type='RandomChoiceResize'),
            dict(
                cat_max_ratio=0.75, crop_size=(
                    512,
                    512,
                ), type='RandomCrop'),
            dict(prob=0.5, type='RandomFlip'),
            dict(type='PhotoMetricDistortion'),
            dict(type='PackSegInputs'),
        ],
        type='ADE20KDataset'),
    num_workers=4,
    persistent_workers=True,
    sampler=dict(shuffle=True, type='InfiniteSampler'))
train_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(reduce_zero_label=True, type='LoadAnnotations'),
    dict(
        max_size=2560,
        resize_type='ResizeShortestEdge',
        scales=[
            320,
            384,
            448,
            512,
            576,
            640,
            704,
            768,
            832,
            896,
            960,
            1024,
            1088,
            1152,
            1216,
            1280,
        ],
        type='RandomChoiceResize'),
    dict(cat_max_ratio=0.75, crop_size=(
        512,
        512,
    ), type='RandomCrop'),
    dict(prob=0.5, type='RandomFlip'),
    dict(type='PhotoMetricDistortion'),
    dict(type='PackSegInputs'),
]
tta_model = dict(type='SegTTAModel')
tta_pipeline = [
    dict(backend_args=None, type='LoadImageFromFile'),
    dict(
        transforms=[
            [
                dict(keep_ratio=True, scale_factor=0.5, type='Resize'),
                dict(keep_ratio=True, scale_factor=0.75, type='Resize'),
                dict(keep_ratio=True, scale_factor=1.0, type='Resize'),
                dict(keep_ratio=True, scale_factor=1.25, type='Resize'),
                dict(keep_ratio=True, scale_factor=1.5, type='Resize'),
                dict(keep_ratio=True, scale_factor=1.75, type='Resize'),
            ],
            [
                dict(direction='horizontal', prob=0.0, type='RandomFlip'),
                dict(direction='horizontal', prob=1.0, type='RandomFlip'),
            ],
            [
                dict(type='LoadAnnotations'),
            ],
            [
                dict(type='PackSegInputs'),
            ],
        ],
        type='TestTimeAug'),
]
val_cfg = dict(type='ValLoop')
val_dataloader = dict(
    batch_size=1,
    dataset=dict(
        data_prefix=dict(
            img_path='images/validation',
            seg_map_path='annotations/validation'),
        data_root='data/ade/ADEChallengeData2016',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(keep_ratio=True, scale=(
                2560,
                640,
            ), type='Resize'),
            dict(reduce_zero_label=True, type='LoadAnnotations'),
            dict(type='PackSegInputs'),
        ],
        type='ADE20KDataset'),
    num_workers=4,
    persistent_workers=True,
    sampler=dict(shuffle=False, type='DefaultSampler'))
val_evaluator = dict(
    iou_metrics=[
        'mIoU',
    ], type='IoUMetric')
vis_backends = [
    dict(type='LocalVisBackend'),
]
visualizer = dict(
    name='visualizer',
    type='SegLocalVisualizer',
    vis_backends=[
        dict(type='LocalVisBackend'),
    ])
work_dir = '../corruptions/work_dirs/ade20k/mask2former/mask2former_swin-b-in1k-384x384-pre_8xb2-160k_ade20k-512x512/pixelate'

/pfs/work7/workspace/scratch/ma_mkacar-team_project_fss2024/benchmarking_robustness/semantic_segmentation/mmsegmentation/mmseg/ops_dcnv3/modules/dcnv3.py:20: UserWarning: Now, we support DCNv4 in InternImage.
  warnings.warn('Now, we support DCNv4 in InternImage.')
10/06 11:58:28 - mmengine - INFO - Distributed training is not used, all SyncBatchNorm (SyncBN) layers in the model will be automatically reverted to BatchNormXd layers if they are used.
10/06 11:58:28 - mmengine - INFO - Hooks will be executed in the following order:
before_run:
(VERY_HIGH   ) RuntimeInfoHook                    
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
before_train:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_train_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(NORMAL      ) DistSamplerSeedHook                
 -------------------- 
before_train_iter:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_train_iter:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(NORMAL      ) SegVisualizationHook               
(BELOW_NORMAL) LoggerHook                         
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
after_train_epoch:
(NORMAL      ) IterTimerHook                      
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_val:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
before_val_epoch:
(NORMAL      ) IterTimerHook                      
 -------------------- 
before_val_iter:
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_val_iter:
(NORMAL      ) IterTimerHook                      
(NORMAL      ) SegVisualizationHook               
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_val_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
after_val:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
after_train:
(VERY_HIGH   ) RuntimeInfoHook                    
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_test:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
before_test_epoch:
(NORMAL      ) IterTimerHook                      
 -------------------- 
before_test_iter:
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_test_iter:
(NORMAL      ) IterTimerHook                      
(NORMAL      ) SegVisualizationHook               
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_test_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_test:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
after_run:
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
10/06 11:58:29 - mmengine - WARNING - The prefix is not set in metric class IoUMetric.
Loads checkpoint by local backend from path: ../checkpoint_files/ade20k/mask2former/best_mIoU_iter_155000.pth
10/06 11:58:31 - mmengine - INFO - Load checkpoint from ../checkpoint_files/ade20k/mask2former/best_mIoU_iter_155000.pth
10/06 11:59:07 - mmengine - INFO - Iter(test) [  50/2000]    eta: 0:23:12  time: 0.3780  data_time: 0.0018  memory: 17181  
10/06 11:59:25 - mmengine - INFO - Iter(test) [ 100/2000]    eta: 0:17:05  time: 0.3714  data_time: 0.0019  memory: 17180  
10/06 11:59:39 - mmengine - INFO - Iter(test) [ 150/2000]    eta: 0:13:56  time: 0.2788  data_time: 0.0018  memory: 17150  
10/06 11:59:52 - mmengine - INFO - Iter(test) [ 200/2000]    eta: 0:12:11  time: 0.3257  data_time: 0.0018  memory: 17194  
10/06 12:00:08 - mmengine - INFO - Iter(test) [ 250/2000]    eta: 0:11:20  time: 0.2174  data_time: 0.0017  memory: 17202  
10/06 12:00:22 - mmengine - INFO - Iter(test) [ 300/2000]    eta: 0:10:26  time: 0.1272  data_time: 0.0018  memory: 17180  
10/06 12:00:35 - mmengine - INFO - Iter(test) [ 350/2000]    eta: 0:09:46  time: 0.2620  data_time: 0.0017  memory: 17178  
10/06 12:00:45 - mmengine - INFO - Iter(test) [ 400/2000]    eta: 0:08:55  time: 0.1383  data_time: 0.0016  memory: 17177  
10/06 12:00:53 - mmengine - INFO - Iter(test) [ 450/2000]    eta: 0:08:07  time: 0.1753  data_time: 0.0017  memory: 17147  
10/06 12:01:01 - mmengine - INFO - Iter(test) [ 500/2000]    eta: 0:07:30  time: 0.2050  data_time: 0.0017  memory: 17149  
10/06 12:01:10 - mmengine - INFO - Iter(test) [ 550/2000]    eta: 0:06:58  time: 0.2518  data_time: 0.0018  memory: 17179  
10/06 12:01:16 - mmengine - INFO - Iter(test) [ 600/2000]    eta: 0:06:25  time: 0.1261  data_time: 0.0018  memory: 3938  
10/06 12:01:26 - mmengine - INFO - Iter(test) [ 650/2000]    eta: 0:06:04  time: 0.2568  data_time: 0.0016  memory: 17181  
10/06 12:01:38 - mmengine - INFO - Iter(test) [ 700/2000]    eta: 0:05:47  time: 0.1886  data_time: 0.0019  memory: 17177  
10/06 12:01:50 - mmengine - INFO - Iter(test) [ 750/2000]    eta: 0:05:30  time: 0.5500  data_time: 0.0017  memory: 17184  
10/06 12:01:57 - mmengine - INFO - Iter(test) [ 800/2000]    eta: 0:05:08  time: 0.1194  data_time: 0.0017  memory: 17151  
10/06 12:02:03 - mmengine - INFO - Iter(test) [ 850/2000]    eta: 0:04:47  time: 0.1247  data_time: 0.0019  memory: 1428  
10/06 12:02:11 - mmengine - INFO - Iter(test) [ 900/2000]    eta: 0:04:29  time: 0.1729  data_time: 0.0017  memory: 17138  
10/06 12:02:22 - mmengine - INFO - Iter(test) [ 950/2000]    eta: 0:04:14  time: 0.2777  data_time: 0.0018  memory: 17133  
10/06 12:02:28 - mmengine - INFO - Iter(test) [1000/2000]    eta: 0:03:57  time: 0.1182  data_time: 0.0017  memory: 17096  
10/06 12:02:36 - mmengine - INFO - Iter(test) [1050/2000]    eta: 0:03:41  time: 0.2025  data_time: 0.0018  memory: 17182  
10/06 12:02:45 - mmengine - INFO - Iter(test) [1100/2000]    eta: 0:03:27  time: 0.1206  data_time: 0.0018  memory: 17175  
10/06 12:02:52 - mmengine - INFO - Iter(test) [1150/2000]    eta: 0:03:12  time: 0.1228  data_time: 0.0017  memory: 17117  
10/06 12:02:58 - mmengine - INFO - Iter(test) [1200/2000]    eta: 0:02:58  time: 0.1176  data_time: 0.0017  memory: 17113  
10/06 12:03:07 - mmengine - INFO - Iter(test) [1250/2000]    eta: 0:02:45  time: 0.1987  data_time: 0.0017  memory: 17172  
10/06 12:03:13 - mmengine - INFO - Iter(test) [1300/2000]    eta: 0:02:31  time: 0.1229  data_time: 0.0017  memory: 1430  
10/06 12:03:21 - mmengine - INFO - Iter(test) [1350/2000]    eta: 0:02:19  time: 0.1145  data_time: 0.0017  memory: 17110  
10/06 12:03:30 - mmengine - INFO - Iter(test) [1400/2000]    eta: 0:02:08  time: 0.1408  data_time: 0.0017  memory: 17154  
10/06 12:03:37 - mmengine - INFO - Iter(test) [1450/2000]    eta: 0:01:55  time: 0.1855  data_time: 0.0017  memory: 17130  
10/06 12:03:43 - mmengine - INFO - Iter(test) [1500/2000]    eta: 0:01:44  time: 0.1177  data_time: 0.0017  memory: 17125  
10/06 12:03:50 - mmengine - INFO - Iter(test) [1550/2000]    eta: 0:01:32  time: 0.1245  data_time: 0.0018  memory: 17154  
10/06 12:03:56 - mmengine - INFO - Iter(test) [1600/2000]    eta: 0:01:21  time: 0.1194  data_time: 0.0019  memory: 1425  
10/06 12:04:04 - mmengine - INFO - Iter(test) [1650/2000]    eta: 0:01:10  time: 0.1143  data_time: 0.0016  memory: 17192  
10/06 12:04:15 - mmengine - INFO - Iter(test) [1700/2000]    eta: 0:01:00  time: 0.1187  data_time: 0.0022  memory: 17151  
10/06 12:04:22 - mmengine - INFO - Iter(test) [1750/2000]    eta: 0:00:50  time: 0.1184  data_time: 0.0017  memory: 17111  
10/06 12:04:29 - mmengine - INFO - Iter(test) [1800/2000]    eta: 0:00:39  time: 0.1256  data_time: 0.0020  memory: 17114  
10/06 12:04:35 - mmengine - INFO - Iter(test) [1850/2000]    eta: 0:00:29  time: 0.1241  data_time: 0.0019  memory: 1317  
10/06 12:04:42 - mmengine - INFO - Iter(test) [1900/2000]    eta: 0:00:19  time: 0.1844  data_time: 0.0017  memory: 17182  
10/06 12:04:49 - mmengine - INFO - Iter(test) [1950/2000]    eta: 0:00:09  time: 0.1197  data_time: 0.0017  memory: 17197  
10/06 12:04:57 - mmengine - INFO - Iter(test) [2000/2000]    eta: 0:00:00  time: 0.1108  data_time: 0.0015  memory: 17131  
10/06 12:04:57 - mmengine - INFO - per class results:
10/06 12:04:57 - mmengine - INFO - 
+---------------------+-------+-------+
|        Class        |  IoU  |  Acc  |
+---------------------+-------+-------+
|         wall        |  75.4 | 87.86 |
|       building      |  79.5 | 93.96 |
|         sky         | 94.24 | 96.56 |
|        floor        | 80.26 | 90.54 |
|         tree        | 73.51 | 85.52 |
|       ceiling       | 81.98 |  88.3 |
|         road        | 82.05 | 89.74 |
|         bed         |  85.8 | 93.35 |
|      windowpane     | 59.39 | 77.33 |
|        grass        | 61.24 | 73.36 |
|       cabinet       | 58.24 | 74.09 |
|       sidewalk      | 61.47 | 80.04 |
|        person       | 79.31 | 84.92 |
|        earth        | 37.16 | 48.56 |
|         door        | 40.27 | 53.01 |
|        table        | 53.45 |  69.7 |
|       mountain      | 57.49 | 72.35 |
|        plant        | 49.57 | 57.67 |
|       curtain       | 73.64 |  82.3 |
|        chair        | 52.01 | 65.79 |
|         car         | 80.51 | 86.56 |
|        water        | 51.78 | 71.55 |
|       painting      | 67.46 | 87.58 |
|         sofa        | 61.89 | 80.94 |
|        shelf        | 39.12 | 58.21 |
|        house        | 31.76 | 37.53 |
|         sea         | 52.85 | 67.98 |
|        mirror       | 63.39 | 76.42 |
|         rug         | 53.62 | 58.26 |
|        field        | 28.53 | 69.27 |
|       armchair      | 28.27 | 41.54 |
|         seat        | 51.64 | 68.91 |
|        fence        | 44.25 | 64.57 |
|         desk        | 35.53 | 65.02 |
|         rock        |  43.7 | 62.88 |
|       wardrobe      | 50.09 | 58.79 |
|         lamp        | 61.43 | 71.34 |
|       bathtub       |  70.9 |  81.1 |
|       railing       | 35.43 | 47.82 |
|       cushion       | 53.17 | 65.55 |
|         base        |  21.4 | 42.29 |
|         box         | 23.28 |  36.2 |
|        column       | 45.34 | 53.74 |
|      signboard      | 37.96 | 47.98 |
|   chest of drawers  | 33.94 | 58.23 |
|       counter       | 33.63 |  42.0 |
|         sand        | 30.14 |  42.2 |
|         sink        | 66.73 | 73.68 |
|      skyscraper     | 44.59 | 48.36 |
|      fireplace      | 62.41 | 81.93 |
|     refrigerator    | 72.69 | 83.94 |
|      grandstand     | 35.08 | 74.24 |
|         path        | 15.63 | 21.12 |
|        stairs       | 22.36 | 26.69 |
|        runway       | 53.17 |  79.7 |
|         case        | 62.78 | 84.06 |
|      pool table     | 91.15 | 93.04 |
|        pillow       | 53.26 | 66.83 |
|     screen door     | 68.17 | 84.31 |
|       stairway      | 34.48 | 49.28 |
|        river        | 12.53 | 21.14 |
|        bridge       | 27.69 | 34.66 |
|       bookcase      | 26.21 | 52.85 |
|        blind        | 39.17 | 44.13 |
|     coffee table    | 56.23 | 75.07 |
|        toilet       | 85.78 | 88.99 |
|        flower       | 31.68 | 45.52 |
|         book        | 44.68 | 67.78 |
|         hill        |  5.2  | 11.39 |
|        bench        | 52.71 | 74.59 |
|      countertop     |  51.3 | 60.63 |
|        stove        | 65.41 | 73.12 |
|         palm        | 53.26 |  67.9 |
|    kitchen island   |  41.4 | 86.24 |
|       computer      | 55.79 | 62.72 |
|     swivel chair    | 36.42 | 53.28 |
|         boat        |  45.1 | 48.47 |
|         bar         | 45.92 | 57.88 |
|    arcade machine   | 29.97 | 31.48 |
|        hovel        |  7.77 |  11.3 |
|         bus         | 86.89 | 95.78 |
|        towel        | 71.36 | 79.47 |
|        light        |  54.4 | 69.04 |
|        truck        | 28.37 | 44.57 |
|        tower        |  4.58 |  7.29 |
|      chandelier     | 62.31 | 75.46 |
|        awning       | 31.15 | 37.86 |
|     streetlight     |  27.9 | 41.22 |
|        booth        | 27.13 |  29.1 |
| television receiver | 65.17 | 72.98 |
|       airplane      | 56.96 | 59.72 |
|      dirt track     |  0.0  |  0.0  |
|       apparel       | 30.83 | 44.88 |
|         pole        | 26.25 | 43.49 |
|         land        |  13.6 | 15.79 |
|      bannister      |  7.11 | 10.29 |
|      escalator      | 19.59 | 20.16 |
|       ottoman       | 32.79 | 38.76 |
|        bottle       | 16.65 | 19.89 |
|        buffet       | 40.42 | 45.99 |
|        poster       | 16.46 | 22.49 |
|        stage        |  7.12 | 15.92 |
|         van         | 37.63 | 78.43 |
|         ship        |  9.56 | 14.02 |
|       fountain      | 19.19 | 22.48 |
|    conveyer belt    | 42.93 | 68.25 |
|        canopy       | 25.34 | 35.41 |
|        washer       | 63.23 | 63.42 |
|      plaything      | 16.53 | 20.48 |
|    swimming pool    | 32.86 | 62.32 |
|        stool        | 43.02 | 54.69 |
|        barrel       | 63.25 | 73.13 |
|        basket       | 27.81 | 35.67 |
|      waterfall      | 79.48 | 89.45 |
|         tent        |  73.6 | 97.81 |
|         bag         |  9.99 | 12.26 |
|       minibike      | 54.46 | 59.01 |
|        cradle       | 73.94 |  92.8 |
|         oven        | 18.83 | 50.55 |
|         ball        |  37.0 | 57.56 |
|         food        | 56.91 | 63.36 |
|         step        |  9.3  | 11.21 |
|         tank        | 36.18 | 37.67 |
|      trade name     | 30.65 | 39.15 |
|      microwave      | 37.81 |  41.8 |
|         pot         | 47.27 | 56.68 |
|        animal       | 62.46 | 64.66 |
|       bicycle       |  55.1 |  67.5 |
|         lake        |  0.0  |  0.0  |
|      dishwasher     | 59.74 | 74.98 |
|        screen       | 57.16 | 91.02 |
|       blanket       | 10.63 |  13.2 |
|      sculpture      | 49.39 | 58.15 |
|         hood        | 42.55 | 46.43 |
|        sconce       | 33.01 | 41.36 |
|         vase        | 37.21 | 50.18 |
|    traffic light    | 31.05 | 47.69 |
|         tray        |  7.13 |  9.13 |
|        ashcan       | 32.24 | 54.02 |
|         fan         | 62.92 | 77.57 |
|         pier        | 18.62 | 25.81 |
|      crt screen     |  4.06 | 14.71 |
|        plate        | 54.51 | 67.39 |
|       monitor       |  1.81 |  2.03 |
|    bulletin board   |  39.8 | 46.55 |
|        shower       | 11.44 | 13.72 |
|       radiator      | 58.39 | 63.33 |
|        glass        | 14.84 | 16.89 |
|        clock        | 28.65 | 36.51 |
|         flag        | 31.98 | 37.16 |
+---------------------+-------+-------+
10/06 12:04:57 - mmengine - INFO - Iter(test) [2000/2000]    aAcc: 80.9100  mIoU: 43.6100  mAcc: 55.2900  data_time: 0.0021  time: 0.1929
Finished processing corruption type: pixelate
Processing corruption type: jpeg_compression
10/06 12:05:00 - mmengine - INFO - 
------------------------------------------------------------
System environment:
    sys.platform: linux
    Python: 3.10.13 | packaged by conda-forge | (main, Dec 23 2023, 15:36:39) [GCC 12.3.0]
    CUDA available: True
    MUSA available: False
    numpy_random_seed: 1322817603
    GPU 0: Tesla V100-SXM2-32GB
    CUDA_HOME: /opt/bwhpc/common/devel/cuda/11.7
    NVCC: Cuda compilation tools, release 11.7, V11.7.99
    GCC: gcc (GCC) 8.5.0 20210514 (Red Hat 8.5.0-18)
    PyTorch: 1.13.1
    PyTorch compiling details: PyTorch built with:
  - GCC 9.3
  - C++ Version: 201402
  - Intel(R) oneAPI Math Kernel Library Version 2023.1-Product Build 20230303 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v2.6.0 (Git Hash 52b5f107dd9cf10910aaa19cb47f3abf9b349815)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - LAPACK is enabled (usually provided by MKL)
  - NNPACK is enabled
  - CPU capability usage: AVX2
  - CUDA Runtime 11.7
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_61,code=sm_61;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86;-gencode;arch=compute_37,code=compute_37
  - CuDNN 8.5
  - Magma 2.6.1
  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.7, CUDNN_VERSION=8.5.0, CXX_COMPILER=/opt/rh/devtoolset-9/root/usr/bin/c++, CXX_FLAGS= -fabi-version=11 -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -DEDGE_PROFILER_USE_KINETO -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Werror=non-virtual-dtor -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wunused-local-typedefs -Wno-unused-parameter -Wno-unused-function -Wno-unused-result -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Werror=cast-function-type -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.13.1, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, USE_ROCM=OFF, 

    TorchVision: 0.14.1
    OpenCV: 3.4.18
    MMEngine: 0.10.4

Runtime environment:
    cudnn_benchmark: True
    mp_cfg: {'mp_start_method': 'fork', 'opencv_num_threads': 0}
    dist_cfg: {'backend': 'nccl'}
    seed: 1322817603
    Distributed launcher: none
    Distributed training: False
    GPU number: 1
------------------------------------------------------------

10/06 12:05:01 - mmengine - INFO - Config:
auto_scale_lr = dict(base_batch_size=16, enable=False)
backbone_embed_multi = dict(decay_mult=0.0, lr_mult=0.1)
backbone_norm_multi = dict(decay_mult=0.0, lr_mult=0.1)
crop_size = (
    512,
    512,
)
custom_keys = dict({
    'absolute_pos_embed':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone':
    dict(decay_mult=1.0, lr_mult=0.1),
    'backbone.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.patch_embed.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.0.blocks.0.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.0.blocks.1.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.0.downsample.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.1.blocks.0.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.1.blocks.1.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.1.downsample.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.0.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.1.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.10.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.11.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.12.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.13.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.14.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.15.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.16.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.17.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.2.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.3.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.4.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.5.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.6.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.7.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.8.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.9.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.downsample.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.3.blocks.0.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.3.blocks.1.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'level_embed':
    dict(decay_mult=0.0, lr_mult=1.0),
    'query_embed':
    dict(decay_mult=0.0, lr_mult=1.0),
    'query_feat':
    dict(decay_mult=0.0, lr_mult=1.0),
    'relative_position_bias_table':
    dict(decay_mult=0.0, lr_mult=0.1)
})
data_root = 'data/ade/ADEChallengeData2016'
dataset_type = 'ADE20KDataset'
default_hooks = dict(
    checkpoint=dict(
        by_epoch=False, interval=5000, save_best='mIoU',
        type='CheckpointHook'),
    logger=dict(interval=50, log_metric_by_epoch=False, type='LoggerHook'),
    param_scheduler=dict(type='ParamSchedulerHook'),
    sampler_seed=dict(type='DistSamplerSeedHook'),
    timer=dict(type='IterTimerHook'),
    visualization=dict(type='SegVisualizationHook'))
default_scope = 'mmseg'
depths = [
    2,
    2,
    18,
    2,
]
embed_multi = dict(decay_mult=0.0, lr_mult=1.0)
env_cfg = dict(
    cudnn_benchmark=True,
    dist_cfg=dict(backend='nccl'),
    mp_cfg=dict(mp_start_method='fork', opencv_num_threads=0))
img_ratios = [
    0.5,
    0.75,
    1.0,
    1.25,
    1.5,
    1.75,
]
launcher = 'none'
load_from = '../checkpoint_files/ade20k/mask2former/best_mIoU_iter_155000.pth'
log_level = 'INFO'
log_processor = dict(by_epoch=False)
model = dict(
    backbone=dict(
        attn_drop_rate=0.0,
        depths=[
            2,
            2,
            18,
            2,
        ],
        drop_path_rate=0.3,
        drop_rate=0.0,
        embed_dims=128,
        frozen_stages=-1,
        init_cfg=dict(
            checkpoint=
            'https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/swin/swin_base_patch4_window12_384_20220317-55b0104a.pth',
            type='Pretrained'),
        mlp_ratio=4,
        num_heads=[
            4,
            8,
            16,
            32,
        ],
        out_indices=(
            0,
            1,
            2,
            3,
        ),
        patch_norm=True,
        pretrain_img_size=384,
        qk_scale=None,
        qkv_bias=True,
        type='SwinTransformer',
        window_size=12,
        with_cp=False),
    data_preprocessor=dict(
        bgr_to_rgb=True,
        corruption='jpeg_compression',
        mean=[
            123.675,
            116.28,
            103.53,
        ],
        pad_val=0,
        seg_pad_val=255,
        size=(
            512,
            512,
        ),
        std=[
            58.395,
            57.12,
            57.375,
        ],
        type='SegDataPreProcessor'),
    decode_head=dict(
        align_corners=False,
        enforce_decoder_input_project=False,
        feat_channels=256,
        in_channels=[
            128,
            256,
            512,
            1024,
        ],
        loss_cls=dict(
            class_weight=[
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                0.1,
            ],
            loss_weight=2.0,
            reduction='mean',
            type='mmdet.CrossEntropyLoss',
            use_sigmoid=False),
        loss_dice=dict(
            activate=True,
            eps=1.0,
            loss_weight=5.0,
            naive_dice=True,
            reduction='mean',
            type='mmdet.DiceLoss',
            use_sigmoid=True),
        loss_mask=dict(
            loss_weight=5.0,
            reduction='mean',
            type='mmdet.CrossEntropyLoss',
            use_sigmoid=True),
        num_classes=150,
        num_queries=100,
        num_transformer_feat_level=3,
        out_channels=256,
        pixel_decoder=dict(
            act_cfg=dict(type='ReLU'),
            encoder=dict(
                init_cfg=None,
                layer_cfg=dict(
                    ffn_cfg=dict(
                        act_cfg=dict(inplace=True, type='ReLU'),
                        embed_dims=256,
                        feedforward_channels=1024,
                        ffn_drop=0.0,
                        num_fcs=2),
                    self_attn_cfg=dict(
                        batch_first=True,
                        dropout=0.0,
                        embed_dims=256,
                        im2col_step=64,
                        init_cfg=None,
                        norm_cfg=None,
                        num_heads=8,
                        num_levels=3,
                        num_points=4)),
                num_layers=6),
            init_cfg=None,
            norm_cfg=dict(num_groups=32, type='GN'),
            num_outs=3,
            positional_encoding=dict(normalize=True, num_feats=128),
            type='mmdet.MSDeformAttnPixelDecoder'),
        positional_encoding=dict(normalize=True, num_feats=128),
        strides=[
            4,
            8,
            16,
            32,
        ],
        train_cfg=dict(
            assigner=dict(
                match_costs=[
                    dict(type='mmdet.ClassificationCost', weight=2.0),
                    dict(
                        type='mmdet.CrossEntropyLossCost',
                        use_sigmoid=True,
                        weight=5.0),
                    dict(
                        eps=1.0,
                        pred_act=True,
                        type='mmdet.DiceCost',
                        weight=5.0),
                ],
                type='mmdet.HungarianAssigner'),
            importance_sample_ratio=0.75,
            num_points=12544,
            oversample_ratio=3.0,
            sampler=dict(type='mmdet.MaskPseudoSampler')),
        transformer_decoder=dict(
            init_cfg=None,
            layer_cfg=dict(
                cross_attn_cfg=dict(
                    attn_drop=0.0,
                    batch_first=True,
                    dropout_layer=None,
                    embed_dims=256,
                    num_heads=8,
                    proj_drop=0.0),
                ffn_cfg=dict(
                    act_cfg=dict(inplace=True, type='ReLU'),
                    add_identity=True,
                    dropout_layer=None,
                    embed_dims=256,
                    feedforward_channels=2048,
                    ffn_drop=0.0,
                    num_fcs=2),
                self_attn_cfg=dict(
                    attn_drop=0.0,
                    batch_first=True,
                    dropout_layer=None,
                    embed_dims=256,
                    num_heads=8,
                    proj_drop=0.0)),
            num_layers=9,
            return_intermediate=True),
        type='Mask2FormerHead'),
    test_cfg=dict(mode='whole'),
    train_cfg=dict(),
    type='EncoderDecoder')
num_classes = 150
optim_wrapper = dict(
    clip_grad=dict(max_norm=0.01, norm_type=2),
    optimizer=dict(
        betas=(
            0.9,
            0.999,
        ),
        eps=1e-08,
        lr=0.0001,
        type='AdamW',
        weight_decay=0.05),
    paramwise_cfg=dict(
        custom_keys=dict({
            'absolute_pos_embed':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone':
            dict(decay_mult=1.0, lr_mult=0.1),
            'backbone.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.patch_embed.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.0.blocks.0.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.0.blocks.1.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.0.downsample.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.1.blocks.0.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.1.blocks.1.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.1.downsample.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.0.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.1.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.10.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.11.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.12.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.13.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.14.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.15.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.16.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.17.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.2.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.3.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.4.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.5.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.6.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.7.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.8.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.9.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.downsample.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.3.blocks.0.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.3.blocks.1.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'level_embed':
            dict(decay_mult=0.0, lr_mult=1.0),
            'query_embed':
            dict(decay_mult=0.0, lr_mult=1.0),
            'query_feat':
            dict(decay_mult=0.0, lr_mult=1.0),
            'relative_position_bias_table':
            dict(decay_mult=0.0, lr_mult=0.1)
        }),
        norm_decay_mult=0.0),
    type='OptimWrapper')
optimizer = dict(
    betas=(
        0.9,
        0.999,
    ),
    eps=1e-08,
    lr=0.0001,
    type='AdamW',
    weight_decay=0.05)
param_scheduler = [
    dict(
        begin=0,
        by_epoch=False,
        end=160000,
        eta_min=0,
        power=0.9,
        type='PolyLR'),
]
pretrained = 'https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/swin/swin_base_patch4_window12_384_20220317-55b0104a.pth'
resume = False
test_cfg = dict(type='TestLoop')
test_dataloader = dict(
    batch_size=1,
    dataset=dict(
        data_prefix=dict(
            img_path='images/validation',
            seg_map_path='annotations/validation'),
        data_root='data/ade/ADEChallengeData2016',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(keep_ratio=True, scale=(
                2560,
                640,
            ), type='Resize'),
            dict(reduce_zero_label=True, type='LoadAnnotations'),
            dict(type='PackSegInputs'),
        ],
        type='ADE20KDataset'),
    num_workers=4,
    persistent_workers=True,
    sampler=dict(shuffle=False, type='DefaultSampler'))
test_evaluator = dict(
    iou_metrics=[
        'mIoU',
    ], type='IoUMetric')
test_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(keep_ratio=True, scale=(
        2560,
        640,
    ), type='Resize'),
    dict(reduce_zero_label=True, type='LoadAnnotations'),
    dict(type='PackSegInputs'),
]
train_cfg = dict(
    max_iters=160000, type='IterBasedTrainLoop', val_interval=5000)
train_dataloader = dict(
    batch_size=2,
    dataset=dict(
        data_prefix=dict(
            img_path='images/training', seg_map_path='annotations/training'),
        data_root='data/ade/ADEChallengeData2016',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(reduce_zero_label=True, type='LoadAnnotations'),
            dict(
                max_size=2560,
                resize_type='ResizeShortestEdge',
                scales=[
                    320,
                    384,
                    448,
                    512,
                    576,
                    640,
                    704,
                    768,
                    832,
                    896,
                    960,
                    1024,
                    1088,
                    1152,
                    1216,
                    1280,
                ],
                type='RandomChoiceResize'),
            dict(
                cat_max_ratio=0.75, crop_size=(
                    512,
                    512,
                ), type='RandomCrop'),
            dict(prob=0.5, type='RandomFlip'),
            dict(type='PhotoMetricDistortion'),
            dict(type='PackSegInputs'),
        ],
        type='ADE20KDataset'),
    num_workers=4,
    persistent_workers=True,
    sampler=dict(shuffle=True, type='InfiniteSampler'))
train_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(reduce_zero_label=True, type='LoadAnnotations'),
    dict(
        max_size=2560,
        resize_type='ResizeShortestEdge',
        scales=[
            320,
            384,
            448,
            512,
            576,
            640,
            704,
            768,
            832,
            896,
            960,
            1024,
            1088,
            1152,
            1216,
            1280,
        ],
        type='RandomChoiceResize'),
    dict(cat_max_ratio=0.75, crop_size=(
        512,
        512,
    ), type='RandomCrop'),
    dict(prob=0.5, type='RandomFlip'),
    dict(type='PhotoMetricDistortion'),
    dict(type='PackSegInputs'),
]
tta_model = dict(type='SegTTAModel')
tta_pipeline = [
    dict(backend_args=None, type='LoadImageFromFile'),
    dict(
        transforms=[
            [
                dict(keep_ratio=True, scale_factor=0.5, type='Resize'),
                dict(keep_ratio=True, scale_factor=0.75, type='Resize'),
                dict(keep_ratio=True, scale_factor=1.0, type='Resize'),
                dict(keep_ratio=True, scale_factor=1.25, type='Resize'),
                dict(keep_ratio=True, scale_factor=1.5, type='Resize'),
                dict(keep_ratio=True, scale_factor=1.75, type='Resize'),
            ],
            [
                dict(direction='horizontal', prob=0.0, type='RandomFlip'),
                dict(direction='horizontal', prob=1.0, type='RandomFlip'),
            ],
            [
                dict(type='LoadAnnotations'),
            ],
            [
                dict(type='PackSegInputs'),
            ],
        ],
        type='TestTimeAug'),
]
val_cfg = dict(type='ValLoop')
val_dataloader = dict(
    batch_size=1,
    dataset=dict(
        data_prefix=dict(
            img_path='images/validation',
            seg_map_path='annotations/validation'),
        data_root='data/ade/ADEChallengeData2016',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(keep_ratio=True, scale=(
                2560,
                640,
            ), type='Resize'),
            dict(reduce_zero_label=True, type='LoadAnnotations'),
            dict(type='PackSegInputs'),
        ],
        type='ADE20KDataset'),
    num_workers=4,
    persistent_workers=True,
    sampler=dict(shuffle=False, type='DefaultSampler'))
val_evaluator = dict(
    iou_metrics=[
        'mIoU',
    ], type='IoUMetric')
vis_backends = [
    dict(type='LocalVisBackend'),
]
visualizer = dict(
    name='visualizer',
    type='SegLocalVisualizer',
    vis_backends=[
        dict(type='LocalVisBackend'),
    ])
work_dir = '../corruptions/work_dirs/ade20k/mask2former/mask2former_swin-b-in1k-384x384-pre_8xb2-160k_ade20k-512x512/jpeg_compression'

/pfs/work7/workspace/scratch/ma_mkacar-team_project_fss2024/benchmarking_robustness/semantic_segmentation/mmsegmentation/mmseg/ops_dcnv3/modules/dcnv3.py:20: UserWarning: Now, we support DCNv4 in InternImage.
  warnings.warn('Now, we support DCNv4 in InternImage.')
10/06 12:05:05 - mmengine - INFO - Distributed training is not used, all SyncBatchNorm (SyncBN) layers in the model will be automatically reverted to BatchNormXd layers if they are used.
10/06 12:05:05 - mmengine - INFO - Hooks will be executed in the following order:
before_run:
(VERY_HIGH   ) RuntimeInfoHook                    
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
before_train:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_train_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(NORMAL      ) DistSamplerSeedHook                
 -------------------- 
before_train_iter:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_train_iter:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(NORMAL      ) SegVisualizationHook               
(BELOW_NORMAL) LoggerHook                         
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
after_train_epoch:
(NORMAL      ) IterTimerHook                      
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_val:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
before_val_epoch:
(NORMAL      ) IterTimerHook                      
 -------------------- 
before_val_iter:
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_val_iter:
(NORMAL      ) IterTimerHook                      
(NORMAL      ) SegVisualizationHook               
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_val_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
after_val:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
after_train:
(VERY_HIGH   ) RuntimeInfoHook                    
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_test:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
before_test_epoch:
(NORMAL      ) IterTimerHook                      
 -------------------- 
before_test_iter:
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_test_iter:
(NORMAL      ) IterTimerHook                      
(NORMAL      ) SegVisualizationHook               
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_test_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_test:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
after_run:
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
10/06 12:05:06 - mmengine - WARNING - The prefix is not set in metric class IoUMetric.
Loads checkpoint by local backend from path: ../checkpoint_files/ade20k/mask2former/best_mIoU_iter_155000.pth
10/06 12:05:07 - mmengine - INFO - Load checkpoint from ../checkpoint_files/ade20k/mask2former/best_mIoU_iter_155000.pth
10/06 12:05:37 - mmengine - INFO - Iter(test) [  50/2000]    eta: 0:19:27  time: 0.3854  data_time: 0.0018  memory: 17181  
10/06 12:05:56 - mmengine - INFO - Iter(test) [ 100/2000]    eta: 0:15:32  time: 0.3855  data_time: 0.0018  memory: 17180  
10/06 12:06:10 - mmengine - INFO - Iter(test) [ 150/2000]    eta: 0:12:59  time: 0.2843  data_time: 0.0018  memory: 17150  
10/06 12:06:24 - mmengine - INFO - Iter(test) [ 200/2000]    eta: 0:11:34  time: 0.3414  data_time: 0.0018  memory: 17194  
10/06 12:06:41 - mmengine - INFO - Iter(test) [ 250/2000]    eta: 0:10:55  time: 0.2277  data_time: 0.0017  memory: 17202  
10/06 12:06:54 - mmengine - INFO - Iter(test) [ 300/2000]    eta: 0:10:09  time: 0.1361  data_time: 0.0018  memory: 17180  
10/06 12:07:09 - mmengine - INFO - Iter(test) [ 350/2000]    eta: 0:09:33  time: 0.2685  data_time: 0.0017  memory: 17178  
10/06 12:07:18 - mmengine - INFO - Iter(test) [ 400/2000]    eta: 0:08:45  time: 0.1478  data_time: 0.0016  memory: 17177  
10/06 12:07:26 - mmengine - INFO - Iter(test) [ 450/2000]    eta: 0:08:00  time: 0.1825  data_time: 0.0017  memory: 17147  
10/06 12:07:36 - mmengine - INFO - Iter(test) [ 500/2000]    eta: 0:07:25  time: 0.2124  data_time: 0.0019  memory: 17149  
10/06 12:07:44 - mmengine - INFO - Iter(test) [ 550/2000]    eta: 0:06:55  time: 0.2447  data_time: 0.0018  memory: 17179  
10/06 12:07:51 - mmengine - INFO - Iter(test) [ 600/2000]    eta: 0:06:23  time: 0.1355  data_time: 0.0019  memory: 3938  
10/06 12:08:02 - mmengine - INFO - Iter(test) [ 650/2000]    eta: 0:06:03  time: 0.2646  data_time: 0.0017  memory: 17181  
10/06 12:08:14 - mmengine - INFO - Iter(test) [ 700/2000]    eta: 0:05:47  time: 0.1968  data_time: 0.0019  memory: 17177  
10/06 12:08:26 - mmengine - INFO - Iter(test) [ 750/2000]    eta: 0:05:32  time: 0.5552  data_time: 0.0017  memory: 17184  
10/06 12:08:34 - mmengine - INFO - Iter(test) [ 800/2000]    eta: 0:05:10  time: 0.1341  data_time: 0.0019  memory: 17151  
10/06 12:08:41 - mmengine - INFO - Iter(test) [ 850/2000]    eta: 0:04:49  time: 0.1358  data_time: 0.0019  memory: 1428  
10/06 12:08:49 - mmengine - INFO - Iter(test) [ 900/2000]    eta: 0:04:31  time: 0.1810  data_time: 0.0017  memory: 17138  
10/06 12:09:00 - mmengine - INFO - Iter(test) [ 950/2000]    eta: 0:04:17  time: 0.2885  data_time: 0.0018  memory: 17133  
10/06 12:09:07 - mmengine - INFO - Iter(test) [1000/2000]    eta: 0:04:00  time: 0.1275  data_time: 0.0018  memory: 17096  
10/06 12:09:16 - mmengine - INFO - Iter(test) [1050/2000]    eta: 0:03:44  time: 0.2114  data_time: 0.0017  memory: 17182  
10/06 12:09:25 - mmengine - INFO - Iter(test) [1100/2000]    eta: 0:03:30  time: 0.1304  data_time: 0.0018  memory: 17175  
10/06 12:09:32 - mmengine - INFO - Iter(test) [1150/2000]    eta: 0:03:15  time: 0.1328  data_time: 0.0018  memory: 17117  
10/06 12:09:39 - mmengine - INFO - Iter(test) [1200/2000]    eta: 0:03:01  time: 0.1278  data_time: 0.0017  memory: 17113  
10/06 12:09:48 - mmengine - INFO - Iter(test) [1250/2000]    eta: 0:02:48  time: 0.2075  data_time: 0.0017  memory: 17172  
10/06 12:09:54 - mmengine - INFO - Iter(test) [1300/2000]    eta: 0:02:34  time: 0.1322  data_time: 0.0017  memory: 1430  
10/06 12:10:03 - mmengine - INFO - Iter(test) [1350/2000]    eta: 0:02:22  time: 0.1241  data_time: 0.0017  memory: 17110  
10/06 12:10:13 - mmengine - INFO - Iter(test) [1400/2000]    eta: 0:02:10  time: 0.1501  data_time: 0.0017  memory: 17154  
10/06 12:10:20 - mmengine - INFO - Iter(test) [1450/2000]    eta: 0:01:58  time: 0.1947  data_time: 0.0017  memory: 17130  
10/06 12:10:27 - mmengine - INFO - Iter(test) [1500/2000]    eta: 0:01:46  time: 0.1267  data_time: 0.0017  memory: 17125  
10/06 12:10:34 - mmengine - INFO - Iter(test) [1550/2000]    eta: 0:01:35  time: 0.1337  data_time: 0.0017  memory: 17154  
10/06 12:10:41 - mmengine - INFO - Iter(test) [1600/2000]    eta: 0:01:23  time: 0.1288  data_time: 0.0018  memory: 1425  
10/06 12:10:49 - mmengine - INFO - Iter(test) [1650/2000]    eta: 0:01:12  time: 0.1233  data_time: 0.0016  memory: 17192  
10/06 12:11:00 - mmengine - INFO - Iter(test) [1700/2000]    eta: 0:01:02  time: 0.1344  data_time: 0.0019  memory: 17151  
10/06 12:11:08 - mmengine - INFO - Iter(test) [1750/2000]    eta: 0:00:51  time: 0.1282  data_time: 0.0017  memory: 17111  
10/06 12:11:15 - mmengine - INFO - Iter(test) [1800/2000]    eta: 0:00:40  time: 0.1339  data_time: 0.0019  memory: 17114  
10/06 12:11:22 - mmengine - INFO - Iter(test) [1850/2000]    eta: 0:00:30  time: 0.1360  data_time: 0.0019  memory: 1317  
10/06 12:11:29 - mmengine - INFO - Iter(test) [1900/2000]    eta: 0:00:20  time: 0.1919  data_time: 0.0017  memory: 17182  
10/06 12:11:37 - mmengine - INFO - Iter(test) [1950/2000]    eta: 0:00:10  time: 0.1280  data_time: 0.0017  memory: 17197  
10/06 12:11:45 - mmengine - INFO - Iter(test) [2000/2000]    eta: 0:00:00  time: 0.1183  data_time: 0.0015  memory: 17131  
10/06 12:11:45 - mmengine - INFO - per class results:
10/06 12:11:45 - mmengine - INFO - 
+---------------------+-------+-------+
|        Class        |  IoU  |  Acc  |
+---------------------+-------+-------+
|         wall        |  74.4 | 86.97 |
|       building      |  80.1 | 93.39 |
|         sky         | 93.79 | 96.55 |
|        floor        | 78.99 | 89.92 |
|         tree        | 73.57 | 85.51 |
|       ceiling       | 80.56 | 85.84 |
|         road        | 81.13 | 89.95 |
|         bed         | 86.72 | 94.42 |
|      windowpane     | 60.16 | 77.27 |
|        grass        | 61.65 | 75.01 |
|       cabinet       | 56.95 | 74.03 |
|       sidewalk      | 61.72 | 80.08 |
|        person       | 79.42 | 85.86 |
|        earth        | 32.97 | 42.83 |
|         door        | 39.53 | 51.98 |
|        table        |  51.8 | 67.47 |
|       mountain      | 59.87 | 78.43 |
|        plant        | 52.56 | 60.98 |
|       curtain       |  73.4 | 80.83 |
|        chair        | 51.44 | 63.59 |
|         car         | 84.07 | 91.23 |
|        water        | 53.77 | 70.81 |
|       painting      | 69.29 | 80.96 |
|         sofa        | 62.37 | 79.79 |
|        shelf        | 40.89 | 61.29 |
|        house        | 39.72 | 49.52 |
|         sea         | 55.36 | 76.67 |
|        mirror       | 58.94 | 78.52 |
|         rug         | 49.56 | 53.02 |
|        field        | 28.85 | 70.75 |
|       armchair      | 35.38 | 55.37 |
|         seat        | 56.93 | 75.53 |
|        fence        | 45.24 | 63.04 |
|         desk        | 32.79 | 62.75 |
|         rock        | 50.32 | 72.08 |
|       wardrobe      | 53.52 | 69.82 |
|         lamp        |  60.5 | 72.33 |
|       bathtub       | 71.05 | 83.94 |
|       railing       | 33.47 | 43.99 |
|       cushion       | 51.16 |  67.8 |
|         base        | 26.01 | 46.54 |
|         box         |  24.2 | 33.97 |
|        column       | 46.35 | 52.41 |
|      signboard      | 39.01 | 48.88 |
|   chest of drawers  | 35.27 | 56.87 |
|       counter       | 33.74 | 42.61 |
|         sand        | 34.16 | 47.15 |
|         sink        | 70.73 | 79.42 |
|      skyscraper     | 49.67 | 60.57 |
|      fireplace      | 63.65 | 82.08 |
|     refrigerator    | 67.92 | 80.45 |
|      grandstand     | 41.64 | 70.07 |
|         path        | 13.35 | 18.38 |
|        stairs       | 25.13 | 28.44 |
|        runway       | 58.76 | 77.87 |
|         case        | 63.98 | 84.75 |
|      pool table     | 93.17 | 95.98 |
|        pillow       | 51.02 | 61.59 |
|     screen door     | 54.73 | 62.17 |
|       stairway      | 29.04 |  43.7 |
|        river        | 13.96 | 24.33 |
|        bridge       | 53.96 | 68.49 |
|       bookcase      | 26.98 | 49.27 |
|        blind        | 20.28 | 21.45 |
|     coffee table    | 55.67 | 76.41 |
|        toilet       | 83.95 | 89.19 |
|        flower       | 32.15 | 46.07 |
|         book        | 48.44 | 66.72 |
|         hill        |  6.68 | 12.52 |
|        bench        | 52.67 | 69.98 |
|      countertop     | 54.07 | 67.69 |
|        stove        | 66.91 | 78.39 |
|         palm        | 48.73 | 59.13 |
|    kitchen island   | 33.27 | 64.82 |
|       computer      | 61.78 | 72.11 |
|     swivel chair    | 38.47 | 54.13 |
|         boat        | 68.54 | 88.74 |
|         bar         | 48.25 | 59.66 |
|    arcade machine   | 55.34 | 63.73 |
|        hovel        | 16.87 | 27.18 |
|         bus         | 86.62 | 95.68 |
|        towel        |  66.2 | 70.07 |
|        light        | 56.08 | 70.93 |
|        truck        | 39.24 | 52.48 |
|        tower        |  31.4 | 52.62 |
|      chandelier     | 60.87 | 74.11 |
|        awning       | 34.86 | 46.41 |
|     streetlight     | 24.95 | 40.27 |
|        booth        | 25.87 | 27.26 |
| television receiver |  66.9 | 75.69 |
|       airplane      | 59.94 | 64.65 |
|      dirt track     |  0.0  |  0.0  |
|       apparel       | 39.78 | 56.63 |
|         pole        | 26.98 | 38.47 |
|         land        |  0.29 |  0.32 |
|      bannister      |  8.41 | 10.68 |
|      escalator      | 18.25 | 19.64 |
|       ottoman       | 49.07 | 65.22 |
|        bottle       | 17.62 | 20.85 |
|        buffet       | 37.31 | 42.88 |
|        poster       |  17.8 | 22.05 |
|        stage        |  7.11 | 17.97 |
|         van         | 46.27 | 64.93 |
|         ship        | 91.84 | 93.21 |
|       fountain      |  25.0 | 25.79 |
|    conveyer belt    | 44.25 |  65.2 |
|        canopy       | 27.06 |  44.3 |
|        washer       | 65.27 | 69.79 |
|      plaything      | 10.87 | 18.61 |
|    swimming pool    | 31.25 | 65.77 |
|        stool        | 35.17 | 49.07 |
|        barrel       | 57.05 | 63.14 |
|        basket       | 36.23 | 45.67 |
|      waterfall      | 62.02 | 90.33 |
|         tent        | 90.74 | 97.84 |
|         bag         | 11.09 | 14.32 |
|       minibike      | 65.67 | 81.85 |
|        cradle       | 65.73 | 82.42 |
|         oven        | 18.27 | 50.22 |
|         ball        | 24.86 |  33.8 |
|         food        | 59.15 | 69.92 |
|         step        |  2.18 |  2.54 |
|         tank        | 45.61 | 51.64 |
|      trade name     | 30.86 | 41.29 |
|      microwave      | 36.55 | 40.41 |
|         pot         | 42.11 | 50.49 |
|        animal       | 58.48 | 62.51 |
|       bicycle       | 49.67 | 65.91 |
|         lake        |  0.0  |  0.0  |
|      dishwasher     | 65.51 | 76.45 |
|        screen       | 65.79 | 90.45 |
|       blanket       | 11.78 | 12.49 |
|      sculpture      | 45.73 |  60.4 |
|         hood        | 37.37 | 39.62 |
|        sconce       | 37.14 | 45.56 |
|         vase        | 34.92 |  51.3 |
|    traffic light    | 32.02 | 48.54 |
|         tray        |  3.53 |  4.71 |
|        ashcan       | 39.11 | 60.01 |
|         fan         | 53.69 | 75.21 |
|         pier        |  2.75 |  3.69 |
|      crt screen     |  3.24 | 10.92 |
|        plate        | 54.65 | 69.39 |
|       monitor       |  1.38 |  1.9  |
|    bulletin board   | 41.21 | 48.32 |
|        shower       | 10.71 | 11.48 |
|       radiator      | 51.94 | 58.63 |
|        glass        | 14.55 | 17.15 |
|        clock        | 26.54 | 34.19 |
|         flag        | 45.83 | 50.24 |
+---------------------+-------+-------+
10/06 12:11:45 - mmengine - INFO - Iter(test) [2000/2000]    aAcc: 80.9700  mIoU: 45.0700  mAcc: 57.0000  data_time: 0.0020  time: 0.1991
Finished processing corruption type: jpeg_compression
Runtime: 1728209506

============================= JOB FEEDBACK =============================

NodeName=uc2n485
Job ID: 24369575
Cluster: uc2
User/Group: ma_mkacar/ma_ma
State: COMPLETED (exit code 0)
Nodes: 1
Cores per node: 16
CPU Utilized: 10:55:13
CPU Efficiency: 6.12% of 7-10:31:12 core-walltime
Job Wall-clock time: 11:09:27
Memory Utilized: 3.94 GB
Memory Efficiency: 3.94% of 100.00 GB
