Started at Sat Sep 21 00:48:34 CEST 2024
Processing corruption type: gaussian_noise
09/21 00:49:29 - mmengine - INFO - 
------------------------------------------------------------
System environment:
    sys.platform: linux
    Python: 3.10.13 | packaged by conda-forge | (main, Dec 23 2023, 15:36:39) [GCC 12.3.0]
    CUDA available: True
    MUSA available: False
    numpy_random_seed: 970805006
    GPU 0: Tesla V100-SXM2-32GB
    CUDA_HOME: /opt/bwhpc/common/devel/cuda/11.7
    NVCC: Cuda compilation tools, release 11.7, V11.7.99
    GCC: gcc (GCC) 8.5.0 20210514 (Red Hat 8.5.0-18)
    PyTorch: 1.13.1
    PyTorch compiling details: PyTorch built with:
  - GCC 9.3
  - C++ Version: 201402
  - Intel(R) oneAPI Math Kernel Library Version 2023.1-Product Build 20230303 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v2.6.0 (Git Hash 52b5f107dd9cf10910aaa19cb47f3abf9b349815)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - LAPACK is enabled (usually provided by MKL)
  - NNPACK is enabled
  - CPU capability usage: AVX2
  - CUDA Runtime 11.7
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_61,code=sm_61;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86;-gencode;arch=compute_37,code=compute_37
  - CuDNN 8.5
  - Magma 2.6.1
  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.7, CUDNN_VERSION=8.5.0, CXX_COMPILER=/opt/rh/devtoolset-9/root/usr/bin/c++, CXX_FLAGS= -fabi-version=11 -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -DEDGE_PROFILER_USE_KINETO -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Werror=non-virtual-dtor -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wunused-local-typedefs -Wno-unused-parameter -Wno-unused-function -Wno-unused-result -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Werror=cast-function-type -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.13.1, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, USE_ROCM=OFF, 

    TorchVision: 0.14.1
    OpenCV: 3.4.18
    MMEngine: 0.10.4

Runtime environment:
    cudnn_benchmark: True
    mp_cfg: {'mp_start_method': 'fork', 'opencv_num_threads': 0}
    dist_cfg: {'backend': 'nccl'}
    seed: 970805006
    Distributed launcher: none
    Distributed training: False
    GPU number: 1
------------------------------------------------------------

09/21 00:49:29 - mmengine - INFO - Config:
auto_scale_lr = dict(base_batch_size=16, enable=False)
crop_size = (
    512,
    512,
)
custom_imports = dict(allow_failed_imports=False, imports='mmdet.models')
data_root = 'data/ade/ADEChallengeData2016'
dataset_type = 'ADE20KDataset'
default_hooks = dict(
    checkpoint=dict(
        by_epoch=False, interval=5000, save_best='mIoU',
        type='CheckpointHook'),
    logger=dict(interval=50, log_metric_by_epoch=False, type='LoggerHook'),
    param_scheduler=dict(type='ParamSchedulerHook'),
    sampler_seed=dict(type='DistSamplerSeedHook'),
    timer=dict(type='IterTimerHook'),
    visualization=dict(type='SegVisualizationHook'))
default_scope = 'mmseg'
embed_multi = dict(decay_mult=0.0, lr_mult=1.0)
env_cfg = dict(
    cudnn_benchmark=True,
    dist_cfg=dict(backend='nccl'),
    mp_cfg=dict(mp_start_method='fork', opencv_num_threads=0))
img_ratios = [
    0.5,
    0.75,
    1.0,
    1.25,
    1.5,
    1.75,
]
launcher = 'none'
load_from = '../checkpoint_files/ade20k/mask2former/mask2former_r50_8xb2-160k_ade20k-512x512_20221204_000055-2d1f55f1.pth'
log_level = 'INFO'
log_processor = dict(by_epoch=False)
model = dict(
    backbone=dict(
        deep_stem=False,
        depth=50,
        frozen_stages=-1,
        init_cfg=dict(checkpoint='torchvision://resnet50', type='Pretrained'),
        norm_cfg=dict(requires_grad=False, type='SyncBN'),
        num_stages=4,
        out_indices=(
            0,
            1,
            2,
            3,
        ),
        style='pytorch',
        type='ResNet'),
    data_preprocessor=dict(
        bgr_to_rgb=True,
        corruption='gaussian_noise',
        mean=[
            123.675,
            116.28,
            103.53,
        ],
        pad_val=0,
        seg_pad_val=255,
        size=(
            512,
            512,
        ),
        std=[
            58.395,
            57.12,
            57.375,
        ],
        test_cfg=dict(size_divisor=32),
        type='SegDataPreProcessor'),
    decode_head=dict(
        align_corners=False,
        enforce_decoder_input_project=False,
        feat_channels=256,
        in_channels=[
            256,
            512,
            1024,
            2048,
        ],
        loss_cls=dict(
            class_weight=[
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                0.1,
            ],
            loss_weight=2.0,
            reduction='mean',
            type='mmdet.CrossEntropyLoss',
            use_sigmoid=False),
        loss_dice=dict(
            activate=True,
            eps=1.0,
            loss_weight=5.0,
            naive_dice=True,
            reduction='mean',
            type='mmdet.DiceLoss',
            use_sigmoid=True),
        loss_mask=dict(
            loss_weight=5.0,
            reduction='mean',
            type='mmdet.CrossEntropyLoss',
            use_sigmoid=True),
        num_classes=150,
        num_queries=100,
        num_transformer_feat_level=3,
        out_channels=256,
        pixel_decoder=dict(
            act_cfg=dict(type='ReLU'),
            encoder=dict(
                init_cfg=None,
                layer_cfg=dict(
                    ffn_cfg=dict(
                        act_cfg=dict(inplace=True, type='ReLU'),
                        embed_dims=256,
                        feedforward_channels=1024,
                        ffn_drop=0.0,
                        num_fcs=2),
                    self_attn_cfg=dict(
                        batch_first=True,
                        dropout=0.0,
                        embed_dims=256,
                        im2col_step=64,
                        init_cfg=None,
                        norm_cfg=None,
                        num_heads=8,
                        num_levels=3,
                        num_points=4)),
                num_layers=6),
            init_cfg=None,
            norm_cfg=dict(num_groups=32, type='GN'),
            num_outs=3,
            positional_encoding=dict(normalize=True, num_feats=128),
            type='mmdet.MSDeformAttnPixelDecoder'),
        positional_encoding=dict(normalize=True, num_feats=128),
        strides=[
            4,
            8,
            16,
            32,
        ],
        train_cfg=dict(
            assigner=dict(
                match_costs=[
                    dict(type='mmdet.ClassificationCost', weight=2.0),
                    dict(
                        type='mmdet.CrossEntropyLossCost',
                        use_sigmoid=True,
                        weight=5.0),
                    dict(
                        eps=1.0,
                        pred_act=True,
                        type='mmdet.DiceCost',
                        weight=5.0),
                ],
                type='mmdet.HungarianAssigner'),
            importance_sample_ratio=0.75,
            num_points=12544,
            oversample_ratio=3.0,
            sampler=dict(type='mmdet.MaskPseudoSampler')),
        transformer_decoder=dict(
            init_cfg=None,
            layer_cfg=dict(
                cross_attn_cfg=dict(
                    attn_drop=0.0,
                    batch_first=True,
                    dropout_layer=None,
                    embed_dims=256,
                    num_heads=8,
                    proj_drop=0.0),
                ffn_cfg=dict(
                    act_cfg=dict(inplace=True, type='ReLU'),
                    add_identity=True,
                    dropout_layer=None,
                    embed_dims=256,
                    feedforward_channels=2048,
                    ffn_drop=0.0,
                    num_fcs=2),
                self_attn_cfg=dict(
                    attn_drop=0.0,
                    batch_first=True,
                    dropout_layer=None,
                    embed_dims=256,
                    num_heads=8,
                    proj_drop=0.0)),
            num_layers=9,
            return_intermediate=True),
        type='Mask2FormerHead'),
    test_cfg=dict(mode='whole'),
    train_cfg=dict(),
    type='EncoderDecoder')
num_classes = 150
optim_wrapper = dict(
    clip_grad=dict(max_norm=0.01, norm_type=2),
    optimizer=dict(
        betas=(
            0.9,
            0.999,
        ),
        eps=1e-08,
        lr=0.0001,
        type='AdamW',
        weight_decay=0.05),
    paramwise_cfg=dict(
        custom_keys=dict(
            backbone=dict(decay_mult=1.0, lr_mult=0.1),
            level_embed=dict(decay_mult=0.0, lr_mult=1.0),
            query_embed=dict(decay_mult=0.0, lr_mult=1.0),
            query_feat=dict(decay_mult=0.0, lr_mult=1.0)),
        norm_decay_mult=0.0),
    type='OptimWrapper')
optimizer = dict(
    betas=(
        0.9,
        0.999,
    ),
    eps=1e-08,
    lr=0.0001,
    type='AdamW',
    weight_decay=0.05)
param_scheduler = [
    dict(
        begin=0,
        by_epoch=False,
        end=160000,
        eta_min=0,
        power=0.9,
        type='PolyLR'),
]
resume = False
test_cfg = dict(type='TestLoop')
test_dataloader = dict(
    batch_size=1,
    dataset=dict(
        data_prefix=dict(
            img_path='images/validation',
            seg_map_path='annotations/validation'),
        data_root='data/ade/ADEChallengeData2016',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(keep_ratio=True, scale=(
                2048,
                512,
            ), type='Resize'),
            dict(reduce_zero_label=True, type='LoadAnnotations'),
            dict(type='PackSegInputs'),
        ],
        type='ADE20KDataset'),
    num_workers=4,
    persistent_workers=True,
    sampler=dict(shuffle=False, type='DefaultSampler'))
test_evaluator = dict(
    iou_metrics=[
        'mIoU',
    ], type='IoUMetric')
test_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(keep_ratio=True, scale=(
        2048,
        512,
    ), type='Resize'),
    dict(reduce_zero_label=True, type='LoadAnnotations'),
    dict(type='PackSegInputs'),
]
train_cfg = dict(
    max_iters=160000, type='IterBasedTrainLoop', val_interval=5000)
train_dataloader = dict(
    batch_size=2,
    dataset=dict(
        data_prefix=dict(
            img_path='images/training', seg_map_path='annotations/training'),
        data_root='data/ade/ADEChallengeData2016',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(reduce_zero_label=True, type='LoadAnnotations'),
            dict(
                max_size=2048,
                resize_type='ResizeShortestEdge',
                scales=[
                    256,
                    307,
                    358,
                    409,
                    460,
                    512,
                    563,
                    614,
                    665,
                    716,
                    768,
                    819,
                    870,
                    921,
                    972,
                    1024,
                ],
                type='RandomChoiceResize'),
            dict(
                cat_max_ratio=0.75, crop_size=(
                    512,
                    512,
                ), type='RandomCrop'),
            dict(prob=0.5, type='RandomFlip'),
            dict(type='PhotoMetricDistortion'),
            dict(type='PackSegInputs'),
        ],
        type='ADE20KDataset'),
    num_workers=4,
    persistent_workers=True,
    sampler=dict(shuffle=True, type='InfiniteSampler'))
train_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(reduce_zero_label=True, type='LoadAnnotations'),
    dict(
        max_size=2048,
        resize_type='ResizeShortestEdge',
        scales=[
            256,
            307,
            358,
            409,
            460,
            512,
            563,
            614,
            665,
            716,
            768,
            819,
            870,
            921,
            972,
            1024,
        ],
        type='RandomChoiceResize'),
    dict(cat_max_ratio=0.75, crop_size=(
        512,
        512,
    ), type='RandomCrop'),
    dict(prob=0.5, type='RandomFlip'),
    dict(type='PhotoMetricDistortion'),
    dict(type='PackSegInputs'),
]
tta_model = dict(type='SegTTAModel')
tta_pipeline = [
    dict(backend_args=None, type='LoadImageFromFile'),
    dict(
        transforms=[
            [
                dict(keep_ratio=True, scale_factor=0.5, type='Resize'),
                dict(keep_ratio=True, scale_factor=0.75, type='Resize'),
                dict(keep_ratio=True, scale_factor=1.0, type='Resize'),
                dict(keep_ratio=True, scale_factor=1.25, type='Resize'),
                dict(keep_ratio=True, scale_factor=1.5, type='Resize'),
                dict(keep_ratio=True, scale_factor=1.75, type='Resize'),
            ],
            [
                dict(direction='horizontal', prob=0.0, type='RandomFlip'),
                dict(direction='horizontal', prob=1.0, type='RandomFlip'),
            ],
            [
                dict(type='LoadAnnotations'),
            ],
            [
                dict(type='PackSegInputs'),
            ],
        ],
        type='TestTimeAug'),
]
val_cfg = dict(type='ValLoop')
val_dataloader = dict(
    batch_size=1,
    dataset=dict(
        data_prefix=dict(
            img_path='images/validation',
            seg_map_path='annotations/validation'),
        data_root='data/ade/ADEChallengeData2016',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(keep_ratio=True, scale=(
                2048,
                512,
            ), type='Resize'),
            dict(reduce_zero_label=True, type='LoadAnnotations'),
            dict(type='PackSegInputs'),
        ],
        type='ADE20KDataset'),
    num_workers=4,
    persistent_workers=True,
    sampler=dict(shuffle=False, type='DefaultSampler'))
val_evaluator = dict(
    iou_metrics=[
        'mIoU',
    ], type='IoUMetric')
vis_backends = [
    dict(type='LocalVisBackend'),
]
visualizer = dict(
    name='visualizer',
    type='SegLocalVisualizer',
    vis_backends=[
        dict(type='LocalVisBackend'),
    ])
work_dir = '../corruptions/work_dirs/ade20k/mask2former/mask2former_r50_8xb2-160k_ade20k-512x512/gaussian_noise'

09/21 00:49:53 - mmengine - INFO - Distributed training is not used, all SyncBatchNorm (SyncBN) layers in the model will be automatically reverted to BatchNormXd layers if they are used.
09/21 00:49:54 - mmengine - INFO - Hooks will be executed in the following order:
before_run:
(VERY_HIGH   ) RuntimeInfoHook                    
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
before_train:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_train_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(NORMAL      ) DistSamplerSeedHook                
 -------------------- 
before_train_iter:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_train_iter:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(NORMAL      ) SegVisualizationHook               
(BELOW_NORMAL) LoggerHook                         
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
after_train_epoch:
(NORMAL      ) IterTimerHook                      
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_val:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
before_val_epoch:
(NORMAL      ) IterTimerHook                      
 -------------------- 
before_val_iter:
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_val_iter:
(NORMAL      ) IterTimerHook                      
(NORMAL      ) SegVisualizationHook               
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_val_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
after_val:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
after_train:
(VERY_HIGH   ) RuntimeInfoHook                    
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_test:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
before_test_epoch:
(NORMAL      ) IterTimerHook                      
 -------------------- 
before_test_iter:
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_test_iter:
(NORMAL      ) IterTimerHook                      
(NORMAL      ) SegVisualizationHook               
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_test_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_test:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
after_run:
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
09/21 00:49:55 - mmengine - WARNING - The prefix is not set in metric class IoUMetric.
Loads checkpoint by local backend from path: ../checkpoint_files/ade20k/mask2former/mask2former_r50_8xb2-160k_ade20k-512x512_20221204_000055-2d1f55f1.pth
09/21 00:49:57 - mmengine - INFO - Load checkpoint from ../checkpoint_files/ade20k/mask2former/mask2former_r50_8xb2-160k_ade20k-512x512_20221204_000055-2d1f55f1.pth
09/21 00:52:09 - mmengine - INFO - Iter(test) [  50/2000]    eta: 1:25:45  time: 1.0189  data_time: 0.0017  memory: 17167  
09/21 00:52:30 - mmengine - INFO - Iter(test) [ 100/2000]    eta: 0:48:19  time: 0.6095  data_time: 0.0015  memory: 17158  
09/21 00:52:37 - mmengine - INFO - Iter(test) [ 150/2000]    eta: 0:32:48  time: 0.1917  data_time: 0.0014  memory: 872  
09/21 00:52:53 - mmengine - INFO - Iter(test) [ 200/2000]    eta: 0:26:24  time: 0.1299  data_time: 0.0014  memory: 17214  
09/21 00:53:07 - mmengine - INFO - Iter(test) [ 250/2000]    eta: 0:22:04  time: 0.1073  data_time: 0.0014  memory: 17221  
09/21 00:53:17 - mmengine - INFO - Iter(test) [ 300/2000]    eta: 0:18:52  time: 0.0923  data_time: 0.0014  memory: 17162  
09/21 00:53:32 - mmengine - INFO - Iter(test) [ 350/2000]    eta: 0:16:54  time: 0.0873  data_time: 0.0013  memory: 17165  
09/21 00:53:42 - mmengine - INFO - Iter(test) [ 400/2000]    eta: 0:14:57  time: 0.0924  data_time: 0.0013  memory: 17147  
09/21 00:53:47 - mmengine - INFO - Iter(test) [ 450/2000]    eta: 0:13:11  time: 0.0860  data_time: 0.0013  memory: 883  
09/21 00:53:53 - mmengine - INFO - Iter(test) [ 500/2000]    eta: 0:11:46  time: 0.0891  data_time: 0.0014  memory: 872  
09/21 00:53:59 - mmengine - INFO - Iter(test) [ 550/2000]    eta: 0:10:37  time: 0.1114  data_time: 0.0015  memory: 983  
09/21 00:54:05 - mmengine - INFO - Iter(test) [ 600/2000]    eta: 0:09:37  time: 0.1083  data_time: 0.0015  memory: 981  
09/21 00:54:16 - mmengine - INFO - Iter(test) [ 650/2000]    eta: 0:08:57  time: 0.6042  data_time: 0.0013  memory: 17168  
09/21 00:54:27 - mmengine - INFO - Iter(test) [ 700/2000]    eta: 0:08:20  time: 0.0925  data_time: 0.0014  memory: 17163  
09/21 00:54:33 - mmengine - INFO - Iter(test) [ 750/2000]    eta: 0:07:38  time: 0.1199  data_time: 0.0014  memory: 1039  
09/21 00:54:39 - mmengine - INFO - Iter(test) [ 800/2000]    eta: 0:07:01  time: 0.0907  data_time: 0.0015  memory: 872  
09/21 00:54:46 - mmengine - INFO - Iter(test) [ 850/2000]    eta: 0:06:30  time: 0.1277  data_time: 0.0014  memory: 844  
09/21 00:54:51 - mmengine - INFO - Iter(test) [ 900/2000]    eta: 0:05:59  time: 0.1221  data_time: 0.0013  memory: 925  
09/21 00:54:58 - mmengine - INFO - Iter(test) [ 950/2000]    eta: 0:05:31  time: 0.1176  data_time: 0.0014  memory: 955  
09/21 00:55:04 - mmengine - INFO - Iter(test) [1000/2000]    eta: 0:05:06  time: 0.1473  data_time: 0.0014  memory: 955  
09/21 00:55:16 - mmengine - INFO - Iter(test) [1050/2000]    eta: 0:04:47  time: 0.0926  data_time: 0.0014  memory: 17170  
09/21 00:55:22 - mmengine - INFO - Iter(test) [1100/2000]    eta: 0:04:25  time: 0.1600  data_time: 0.0014  memory: 952  
09/21 00:55:28 - mmengine - INFO - Iter(test) [1150/2000]    eta: 0:04:04  time: 0.1573  data_time: 0.0014  memory: 924  
09/21 00:55:33 - mmengine - INFO - Iter(test) [1200/2000]    eta: 0:03:43  time: 0.0886  data_time: 0.0013  memory: 1829  
09/21 00:55:46 - mmengine - INFO - Iter(test) [1250/2000]    eta: 0:03:29  time: 0.1255  data_time: 0.0028  memory: 17158  
09/21 00:55:51 - mmengine - INFO - Iter(test) [1300/2000]    eta: 0:03:10  time: 0.1692  data_time: 0.0014  memory: 872  
09/21 00:55:57 - mmengine - INFO - Iter(test) [1350/2000]    eta: 0:02:53  time: 0.1664  data_time: 0.0014  memory: 872  
09/21 00:56:03 - mmengine - INFO - Iter(test) [1400/2000]    eta: 0:02:36  time: 0.1274  data_time: 0.0013  memory: 953  
09/21 00:56:09 - mmengine - INFO - Iter(test) [1450/2000]    eta: 0:02:21  time: 0.1223  data_time: 0.0014  memory: 955  
09/21 00:56:14 - mmengine - INFO - Iter(test) [1500/2000]    eta: 0:02:05  time: 0.1167  data_time: 0.0013  memory: 869  
09/21 00:56:20 - mmengine - INFO - Iter(test) [1550/2000]    eta: 0:01:51  time: 0.0922  data_time: 0.0014  memory: 955  
09/21 00:56:25 - mmengine - INFO - Iter(test) [1600/2000]    eta: 0:01:36  time: 0.0907  data_time: 0.0014  memory: 844  
09/21 00:56:35 - mmengine - INFO - Iter(test) [1650/2000]    eta: 0:01:24  time: 0.1016  data_time: 0.0013  memory: 17165  
09/21 00:56:41 - mmengine - INFO - Iter(test) [1700/2000]    eta: 0:01:11  time: 0.1266  data_time: 0.0015  memory: 952  
09/21 00:56:47 - mmengine - INFO - Iter(test) [1750/2000]    eta: 0:00:58  time: 0.0908  data_time: 0.0013  memory: 980  
09/21 00:56:52 - mmengine - INFO - Iter(test) [1800/2000]    eta: 0:00:46  time: 0.1293  data_time: 0.0022  memory: 872  
09/21 00:56:58 - mmengine - INFO - Iter(test) [1850/2000]    eta: 0:00:34  time: 0.0965  data_time: 0.0015  memory: 787  
09/21 00:57:03 - mmengine - INFO - Iter(test) [1900/2000]    eta: 0:00:22  time: 0.0948  data_time: 0.0014  memory: 1011  
09/21 00:57:08 - mmengine - INFO - Iter(test) [1950/2000]    eta: 0:00:11  time: 0.0929  data_time: 0.0014  memory: 1258  
09/21 00:57:14 - mmengine - INFO - Iter(test) [2000/2000]    eta: 0:00:00  time: 0.1119  data_time: 0.0013  memory: 1037  
09/21 00:57:14 - mmengine - INFO - per class results:
09/21 00:57:14 - mmengine - INFO - 
+---------------------+-------+-------+
|        Class        |  IoU  |  Acc  |
+---------------------+-------+-------+
|         wall        |  62.7 | 84.85 |
|       building      | 72.78 | 83.27 |
|         sky         | 88.78 | 92.86 |
|        floor        |  66.4 | 85.17 |
|         tree        | 63.67 | 83.97 |
|       ceiling       | 73.64 | 87.35 |
|         road        | 68.96 | 77.33 |
|         bed         | 70.36 | 76.47 |
|      windowpane     | 43.93 |  56.4 |
|        grass        | 56.47 | 69.09 |
|       cabinet       | 44.85 | 56.27 |
|       sidewalk      | 35.56 | 38.98 |
|        person       | 68.58 | 87.25 |
|        earth        | 23.27 | 53.72 |
|         door        | 25.43 | 50.65 |
|        table        | 48.96 | 59.97 |
|       mountain      | 38.95 | 52.79 |
|        plant        | 32.52 | 43.78 |
|       curtain       | 46.69 | 67.74 |
|        chair        |  44.9 | 54.62 |
|         car         | 75.91 | 82.61 |
|        water        | 31.62 | 48.98 |
|       painting      | 55.55 | 63.42 |
|         sofa        | 52.92 | 71.84 |
|        shelf        | 29.39 | 43.31 |
|        house        | 27.07 | 41.05 |
|         sea         | 22.18 |  30.5 |
|        mirror       | 38.15 | 42.27 |
|         rug         | 22.18 | 25.61 |
|        field        | 18.54 | 41.31 |
|       armchair      | 28.87 | 42.95 |
|         seat        | 24.08 | 63.82 |
|        fence        |  33.7 | 49.31 |
|         desk        | 28.92 | 34.21 |
|         rock        | 36.99 | 42.71 |
|       wardrobe      | 26.49 | 30.34 |
|         lamp        | 52.53 |  58.5 |
|       bathtub       | 37.56 | 59.88 |
|       railing       | 23.49 | 35.52 |
|       cushion       | 37.65 | 43.47 |
|         base        | 18.13 | 28.17 |
|         box         |  8.02 |  9.78 |
|        column       | 31.14 | 57.61 |
|      signboard      | 31.46 | 38.62 |
|   chest of drawers  | 27.14 | 29.75 |
|       counter       |  8.59 | 16.54 |
|         sand        |  3.67 |  6.42 |
|         sink        | 39.12 | 43.93 |
|      skyscraper     | 39.66 | 47.03 |
|      fireplace      |  39.2 | 50.43 |
|     refrigerator    | 47.15 | 49.79 |
|      grandstand     | 21.87 | 60.57 |
|         path        | 20.11 | 35.87 |
|        stairs       | 20.14 | 43.38 |
|        runway       | 28.97 | 29.14 |
|         case        | 26.26 | 32.83 |
|      pool table     | 89.82 | 95.41 |
|        pillow       | 41.82 | 49.02 |
|     screen door     | 18.32 | 26.78 |
|       stairway      | 25.37 | 39.76 |
|        river        |  0.0  |  0.0  |
|        bridge       | 19.43 | 25.26 |
|       bookcase      | 12.14 | 12.64 |
|        blind        |  5.57 |  5.7  |
|     coffee table    | 55.77 | 65.14 |
|        toilet       | 54.76 | 61.52 |
|        flower       | 21.78 | 36.78 |
|         book        | 20.04 | 24.39 |
|         hill        |  4.45 |  6.44 |
|        bench        | 17.25 | 31.76 |
|      countertop     | 33.59 | 44.59 |
|        stove        | 50.67 |  59.8 |
|         palm        | 31.28 | 32.91 |
|    kitchen island   | 26.43 | 41.09 |
|       computer      |  33.9 | 35.24 |
|     swivel chair    | 22.48 | 27.38 |
|         boat        | 17.94 | 18.18 |
|         bar         | 28.89 | 41.26 |
|    arcade machine   |  9.85 | 19.52 |
|        hovel        | 17.99 | 47.73 |
|         bus         | 68.59 | 84.35 |
|        towel        | 24.32 | 27.91 |
|        light        | 47.26 | 55.33 |
|        truck        | 21.41 | 35.34 |
|        tower        |  3.92 |  6.64 |
|      chandelier     | 49.86 | 56.82 |
|        awning       | 11.85 | 12.17 |
|     streetlight     | 30.45 | 41.67 |
|        booth        |  55.0 | 63.77 |
| television receiver | 28.62 | 32.38 |
|       airplane      | 42.78 | 45.05 |
|      dirt track     |  3.08 |  33.9 |
|       apparel       | 24.29 | 34.36 |
|         pole        |  16.4 | 29.43 |
|         land        |  2.16 |  3.05 |
|      bannister      |  7.27 | 15.25 |
|      escalator      |  0.04 |  0.04 |
|       ottoman       | 17.88 | 26.64 |
|        bottle       | 11.68 | 15.14 |
|        buffet       | 29.42 | 35.14 |
|        poster       |  9.27 | 13.78 |
|        stage        |  7.82 | 13.55 |
|         van         | 14.06 | 17.06 |
|         ship        |  6.32 |  6.35 |
|       fountain      | 16.87 | 19.43 |
|    conveyer belt    | 46.73 | 60.52 |
|        canopy       | 22.99 | 29.93 |
|        washer       | 29.98 | 30.01 |
|      plaything      | 11.39 |  13.3 |
|    swimming pool    | 38.71 | 39.35 |
|        stool        | 29.95 | 50.99 |
|        barrel       |  6.29 |  9.57 |
|        basket       | 10.66 | 11.98 |
|      waterfall      |  34.6 | 39.19 |
|         tent        | 11.86 | 12.04 |
|         bag         |  3.38 |  3.8  |
|       minibike      | 37.15 | 43.34 |
|        cradle       | 38.77 | 49.55 |
|         oven        | 28.06 | 36.37 |
|         ball        | 30.88 | 56.69 |
|         food        | 38.97 | 48.92 |
|         step        |  1.99 |  5.95 |
|         tank        | 23.47 | 23.81 |
|      trade name     | 13.18 | 13.91 |
|      microwave      | 17.16 | 17.88 |
|         pot         | 26.63 | 29.67 |
|        animal       | 40.62 | 47.93 |
|       bicycle       | 35.75 | 64.01 |
|         lake        |  0.09 |  0.1  |
|      dishwasher     |  34.9 | 37.41 |
|        screen       | 53.95 | 58.81 |
|       blanket       |  7.82 |  9.37 |
|      sculpture      |  5.4  | 10.64 |
|         hood        | 31.55 | 35.53 |
|        sconce       | 17.88 | 19.98 |
|         vase        | 29.08 | 38.59 |
|    traffic light    | 20.72 | 29.48 |
|         tray        |  8.27 |  13.7 |
|        ashcan       | 27.03 | 29.24 |
|         fan         | 47.94 | 59.94 |
|         pier        | 15.12 | 17.39 |
|      crt screen     | 13.03 |  42.0 |
|        plate        | 34.36 | 44.22 |
|       monitor       |  0.43 |  0.43 |
|    bulletin board   | 11.62 | 13.51 |
|        shower       |  2.19 |  4.79 |
|       radiator      |  6.01 |  6.04 |
|        glass        |  9.77 | 10.56 |
|        clock        | 18.82 | 23.82 |
|         flag        | 14.04 | 14.56 |
+---------------------+-------+-------+
09/21 00:57:14 - mmengine - INFO - Iter(test) [2000/2000]    aAcc: 71.3300  mIoU: 29.2700  mAcc: 38.1700  data_time: 0.0019  time: 0.2181
Finished processing corruption type: gaussian_noise
Processing corruption type: shot_noise
09/21 00:57:31 - mmengine - INFO - 
------------------------------------------------------------
System environment:
    sys.platform: linux
    Python: 3.10.13 | packaged by conda-forge | (main, Dec 23 2023, 15:36:39) [GCC 12.3.0]
    CUDA available: True
    MUSA available: False
    numpy_random_seed: 1058067542
    GPU 0: Tesla V100-SXM2-32GB
    CUDA_HOME: /opt/bwhpc/common/devel/cuda/11.7
    NVCC: Cuda compilation tools, release 11.7, V11.7.99
    GCC: gcc (GCC) 8.5.0 20210514 (Red Hat 8.5.0-18)
    PyTorch: 1.13.1
    PyTorch compiling details: PyTorch built with:
  - GCC 9.3
  - C++ Version: 201402
  - Intel(R) oneAPI Math Kernel Library Version 2023.1-Product Build 20230303 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v2.6.0 (Git Hash 52b5f107dd9cf10910aaa19cb47f3abf9b349815)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - LAPACK is enabled (usually provided by MKL)
  - NNPACK is enabled
  - CPU capability usage: AVX2
  - CUDA Runtime 11.7
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_61,code=sm_61;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86;-gencode;arch=compute_37,code=compute_37
  - CuDNN 8.5
  - Magma 2.6.1
  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.7, CUDNN_VERSION=8.5.0, CXX_COMPILER=/opt/rh/devtoolset-9/root/usr/bin/c++, CXX_FLAGS= -fabi-version=11 -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -DEDGE_PROFILER_USE_KINETO -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Werror=non-virtual-dtor -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wunused-local-typedefs -Wno-unused-parameter -Wno-unused-function -Wno-unused-result -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Werror=cast-function-type -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.13.1, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, USE_ROCM=OFF, 

    TorchVision: 0.14.1
    OpenCV: 3.4.18
    MMEngine: 0.10.4

Runtime environment:
    cudnn_benchmark: True
    mp_cfg: {'mp_start_method': 'fork', 'opencv_num_threads': 0}
    dist_cfg: {'backend': 'nccl'}
    seed: 1058067542
    Distributed launcher: none
    Distributed training: False
    GPU number: 1
------------------------------------------------------------

09/21 00:57:32 - mmengine - INFO - Config:
auto_scale_lr = dict(base_batch_size=16, enable=False)
crop_size = (
    512,
    512,
)
custom_imports = dict(allow_failed_imports=False, imports='mmdet.models')
data_root = 'data/ade/ADEChallengeData2016'
dataset_type = 'ADE20KDataset'
default_hooks = dict(
    checkpoint=dict(
        by_epoch=False, interval=5000, save_best='mIoU',
        type='CheckpointHook'),
    logger=dict(interval=50, log_metric_by_epoch=False, type='LoggerHook'),
    param_scheduler=dict(type='ParamSchedulerHook'),
    sampler_seed=dict(type='DistSamplerSeedHook'),
    timer=dict(type='IterTimerHook'),
    visualization=dict(type='SegVisualizationHook'))
default_scope = 'mmseg'
embed_multi = dict(decay_mult=0.0, lr_mult=1.0)
env_cfg = dict(
    cudnn_benchmark=True,
    dist_cfg=dict(backend='nccl'),
    mp_cfg=dict(mp_start_method='fork', opencv_num_threads=0))
img_ratios = [
    0.5,
    0.75,
    1.0,
    1.25,
    1.5,
    1.75,
]
launcher = 'none'
load_from = '../checkpoint_files/ade20k/mask2former/mask2former_r50_8xb2-160k_ade20k-512x512_20221204_000055-2d1f55f1.pth'
log_level = 'INFO'
log_processor = dict(by_epoch=False)
model = dict(
    backbone=dict(
        deep_stem=False,
        depth=50,
        frozen_stages=-1,
        init_cfg=dict(checkpoint='torchvision://resnet50', type='Pretrained'),
        norm_cfg=dict(requires_grad=False, type='SyncBN'),
        num_stages=4,
        out_indices=(
            0,
            1,
            2,
            3,
        ),
        style='pytorch',
        type='ResNet'),
    data_preprocessor=dict(
        bgr_to_rgb=True,
        corruption='shot_noise',
        mean=[
            123.675,
            116.28,
            103.53,
        ],
        pad_val=0,
        seg_pad_val=255,
        size=(
            512,
            512,
        ),
        std=[
            58.395,
            57.12,
            57.375,
        ],
        test_cfg=dict(size_divisor=32),
        type='SegDataPreProcessor'),
    decode_head=dict(
        align_corners=False,
        enforce_decoder_input_project=False,
        feat_channels=256,
        in_channels=[
            256,
            512,
            1024,
            2048,
        ],
        loss_cls=dict(
            class_weight=[
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                0.1,
            ],
            loss_weight=2.0,
            reduction='mean',
            type='mmdet.CrossEntropyLoss',
            use_sigmoid=False),
        loss_dice=dict(
            activate=True,
            eps=1.0,
            loss_weight=5.0,
            naive_dice=True,
            reduction='mean',
            type='mmdet.DiceLoss',
            use_sigmoid=True),
        loss_mask=dict(
            loss_weight=5.0,
            reduction='mean',
            type='mmdet.CrossEntropyLoss',
            use_sigmoid=True),
        num_classes=150,
        num_queries=100,
        num_transformer_feat_level=3,
        out_channels=256,
        pixel_decoder=dict(
            act_cfg=dict(type='ReLU'),
            encoder=dict(
                init_cfg=None,
                layer_cfg=dict(
                    ffn_cfg=dict(
                        act_cfg=dict(inplace=True, type='ReLU'),
                        embed_dims=256,
                        feedforward_channels=1024,
                        ffn_drop=0.0,
                        num_fcs=2),
                    self_attn_cfg=dict(
                        batch_first=True,
                        dropout=0.0,
                        embed_dims=256,
                        im2col_step=64,
                        init_cfg=None,
                        norm_cfg=None,
                        num_heads=8,
                        num_levels=3,
                        num_points=4)),
                num_layers=6),
            init_cfg=None,
            norm_cfg=dict(num_groups=32, type='GN'),
            num_outs=3,
            positional_encoding=dict(normalize=True, num_feats=128),
            type='mmdet.MSDeformAttnPixelDecoder'),
        positional_encoding=dict(normalize=True, num_feats=128),
        strides=[
            4,
            8,
            16,
            32,
        ],
        train_cfg=dict(
            assigner=dict(
                match_costs=[
                    dict(type='mmdet.ClassificationCost', weight=2.0),
                    dict(
                        type='mmdet.CrossEntropyLossCost',
                        use_sigmoid=True,
                        weight=5.0),
                    dict(
                        eps=1.0,
                        pred_act=True,
                        type='mmdet.DiceCost',
                        weight=5.0),
                ],
                type='mmdet.HungarianAssigner'),
            importance_sample_ratio=0.75,
            num_points=12544,
            oversample_ratio=3.0,
            sampler=dict(type='mmdet.MaskPseudoSampler')),
        transformer_decoder=dict(
            init_cfg=None,
            layer_cfg=dict(
                cross_attn_cfg=dict(
                    attn_drop=0.0,
                    batch_first=True,
                    dropout_layer=None,
                    embed_dims=256,
                    num_heads=8,
                    proj_drop=0.0),
                ffn_cfg=dict(
                    act_cfg=dict(inplace=True, type='ReLU'),
                    add_identity=True,
                    dropout_layer=None,
                    embed_dims=256,
                    feedforward_channels=2048,
                    ffn_drop=0.0,
                    num_fcs=2),
                self_attn_cfg=dict(
                    attn_drop=0.0,
                    batch_first=True,
                    dropout_layer=None,
                    embed_dims=256,
                    num_heads=8,
                    proj_drop=0.0)),
            num_layers=9,
            return_intermediate=True),
        type='Mask2FormerHead'),
    test_cfg=dict(mode='whole'),
    train_cfg=dict(),
    type='EncoderDecoder')
num_classes = 150
optim_wrapper = dict(
    clip_grad=dict(max_norm=0.01, norm_type=2),
    optimizer=dict(
        betas=(
            0.9,
            0.999,
        ),
        eps=1e-08,
        lr=0.0001,
        type='AdamW',
        weight_decay=0.05),
    paramwise_cfg=dict(
        custom_keys=dict(
            backbone=dict(decay_mult=1.0, lr_mult=0.1),
            level_embed=dict(decay_mult=0.0, lr_mult=1.0),
            query_embed=dict(decay_mult=0.0, lr_mult=1.0),
            query_feat=dict(decay_mult=0.0, lr_mult=1.0)),
        norm_decay_mult=0.0),
    type='OptimWrapper')
optimizer = dict(
    betas=(
        0.9,
        0.999,
    ),
    eps=1e-08,
    lr=0.0001,
    type='AdamW',
    weight_decay=0.05)
param_scheduler = [
    dict(
        begin=0,
        by_epoch=False,
        end=160000,
        eta_min=0,
        power=0.9,
        type='PolyLR'),
]
resume = False
test_cfg = dict(type='TestLoop')
test_dataloader = dict(
    batch_size=1,
    dataset=dict(
        data_prefix=dict(
            img_path='images/validation',
            seg_map_path='annotations/validation'),
        data_root='data/ade/ADEChallengeData2016',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(keep_ratio=True, scale=(
                2048,
                512,
            ), type='Resize'),
            dict(reduce_zero_label=True, type='LoadAnnotations'),
            dict(type='PackSegInputs'),
        ],
        type='ADE20KDataset'),
    num_workers=4,
    persistent_workers=True,
    sampler=dict(shuffle=False, type='DefaultSampler'))
test_evaluator = dict(
    iou_metrics=[
        'mIoU',
    ], type='IoUMetric')
test_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(keep_ratio=True, scale=(
        2048,
        512,
    ), type='Resize'),
    dict(reduce_zero_label=True, type='LoadAnnotations'),
    dict(type='PackSegInputs'),
]
train_cfg = dict(
    max_iters=160000, type='IterBasedTrainLoop', val_interval=5000)
train_dataloader = dict(
    batch_size=2,
    dataset=dict(
        data_prefix=dict(
            img_path='images/training', seg_map_path='annotations/training'),
        data_root='data/ade/ADEChallengeData2016',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(reduce_zero_label=True, type='LoadAnnotations'),
            dict(
                max_size=2048,
                resize_type='ResizeShortestEdge',
                scales=[
                    256,
                    307,
                    358,
                    409,
                    460,
                    512,
                    563,
                    614,
                    665,
                    716,
                    768,
                    819,
                    870,
                    921,
                    972,
                    1024,
                ],
                type='RandomChoiceResize'),
            dict(
                cat_max_ratio=0.75, crop_size=(
                    512,
                    512,
                ), type='RandomCrop'),
            dict(prob=0.5, type='RandomFlip'),
            dict(type='PhotoMetricDistortion'),
            dict(type='PackSegInputs'),
        ],
        type='ADE20KDataset'),
    num_workers=4,
    persistent_workers=True,
    sampler=dict(shuffle=True, type='InfiniteSampler'))
train_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(reduce_zero_label=True, type='LoadAnnotations'),
    dict(
        max_size=2048,
        resize_type='ResizeShortestEdge',
        scales=[
            256,
            307,
            358,
            409,
            460,
            512,
            563,
            614,
            665,
            716,
            768,
            819,
            870,
            921,
            972,
            1024,
        ],
        type='RandomChoiceResize'),
    dict(cat_max_ratio=0.75, crop_size=(
        512,
        512,
    ), type='RandomCrop'),
    dict(prob=0.5, type='RandomFlip'),
    dict(type='PhotoMetricDistortion'),
    dict(type='PackSegInputs'),
]
tta_model = dict(type='SegTTAModel')
tta_pipeline = [
    dict(backend_args=None, type='LoadImageFromFile'),
    dict(
        transforms=[
            [
                dict(keep_ratio=True, scale_factor=0.5, type='Resize'),
                dict(keep_ratio=True, scale_factor=0.75, type='Resize'),
                dict(keep_ratio=True, scale_factor=1.0, type='Resize'),
                dict(keep_ratio=True, scale_factor=1.25, type='Resize'),
                dict(keep_ratio=True, scale_factor=1.5, type='Resize'),
                dict(keep_ratio=True, scale_factor=1.75, type='Resize'),
            ],
            [
                dict(direction='horizontal', prob=0.0, type='RandomFlip'),
                dict(direction='horizontal', prob=1.0, type='RandomFlip'),
            ],
            [
                dict(type='LoadAnnotations'),
            ],
            [
                dict(type='PackSegInputs'),
            ],
        ],
        type='TestTimeAug'),
]
val_cfg = dict(type='ValLoop')
val_dataloader = dict(
    batch_size=1,
    dataset=dict(
        data_prefix=dict(
            img_path='images/validation',
            seg_map_path='annotations/validation'),
        data_root='data/ade/ADEChallengeData2016',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(keep_ratio=True, scale=(
                2048,
                512,
            ), type='Resize'),
            dict(reduce_zero_label=True, type='LoadAnnotations'),
            dict(type='PackSegInputs'),
        ],
        type='ADE20KDataset'),
    num_workers=4,
    persistent_workers=True,
    sampler=dict(shuffle=False, type='DefaultSampler'))
val_evaluator = dict(
    iou_metrics=[
        'mIoU',
    ], type='IoUMetric')
vis_backends = [
    dict(type='LocalVisBackend'),
]
visualizer = dict(
    name='visualizer',
    type='SegLocalVisualizer',
    vis_backends=[
        dict(type='LocalVisBackend'),
    ])
work_dir = '../corruptions/work_dirs/ade20k/mask2former/mask2former_r50_8xb2-160k_ade20k-512x512/shot_noise'

09/21 00:57:35 - mmengine - INFO - Distributed training is not used, all SyncBatchNorm (SyncBN) layers in the model will be automatically reverted to BatchNormXd layers if they are used.
09/21 00:57:35 - mmengine - INFO - Hooks will be executed in the following order:
before_run:
(VERY_HIGH   ) RuntimeInfoHook                    
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
before_train:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_train_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(NORMAL      ) DistSamplerSeedHook                
 -------------------- 
before_train_iter:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_train_iter:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(NORMAL      ) SegVisualizationHook               
(BELOW_NORMAL) LoggerHook                         
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
after_train_epoch:
(NORMAL      ) IterTimerHook                      
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_val:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
before_val_epoch:
(NORMAL      ) IterTimerHook                      
 -------------------- 
before_val_iter:
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_val_iter:
(NORMAL      ) IterTimerHook                      
(NORMAL      ) SegVisualizationHook               
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_val_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
after_val:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
after_train:
(VERY_HIGH   ) RuntimeInfoHook                    
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_test:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
before_test_epoch:
(NORMAL      ) IterTimerHook                      
 -------------------- 
before_test_iter:
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_test_iter:
(NORMAL      ) IterTimerHook                      
(NORMAL      ) SegVisualizationHook               
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_test_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_test:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
after_run:
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
09/21 00:57:35 - mmengine - WARNING - The prefix is not set in metric class IoUMetric.
Loads checkpoint by local backend from path: ../checkpoint_files/ade20k/mask2former/mask2former_r50_8xb2-160k_ade20k-512x512_20221204_000055-2d1f55f1.pth
09/21 00:57:37 - mmengine - INFO - Load checkpoint from ../checkpoint_files/ade20k/mask2former/mask2former_r50_8xb2-160k_ade20k-512x512_20221204_000055-2d1f55f1.pth
09/21 00:59:26 - mmengine - INFO - Iter(test) [  50/2000]    eta: 1:10:36  time: 1.1256  data_time: 0.0015  memory: 17167  
09/21 00:59:49 - mmengine - INFO - Iter(test) [ 100/2000]    eta: 0:41:53  time: 0.7193  data_time: 0.0015  memory: 17158  
09/21 00:59:58 - mmengine - INFO - Iter(test) [ 150/2000]    eta: 0:28:59  time: 0.1719  data_time: 0.0015  memory: 872  
09/21 01:00:18 - mmengine - INFO - Iter(test) [ 200/2000]    eta: 0:24:09  time: 0.1869  data_time: 0.0015  memory: 17214  
09/21 01:00:34 - mmengine - INFO - Iter(test) [ 250/2000]    eta: 0:20:36  time: 0.1652  data_time: 0.0014  memory: 17221  
09/21 01:00:47 - mmengine - INFO - Iter(test) [ 300/2000]    eta: 0:17:57  time: 0.1944  data_time: 0.0015  memory: 17162  
09/21 01:01:06 - mmengine - INFO - Iter(test) [ 350/2000]    eta: 0:16:23  time: 0.2705  data_time: 0.0014  memory: 17165  
09/21 01:01:20 - mmengine - INFO - Iter(test) [ 400/2000]    eta: 0:14:51  time: 0.1657  data_time: 0.0014  memory: 17147  
09/21 01:01:29 - mmengine - INFO - Iter(test) [ 450/2000]    eta: 0:13:18  time: 0.1737  data_time: 0.0014  memory: 883  
09/21 01:01:38 - mmengine - INFO - Iter(test) [ 500/2000]    eta: 0:12:02  time: 0.1599  data_time: 0.0014  memory: 872  
09/21 01:01:48 - mmengine - INFO - Iter(test) [ 550/2000]    eta: 0:11:00  time: 0.1723  data_time: 0.0015  memory: 983  
09/21 01:01:56 - mmengine - INFO - Iter(test) [ 600/2000]    eta: 0:10:04  time: 0.1723  data_time: 0.0015  memory: 981  
09/21 01:02:09 - mmengine - INFO - Iter(test) [ 650/2000]    eta: 0:09:24  time: 0.6384  data_time: 0.0013  memory: 17168  
09/21 01:02:24 - mmengine - INFO - Iter(test) [ 700/2000]    eta: 0:08:52  time: 0.1812  data_time: 0.0015  memory: 17163  
09/21 01:02:33 - mmengine - INFO - Iter(test) [ 750/2000]    eta: 0:08:13  time: 0.1781  data_time: 0.0014  memory: 1039  
09/21 01:02:42 - mmengine - INFO - Iter(test) [ 800/2000]    eta: 0:07:37  time: 0.1677  data_time: 0.0015  memory: 872  
09/21 01:02:51 - mmengine - INFO - Iter(test) [ 850/2000]    eta: 0:07:05  time: 0.1699  data_time: 0.0016  memory: 844  
09/21 01:02:59 - mmengine - INFO - Iter(test) [ 900/2000]    eta: 0:06:33  time: 0.1511  data_time: 0.0014  memory: 925  
09/21 01:03:09 - mmengine - INFO - Iter(test) [ 950/2000]    eta: 0:06:06  time: 0.1659  data_time: 0.0015  memory: 955  
09/21 01:03:17 - mmengine - INFO - Iter(test) [1000/2000]    eta: 0:05:40  time: 0.1792  data_time: 0.0014  memory: 955  
09/21 01:03:31 - mmengine - INFO - Iter(test) [1050/2000]    eta: 0:05:20  time: 0.1816  data_time: 0.0015  memory: 17170  
09/21 01:03:40 - mmengine - INFO - Iter(test) [1100/2000]    eta: 0:04:56  time: 0.1861  data_time: 0.0015  memory: 952  
09/21 01:03:50 - mmengine - INFO - Iter(test) [1150/2000]    eta: 0:04:35  time: 0.1898  data_time: 0.0015  memory: 924  
09/21 01:04:00 - mmengine - INFO - Iter(test) [1200/2000]    eta: 0:04:15  time: 0.1841  data_time: 0.0015  memory: 1829  
09/21 01:04:14 - mmengine - INFO - Iter(test) [1250/2000]    eta: 0:03:58  time: 0.1840  data_time: 0.0014  memory: 17158  
09/21 01:04:24 - mmengine - INFO - Iter(test) [1300/2000]    eta: 0:03:39  time: 0.1816  data_time: 0.0015  memory: 872  
09/21 01:04:35 - mmengine - INFO - Iter(test) [1350/2000]    eta: 0:03:21  time: 0.2263  data_time: 0.0014  memory: 872  
09/21 01:04:46 - mmengine - INFO - Iter(test) [1400/2000]    eta: 0:03:03  time: 0.1988  data_time: 0.0014  memory: 953  
09/21 01:04:56 - mmengine - INFO - Iter(test) [1450/2000]    eta: 0:02:46  time: 0.2490  data_time: 0.0014  memory: 955  
09/21 01:05:06 - mmengine - INFO - Iter(test) [1500/2000]    eta: 0:02:29  time: 0.1873  data_time: 0.0014  memory: 869  
09/21 01:05:17 - mmengine - INFO - Iter(test) [1550/2000]    eta: 0:02:13  time: 0.2345  data_time: 0.0015  memory: 955  
09/21 01:05:28 - mmengine - INFO - Iter(test) [1600/2000]    eta: 0:01:57  time: 0.1758  data_time: 0.0016  memory: 844  
09/21 01:05:43 - mmengine - INFO - Iter(test) [1650/2000]    eta: 0:01:43  time: 0.2009  data_time: 0.0013  memory: 17165  
09/21 01:05:54 - mmengine - INFO - Iter(test) [1700/2000]    eta: 0:01:27  time: 0.2306  data_time: 0.0016  memory: 952  
09/21 01:06:04 - mmengine - INFO - Iter(test) [1750/2000]    eta: 0:01:12  time: 0.1708  data_time: 0.0014  memory: 980  
09/21 01:06:14 - mmengine - INFO - Iter(test) [1800/2000]    eta: 0:00:57  time: 0.1723  data_time: 0.0016  memory: 872  
09/21 01:06:23 - mmengine - INFO - Iter(test) [1850/2000]    eta: 0:00:42  time: 0.1702  data_time: 0.0016  memory: 787  
09/21 01:06:33 - mmengine - INFO - Iter(test) [1900/2000]    eta: 0:00:28  time: 0.1819  data_time: 0.0014  memory: 1011  
09/21 01:06:43 - mmengine - INFO - Iter(test) [1950/2000]    eta: 0:00:13  time: 0.2293  data_time: 0.0014  memory: 1258  
09/21 01:06:53 - mmengine - INFO - Iter(test) [2000/2000]    eta: 0:00:00  time: 0.1869  data_time: 0.0013  memory: 1037  
09/21 01:06:53 - mmengine - INFO - per class results:
09/21 01:06:53 - mmengine - INFO - 
+---------------------+-------+-------+
|        Class        |  IoU  |  Acc  |
+---------------------+-------+-------+
|         wall        |  62.2 |  84.7 |
|       building      | 73.79 | 84.01 |
|         sky         | 87.86 |  91.3 |
|        floor        | 66.46 | 84.76 |
|         tree        | 65.55 | 85.06 |
|       ceiling       |  72.1 | 86.12 |
|         road        | 70.35 | 79.34 |
|         bed         | 72.17 |  78.2 |
|      windowpane     | 40.93 | 53.31 |
|        grass        | 57.45 | 70.07 |
|       cabinet       | 44.49 | 57.81 |
|       sidewalk      | 36.98 | 40.78 |
|        person       |  69.7 | 88.81 |
|        earth        | 23.92 | 56.27 |
|         door        | 25.34 | 49.98 |
|        table        | 48.82 | 60.32 |
|       mountain      | 37.65 | 47.47 |
|        plant        | 36.46 | 46.47 |
|       curtain       | 43.92 | 65.13 |
|        chair        | 47.58 | 59.11 |
|         car         | 77.78 | 83.96 |
|        water        | 35.44 | 53.86 |
|       painting      |  56.2 | 63.09 |
|         sofa        | 49.19 | 67.12 |
|        shelf        | 30.56 | 46.04 |
|        house        | 28.02 | 44.95 |
|         sea         | 15.78 | 21.15 |
|        mirror       | 33.87 | 37.59 |
|         rug         | 26.95 | 28.15 |
|        field        | 12.06 |  25.7 |
|       armchair      | 26.03 | 42.87 |
|         seat        | 25.46 | 66.63 |
|        fence        | 29.82 | 44.87 |
|         desk        | 17.16 | 20.12 |
|         rock        | 30.34 | 37.97 |
|       wardrobe      | 32.92 | 37.37 |
|         lamp        | 45.11 | 51.27 |
|       bathtub       | 29.89 |  40.8 |
|       railing       | 24.13 | 37.08 |
|       cushion       | 35.27 | 42.82 |
|         base        | 10.78 | 17.42 |
|         box         |  7.99 |  9.8  |
|        column       | 34.46 | 61.44 |
|      signboard      | 30.07 | 35.54 |
|   chest of drawers  | 29.57 | 33.21 |
|       counter       | 16.44 | 21.52 |
|         sand        |  6.34 |  9.6  |
|         sink        | 41.95 | 47.19 |
|      skyscraper     | 40.99 | 45.96 |
|      fireplace      | 40.61 | 53.81 |
|     refrigerator    | 40.26 | 44.48 |
|      grandstand     | 15.41 | 54.06 |
|         path        | 21.74 | 34.66 |
|        stairs       | 15.53 | 40.58 |
|        runway       | 50.13 | 56.47 |
|         case        | 33.02 | 37.76 |
|      pool table     | 84.01 | 95.63 |
|        pillow       | 39.99 | 47.61 |
|     screen door     | 22.69 | 31.41 |
|       stairway      | 31.43 | 43.32 |
|        river        |  0.0  |  0.0  |
|        bridge       | 20.92 | 23.52 |
|       bookcase      |  9.53 |  9.88 |
|        blind        |  1.41 |  1.45 |
|     coffee table    | 52.35 | 63.34 |
|        toilet       | 46.01 | 51.56 |
|        flower       | 20.52 | 33.92 |
|         book        | 20.11 | 24.69 |
|         hill        |  3.51 |  5.23 |
|        bench        | 14.89 | 29.74 |
|      countertop     | 29.23 | 33.48 |
|        stove        | 39.34 | 45.13 |
|         palm        | 31.33 |  33.7 |
|    kitchen island   | 26.31 | 47.47 |
|       computer      | 31.86 | 32.87 |
|     swivel chair    | 33.73 | 40.39 |
|         boat        | 16.91 |  17.1 |
|         bar         | 30.39 | 39.16 |
|    arcade machine   | 12.33 | 31.86 |
|        hovel        | 15.32 | 46.67 |
|         bus         | 62.86 | 75.05 |
|        towel        | 18.05 | 19.45 |
|        light        | 41.06 | 48.16 |
|        truck        | 19.68 | 38.71 |
|        tower        |  3.93 |  6.81 |
|      chandelier     | 41.81 | 48.15 |
|        awning       | 13.54 |  13.8 |
|     streetlight     | 25.79 | 35.28 |
|        booth        | 59.63 | 68.33 |
| television receiver | 43.77 | 51.86 |
|       airplane      | 33.44 | 37.12 |
|      dirt track     |  5.51 | 35.38 |
|       apparel       | 24.85 | 33.88 |
|         pole        | 14.99 | 27.66 |
|         land        |  3.18 |  4.99 |
|      bannister      |  4.3  |  8.46 |
|      escalator      | 14.95 | 15.46 |
|       ottoman       | 12.76 | 20.02 |
|        bottle       | 11.47 | 14.46 |
|        buffet       |  35.1 | 42.31 |
|        poster       |  5.73 |  6.72 |
|        stage        |  4.22 | 10.75 |
|         van         | 14.07 | 16.99 |
|         ship        |  6.37 |  6.39 |
|       fountain      | 17.12 | 19.58 |
|    conveyer belt    | 41.61 | 63.31 |
|        canopy       | 21.94 | 27.47 |
|        washer       | 26.22 | 26.23 |
|      plaything      |  6.57 |  7.18 |
|    swimming pool    | 23.03 |  39.6 |
|        stool        | 31.23 | 60.91 |
|        barrel       |  1.58 |  9.33 |
|        basket       | 15.21 | 16.91 |
|      waterfall      | 26.81 | 28.28 |
|         tent        |  0.0  |  0.0  |
|         bag         |  3.72 |  4.12 |
|       minibike      | 36.15 | 42.67 |
|        cradle       | 48.62 | 62.52 |
|         oven        | 35.34 | 47.03 |
|         ball        | 14.33 | 61.36 |
|         food        | 37.42 | 45.27 |
|         step        |  1.78 |  5.44 |
|         tank        | 24.42 | 24.75 |
|      trade name     | 14.92 | 17.05 |
|      microwave      | 16.28 | 16.44 |
|         pot         | 34.23 | 37.45 |
|        animal       |  37.9 | 49.69 |
|       bicycle       | 39.33 | 65.18 |
|         lake        |  0.0  |  0.0  |
|      dishwasher     | 30.91 |  31.5 |
|        screen       |  57.3 | 59.22 |
|       blanket       |  5.0  |  6.15 |
|      sculpture      |  8.43 | 17.22 |
|         hood        | 35.94 | 36.89 |
|        sconce       | 15.59 |  17.7 |
|         vase        | 26.47 | 33.46 |
|    traffic light    |  16.9 | 23.41 |
|         tray        |  4.32 |  7.19 |
|        ashcan       | 25.77 | 30.56 |
|         fan         | 49.72 | 61.61 |
|         pier        | 14.22 | 14.38 |
|      crt screen     |  9.98 | 34.65 |
|        plate        | 38.99 | 47.79 |
|       monitor       |  0.15 |  0.15 |
|    bulletin board   | 12.41 | 15.42 |
|        shower       |  1.98 |  8.85 |
|       radiator      |  2.85 |  2.86 |
|        glass        |  8.6  |  9.37 |
|        clock        | 18.97 | 24.31 |
|         flag        | 13.25 | 14.67 |
+---------------------+-------+-------+
09/21 01:06:53 - mmengine - INFO - Iter(test) [2000/2000]    aAcc: 71.2800  mIoU: 28.6000  mAcc: 37.7100  data_time: 0.0016  time: 0.2779
Finished processing corruption type: shot_noise
Processing corruption type: impulse_noise
09/21 01:07:31 - mmengine - INFO - 
------------------------------------------------------------
System environment:
    sys.platform: linux
    Python: 3.10.13 | packaged by conda-forge | (main, Dec 23 2023, 15:36:39) [GCC 12.3.0]
    CUDA available: True
    MUSA available: False
    numpy_random_seed: 2254128
    GPU 0: Tesla V100-SXM2-32GB
    CUDA_HOME: /opt/bwhpc/common/devel/cuda/11.7
    NVCC: Cuda compilation tools, release 11.7, V11.7.99
    GCC: gcc (GCC) 8.5.0 20210514 (Red Hat 8.5.0-18)
    PyTorch: 1.13.1
    PyTorch compiling details: PyTorch built with:
  - GCC 9.3
  - C++ Version: 201402
  - Intel(R) oneAPI Math Kernel Library Version 2023.1-Product Build 20230303 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v2.6.0 (Git Hash 52b5f107dd9cf10910aaa19cb47f3abf9b349815)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - LAPACK is enabled (usually provided by MKL)
  - NNPACK is enabled
  - CPU capability usage: AVX2
  - CUDA Runtime 11.7
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_61,code=sm_61;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86;-gencode;arch=compute_37,code=compute_37
  - CuDNN 8.5
  - Magma 2.6.1
  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.7, CUDNN_VERSION=8.5.0, CXX_COMPILER=/opt/rh/devtoolset-9/root/usr/bin/c++, CXX_FLAGS= -fabi-version=11 -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -DEDGE_PROFILER_USE_KINETO -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Werror=non-virtual-dtor -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wunused-local-typedefs -Wno-unused-parameter -Wno-unused-function -Wno-unused-result -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Werror=cast-function-type -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.13.1, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, USE_ROCM=OFF, 

    TorchVision: 0.14.1
    OpenCV: 3.4.18
    MMEngine: 0.10.4

Runtime environment:
    cudnn_benchmark: True
    mp_cfg: {'mp_start_method': 'fork', 'opencv_num_threads': 0}
    dist_cfg: {'backend': 'nccl'}
    seed: 2254128
    Distributed launcher: none
    Distributed training: False
    GPU number: 1
------------------------------------------------------------

09/21 01:07:32 - mmengine - INFO - Config:
auto_scale_lr = dict(base_batch_size=16, enable=False)
crop_size = (
    512,
    512,
)
custom_imports = dict(allow_failed_imports=False, imports='mmdet.models')
data_root = 'data/ade/ADEChallengeData2016'
dataset_type = 'ADE20KDataset'
default_hooks = dict(
    checkpoint=dict(
        by_epoch=False, interval=5000, save_best='mIoU',
        type='CheckpointHook'),
    logger=dict(interval=50, log_metric_by_epoch=False, type='LoggerHook'),
    param_scheduler=dict(type='ParamSchedulerHook'),
    sampler_seed=dict(type='DistSamplerSeedHook'),
    timer=dict(type='IterTimerHook'),
    visualization=dict(type='SegVisualizationHook'))
default_scope = 'mmseg'
embed_multi = dict(decay_mult=0.0, lr_mult=1.0)
env_cfg = dict(
    cudnn_benchmark=True,
    dist_cfg=dict(backend='nccl'),
    mp_cfg=dict(mp_start_method='fork', opencv_num_threads=0))
img_ratios = [
    0.5,
    0.75,
    1.0,
    1.25,
    1.5,
    1.75,
]
launcher = 'none'
load_from = '../checkpoint_files/ade20k/mask2former/mask2former_r50_8xb2-160k_ade20k-512x512_20221204_000055-2d1f55f1.pth'
log_level = 'INFO'
log_processor = dict(by_epoch=False)
model = dict(
    backbone=dict(
        deep_stem=False,
        depth=50,
        frozen_stages=-1,
        init_cfg=dict(checkpoint='torchvision://resnet50', type='Pretrained'),
        norm_cfg=dict(requires_grad=False, type='SyncBN'),
        num_stages=4,
        out_indices=(
            0,
            1,
            2,
            3,
        ),
        style='pytorch',
        type='ResNet'),
    data_preprocessor=dict(
        bgr_to_rgb=True,
        corruption='impulse_noise',
        mean=[
            123.675,
            116.28,
            103.53,
        ],
        pad_val=0,
        seg_pad_val=255,
        size=(
            512,
            512,
        ),
        std=[
            58.395,
            57.12,
            57.375,
        ],
        test_cfg=dict(size_divisor=32),
        type='SegDataPreProcessor'),
    decode_head=dict(
        align_corners=False,
        enforce_decoder_input_project=False,
        feat_channels=256,
        in_channels=[
            256,
            512,
            1024,
            2048,
        ],
        loss_cls=dict(
            class_weight=[
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                0.1,
            ],
            loss_weight=2.0,
            reduction='mean',
            type='mmdet.CrossEntropyLoss',
            use_sigmoid=False),
        loss_dice=dict(
            activate=True,
            eps=1.0,
            loss_weight=5.0,
            naive_dice=True,
            reduction='mean',
            type='mmdet.DiceLoss',
            use_sigmoid=True),
        loss_mask=dict(
            loss_weight=5.0,
            reduction='mean',
            type='mmdet.CrossEntropyLoss',
            use_sigmoid=True),
        num_classes=150,
        num_queries=100,
        num_transformer_feat_level=3,
        out_channels=256,
        pixel_decoder=dict(
            act_cfg=dict(type='ReLU'),
            encoder=dict(
                init_cfg=None,
                layer_cfg=dict(
                    ffn_cfg=dict(
                        act_cfg=dict(inplace=True, type='ReLU'),
                        embed_dims=256,
                        feedforward_channels=1024,
                        ffn_drop=0.0,
                        num_fcs=2),
                    self_attn_cfg=dict(
                        batch_first=True,
                        dropout=0.0,
                        embed_dims=256,
                        im2col_step=64,
                        init_cfg=None,
                        norm_cfg=None,
                        num_heads=8,
                        num_levels=3,
                        num_points=4)),
                num_layers=6),
            init_cfg=None,
            norm_cfg=dict(num_groups=32, type='GN'),
            num_outs=3,
            positional_encoding=dict(normalize=True, num_feats=128),
            type='mmdet.MSDeformAttnPixelDecoder'),
        positional_encoding=dict(normalize=True, num_feats=128),
        strides=[
            4,
            8,
            16,
            32,
        ],
        train_cfg=dict(
            assigner=dict(
                match_costs=[
                    dict(type='mmdet.ClassificationCost', weight=2.0),
                    dict(
                        type='mmdet.CrossEntropyLossCost',
                        use_sigmoid=True,
                        weight=5.0),
                    dict(
                        eps=1.0,
                        pred_act=True,
                        type='mmdet.DiceCost',
                        weight=5.0),
                ],
                type='mmdet.HungarianAssigner'),
            importance_sample_ratio=0.75,
            num_points=12544,
            oversample_ratio=3.0,
            sampler=dict(type='mmdet.MaskPseudoSampler')),
        transformer_decoder=dict(
            init_cfg=None,
            layer_cfg=dict(
                cross_attn_cfg=dict(
                    attn_drop=0.0,
                    batch_first=True,
                    dropout_layer=None,
                    embed_dims=256,
                    num_heads=8,
                    proj_drop=0.0),
                ffn_cfg=dict(
                    act_cfg=dict(inplace=True, type='ReLU'),
                    add_identity=True,
                    dropout_layer=None,
                    embed_dims=256,
                    feedforward_channels=2048,
                    ffn_drop=0.0,
                    num_fcs=2),
                self_attn_cfg=dict(
                    attn_drop=0.0,
                    batch_first=True,
                    dropout_layer=None,
                    embed_dims=256,
                    num_heads=8,
                    proj_drop=0.0)),
            num_layers=9,
            return_intermediate=True),
        type='Mask2FormerHead'),
    test_cfg=dict(mode='whole'),
    train_cfg=dict(),
    type='EncoderDecoder')
num_classes = 150
optim_wrapper = dict(
    clip_grad=dict(max_norm=0.01, norm_type=2),
    optimizer=dict(
        betas=(
            0.9,
            0.999,
        ),
        eps=1e-08,
        lr=0.0001,
        type='AdamW',
        weight_decay=0.05),
    paramwise_cfg=dict(
        custom_keys=dict(
            backbone=dict(decay_mult=1.0, lr_mult=0.1),
            level_embed=dict(decay_mult=0.0, lr_mult=1.0),
            query_embed=dict(decay_mult=0.0, lr_mult=1.0),
            query_feat=dict(decay_mult=0.0, lr_mult=1.0)),
        norm_decay_mult=0.0),
    type='OptimWrapper')
optimizer = dict(
    betas=(
        0.9,
        0.999,
    ),
    eps=1e-08,
    lr=0.0001,
    type='AdamW',
    weight_decay=0.05)
param_scheduler = [
    dict(
        begin=0,
        by_epoch=False,
        end=160000,
        eta_min=0,
        power=0.9,
        type='PolyLR'),
]
resume = False
test_cfg = dict(type='TestLoop')
test_dataloader = dict(
    batch_size=1,
    dataset=dict(
        data_prefix=dict(
            img_path='images/validation',
            seg_map_path='annotations/validation'),
        data_root='data/ade/ADEChallengeData2016',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(keep_ratio=True, scale=(
                2048,
                512,
            ), type='Resize'),
            dict(reduce_zero_label=True, type='LoadAnnotations'),
            dict(type='PackSegInputs'),
        ],
        type='ADE20KDataset'),
    num_workers=4,
    persistent_workers=True,
    sampler=dict(shuffle=False, type='DefaultSampler'))
test_evaluator = dict(
    iou_metrics=[
        'mIoU',
    ], type='IoUMetric')
test_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(keep_ratio=True, scale=(
        2048,
        512,
    ), type='Resize'),
    dict(reduce_zero_label=True, type='LoadAnnotations'),
    dict(type='PackSegInputs'),
]
train_cfg = dict(
    max_iters=160000, type='IterBasedTrainLoop', val_interval=5000)
train_dataloader = dict(
    batch_size=2,
    dataset=dict(
        data_prefix=dict(
            img_path='images/training', seg_map_path='annotations/training'),
        data_root='data/ade/ADEChallengeData2016',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(reduce_zero_label=True, type='LoadAnnotations'),
            dict(
                max_size=2048,
                resize_type='ResizeShortestEdge',
                scales=[
                    256,
                    307,
                    358,
                    409,
                    460,
                    512,
                    563,
                    614,
                    665,
                    716,
                    768,
                    819,
                    870,
                    921,
                    972,
                    1024,
                ],
                type='RandomChoiceResize'),
            dict(
                cat_max_ratio=0.75, crop_size=(
                    512,
                    512,
                ), type='RandomCrop'),
            dict(prob=0.5, type='RandomFlip'),
            dict(type='PhotoMetricDistortion'),
            dict(type='PackSegInputs'),
        ],
        type='ADE20KDataset'),
    num_workers=4,
    persistent_workers=True,
    sampler=dict(shuffle=True, type='InfiniteSampler'))
train_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(reduce_zero_label=True, type='LoadAnnotations'),
    dict(
        max_size=2048,
        resize_type='ResizeShortestEdge',
        scales=[
            256,
            307,
            358,
            409,
            460,
            512,
            563,
            614,
            665,
            716,
            768,
            819,
            870,
            921,
            972,
            1024,
        ],
        type='RandomChoiceResize'),
    dict(cat_max_ratio=0.75, crop_size=(
        512,
        512,
    ), type='RandomCrop'),
    dict(prob=0.5, type='RandomFlip'),
    dict(type='PhotoMetricDistortion'),
    dict(type='PackSegInputs'),
]
tta_model = dict(type='SegTTAModel')
tta_pipeline = [
    dict(backend_args=None, type='LoadImageFromFile'),
    dict(
        transforms=[
            [
                dict(keep_ratio=True, scale_factor=0.5, type='Resize'),
                dict(keep_ratio=True, scale_factor=0.75, type='Resize'),
                dict(keep_ratio=True, scale_factor=1.0, type='Resize'),
                dict(keep_ratio=True, scale_factor=1.25, type='Resize'),
                dict(keep_ratio=True, scale_factor=1.5, type='Resize'),
                dict(keep_ratio=True, scale_factor=1.75, type='Resize'),
            ],
            [
                dict(direction='horizontal', prob=0.0, type='RandomFlip'),
                dict(direction='horizontal', prob=1.0, type='RandomFlip'),
            ],
            [
                dict(type='LoadAnnotations'),
            ],
            [
                dict(type='PackSegInputs'),
            ],
        ],
        type='TestTimeAug'),
]
val_cfg = dict(type='ValLoop')
val_dataloader = dict(
    batch_size=1,
    dataset=dict(
        data_prefix=dict(
            img_path='images/validation',
            seg_map_path='annotations/validation'),
        data_root='data/ade/ADEChallengeData2016',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(keep_ratio=True, scale=(
                2048,
                512,
            ), type='Resize'),
            dict(reduce_zero_label=True, type='LoadAnnotations'),
            dict(type='PackSegInputs'),
        ],
        type='ADE20KDataset'),
    num_workers=4,
    persistent_workers=True,
    sampler=dict(shuffle=False, type='DefaultSampler'))
val_evaluator = dict(
    iou_metrics=[
        'mIoU',
    ], type='IoUMetric')
vis_backends = [
    dict(type='LocalVisBackend'),
]
visualizer = dict(
    name='visualizer',
    type='SegLocalVisualizer',
    vis_backends=[
        dict(type='LocalVisBackend'),
    ])
work_dir = '../corruptions/work_dirs/ade20k/mask2former/mask2former_r50_8xb2-160k_ade20k-512x512/impulse_noise'

09/21 01:07:34 - mmengine - INFO - Distributed training is not used, all SyncBatchNorm (SyncBN) layers in the model will be automatically reverted to BatchNormXd layers if they are used.
09/21 01:07:34 - mmengine - INFO - Hooks will be executed in the following order:
before_run:
(VERY_HIGH   ) RuntimeInfoHook                    
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
before_train:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_train_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(NORMAL      ) DistSamplerSeedHook                
 -------------------- 
before_train_iter:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_train_iter:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(NORMAL      ) SegVisualizationHook               
(BELOW_NORMAL) LoggerHook                         
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
after_train_epoch:
(NORMAL      ) IterTimerHook                      
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_val:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
before_val_epoch:
(NORMAL      ) IterTimerHook                      
 -------------------- 
before_val_iter:
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_val_iter:
(NORMAL      ) IterTimerHook                      
(NORMAL      ) SegVisualizationHook               
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_val_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
after_val:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
after_train:
(VERY_HIGH   ) RuntimeInfoHook                    
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_test:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
before_test_epoch:
(NORMAL      ) IterTimerHook                      
 -------------------- 
before_test_iter:
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_test_iter:
(NORMAL      ) IterTimerHook                      
(NORMAL      ) SegVisualizationHook               
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_test_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_test:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
after_run:
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
09/21 01:07:35 - mmengine - WARNING - The prefix is not set in metric class IoUMetric.
Loads checkpoint by local backend from path: ../checkpoint_files/ade20k/mask2former/mask2former_r50_8xb2-160k_ade20k-512x512_20221204_000055-2d1f55f1.pth
09/21 01:07:36 - mmengine - INFO - Load checkpoint from ../checkpoint_files/ade20k/mask2former/mask2former_r50_8xb2-160k_ade20k-512x512_20221204_000055-2d1f55f1.pth
09/21 01:08:49 - mmengine - INFO - Iter(test) [  50/2000]    eta: 0:47:19  time: 1.0095  data_time: 0.0014  memory: 17167  
09/21 01:09:08 - mmengine - INFO - Iter(test) [ 100/2000]    eta: 0:29:10  time: 0.6411  data_time: 0.0015  memory: 17158  
09/21 01:09:13 - mmengine - INFO - Iter(test) [ 150/2000]    eta: 0:19:59  time: 0.0779  data_time: 0.0014  memory: 872  
09/21 01:09:27 - mmengine - INFO - Iter(test) [ 200/2000]    eta: 0:16:41  time: 0.0746  data_time: 0.0014  memory: 17214  
09/21 01:09:38 - mmengine - INFO - Iter(test) [ 250/2000]    eta: 0:14:13  time: 0.0758  data_time: 0.0014  memory: 17221  
09/21 01:09:47 - mmengine - INFO - Iter(test) [ 300/2000]    eta: 0:12:21  time: 0.0754  data_time: 0.0015  memory: 17162  
09/21 01:10:00 - mmengine - INFO - Iter(test) [ 350/2000]    eta: 0:11:20  time: 0.1096  data_time: 0.0014  memory: 17165  
09/21 01:10:09 - mmengine - INFO - Iter(test) [ 400/2000]    eta: 0:10:13  time: 0.0735  data_time: 0.0013  memory: 17147  
09/21 01:10:13 - mmengine - INFO - Iter(test) [ 450/2000]    eta: 0:08:59  time: 0.0702  data_time: 0.0013  memory: 883  
09/21 01:10:16 - mmengine - INFO - Iter(test) [ 500/2000]    eta: 0:08:01  time: 0.0707  data_time: 0.0014  memory: 872  
09/21 01:10:20 - mmengine - INFO - Iter(test) [ 550/2000]    eta: 0:07:13  time: 0.0768  data_time: 0.0014  memory: 983  
09/21 01:10:25 - mmengine - INFO - Iter(test) [ 600/2000]    eta: 0:06:34  time: 0.0758  data_time: 0.0015  memory: 981  
09/21 01:10:35 - mmengine - INFO - Iter(test) [ 650/2000]    eta: 0:06:11  time: 0.5629  data_time: 0.0013  memory: 17168  
09/21 01:10:43 - mmengine - INFO - Iter(test) [ 700/2000]    eta: 0:05:48  time: 0.0752  data_time: 0.0015  memory: 17163  
09/21 01:10:48 - mmengine - INFO - Iter(test) [ 750/2000]    eta: 0:05:19  time: 0.0846  data_time: 0.0013  memory: 1039  
09/21 01:10:52 - mmengine - INFO - Iter(test) [ 800/2000]    eta: 0:04:54  time: 0.0715  data_time: 0.0015  memory: 872  
09/21 01:10:57 - mmengine - INFO - Iter(test) [ 850/2000]    eta: 0:04:31  time: 0.0730  data_time: 0.0015  memory: 844  
09/21 01:11:00 - mmengine - INFO - Iter(test) [ 900/2000]    eta: 0:04:09  time: 0.0674  data_time: 0.0013  memory: 925  
09/21 01:11:04 - mmengine - INFO - Iter(test) [ 950/2000]    eta: 0:03:50  time: 0.0749  data_time: 0.0014  memory: 955  
09/21 01:11:09 - mmengine - INFO - Iter(test) [1000/2000]    eta: 0:03:32  time: 0.1406  data_time: 0.0014  memory: 955  
09/21 01:11:19 - mmengine - INFO - Iter(test) [1050/2000]    eta: 0:03:21  time: 0.1498  data_time: 0.0014  memory: 17170  
09/21 01:11:23 - mmengine - INFO - Iter(test) [1100/2000]    eta: 0:03:05  time: 0.0735  data_time: 0.0014  memory: 952  
09/21 01:11:27 - mmengine - INFO - Iter(test) [1150/2000]    eta: 0:02:50  time: 0.0737  data_time: 0.0014  memory: 924  
09/21 01:11:32 - mmengine - INFO - Iter(test) [1200/2000]    eta: 0:02:37  time: 0.0713  data_time: 0.0014  memory: 1829  
09/21 01:11:41 - mmengine - INFO - Iter(test) [1250/2000]    eta: 0:02:27  time: 0.0725  data_time: 0.0013  memory: 17158  
09/21 01:11:45 - mmengine - INFO - Iter(test) [1300/2000]    eta: 0:02:14  time: 0.0735  data_time: 0.0014  memory: 872  
09/21 01:11:49 - mmengine - INFO - Iter(test) [1350/2000]    eta: 0:02:01  time: 0.0675  data_time: 0.0014  memory: 872  
09/21 01:11:54 - mmengine - INFO - Iter(test) [1400/2000]    eta: 0:01:50  time: 0.1242  data_time: 0.0014  memory: 953  
09/21 01:11:59 - mmengine - INFO - Iter(test) [1450/2000]    eta: 0:01:39  time: 0.0765  data_time: 0.0013  memory: 955  
09/21 01:12:07 - mmengine - INFO - Iter(test) [1500/2000]    eta: 0:01:30  time: 0.0853  data_time: 0.0013  memory: 869  
09/21 01:12:13 - mmengine - INFO - Iter(test) [1550/2000]    eta: 0:01:20  time: 0.1038  data_time: 0.0014  memory: 955  
09/21 01:12:16 - mmengine - INFO - Iter(test) [1600/2000]    eta: 0:01:09  time: 0.0724  data_time: 0.0015  memory: 844  
09/21 01:12:24 - mmengine - INFO - Iter(test) [1650/2000]    eta: 0:01:01  time: 0.0688  data_time: 0.0013  memory: 17165  
09/21 01:12:28 - mmengine - INFO - Iter(test) [1700/2000]    eta: 0:00:51  time: 0.0734  data_time: 0.0015  memory: 952  
09/21 01:12:32 - mmengine - INFO - Iter(test) [1750/2000]    eta: 0:00:42  time: 0.0751  data_time: 0.0013  memory: 980  
09/21 01:12:35 - mmengine - INFO - Iter(test) [1800/2000]    eta: 0:00:33  time: 0.0732  data_time: 0.0015  memory: 872  
09/21 01:12:39 - mmengine - INFO - Iter(test) [1850/2000]    eta: 0:00:24  time: 0.0922  data_time: 0.0015  memory: 787  
09/21 01:12:44 - mmengine - INFO - Iter(test) [1900/2000]    eta: 0:00:16  time: 0.1074  data_time: 0.0014  memory: 1011  
09/21 01:12:49 - mmengine - INFO - Iter(test) [1950/2000]    eta: 0:00:08  time: 0.0713  data_time: 0.0014  memory: 1258  
09/21 01:12:53 - mmengine - INFO - Iter(test) [2000/2000]    eta: 0:00:00  time: 0.1407  data_time: 0.0013  memory: 1037  
09/21 01:12:53 - mmengine - INFO - per class results:
09/21 01:12:53 - mmengine - INFO - 
+---------------------+-------+-------+
|        Class        |  IoU  |  Acc  |
+---------------------+-------+-------+
|         wall        | 54.91 | 82.82 |
|       building      | 67.21 | 76.15 |
|         sky         | 84.42 | 90.73 |
|        floor        | 60.91 | 80.72 |
|         tree        | 55.26 | 83.47 |
|       ceiling       | 64.02 | 76.06 |
|         road        | 57.23 | 64.65 |
|         bed         | 66.81 | 79.18 |
|      windowpane     | 37.51 | 49.31 |
|        grass        | 48.55 | 54.95 |
|       cabinet       | 20.04 | 23.08 |
|       sidewalk      | 25.16 | 28.29 |
|        person       | 57.01 | 84.95 |
|        earth        | 20.11 |  49.2 |
|         door        | 13.59 | 22.08 |
|        table        | 40.53 | 54.87 |
|       mountain      | 32.82 | 38.25 |
|        plant        | 30.49 |  48.6 |
|       curtain       | 27.19 | 66.61 |
|        chair        | 34.09 | 42.65 |
|         car         | 73.56 |  81.5 |
|        water        | 26.25 | 69.82 |
|       painting      | 47.48 | 57.09 |
|         sofa        | 45.01 | 60.39 |
|        shelf        | 19.77 | 31.43 |
|        house        | 14.97 | 18.44 |
|         sea         |  7.76 |  9.42 |
|        mirror       | 24.12 | 28.68 |
|         rug         | 12.75 | 13.04 |
|        field        | 13.62 | 21.89 |
|       armchair      | 20.25 | 28.94 |
|         seat        | 13.55 | 36.97 |
|        fence        | 24.95 |  38.2 |
|         desk        |  2.64 |  2.79 |
|         rock        | 25.93 |  33.5 |
|       wardrobe      | 11.71 | 14.22 |
|         lamp        | 37.22 |  40.9 |
|       bathtub       | 17.24 |  38.6 |
|       railing       | 16.79 | 28.56 |
|       cushion       | 34.37 | 41.43 |
|         base        |  6.47 | 11.04 |
|         box         |  5.06 |  6.27 |
|        column       |  18.1 | 55.07 |
|      signboard      | 24.06 | 31.96 |
|   chest of drawers  |  23.4 |  25.1 |
|       counter       | 21.33 | 23.62 |
|         sand        |  5.44 |  6.27 |
|         sink        | 19.22 | 21.03 |
|      skyscraper     | 39.54 | 48.75 |
|      fireplace      | 25.42 | 32.72 |
|     refrigerator    | 12.61 | 12.64 |
|      grandstand     | 12.87 | 54.63 |
|         path        | 16.63 | 24.15 |
|        stairs       |  13.9 | 33.47 |
|        runway       |  8.11 |  8.12 |
|         case        | 19.92 | 24.74 |
|      pool table     | 75.61 |  79.0 |
|        pillow       | 32.76 | 40.63 |
|     screen door     |  3.57 |  3.74 |
|       stairway      | 20.07 | 33.74 |
|        river        |  0.0  |  0.0  |
|        bridge       | 10.05 | 11.94 |
|       bookcase      |  0.0  |  0.0  |
|        blind        |  0.31 |  0.31 |
|     coffee table    | 43.38 | 49.02 |
|        toilet       |  36.8 | 38.67 |
|        flower       | 15.41 | 34.25 |
|         book        | 11.89 | 13.98 |
|         hill        |  0.17 |  0.18 |
|        bench        | 14.39 | 22.96 |
|      countertop     |  9.32 | 10.93 |
|        stove        | 27.26 | 32.18 |
|         palm        | 29.39 | 30.94 |
|    kitchen island   | 18.47 | 22.11 |
|       computer      | 10.62 | 10.67 |
|     swivel chair    |  5.11 |  5.19 |
|         boat        |  1.58 |  1.59 |
|         bar         | 12.78 | 19.57 |
|    arcade machine   |  3.7  | 17.85 |
|        hovel        | 19.57 | 60.73 |
|         bus         | 63.87 |  82.9 |
|        towel        | 10.07 | 12.69 |
|        light        |  35.7 | 40.11 |
|        truck        |  15.0 | 21.12 |
|        tower        | 15.13 |  38.3 |
|      chandelier     | 34.01 | 38.45 |
|        awning       | 10.11 |  10.2 |
|     streetlight     | 24.22 | 28.78 |
|        booth        | 25.65 | 25.67 |
| television receiver |  10.0 | 10.45 |
|       airplane      | 10.83 | 17.14 |
|      dirt track     |  0.02 |  0.09 |
|       apparel       | 11.53 | 22.84 |
|         pole        | 15.44 | 38.52 |
|         land        |  0.02 |  0.02 |
|      bannister      |  3.98 |  6.24 |
|      escalator      |  0.0  |  0.0  |
|       ottoman       | 16.47 | 21.12 |
|        bottle       |  6.78 | 10.56 |
|        buffet       |  3.12 |  3.62 |
|        poster       | 15.76 | 18.16 |
|        stage        |  2.26 | 10.54 |
|         van         | 14.15 | 15.19 |
|         ship        |  2.23 |  2.23 |
|       fountain      | 10.49 | 19.59 |
|    conveyer belt    |  0.0  |  0.0  |
|        canopy       |  6.7  | 11.35 |
|        washer       |  4.2  |  4.48 |
|      plaything      |  6.3  | 10.01 |
|    swimming pool    | 20.25 | 27.23 |
|        stool        | 16.58 | 31.53 |
|        barrel       |  0.0  |  0.0  |
|        basket       |  7.38 |  7.77 |
|      waterfall      | 29.75 |  44.8 |
|         tent        |  0.0  |  0.0  |
|         bag         |  0.0  |  0.0  |
|       minibike      | 17.61 | 23.52 |
|        cradle       | 23.74 | 30.19 |
|         oven        |  0.0  |  0.0  |
|         ball        |  9.57 |  64.1 |
|         food        | 40.56 | 54.05 |
|         step        |  2.68 |  2.88 |
|         tank        | 22.96 | 24.13 |
|      trade name     | 11.37 | 11.81 |
|      microwave      |  4.28 |  4.29 |
|         pot         | 27.74 | 28.25 |
|        animal       | 32.48 | 46.92 |
|       bicycle       | 36.25 | 56.58 |
|         lake        |  0.0  |  0.0  |
|      dishwasher     |  5.55 |  5.57 |
|        screen       | 38.01 | 39.79 |
|       blanket       |  4.93 |  5.29 |
|      sculpture      |  4.15 |  5.93 |
|         hood        |  0.83 |  0.84 |
|        sconce       |  13.7 | 20.01 |
|         vase        | 22.74 | 26.87 |
|    traffic light    | 13.98 | 18.48 |
|         tray        |  2.76 |  3.47 |
|        ashcan       | 12.75 | 13.27 |
|         fan         | 37.04 | 39.78 |
|         pier        |  2.09 |  2.29 |
|      crt screen     | 13.11 | 43.78 |
|        plate        | 31.81 | 38.47 |
|       monitor       |  9.48 |  9.52 |
|    bulletin board   | 11.17 | 13.05 |
|        shower       |  0.39 |  1.08 |
|       radiator      |  3.14 |  3.15 |
|        glass        |  5.45 |  7.29 |
|        clock        |  12.5 | 16.33 |
|         flag        |  1.93 |  1.98 |
+---------------------+-------+-------+
09/21 01:12:53 - mmengine - INFO - Iter(test) [2000/2000]    aAcc: 64.4400  mIoU: 19.9100  mAcc: 27.6500  data_time: 0.0018  time: 0.1586
Finished processing corruption type: impulse_noise
Processing corruption type: defocus_blur
09/21 01:13:51 - mmengine - INFO - 
------------------------------------------------------------
System environment:
    sys.platform: linux
    Python: 3.10.13 | packaged by conda-forge | (main, Dec 23 2023, 15:36:39) [GCC 12.3.0]
    CUDA available: True
    MUSA available: False
    numpy_random_seed: 312757976
    GPU 0: Tesla V100-SXM2-32GB
    CUDA_HOME: /opt/bwhpc/common/devel/cuda/11.7
    NVCC: Cuda compilation tools, release 11.7, V11.7.99
    GCC: gcc (GCC) 8.5.0 20210514 (Red Hat 8.5.0-18)
    PyTorch: 1.13.1
    PyTorch compiling details: PyTorch built with:
  - GCC 9.3
  - C++ Version: 201402
  - Intel(R) oneAPI Math Kernel Library Version 2023.1-Product Build 20230303 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v2.6.0 (Git Hash 52b5f107dd9cf10910aaa19cb47f3abf9b349815)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - LAPACK is enabled (usually provided by MKL)
  - NNPACK is enabled
  - CPU capability usage: AVX2
  - CUDA Runtime 11.7
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_61,code=sm_61;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86;-gencode;arch=compute_37,code=compute_37
  - CuDNN 8.5
  - Magma 2.6.1
  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.7, CUDNN_VERSION=8.5.0, CXX_COMPILER=/opt/rh/devtoolset-9/root/usr/bin/c++, CXX_FLAGS= -fabi-version=11 -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -DEDGE_PROFILER_USE_KINETO -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Werror=non-virtual-dtor -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wunused-local-typedefs -Wno-unused-parameter -Wno-unused-function -Wno-unused-result -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Werror=cast-function-type -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.13.1, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, USE_ROCM=OFF, 

    TorchVision: 0.14.1
    OpenCV: 3.4.18
    MMEngine: 0.10.4

Runtime environment:
    cudnn_benchmark: True
    mp_cfg: {'mp_start_method': 'fork', 'opencv_num_threads': 0}
    dist_cfg: {'backend': 'nccl'}
    seed: 312757976
    Distributed launcher: none
    Distributed training: False
    GPU number: 1
------------------------------------------------------------

09/21 01:13:52 - mmengine - INFO - Config:
auto_scale_lr = dict(base_batch_size=16, enable=False)
crop_size = (
    512,
    512,
)
custom_imports = dict(allow_failed_imports=False, imports='mmdet.models')
data_root = 'data/ade/ADEChallengeData2016'
dataset_type = 'ADE20KDataset'
default_hooks = dict(
    checkpoint=dict(
        by_epoch=False, interval=5000, save_best='mIoU',
        type='CheckpointHook'),
    logger=dict(interval=50, log_metric_by_epoch=False, type='LoggerHook'),
    param_scheduler=dict(type='ParamSchedulerHook'),
    sampler_seed=dict(type='DistSamplerSeedHook'),
    timer=dict(type='IterTimerHook'),
    visualization=dict(type='SegVisualizationHook'))
default_scope = 'mmseg'
embed_multi = dict(decay_mult=0.0, lr_mult=1.0)
env_cfg = dict(
    cudnn_benchmark=True,
    dist_cfg=dict(backend='nccl'),
    mp_cfg=dict(mp_start_method='fork', opencv_num_threads=0))
img_ratios = [
    0.5,
    0.75,
    1.0,
    1.25,
    1.5,
    1.75,
]
launcher = 'none'
load_from = '../checkpoint_files/ade20k/mask2former/mask2former_r50_8xb2-160k_ade20k-512x512_20221204_000055-2d1f55f1.pth'
log_level = 'INFO'
log_processor = dict(by_epoch=False)
model = dict(
    backbone=dict(
        deep_stem=False,
        depth=50,
        frozen_stages=-1,
        init_cfg=dict(checkpoint='torchvision://resnet50', type='Pretrained'),
        norm_cfg=dict(requires_grad=False, type='SyncBN'),
        num_stages=4,
        out_indices=(
            0,
            1,
            2,
            3,
        ),
        style='pytorch',
        type='ResNet'),
    data_preprocessor=dict(
        bgr_to_rgb=True,
        corruption='defocus_blur',
        mean=[
            123.675,
            116.28,
            103.53,
        ],
        pad_val=0,
        seg_pad_val=255,
        size=(
            512,
            512,
        ),
        std=[
            58.395,
            57.12,
            57.375,
        ],
        test_cfg=dict(size_divisor=32),
        type='SegDataPreProcessor'),
    decode_head=dict(
        align_corners=False,
        enforce_decoder_input_project=False,
        feat_channels=256,
        in_channels=[
            256,
            512,
            1024,
            2048,
        ],
        loss_cls=dict(
            class_weight=[
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                0.1,
            ],
            loss_weight=2.0,
            reduction='mean',
            type='mmdet.CrossEntropyLoss',
            use_sigmoid=False),
        loss_dice=dict(
            activate=True,
            eps=1.0,
            loss_weight=5.0,
            naive_dice=True,
            reduction='mean',
            type='mmdet.DiceLoss',
            use_sigmoid=True),
        loss_mask=dict(
            loss_weight=5.0,
            reduction='mean',
            type='mmdet.CrossEntropyLoss',
            use_sigmoid=True),
        num_classes=150,
        num_queries=100,
        num_transformer_feat_level=3,
        out_channels=256,
        pixel_decoder=dict(
            act_cfg=dict(type='ReLU'),
            encoder=dict(
                init_cfg=None,
                layer_cfg=dict(
                    ffn_cfg=dict(
                        act_cfg=dict(inplace=True, type='ReLU'),
                        embed_dims=256,
                        feedforward_channels=1024,
                        ffn_drop=0.0,
                        num_fcs=2),
                    self_attn_cfg=dict(
                        batch_first=True,
                        dropout=0.0,
                        embed_dims=256,
                        im2col_step=64,
                        init_cfg=None,
                        norm_cfg=None,
                        num_heads=8,
                        num_levels=3,
                        num_points=4)),
                num_layers=6),
            init_cfg=None,
            norm_cfg=dict(num_groups=32, type='GN'),
            num_outs=3,
            positional_encoding=dict(normalize=True, num_feats=128),
            type='mmdet.MSDeformAttnPixelDecoder'),
        positional_encoding=dict(normalize=True, num_feats=128),
        strides=[
            4,
            8,
            16,
            32,
        ],
        train_cfg=dict(
            assigner=dict(
                match_costs=[
                    dict(type='mmdet.ClassificationCost', weight=2.0),
                    dict(
                        type='mmdet.CrossEntropyLossCost',
                        use_sigmoid=True,
                        weight=5.0),
                    dict(
                        eps=1.0,
                        pred_act=True,
                        type='mmdet.DiceCost',
                        weight=5.0),
                ],
                type='mmdet.HungarianAssigner'),
            importance_sample_ratio=0.75,
            num_points=12544,
            oversample_ratio=3.0,
            sampler=dict(type='mmdet.MaskPseudoSampler')),
        transformer_decoder=dict(
            init_cfg=None,
            layer_cfg=dict(
                cross_attn_cfg=dict(
                    attn_drop=0.0,
                    batch_first=True,
                    dropout_layer=None,
                    embed_dims=256,
                    num_heads=8,
                    proj_drop=0.0),
                ffn_cfg=dict(
                    act_cfg=dict(inplace=True, type='ReLU'),
                    add_identity=True,
                    dropout_layer=None,
                    embed_dims=256,
                    feedforward_channels=2048,
                    ffn_drop=0.0,
                    num_fcs=2),
                self_attn_cfg=dict(
                    attn_drop=0.0,
                    batch_first=True,
                    dropout_layer=None,
                    embed_dims=256,
                    num_heads=8,
                    proj_drop=0.0)),
            num_layers=9,
            return_intermediate=True),
        type='Mask2FormerHead'),
    test_cfg=dict(mode='whole'),
    train_cfg=dict(),
    type='EncoderDecoder')
num_classes = 150
optim_wrapper = dict(
    clip_grad=dict(max_norm=0.01, norm_type=2),
    optimizer=dict(
        betas=(
            0.9,
            0.999,
        ),
        eps=1e-08,
        lr=0.0001,
        type='AdamW',
        weight_decay=0.05),
    paramwise_cfg=dict(
        custom_keys=dict(
            backbone=dict(decay_mult=1.0, lr_mult=0.1),
            level_embed=dict(decay_mult=0.0, lr_mult=1.0),
            query_embed=dict(decay_mult=0.0, lr_mult=1.0),
            query_feat=dict(decay_mult=0.0, lr_mult=1.0)),
        norm_decay_mult=0.0),
    type='OptimWrapper')
optimizer = dict(
    betas=(
        0.9,
        0.999,
    ),
    eps=1e-08,
    lr=0.0001,
    type='AdamW',
    weight_decay=0.05)
param_scheduler = [
    dict(
        begin=0,
        by_epoch=False,
        end=160000,
        eta_min=0,
        power=0.9,
        type='PolyLR'),
]
resume = False
test_cfg = dict(type='TestLoop')
test_dataloader = dict(
    batch_size=1,
    dataset=dict(
        data_prefix=dict(
            img_path='images/validation',
            seg_map_path='annotations/validation'),
        data_root='data/ade/ADEChallengeData2016',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(keep_ratio=True, scale=(
                2048,
                512,
            ), type='Resize'),
            dict(reduce_zero_label=True, type='LoadAnnotations'),
            dict(type='PackSegInputs'),
        ],
        type='ADE20KDataset'),
    num_workers=4,
    persistent_workers=True,
    sampler=dict(shuffle=False, type='DefaultSampler'))
test_evaluator = dict(
    iou_metrics=[
        'mIoU',
    ], type='IoUMetric')
test_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(keep_ratio=True, scale=(
        2048,
        512,
    ), type='Resize'),
    dict(reduce_zero_label=True, type='LoadAnnotations'),
    dict(type='PackSegInputs'),
]
train_cfg = dict(
    max_iters=160000, type='IterBasedTrainLoop', val_interval=5000)
train_dataloader = dict(
    batch_size=2,
    dataset=dict(
        data_prefix=dict(
            img_path='images/training', seg_map_path='annotations/training'),
        data_root='data/ade/ADEChallengeData2016',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(reduce_zero_label=True, type='LoadAnnotations'),
            dict(
                max_size=2048,
                resize_type='ResizeShortestEdge',
                scales=[
                    256,
                    307,
                    358,
                    409,
                    460,
                    512,
                    563,
                    614,
                    665,
                    716,
                    768,
                    819,
                    870,
                    921,
                    972,
                    1024,
                ],
                type='RandomChoiceResize'),
            dict(
                cat_max_ratio=0.75, crop_size=(
                    512,
                    512,
                ), type='RandomCrop'),
            dict(prob=0.5, type='RandomFlip'),
            dict(type='PhotoMetricDistortion'),
            dict(type='PackSegInputs'),
        ],
        type='ADE20KDataset'),
    num_workers=4,
    persistent_workers=True,
    sampler=dict(shuffle=True, type='InfiniteSampler'))
train_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(reduce_zero_label=True, type='LoadAnnotations'),
    dict(
        max_size=2048,
        resize_type='ResizeShortestEdge',
        scales=[
            256,
            307,
            358,
            409,
            460,
            512,
            563,
            614,
            665,
            716,
            768,
            819,
            870,
            921,
            972,
            1024,
        ],
        type='RandomChoiceResize'),
    dict(cat_max_ratio=0.75, crop_size=(
        512,
        512,
    ), type='RandomCrop'),
    dict(prob=0.5, type='RandomFlip'),
    dict(type='PhotoMetricDistortion'),
    dict(type='PackSegInputs'),
]
tta_model = dict(type='SegTTAModel')
tta_pipeline = [
    dict(backend_args=None, type='LoadImageFromFile'),
    dict(
        transforms=[
            [
                dict(keep_ratio=True, scale_factor=0.5, type='Resize'),
                dict(keep_ratio=True, scale_factor=0.75, type='Resize'),
                dict(keep_ratio=True, scale_factor=1.0, type='Resize'),
                dict(keep_ratio=True, scale_factor=1.25, type='Resize'),
                dict(keep_ratio=True, scale_factor=1.5, type='Resize'),
                dict(keep_ratio=True, scale_factor=1.75, type='Resize'),
            ],
            [
                dict(direction='horizontal', prob=0.0, type='RandomFlip'),
                dict(direction='horizontal', prob=1.0, type='RandomFlip'),
            ],
            [
                dict(type='LoadAnnotations'),
            ],
            [
                dict(type='PackSegInputs'),
            ],
        ],
        type='TestTimeAug'),
]
val_cfg = dict(type='ValLoop')
val_dataloader = dict(
    batch_size=1,
    dataset=dict(
        data_prefix=dict(
            img_path='images/validation',
            seg_map_path='annotations/validation'),
        data_root='data/ade/ADEChallengeData2016',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(keep_ratio=True, scale=(
                2048,
                512,
            ), type='Resize'),
            dict(reduce_zero_label=True, type='LoadAnnotations'),
            dict(type='PackSegInputs'),
        ],
        type='ADE20KDataset'),
    num_workers=4,
    persistent_workers=True,
    sampler=dict(shuffle=False, type='DefaultSampler'))
val_evaluator = dict(
    iou_metrics=[
        'mIoU',
    ], type='IoUMetric')
vis_backends = [
    dict(type='LocalVisBackend'),
]
visualizer = dict(
    name='visualizer',
    type='SegLocalVisualizer',
    vis_backends=[
        dict(type='LocalVisBackend'),
    ])
work_dir = '../corruptions/work_dirs/ade20k/mask2former/mask2former_r50_8xb2-160k_ade20k-512x512/defocus_blur'

09/21 01:14:01 - mmengine - INFO - Distributed training is not used, all SyncBatchNorm (SyncBN) layers in the model will be automatically reverted to BatchNormXd layers if they are used.
09/21 01:14:01 - mmengine - INFO - Hooks will be executed in the following order:
before_run:
(VERY_HIGH   ) RuntimeInfoHook                    
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
before_train:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_train_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(NORMAL      ) DistSamplerSeedHook                
 -------------------- 
before_train_iter:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_train_iter:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(NORMAL      ) SegVisualizationHook               
(BELOW_NORMAL) LoggerHook                         
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
after_train_epoch:
(NORMAL      ) IterTimerHook                      
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_val:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
before_val_epoch:
(NORMAL      ) IterTimerHook                      
 -------------------- 
before_val_iter:
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_val_iter:
(NORMAL      ) IterTimerHook                      
(NORMAL      ) SegVisualizationHook               
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_val_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
after_val:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
after_train:
(VERY_HIGH   ) RuntimeInfoHook                    
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_test:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
before_test_epoch:
(NORMAL      ) IterTimerHook                      
 -------------------- 
before_test_iter:
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_test_iter:
(NORMAL      ) IterTimerHook                      
(NORMAL      ) SegVisualizationHook               
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_test_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_test:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
after_run:
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
09/21 01:14:01 - mmengine - WARNING - The prefix is not set in metric class IoUMetric.
Loads checkpoint by local backend from path: ../checkpoint_files/ade20k/mask2former/mask2former_r50_8xb2-160k_ade20k-512x512_20221204_000055-2d1f55f1.pth
09/21 01:14:03 - mmengine - INFO - Load checkpoint from ../checkpoint_files/ade20k/mask2former/mask2former_r50_8xb2-160k_ade20k-512x512_20221204_000055-2d1f55f1.pth
09/21 01:15:41 - mmengine - INFO - Iter(test) [  50/2000]    eta: 1:03:36  time: 0.9751  data_time: 0.0015  memory: 17167  
09/21 01:15:58 - mmengine - INFO - Iter(test) [ 100/2000]    eta: 0:36:32  time: 0.5467  data_time: 0.0015  memory: 17158  
09/21 01:16:03 - mmengine - INFO - Iter(test) [ 150/2000]    eta: 0:24:36  time: 0.0814  data_time: 0.0014  memory: 872  
09/21 01:16:16 - mmengine - INFO - Iter(test) [ 200/2000]    eta: 0:20:01  time: 0.0803  data_time: 0.0014  memory: 17214  
09/21 01:16:27 - mmengine - INFO - Iter(test) [ 250/2000]    eta: 0:16:47  time: 0.0793  data_time: 0.0014  memory: 17221  
09/21 01:16:35 - mmengine - INFO - Iter(test) [ 300/2000]    eta: 0:14:23  time: 0.0805  data_time: 0.0014  memory: 17162  
09/21 01:16:48 - mmengine - INFO - Iter(test) [ 350/2000]    eta: 0:12:57  time: 0.0773  data_time: 0.0014  memory: 17165  
09/21 01:16:56 - mmengine - INFO - Iter(test) [ 400/2000]    eta: 0:11:32  time: 0.0790  data_time: 0.0013  memory: 17147  
09/21 01:17:00 - mmengine - INFO - Iter(test) [ 450/2000]    eta: 0:10:10  time: 0.0960  data_time: 0.0013  memory: 883  
09/21 01:17:05 - mmengine - INFO - Iter(test) [ 500/2000]    eta: 0:09:05  time: 0.0772  data_time: 0.0013  memory: 872  
09/21 01:17:09 - mmengine - INFO - Iter(test) [ 550/2000]    eta: 0:08:11  time: 0.1149  data_time: 0.0014  memory: 983  
09/21 01:17:14 - mmengine - INFO - Iter(test) [ 600/2000]    eta: 0:07:24  time: 0.0804  data_time: 0.0015  memory: 981  
09/21 01:17:23 - mmengine - INFO - Iter(test) [ 650/2000]    eta: 0:06:54  time: 0.6084  data_time: 0.0013  memory: 17168  
09/21 01:17:33 - mmengine - INFO - Iter(test) [ 700/2000]    eta: 0:06:29  time: 0.1172  data_time: 0.0014  memory: 17163  
09/21 01:17:37 - mmengine - INFO - Iter(test) [ 750/2000]    eta: 0:05:56  time: 0.0955  data_time: 0.0013  memory: 1039  
09/21 01:17:41 - mmengine - INFO - Iter(test) [ 800/2000]    eta: 0:05:26  time: 0.0782  data_time: 0.0015  memory: 872  
09/21 01:17:45 - mmengine - INFO - Iter(test) [ 850/2000]    eta: 0:05:00  time: 0.0794  data_time: 0.0015  memory: 844  
09/21 01:17:50 - mmengine - INFO - Iter(test) [ 900/2000]    eta: 0:04:37  time: 0.0739  data_time: 0.0013  memory: 925  
09/21 01:17:54 - mmengine - INFO - Iter(test) [ 950/2000]    eta: 0:04:15  time: 0.0772  data_time: 0.0014  memory: 955  
09/21 01:17:58 - mmengine - INFO - Iter(test) [1000/2000]    eta: 0:03:54  time: 0.0755  data_time: 0.0014  memory: 955  
09/21 01:18:06 - mmengine - INFO - Iter(test) [1050/2000]    eta: 0:03:40  time: 0.0804  data_time: 0.0014  memory: 17170  
09/21 01:18:10 - mmengine - INFO - Iter(test) [1100/2000]    eta: 0:03:22  time: 0.0781  data_time: 0.0014  memory: 952  
09/21 01:18:15 - mmengine - INFO - Iter(test) [1150/2000]    eta: 0:03:06  time: 0.1123  data_time: 0.0014  memory: 924  
09/21 01:18:19 - mmengine - INFO - Iter(test) [1200/2000]    eta: 0:02:50  time: 0.0763  data_time: 0.0014  memory: 1829  
09/21 01:18:29 - mmengine - INFO - Iter(test) [1250/2000]    eta: 0:02:39  time: 0.0776  data_time: 0.0014  memory: 17158  
09/21 01:18:32 - mmengine - INFO - Iter(test) [1300/2000]    eta: 0:02:25  time: 0.0781  data_time: 0.0014  memory: 872  
09/21 01:18:37 - mmengine - INFO - Iter(test) [1350/2000]    eta: 0:02:11  time: 0.0747  data_time: 0.0014  memory: 872  
09/21 01:18:41 - mmengine - INFO - Iter(test) [1400/2000]    eta: 0:01:59  time: 0.1016  data_time: 0.0014  memory: 953  
09/21 01:18:45 - mmengine - INFO - Iter(test) [1450/2000]    eta: 0:01:46  time: 0.0800  data_time: 0.0014  memory: 955  
09/21 01:18:49 - mmengine - INFO - Iter(test) [1500/2000]    eta: 0:01:35  time: 0.0785  data_time: 0.0014  memory: 869  
09/21 01:18:53 - mmengine - INFO - Iter(test) [1550/2000]    eta: 0:01:24  time: 0.0793  data_time: 0.0014  memory: 955  
09/21 01:18:58 - mmengine - INFO - Iter(test) [1600/2000]    eta: 0:01:13  time: 0.1054  data_time: 0.0015  memory: 844  
09/21 01:19:09 - mmengine - INFO - Iter(test) [1650/2000]    eta: 0:01:04  time: 0.1053  data_time: 0.0013  memory: 17165  
09/21 01:19:13 - mmengine - INFO - Iter(test) [1700/2000]    eta: 0:00:54  time: 0.0794  data_time: 0.0015  memory: 952  
09/21 01:19:18 - mmengine - INFO - Iter(test) [1750/2000]    eta: 0:00:44  time: 0.1071  data_time: 0.0013  memory: 980  
09/21 01:19:23 - mmengine - INFO - Iter(test) [1800/2000]    eta: 0:00:35  time: 0.0794  data_time: 0.0015  memory: 872  
09/21 01:19:28 - mmengine - INFO - Iter(test) [1850/2000]    eta: 0:00:26  time: 0.0961  data_time: 0.0015  memory: 787  
09/21 01:19:33 - mmengine - INFO - Iter(test) [1900/2000]    eta: 0:00:17  time: 0.0774  data_time: 0.0014  memory: 1011  
09/21 01:19:38 - mmengine - INFO - Iter(test) [1950/2000]    eta: 0:00:08  time: 0.1016  data_time: 0.0014  memory: 1258  
09/21 01:19:43 - mmengine - INFO - Iter(test) [2000/2000]    eta: 0:00:00  time: 0.1246  data_time: 0.0013  memory: 1037  
09/21 01:19:43 - mmengine - INFO - per class results:
09/21 01:19:43 - mmengine - INFO - 
+---------------------+-------+-------+
|        Class        |  IoU  |  Acc  |
+---------------------+-------+-------+
|         wall        | 74.77 | 86.95 |
|       building      | 80.04 | 91.03 |
|         sky         | 93.92 | 96.82 |
|        floor        | 80.68 | 89.03 |
|         tree        |  71.4 | 83.88 |
|       ceiling       | 82.97 | 91.25 |
|         road        | 81.58 | 86.99 |
|         bed         |  87.1 | 95.32 |
|      windowpane     | 58.77 | 77.94 |
|        grass        | 69.34 | 83.58 |
|       cabinet       | 56.53 | 68.94 |
|       sidewalk      | 65.41 | 81.97 |
|        person       | 78.65 | 86.22 |
|        earth        | 31.23 | 40.89 |
|         door        | 43.54 | 58.33 |
|        table        | 58.85 | 74.26 |
|       mountain      | 53.64 | 70.04 |
|        plant        | 47.76 | 61.97 |
|       curtain       | 69.96 | 80.65 |
|        chair        | 53.47 | 67.67 |
|         car         | 81.44 | 89.14 |
|        water        | 49.87 | 59.39 |
|       painting      | 71.01 | 83.86 |
|         sofa        | 58.28 | 76.89 |
|        shelf        | 38.78 | 64.14 |
|        house        | 43.51 | 64.25 |
|         sea         | 49.86 | 77.52 |
|        mirror       | 60.13 | 73.97 |
|         rug         | 64.01 |  73.0 |
|        field        | 37.07 | 66.96 |
|       armchair      |  34.9 | 53.31 |
|         seat        | 45.08 | 74.75 |
|        fence        | 41.58 | 57.26 |
|         desk        |  42.9 | 63.79 |
|         rock        | 41.01 | 56.42 |
|       wardrobe      | 37.24 | 51.89 |
|         lamp        | 62.98 | 75.64 |
|       bathtub       | 70.07 | 83.95 |
|       railing       | 27.42 | 42.34 |
|       cushion       | 53.17 | 64.56 |
|         base        | 21.31 | 41.81 |
|         box         | 19.26 | 25.86 |
|        column       | 43.74 | 56.23 |
|      signboard      | 32.53 | 41.03 |
|   chest of drawers  | 29.46 | 55.59 |
|       counter       | 32.37 | 46.38 |
|         sand        | 27.14 |  44.9 |
|         sink        | 72.15 | 77.59 |
|      skyscraper     | 39.76 | 55.67 |
|      fireplace      | 63.56 | 84.18 |
|     refrigerator    | 72.34 | 76.36 |
|      grandstand     | 40.95 | 77.78 |
|         path        | 27.34 | 41.26 |
|        stairs       | 22.62 | 27.53 |
|        runway       | 70.91 | 90.88 |
|         case        | 44.18 | 61.52 |
|      pool table     | 84.67 | 96.08 |
|        pillow       |  58.5 | 72.74 |
|     screen door     |  42.8 | 57.12 |
|       stairway      | 28.67 | 41.96 |
|        river        |  8.68 | 29.01 |
|        bridge       | 56.07 | 79.24 |
|       bookcase      | 36.91 | 55.79 |
|        blind        | 25.72 | 26.96 |
|     coffee table    | 54.49 | 81.75 |
|        toilet       | 84.59 | 89.47 |
|        flower       | 32.91 |  44.4 |
|         book        | 46.52 | 61.26 |
|         hill        |  5.69 |  9.15 |
|        bench        | 33.62 | 45.17 |
|      countertop     | 65.03 | 82.84 |
|        stove        | 69.56 | 75.83 |
|         palm        | 47.32 | 63.29 |
|    kitchen island   | 34.76 | 68.45 |
|       computer      | 54.18 |  59.5 |
|     swivel chair    | 43.79 | 62.66 |
|         boat        | 66.03 | 81.66 |
|         bar         | 57.75 |  64.2 |
|    arcade machine   | 17.29 | 34.21 |
|        hovel        |  0.0  |  0.0  |
|         bus         | 74.03 | 85.68 |
|        towel        | 60.46 |  68.6 |
|        light        | 54.74 | 72.27 |
|        truck        |  17.6 | 27.57 |
|        tower        | 46.06 |  64.0 |
|      chandelier     | 64.71 | 77.52 |
|        awning       | 25.72 | 31.89 |
|     streetlight     | 30.08 |  47.8 |
|        booth        | 61.68 | 77.95 |
| television receiver | 56.39 | 76.88 |
|       airplane      | 51.29 | 66.38 |
|      dirt track     |  1.32 |  6.34 |
|       apparel       | 36.75 | 52.32 |
|         pole        | 23.52 | 30.04 |
|         land        |  4.44 |  8.39 |
|      bannister      |  7.71 | 14.99 |
|      escalator      | 48.87 | 67.75 |
|       ottoman       | 35.53 | 57.94 |
|        bottle       | 14.36 | 16.21 |
|        buffet       | 42.08 | 46.47 |
|        poster       | 31.32 | 41.12 |
|        stage        | 11.42 | 21.18 |
|         van         | 26.59 | 37.49 |
|         ship        | 58.15 | 88.87 |
|       fountain      | 18.24 | 21.62 |
|    conveyer belt    | 64.43 | 90.33 |
|        canopy       |  11.2 | 20.96 |
|        washer       | 61.24 | 61.43 |
|      plaything      | 15.18 | 29.31 |
|    swimming pool    | 38.53 | 59.23 |
|        stool        | 42.26 |  60.6 |
|        barrel       | 54.27 | 63.17 |
|        basket       |  20.4 |  24.2 |
|      waterfall      | 61.53 | 94.06 |
|         tent        | 91.81 | 98.84 |
|         bag         |  9.95 | 10.77 |
|       minibike      | 51.36 | 81.44 |
|        cradle       | 64.69 | 97.84 |
|         oven        | 21.02 | 65.54 |
|         ball        | 40.14 | 48.58 |
|         food        | 54.19 | 62.23 |
|         step        | 11.86 | 13.67 |
|         tank        | 44.67 | 47.39 |
|      trade name     | 17.59 | 19.74 |
|      microwave      | 38.09 | 42.97 |
|         pot         | 50.95 | 58.93 |
|        animal       | 58.21 | 65.61 |
|       bicycle       | 46.97 | 56.91 |
|         lake        |  0.0  |  0.0  |
|      dishwasher     | 54.84 | 63.57 |
|        screen       | 66.65 | 81.03 |
|       blanket       |  9.65 |  13.3 |
|      sculpture      | 44.01 | 58.06 |
|         hood        | 77.85 | 85.02 |
|        sconce       | 43.46 | 61.66 |
|         vase        | 32.72 | 51.21 |
|    traffic light    | 27.45 | 54.83 |
|         tray        | 11.67 | 17.45 |
|        ashcan       | 41.56 | 51.13 |
|         fan         | 58.75 | 74.41 |
|         pier        | 56.83 | 82.83 |
|      crt screen     | 12.12 | 34.93 |
|        plate        | 42.07 | 53.37 |
|       monitor       |  9.87 | 12.51 |
|    bulletin board   | 38.48 |  43.6 |
|        shower       |  1.32 | 11.02 |
|       radiator      | 35.89 | 40.74 |
|        glass        | 11.38 | 12.45 |
|        clock        | 29.71 | 34.09 |
|         flag        |  32.0 | 35.79 |
+---------------------+-------+-------+
09/21 01:19:43 - mmengine - INFO - Iter(test) [2000/2000]    aAcc: 80.8600  mIoU: 44.5100  mAcc: 57.7900  data_time: 0.0018  time: 0.1700
Finished processing corruption type: defocus_blur
Processing corruption type: glass_blur
09/21 01:19:47 - mmengine - INFO - 
------------------------------------------------------------
System environment:
    sys.platform: linux
    Python: 3.10.13 | packaged by conda-forge | (main, Dec 23 2023, 15:36:39) [GCC 12.3.0]
    CUDA available: True
    MUSA available: False
    numpy_random_seed: 1764488552
    GPU 0: Tesla V100-SXM2-32GB
    CUDA_HOME: /opt/bwhpc/common/devel/cuda/11.7
    NVCC: Cuda compilation tools, release 11.7, V11.7.99
    GCC: gcc (GCC) 8.5.0 20210514 (Red Hat 8.5.0-18)
    PyTorch: 1.13.1
    PyTorch compiling details: PyTorch built with:
  - GCC 9.3
  - C++ Version: 201402
  - Intel(R) oneAPI Math Kernel Library Version 2023.1-Product Build 20230303 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v2.6.0 (Git Hash 52b5f107dd9cf10910aaa19cb47f3abf9b349815)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - LAPACK is enabled (usually provided by MKL)
  - NNPACK is enabled
  - CPU capability usage: AVX2
  - CUDA Runtime 11.7
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_61,code=sm_61;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86;-gencode;arch=compute_37,code=compute_37
  - CuDNN 8.5
  - Magma 2.6.1
  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.7, CUDNN_VERSION=8.5.0, CXX_COMPILER=/opt/rh/devtoolset-9/root/usr/bin/c++, CXX_FLAGS= -fabi-version=11 -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -DEDGE_PROFILER_USE_KINETO -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Werror=non-virtual-dtor -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wunused-local-typedefs -Wno-unused-parameter -Wno-unused-function -Wno-unused-result -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Werror=cast-function-type -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.13.1, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, USE_ROCM=OFF, 

    TorchVision: 0.14.1
    OpenCV: 3.4.18
    MMEngine: 0.10.4

Runtime environment:
    cudnn_benchmark: True
    mp_cfg: {'mp_start_method': 'fork', 'opencv_num_threads': 0}
    dist_cfg: {'backend': 'nccl'}
    seed: 1764488552
    Distributed launcher: none
    Distributed training: False
    GPU number: 1
------------------------------------------------------------

09/21 01:19:48 - mmengine - INFO - Config:
auto_scale_lr = dict(base_batch_size=16, enable=False)
crop_size = (
    512,
    512,
)
custom_imports = dict(allow_failed_imports=False, imports='mmdet.models')
data_root = 'data/ade/ADEChallengeData2016'
dataset_type = 'ADE20KDataset'
default_hooks = dict(
    checkpoint=dict(
        by_epoch=False, interval=5000, save_best='mIoU',
        type='CheckpointHook'),
    logger=dict(interval=50, log_metric_by_epoch=False, type='LoggerHook'),
    param_scheduler=dict(type='ParamSchedulerHook'),
    sampler_seed=dict(type='DistSamplerSeedHook'),
    timer=dict(type='IterTimerHook'),
    visualization=dict(type='SegVisualizationHook'))
default_scope = 'mmseg'
embed_multi = dict(decay_mult=0.0, lr_mult=1.0)
env_cfg = dict(
    cudnn_benchmark=True,
    dist_cfg=dict(backend='nccl'),
    mp_cfg=dict(mp_start_method='fork', opencv_num_threads=0))
img_ratios = [
    0.5,
    0.75,
    1.0,
    1.25,
    1.5,
    1.75,
]
launcher = 'none'
load_from = '../checkpoint_files/ade20k/mask2former/mask2former_r50_8xb2-160k_ade20k-512x512_20221204_000055-2d1f55f1.pth'
log_level = 'INFO'
log_processor = dict(by_epoch=False)
model = dict(
    backbone=dict(
        deep_stem=False,
        depth=50,
        frozen_stages=-1,
        init_cfg=dict(checkpoint='torchvision://resnet50', type='Pretrained'),
        norm_cfg=dict(requires_grad=False, type='SyncBN'),
        num_stages=4,
        out_indices=(
            0,
            1,
            2,
            3,
        ),
        style='pytorch',
        type='ResNet'),
    data_preprocessor=dict(
        bgr_to_rgb=True,
        corruption='glass_blur',
        mean=[
            123.675,
            116.28,
            103.53,
        ],
        pad_val=0,
        seg_pad_val=255,
        size=(
            512,
            512,
        ),
        std=[
            58.395,
            57.12,
            57.375,
        ],
        test_cfg=dict(size_divisor=32),
        type='SegDataPreProcessor'),
    decode_head=dict(
        align_corners=False,
        enforce_decoder_input_project=False,
        feat_channels=256,
        in_channels=[
            256,
            512,
            1024,
            2048,
        ],
        loss_cls=dict(
            class_weight=[
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                0.1,
            ],
            loss_weight=2.0,
            reduction='mean',
            type='mmdet.CrossEntropyLoss',
            use_sigmoid=False),
        loss_dice=dict(
            activate=True,
            eps=1.0,
            loss_weight=5.0,
            naive_dice=True,
            reduction='mean',
            type='mmdet.DiceLoss',
            use_sigmoid=True),
        loss_mask=dict(
            loss_weight=5.0,
            reduction='mean',
            type='mmdet.CrossEntropyLoss',
            use_sigmoid=True),
        num_classes=150,
        num_queries=100,
        num_transformer_feat_level=3,
        out_channels=256,
        pixel_decoder=dict(
            act_cfg=dict(type='ReLU'),
            encoder=dict(
                init_cfg=None,
                layer_cfg=dict(
                    ffn_cfg=dict(
                        act_cfg=dict(inplace=True, type='ReLU'),
                        embed_dims=256,
                        feedforward_channels=1024,
                        ffn_drop=0.0,
                        num_fcs=2),
                    self_attn_cfg=dict(
                        batch_first=True,
                        dropout=0.0,
                        embed_dims=256,
                        im2col_step=64,
                        init_cfg=None,
                        norm_cfg=None,
                        num_heads=8,
                        num_levels=3,
                        num_points=4)),
                num_layers=6),
            init_cfg=None,
            norm_cfg=dict(num_groups=32, type='GN'),
            num_outs=3,
            positional_encoding=dict(normalize=True, num_feats=128),
            type='mmdet.MSDeformAttnPixelDecoder'),
        positional_encoding=dict(normalize=True, num_feats=128),
        strides=[
            4,
            8,
            16,
            32,
        ],
        train_cfg=dict(
            assigner=dict(
                match_costs=[
                    dict(type='mmdet.ClassificationCost', weight=2.0),
                    dict(
                        type='mmdet.CrossEntropyLossCost',
                        use_sigmoid=True,
                        weight=5.0),
                    dict(
                        eps=1.0,
                        pred_act=True,
                        type='mmdet.DiceCost',
                        weight=5.0),
                ],
                type='mmdet.HungarianAssigner'),
            importance_sample_ratio=0.75,
            num_points=12544,
            oversample_ratio=3.0,
            sampler=dict(type='mmdet.MaskPseudoSampler')),
        transformer_decoder=dict(
            init_cfg=None,
            layer_cfg=dict(
                cross_attn_cfg=dict(
                    attn_drop=0.0,
                    batch_first=True,
                    dropout_layer=None,
                    embed_dims=256,
                    num_heads=8,
                    proj_drop=0.0),
                ffn_cfg=dict(
                    act_cfg=dict(inplace=True, type='ReLU'),
                    add_identity=True,
                    dropout_layer=None,
                    embed_dims=256,
                    feedforward_channels=2048,
                    ffn_drop=0.0,
                    num_fcs=2),
                self_attn_cfg=dict(
                    attn_drop=0.0,
                    batch_first=True,
                    dropout_layer=None,
                    embed_dims=256,
                    num_heads=8,
                    proj_drop=0.0)),
            num_layers=9,
            return_intermediate=True),
        type='Mask2FormerHead'),
    test_cfg=dict(mode='whole'),
    train_cfg=dict(),
    type='EncoderDecoder')
num_classes = 150
optim_wrapper = dict(
    clip_grad=dict(max_norm=0.01, norm_type=2),
    optimizer=dict(
        betas=(
            0.9,
            0.999,
        ),
        eps=1e-08,
        lr=0.0001,
        type='AdamW',
        weight_decay=0.05),
    paramwise_cfg=dict(
        custom_keys=dict(
            backbone=dict(decay_mult=1.0, lr_mult=0.1),
            level_embed=dict(decay_mult=0.0, lr_mult=1.0),
            query_embed=dict(decay_mult=0.0, lr_mult=1.0),
            query_feat=dict(decay_mult=0.0, lr_mult=1.0)),
        norm_decay_mult=0.0),
    type='OptimWrapper')
optimizer = dict(
    betas=(
        0.9,
        0.999,
    ),
    eps=1e-08,
    lr=0.0001,
    type='AdamW',
    weight_decay=0.05)
param_scheduler = [
    dict(
        begin=0,
        by_epoch=False,
        end=160000,
        eta_min=0,
        power=0.9,
        type='PolyLR'),
]
resume = False
test_cfg = dict(type='TestLoop')
test_dataloader = dict(
    batch_size=1,
    dataset=dict(
        data_prefix=dict(
            img_path='images/validation',
            seg_map_path='annotations/validation'),
        data_root='data/ade/ADEChallengeData2016',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(keep_ratio=True, scale=(
                2048,
                512,
            ), type='Resize'),
            dict(reduce_zero_label=True, type='LoadAnnotations'),
            dict(type='PackSegInputs'),
        ],
        type='ADE20KDataset'),
    num_workers=4,
    persistent_workers=True,
    sampler=dict(shuffle=False, type='DefaultSampler'))
test_evaluator = dict(
    iou_metrics=[
        'mIoU',
    ], type='IoUMetric')
test_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(keep_ratio=True, scale=(
        2048,
        512,
    ), type='Resize'),
    dict(reduce_zero_label=True, type='LoadAnnotations'),
    dict(type='PackSegInputs'),
]
train_cfg = dict(
    max_iters=160000, type='IterBasedTrainLoop', val_interval=5000)
train_dataloader = dict(
    batch_size=2,
    dataset=dict(
        data_prefix=dict(
            img_path='images/training', seg_map_path='annotations/training'),
        data_root='data/ade/ADEChallengeData2016',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(reduce_zero_label=True, type='LoadAnnotations'),
            dict(
                max_size=2048,
                resize_type='ResizeShortestEdge',
                scales=[
                    256,
                    307,
                    358,
                    409,
                    460,
                    512,
                    563,
                    614,
                    665,
                    716,
                    768,
                    819,
                    870,
                    921,
                    972,
                    1024,
                ],
                type='RandomChoiceResize'),
            dict(
                cat_max_ratio=0.75, crop_size=(
                    512,
                    512,
                ), type='RandomCrop'),
            dict(prob=0.5, type='RandomFlip'),
            dict(type='PhotoMetricDistortion'),
            dict(type='PackSegInputs'),
        ],
        type='ADE20KDataset'),
    num_workers=4,
    persistent_workers=True,
    sampler=dict(shuffle=True, type='InfiniteSampler'))
train_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(reduce_zero_label=True, type='LoadAnnotations'),
    dict(
        max_size=2048,
        resize_type='ResizeShortestEdge',
        scales=[
            256,
            307,
            358,
            409,
            460,
            512,
            563,
            614,
            665,
            716,
            768,
            819,
            870,
            921,
            972,
            1024,
        ],
        type='RandomChoiceResize'),
    dict(cat_max_ratio=0.75, crop_size=(
        512,
        512,
    ), type='RandomCrop'),
    dict(prob=0.5, type='RandomFlip'),
    dict(type='PhotoMetricDistortion'),
    dict(type='PackSegInputs'),
]
tta_model = dict(type='SegTTAModel')
tta_pipeline = [
    dict(backend_args=None, type='LoadImageFromFile'),
    dict(
        transforms=[
            [
                dict(keep_ratio=True, scale_factor=0.5, type='Resize'),
                dict(keep_ratio=True, scale_factor=0.75, type='Resize'),
                dict(keep_ratio=True, scale_factor=1.0, type='Resize'),
                dict(keep_ratio=True, scale_factor=1.25, type='Resize'),
                dict(keep_ratio=True, scale_factor=1.5, type='Resize'),
                dict(keep_ratio=True, scale_factor=1.75, type='Resize'),
            ],
            [
                dict(direction='horizontal', prob=0.0, type='RandomFlip'),
                dict(direction='horizontal', prob=1.0, type='RandomFlip'),
            ],
            [
                dict(type='LoadAnnotations'),
            ],
            [
                dict(type='PackSegInputs'),
            ],
        ],
        type='TestTimeAug'),
]
val_cfg = dict(type='ValLoop')
val_dataloader = dict(
    batch_size=1,
    dataset=dict(
        data_prefix=dict(
            img_path='images/validation',
            seg_map_path='annotations/validation'),
        data_root='data/ade/ADEChallengeData2016',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(keep_ratio=True, scale=(
                2048,
                512,
            ), type='Resize'),
            dict(reduce_zero_label=True, type='LoadAnnotations'),
            dict(type='PackSegInputs'),
        ],
        type='ADE20KDataset'),
    num_workers=4,
    persistent_workers=True,
    sampler=dict(shuffle=False, type='DefaultSampler'))
val_evaluator = dict(
    iou_metrics=[
        'mIoU',
    ], type='IoUMetric')
vis_backends = [
    dict(type='LocalVisBackend'),
]
visualizer = dict(
    name='visualizer',
    type='SegLocalVisualizer',
    vis_backends=[
        dict(type='LocalVisBackend'),
    ])
work_dir = '../corruptions/work_dirs/ade20k/mask2former/mask2former_r50_8xb2-160k_ade20k-512x512/glass_blur'

09/21 01:19:51 - mmengine - INFO - Distributed training is not used, all SyncBatchNorm (SyncBN) layers in the model will be automatically reverted to BatchNormXd layers if they are used.
09/21 01:19:51 - mmengine - INFO - Hooks will be executed in the following order:
before_run:
(VERY_HIGH   ) RuntimeInfoHook                    
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
before_train:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_train_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(NORMAL      ) DistSamplerSeedHook                
 -------------------- 
before_train_iter:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_train_iter:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(NORMAL      ) SegVisualizationHook               
(BELOW_NORMAL) LoggerHook                         
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
after_train_epoch:
(NORMAL      ) IterTimerHook                      
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_val:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
before_val_epoch:
(NORMAL      ) IterTimerHook                      
 -------------------- 
before_val_iter:
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_val_iter:
(NORMAL      ) IterTimerHook                      
(NORMAL      ) SegVisualizationHook               
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_val_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
after_val:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
after_train:
(VERY_HIGH   ) RuntimeInfoHook                    
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_test:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
before_test_epoch:
(NORMAL      ) IterTimerHook                      
 -------------------- 
before_test_iter:
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_test_iter:
(NORMAL      ) IterTimerHook                      
(NORMAL      ) SegVisualizationHook               
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_test_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_test:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
after_run:
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
09/21 01:19:51 - mmengine - WARNING - The prefix is not set in metric class IoUMetric.
Loads checkpoint by local backend from path: ../checkpoint_files/ade20k/mask2former/mask2former_r50_8xb2-160k_ade20k-512x512_20221204_000055-2d1f55f1.pth
09/21 01:19:52 - mmengine - INFO - Load checkpoint from ../checkpoint_files/ade20k/mask2former/mask2former_r50_8xb2-160k_ade20k-512x512_20221204_000055-2d1f55f1.pth
09/21 01:26:17 - mmengine - INFO - Iter(test) [  50/2000]    eta: 4:10:31  time: 7.6170  data_time: 0.0016  memory: 17167  
09/21 01:31:49 - mmengine - INFO - Iter(test) [ 100/2000]    eta: 3:47:05  time: 7.0447  data_time: 0.0017  memory: 17158  
09/21 01:37:03 - mmengine - INFO - Iter(test) [ 150/2000]    eta: 3:32:04  time: 6.4144  data_time: 0.0015  memory: 872  
09/21 01:42:33 - mmengine - INFO - Iter(test) [ 200/2000]    eta: 3:24:10  time: 6.2215  data_time: 0.0015  memory: 17214  
09/21 01:47:41 - mmengine - INFO - Iter(test) [ 250/2000]    eta: 3:14:47  time: 6.1205  data_time: 0.0014  memory: 17221  
09/21 01:52:47 - mmengine - INFO - Iter(test) [ 300/2000]    eta: 3:06:33  time: 6.3060  data_time: 0.0015  memory: 17162  
09/21 01:58:04 - mmengine - INFO - Iter(test) [ 350/2000]    eta: 3:00:08  time: 5.8175  data_time: 0.0014  memory: 17165  
09/21 02:03:16 - mmengine - INFO - Iter(test) [ 400/2000]    eta: 2:53:36  time: 6.3525  data_time: 0.0014  memory: 17147  
09/21 02:07:56 - mmengine - INFO - Iter(test) [ 450/2000]    eta: 2:45:35  time: 5.6893  data_time: 0.0014  memory: 883  
09/21 02:13:02 - mmengine - INFO - Iter(test) [ 500/2000]    eta: 2:39:30  time: 5.9269  data_time: 0.0014  memory: 872  
09/21 02:18:28 - mmengine - INFO - Iter(test) [ 550/2000]    eta: 2:34:31  time: 6.4902  data_time: 0.0015  memory: 983  
09/21 02:23:31 - mmengine - INFO - Iter(test) [ 600/2000]    eta: 2:28:32  time: 6.3058  data_time: 0.0016  memory: 981  
09/21 02:28:46 - mmengine - INFO - Iter(test) [ 650/2000]    eta: 2:23:06  time: 6.4799  data_time: 0.0014  memory: 17168  
09/21 02:34:08 - mmengine - INFO - Iter(test) [ 700/2000]    eta: 2:17:55  time: 6.1817  data_time: 0.0015  memory: 17163  
09/21 02:39:13 - mmengine - INFO - Iter(test) [ 750/2000]    eta: 2:12:15  time: 5.7754  data_time: 0.0014  memory: 1039  
09/21 02:43:54 - mmengine - INFO - Iter(test) [ 800/2000]    eta: 2:06:02  time: 5.9578  data_time: 0.0015  memory: 872  
09/21 02:48:51 - mmengine - INFO - Iter(test) [ 850/2000]    eta: 2:00:23  time: 5.9550  data_time: 0.0015  memory: 844  
09/21 02:53:24 - mmengine - INFO - Iter(test) [ 900/2000]    eta: 1:54:19  time: 5.2760  data_time: 0.0014  memory: 925  
09/21 02:58:24 - mmengine - INFO - Iter(test) [ 950/2000]    eta: 1:48:55  time: 5.7649  data_time: 0.0015  memory: 955  
09/21 03:03:10 - mmengine - INFO - Iter(test) [1000/2000]    eta: 1:43:17  time: 5.7085  data_time: 0.0015  memory: 955  
09/21 03:08:16 - mmengine - INFO - Iter(test) [1050/2000]    eta: 1:38:05  time: 6.0953  data_time: 0.0014  memory: 17170  
09/21 03:13:12 - mmengine - INFO - Iter(test) [1100/2000]    eta: 1:32:43  time: 5.8177  data_time: 0.0014  memory: 952  
09/21 03:18:01 - mmengine - INFO - Iter(test) [1150/2000]    eta: 1:27:19  time: 5.9044  data_time: 0.0014  memory: 924  
09/21 03:22:59 - mmengine - INFO - Iter(test) [1200/2000]    eta: 1:22:04  time: 5.7710  data_time: 0.0063  memory: 1829  
09/21 03:27:46 - mmengine - INFO - Iter(test) [1250/2000]    eta: 1:16:44  time: 5.6974  data_time: 0.0014  memory: 17158  
09/21 03:32:24 - mmengine - INFO - Iter(test) [1300/2000]    eta: 1:11:22  time: 5.9209  data_time: 0.0014  memory: 872  
09/21 03:37:15 - mmengine - INFO - Iter(test) [1350/2000]    eta: 1:06:08  time: 5.4601  data_time: 0.0015  memory: 872  
09/21 03:42:07 - mmengine - INFO - Iter(test) [1400/2000]    eta: 1:00:58  time: 6.1763  data_time: 0.0014  memory: 953  
09/21 03:46:48 - mmengine - INFO - Iter(test) [1450/2000]    eta: 0:55:44  time: 6.0896  data_time: 0.0014  memory: 955  
09/21 03:51:36 - mmengine - INFO - Iter(test) [1500/2000]    eta: 0:50:34  time: 5.5347  data_time: 0.0104  memory: 869  
09/21 03:56:42 - mmengine - INFO - Iter(test) [1550/2000]    eta: 0:45:32  time: 5.9973  data_time: 0.0015  memory: 955  
09/21 04:01:28 - mmengine - INFO - Iter(test) [1600/2000]    eta: 0:40:24  time: 5.8127  data_time: 0.0015  memory: 844  
09/21 04:06:20 - mmengine - INFO - Iter(test) [1650/2000]    eta: 0:35:18  time: 5.4545  data_time: 0.0013  memory: 17165  
09/21 04:11:19 - mmengine - INFO - Iter(test) [1700/2000]    eta: 0:30:15  time: 5.9140  data_time: 0.0015  memory: 952  
09/21 04:16:20 - mmengine - INFO - Iter(test) [1750/2000]    eta: 0:25:12  time: 5.8467  data_time: 0.0020  memory: 980  
09/21 04:21:02 - mmengine - INFO - Iter(test) [1800/2000]    eta: 0:20:07  time: 5.9971  data_time: 0.0015  memory: 872  
09/21 04:25:58 - mmengine - INFO - Iter(test) [1850/2000]    eta: 0:15:05  time: 5.9190  data_time: 0.0016  memory: 787  
09/21 04:30:35 - mmengine - INFO - Iter(test) [1900/2000]    eta: 0:10:02  time: 5.7020  data_time: 0.0014  memory: 1011  
09/21 04:35:32 - mmengine - INFO - Iter(test) [1950/2000]    eta: 0:05:01  time: 5.7227  data_time: 0.0014  memory: 1258  
09/21 04:40:15 - mmengine - INFO - Iter(test) [2000/2000]    eta: 0:00:00  time: 5.3304  data_time: 0.0013  memory: 1037  
09/21 04:40:16 - mmengine - INFO - per class results:
09/21 04:40:16 - mmengine - INFO - 
+---------------------+-------+-------+
|        Class        |  IoU  |  Acc  |
+---------------------+-------+-------+
|         wall        | 72.12 | 87.78 |
|       building      | 80.03 | 89.14 |
|         sky         | 93.66 |  97.2 |
|        floor        | 78.89 | 87.38 |
|         tree        | 71.37 | 85.95 |
|       ceiling       | 81.67 | 91.67 |
|         road        | 79.62 | 85.92 |
|         bed         | 84.41 | 93.54 |
|      windowpane     | 52.39 | 71.25 |
|        grass        | 64.07 | 77.79 |
|       cabinet       |  51.9 | 61.47 |
|       sidewalk      | 57.89 | 67.33 |
|        person       | 77.71 | 86.19 |
|        earth        |  29.8 |  48.0 |
|         door        | 40.85 | 52.87 |
|        table        | 55.18 | 70.67 |
|       mountain      | 53.99 | 68.78 |
|        plant        | 46.85 | 60.16 |
|       curtain       | 60.68 | 82.38 |
|        chair        | 53.48 |  68.6 |
|         car         |  80.2 | 86.06 |
|        water        | 41.73 | 56.65 |
|       painting      | 68.46 | 80.12 |
|         sofa        | 60.86 | 77.64 |
|        shelf        | 38.21 | 62.77 |
|        house        | 35.14 | 53.09 |
|         sea         | 52.17 | 76.23 |
|        mirror       | 51.23 | 71.35 |
|         rug         | 58.54 | 73.31 |
|        field        | 28.24 | 62.56 |
|       armchair      | 34.29 | 43.92 |
|         seat        | 50.99 | 77.46 |
|        fence        | 37.49 | 51.37 |
|         desk        | 36.61 | 44.16 |
|         rock        | 39.94 | 52.71 |
|       wardrobe      |  36.6 | 44.82 |
|         lamp        | 60.61 | 69.04 |
|       bathtub       | 70.49 | 79.76 |
|       railing       | 30.08 | 41.33 |
|       cushion       | 50.65 | 66.38 |
|         base        | 17.66 | 36.95 |
|         box         | 13.63 | 17.79 |
|        column       | 43.33 | 58.88 |
|      signboard      |  31.6 | 37.48 |
|   chest of drawers  | 28.77 | 55.74 |
|       counter       | 16.19 | 27.52 |
|         sand        | 30.16 | 44.95 |
|         sink        | 66.42 | 71.07 |
|      skyscraper     | 53.13 | 86.26 |
|      fireplace      | 54.67 | 72.19 |
|     refrigerator    | 42.93 |  47.0 |
|      grandstand     | 26.87 | 80.35 |
|         path        | 30.14 | 48.37 |
|        stairs       | 14.69 | 18.59 |
|        runway       | 73.67 | 78.41 |
|         case        | 48.51 | 61.51 |
|      pool table     | 83.92 | 95.29 |
|        pillow       | 51.93 | 66.86 |
|     screen door     | 39.27 |  42.8 |
|       stairway      | 18.19 | 26.19 |
|        river        |  4.06 | 13.77 |
|        bridge       |  60.6 | 70.85 |
|       bookcase      |  41.9 | 52.43 |
|        blind        |  15.6 | 16.93 |
|     coffee table    | 54.61 | 77.56 |
|        toilet       | 78.75 | 82.44 |
|        flower       | 34.39 | 53.76 |
|         book        | 44.16 |  59.0 |
|         hill        |  5.05 |  7.14 |
|        bench        | 32.36 | 47.37 |
|      countertop     | 50.88 | 64.61 |
|        stove        | 68.96 | 75.16 |
|         palm        | 43.05 | 52.64 |
|    kitchen island   |  30.4 | 50.21 |
|       computer      | 50.31 | 54.93 |
|     swivel chair    | 40.66 | 52.75 |
|         boat        | 27.19 | 37.73 |
|         bar         | 21.35 | 25.09 |
|    arcade machine   | 33.52 | 37.08 |
|        hovel        | 26.59 | 46.26 |
|         bus         | 85.39 | 90.63 |
|        towel        | 57.82 |  73.6 |
|        light        |  53.2 | 68.17 |
|        truck        | 27.91 |  41.7 |
|        tower        | 46.64 | 70.77 |
|      chandelier     | 64.85 | 78.54 |
|        awning       | 29.87 | 36.11 |
|     streetlight     | 24.66 |  32.6 |
|        booth        | 43.98 | 44.62 |
| television receiver | 52.99 | 60.85 |
|       airplane      | 54.62 | 58.19 |
|      dirt track     |  3.01 | 19.98 |
|       apparel       | 23.42 | 55.15 |
|         pole        | 20.56 | 33.31 |
|         land        |  5.25 | 11.85 |
|      bannister      |  2.97 |  4.55 |
|      escalator      | 26.49 | 27.49 |
|       ottoman       | 33.08 | 53.44 |
|        bottle       | 10.89 | 12.23 |
|        buffet       | 44.93 | 47.09 |
|        poster       | 14.14 | 17.08 |
|        stage        | 13.42 | 20.92 |
|         van         | 30.28 | 38.49 |
|         ship        |  4.43 |  6.51 |
|       fountain      | 18.98 | 21.35 |
|    conveyer belt    | 66.31 | 82.76 |
|        canopy       | 22.17 | 38.95 |
|        washer       | 57.45 | 57.57 |
|      plaything      | 16.47 | 31.16 |
|    swimming pool    | 21.88 | 47.07 |
|        stool        | 36.84 | 58.51 |
|        barrel       | 18.99 | 71.43 |
|        basket       | 17.27 | 20.11 |
|      waterfall      | 60.31 | 82.57 |
|         tent        | 89.61 | 98.63 |
|         bag         | 12.77 | 14.82 |
|       minibike      | 56.56 | 78.33 |
|        cradle       | 72.31 | 97.11 |
|         oven        | 30.33 | 44.66 |
|         ball        | 41.88 | 53.75 |
|         food        | 51.46 | 66.27 |
|         step        |  3.08 |  4.07 |
|         tank        | 53.68 | 64.43 |
|      trade name     | 17.61 | 20.67 |
|      microwave      |  28.5 | 29.97 |
|         pot         | 40.35 | 45.46 |
|        animal       | 61.94 | 67.87 |
|       bicycle       | 52.86 | 66.77 |
|         lake        |  0.0  |  0.0  |
|      dishwasher     | 47.01 | 48.65 |
|        screen       | 72.99 | 85.18 |
|       blanket       |  5.64 |  7.99 |
|      sculpture      | 35.39 | 48.63 |
|         hood        | 47.13 | 61.71 |
|        sconce       | 37.61 | 55.84 |
|         vase        | 35.69 |  51.2 |
|    traffic light    | 25.91 | 50.33 |
|         tray        |  6.7  | 10.44 |
|        ashcan       | 38.52 | 51.49 |
|         fan         | 55.19 | 71.37 |
|         pier        | 11.09 | 15.63 |
|      crt screen     | 18.16 |  44.4 |
|        plate        | 35.94 | 41.39 |
|       monitor       | 10.68 | 11.03 |
|    bulletin board   | 31.97 |  37.0 |
|        shower       |  1.65 | 15.63 |
|       radiator      | 32.17 | 46.07 |
|        glass        |  8.67 |  9.09 |
|        clock        | 22.25 | 28.71 |
|         flag        | 21.42 | 23.68 |
+---------------------+-------+-------+
09/21 04:40:16 - mmengine - INFO - Iter(test) [2000/2000]    aAcc: 79.1500  mIoU: 40.8400  mAcc: 52.9400  data_time: 0.0017  time: 6.0117
Finished processing corruption type: glass_blur
Processing corruption type: motion_blur
09/21 04:43:44 - mmengine - INFO - 
------------------------------------------------------------
System environment:
    sys.platform: linux
    Python: 3.10.13 | packaged by conda-forge | (main, Dec 23 2023, 15:36:39) [GCC 12.3.0]
    CUDA available: True
    MUSA available: False
    numpy_random_seed: 1375383055
    GPU 0: Tesla V100-SXM2-32GB
    CUDA_HOME: /opt/bwhpc/common/devel/cuda/11.7
    NVCC: Cuda compilation tools, release 11.7, V11.7.99
    GCC: gcc (GCC) 8.5.0 20210514 (Red Hat 8.5.0-18)
    PyTorch: 1.13.1
    PyTorch compiling details: PyTorch built with:
  - GCC 9.3
  - C++ Version: 201402
  - Intel(R) oneAPI Math Kernel Library Version 2023.1-Product Build 20230303 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v2.6.0 (Git Hash 52b5f107dd9cf10910aaa19cb47f3abf9b349815)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - LAPACK is enabled (usually provided by MKL)
  - NNPACK is enabled
  - CPU capability usage: AVX2
  - CUDA Runtime 11.7
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_61,code=sm_61;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86;-gencode;arch=compute_37,code=compute_37
  - CuDNN 8.5
  - Magma 2.6.1
  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.7, CUDNN_VERSION=8.5.0, CXX_COMPILER=/opt/rh/devtoolset-9/root/usr/bin/c++, CXX_FLAGS= -fabi-version=11 -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -DEDGE_PROFILER_USE_KINETO -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Werror=non-virtual-dtor -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wunused-local-typedefs -Wno-unused-parameter -Wno-unused-function -Wno-unused-result -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Werror=cast-function-type -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.13.1, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, USE_ROCM=OFF, 

    TorchVision: 0.14.1
    OpenCV: 3.4.18
    MMEngine: 0.10.4

Runtime environment:
    cudnn_benchmark: True
    mp_cfg: {'mp_start_method': 'fork', 'opencv_num_threads': 0}
    dist_cfg: {'backend': 'nccl'}
    seed: 1375383055
    Distributed launcher: none
    Distributed training: False
    GPU number: 1
------------------------------------------------------------

09/21 04:43:44 - mmengine - INFO - Config:
auto_scale_lr = dict(base_batch_size=16, enable=False)
crop_size = (
    512,
    512,
)
custom_imports = dict(allow_failed_imports=False, imports='mmdet.models')
data_root = 'data/ade/ADEChallengeData2016'
dataset_type = 'ADE20KDataset'
default_hooks = dict(
    checkpoint=dict(
        by_epoch=False, interval=5000, save_best='mIoU',
        type='CheckpointHook'),
    logger=dict(interval=50, log_metric_by_epoch=False, type='LoggerHook'),
    param_scheduler=dict(type='ParamSchedulerHook'),
    sampler_seed=dict(type='DistSamplerSeedHook'),
    timer=dict(type='IterTimerHook'),
    visualization=dict(type='SegVisualizationHook'))
default_scope = 'mmseg'
embed_multi = dict(decay_mult=0.0, lr_mult=1.0)
env_cfg = dict(
    cudnn_benchmark=True,
    dist_cfg=dict(backend='nccl'),
    mp_cfg=dict(mp_start_method='fork', opencv_num_threads=0))
img_ratios = [
    0.5,
    0.75,
    1.0,
    1.25,
    1.5,
    1.75,
]
launcher = 'none'
load_from = '../checkpoint_files/ade20k/mask2former/mask2former_r50_8xb2-160k_ade20k-512x512_20221204_000055-2d1f55f1.pth'
log_level = 'INFO'
log_processor = dict(by_epoch=False)
model = dict(
    backbone=dict(
        deep_stem=False,
        depth=50,
        frozen_stages=-1,
        init_cfg=dict(checkpoint='torchvision://resnet50', type='Pretrained'),
        norm_cfg=dict(requires_grad=False, type='SyncBN'),
        num_stages=4,
        out_indices=(
            0,
            1,
            2,
            3,
        ),
        style='pytorch',
        type='ResNet'),
    data_preprocessor=dict(
        bgr_to_rgb=True,
        corruption='motion_blur',
        mean=[
            123.675,
            116.28,
            103.53,
        ],
        pad_val=0,
        seg_pad_val=255,
        size=(
            512,
            512,
        ),
        std=[
            58.395,
            57.12,
            57.375,
        ],
        test_cfg=dict(size_divisor=32),
        type='SegDataPreProcessor'),
    decode_head=dict(
        align_corners=False,
        enforce_decoder_input_project=False,
        feat_channels=256,
        in_channels=[
            256,
            512,
            1024,
            2048,
        ],
        loss_cls=dict(
            class_weight=[
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                0.1,
            ],
            loss_weight=2.0,
            reduction='mean',
            type='mmdet.CrossEntropyLoss',
            use_sigmoid=False),
        loss_dice=dict(
            activate=True,
            eps=1.0,
            loss_weight=5.0,
            naive_dice=True,
            reduction='mean',
            type='mmdet.DiceLoss',
            use_sigmoid=True),
        loss_mask=dict(
            loss_weight=5.0,
            reduction='mean',
            type='mmdet.CrossEntropyLoss',
            use_sigmoid=True),
        num_classes=150,
        num_queries=100,
        num_transformer_feat_level=3,
        out_channels=256,
        pixel_decoder=dict(
            act_cfg=dict(type='ReLU'),
            encoder=dict(
                init_cfg=None,
                layer_cfg=dict(
                    ffn_cfg=dict(
                        act_cfg=dict(inplace=True, type='ReLU'),
                        embed_dims=256,
                        feedforward_channels=1024,
                        ffn_drop=0.0,
                        num_fcs=2),
                    self_attn_cfg=dict(
                        batch_first=True,
                        dropout=0.0,
                        embed_dims=256,
                        im2col_step=64,
                        init_cfg=None,
                        norm_cfg=None,
                        num_heads=8,
                        num_levels=3,
                        num_points=4)),
                num_layers=6),
            init_cfg=None,
            norm_cfg=dict(num_groups=32, type='GN'),
            num_outs=3,
            positional_encoding=dict(normalize=True, num_feats=128),
            type='mmdet.MSDeformAttnPixelDecoder'),
        positional_encoding=dict(normalize=True, num_feats=128),
        strides=[
            4,
            8,
            16,
            32,
        ],
        train_cfg=dict(
            assigner=dict(
                match_costs=[
                    dict(type='mmdet.ClassificationCost', weight=2.0),
                    dict(
                        type='mmdet.CrossEntropyLossCost',
                        use_sigmoid=True,
                        weight=5.0),
                    dict(
                        eps=1.0,
                        pred_act=True,
                        type='mmdet.DiceCost',
                        weight=5.0),
                ],
                type='mmdet.HungarianAssigner'),
            importance_sample_ratio=0.75,
            num_points=12544,
            oversample_ratio=3.0,
            sampler=dict(type='mmdet.MaskPseudoSampler')),
        transformer_decoder=dict(
            init_cfg=None,
            layer_cfg=dict(
                cross_attn_cfg=dict(
                    attn_drop=0.0,
                    batch_first=True,
                    dropout_layer=None,
                    embed_dims=256,
                    num_heads=8,
                    proj_drop=0.0),
                ffn_cfg=dict(
                    act_cfg=dict(inplace=True, type='ReLU'),
                    add_identity=True,
                    dropout_layer=None,
                    embed_dims=256,
                    feedforward_channels=2048,
                    ffn_drop=0.0,
                    num_fcs=2),
                self_attn_cfg=dict(
                    attn_drop=0.0,
                    batch_first=True,
                    dropout_layer=None,
                    embed_dims=256,
                    num_heads=8,
                    proj_drop=0.0)),
            num_layers=9,
            return_intermediate=True),
        type='Mask2FormerHead'),
    test_cfg=dict(mode='whole'),
    train_cfg=dict(),
    type='EncoderDecoder')
num_classes = 150
optim_wrapper = dict(
    clip_grad=dict(max_norm=0.01, norm_type=2),
    optimizer=dict(
        betas=(
            0.9,
            0.999,
        ),
        eps=1e-08,
        lr=0.0001,
        type='AdamW',
        weight_decay=0.05),
    paramwise_cfg=dict(
        custom_keys=dict(
            backbone=dict(decay_mult=1.0, lr_mult=0.1),
            level_embed=dict(decay_mult=0.0, lr_mult=1.0),
            query_embed=dict(decay_mult=0.0, lr_mult=1.0),
            query_feat=dict(decay_mult=0.0, lr_mult=1.0)),
        norm_decay_mult=0.0),
    type='OptimWrapper')
optimizer = dict(
    betas=(
        0.9,
        0.999,
    ),
    eps=1e-08,
    lr=0.0001,
    type='AdamW',
    weight_decay=0.05)
param_scheduler = [
    dict(
        begin=0,
        by_epoch=False,
        end=160000,
        eta_min=0,
        power=0.9,
        type='PolyLR'),
]
resume = False
test_cfg = dict(type='TestLoop')
test_dataloader = dict(
    batch_size=1,
    dataset=dict(
        data_prefix=dict(
            img_path='images/validation',
            seg_map_path='annotations/validation'),
        data_root='data/ade/ADEChallengeData2016',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(keep_ratio=True, scale=(
                2048,
                512,
            ), type='Resize'),
            dict(reduce_zero_label=True, type='LoadAnnotations'),
            dict(type='PackSegInputs'),
        ],
        type='ADE20KDataset'),
    num_workers=4,
    persistent_workers=True,
    sampler=dict(shuffle=False, type='DefaultSampler'))
test_evaluator = dict(
    iou_metrics=[
        'mIoU',
    ], type='IoUMetric')
test_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(keep_ratio=True, scale=(
        2048,
        512,
    ), type='Resize'),
    dict(reduce_zero_label=True, type='LoadAnnotations'),
    dict(type='PackSegInputs'),
]
train_cfg = dict(
    max_iters=160000, type='IterBasedTrainLoop', val_interval=5000)
train_dataloader = dict(
    batch_size=2,
    dataset=dict(
        data_prefix=dict(
            img_path='images/training', seg_map_path='annotations/training'),
        data_root='data/ade/ADEChallengeData2016',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(reduce_zero_label=True, type='LoadAnnotations'),
            dict(
                max_size=2048,
                resize_type='ResizeShortestEdge',
                scales=[
                    256,
                    307,
                    358,
                    409,
                    460,
                    512,
                    563,
                    614,
                    665,
                    716,
                    768,
                    819,
                    870,
                    921,
                    972,
                    1024,
                ],
                type='RandomChoiceResize'),
            dict(
                cat_max_ratio=0.75, crop_size=(
                    512,
                    512,
                ), type='RandomCrop'),
            dict(prob=0.5, type='RandomFlip'),
            dict(type='PhotoMetricDistortion'),
            dict(type='PackSegInputs'),
        ],
        type='ADE20KDataset'),
    num_workers=4,
    persistent_workers=True,
    sampler=dict(shuffle=True, type='InfiniteSampler'))
train_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(reduce_zero_label=True, type='LoadAnnotations'),
    dict(
        max_size=2048,
        resize_type='ResizeShortestEdge',
        scales=[
            256,
            307,
            358,
            409,
            460,
            512,
            563,
            614,
            665,
            716,
            768,
            819,
            870,
            921,
            972,
            1024,
        ],
        type='RandomChoiceResize'),
    dict(cat_max_ratio=0.75, crop_size=(
        512,
        512,
    ), type='RandomCrop'),
    dict(prob=0.5, type='RandomFlip'),
    dict(type='PhotoMetricDistortion'),
    dict(type='PackSegInputs'),
]
tta_model = dict(type='SegTTAModel')
tta_pipeline = [
    dict(backend_args=None, type='LoadImageFromFile'),
    dict(
        transforms=[
            [
                dict(keep_ratio=True, scale_factor=0.5, type='Resize'),
                dict(keep_ratio=True, scale_factor=0.75, type='Resize'),
                dict(keep_ratio=True, scale_factor=1.0, type='Resize'),
                dict(keep_ratio=True, scale_factor=1.25, type='Resize'),
                dict(keep_ratio=True, scale_factor=1.5, type='Resize'),
                dict(keep_ratio=True, scale_factor=1.75, type='Resize'),
            ],
            [
                dict(direction='horizontal', prob=0.0, type='RandomFlip'),
                dict(direction='horizontal', prob=1.0, type='RandomFlip'),
            ],
            [
                dict(type='LoadAnnotations'),
            ],
            [
                dict(type='PackSegInputs'),
            ],
        ],
        type='TestTimeAug'),
]
val_cfg = dict(type='ValLoop')
val_dataloader = dict(
    batch_size=1,
    dataset=dict(
        data_prefix=dict(
            img_path='images/validation',
            seg_map_path='annotations/validation'),
        data_root='data/ade/ADEChallengeData2016',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(keep_ratio=True, scale=(
                2048,
                512,
            ), type='Resize'),
            dict(reduce_zero_label=True, type='LoadAnnotations'),
            dict(type='PackSegInputs'),
        ],
        type='ADE20KDataset'),
    num_workers=4,
    persistent_workers=True,
    sampler=dict(shuffle=False, type='DefaultSampler'))
val_evaluator = dict(
    iou_metrics=[
        'mIoU',
    ], type='IoUMetric')
vis_backends = [
    dict(type='LocalVisBackend'),
]
visualizer = dict(
    name='visualizer',
    type='SegLocalVisualizer',
    vis_backends=[
        dict(type='LocalVisBackend'),
    ])
work_dir = '../corruptions/work_dirs/ade20k/mask2former/mask2former_r50_8xb2-160k_ade20k-512x512/motion_blur'

09/21 04:44:19 - mmengine - INFO - Distributed training is not used, all SyncBatchNorm (SyncBN) layers in the model will be automatically reverted to BatchNormXd layers if they are used.
09/21 04:44:19 - mmengine - INFO - Hooks will be executed in the following order:
before_run:
(VERY_HIGH   ) RuntimeInfoHook                    
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
before_train:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_train_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(NORMAL      ) DistSamplerSeedHook                
 -------------------- 
before_train_iter:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_train_iter:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(NORMAL      ) SegVisualizationHook               
(BELOW_NORMAL) LoggerHook                         
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
after_train_epoch:
(NORMAL      ) IterTimerHook                      
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_val:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
before_val_epoch:
(NORMAL      ) IterTimerHook                      
 -------------------- 
before_val_iter:
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_val_iter:
(NORMAL      ) IterTimerHook                      
(NORMAL      ) SegVisualizationHook               
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_val_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
after_val:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
after_train:
(VERY_HIGH   ) RuntimeInfoHook                    
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_test:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
before_test_epoch:
(NORMAL      ) IterTimerHook                      
 -------------------- 
before_test_iter:
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_test_iter:
(NORMAL      ) IterTimerHook                      
(NORMAL      ) SegVisualizationHook               
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_test_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_test:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
after_run:
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
09/21 04:44:21 - mmengine - WARNING - The prefix is not set in metric class IoUMetric.
Loads checkpoint by local backend from path: ../checkpoint_files/ade20k/mask2former/mask2former_r50_8xb2-160k_ade20k-512x512_20221204_000055-2d1f55f1.pth
09/21 04:44:23 - mmengine - INFO - Load checkpoint from ../checkpoint_files/ade20k/mask2former/mask2former_r50_8xb2-160k_ade20k-512x512_20221204_000055-2d1f55f1.pth
09/21 04:47:13 - mmengine - INFO - Iter(test) [  50/2000]    eta: 1:50:04  time: 1.6479  data_time: 0.0015  memory: 17167  
09/21 04:48:03 - mmengine - INFO - Iter(test) [ 100/2000]    eta: 1:09:40  time: 1.2324  data_time: 0.0015  memory: 17158  
09/21 04:48:40 - mmengine - INFO - Iter(test) [ 150/2000]    eta: 0:52:43  time: 0.7363  data_time: 0.0014  memory: 872  
09/21 04:49:27 - mmengine - INFO - Iter(test) [ 200/2000]    eta: 0:45:34  time: 0.7540  data_time: 0.0014  memory: 17214  
09/21 04:50:10 - mmengine - INFO - Iter(test) [ 250/2000]    eta: 0:40:30  time: 0.7448  data_time: 0.0014  memory: 17221  
09/21 04:50:52 - mmengine - INFO - Iter(test) [ 300/2000]    eta: 0:36:40  time: 0.7810  data_time: 0.0014  memory: 17162  
09/21 04:51:37 - mmengine - INFO - Iter(test) [ 350/2000]    eta: 0:34:03  time: 0.7064  data_time: 0.0013  memory: 17165  
09/21 04:52:18 - mmengine - INFO - Iter(test) [ 400/2000]    eta: 0:31:37  time: 0.7693  data_time: 0.0013  memory: 17147  
09/21 04:52:51 - mmengine - INFO - Iter(test) [ 450/2000]    eta: 0:29:09  time: 0.7037  data_time: 0.0013  memory: 883  
09/21 04:53:28 - mmengine - INFO - Iter(test) [ 500/2000]    eta: 0:27:13  time: 0.7111  data_time: 0.0013  memory: 872  
09/21 04:54:06 - mmengine - INFO - Iter(test) [ 550/2000]    eta: 0:25:35  time: 0.7656  data_time: 0.0014  memory: 983  
09/21 04:54:40 - mmengine - INFO - Iter(test) [ 600/2000]    eta: 0:23:59  time: 0.7178  data_time: 0.0014  memory: 981  
09/21 04:55:22 - mmengine - INFO - Iter(test) [ 650/2000]    eta: 0:22:47  time: 1.2061  data_time: 0.0013  memory: 17168  
09/21 04:56:06 - mmengine - INFO - Iter(test) [ 700/2000]    eta: 0:21:44  time: 0.7522  data_time: 0.0015  memory: 17163  
09/21 04:56:44 - mmengine - INFO - Iter(test) [ 750/2000]    eta: 0:20:34  time: 0.7379  data_time: 0.0013  memory: 1039  
09/21 04:57:18 - mmengine - INFO - Iter(test) [ 800/2000]    eta: 0:19:21  time: 0.6986  data_time: 0.0014  memory: 872  
09/21 04:57:53 - mmengine - INFO - Iter(test) [ 850/2000]    eta: 0:18:16  time: 0.7081  data_time: 0.0015  memory: 844  
09/21 04:58:27 - mmengine - INFO - Iter(test) [ 900/2000]    eta: 0:17:11  time: 0.6635  data_time: 0.0013  memory: 925  
09/21 04:59:05 - mmengine - INFO - Iter(test) [ 950/2000]    eta: 0:16:14  time: 0.7395  data_time: 0.0014  memory: 955  
09/21 04:59:41 - mmengine - INFO - Iter(test) [1000/2000]    eta: 0:15:17  time: 0.7027  data_time: 0.0014  memory: 955  
09/21 05:00:23 - mmengine - INFO - Iter(test) [1050/2000]    eta: 0:14:28  time: 0.7924  data_time: 0.0014  memory: 17170  
09/21 05:01:00 - mmengine - INFO - Iter(test) [1100/2000]    eta: 0:13:35  time: 0.7181  data_time: 0.0014  memory: 952  
09/21 05:01:36 - mmengine - INFO - Iter(test) [1150/2000]    eta: 0:12:43  time: 0.7342  data_time: 0.0014  memory: 924  
09/21 05:02:14 - mmengine - INFO - Iter(test) [1200/2000]    eta: 0:11:53  time: 0.7284  data_time: 0.0014  memory: 1829  
09/21 05:02:54 - mmengine - INFO - Iter(test) [1250/2000]    eta: 0:11:06  time: 0.7246  data_time: 0.0014  memory: 17158  
09/21 05:03:28 - mmengine - INFO - Iter(test) [1300/2000]    eta: 0:10:16  time: 0.7188  data_time: 0.0014  memory: 872  
09/21 05:04:05 - mmengine - INFO - Iter(test) [1350/2000]    eta: 0:09:28  time: 0.6843  data_time: 0.0014  memory: 872  
09/21 05:04:42 - mmengine - INFO - Iter(test) [1400/2000]    eta: 0:08:42  time: 0.7904  data_time: 0.0014  memory: 953  
09/21 05:05:17 - mmengine - INFO - Iter(test) [1450/2000]    eta: 0:07:55  time: 0.7949  data_time: 0.0013  memory: 955  
09/21 05:05:53 - mmengine - INFO - Iter(test) [1500/2000]    eta: 0:07:09  time: 0.6843  data_time: 0.0013  memory: 869  
09/21 05:06:31 - mmengine - INFO - Iter(test) [1550/2000]    eta: 0:06:25  time: 0.7520  data_time: 0.0014  memory: 955  
09/21 05:07:05 - mmengine - INFO - Iter(test) [1600/2000]    eta: 0:05:40  time: 0.6783  data_time: 0.0015  memory: 844  
09/21 05:07:45 - mmengine - INFO - Iter(test) [1650/2000]    eta: 0:04:57  time: 0.6850  data_time: 0.0013  memory: 17165  
09/21 05:08:23 - mmengine - INFO - Iter(test) [1700/2000]    eta: 0:04:13  time: 0.7540  data_time: 0.0015  memory: 952  
09/21 05:09:00 - mmengine - INFO - Iter(test) [1750/2000]    eta: 0:03:30  time: 0.7679  data_time: 0.0014  memory: 980  
09/21 05:09:35 - mmengine - INFO - Iter(test) [1800/2000]    eta: 0:02:47  time: 0.7280  data_time: 0.0015  memory: 872  
09/21 05:10:10 - mmengine - INFO - Iter(test) [1850/2000]    eta: 0:02:05  time: 0.7124  data_time: 0.0015  memory: 787  
09/21 05:10:44 - mmengine - INFO - Iter(test) [1900/2000]    eta: 0:01:23  time: 0.7236  data_time: 0.0014  memory: 1011  
09/21 05:11:23 - mmengine - INFO - Iter(test) [1950/2000]    eta: 0:00:41  time: 0.7706  data_time: 0.0014  memory: 1258  
09/21 05:11:58 - mmengine - INFO - Iter(test) [2000/2000]    eta: 0:00:00  time: 0.6443  data_time: 0.0013  memory: 1037  
09/21 05:11:58 - mmengine - INFO - per class results:
09/21 05:11:58 - mmengine - INFO - 
+---------------------+-------+-------+
|        Class        |  IoU  |  Acc  |
+---------------------+-------+-------+
|         wall        | 72.99 | 84.71 |
|       building      | 76.37 | 91.79 |
|         sky         | 92.75 | 95.66 |
|        floor        | 78.45 | 88.86 |
|         tree        | 64.72 | 73.45 |
|       ceiling       | 81.79 | 92.58 |
|         road        | 75.15 | 78.91 |
|         bed         | 86.48 | 94.69 |
|      windowpane     | 58.49 | 78.01 |
|        grass        | 61.97 | 84.31 |
|       cabinet       | 56.84 | 69.82 |
|       sidewalk      | 57.16 | 84.05 |
|        person       | 78.48 | 86.93 |
|        earth        | 23.28 | 31.33 |
|         door        | 40.78 | 54.45 |
|        table        | 55.46 | 70.77 |
|       mountain      | 44.04 | 58.68 |
|        plant        | 43.64 | 57.66 |
|       curtain       | 64.78 | 78.92 |
|        chair        | 54.56 | 69.78 |
|         car         | 78.53 | 88.46 |
|        water        | 46.07 | 62.64 |
|       painting      | 67.83 |  83.0 |
|         sofa        | 55.39 | 76.26 |
|        shelf        | 39.39 | 67.84 |
|        house        | 49.46 | 74.09 |
|         sea         | 36.71 |  56.0 |
|        mirror       | 56.21 | 69.61 |
|         rug         | 47.53 | 56.73 |
|        field        | 31.98 | 55.23 |
|       armchair      | 34.61 | 49.17 |
|         seat        | 46.09 | 79.15 |
|        fence        | 24.85 | 33.48 |
|         desk        | 42.02 | 59.25 |
|         rock        | 30.12 | 35.18 |
|       wardrobe      |  44.4 | 58.96 |
|         lamp        | 60.34 | 72.62 |
|       bathtub       | 80.79 |  89.0 |
|       railing       | 28.31 | 44.54 |
|       cushion       |  52.1 |  61.8 |
|         base        | 23.52 | 38.93 |
|         box         | 15.34 | 21.37 |
|        column       | 44.02 | 55.68 |
|      signboard      | 32.83 | 45.18 |
|   chest of drawers  | 32.39 | 62.17 |
|       counter       | 30.49 | 35.94 |
|         sand        | 18.04 | 47.61 |
|         sink        | 68.85 | 75.19 |
|      skyscraper     | 42.21 | 56.86 |
|      fireplace      | 67.09 | 84.61 |
|     refrigerator    | 66.12 | 71.78 |
|      grandstand     | 41.65 |  65.1 |
|         path        | 13.24 | 19.19 |
|        stairs       | 23.21 | 27.87 |
|        runway       | 77.25 | 91.99 |
|         case        |  55.1 |  77.9 |
|      pool table     | 91.94 | 95.58 |
|        pillow       | 53.34 |  71.9 |
|     screen door     | 67.72 | 86.33 |
|       stairway      | 34.18 | 44.09 |
|        river        |  7.3  | 16.96 |
|        bridge       |  31.1 | 32.78 |
|       bookcase      | 41.25 | 54.42 |
|        blind        | 19.74 |  22.5 |
|     coffee table    | 52.13 | 82.93 |
|        toilet       | 84.18 | 87.97 |
|        flower       | 30.08 | 37.82 |
|         book        | 43.05 | 63.06 |
|         hill        |  4.78 | 11.55 |
|        bench        | 34.73 | 45.76 |
|      countertop     | 57.58 | 78.33 |
|        stove        |  53.5 | 81.93 |
|         palm        | 30.06 | 66.32 |
|    kitchen island   | 29.89 | 63.47 |
|       computer      | 54.65 | 61.35 |
|     swivel chair    | 38.17 | 56.12 |
|         boat        | 35.37 | 52.73 |
|         bar         | 39.92 | 49.26 |
|    arcade machine   | 21.62 | 24.14 |
|        hovel        | 14.48 |  28.3 |
|         bus         |  68.8 | 83.33 |
|        towel        | 61.84 | 72.76 |
|        light        | 53.89 | 71.84 |
|        truck        | 11.19 | 27.73 |
|        tower        | 39.12 | 52.82 |
|      chandelier     | 50.76 | 56.99 |
|        awning       | 23.21 | 31.05 |
|     streetlight     | 31.59 | 40.93 |
|        booth        | 42.31 |  73.8 |
| television receiver | 62.97 | 74.45 |
|       airplane      | 53.17 | 65.62 |
|      dirt track     | 17.86 | 20.46 |
|       apparel       | 29.17 | 46.27 |
|         pole        | 26.85 | 43.59 |
|         land        |  3.65 |  8.24 |
|      bannister      |  6.48 | 11.69 |
|      escalator      | 45.08 | 77.38 |
|       ottoman       |  31.0 | 47.46 |
|        bottle       | 16.28 | 19.32 |
|        buffet       | 25.55 | 30.17 |
|        poster       |  26.3 | 43.45 |
|        stage        | 13.64 | 18.45 |
|         van         |  24.3 | 34.33 |
|         ship        | 67.79 | 82.38 |
|       fountain      | 20.71 | 21.43 |
|    conveyer belt    | 71.01 | 89.33 |
|        canopy       | 23.04 | 25.81 |
|        washer       | 64.72 | 65.37 |
|      plaything      | 13.38 | 21.34 |
|    swimming pool    | 54.01 | 67.39 |
|        stool        | 40.64 | 62.44 |
|        barrel       | 24.22 | 31.62 |
|        basket       | 24.96 | 32.12 |
|      waterfall      | 37.56 | 53.37 |
|         tent        | 86.83 | 97.76 |
|         bag         | 13.65 | 15.98 |
|       minibike      | 36.51 |  57.4 |
|        cradle       | 72.22 | 97.48 |
|         oven        | 35.72 | 49.21 |
|         ball        | 36.71 | 56.67 |
|         food        | 53.95 | 65.24 |
|         step        | 13.69 | 22.07 |
|         tank        | 21.85 | 21.95 |
|      trade name     | 22.07 | 25.81 |
|      microwave      | 36.54 | 40.98 |
|         pot         | 39.17 | 46.05 |
|        animal       | 49.76 | 61.91 |
|       bicycle       | 40.16 | 70.77 |
|         lake        |  0.0  |  0.0  |
|      dishwasher     | 54.34 |  63.3 |
|        screen       | 54.81 | 68.47 |
|       blanket       | 10.62 | 15.35 |
|      sculpture      | 34.41 | 44.39 |
|         hood        | 71.54 | 86.25 |
|        sconce       | 40.24 | 59.57 |
|         vase        | 35.07 | 50.24 |
|    traffic light    | 26.58 | 61.08 |
|         tray        | 12.34 | 27.81 |
|        ashcan       | 42.37 | 58.94 |
|         fan         | 57.35 | 75.83 |
|         pier        | 12.57 | 36.75 |
|      crt screen     |  7.58 | 23.57 |
|        plate        | 38.57 | 55.17 |
|       monitor       |  0.98 |  1.14 |
|    bulletin board   | 38.36 |  41.9 |
|        shower       |  9.94 | 13.86 |
|       radiator      | 36.88 | 57.31 |
|        glass        | 10.85 | 11.92 |
|        clock        | 32.49 | 36.73 |
|         flag        | 27.19 | 32.64 |
+---------------------+-------+-------+
09/21 05:11:58 - mmengine - INFO - Iter(test) [2000/2000]    aAcc: 78.7500  mIoU: 41.7600  mAcc: 54.9800  data_time: 0.0020  time: 0.8271
Finished processing corruption type: motion_blur
Processing corruption type: zoom_blur
09/21 05:12:02 - mmengine - INFO - 
------------------------------------------------------------
System environment:
    sys.platform: linux
    Python: 3.10.13 | packaged by conda-forge | (main, Dec 23 2023, 15:36:39) [GCC 12.3.0]
    CUDA available: True
    MUSA available: False
    numpy_random_seed: 1683846563
    GPU 0: Tesla V100-SXM2-32GB
    CUDA_HOME: /opt/bwhpc/common/devel/cuda/11.7
    NVCC: Cuda compilation tools, release 11.7, V11.7.99
    GCC: gcc (GCC) 8.5.0 20210514 (Red Hat 8.5.0-18)
    PyTorch: 1.13.1
    PyTorch compiling details: PyTorch built with:
  - GCC 9.3
  - C++ Version: 201402
  - Intel(R) oneAPI Math Kernel Library Version 2023.1-Product Build 20230303 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v2.6.0 (Git Hash 52b5f107dd9cf10910aaa19cb47f3abf9b349815)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - LAPACK is enabled (usually provided by MKL)
  - NNPACK is enabled
  - CPU capability usage: AVX2
  - CUDA Runtime 11.7
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_61,code=sm_61;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86;-gencode;arch=compute_37,code=compute_37
  - CuDNN 8.5
  - Magma 2.6.1
  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.7, CUDNN_VERSION=8.5.0, CXX_COMPILER=/opt/rh/devtoolset-9/root/usr/bin/c++, CXX_FLAGS= -fabi-version=11 -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -DEDGE_PROFILER_USE_KINETO -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Werror=non-virtual-dtor -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wunused-local-typedefs -Wno-unused-parameter -Wno-unused-function -Wno-unused-result -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Werror=cast-function-type -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.13.1, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, USE_ROCM=OFF, 

    TorchVision: 0.14.1
    OpenCV: 3.4.18
    MMEngine: 0.10.4

Runtime environment:
    cudnn_benchmark: True
    mp_cfg: {'mp_start_method': 'fork', 'opencv_num_threads': 0}
    dist_cfg: {'backend': 'nccl'}
    seed: 1683846563
    Distributed launcher: none
    Distributed training: False
    GPU number: 1
------------------------------------------------------------

09/21 05:12:02 - mmengine - INFO - Config:
auto_scale_lr = dict(base_batch_size=16, enable=False)
crop_size = (
    512,
    512,
)
custom_imports = dict(allow_failed_imports=False, imports='mmdet.models')
data_root = 'data/ade/ADEChallengeData2016'
dataset_type = 'ADE20KDataset'
default_hooks = dict(
    checkpoint=dict(
        by_epoch=False, interval=5000, save_best='mIoU',
        type='CheckpointHook'),
    logger=dict(interval=50, log_metric_by_epoch=False, type='LoggerHook'),
    param_scheduler=dict(type='ParamSchedulerHook'),
    sampler_seed=dict(type='DistSamplerSeedHook'),
    timer=dict(type='IterTimerHook'),
    visualization=dict(type='SegVisualizationHook'))
default_scope = 'mmseg'
embed_multi = dict(decay_mult=0.0, lr_mult=1.0)
env_cfg = dict(
    cudnn_benchmark=True,
    dist_cfg=dict(backend='nccl'),
    mp_cfg=dict(mp_start_method='fork', opencv_num_threads=0))
img_ratios = [
    0.5,
    0.75,
    1.0,
    1.25,
    1.5,
    1.75,
]
launcher = 'none'
load_from = '../checkpoint_files/ade20k/mask2former/mask2former_r50_8xb2-160k_ade20k-512x512_20221204_000055-2d1f55f1.pth'
log_level = 'INFO'
log_processor = dict(by_epoch=False)
model = dict(
    backbone=dict(
        deep_stem=False,
        depth=50,
        frozen_stages=-1,
        init_cfg=dict(checkpoint='torchvision://resnet50', type='Pretrained'),
        norm_cfg=dict(requires_grad=False, type='SyncBN'),
        num_stages=4,
        out_indices=(
            0,
            1,
            2,
            3,
        ),
        style='pytorch',
        type='ResNet'),
    data_preprocessor=dict(
        bgr_to_rgb=True,
        corruption='zoom_blur',
        mean=[
            123.675,
            116.28,
            103.53,
        ],
        pad_val=0,
        seg_pad_val=255,
        size=(
            512,
            512,
        ),
        std=[
            58.395,
            57.12,
            57.375,
        ],
        test_cfg=dict(size_divisor=32),
        type='SegDataPreProcessor'),
    decode_head=dict(
        align_corners=False,
        enforce_decoder_input_project=False,
        feat_channels=256,
        in_channels=[
            256,
            512,
            1024,
            2048,
        ],
        loss_cls=dict(
            class_weight=[
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                0.1,
            ],
            loss_weight=2.0,
            reduction='mean',
            type='mmdet.CrossEntropyLoss',
            use_sigmoid=False),
        loss_dice=dict(
            activate=True,
            eps=1.0,
            loss_weight=5.0,
            naive_dice=True,
            reduction='mean',
            type='mmdet.DiceLoss',
            use_sigmoid=True),
        loss_mask=dict(
            loss_weight=5.0,
            reduction='mean',
            type='mmdet.CrossEntropyLoss',
            use_sigmoid=True),
        num_classes=150,
        num_queries=100,
        num_transformer_feat_level=3,
        out_channels=256,
        pixel_decoder=dict(
            act_cfg=dict(type='ReLU'),
            encoder=dict(
                init_cfg=None,
                layer_cfg=dict(
                    ffn_cfg=dict(
                        act_cfg=dict(inplace=True, type='ReLU'),
                        embed_dims=256,
                        feedforward_channels=1024,
                        ffn_drop=0.0,
                        num_fcs=2),
                    self_attn_cfg=dict(
                        batch_first=True,
                        dropout=0.0,
                        embed_dims=256,
                        im2col_step=64,
                        init_cfg=None,
                        norm_cfg=None,
                        num_heads=8,
                        num_levels=3,
                        num_points=4)),
                num_layers=6),
            init_cfg=None,
            norm_cfg=dict(num_groups=32, type='GN'),
            num_outs=3,
            positional_encoding=dict(normalize=True, num_feats=128),
            type='mmdet.MSDeformAttnPixelDecoder'),
        positional_encoding=dict(normalize=True, num_feats=128),
        strides=[
            4,
            8,
            16,
            32,
        ],
        train_cfg=dict(
            assigner=dict(
                match_costs=[
                    dict(type='mmdet.ClassificationCost', weight=2.0),
                    dict(
                        type='mmdet.CrossEntropyLossCost',
                        use_sigmoid=True,
                        weight=5.0),
                    dict(
                        eps=1.0,
                        pred_act=True,
                        type='mmdet.DiceCost',
                        weight=5.0),
                ],
                type='mmdet.HungarianAssigner'),
            importance_sample_ratio=0.75,
            num_points=12544,
            oversample_ratio=3.0,
            sampler=dict(type='mmdet.MaskPseudoSampler')),
        transformer_decoder=dict(
            init_cfg=None,
            layer_cfg=dict(
                cross_attn_cfg=dict(
                    attn_drop=0.0,
                    batch_first=True,
                    dropout_layer=None,
                    embed_dims=256,
                    num_heads=8,
                    proj_drop=0.0),
                ffn_cfg=dict(
                    act_cfg=dict(inplace=True, type='ReLU'),
                    add_identity=True,
                    dropout_layer=None,
                    embed_dims=256,
                    feedforward_channels=2048,
                    ffn_drop=0.0,
                    num_fcs=2),
                self_attn_cfg=dict(
                    attn_drop=0.0,
                    batch_first=True,
                    dropout_layer=None,
                    embed_dims=256,
                    num_heads=8,
                    proj_drop=0.0)),
            num_layers=9,
            return_intermediate=True),
        type='Mask2FormerHead'),
    test_cfg=dict(mode='whole'),
    train_cfg=dict(),
    type='EncoderDecoder')
num_classes = 150
optim_wrapper = dict(
    clip_grad=dict(max_norm=0.01, norm_type=2),
    optimizer=dict(
        betas=(
            0.9,
            0.999,
        ),
        eps=1e-08,
        lr=0.0001,
        type='AdamW',
        weight_decay=0.05),
    paramwise_cfg=dict(
        custom_keys=dict(
            backbone=dict(decay_mult=1.0, lr_mult=0.1),
            level_embed=dict(decay_mult=0.0, lr_mult=1.0),
            query_embed=dict(decay_mult=0.0, lr_mult=1.0),
            query_feat=dict(decay_mult=0.0, lr_mult=1.0)),
        norm_decay_mult=0.0),
    type='OptimWrapper')
optimizer = dict(
    betas=(
        0.9,
        0.999,
    ),
    eps=1e-08,
    lr=0.0001,
    type='AdamW',
    weight_decay=0.05)
param_scheduler = [
    dict(
        begin=0,
        by_epoch=False,
        end=160000,
        eta_min=0,
        power=0.9,
        type='PolyLR'),
]
resume = False
test_cfg = dict(type='TestLoop')
test_dataloader = dict(
    batch_size=1,
    dataset=dict(
        data_prefix=dict(
            img_path='images/validation',
            seg_map_path='annotations/validation'),
        data_root='data/ade/ADEChallengeData2016',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(keep_ratio=True, scale=(
                2048,
                512,
            ), type='Resize'),
            dict(reduce_zero_label=True, type='LoadAnnotations'),
            dict(type='PackSegInputs'),
        ],
        type='ADE20KDataset'),
    num_workers=4,
    persistent_workers=True,
    sampler=dict(shuffle=False, type='DefaultSampler'))
test_evaluator = dict(
    iou_metrics=[
        'mIoU',
    ], type='IoUMetric')
test_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(keep_ratio=True, scale=(
        2048,
        512,
    ), type='Resize'),
    dict(reduce_zero_label=True, type='LoadAnnotations'),
    dict(type='PackSegInputs'),
]
train_cfg = dict(
    max_iters=160000, type='IterBasedTrainLoop', val_interval=5000)
train_dataloader = dict(
    batch_size=2,
    dataset=dict(
        data_prefix=dict(
            img_path='images/training', seg_map_path='annotations/training'),
        data_root='data/ade/ADEChallengeData2016',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(reduce_zero_label=True, type='LoadAnnotations'),
            dict(
                max_size=2048,
                resize_type='ResizeShortestEdge',
                scales=[
                    256,
                    307,
                    358,
                    409,
                    460,
                    512,
                    563,
                    614,
                    665,
                    716,
                    768,
                    819,
                    870,
                    921,
                    972,
                    1024,
                ],
                type='RandomChoiceResize'),
            dict(
                cat_max_ratio=0.75, crop_size=(
                    512,
                    512,
                ), type='RandomCrop'),
            dict(prob=0.5, type='RandomFlip'),
            dict(type='PhotoMetricDistortion'),
            dict(type='PackSegInputs'),
        ],
        type='ADE20KDataset'),
    num_workers=4,
    persistent_workers=True,
    sampler=dict(shuffle=True, type='InfiniteSampler'))
train_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(reduce_zero_label=True, type='LoadAnnotations'),
    dict(
        max_size=2048,
        resize_type='ResizeShortestEdge',
        scales=[
            256,
            307,
            358,
            409,
            460,
            512,
            563,
            614,
            665,
            716,
            768,
            819,
            870,
            921,
            972,
            1024,
        ],
        type='RandomChoiceResize'),
    dict(cat_max_ratio=0.75, crop_size=(
        512,
        512,
    ), type='RandomCrop'),
    dict(prob=0.5, type='RandomFlip'),
    dict(type='PhotoMetricDistortion'),
    dict(type='PackSegInputs'),
]
tta_model = dict(type='SegTTAModel')
tta_pipeline = [
    dict(backend_args=None, type='LoadImageFromFile'),
    dict(
        transforms=[
            [
                dict(keep_ratio=True, scale_factor=0.5, type='Resize'),
                dict(keep_ratio=True, scale_factor=0.75, type='Resize'),
                dict(keep_ratio=True, scale_factor=1.0, type='Resize'),
                dict(keep_ratio=True, scale_factor=1.25, type='Resize'),
                dict(keep_ratio=True, scale_factor=1.5, type='Resize'),
                dict(keep_ratio=True, scale_factor=1.75, type='Resize'),
            ],
            [
                dict(direction='horizontal', prob=0.0, type='RandomFlip'),
                dict(direction='horizontal', prob=1.0, type='RandomFlip'),
            ],
            [
                dict(type='LoadAnnotations'),
            ],
            [
                dict(type='PackSegInputs'),
            ],
        ],
        type='TestTimeAug'),
]
val_cfg = dict(type='ValLoop')
val_dataloader = dict(
    batch_size=1,
    dataset=dict(
        data_prefix=dict(
            img_path='images/validation',
            seg_map_path='annotations/validation'),
        data_root='data/ade/ADEChallengeData2016',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(keep_ratio=True, scale=(
                2048,
                512,
            ), type='Resize'),
            dict(reduce_zero_label=True, type='LoadAnnotations'),
            dict(type='PackSegInputs'),
        ],
        type='ADE20KDataset'),
    num_workers=4,
    persistent_workers=True,
    sampler=dict(shuffle=False, type='DefaultSampler'))
val_evaluator = dict(
    iou_metrics=[
        'mIoU',
    ], type='IoUMetric')
vis_backends = [
    dict(type='LocalVisBackend'),
]
visualizer = dict(
    name='visualizer',
    type='SegLocalVisualizer',
    vis_backends=[
        dict(type='LocalVisBackend'),
    ])
work_dir = '../corruptions/work_dirs/ade20k/mask2former/mask2former_r50_8xb2-160k_ade20k-512x512/zoom_blur'

09/21 05:12:05 - mmengine - INFO - Distributed training is not used, all SyncBatchNorm (SyncBN) layers in the model will be automatically reverted to BatchNormXd layers if they are used.
09/21 05:12:05 - mmengine - INFO - Hooks will be executed in the following order:
before_run:
(VERY_HIGH   ) RuntimeInfoHook                    
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
before_train:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_train_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(NORMAL      ) DistSamplerSeedHook                
 -------------------- 
before_train_iter:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_train_iter:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(NORMAL      ) SegVisualizationHook               
(BELOW_NORMAL) LoggerHook                         
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
after_train_epoch:
(NORMAL      ) IterTimerHook                      
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_val:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
before_val_epoch:
(NORMAL      ) IterTimerHook                      
 -------------------- 
before_val_iter:
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_val_iter:
(NORMAL      ) IterTimerHook                      
(NORMAL      ) SegVisualizationHook               
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_val_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
after_val:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
after_train:
(VERY_HIGH   ) RuntimeInfoHook                    
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_test:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
before_test_epoch:
(NORMAL      ) IterTimerHook                      
 -------------------- 
before_test_iter:
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_test_iter:
(NORMAL      ) IterTimerHook                      
(NORMAL      ) SegVisualizationHook               
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_test_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_test:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
after_run:
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
09/21 05:12:05 - mmengine - WARNING - The prefix is not set in metric class IoUMetric.
Loads checkpoint by local backend from path: ../checkpoint_files/ade20k/mask2former/mask2former_r50_8xb2-160k_ade20k-512x512_20221204_000055-2d1f55f1.pth
09/21 05:12:06 - mmengine - INFO - Load checkpoint from ../checkpoint_files/ade20k/mask2former/mask2former_r50_8xb2-160k_ade20k-512x512_20221204_000055-2d1f55f1.pth
09/21 05:13:41 - mmengine - INFO - Iter(test) [  50/2000]    eta: 1:02:00  time: 1.5818  data_time: 0.0014  memory: 17167  
09/21 05:14:27 - mmengine - INFO - Iter(test) [ 100/2000]    eta: 0:44:54  time: 1.1575  data_time: 0.0014  memory: 17158  
09/21 05:15:01 - mmengine - INFO - Iter(test) [ 150/2000]    eta: 0:36:03  time: 0.6906  data_time: 0.0014  memory: 872  
09/21 05:15:45 - mmengine - INFO - Iter(test) [ 200/2000]    eta: 0:32:52  time: 0.6696  data_time: 0.0014  memory: 17214  
09/21 05:16:23 - mmengine - INFO - Iter(test) [ 250/2000]    eta: 0:30:04  time: 0.6545  data_time: 0.0013  memory: 17221  
09/21 05:17:00 - mmengine - INFO - Iter(test) [ 300/2000]    eta: 0:27:48  time: 0.6791  data_time: 0.0014  memory: 17162  
09/21 05:17:42 - mmengine - INFO - Iter(test) [ 350/2000]    eta: 0:26:24  time: 0.6312  data_time: 0.0013  memory: 17165  
09/21 05:18:19 - mmengine - INFO - Iter(test) [ 400/2000]    eta: 0:24:51  time: 0.6737  data_time: 0.0013  memory: 17147  
09/21 05:18:49 - mmengine - INFO - Iter(test) [ 450/2000]    eta: 0:23:09  time: 0.6133  data_time: 0.0013  memory: 883  
09/21 05:19:22 - mmengine - INFO - Iter(test) [ 500/2000]    eta: 0:21:49  time: 0.6437  data_time: 0.0013  memory: 872  
09/21 05:19:57 - mmengine - INFO - Iter(test) [ 550/2000]    eta: 0:20:42  time: 0.6974  data_time: 0.0014  memory: 983  
09/21 05:20:30 - mmengine - INFO - Iter(test) [ 600/2000]    eta: 0:19:36  time: 0.6883  data_time: 0.0014  memory: 981  
09/21 05:21:07 - mmengine - INFO - Iter(test) [ 650/2000]    eta: 0:18:45  time: 1.1399  data_time: 0.0013  memory: 17168  
09/21 05:21:47 - mmengine - INFO - Iter(test) [ 700/2000]    eta: 0:17:59  time: 0.6827  data_time: 0.0014  memory: 17163  
09/21 05:22:20 - mmengine - INFO - Iter(test) [ 750/2000]    eta: 0:17:04  time: 0.6494  data_time: 0.0013  memory: 1039  
09/21 05:22:52 - mmengine - INFO - Iter(test) [ 800/2000]    eta: 0:16:08  time: 0.6660  data_time: 0.0015  memory: 872  
09/21 05:23:25 - mmengine - INFO - Iter(test) [ 850/2000]    eta: 0:15:19  time: 0.6768  data_time: 0.0015  memory: 844  
09/21 05:23:56 - mmengine - INFO - Iter(test) [ 900/2000]    eta: 0:14:28  time: 0.6017  data_time: 0.0013  memory: 925  
09/21 05:24:30 - mmengine - INFO - Iter(test) [ 950/2000]    eta: 0:13:42  time: 0.6517  data_time: 0.0014  memory: 955  
09/21 05:25:01 - mmengine - INFO - Iter(test) [1000/2000]    eta: 0:12:55  time: 0.6362  data_time: 0.0014  memory: 955  
09/21 05:25:40 - mmengine - INFO - Iter(test) [1050/2000]    eta: 0:12:16  time: 0.6880  data_time: 0.0013  memory: 17170  
09/21 05:26:13 - mmengine - INFO - Iter(test) [1100/2000]    eta: 0:11:33  time: 0.6516  data_time: 0.0014  memory: 952  
09/21 05:26:46 - mmengine - INFO - Iter(test) [1150/2000]    eta: 0:10:50  time: 0.6655  data_time: 0.0013  memory: 924  
09/21 05:27:20 - mmengine - INFO - Iter(test) [1200/2000]    eta: 0:10:09  time: 0.6489  data_time: 0.0014  memory: 1829  
09/21 05:27:56 - mmengine - INFO - Iter(test) [1250/2000]    eta: 0:09:30  time: 0.6417  data_time: 0.0014  memory: 17158  
09/21 05:28:27 - mmengine - INFO - Iter(test) [1300/2000]    eta: 0:08:48  time: 0.6671  data_time: 0.0018  memory: 872  
09/21 05:29:00 - mmengine - INFO - Iter(test) [1350/2000]    eta: 0:08:08  time: 0.6152  data_time: 0.0013  memory: 872  
09/21 05:29:33 - mmengine - INFO - Iter(test) [1400/2000]    eta: 0:07:28  time: 0.6910  data_time: 0.0013  memory: 953  
09/21 05:30:04 - mmengine - INFO - Iter(test) [1450/2000]    eta: 0:06:49  time: 0.6836  data_time: 0.0013  memory: 955  
09/21 05:30:37 - mmengine - INFO - Iter(test) [1500/2000]    eta: 0:06:10  time: 0.6153  data_time: 0.0013  memory: 869  
09/21 05:31:12 - mmengine - INFO - Iter(test) [1550/2000]    eta: 0:05:32  time: 0.7019  data_time: 0.0014  memory: 955  
09/21 05:31:45 - mmengine - INFO - Iter(test) [1600/2000]    eta: 0:04:54  time: 0.6558  data_time: 0.0014  memory: 844  
09/21 05:32:25 - mmengine - INFO - Iter(test) [1650/2000]    eta: 0:04:18  time: 0.6761  data_time: 0.0013  memory: 17165  
09/21 05:33:01 - mmengine - INFO - Iter(test) [1700/2000]    eta: 0:03:41  time: 0.7783  data_time: 0.0014  memory: 952  
09/21 05:33:37 - mmengine - INFO - Iter(test) [1750/2000]    eta: 0:03:04  time: 0.6556  data_time: 0.0013  memory: 980  
09/21 05:34:10 - mmengine - INFO - Iter(test) [1800/2000]    eta: 0:02:27  time: 0.6904  data_time: 0.0015  memory: 872  
09/21 05:34:44 - mmengine - INFO - Iter(test) [1850/2000]    eta: 0:01:50  time: 0.6795  data_time: 0.0015  memory: 787  
09/21 05:35:15 - mmengine - INFO - Iter(test) [1900/2000]    eta: 0:01:13  time: 0.6468  data_time: 0.0013  memory: 1011  
09/21 05:35:50 - mmengine - INFO - Iter(test) [1950/2000]    eta: 0:00:36  time: 0.6692  data_time: 0.0013  memory: 1258  
09/21 05:36:24 - mmengine - INFO - Iter(test) [2000/2000]    eta: 0:00:00  time: 0.6008  data_time: 0.0012  memory: 1037  
09/21 05:36:24 - mmengine - INFO - per class results:
09/21 05:36:24 - mmengine - INFO - 
+---------------------+-------+-------+
|        Class        |  IoU  |  Acc  |
+---------------------+-------+-------+
|         wall        |  50.7 |  81.8 |
|       building      | 60.97 | 76.45 |
|         sky         | 82.16 | 84.93 |
|        floor        | 50.52 | 75.98 |
|         tree        | 19.78 | 21.12 |
|       ceiling       | 54.53 | 86.53 |
|         road        | 43.66 |  46.0 |
|         bed         | 65.15 | 86.96 |
|      windowpane     | 37.11 | 64.42 |
|        grass        | 46.08 | 63.97 |
|       cabinet       | 37.62 | 46.09 |
|       sidewalk      |  22.0 | 31.56 |
|        person       | 44.24 |  49.4 |
|        earth        |  8.58 | 12.32 |
|         door        | 16.32 | 18.72 |
|        table        | 36.11 | 50.82 |
|       mountain      |  25.0 | 41.29 |
|        plant        | 11.24 | 14.67 |
|       curtain       | 38.39 | 59.02 |
|        chair        | 26.14 | 32.13 |
|         car         | 55.66 | 64.61 |
|        water        | 24.11 | 72.14 |
|       painting      |  36.4 | 56.83 |
|         sofa        | 38.94 |  65.8 |
|        shelf        | 15.73 | 23.23 |
|        house        | 27.17 | 30.22 |
|         sea         | 20.82 |  45.7 |
|        mirror       | 37.29 |  51.1 |
|         rug         | 15.21 | 15.39 |
|        field        | 20.18 |  38.8 |
|       armchair      | 12.77 | 16.35 |
|         seat        | 16.11 | 43.64 |
|        fence        | 12.01 | 18.19 |
|         desk        | 24.58 | 29.67 |
|         rock        |  5.44 |  5.68 |
|       wardrobe      | 22.23 | 26.32 |
|         lamp        | 35.39 | 47.89 |
|       bathtub       | 44.64 | 70.01 |
|       railing       |  10.2 |  17.2 |
|       cushion       | 22.16 | 26.03 |
|         base        |  3.42 |  4.45 |
|         box         |  0.58 |  0.62 |
|        column       | 14.05 | 17.95 |
|      signboard      | 14.65 | 17.82 |
|   chest of drawers  | 18.41 | 30.56 |
|       counter       | 19.04 | 33.05 |
|         sand        |  4.82 |  29.4 |
|         sink        | 39.61 | 52.91 |
|      skyscraper     | 49.01 | 81.57 |
|      fireplace      | 29.81 | 46.99 |
|     refrigerator    | 30.38 |  36.2 |
|      grandstand     | 16.35 |  25.6 |
|         path        |  5.32 |  5.56 |
|        stairs       |  2.1  |  2.21 |
|        runway       |  56.6 | 93.77 |
|         case        | 21.64 | 32.73 |
|      pool table     | 63.81 | 80.24 |
|        pillow       | 38.76 | 53.97 |
|     screen door     | 29.97 | 45.07 |
|       stairway      | 12.37 | 14.07 |
|        river        |  0.21 |  0.22 |
|        bridge       | 11.22 | 22.75 |
|       bookcase      | 13.91 | 17.46 |
|        blind        | 13.53 |  17.1 |
|     coffee table    | 37.53 | 64.66 |
|        toilet       | 59.94 | 69.72 |
|        flower       |  16.1 |  19.1 |
|         book        | 14.92 | 16.51 |
|         hill        |  3.27 |  6.98 |
|        bench        | 25.88 | 37.41 |
|      countertop     | 37.04 | 52.08 |
|        stove        | 50.84 |  61.9 |
|         palm        | 10.25 | 41.93 |
|    kitchen island   | 35.55 | 78.37 |
|       computer      | 31.87 | 34.29 |
|     swivel chair    | 15.01 | 16.54 |
|         boat        |  2.66 |  3.27 |
|         bar         | 12.95 | 16.85 |
|    arcade machine   | 15.79 |  17.2 |
|        hovel        |  7.49 |  8.07 |
|         bus         |  19.7 | 23.63 |
|        towel        | 20.25 | 26.78 |
|        light        |  24.9 | 39.78 |
|        truck        |  0.0  |  0.0  |
|        tower        |  2.28 |  3.08 |
|      chandelier     | 29.34 | 33.91 |
|        awning       |  4.99 |  5.74 |
|     streetlight     |  4.21 |  4.96 |
|        booth        |  8.1  |  8.16 |
| television receiver | 32.02 | 36.76 |
|       airplane      | 22.07 | 59.04 |
|      dirt track     |  19.2 | 19.63 |
|       apparel       |  0.0  |  0.0  |
|         pole        |  1.93 |  2.2  |
|         land        |  2.49 |  6.31 |
|      bannister      |  1.46 |  7.79 |
|      escalator      | 27.75 | 52.33 |
|       ottoman       | 10.78 | 13.97 |
|        bottle       |  1.54 |  1.61 |
|        buffet       | 24.61 | 27.62 |
|        poster       | 14.98 | 24.18 |
|        stage        |  0.0  |  0.0  |
|         van         |  5.18 |  5.71 |
|         ship        |  1.94 |  6.16 |
|       fountain      |  0.0  |  0.0  |
|    conveyer belt    |  23.8 |  33.4 |
|        canopy       |  5.72 |  6.4  |
|        washer       | 60.68 | 62.43 |
|      plaything      |  2.17 |  2.33 |
|    swimming pool    | 10.59 | 23.31 |
|        stool        | 15.03 | 19.39 |
|        barrel       |  0.0  |  0.0  |
|        basket       |  3.53 |  3.88 |
|      waterfall      |  8.83 | 19.31 |
|         tent        | 18.32 | 19.51 |
|         bag         |  0.0  |  0.0  |
|       minibike      | 40.18 | 46.48 |
|        cradle       | 19.88 | 21.69 |
|         oven        | 21.49 | 26.92 |
|         ball        | 11.04 | 18.46 |
|         food        | 10.49 | 10.77 |
|         step        |  5.4  |  8.06 |
|         tank        |  8.06 |  8.35 |
|      trade name     |  5.79 |  5.88 |
|      microwave      | 20.45 | 21.86 |
|         pot         |  8.1  |  8.7  |
|        animal       | 45.08 |  51.5 |
|       bicycle       |  3.42 |  3.75 |
|         lake        |  0.0  |  0.0  |
|      dishwasher     | 22.75 | 26.14 |
|        screen       | 56.72 |  83.9 |
|       blanket       |  6.33 |  8.41 |
|      sculpture      | 20.68 | 49.81 |
|         hood        | 44.19 | 64.86 |
|        sconce       | 13.59 |  29.1 |
|         vase        | 10.72 | 17.23 |
|    traffic light    |  3.94 |  4.42 |
|         tray        |  3.75 |  6.29 |
|        ashcan       | 15.35 | 15.68 |
|         fan         | 20.39 | 25.95 |
|         pier        |  0.0  |  0.0  |
|      crt screen     |  0.0  |  0.0  |
|        plate        | 16.49 | 22.05 |
|       monitor       |  0.05 |  0.05 |
|    bulletin board   | 14.39 | 14.45 |
|        shower       |  0.34 |  3.58 |
|       radiator      | 21.11 | 36.32 |
|        glass        |  2.51 |  2.93 |
|        clock        |  6.25 |  6.47 |
|         flag        | 11.49 | 16.46 |
+---------------------+-------+-------+
09/21 05:36:24 - mmengine - INFO - Iter(test) [2000/2000]    aAcc: 60.2100  mIoU: 20.5300  mAcc: 29.2100  data_time: 0.0016  time: 0.7290
Finished processing corruption type: zoom_blur
Processing corruption type: snow
09/21 05:36:28 - mmengine - INFO - 
------------------------------------------------------------
System environment:
    sys.platform: linux
    Python: 3.10.13 | packaged by conda-forge | (main, Dec 23 2023, 15:36:39) [GCC 12.3.0]
    CUDA available: True
    MUSA available: False
    numpy_random_seed: 900458953
    GPU 0: Tesla V100-SXM2-32GB
    CUDA_HOME: /opt/bwhpc/common/devel/cuda/11.7
    NVCC: Cuda compilation tools, release 11.7, V11.7.99
    GCC: gcc (GCC) 8.5.0 20210514 (Red Hat 8.5.0-18)
    PyTorch: 1.13.1
    PyTorch compiling details: PyTorch built with:
  - GCC 9.3
  - C++ Version: 201402
  - Intel(R) oneAPI Math Kernel Library Version 2023.1-Product Build 20230303 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v2.6.0 (Git Hash 52b5f107dd9cf10910aaa19cb47f3abf9b349815)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - LAPACK is enabled (usually provided by MKL)
  - NNPACK is enabled
  - CPU capability usage: AVX2
  - CUDA Runtime 11.7
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_61,code=sm_61;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86;-gencode;arch=compute_37,code=compute_37
  - CuDNN 8.5
  - Magma 2.6.1
  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.7, CUDNN_VERSION=8.5.0, CXX_COMPILER=/opt/rh/devtoolset-9/root/usr/bin/c++, CXX_FLAGS= -fabi-version=11 -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -DEDGE_PROFILER_USE_KINETO -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Werror=non-virtual-dtor -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wunused-local-typedefs -Wno-unused-parameter -Wno-unused-function -Wno-unused-result -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Werror=cast-function-type -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.13.1, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, USE_ROCM=OFF, 

    TorchVision: 0.14.1
    OpenCV: 3.4.18
    MMEngine: 0.10.4

Runtime environment:
    cudnn_benchmark: True
    mp_cfg: {'mp_start_method': 'fork', 'opencv_num_threads': 0}
    dist_cfg: {'backend': 'nccl'}
    seed: 900458953
    Distributed launcher: none
    Distributed training: False
    GPU number: 1
------------------------------------------------------------

09/21 05:36:28 - mmengine - INFO - Config:
auto_scale_lr = dict(base_batch_size=16, enable=False)
crop_size = (
    512,
    512,
)
custom_imports = dict(allow_failed_imports=False, imports='mmdet.models')
data_root = 'data/ade/ADEChallengeData2016'
dataset_type = 'ADE20KDataset'
default_hooks = dict(
    checkpoint=dict(
        by_epoch=False, interval=5000, save_best='mIoU',
        type='CheckpointHook'),
    logger=dict(interval=50, log_metric_by_epoch=False, type='LoggerHook'),
    param_scheduler=dict(type='ParamSchedulerHook'),
    sampler_seed=dict(type='DistSamplerSeedHook'),
    timer=dict(type='IterTimerHook'),
    visualization=dict(type='SegVisualizationHook'))
default_scope = 'mmseg'
embed_multi = dict(decay_mult=0.0, lr_mult=1.0)
env_cfg = dict(
    cudnn_benchmark=True,
    dist_cfg=dict(backend='nccl'),
    mp_cfg=dict(mp_start_method='fork', opencv_num_threads=0))
img_ratios = [
    0.5,
    0.75,
    1.0,
    1.25,
    1.5,
    1.75,
]
launcher = 'none'
load_from = '../checkpoint_files/ade20k/mask2former/mask2former_r50_8xb2-160k_ade20k-512x512_20221204_000055-2d1f55f1.pth'
log_level = 'INFO'
log_processor = dict(by_epoch=False)
model = dict(
    backbone=dict(
        deep_stem=False,
        depth=50,
        frozen_stages=-1,
        init_cfg=dict(checkpoint='torchvision://resnet50', type='Pretrained'),
        norm_cfg=dict(requires_grad=False, type='SyncBN'),
        num_stages=4,
        out_indices=(
            0,
            1,
            2,
            3,
        ),
        style='pytorch',
        type='ResNet'),
    data_preprocessor=dict(
        bgr_to_rgb=True,
        corruption='snow',
        mean=[
            123.675,
            116.28,
            103.53,
        ],
        pad_val=0,
        seg_pad_val=255,
        size=(
            512,
            512,
        ),
        std=[
            58.395,
            57.12,
            57.375,
        ],
        test_cfg=dict(size_divisor=32),
        type='SegDataPreProcessor'),
    decode_head=dict(
        align_corners=False,
        enforce_decoder_input_project=False,
        feat_channels=256,
        in_channels=[
            256,
            512,
            1024,
            2048,
        ],
        loss_cls=dict(
            class_weight=[
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                0.1,
            ],
            loss_weight=2.0,
            reduction='mean',
            type='mmdet.CrossEntropyLoss',
            use_sigmoid=False),
        loss_dice=dict(
            activate=True,
            eps=1.0,
            loss_weight=5.0,
            naive_dice=True,
            reduction='mean',
            type='mmdet.DiceLoss',
            use_sigmoid=True),
        loss_mask=dict(
            loss_weight=5.0,
            reduction='mean',
            type='mmdet.CrossEntropyLoss',
            use_sigmoid=True),
        num_classes=150,
        num_queries=100,
        num_transformer_feat_level=3,
        out_channels=256,
        pixel_decoder=dict(
            act_cfg=dict(type='ReLU'),
            encoder=dict(
                init_cfg=None,
                layer_cfg=dict(
                    ffn_cfg=dict(
                        act_cfg=dict(inplace=True, type='ReLU'),
                        embed_dims=256,
                        feedforward_channels=1024,
                        ffn_drop=0.0,
                        num_fcs=2),
                    self_attn_cfg=dict(
                        batch_first=True,
                        dropout=0.0,
                        embed_dims=256,
                        im2col_step=64,
                        init_cfg=None,
                        norm_cfg=None,
                        num_heads=8,
                        num_levels=3,
                        num_points=4)),
                num_layers=6),
            init_cfg=None,
            norm_cfg=dict(num_groups=32, type='GN'),
            num_outs=3,
            positional_encoding=dict(normalize=True, num_feats=128),
            type='mmdet.MSDeformAttnPixelDecoder'),
        positional_encoding=dict(normalize=True, num_feats=128),
        strides=[
            4,
            8,
            16,
            32,
        ],
        train_cfg=dict(
            assigner=dict(
                match_costs=[
                    dict(type='mmdet.ClassificationCost', weight=2.0),
                    dict(
                        type='mmdet.CrossEntropyLossCost',
                        use_sigmoid=True,
                        weight=5.0),
                    dict(
                        eps=1.0,
                        pred_act=True,
                        type='mmdet.DiceCost',
                        weight=5.0),
                ],
                type='mmdet.HungarianAssigner'),
            importance_sample_ratio=0.75,
            num_points=12544,
            oversample_ratio=3.0,
            sampler=dict(type='mmdet.MaskPseudoSampler')),
        transformer_decoder=dict(
            init_cfg=None,
            layer_cfg=dict(
                cross_attn_cfg=dict(
                    attn_drop=0.0,
                    batch_first=True,
                    dropout_layer=None,
                    embed_dims=256,
                    num_heads=8,
                    proj_drop=0.0),
                ffn_cfg=dict(
                    act_cfg=dict(inplace=True, type='ReLU'),
                    add_identity=True,
                    dropout_layer=None,
                    embed_dims=256,
                    feedforward_channels=2048,
                    ffn_drop=0.0,
                    num_fcs=2),
                self_attn_cfg=dict(
                    attn_drop=0.0,
                    batch_first=True,
                    dropout_layer=None,
                    embed_dims=256,
                    num_heads=8,
                    proj_drop=0.0)),
            num_layers=9,
            return_intermediate=True),
        type='Mask2FormerHead'),
    test_cfg=dict(mode='whole'),
    train_cfg=dict(),
    type='EncoderDecoder')
num_classes = 150
optim_wrapper = dict(
    clip_grad=dict(max_norm=0.01, norm_type=2),
    optimizer=dict(
        betas=(
            0.9,
            0.999,
        ),
        eps=1e-08,
        lr=0.0001,
        type='AdamW',
        weight_decay=0.05),
    paramwise_cfg=dict(
        custom_keys=dict(
            backbone=dict(decay_mult=1.0, lr_mult=0.1),
            level_embed=dict(decay_mult=0.0, lr_mult=1.0),
            query_embed=dict(decay_mult=0.0, lr_mult=1.0),
            query_feat=dict(decay_mult=0.0, lr_mult=1.0)),
        norm_decay_mult=0.0),
    type='OptimWrapper')
optimizer = dict(
    betas=(
        0.9,
        0.999,
    ),
    eps=1e-08,
    lr=0.0001,
    type='AdamW',
    weight_decay=0.05)
param_scheduler = [
    dict(
        begin=0,
        by_epoch=False,
        end=160000,
        eta_min=0,
        power=0.9,
        type='PolyLR'),
]
resume = False
test_cfg = dict(type='TestLoop')
test_dataloader = dict(
    batch_size=1,
    dataset=dict(
        data_prefix=dict(
            img_path='images/validation',
            seg_map_path='annotations/validation'),
        data_root='data/ade/ADEChallengeData2016',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(keep_ratio=True, scale=(
                2048,
                512,
            ), type='Resize'),
            dict(reduce_zero_label=True, type='LoadAnnotations'),
            dict(type='PackSegInputs'),
        ],
        type='ADE20KDataset'),
    num_workers=4,
    persistent_workers=True,
    sampler=dict(shuffle=False, type='DefaultSampler'))
test_evaluator = dict(
    iou_metrics=[
        'mIoU',
    ], type='IoUMetric')
test_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(keep_ratio=True, scale=(
        2048,
        512,
    ), type='Resize'),
    dict(reduce_zero_label=True, type='LoadAnnotations'),
    dict(type='PackSegInputs'),
]
train_cfg = dict(
    max_iters=160000, type='IterBasedTrainLoop', val_interval=5000)
train_dataloader = dict(
    batch_size=2,
    dataset=dict(
        data_prefix=dict(
            img_path='images/training', seg_map_path='annotations/training'),
        data_root='data/ade/ADEChallengeData2016',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(reduce_zero_label=True, type='LoadAnnotations'),
            dict(
                max_size=2048,
                resize_type='ResizeShortestEdge',
                scales=[
                    256,
                    307,
                    358,
                    409,
                    460,
                    512,
                    563,
                    614,
                    665,
                    716,
                    768,
                    819,
                    870,
                    921,
                    972,
                    1024,
                ],
                type='RandomChoiceResize'),
            dict(
                cat_max_ratio=0.75, crop_size=(
                    512,
                    512,
                ), type='RandomCrop'),
            dict(prob=0.5, type='RandomFlip'),
            dict(type='PhotoMetricDistortion'),
            dict(type='PackSegInputs'),
        ],
        type='ADE20KDataset'),
    num_workers=4,
    persistent_workers=True,
    sampler=dict(shuffle=True, type='InfiniteSampler'))
train_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(reduce_zero_label=True, type='LoadAnnotations'),
    dict(
        max_size=2048,
        resize_type='ResizeShortestEdge',
        scales=[
            256,
            307,
            358,
            409,
            460,
            512,
            563,
            614,
            665,
            716,
            768,
            819,
            870,
            921,
            972,
            1024,
        ],
        type='RandomChoiceResize'),
    dict(cat_max_ratio=0.75, crop_size=(
        512,
        512,
    ), type='RandomCrop'),
    dict(prob=0.5, type='RandomFlip'),
    dict(type='PhotoMetricDistortion'),
    dict(type='PackSegInputs'),
]
tta_model = dict(type='SegTTAModel')
tta_pipeline = [
    dict(backend_args=None, type='LoadImageFromFile'),
    dict(
        transforms=[
            [
                dict(keep_ratio=True, scale_factor=0.5, type='Resize'),
                dict(keep_ratio=True, scale_factor=0.75, type='Resize'),
                dict(keep_ratio=True, scale_factor=1.0, type='Resize'),
                dict(keep_ratio=True, scale_factor=1.25, type='Resize'),
                dict(keep_ratio=True, scale_factor=1.5, type='Resize'),
                dict(keep_ratio=True, scale_factor=1.75, type='Resize'),
            ],
            [
                dict(direction='horizontal', prob=0.0, type='RandomFlip'),
                dict(direction='horizontal', prob=1.0, type='RandomFlip'),
            ],
            [
                dict(type='LoadAnnotations'),
            ],
            [
                dict(type='PackSegInputs'),
            ],
        ],
        type='TestTimeAug'),
]
val_cfg = dict(type='ValLoop')
val_dataloader = dict(
    batch_size=1,
    dataset=dict(
        data_prefix=dict(
            img_path='images/validation',
            seg_map_path='annotations/validation'),
        data_root='data/ade/ADEChallengeData2016',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(keep_ratio=True, scale=(
                2048,
                512,
            ), type='Resize'),
            dict(reduce_zero_label=True, type='LoadAnnotations'),
            dict(type='PackSegInputs'),
        ],
        type='ADE20KDataset'),
    num_workers=4,
    persistent_workers=True,
    sampler=dict(shuffle=False, type='DefaultSampler'))
val_evaluator = dict(
    iou_metrics=[
        'mIoU',
    ], type='IoUMetric')
vis_backends = [
    dict(type='LocalVisBackend'),
]
visualizer = dict(
    name='visualizer',
    type='SegLocalVisualizer',
    vis_backends=[
        dict(type='LocalVisBackend'),
    ])
work_dir = '../corruptions/work_dirs/ade20k/mask2former/mask2former_r50_8xb2-160k_ade20k-512x512/snow'

09/21 05:36:31 - mmengine - INFO - Distributed training is not used, all SyncBatchNorm (SyncBN) layers in the model will be automatically reverted to BatchNormXd layers if they are used.
09/21 05:36:31 - mmengine - INFO - Hooks will be executed in the following order:
before_run:
(VERY_HIGH   ) RuntimeInfoHook                    
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
before_train:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_train_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(NORMAL      ) DistSamplerSeedHook                
 -------------------- 
before_train_iter:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_train_iter:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(NORMAL      ) SegVisualizationHook               
(BELOW_NORMAL) LoggerHook                         
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
after_train_epoch:
(NORMAL      ) IterTimerHook                      
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_val:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
before_val_epoch:
(NORMAL      ) IterTimerHook                      
 -------------------- 
before_val_iter:
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_val_iter:
(NORMAL      ) IterTimerHook                      
(NORMAL      ) SegVisualizationHook               
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_val_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
after_val:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
after_train:
(VERY_HIGH   ) RuntimeInfoHook                    
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_test:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
before_test_epoch:
(NORMAL      ) IterTimerHook                      
 -------------------- 
before_test_iter:
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_test_iter:
(NORMAL      ) IterTimerHook                      
(NORMAL      ) SegVisualizationHook               
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_test_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_test:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
after_run:
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
09/21 05:36:31 - mmengine - WARNING - The prefix is not set in metric class IoUMetric.
Loads checkpoint by local backend from path: ../checkpoint_files/ade20k/mask2former/mask2former_r50_8xb2-160k_ade20k-512x512_20221204_000055-2d1f55f1.pth
09/21 05:36:32 - mmengine - INFO - Load checkpoint from ../checkpoint_files/ade20k/mask2former/mask2former_r50_8xb2-160k_ade20k-512x512_20221204_000055-2d1f55f1.pth
09/21 05:37:54 - mmengine - INFO - Iter(test) [  50/2000]    eta: 0:53:17  time: 1.2093  data_time: 0.0014  memory: 17167  
09/21 05:38:23 - mmengine - INFO - Iter(test) [ 100/2000]    eta: 0:35:16  time: 0.7941  data_time: 0.0015  memory: 17158  
09/21 05:38:38 - mmengine - INFO - Iter(test) [ 150/2000]    eta: 0:25:55  time: 0.2849  data_time: 0.0014  memory: 872  
09/21 05:39:04 - mmengine - INFO - Iter(test) [ 200/2000]    eta: 0:22:44  time: 0.3096  data_time: 0.0014  memory: 17214  
09/21 05:39:25 - mmengine - INFO - Iter(test) [ 250/2000]    eta: 0:20:12  time: 0.2723  data_time: 0.0014  memory: 17221  
09/21 05:39:45 - mmengine - INFO - Iter(test) [ 300/2000]    eta: 0:18:14  time: 0.2897  data_time: 0.0031  memory: 17162  
09/21 05:40:10 - mmengine - INFO - Iter(test) [ 350/2000]    eta: 0:17:07  time: 0.2596  data_time: 0.0014  memory: 17165  
09/21 05:40:28 - mmengine - INFO - Iter(test) [ 400/2000]    eta: 0:15:46  time: 0.2781  data_time: 0.0013  memory: 17147  
09/21 05:40:41 - mmengine - INFO - Iter(test) [ 450/2000]    eta: 0:14:18  time: 0.2539  data_time: 0.0013  memory: 883  
09/21 05:40:56 - mmengine - INFO - Iter(test) [ 500/2000]    eta: 0:13:11  time: 0.2714  data_time: 0.0013  memory: 872  
09/21 05:41:11 - mmengine - INFO - Iter(test) [ 550/2000]    eta: 0:12:15  time: 0.2935  data_time: 0.0015  memory: 983  
09/21 05:41:25 - mmengine - INFO - Iter(test) [ 600/2000]    eta: 0:11:23  time: 0.2834  data_time: 0.0015  memory: 981  
09/21 05:41:44 - mmengine - INFO - Iter(test) [ 650/2000]    eta: 0:10:47  time: 0.8181  data_time: 0.0013  memory: 17168  
09/21 05:42:04 - mmengine - INFO - Iter(test) [ 700/2000]    eta: 0:10:16  time: 0.2857  data_time: 0.0015  memory: 17163  
09/21 05:42:18 - mmengine - INFO - Iter(test) [ 750/2000]    eta: 0:09:36  time: 0.2674  data_time: 0.0013  memory: 1039  
09/21 05:42:31 - mmengine - INFO - Iter(test) [ 800/2000]    eta: 0:08:58  time: 0.2736  data_time: 0.0015  memory: 872  
09/21 05:42:45 - mmengine - INFO - Iter(test) [ 850/2000]    eta: 0:08:24  time: 0.2917  data_time: 0.0015  memory: 844  
09/21 05:42:59 - mmengine - INFO - Iter(test) [ 900/2000]    eta: 0:07:53  time: 0.2485  data_time: 0.0014  memory: 925  
09/21 05:43:13 - mmengine - INFO - Iter(test) [ 950/2000]    eta: 0:07:23  time: 0.2903  data_time: 0.0014  memory: 955  
09/21 05:43:27 - mmengine - INFO - Iter(test) [1000/2000]    eta: 0:06:54  time: 0.2680  data_time: 0.0014  memory: 955  
09/21 05:43:46 - mmengine - INFO - Iter(test) [1050/2000]    eta: 0:06:32  time: 0.2849  data_time: 0.0014  memory: 17170  
09/21 05:44:01 - mmengine - INFO - Iter(test) [1100/2000]    eta: 0:06:07  time: 0.2704  data_time: 0.0014  memory: 952  
09/21 05:44:15 - mmengine - INFO - Iter(test) [1150/2000]    eta: 0:05:42  time: 0.2733  data_time: 0.0013  memory: 924  
09/21 05:44:29 - mmengine - INFO - Iter(test) [1200/2000]    eta: 0:05:18  time: 0.2713  data_time: 0.0014  memory: 1829  
09/21 05:44:48 - mmengine - INFO - Iter(test) [1250/2000]    eta: 0:04:57  time: 0.2781  data_time: 0.0014  memory: 17158  
09/21 05:45:02 - mmengine - INFO - Iter(test) [1300/2000]    eta: 0:04:34  time: 0.2819  data_time: 0.0014  memory: 872  
09/21 05:45:16 - mmengine - INFO - Iter(test) [1350/2000]    eta: 0:04:12  time: 0.2752  data_time: 0.0014  memory: 872  
09/21 05:45:31 - mmengine - INFO - Iter(test) [1400/2000]    eta: 0:03:50  time: 0.2836  data_time: 0.0013  memory: 953  
09/21 05:45:44 - mmengine - INFO - Iter(test) [1450/2000]    eta: 0:03:29  time: 0.3157  data_time: 0.0014  memory: 955  
09/21 05:45:58 - mmengine - INFO - Iter(test) [1500/2000]    eta: 0:03:08  time: 0.2574  data_time: 0.0013  memory: 869  
09/21 05:46:13 - mmengine - INFO - Iter(test) [1550/2000]    eta: 0:02:48  time: 0.3317  data_time: 0.0014  memory: 955  
09/21 05:46:28 - mmengine - INFO - Iter(test) [1600/2000]    eta: 0:02:29  time: 0.2730  data_time: 0.0015  memory: 844  
09/21 05:46:47 - mmengine - INFO - Iter(test) [1650/2000]    eta: 0:02:10  time: 0.2551  data_time: 0.0013  memory: 17165  
09/21 05:47:01 - mmengine - INFO - Iter(test) [1700/2000]    eta: 0:01:51  time: 0.2750  data_time: 0.0014  memory: 952  
09/21 05:47:15 - mmengine - INFO - Iter(test) [1750/2000]    eta: 0:01:31  time: 0.2760  data_time: 0.0013  memory: 980  
09/21 05:47:28 - mmengine - INFO - Iter(test) [1800/2000]    eta: 0:01:12  time: 0.2779  data_time: 0.0015  memory: 872  
09/21 05:47:42 - mmengine - INFO - Iter(test) [1850/2000]    eta: 0:00:54  time: 0.2779  data_time: 0.0015  memory: 787  
09/21 05:47:55 - mmengine - INFO - Iter(test) [1900/2000]    eta: 0:00:35  time: 0.2696  data_time: 0.0014  memory: 1011  
09/21 05:48:09 - mmengine - INFO - Iter(test) [1950/2000]    eta: 0:00:17  time: 0.2688  data_time: 0.0014  memory: 1258  
09/21 05:48:23 - mmengine - INFO - Iter(test) [2000/2000]    eta: 0:00:00  time: 0.2522  data_time: 0.0013  memory: 1037  
09/21 05:48:23 - mmengine - INFO - per class results:
09/21 05:48:23 - mmengine - INFO - 
+---------------------+-------+-------+
|        Class        |  IoU  |  Acc  |
+---------------------+-------+-------+
|         wall        | 53.83 | 88.02 |
|       building      | 71.14 | 88.61 |
|         sky         | 85.54 |  89.2 |
|        floor        | 62.25 | 81.65 |
|         tree        | 64.35 | 74.66 |
|       ceiling       | 58.17 | 69.68 |
|         road        | 57.64 | 61.65 |
|         bed         | 54.65 | 57.75 |
|      windowpane     | 43.23 | 53.94 |
|        grass        | 63.75 | 81.57 |
|       cabinet       | 23.54 | 26.93 |
|       sidewalk      | 48.38 | 64.27 |
|        person       | 67.23 | 76.08 |
|        earth        | 27.14 | 38.88 |
|         door        | 14.62 | 18.09 |
|        table        | 41.95 | 52.83 |
|       mountain      |  28.5 | 35.42 |
|        plant        | 40.27 | 56.52 |
|       curtain       | 27.32 | 29.59 |
|        chair        | 40.89 |  50.7 |
|         car         | 71.12 | 82.55 |
|        water        | 30.21 |  60.9 |
|       painting      |  53.2 | 57.04 |
|         sofa        | 44.91 |  57.9 |
|        shelf        | 21.65 |  43.7 |
|        house        | 16.23 | 18.08 |
|         sea         | 31.68 | 37.36 |
|        mirror       | 33.81 | 38.21 |
|         rug         |  24.4 | 24.68 |
|        field        | 26.92 | 44.55 |
|       armchair      | 20.14 | 23.57 |
|         seat        | 21.93 | 45.38 |
|        fence        | 19.22 | 36.79 |
|         desk        | 16.43 | 17.92 |
|         rock        | 26.86 | 32.34 |
|       wardrobe      | 13.26 | 13.86 |
|         lamp        | 49.91 | 54.09 |
|       bathtub       | 21.21 | 38.39 |
|       railing       |  9.16 | 24.96 |
|       cushion       | 28.89 | 31.08 |
|         base        |  8.78 | 36.24 |
|         box         |  9.15 |  17.3 |
|        column       | 13.83 | 15.04 |
|      signboard      | 28.08 | 44.31 |
|   chest of drawers  | 12.78 | 14.59 |
|       counter       | 12.21 | 17.26 |
|         sand        |  5.87 |  9.13 |
|         sink        | 34.07 | 40.43 |
|      skyscraper     | 23.26 | 27.21 |
|      fireplace      |  56.1 |  64.4 |
|     refrigerator    | 27.47 | 31.51 |
|      grandstand     | 14.47 | 74.85 |
|         path        | 11.22 | 13.38 |
|        stairs       | 16.17 | 24.69 |
|        runway       |  9.95 | 10.02 |
|         case        | 39.24 | 50.59 |
|      pool table     | 21.67 | 22.24 |
|        pillow       | 28.83 |  33.1 |
|     screen door     | 22.68 | 23.28 |
|       stairway      |  3.55 |  5.79 |
|        river        |  5.77 | 10.51 |
|        bridge       | 12.79 | 23.79 |
|       bookcase      |  7.85 |  8.06 |
|        blind        |  4.7  |  4.74 |
|     coffee table    | 43.24 | 48.51 |
|        toilet       | 29.54 | 32.23 |
|        flower       | 22.87 | 28.15 |
|         book        | 31.81 | 37.28 |
|         hill        | 11.18 | 19.77 |
|        bench        | 15.33 | 26.92 |
|      countertop     |  13.9 | 14.08 |
|        stove        | 30.57 | 33.98 |
|         palm        | 38.52 | 61.84 |
|    kitchen island   | 19.26 | 30.12 |
|       computer      | 25.31 |  25.9 |
|     swivel chair    | 15.95 | 16.89 |
|         boat        | 14.52 | 32.78 |
|         bar         | 14.25 |  26.7 |
|    arcade machine   |  0.0  |  0.0  |
|        hovel        | 36.86 | 82.46 |
|         bus         | 80.35 | 88.72 |
|        towel        | 17.03 | 18.57 |
|        light        | 27.77 | 29.98 |
|        truck        |  4.9  | 11.29 |
|        tower        |  2.6  |  4.74 |
|      chandelier     | 47.82 | 51.94 |
|        awning       |  8.32 |  9.98 |
|     streetlight     | 26.06 |  32.8 |
|        booth        |  28.2 |  28.3 |
| television receiver | 17.38 | 19.22 |
|       airplane      |  12.2 |  14.2 |
|      dirt track     |  1.74 |  6.87 |
|       apparel       | 23.22 | 28.71 |
|         pole        | 14.05 | 21.02 |
|         land        |  2.14 |  3.34 |
|      bannister      |  2.62 |  5.17 |
|      escalator      | 20.52 | 52.59 |
|       ottoman       | 16.79 | 18.89 |
|        bottle       | 18.36 |  51.6 |
|        buffet       | 23.27 | 26.81 |
|        poster       | 12.33 | 24.66 |
|        stage        |  3.57 |  4.98 |
|         van         | 27.28 |  45.9 |
|         ship        |  2.84 |  6.2  |
|       fountain      | 18.86 | 19.35 |
|    conveyer belt    |  30.4 | 68.02 |
|        canopy       | 15.86 | 28.34 |
|        washer       | 37.96 | 39.81 |
|      plaything      |  3.92 |  6.73 |
|    swimming pool    |  27.9 | 84.82 |
|        stool        |  15.5 | 25.61 |
|        barrel       |  0.0  |  0.0  |
|        basket       | 16.92 | 20.15 |
|      waterfall      | 20.99 | 23.35 |
|         tent        |  0.0  |  0.0  |
|         bag         |  5.41 |  7.52 |
|       minibike      | 15.28 |  28.1 |
|        cradle       |  8.85 |  9.35 |
|         oven        |  5.92 |  7.55 |
|         ball        | 13.07 | 21.79 |
|         food        | 53.48 | 66.03 |
|         step        |  1.14 |  2.12 |
|         tank        |  4.53 | 30.25 |
|      trade name     | 21.81 | 24.56 |
|      microwave      |  8.03 |  8.14 |
|         pot         | 34.61 | 39.38 |
|        animal       | 44.17 |  52.0 |
|       bicycle       | 18.88 | 71.23 |
|         lake        |  0.0  |  0.0  |
|      dishwasher     | 23.32 | 23.83 |
|        screen       | 57.44 | 64.09 |
|       blanket       |  0.0  |  0.0  |
|      sculpture      | 13.47 | 20.73 |
|         hood        | 31.59 | 33.53 |
|        sconce       | 19.29 | 24.61 |
|         vase        |  40.1 | 46.02 |
|    traffic light    | 18.91 | 31.15 |
|         tray        |  3.21 |  8.8  |
|        ashcan       | 28.15 | 36.84 |
|         fan         | 40.84 | 45.72 |
|         pier        |  9.4  | 17.38 |
|      crt screen     |  3.4  | 11.27 |
|        plate        | 25.46 | 31.97 |
|       monitor       | 10.31 | 10.97 |
|    bulletin board   |  9.3  | 11.95 |
|        shower       |  0.27 |  2.96 |
|       radiator      |  4.23 |  4.45 |
|        glass        |  8.13 | 13.13 |
|        clock        | 17.33 | 20.77 |
|         flag        | 21.09 | 24.32 |
+---------------------+-------+-------+
09/21 05:48:23 - mmengine - INFO - Iter(test) [2000/2000]    aAcc: 66.8100  mIoU: 23.9900  mAcc: 32.6300  data_time: 0.0016  time: 0.3553
Finished processing corruption type: snow
Processing corruption type: frost
09/21 05:48:28 - mmengine - INFO - 
------------------------------------------------------------
System environment:
    sys.platform: linux
    Python: 3.10.13 | packaged by conda-forge | (main, Dec 23 2023, 15:36:39) [GCC 12.3.0]
    CUDA available: True
    MUSA available: False
    numpy_random_seed: 56277507
    GPU 0: Tesla V100-SXM2-32GB
    CUDA_HOME: /opt/bwhpc/common/devel/cuda/11.7
    NVCC: Cuda compilation tools, release 11.7, V11.7.99
    GCC: gcc (GCC) 8.5.0 20210514 (Red Hat 8.5.0-18)
    PyTorch: 1.13.1
    PyTorch compiling details: PyTorch built with:
  - GCC 9.3
  - C++ Version: 201402
  - Intel(R) oneAPI Math Kernel Library Version 2023.1-Product Build 20230303 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v2.6.0 (Git Hash 52b5f107dd9cf10910aaa19cb47f3abf9b349815)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - LAPACK is enabled (usually provided by MKL)
  - NNPACK is enabled
  - CPU capability usage: AVX2
  - CUDA Runtime 11.7
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_61,code=sm_61;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86;-gencode;arch=compute_37,code=compute_37
  - CuDNN 8.5
  - Magma 2.6.1
  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.7, CUDNN_VERSION=8.5.0, CXX_COMPILER=/opt/rh/devtoolset-9/root/usr/bin/c++, CXX_FLAGS= -fabi-version=11 -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -DEDGE_PROFILER_USE_KINETO -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Werror=non-virtual-dtor -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wunused-local-typedefs -Wno-unused-parameter -Wno-unused-function -Wno-unused-result -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Werror=cast-function-type -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.13.1, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, USE_ROCM=OFF, 

    TorchVision: 0.14.1
    OpenCV: 3.4.18
    MMEngine: 0.10.4

Runtime environment:
    cudnn_benchmark: True
    mp_cfg: {'mp_start_method': 'fork', 'opencv_num_threads': 0}
    dist_cfg: {'backend': 'nccl'}
    seed: 56277507
    Distributed launcher: none
    Distributed training: False
    GPU number: 1
------------------------------------------------------------

09/21 05:48:28 - mmengine - INFO - Config:
auto_scale_lr = dict(base_batch_size=16, enable=False)
crop_size = (
    512,
    512,
)
custom_imports = dict(allow_failed_imports=False, imports='mmdet.models')
data_root = 'data/ade/ADEChallengeData2016'
dataset_type = 'ADE20KDataset'
default_hooks = dict(
    checkpoint=dict(
        by_epoch=False, interval=5000, save_best='mIoU',
        type='CheckpointHook'),
    logger=dict(interval=50, log_metric_by_epoch=False, type='LoggerHook'),
    param_scheduler=dict(type='ParamSchedulerHook'),
    sampler_seed=dict(type='DistSamplerSeedHook'),
    timer=dict(type='IterTimerHook'),
    visualization=dict(type='SegVisualizationHook'))
default_scope = 'mmseg'
embed_multi = dict(decay_mult=0.0, lr_mult=1.0)
env_cfg = dict(
    cudnn_benchmark=True,
    dist_cfg=dict(backend='nccl'),
    mp_cfg=dict(mp_start_method='fork', opencv_num_threads=0))
img_ratios = [
    0.5,
    0.75,
    1.0,
    1.25,
    1.5,
    1.75,
]
launcher = 'none'
load_from = '../checkpoint_files/ade20k/mask2former/mask2former_r50_8xb2-160k_ade20k-512x512_20221204_000055-2d1f55f1.pth'
log_level = 'INFO'
log_processor = dict(by_epoch=False)
model = dict(
    backbone=dict(
        deep_stem=False,
        depth=50,
        frozen_stages=-1,
        init_cfg=dict(checkpoint='torchvision://resnet50', type='Pretrained'),
        norm_cfg=dict(requires_grad=False, type='SyncBN'),
        num_stages=4,
        out_indices=(
            0,
            1,
            2,
            3,
        ),
        style='pytorch',
        type='ResNet'),
    data_preprocessor=dict(
        bgr_to_rgb=True,
        corruption='frost',
        mean=[
            123.675,
            116.28,
            103.53,
        ],
        pad_val=0,
        seg_pad_val=255,
        size=(
            512,
            512,
        ),
        std=[
            58.395,
            57.12,
            57.375,
        ],
        test_cfg=dict(size_divisor=32),
        type='SegDataPreProcessor'),
    decode_head=dict(
        align_corners=False,
        enforce_decoder_input_project=False,
        feat_channels=256,
        in_channels=[
            256,
            512,
            1024,
            2048,
        ],
        loss_cls=dict(
            class_weight=[
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                0.1,
            ],
            loss_weight=2.0,
            reduction='mean',
            type='mmdet.CrossEntropyLoss',
            use_sigmoid=False),
        loss_dice=dict(
            activate=True,
            eps=1.0,
            loss_weight=5.0,
            naive_dice=True,
            reduction='mean',
            type='mmdet.DiceLoss',
            use_sigmoid=True),
        loss_mask=dict(
            loss_weight=5.0,
            reduction='mean',
            type='mmdet.CrossEntropyLoss',
            use_sigmoid=True),
        num_classes=150,
        num_queries=100,
        num_transformer_feat_level=3,
        out_channels=256,
        pixel_decoder=dict(
            act_cfg=dict(type='ReLU'),
            encoder=dict(
                init_cfg=None,
                layer_cfg=dict(
                    ffn_cfg=dict(
                        act_cfg=dict(inplace=True, type='ReLU'),
                        embed_dims=256,
                        feedforward_channels=1024,
                        ffn_drop=0.0,
                        num_fcs=2),
                    self_attn_cfg=dict(
                        batch_first=True,
                        dropout=0.0,
                        embed_dims=256,
                        im2col_step=64,
                        init_cfg=None,
                        norm_cfg=None,
                        num_heads=8,
                        num_levels=3,
                        num_points=4)),
                num_layers=6),
            init_cfg=None,
            norm_cfg=dict(num_groups=32, type='GN'),
            num_outs=3,
            positional_encoding=dict(normalize=True, num_feats=128),
            type='mmdet.MSDeformAttnPixelDecoder'),
        positional_encoding=dict(normalize=True, num_feats=128),
        strides=[
            4,
            8,
            16,
            32,
        ],
        train_cfg=dict(
            assigner=dict(
                match_costs=[
                    dict(type='mmdet.ClassificationCost', weight=2.0),
                    dict(
                        type='mmdet.CrossEntropyLossCost',
                        use_sigmoid=True,
                        weight=5.0),
                    dict(
                        eps=1.0,
                        pred_act=True,
                        type='mmdet.DiceCost',
                        weight=5.0),
                ],
                type='mmdet.HungarianAssigner'),
            importance_sample_ratio=0.75,
            num_points=12544,
            oversample_ratio=3.0,
            sampler=dict(type='mmdet.MaskPseudoSampler')),
        transformer_decoder=dict(
            init_cfg=None,
            layer_cfg=dict(
                cross_attn_cfg=dict(
                    attn_drop=0.0,
                    batch_first=True,
                    dropout_layer=None,
                    embed_dims=256,
                    num_heads=8,
                    proj_drop=0.0),
                ffn_cfg=dict(
                    act_cfg=dict(inplace=True, type='ReLU'),
                    add_identity=True,
                    dropout_layer=None,
                    embed_dims=256,
                    feedforward_channels=2048,
                    ffn_drop=0.0,
                    num_fcs=2),
                self_attn_cfg=dict(
                    attn_drop=0.0,
                    batch_first=True,
                    dropout_layer=None,
                    embed_dims=256,
                    num_heads=8,
                    proj_drop=0.0)),
            num_layers=9,
            return_intermediate=True),
        type='Mask2FormerHead'),
    test_cfg=dict(mode='whole'),
    train_cfg=dict(),
    type='EncoderDecoder')
num_classes = 150
optim_wrapper = dict(
    clip_grad=dict(max_norm=0.01, norm_type=2),
    optimizer=dict(
        betas=(
            0.9,
            0.999,
        ),
        eps=1e-08,
        lr=0.0001,
        type='AdamW',
        weight_decay=0.05),
    paramwise_cfg=dict(
        custom_keys=dict(
            backbone=dict(decay_mult=1.0, lr_mult=0.1),
            level_embed=dict(decay_mult=0.0, lr_mult=1.0),
            query_embed=dict(decay_mult=0.0, lr_mult=1.0),
            query_feat=dict(decay_mult=0.0, lr_mult=1.0)),
        norm_decay_mult=0.0),
    type='OptimWrapper')
optimizer = dict(
    betas=(
        0.9,
        0.999,
    ),
    eps=1e-08,
    lr=0.0001,
    type='AdamW',
    weight_decay=0.05)
param_scheduler = [
    dict(
        begin=0,
        by_epoch=False,
        end=160000,
        eta_min=0,
        power=0.9,
        type='PolyLR'),
]
resume = False
test_cfg = dict(type='TestLoop')
test_dataloader = dict(
    batch_size=1,
    dataset=dict(
        data_prefix=dict(
            img_path='images/validation',
            seg_map_path='annotations/validation'),
        data_root='data/ade/ADEChallengeData2016',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(keep_ratio=True, scale=(
                2048,
                512,
            ), type='Resize'),
            dict(reduce_zero_label=True, type='LoadAnnotations'),
            dict(type='PackSegInputs'),
        ],
        type='ADE20KDataset'),
    num_workers=4,
    persistent_workers=True,
    sampler=dict(shuffle=False, type='DefaultSampler'))
test_evaluator = dict(
    iou_metrics=[
        'mIoU',
    ], type='IoUMetric')
test_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(keep_ratio=True, scale=(
        2048,
        512,
    ), type='Resize'),
    dict(reduce_zero_label=True, type='LoadAnnotations'),
    dict(type='PackSegInputs'),
]
train_cfg = dict(
    max_iters=160000, type='IterBasedTrainLoop', val_interval=5000)
train_dataloader = dict(
    batch_size=2,
    dataset=dict(
        data_prefix=dict(
            img_path='images/training', seg_map_path='annotations/training'),
        data_root='data/ade/ADEChallengeData2016',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(reduce_zero_label=True, type='LoadAnnotations'),
            dict(
                max_size=2048,
                resize_type='ResizeShortestEdge',
                scales=[
                    256,
                    307,
                    358,
                    409,
                    460,
                    512,
                    563,
                    614,
                    665,
                    716,
                    768,
                    819,
                    870,
                    921,
                    972,
                    1024,
                ],
                type='RandomChoiceResize'),
            dict(
                cat_max_ratio=0.75, crop_size=(
                    512,
                    512,
                ), type='RandomCrop'),
            dict(prob=0.5, type='RandomFlip'),
            dict(type='PhotoMetricDistortion'),
            dict(type='PackSegInputs'),
        ],
        type='ADE20KDataset'),
    num_workers=4,
    persistent_workers=True,
    sampler=dict(shuffle=True, type='InfiniteSampler'))
train_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(reduce_zero_label=True, type='LoadAnnotations'),
    dict(
        max_size=2048,
        resize_type='ResizeShortestEdge',
        scales=[
            256,
            307,
            358,
            409,
            460,
            512,
            563,
            614,
            665,
            716,
            768,
            819,
            870,
            921,
            972,
            1024,
        ],
        type='RandomChoiceResize'),
    dict(cat_max_ratio=0.75, crop_size=(
        512,
        512,
    ), type='RandomCrop'),
    dict(prob=0.5, type='RandomFlip'),
    dict(type='PhotoMetricDistortion'),
    dict(type='PackSegInputs'),
]
tta_model = dict(type='SegTTAModel')
tta_pipeline = [
    dict(backend_args=None, type='LoadImageFromFile'),
    dict(
        transforms=[
            [
                dict(keep_ratio=True, scale_factor=0.5, type='Resize'),
                dict(keep_ratio=True, scale_factor=0.75, type='Resize'),
                dict(keep_ratio=True, scale_factor=1.0, type='Resize'),
                dict(keep_ratio=True, scale_factor=1.25, type='Resize'),
                dict(keep_ratio=True, scale_factor=1.5, type='Resize'),
                dict(keep_ratio=True, scale_factor=1.75, type='Resize'),
            ],
            [
                dict(direction='horizontal', prob=0.0, type='RandomFlip'),
                dict(direction='horizontal', prob=1.0, type='RandomFlip'),
            ],
            [
                dict(type='LoadAnnotations'),
            ],
            [
                dict(type='PackSegInputs'),
            ],
        ],
        type='TestTimeAug'),
]
val_cfg = dict(type='ValLoop')
val_dataloader = dict(
    batch_size=1,
    dataset=dict(
        data_prefix=dict(
            img_path='images/validation',
            seg_map_path='annotations/validation'),
        data_root='data/ade/ADEChallengeData2016',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(keep_ratio=True, scale=(
                2048,
                512,
            ), type='Resize'),
            dict(reduce_zero_label=True, type='LoadAnnotations'),
            dict(type='PackSegInputs'),
        ],
        type='ADE20KDataset'),
    num_workers=4,
    persistent_workers=True,
    sampler=dict(shuffle=False, type='DefaultSampler'))
val_evaluator = dict(
    iou_metrics=[
        'mIoU',
    ], type='IoUMetric')
vis_backends = [
    dict(type='LocalVisBackend'),
]
visualizer = dict(
    name='visualizer',
    type='SegLocalVisualizer',
    vis_backends=[
        dict(type='LocalVisBackend'),
    ])
work_dir = '../corruptions/work_dirs/ade20k/mask2former/mask2former_r50_8xb2-160k_ade20k-512x512/frost'

09/21 05:48:30 - mmengine - INFO - Distributed training is not used, all SyncBatchNorm (SyncBN) layers in the model will be automatically reverted to BatchNormXd layers if they are used.
09/21 05:48:30 - mmengine - INFO - Hooks will be executed in the following order:
before_run:
(VERY_HIGH   ) RuntimeInfoHook                    
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
before_train:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_train_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(NORMAL      ) DistSamplerSeedHook                
 -------------------- 
before_train_iter:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_train_iter:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(NORMAL      ) SegVisualizationHook               
(BELOW_NORMAL) LoggerHook                         
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
after_train_epoch:
(NORMAL      ) IterTimerHook                      
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_val:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
before_val_epoch:
(NORMAL      ) IterTimerHook                      
 -------------------- 
before_val_iter:
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_val_iter:
(NORMAL      ) IterTimerHook                      
(NORMAL      ) SegVisualizationHook               
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_val_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
after_val:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
after_train:
(VERY_HIGH   ) RuntimeInfoHook                    
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_test:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
before_test_epoch:
(NORMAL      ) IterTimerHook                      
 -------------------- 
before_test_iter:
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_test_iter:
(NORMAL      ) IterTimerHook                      
(NORMAL      ) SegVisualizationHook               
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_test_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_test:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
after_run:
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
09/21 05:48:31 - mmengine - WARNING - The prefix is not set in metric class IoUMetric.
Loads checkpoint by local backend from path: ../checkpoint_files/ade20k/mask2former/mask2former_r50_8xb2-160k_ade20k-512x512_20221204_000055-2d1f55f1.pth
09/21 05:48:32 - mmengine - INFO - Load checkpoint from ../checkpoint_files/ade20k/mask2former/mask2former_r50_8xb2-160k_ade20k-512x512_20221204_000055-2d1f55f1.pth
09/21 05:49:39 - mmengine - INFO - Iter(test) [  50/2000]    eta: 0:44:03  time: 0.9482  data_time: 0.0014  memory: 17167  
09/21 05:49:56 - mmengine - INFO - Iter(test) [ 100/2000]    eta: 0:26:42  time: 0.5353  data_time: 0.0015  memory: 17158  
09/21 05:50:01 - mmengine - INFO - Iter(test) [ 150/2000]    eta: 0:18:18  time: 0.0714  data_time: 0.0014  memory: 872  
09/21 05:50:15 - mmengine - INFO - Iter(test) [ 200/2000]    eta: 0:15:27  time: 0.1087  data_time: 0.0015  memory: 17214  
09/21 05:50:24 - mmengine - INFO - Iter(test) [ 250/2000]    eta: 0:13:08  time: 0.0702  data_time: 0.0014  memory: 17221  
09/21 05:50:32 - mmengine - INFO - Iter(test) [ 300/2000]    eta: 0:11:23  time: 0.0699  data_time: 0.0016  memory: 17162  
09/21 05:50:45 - mmengine - INFO - Iter(test) [ 350/2000]    eta: 0:10:28  time: 0.0685  data_time: 0.0013  memory: 17165  
09/21 05:50:52 - mmengine - INFO - Iter(test) [ 400/2000]    eta: 0:09:22  time: 0.0691  data_time: 0.0013  memory: 17147  
09/21 05:50:56 - mmengine - INFO - Iter(test) [ 450/2000]    eta: 0:08:15  time: 0.0682  data_time: 0.0013  memory: 883  
09/21 05:50:59 - mmengine - INFO - Iter(test) [ 500/2000]    eta: 0:07:22  time: 0.0688  data_time: 0.0014  memory: 872  
09/21 05:51:03 - mmengine - INFO - Iter(test) [ 550/2000]    eta: 0:06:38  time: 0.0712  data_time: 0.0015  memory: 983  
09/21 05:51:06 - mmengine - INFO - Iter(test) [ 600/2000]    eta: 0:06:01  time: 0.0701  data_time: 0.0014  memory: 981  
09/21 05:51:15 - mmengine - INFO - Iter(test) [ 650/2000]    eta: 0:05:38  time: 0.5617  data_time: 0.0013  memory: 17168  
09/21 05:51:24 - mmengine - INFO - Iter(test) [ 700/2000]    eta: 0:05:20  time: 0.0703  data_time: 0.0015  memory: 17163  
09/21 05:51:27 - mmengine - INFO - Iter(test) [ 750/2000]    eta: 0:04:52  time: 0.0661  data_time: 0.0013  memory: 1039  
09/21 05:51:31 - mmengine - INFO - Iter(test) [ 800/2000]    eta: 0:04:28  time: 0.0692  data_time: 0.0014  memory: 872  
09/21 05:51:34 - mmengine - INFO - Iter(test) [ 850/2000]    eta: 0:04:06  time: 0.0680  data_time: 0.0015  memory: 844  
09/21 05:51:37 - mmengine - INFO - Iter(test) [ 900/2000]    eta: 0:03:47  time: 0.0657  data_time: 0.0013  memory: 925  
09/21 05:51:41 - mmengine - INFO - Iter(test) [ 950/2000]    eta: 0:03:29  time: 0.0692  data_time: 0.0015  memory: 955  
09/21 05:51:45 - mmengine - INFO - Iter(test) [1000/2000]    eta: 0:03:13  time: 0.0735  data_time: 0.0025  memory: 955  
09/21 05:51:53 - mmengine - INFO - Iter(test) [1050/2000]    eta: 0:03:02  time: 0.0698  data_time: 0.0013  memory: 17170  
09/21 05:51:58 - mmengine - INFO - Iter(test) [1100/2000]    eta: 0:02:48  time: 0.1042  data_time: 0.0014  memory: 952  
09/21 05:52:01 - mmengine - INFO - Iter(test) [1150/2000]    eta: 0:02:34  time: 0.0695  data_time: 0.0013  memory: 924  
09/21 05:52:05 - mmengine - INFO - Iter(test) [1200/2000]    eta: 0:02:22  time: 0.0657  data_time: 0.0014  memory: 1829  
09/21 05:52:13 - mmengine - INFO - Iter(test) [1250/2000]    eta: 0:02:12  time: 0.0702  data_time: 0.0014  memory: 17158  
09/21 05:52:17 - mmengine - INFO - Iter(test) [1300/2000]    eta: 0:02:01  time: 0.0684  data_time: 0.0013  memory: 872  
09/21 05:52:21 - mmengine - INFO - Iter(test) [1350/2000]    eta: 0:01:50  time: 0.0639  data_time: 0.0013  memory: 872  
09/21 05:52:25 - mmengine - INFO - Iter(test) [1400/2000]    eta: 0:01:39  time: 0.0699  data_time: 0.0014  memory: 953  
09/21 05:52:28 - mmengine - INFO - Iter(test) [1450/2000]    eta: 0:01:29  time: 0.0678  data_time: 0.0013  memory: 955  
09/21 05:52:31 - mmengine - INFO - Iter(test) [1500/2000]    eta: 0:01:19  time: 0.0660  data_time: 0.0013  memory: 869  
09/21 05:52:35 - mmengine - INFO - Iter(test) [1550/2000]    eta: 0:01:10  time: 0.0704  data_time: 0.0014  memory: 955  
09/21 05:52:38 - mmengine - INFO - Iter(test) [1600/2000]    eta: 0:01:01  time: 0.0672  data_time: 0.0014  memory: 844  
09/21 05:52:46 - mmengine - INFO - Iter(test) [1650/2000]    eta: 0:00:53  time: 0.0663  data_time: 0.0013  memory: 17165  
09/21 05:52:50 - mmengine - INFO - Iter(test) [1700/2000]    eta: 0:00:45  time: 0.0796  data_time: 0.0015  memory: 952  
09/21 05:52:53 - mmengine - INFO - Iter(test) [1750/2000]    eta: 0:00:37  time: 0.0666  data_time: 0.0013  memory: 980  
09/21 05:52:57 - mmengine - INFO - Iter(test) [1800/2000]    eta: 0:00:29  time: 0.0704  data_time: 0.0015  memory: 872  
09/21 05:53:00 - mmengine - INFO - Iter(test) [1850/2000]    eta: 0:00:21  time: 0.0696  data_time: 0.0015  memory: 787  
09/21 05:53:04 - mmengine - INFO - Iter(test) [1900/2000]    eta: 0:00:14  time: 0.0684  data_time: 0.0013  memory: 1011  
09/21 05:53:07 - mmengine - INFO - Iter(test) [1950/2000]    eta: 0:00:07  time: 0.0660  data_time: 0.0013  memory: 1258  
09/21 05:53:10 - mmengine - INFO - Iter(test) [2000/2000]    eta: 0:00:00  time: 0.0630  data_time: 0.0013  memory: 1037  
09/21 05:53:10 - mmengine - INFO - per class results:
09/21 05:53:10 - mmengine - INFO - 
+---------------------+-------+-------+
|        Class        |  IoU  |  Acc  |
+---------------------+-------+-------+
|         wall        | 66.06 | 87.59 |
|       building      | 77.78 | 88.93 |
|         sky         | 80.52 | 83.31 |
|        floor        | 72.39 |  87.0 |
|         tree        | 70.16 | 82.57 |
|       ceiling       | 73.15 | 85.37 |
|         road        | 72.83 | 76.96 |
|         bed         | 80.18 | 89.62 |
|      windowpane     | 54.31 | 69.06 |
|        grass        | 60.96 | 75.91 |
|       cabinet       | 44.32 | 50.81 |
|       sidewalk      | 58.45 | 71.42 |
|        person       | 74.57 | 81.69 |
|        earth        | 28.53 | 48.61 |
|         door        | 27.74 |  39.5 |
|        table        | 51.32 | 69.46 |
|       mountain      | 34.43 | 72.21 |
|        plant        | 45.46 | 56.66 |
|       curtain       | 55.53 | 64.84 |
|        chair        | 50.47 | 63.66 |
|         car         |  80.5 | 86.77 |
|        water        | 35.36 |  55.0 |
|       painting      | 60.49 | 78.32 |
|         sofa        | 59.21 | 77.11 |
|        shelf        | 35.48 | 53.44 |
|        house        | 39.95 | 57.26 |
|         sea         | 24.61 | 38.75 |
|        mirror       | 45.82 | 62.03 |
|         rug         | 56.33 | 61.04 |
|        field        | 29.46 | 46.06 |
|       armchair      | 38.29 | 52.55 |
|         seat        |  44.2 | 58.49 |
|        fence        | 30.01 | 52.44 |
|         desk        | 27.24 | 31.07 |
|         rock        | 26.36 |  35.2 |
|       wardrobe      | 39.72 | 48.18 |
|         lamp        | 61.73 | 70.18 |
|       bathtub       | 40.79 | 62.14 |
|       railing       | 29.67 | 41.25 |
|       cushion       | 41.66 | 53.94 |
|         base        | 15.31 | 31.26 |
|         box         |  14.8 | 20.26 |
|        column       | 34.95 | 44.66 |
|      signboard      | 31.57 | 41.14 |
|   chest of drawers  | 22.97 | 37.64 |
|       counter       | 16.94 | 28.41 |
|         sand        | 21.92 | 45.71 |
|         sink        | 54.96 | 59.34 |
|      skyscraper     | 40.12 | 52.88 |
|      fireplace      | 57.01 | 84.37 |
|     refrigerator    |  47.8 | 52.15 |
|      grandstand     |  28.3 |  48.9 |
|         path        | 18.46 | 27.58 |
|        stairs       | 25.82 | 44.58 |
|        runway       | 51.56 | 61.13 |
|         case        | 45.06 | 79.01 |
|      pool table     | 82.16 | 84.86 |
|        pillow       | 42.79 | 54.09 |
|     screen door     | 24.47 | 50.87 |
|       stairway      | 27.51 | 38.72 |
|        river        |  7.03 | 12.48 |
|        bridge       | 38.55 | 56.05 |
|       bookcase      |  32.3 | 37.35 |
|        blind        | 14.69 | 16.36 |
|     coffee table    | 64.52 | 76.11 |
|        toilet       | 62.65 | 65.19 |
|        flower       | 28.59 | 44.79 |
|         book        | 46.22 | 61.17 |
|         hill        |  5.75 |  9.32 |
|        bench        | 27.64 | 40.28 |
|      countertop     | 50.59 | 66.55 |
|        stove        | 37.57 | 45.57 |
|         palm        | 46.56 | 65.56 |
|    kitchen island   | 28.99 | 59.56 |
|       computer      | 41.52 | 43.57 |
|     swivel chair    | 23.56 | 26.74 |
|         boat        | 35.46 | 44.53 |
|         bar         | 36.91 | 41.61 |
|    arcade machine   |  4.82 |  4.87 |
|        hovel        | 40.11 | 69.79 |
|         bus         | 79.56 | 85.26 |
|        towel        | 40.69 | 59.34 |
|        light        |  44.0 | 52.07 |
|        truck        | 17.17 | 27.24 |
|        tower        |  24.1 | 40.51 |
|      chandelier     | 58.72 | 69.37 |
|        awning       | 22.12 | 24.59 |
|     streetlight     | 29.67 | 39.53 |
|        booth        | 48.97 | 70.26 |
| television receiver |  25.4 | 28.27 |
|       airplane      | 45.51 | 49.99 |
|      dirt track     |  4.55 | 22.92 |
|       apparel       | 28.57 | 44.73 |
|         pole        | 22.77 | 31.42 |
|         land        |  3.85 |  9.0  |
|      bannister      |  7.14 | 11.61 |
|      escalator      | 16.57 | 17.59 |
|       ottoman       | 36.36 | 50.03 |
|        bottle       | 24.58 |  29.0 |
|        buffet       | 37.91 | 45.51 |
|        poster       | 14.32 | 19.44 |
|        stage        | 12.78 | 21.64 |
|         van         | 25.81 |  39.8 |
|         ship        |  3.83 |  5.73 |
|       fountain      | 16.59 | 21.65 |
|    conveyer belt    | 29.13 | 30.32 |
|        canopy       | 22.02 | 36.25 |
|        washer       | 35.57 | 35.63 |
|      plaything      | 21.06 | 28.37 |
|    swimming pool    | 57.34 | 85.59 |
|        stool        | 27.76 | 41.62 |
|        barrel       |  0.3  |  0.67 |
|        basket       | 21.77 | 28.12 |
|      waterfall      | 32.17 | 42.72 |
|         tent        | 18.62 | 19.42 |
|         bag         |  4.2  |  6.01 |
|       minibike      | 71.89 | 80.86 |
|        cradle       | 70.82 | 94.73 |
|         oven        | 28.35 |  47.5 |
|         ball        | 39.77 | 57.35 |
|         food        | 52.01 | 70.02 |
|         step        |  4.15 | 12.68 |
|         tank        | 20.16 | 22.49 |
|      trade name     | 25.19 | 28.75 |
|      microwave      | 17.28 |  18.0 |
|         pot         | 43.19 | 48.43 |
|        animal       | 45.98 | 69.42 |
|       bicycle       | 57.65 | 72.25 |
|         lake        |  8.45 |  9.1  |
|      dishwasher     |  32.3 | 33.83 |
|        screen       | 51.23 | 53.22 |
|       blanket       | 20.96 | 29.69 |
|      sculpture      | 30.65 | 60.82 |
|         hood        | 63.44 | 66.69 |
|        sconce       |  37.5 | 44.93 |
|         vase        | 35.07 | 50.35 |
|    traffic light    |  25.2 | 39.36 |
|         tray        |  9.21 | 16.87 |
|        ashcan       | 34.92 | 38.53 |
|         fan         | 50.18 |  67.0 |
|         pier        | 17.09 | 38.64 |
|      crt screen     |  6.55 | 10.53 |
|        plate        | 36.66 | 46.47 |
|       monitor       |  0.63 |  0.64 |
|    bulletin board   | 17.77 | 22.79 |
|        shower       |  0.57 | 14.27 |
|       radiator      | 14.48 | 18.07 |
|        glass        | 14.98 | 18.12 |
|        clock        | 24.59 | 26.72 |
|         flag        |  43.8 | 47.24 |
+---------------------+-------+-------+
09/21 05:53:10 - mmengine - INFO - Iter(test) [2000/2000]    aAcc: 75.0000  mIoU: 36.1200  mAcc: 47.2600  data_time: 0.0015  time: 0.1393
Finished processing corruption type: frost
Processing corruption type: fog
09/21 05:53:15 - mmengine - INFO - 
------------------------------------------------------------
System environment:
    sys.platform: linux
    Python: 3.10.13 | packaged by conda-forge | (main, Dec 23 2023, 15:36:39) [GCC 12.3.0]
    CUDA available: True
    MUSA available: False
    numpy_random_seed: 810193414
    GPU 0: Tesla V100-SXM2-32GB
    CUDA_HOME: /opt/bwhpc/common/devel/cuda/11.7
    NVCC: Cuda compilation tools, release 11.7, V11.7.99
    GCC: gcc (GCC) 8.5.0 20210514 (Red Hat 8.5.0-18)
    PyTorch: 1.13.1
    PyTorch compiling details: PyTorch built with:
  - GCC 9.3
  - C++ Version: 201402
  - Intel(R) oneAPI Math Kernel Library Version 2023.1-Product Build 20230303 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v2.6.0 (Git Hash 52b5f107dd9cf10910aaa19cb47f3abf9b349815)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - LAPACK is enabled (usually provided by MKL)
  - NNPACK is enabled
  - CPU capability usage: AVX2
  - CUDA Runtime 11.7
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_61,code=sm_61;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86;-gencode;arch=compute_37,code=compute_37
  - CuDNN 8.5
  - Magma 2.6.1
  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.7, CUDNN_VERSION=8.5.0, CXX_COMPILER=/opt/rh/devtoolset-9/root/usr/bin/c++, CXX_FLAGS= -fabi-version=11 -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -DEDGE_PROFILER_USE_KINETO -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Werror=non-virtual-dtor -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wunused-local-typedefs -Wno-unused-parameter -Wno-unused-function -Wno-unused-result -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Werror=cast-function-type -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.13.1, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, USE_ROCM=OFF, 

    TorchVision: 0.14.1
    OpenCV: 3.4.18
    MMEngine: 0.10.4

Runtime environment:
    cudnn_benchmark: True
    mp_cfg: {'mp_start_method': 'fork', 'opencv_num_threads': 0}
    dist_cfg: {'backend': 'nccl'}
    seed: 810193414
    Distributed launcher: none
    Distributed training: False
    GPU number: 1
------------------------------------------------------------

09/21 05:53:15 - mmengine - INFO - Config:
auto_scale_lr = dict(base_batch_size=16, enable=False)
crop_size = (
    512,
    512,
)
custom_imports = dict(allow_failed_imports=False, imports='mmdet.models')
data_root = 'data/ade/ADEChallengeData2016'
dataset_type = 'ADE20KDataset'
default_hooks = dict(
    checkpoint=dict(
        by_epoch=False, interval=5000, save_best='mIoU',
        type='CheckpointHook'),
    logger=dict(interval=50, log_metric_by_epoch=False, type='LoggerHook'),
    param_scheduler=dict(type='ParamSchedulerHook'),
    sampler_seed=dict(type='DistSamplerSeedHook'),
    timer=dict(type='IterTimerHook'),
    visualization=dict(type='SegVisualizationHook'))
default_scope = 'mmseg'
embed_multi = dict(decay_mult=0.0, lr_mult=1.0)
env_cfg = dict(
    cudnn_benchmark=True,
    dist_cfg=dict(backend='nccl'),
    mp_cfg=dict(mp_start_method='fork', opencv_num_threads=0))
img_ratios = [
    0.5,
    0.75,
    1.0,
    1.25,
    1.5,
    1.75,
]
launcher = 'none'
load_from = '../checkpoint_files/ade20k/mask2former/mask2former_r50_8xb2-160k_ade20k-512x512_20221204_000055-2d1f55f1.pth'
log_level = 'INFO'
log_processor = dict(by_epoch=False)
model = dict(
    backbone=dict(
        deep_stem=False,
        depth=50,
        frozen_stages=-1,
        init_cfg=dict(checkpoint='torchvision://resnet50', type='Pretrained'),
        norm_cfg=dict(requires_grad=False, type='SyncBN'),
        num_stages=4,
        out_indices=(
            0,
            1,
            2,
            3,
        ),
        style='pytorch',
        type='ResNet'),
    data_preprocessor=dict(
        bgr_to_rgb=True,
        corruption='fog',
        mean=[
            123.675,
            116.28,
            103.53,
        ],
        pad_val=0,
        seg_pad_val=255,
        size=(
            512,
            512,
        ),
        std=[
            58.395,
            57.12,
            57.375,
        ],
        test_cfg=dict(size_divisor=32),
        type='SegDataPreProcessor'),
    decode_head=dict(
        align_corners=False,
        enforce_decoder_input_project=False,
        feat_channels=256,
        in_channels=[
            256,
            512,
            1024,
            2048,
        ],
        loss_cls=dict(
            class_weight=[
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                0.1,
            ],
            loss_weight=2.0,
            reduction='mean',
            type='mmdet.CrossEntropyLoss',
            use_sigmoid=False),
        loss_dice=dict(
            activate=True,
            eps=1.0,
            loss_weight=5.0,
            naive_dice=True,
            reduction='mean',
            type='mmdet.DiceLoss',
            use_sigmoid=True),
        loss_mask=dict(
            loss_weight=5.0,
            reduction='mean',
            type='mmdet.CrossEntropyLoss',
            use_sigmoid=True),
        num_classes=150,
        num_queries=100,
        num_transformer_feat_level=3,
        out_channels=256,
        pixel_decoder=dict(
            act_cfg=dict(type='ReLU'),
            encoder=dict(
                init_cfg=None,
                layer_cfg=dict(
                    ffn_cfg=dict(
                        act_cfg=dict(inplace=True, type='ReLU'),
                        embed_dims=256,
                        feedforward_channels=1024,
                        ffn_drop=0.0,
                        num_fcs=2),
                    self_attn_cfg=dict(
                        batch_first=True,
                        dropout=0.0,
                        embed_dims=256,
                        im2col_step=64,
                        init_cfg=None,
                        norm_cfg=None,
                        num_heads=8,
                        num_levels=3,
                        num_points=4)),
                num_layers=6),
            init_cfg=None,
            norm_cfg=dict(num_groups=32, type='GN'),
            num_outs=3,
            positional_encoding=dict(normalize=True, num_feats=128),
            type='mmdet.MSDeformAttnPixelDecoder'),
        positional_encoding=dict(normalize=True, num_feats=128),
        strides=[
            4,
            8,
            16,
            32,
        ],
        train_cfg=dict(
            assigner=dict(
                match_costs=[
                    dict(type='mmdet.ClassificationCost', weight=2.0),
                    dict(
                        type='mmdet.CrossEntropyLossCost',
                        use_sigmoid=True,
                        weight=5.0),
                    dict(
                        eps=1.0,
                        pred_act=True,
                        type='mmdet.DiceCost',
                        weight=5.0),
                ],
                type='mmdet.HungarianAssigner'),
            importance_sample_ratio=0.75,
            num_points=12544,
            oversample_ratio=3.0,
            sampler=dict(type='mmdet.MaskPseudoSampler')),
        transformer_decoder=dict(
            init_cfg=None,
            layer_cfg=dict(
                cross_attn_cfg=dict(
                    attn_drop=0.0,
                    batch_first=True,
                    dropout_layer=None,
                    embed_dims=256,
                    num_heads=8,
                    proj_drop=0.0),
                ffn_cfg=dict(
                    act_cfg=dict(inplace=True, type='ReLU'),
                    add_identity=True,
                    dropout_layer=None,
                    embed_dims=256,
                    feedforward_channels=2048,
                    ffn_drop=0.0,
                    num_fcs=2),
                self_attn_cfg=dict(
                    attn_drop=0.0,
                    batch_first=True,
                    dropout_layer=None,
                    embed_dims=256,
                    num_heads=8,
                    proj_drop=0.0)),
            num_layers=9,
            return_intermediate=True),
        type='Mask2FormerHead'),
    test_cfg=dict(mode='whole'),
    train_cfg=dict(),
    type='EncoderDecoder')
num_classes = 150
optim_wrapper = dict(
    clip_grad=dict(max_norm=0.01, norm_type=2),
    optimizer=dict(
        betas=(
            0.9,
            0.999,
        ),
        eps=1e-08,
        lr=0.0001,
        type='AdamW',
        weight_decay=0.05),
    paramwise_cfg=dict(
        custom_keys=dict(
            backbone=dict(decay_mult=1.0, lr_mult=0.1),
            level_embed=dict(decay_mult=0.0, lr_mult=1.0),
            query_embed=dict(decay_mult=0.0, lr_mult=1.0),
            query_feat=dict(decay_mult=0.0, lr_mult=1.0)),
        norm_decay_mult=0.0),
    type='OptimWrapper')
optimizer = dict(
    betas=(
        0.9,
        0.999,
    ),
    eps=1e-08,
    lr=0.0001,
    type='AdamW',
    weight_decay=0.05)
param_scheduler = [
    dict(
        begin=0,
        by_epoch=False,
        end=160000,
        eta_min=0,
        power=0.9,
        type='PolyLR'),
]
resume = False
test_cfg = dict(type='TestLoop')
test_dataloader = dict(
    batch_size=1,
    dataset=dict(
        data_prefix=dict(
            img_path='images/validation',
            seg_map_path='annotations/validation'),
        data_root='data/ade/ADEChallengeData2016',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(keep_ratio=True, scale=(
                2048,
                512,
            ), type='Resize'),
            dict(reduce_zero_label=True, type='LoadAnnotations'),
            dict(type='PackSegInputs'),
        ],
        type='ADE20KDataset'),
    num_workers=4,
    persistent_workers=True,
    sampler=dict(shuffle=False, type='DefaultSampler'))
test_evaluator = dict(
    iou_metrics=[
        'mIoU',
    ], type='IoUMetric')
test_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(keep_ratio=True, scale=(
        2048,
        512,
    ), type='Resize'),
    dict(reduce_zero_label=True, type='LoadAnnotations'),
    dict(type='PackSegInputs'),
]
train_cfg = dict(
    max_iters=160000, type='IterBasedTrainLoop', val_interval=5000)
train_dataloader = dict(
    batch_size=2,
    dataset=dict(
        data_prefix=dict(
            img_path='images/training', seg_map_path='annotations/training'),
        data_root='data/ade/ADEChallengeData2016',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(reduce_zero_label=True, type='LoadAnnotations'),
            dict(
                max_size=2048,
                resize_type='ResizeShortestEdge',
                scales=[
                    256,
                    307,
                    358,
                    409,
                    460,
                    512,
                    563,
                    614,
                    665,
                    716,
                    768,
                    819,
                    870,
                    921,
                    972,
                    1024,
                ],
                type='RandomChoiceResize'),
            dict(
                cat_max_ratio=0.75, crop_size=(
                    512,
                    512,
                ), type='RandomCrop'),
            dict(prob=0.5, type='RandomFlip'),
            dict(type='PhotoMetricDistortion'),
            dict(type='PackSegInputs'),
        ],
        type='ADE20KDataset'),
    num_workers=4,
    persistent_workers=True,
    sampler=dict(shuffle=True, type='InfiniteSampler'))
train_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(reduce_zero_label=True, type='LoadAnnotations'),
    dict(
        max_size=2048,
        resize_type='ResizeShortestEdge',
        scales=[
            256,
            307,
            358,
            409,
            460,
            512,
            563,
            614,
            665,
            716,
            768,
            819,
            870,
            921,
            972,
            1024,
        ],
        type='RandomChoiceResize'),
    dict(cat_max_ratio=0.75, crop_size=(
        512,
        512,
    ), type='RandomCrop'),
    dict(prob=0.5, type='RandomFlip'),
    dict(type='PhotoMetricDistortion'),
    dict(type='PackSegInputs'),
]
tta_model = dict(type='SegTTAModel')
tta_pipeline = [
    dict(backend_args=None, type='LoadImageFromFile'),
    dict(
        transforms=[
            [
                dict(keep_ratio=True, scale_factor=0.5, type='Resize'),
                dict(keep_ratio=True, scale_factor=0.75, type='Resize'),
                dict(keep_ratio=True, scale_factor=1.0, type='Resize'),
                dict(keep_ratio=True, scale_factor=1.25, type='Resize'),
                dict(keep_ratio=True, scale_factor=1.5, type='Resize'),
                dict(keep_ratio=True, scale_factor=1.75, type='Resize'),
            ],
            [
                dict(direction='horizontal', prob=0.0, type='RandomFlip'),
                dict(direction='horizontal', prob=1.0, type='RandomFlip'),
            ],
            [
                dict(type='LoadAnnotations'),
            ],
            [
                dict(type='PackSegInputs'),
            ],
        ],
        type='TestTimeAug'),
]
val_cfg = dict(type='ValLoop')
val_dataloader = dict(
    batch_size=1,
    dataset=dict(
        data_prefix=dict(
            img_path='images/validation',
            seg_map_path='annotations/validation'),
        data_root='data/ade/ADEChallengeData2016',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(keep_ratio=True, scale=(
                2048,
                512,
            ), type='Resize'),
            dict(reduce_zero_label=True, type='LoadAnnotations'),
            dict(type='PackSegInputs'),
        ],
        type='ADE20KDataset'),
    num_workers=4,
    persistent_workers=True,
    sampler=dict(shuffle=False, type='DefaultSampler'))
val_evaluator = dict(
    iou_metrics=[
        'mIoU',
    ], type='IoUMetric')
vis_backends = [
    dict(type='LocalVisBackend'),
]
visualizer = dict(
    name='visualizer',
    type='SegLocalVisualizer',
    vis_backends=[
        dict(type='LocalVisBackend'),
    ])
work_dir = '../corruptions/work_dirs/ade20k/mask2former/mask2former_r50_8xb2-160k_ade20k-512x512/fog'

09/21 05:53:17 - mmengine - INFO - Distributed training is not used, all SyncBatchNorm (SyncBN) layers in the model will be automatically reverted to BatchNormXd layers if they are used.
09/21 05:53:17 - mmengine - INFO - Hooks will be executed in the following order:
before_run:
(VERY_HIGH   ) RuntimeInfoHook                    
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
before_train:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_train_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(NORMAL      ) DistSamplerSeedHook                
 -------------------- 
before_train_iter:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_train_iter:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(NORMAL      ) SegVisualizationHook               
(BELOW_NORMAL) LoggerHook                         
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
after_train_epoch:
(NORMAL      ) IterTimerHook                      
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_val:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
before_val_epoch:
(NORMAL      ) IterTimerHook                      
 -------------------- 
before_val_iter:
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_val_iter:
(NORMAL      ) IterTimerHook                      
(NORMAL      ) SegVisualizationHook               
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_val_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
after_val:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
after_train:
(VERY_HIGH   ) RuntimeInfoHook                    
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_test:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
before_test_epoch:
(NORMAL      ) IterTimerHook                      
 -------------------- 
before_test_iter:
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_test_iter:
(NORMAL      ) IterTimerHook                      
(NORMAL      ) SegVisualizationHook               
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_test_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_test:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
after_run:
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
09/21 05:53:18 - mmengine - WARNING - The prefix is not set in metric class IoUMetric.
Loads checkpoint by local backend from path: ../checkpoint_files/ade20k/mask2former/mask2former_r50_8xb2-160k_ade20k-512x512_20221204_000055-2d1f55f1.pth
09/21 05:53:18 - mmengine - INFO - Load checkpoint from ../checkpoint_files/ade20k/mask2former/mask2former_r50_8xb2-160k_ade20k-512x512_20221204_000055-2d1f55f1.pth
09/21 05:54:31 - mmengine - INFO - Iter(test) [  50/2000]    eta: 0:46:56  time: 1.0961  data_time: 0.0014  memory: 17167  
09/21 05:54:53 - mmengine - INFO - Iter(test) [ 100/2000]    eta: 0:29:59  time: 0.6535  data_time: 0.0014  memory: 17158  
09/21 05:55:02 - mmengine - INFO - Iter(test) [ 150/2000]    eta: 0:21:23  time: 0.1887  data_time: 0.0014  memory: 872  
09/21 05:55:22 - mmengine - INFO - Iter(test) [ 200/2000]    eta: 0:18:28  time: 0.1868  data_time: 0.0014  memory: 17214  
09/21 05:55:38 - mmengine - INFO - Iter(test) [ 250/2000]    eta: 0:16:17  time: 0.1886  data_time: 0.0013  memory: 17221  
09/21 05:55:52 - mmengine - INFO - Iter(test) [ 300/2000]    eta: 0:14:30  time: 0.1883  data_time: 0.0014  memory: 17162  
09/21 05:56:12 - mmengine - INFO - Iter(test) [ 350/2000]    eta: 0:13:39  time: 0.1843  data_time: 0.0013  memory: 17165  
09/21 05:56:26 - mmengine - INFO - Iter(test) [ 400/2000]    eta: 0:12:30  time: 0.1883  data_time: 0.0014  memory: 17147  
09/21 05:56:35 - mmengine - INFO - Iter(test) [ 450/2000]    eta: 0:11:18  time: 0.1851  data_time: 0.0024  memory: 883  
09/21 05:56:45 - mmengine - INFO - Iter(test) [ 500/2000]    eta: 0:10:18  time: 0.1882  data_time: 0.0013  memory: 872  
09/21 05:56:55 - mmengine - INFO - Iter(test) [ 550/2000]    eta: 0:09:31  time: 0.1911  data_time: 0.0014  memory: 983  
09/21 05:57:05 - mmengine - INFO - Iter(test) [ 600/2000]    eta: 0:08:47  time: 0.1916  data_time: 0.0018  memory: 981  
09/21 05:57:19 - mmengine - INFO - Iter(test) [ 650/2000]    eta: 0:08:19  time: 0.6644  data_time: 0.0013  memory: 17168  
09/21 05:57:34 - mmengine - INFO - Iter(test) [ 700/2000]    eta: 0:07:55  time: 0.1922  data_time: 0.0014  memory: 17163  
09/21 05:57:44 - mmengine - INFO - Iter(test) [ 750/2000]    eta: 0:07:22  time: 0.1875  data_time: 0.0013  memory: 1039  
09/21 05:57:53 - mmengine - INFO - Iter(test) [ 800/2000]    eta: 0:06:52  time: 0.1919  data_time: 0.0015  memory: 872  
09/21 05:58:03 - mmengine - INFO - Iter(test) [ 850/2000]    eta: 0:06:24  time: 0.1924  data_time: 0.0015  memory: 844  
09/21 05:58:13 - mmengine - INFO - Iter(test) [ 900/2000]    eta: 0:05:59  time: 0.2095  data_time: 0.0013  memory: 925  
09/21 05:58:22 - mmengine - INFO - Iter(test) [ 950/2000]    eta: 0:05:35  time: 0.1906  data_time: 0.0014  memory: 955  
09/21 05:58:32 - mmengine - INFO - Iter(test) [1000/2000]    eta: 0:05:13  time: 0.1896  data_time: 0.0014  memory: 955  
09/21 05:58:46 - mmengine - INFO - Iter(test) [1050/2000]    eta: 0:04:56  time: 0.1911  data_time: 0.0014  memory: 17170  
09/21 05:58:56 - mmengine - INFO - Iter(test) [1100/2000]    eta: 0:04:35  time: 0.1915  data_time: 0.0014  memory: 952  
09/21 05:59:05 - mmengine - INFO - Iter(test) [1150/2000]    eta: 0:04:16  time: 0.1905  data_time: 0.0014  memory: 924  
09/21 05:59:15 - mmengine - INFO - Iter(test) [1200/2000]    eta: 0:03:57  time: 0.1896  data_time: 0.0014  memory: 1829  
09/21 05:59:29 - mmengine - INFO - Iter(test) [1250/2000]    eta: 0:03:42  time: 0.1866  data_time: 0.0013  memory: 17158  
09/21 05:59:38 - mmengine - INFO - Iter(test) [1300/2000]    eta: 0:03:24  time: 0.1901  data_time: 0.0013  memory: 872  
09/21 05:59:48 - mmengine - INFO - Iter(test) [1350/2000]    eta: 0:03:07  time: 0.1869  data_time: 0.0013  memory: 872  
09/21 05:59:58 - mmengine - INFO - Iter(test) [1400/2000]    eta: 0:02:51  time: 0.1974  data_time: 0.0013  memory: 953  
09/21 06:00:08 - mmengine - INFO - Iter(test) [1450/2000]    eta: 0:02:35  time: 0.1909  data_time: 0.0013  memory: 955  
09/21 06:00:17 - mmengine - INFO - Iter(test) [1500/2000]    eta: 0:02:19  time: 0.1874  data_time: 0.0013  memory: 869  
09/21 06:00:27 - mmengine - INFO - Iter(test) [1550/2000]    eta: 0:02:04  time: 0.1913  data_time: 0.0014  memory: 955  
09/21 06:00:37 - mmengine - INFO - Iter(test) [1600/2000]    eta: 0:01:49  time: 0.1901  data_time: 0.0014  memory: 844  
09/21 06:00:52 - mmengine - INFO - Iter(test) [1650/2000]    eta: 0:01:36  time: 0.1876  data_time: 0.0013  memory: 17165  
09/21 06:01:02 - mmengine - INFO - Iter(test) [1700/2000]    eta: 0:01:21  time: 0.1912  data_time: 0.0015  memory: 952  
09/21 06:01:12 - mmengine - INFO - Iter(test) [1750/2000]    eta: 0:01:07  time: 0.1908  data_time: 0.0013  memory: 980  
09/21 06:01:22 - mmengine - INFO - Iter(test) [1800/2000]    eta: 0:00:53  time: 0.1928  data_time: 0.0015  memory: 872  
09/21 06:01:32 - mmengine - INFO - Iter(test) [1850/2000]    eta: 0:00:40  time: 0.2072  data_time: 0.0015  memory: 787  
09/21 06:01:42 - mmengine - INFO - Iter(test) [1900/2000]    eta: 0:00:26  time: 0.1901  data_time: 0.0014  memory: 1011  
09/21 06:01:51 - mmengine - INFO - Iter(test) [1950/2000]    eta: 0:00:13  time: 0.1906  data_time: 0.0013  memory: 1258  
09/21 06:02:01 - mmengine - INFO - Iter(test) [2000/2000]    eta: 0:00:00  time: 0.1873  data_time: 0.0013  memory: 1037  
09/21 06:02:01 - mmengine - INFO - per class results:
09/21 06:02:01 - mmengine - INFO - 
+---------------------+-------+-------+
|        Class        |  IoU  |  Acc  |
+---------------------+-------+-------+
|         wall        | 74.68 | 87.28 |
|       building      |  79.7 | 88.92 |
|         sky         | 93.51 | 96.41 |
|        floor        | 78.48 | 89.69 |
|         tree        | 72.77 | 84.69 |
|       ceiling       | 81.35 |  91.2 |
|         road        | 79.43 | 83.78 |
|         bed         | 86.44 | 94.24 |
|      windowpane     | 58.47 | 76.86 |
|        grass        | 65.63 | 79.97 |
|       cabinet       | 57.56 | 69.93 |
|       sidewalk      | 62.84 | 79.99 |
|        person       | 81.23 | 88.55 |
|        earth        | 32.26 | 49.17 |
|         door        | 46.56 | 65.56 |
|        table        | 58.03 | 71.48 |
|       mountain      | 52.83 | 70.75 |
|        plant        | 49.26 | 60.76 |
|       curtain       | 72.02 | 83.55 |
|        chair        |  56.7 |  73.2 |
|         car         | 82.27 | 87.88 |
|        water        | 46.26 |  66.3 |
|       painting      | 71.01 | 84.01 |
|         sofa        | 65.65 | 85.78 |
|        shelf        | 39.74 | 59.78 |
|        house        | 45.08 | 64.62 |
|         sea         | 39.92 | 57.56 |
|        mirror       | 59.83 | 73.21 |
|         rug         | 59.46 | 72.55 |
|        field        | 30.75 | 45.27 |
|       armchair      | 42.11 | 53.71 |
|         seat        |  54.4 | 80.59 |
|        fence        | 32.29 | 48.29 |
|         desk        |  43.8 | 65.73 |
|         rock        | 29.82 | 42.35 |
|       wardrobe      |  33.3 | 48.42 |
|         lamp        | 64.43 | 76.69 |
|       bathtub       | 65.96 | 87.16 |
|       railing       | 26.87 | 40.33 |
|       cushion       | 48.31 | 62.08 |
|         base        | 21.63 | 39.94 |
|         box         | 20.47 |  29.6 |
|        column       | 45.83 | 59.03 |
|      signboard      | 35.83 | 50.07 |
|   chest of drawers  | 42.07 | 59.63 |
|       counter       | 21.17 | 29.52 |
|         sand        | 25.54 | 47.21 |
|         sink        | 69.82 | 76.99 |
|      skyscraper     |  49.2 | 61.11 |
|      fireplace      | 69.41 | 79.75 |
|     refrigerator    | 77.63 | 84.75 |
|      grandstand     | 41.44 | 70.02 |
|         path        |  22.1 | 31.22 |
|        stairs       | 34.74 | 43.06 |
|        runway       | 77.51 | 95.66 |
|         case        | 38.27 | 59.36 |
|      pool table     | 93.06 | 96.21 |
|        pillow       | 52.38 | 68.91 |
|     screen door     | 60.72 | 80.65 |
|       stairway      |  34.3 | 51.91 |
|        river        |  5.99 | 11.54 |
|        bridge       | 55.17 | 75.49 |
|       bookcase      | 28.77 | 45.64 |
|        blind        | 44.98 | 52.96 |
|     coffee table    | 61.48 | 82.21 |
|        toilet       | 82.86 | 90.19 |
|        flower       | 40.64 | 53.03 |
|         book        | 48.15 | 66.16 |
|         hill        |  9.76 | 14.28 |
|        bench        | 33.52 | 46.16 |
|      countertop     | 47.26 | 64.36 |
|        stove        | 76.06 | 79.96 |
|         palm        | 53.43 | 75.75 |
|    kitchen island   | 31.46 | 59.42 |
|       computer      |  66.4 | 75.43 |
|     swivel chair    | 44.02 | 62.19 |
|         boat        | 33.13 | 37.48 |
|         bar         | 28.91 | 34.47 |
|    arcade machine   | 20.73 | 21.91 |
|        hovel        | 30.56 | 59.21 |
|         bus         | 81.05 |  85.9 |
|        towel        | 61.02 | 75.55 |
|        light        | 54.99 | 70.04 |
|        truck        | 19.66 |  35.8 |
|        tower        | 25.31 | 52.84 |
|      chandelier     | 62.05 | 73.71 |
|        awning       |  21.4 | 26.76 |
|     streetlight     | 34.61 | 46.48 |
|        booth        | 37.94 | 38.28 |
| television receiver | 65.73 | 74.32 |
|       airplane      | 56.11 | 62.86 |
|      dirt track     |  4.9  | 25.75 |
|       apparel       | 38.49 | 52.68 |
|         pole        |  22.8 | 36.49 |
|         land        |  4.79 |  9.33 |
|      bannister      |  12.0 | 19.87 |
|      escalator      | 51.53 | 73.53 |
|       ottoman       |  29.9 | 38.29 |
|        bottle       |  30.8 | 37.83 |
|        buffet       | 44.04 |  51.4 |
|        poster       | 28.05 | 41.04 |
|        stage        | 14.95 | 21.32 |
|         van         | 47.18 | 60.85 |
|         ship        |  3.59 |  6.01 |
|       fountain      | 18.82 | 19.32 |
|    conveyer belt    | 50.74 | 62.67 |
|        canopy       | 14.14 | 22.08 |
|        washer       | 68.46 | 68.79 |
|      plaything      | 21.92 | 33.91 |
|    swimming pool    |  46.3 | 71.43 |
|        stool        | 33.01 | 45.13 |
|        barrel       | 58.68 | 73.36 |
|        basket       | 28.55 | 36.21 |
|      waterfall      | 44.31 | 53.14 |
|         tent        | 86.03 | 98.28 |
|         bag         | 13.44 |  17.6 |
|       minibike      | 67.29 | 82.69 |
|        cradle       |  81.1 | 96.84 |
|         oven        | 20.53 | 58.84 |
|         ball        | 40.53 | 52.27 |
|         food        |  52.7 | 60.17 |
|         step        | 10.79 | 20.69 |
|         tank        | 28.86 | 31.33 |
|      trade name     | 18.09 | 20.83 |
|      microwave      |  38.2 | 41.23 |
|         pot         | 44.23 | 51.71 |
|        animal       |  66.6 | 72.45 |
|       bicycle       | 59.48 | 75.45 |
|         lake        |  0.04 |  0.04 |
|      dishwasher     |  63.8 | 81.72 |
|        screen       | 38.96 | 43.13 |
|       blanket       | 16.38 | 21.98 |
|      sculpture      | 37.28 | 51.47 |
|         hood        | 78.27 | 84.49 |
|        sconce       | 44.33 | 62.08 |
|         vase        | 34.46 | 52.04 |
|    traffic light    | 24.53 | 54.04 |
|         tray        | 15.07 | 28.09 |
|        ashcan       | 41.61 | 54.45 |
|         fan         |  54.8 | 76.02 |
|         pier        | 13.37 | 25.71 |
|      crt screen     |  3.87 | 11.89 |
|        plate        | 37.33 | 44.69 |
|       monitor       |  0.68 |  0.91 |
|    bulletin board   | 37.65 | 50.75 |
|        shower       |  7.97 | 17.05 |
|       radiator      | 43.88 | 56.82 |
|        glass        | 17.94 | 21.22 |
|        clock        | 31.22 | 34.62 |
|         flag        | 42.52 | 47.92 |
+---------------------+-------+-------+
09/21 06:02:01 - mmengine - INFO - Iter(test) [2000/2000]    aAcc: 80.6400  mIoU: 44.3300  mAcc: 56.7700  data_time: 0.0016  time: 0.2612
Finished processing corruption type: fog
Processing corruption type: brightness
09/21 06:02:05 - mmengine - INFO - 
------------------------------------------------------------
System environment:
    sys.platform: linux
    Python: 3.10.13 | packaged by conda-forge | (main, Dec 23 2023, 15:36:39) [GCC 12.3.0]
    CUDA available: True
    MUSA available: False
    numpy_random_seed: 344057161
    GPU 0: Tesla V100-SXM2-32GB
    CUDA_HOME: /opt/bwhpc/common/devel/cuda/11.7
    NVCC: Cuda compilation tools, release 11.7, V11.7.99
    GCC: gcc (GCC) 8.5.0 20210514 (Red Hat 8.5.0-18)
    PyTorch: 1.13.1
    PyTorch compiling details: PyTorch built with:
  - GCC 9.3
  - C++ Version: 201402
  - Intel(R) oneAPI Math Kernel Library Version 2023.1-Product Build 20230303 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v2.6.0 (Git Hash 52b5f107dd9cf10910aaa19cb47f3abf9b349815)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - LAPACK is enabled (usually provided by MKL)
  - NNPACK is enabled
  - CPU capability usage: AVX2
  - CUDA Runtime 11.7
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_61,code=sm_61;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86;-gencode;arch=compute_37,code=compute_37
  - CuDNN 8.5
  - Magma 2.6.1
  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.7, CUDNN_VERSION=8.5.0, CXX_COMPILER=/opt/rh/devtoolset-9/root/usr/bin/c++, CXX_FLAGS= -fabi-version=11 -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -DEDGE_PROFILER_USE_KINETO -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Werror=non-virtual-dtor -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wunused-local-typedefs -Wno-unused-parameter -Wno-unused-function -Wno-unused-result -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Werror=cast-function-type -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.13.1, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, USE_ROCM=OFF, 

    TorchVision: 0.14.1
    OpenCV: 3.4.18
    MMEngine: 0.10.4

Runtime environment:
    cudnn_benchmark: True
    mp_cfg: {'mp_start_method': 'fork', 'opencv_num_threads': 0}
    dist_cfg: {'backend': 'nccl'}
    seed: 344057161
    Distributed launcher: none
    Distributed training: False
    GPU number: 1
------------------------------------------------------------

09/21 06:02:05 - mmengine - INFO - Config:
auto_scale_lr = dict(base_batch_size=16, enable=False)
crop_size = (
    512,
    512,
)
custom_imports = dict(allow_failed_imports=False, imports='mmdet.models')
data_root = 'data/ade/ADEChallengeData2016'
dataset_type = 'ADE20KDataset'
default_hooks = dict(
    checkpoint=dict(
        by_epoch=False, interval=5000, save_best='mIoU',
        type='CheckpointHook'),
    logger=dict(interval=50, log_metric_by_epoch=False, type='LoggerHook'),
    param_scheduler=dict(type='ParamSchedulerHook'),
    sampler_seed=dict(type='DistSamplerSeedHook'),
    timer=dict(type='IterTimerHook'),
    visualization=dict(type='SegVisualizationHook'))
default_scope = 'mmseg'
embed_multi = dict(decay_mult=0.0, lr_mult=1.0)
env_cfg = dict(
    cudnn_benchmark=True,
    dist_cfg=dict(backend='nccl'),
    mp_cfg=dict(mp_start_method='fork', opencv_num_threads=0))
img_ratios = [
    0.5,
    0.75,
    1.0,
    1.25,
    1.5,
    1.75,
]
launcher = 'none'
load_from = '../checkpoint_files/ade20k/mask2former/mask2former_r50_8xb2-160k_ade20k-512x512_20221204_000055-2d1f55f1.pth'
log_level = 'INFO'
log_processor = dict(by_epoch=False)
model = dict(
    backbone=dict(
        deep_stem=False,
        depth=50,
        frozen_stages=-1,
        init_cfg=dict(checkpoint='torchvision://resnet50', type='Pretrained'),
        norm_cfg=dict(requires_grad=False, type='SyncBN'),
        num_stages=4,
        out_indices=(
            0,
            1,
            2,
            3,
        ),
        style='pytorch',
        type='ResNet'),
    data_preprocessor=dict(
        bgr_to_rgb=True,
        corruption='brightness',
        mean=[
            123.675,
            116.28,
            103.53,
        ],
        pad_val=0,
        seg_pad_val=255,
        size=(
            512,
            512,
        ),
        std=[
            58.395,
            57.12,
            57.375,
        ],
        test_cfg=dict(size_divisor=32),
        type='SegDataPreProcessor'),
    decode_head=dict(
        align_corners=False,
        enforce_decoder_input_project=False,
        feat_channels=256,
        in_channels=[
            256,
            512,
            1024,
            2048,
        ],
        loss_cls=dict(
            class_weight=[
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                0.1,
            ],
            loss_weight=2.0,
            reduction='mean',
            type='mmdet.CrossEntropyLoss',
            use_sigmoid=False),
        loss_dice=dict(
            activate=True,
            eps=1.0,
            loss_weight=5.0,
            naive_dice=True,
            reduction='mean',
            type='mmdet.DiceLoss',
            use_sigmoid=True),
        loss_mask=dict(
            loss_weight=5.0,
            reduction='mean',
            type='mmdet.CrossEntropyLoss',
            use_sigmoid=True),
        num_classes=150,
        num_queries=100,
        num_transformer_feat_level=3,
        out_channels=256,
        pixel_decoder=dict(
            act_cfg=dict(type='ReLU'),
            encoder=dict(
                init_cfg=None,
                layer_cfg=dict(
                    ffn_cfg=dict(
                        act_cfg=dict(inplace=True, type='ReLU'),
                        embed_dims=256,
                        feedforward_channels=1024,
                        ffn_drop=0.0,
                        num_fcs=2),
                    self_attn_cfg=dict(
                        batch_first=True,
                        dropout=0.0,
                        embed_dims=256,
                        im2col_step=64,
                        init_cfg=None,
                        norm_cfg=None,
                        num_heads=8,
                        num_levels=3,
                        num_points=4)),
                num_layers=6),
            init_cfg=None,
            norm_cfg=dict(num_groups=32, type='GN'),
            num_outs=3,
            positional_encoding=dict(normalize=True, num_feats=128),
            type='mmdet.MSDeformAttnPixelDecoder'),
        positional_encoding=dict(normalize=True, num_feats=128),
        strides=[
            4,
            8,
            16,
            32,
        ],
        train_cfg=dict(
            assigner=dict(
                match_costs=[
                    dict(type='mmdet.ClassificationCost', weight=2.0),
                    dict(
                        type='mmdet.CrossEntropyLossCost',
                        use_sigmoid=True,
                        weight=5.0),
                    dict(
                        eps=1.0,
                        pred_act=True,
                        type='mmdet.DiceCost',
                        weight=5.0),
                ],
                type='mmdet.HungarianAssigner'),
            importance_sample_ratio=0.75,
            num_points=12544,
            oversample_ratio=3.0,
            sampler=dict(type='mmdet.MaskPseudoSampler')),
        transformer_decoder=dict(
            init_cfg=None,
            layer_cfg=dict(
                cross_attn_cfg=dict(
                    attn_drop=0.0,
                    batch_first=True,
                    dropout_layer=None,
                    embed_dims=256,
                    num_heads=8,
                    proj_drop=0.0),
                ffn_cfg=dict(
                    act_cfg=dict(inplace=True, type='ReLU'),
                    add_identity=True,
                    dropout_layer=None,
                    embed_dims=256,
                    feedforward_channels=2048,
                    ffn_drop=0.0,
                    num_fcs=2),
                self_attn_cfg=dict(
                    attn_drop=0.0,
                    batch_first=True,
                    dropout_layer=None,
                    embed_dims=256,
                    num_heads=8,
                    proj_drop=0.0)),
            num_layers=9,
            return_intermediate=True),
        type='Mask2FormerHead'),
    test_cfg=dict(mode='whole'),
    train_cfg=dict(),
    type='EncoderDecoder')
num_classes = 150
optim_wrapper = dict(
    clip_grad=dict(max_norm=0.01, norm_type=2),
    optimizer=dict(
        betas=(
            0.9,
            0.999,
        ),
        eps=1e-08,
        lr=0.0001,
        type='AdamW',
        weight_decay=0.05),
    paramwise_cfg=dict(
        custom_keys=dict(
            backbone=dict(decay_mult=1.0, lr_mult=0.1),
            level_embed=dict(decay_mult=0.0, lr_mult=1.0),
            query_embed=dict(decay_mult=0.0, lr_mult=1.0),
            query_feat=dict(decay_mult=0.0, lr_mult=1.0)),
        norm_decay_mult=0.0),
    type='OptimWrapper')
optimizer = dict(
    betas=(
        0.9,
        0.999,
    ),
    eps=1e-08,
    lr=0.0001,
    type='AdamW',
    weight_decay=0.05)
param_scheduler = [
    dict(
        begin=0,
        by_epoch=False,
        end=160000,
        eta_min=0,
        power=0.9,
        type='PolyLR'),
]
resume = False
test_cfg = dict(type='TestLoop')
test_dataloader = dict(
    batch_size=1,
    dataset=dict(
        data_prefix=dict(
            img_path='images/validation',
            seg_map_path='annotations/validation'),
        data_root='data/ade/ADEChallengeData2016',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(keep_ratio=True, scale=(
                2048,
                512,
            ), type='Resize'),
            dict(reduce_zero_label=True, type='LoadAnnotations'),
            dict(type='PackSegInputs'),
        ],
        type='ADE20KDataset'),
    num_workers=4,
    persistent_workers=True,
    sampler=dict(shuffle=False, type='DefaultSampler'))
test_evaluator = dict(
    iou_metrics=[
        'mIoU',
    ], type='IoUMetric')
test_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(keep_ratio=True, scale=(
        2048,
        512,
    ), type='Resize'),
    dict(reduce_zero_label=True, type='LoadAnnotations'),
    dict(type='PackSegInputs'),
]
train_cfg = dict(
    max_iters=160000, type='IterBasedTrainLoop', val_interval=5000)
train_dataloader = dict(
    batch_size=2,
    dataset=dict(
        data_prefix=dict(
            img_path='images/training', seg_map_path='annotations/training'),
        data_root='data/ade/ADEChallengeData2016',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(reduce_zero_label=True, type='LoadAnnotations'),
            dict(
                max_size=2048,
                resize_type='ResizeShortestEdge',
                scales=[
                    256,
                    307,
                    358,
                    409,
                    460,
                    512,
                    563,
                    614,
                    665,
                    716,
                    768,
                    819,
                    870,
                    921,
                    972,
                    1024,
                ],
                type='RandomChoiceResize'),
            dict(
                cat_max_ratio=0.75, crop_size=(
                    512,
                    512,
                ), type='RandomCrop'),
            dict(prob=0.5, type='RandomFlip'),
            dict(type='PhotoMetricDistortion'),
            dict(type='PackSegInputs'),
        ],
        type='ADE20KDataset'),
    num_workers=4,
    persistent_workers=True,
    sampler=dict(shuffle=True, type='InfiniteSampler'))
train_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(reduce_zero_label=True, type='LoadAnnotations'),
    dict(
        max_size=2048,
        resize_type='ResizeShortestEdge',
        scales=[
            256,
            307,
            358,
            409,
            460,
            512,
            563,
            614,
            665,
            716,
            768,
            819,
            870,
            921,
            972,
            1024,
        ],
        type='RandomChoiceResize'),
    dict(cat_max_ratio=0.75, crop_size=(
        512,
        512,
    ), type='RandomCrop'),
    dict(prob=0.5, type='RandomFlip'),
    dict(type='PhotoMetricDistortion'),
    dict(type='PackSegInputs'),
]
tta_model = dict(type='SegTTAModel')
tta_pipeline = [
    dict(backend_args=None, type='LoadImageFromFile'),
    dict(
        transforms=[
            [
                dict(keep_ratio=True, scale_factor=0.5, type='Resize'),
                dict(keep_ratio=True, scale_factor=0.75, type='Resize'),
                dict(keep_ratio=True, scale_factor=1.0, type='Resize'),
                dict(keep_ratio=True, scale_factor=1.25, type='Resize'),
                dict(keep_ratio=True, scale_factor=1.5, type='Resize'),
                dict(keep_ratio=True, scale_factor=1.75, type='Resize'),
            ],
            [
                dict(direction='horizontal', prob=0.0, type='RandomFlip'),
                dict(direction='horizontal', prob=1.0, type='RandomFlip'),
            ],
            [
                dict(type='LoadAnnotations'),
            ],
            [
                dict(type='PackSegInputs'),
            ],
        ],
        type='TestTimeAug'),
]
val_cfg = dict(type='ValLoop')
val_dataloader = dict(
    batch_size=1,
    dataset=dict(
        data_prefix=dict(
            img_path='images/validation',
            seg_map_path='annotations/validation'),
        data_root='data/ade/ADEChallengeData2016',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(keep_ratio=True, scale=(
                2048,
                512,
            ), type='Resize'),
            dict(reduce_zero_label=True, type='LoadAnnotations'),
            dict(type='PackSegInputs'),
        ],
        type='ADE20KDataset'),
    num_workers=4,
    persistent_workers=True,
    sampler=dict(shuffle=False, type='DefaultSampler'))
val_evaluator = dict(
    iou_metrics=[
        'mIoU',
    ], type='IoUMetric')
vis_backends = [
    dict(type='LocalVisBackend'),
]
visualizer = dict(
    name='visualizer',
    type='SegLocalVisualizer',
    vis_backends=[
        dict(type='LocalVisBackend'),
    ])
work_dir = '../corruptions/work_dirs/ade20k/mask2former/mask2former_r50_8xb2-160k_ade20k-512x512/brightness'

09/21 06:02:09 - mmengine - INFO - Distributed training is not used, all SyncBatchNorm (SyncBN) layers in the model will be automatically reverted to BatchNormXd layers if they are used.
09/21 06:02:09 - mmengine - INFO - Hooks will be executed in the following order:
before_run:
(VERY_HIGH   ) RuntimeInfoHook                    
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
before_train:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_train_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(NORMAL      ) DistSamplerSeedHook                
 -------------------- 
before_train_iter:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_train_iter:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(NORMAL      ) SegVisualizationHook               
(BELOW_NORMAL) LoggerHook                         
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
after_train_epoch:
(NORMAL      ) IterTimerHook                      
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_val:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
before_val_epoch:
(NORMAL      ) IterTimerHook                      
 -------------------- 
before_val_iter:
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_val_iter:
(NORMAL      ) IterTimerHook                      
(NORMAL      ) SegVisualizationHook               
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_val_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
after_val:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
after_train:
(VERY_HIGH   ) RuntimeInfoHook                    
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_test:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
before_test_epoch:
(NORMAL      ) IterTimerHook                      
 -------------------- 
before_test_iter:
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_test_iter:
(NORMAL      ) IterTimerHook                      
(NORMAL      ) SegVisualizationHook               
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_test_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_test:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
after_run:
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
09/21 06:02:09 - mmengine - WARNING - The prefix is not set in metric class IoUMetric.
Loads checkpoint by local backend from path: ../checkpoint_files/ade20k/mask2former/mask2former_r50_8xb2-160k_ade20k-512x512_20221204_000055-2d1f55f1.pth
09/21 06:02:10 - mmengine - INFO - Load checkpoint from ../checkpoint_files/ade20k/mask2former/mask2former_r50_8xb2-160k_ade20k-512x512_20221204_000055-2d1f55f1.pth
09/21 06:03:22 - mmengine - INFO - Iter(test) [  50/2000]    eta: 0:47:03  time: 1.0825  data_time: 0.0014  memory: 17167  
09/21 06:03:45 - mmengine - INFO - Iter(test) [ 100/2000]    eta: 0:30:13  time: 0.6697  data_time: 0.0015  memory: 17158  
09/21 06:03:56 - mmengine - INFO - Iter(test) [ 150/2000]    eta: 0:21:49  time: 0.2027  data_time: 0.0017  memory: 872  
09/21 06:04:16 - mmengine - INFO - Iter(test) [ 200/2000]    eta: 0:18:53  time: 0.1998  data_time: 0.0014  memory: 17214  
09/21 06:04:32 - mmengine - INFO - Iter(test) [ 250/2000]    eta: 0:16:34  time: 0.1917  data_time: 0.0014  memory: 17221  
09/21 06:04:46 - mmengine - INFO - Iter(test) [ 300/2000]    eta: 0:14:45  time: 0.2031  data_time: 0.0015  memory: 17162  
09/21 06:05:05 - mmengine - INFO - Iter(test) [ 350/2000]    eta: 0:13:44  time: 0.1880  data_time: 0.0014  memory: 17165  
09/21 06:05:19 - mmengine - INFO - Iter(test) [ 400/2000]    eta: 0:12:36  time: 0.2006  data_time: 0.0013  memory: 17147  
09/21 06:05:28 - mmengine - INFO - Iter(test) [ 450/2000]    eta: 0:11:22  time: 0.1799  data_time: 0.0013  memory: 883  
09/21 06:05:39 - mmengine - INFO - Iter(test) [ 500/2000]    eta: 0:10:27  time: 0.2719  data_time: 0.0014  memory: 872  
09/21 06:05:50 - mmengine - INFO - Iter(test) [ 550/2000]    eta: 0:09:41  time: 0.2440  data_time: 0.0014  memory: 983  
09/21 06:06:02 - mmengine - INFO - Iter(test) [ 600/2000]    eta: 0:09:01  time: 0.2613  data_time: 0.0015  memory: 981  
09/21 06:06:18 - mmengine - INFO - Iter(test) [ 650/2000]    eta: 0:08:35  time: 0.7285  data_time: 0.0013  memory: 17168  
09/21 06:06:35 - mmengine - INFO - Iter(test) [ 700/2000]    eta: 0:08:13  time: 0.2168  data_time: 0.0015  memory: 17163  
09/21 06:06:48 - mmengine - INFO - Iter(test) [ 750/2000]    eta: 0:07:43  time: 0.1927  data_time: 0.0013  memory: 1039  
09/21 06:07:00 - mmengine - INFO - Iter(test) [ 800/2000]    eta: 0:07:14  time: 0.2687  data_time: 0.0015  memory: 872  
09/21 06:07:12 - mmengine - INFO - Iter(test) [ 850/2000]    eta: 0:06:49  time: 0.2295  data_time: 0.0015  memory: 844  
09/21 06:07:22 - mmengine - INFO - Iter(test) [ 900/2000]    eta: 0:06:21  time: 0.1768  data_time: 0.0013  memory: 925  
09/21 06:07:34 - mmengine - INFO - Iter(test) [ 950/2000]    eta: 0:05:58  time: 0.2277  data_time: 0.0014  memory: 955  
09/21 06:07:45 - mmengine - INFO - Iter(test) [1000/2000]    eta: 0:05:35  time: 0.2149  data_time: 0.0014  memory: 955  
09/21 06:08:04 - mmengine - INFO - Iter(test) [1050/2000]    eta: 0:05:20  time: 0.2970  data_time: 0.0014  memory: 17170  
09/21 06:08:14 - mmengine - INFO - Iter(test) [1100/2000]    eta: 0:04:57  time: 0.1943  data_time: 0.0014  memory: 952  
09/21 06:08:25 - mmengine - INFO - Iter(test) [1150/2000]    eta: 0:04:37  time: 0.2924  data_time: 0.0014  memory: 924  
09/21 06:08:37 - mmengine - INFO - Iter(test) [1200/2000]    eta: 0:04:17  time: 0.2051  data_time: 0.0013  memory: 1829  
09/21 06:08:52 - mmengine - INFO - Iter(test) [1250/2000]    eta: 0:04:01  time: 0.2037  data_time: 0.0013  memory: 17158  
09/21 06:09:02 - mmengine - INFO - Iter(test) [1300/2000]    eta: 0:03:42  time: 0.2004  data_time: 0.0013  memory: 872  
09/21 06:09:12 - mmengine - INFO - Iter(test) [1350/2000]    eta: 0:03:23  time: 0.1884  data_time: 0.0013  memory: 872  
09/21 06:09:23 - mmengine - INFO - Iter(test) [1400/2000]    eta: 0:03:05  time: 0.2032  data_time: 0.0013  memory: 953  
09/21 06:09:33 - mmengine - INFO - Iter(test) [1450/2000]    eta: 0:02:47  time: 0.2077  data_time: 0.0013  memory: 955  
09/21 06:09:43 - mmengine - INFO - Iter(test) [1500/2000]    eta: 0:02:31  time: 0.1858  data_time: 0.0013  memory: 869  
09/21 06:09:54 - mmengine - INFO - Iter(test) [1550/2000]    eta: 0:02:14  time: 0.2162  data_time: 0.0013  memory: 955  
09/21 06:10:05 - mmengine - INFO - Iter(test) [1600/2000]    eta: 0:01:58  time: 0.1966  data_time: 0.0023  memory: 844  
09/21 06:10:22 - mmengine - INFO - Iter(test) [1650/2000]    eta: 0:01:44  time: 0.1815  data_time: 0.0012  memory: 17165  
09/21 06:10:34 - mmengine - INFO - Iter(test) [1700/2000]    eta: 0:01:28  time: 0.2438  data_time: 0.0014  memory: 952  
09/21 06:10:45 - mmengine - INFO - Iter(test) [1750/2000]    eta: 0:01:13  time: 0.1944  data_time: 0.0013  memory: 980  
09/21 06:10:54 - mmengine - INFO - Iter(test) [1800/2000]    eta: 0:00:58  time: 0.2031  data_time: 0.0015  memory: 872  
09/21 06:11:07 - mmengine - INFO - Iter(test) [1850/2000]    eta: 0:00:43  time: 0.2916  data_time: 0.0014  memory: 787  
09/21 06:11:17 - mmengine - INFO - Iter(test) [1900/2000]    eta: 0:00:28  time: 0.2695  data_time: 0.0013  memory: 1011  
09/21 06:11:28 - mmengine - INFO - Iter(test) [1950/2000]    eta: 0:00:14  time: 0.1916  data_time: 0.0013  memory: 1258  
09/21 06:11:40 - mmengine - INFO - Iter(test) [2000/2000]    eta: 0:00:00  time: 0.2525  data_time: 0.0012  memory: 1037  
09/21 06:11:40 - mmengine - INFO - per class results:
09/21 06:11:40 - mmengine - INFO - 
+---------------------+-------+-------+
|        Class        |  IoU  |  Acc  |
+---------------------+-------+-------+
|         wall        | 75.77 | 87.17 |
|       building      | 80.93 | 89.36 |
|         sky         | 94.05 | 97.24 |
|        floor        | 81.75 |  90.2 |
|         tree        | 74.83 | 85.32 |
|       ceiling       | 83.52 | 92.02 |
|         road        | 82.66 | 88.32 |
|         bed         | 89.07 |  94.8 |
|      windowpane     | 61.53 | 78.78 |
|        grass        | 68.28 | 84.33 |
|       cabinet       | 57.05 | 70.81 |
|       sidewalk      | 65.06 | 79.45 |
|        person       | 81.44 | 89.64 |
|        earth        | 39.28 | 52.82 |
|         door        | 46.61 | 65.84 |
|        table        | 61.03 | 75.48 |
|       mountain      | 59.15 | 72.83 |
|        plant        | 52.48 | 64.74 |
|       curtain       | 71.11 | 84.88 |
|        chair        | 57.46 | 71.91 |
|         car         | 83.13 | 88.56 |
|        water        | 45.31 | 62.03 |
|       painting      |  69.2 | 83.18 |
|         sofa        | 63.08 |  81.7 |
|        shelf        | 40.47 | 60.83 |
|        house        | 44.12 | 69.16 |
|         sea         | 43.26 | 61.63 |
|        mirror       | 60.76 | 76.85 |
|         rug         | 64.52 | 79.69 |
|        field        | 34.32 | 57.37 |
|       armchair      | 39.33 | 53.96 |
|         seat        | 57.07 | 83.84 |
|        fence        | 30.52 | 43.82 |
|         desk        | 50.17 |  69.6 |
|         rock        |  46.3 | 62.93 |
|       wardrobe      | 37.31 | 56.14 |
|         lamp        | 65.09 | 77.85 |
|       bathtub       | 70.88 | 84.07 |
|       railing       | 25.43 | 39.53 |
|       cushion       | 54.36 | 67.22 |
|         base        | 27.63 |  49.1 |
|         box         | 21.74 | 31.36 |
|        column       | 44.76 | 57.96 |
|      signboard      | 39.54 |  53.7 |
|   chest of drawers  | 39.28 | 58.99 |
|       counter       | 33.35 | 48.94 |
|         sand        | 30.81 | 50.15 |
|         sink        | 71.97 | 77.88 |
|      skyscraper     | 39.66 | 55.21 |
|      fireplace      | 63.93 | 73.08 |
|     refrigerator    |  71.5 | 79.75 |
|      grandstand     | 39.53 | 67.32 |
|         path        | 17.15 | 27.34 |
|        stairs       | 33.88 | 41.61 |
|        runway       | 66.16 | 78.74 |
|         case        | 31.47 |  46.6 |
|      pool table     |  93.6 | 96.47 |
|        pillow       | 58.33 | 73.68 |
|     screen door     | 65.59 | 83.49 |
|       stairway      | 34.26 | 44.25 |
|        river        |  4.16 | 12.44 |
|        bridge       | 52.14 | 77.41 |
|       bookcase      | 38.25 | 57.38 |
|        blind        | 33.96 | 36.52 |
|     coffee table    | 60.29 | 80.75 |
|        toilet       | 86.76 | 90.53 |
|        flower       | 38.59 | 52.85 |
|         book        | 51.97 |  72.0 |
|         hill        |  7.1  | 10.97 |
|        bench        | 42.65 | 53.82 |
|      countertop     | 51.95 | 68.19 |
|        stove        | 74.71 | 81.84 |
|         palm        | 51.94 | 77.75 |
|    kitchen island   | 33.55 | 67.82 |
|       computer      | 59.24 | 66.21 |
|     swivel chair    | 42.55 | 63.03 |
|         boat        |  33.3 | 43.08 |
|         bar         | 39.91 | 48.88 |
|    arcade machine   | 30.24 | 31.87 |
|        hovel        | 16.23 |  37.0 |
|         bus         | 86.79 | 95.22 |
|        towel        | 62.36 | 72.64 |
|        light        |  60.9 | 76.17 |
|        truck        | 28.99 | 48.77 |
|        tower        | 26.05 | 53.14 |
|      chandelier     | 64.32 | 75.35 |
|        awning       | 25.88 | 30.99 |
|     streetlight     | 33.53 | 46.21 |
|        booth        | 58.59 | 64.49 |
| television receiver | 64.02 |  77.1 |
|       airplane      |  49.4 | 62.81 |
|      dirt track     |  7.68 | 42.09 |
|       apparel       | 38.31 |  56.4 |
|         pole        | 25.44 | 39.11 |
|         land        |  4.73 |  8.59 |
|      bannister      | 16.41 | 24.97 |
|      escalator      | 51.56 | 69.22 |
|       ottoman       | 32.75 | 49.59 |
|        bottle       | 39.69 | 61.56 |
|        buffet       | 46.63 |  52.0 |
|        poster       | 21.94 | 33.75 |
|        stage        | 15.29 | 21.49 |
|         van         | 47.74 | 62.52 |
|         ship        | 52.68 | 81.43 |
|       fountain      | 20.32 | 21.43 |
|    conveyer belt    | 79.12 | 90.71 |
|        canopy       |  15.1 | 23.37 |
|        washer       |  67.1 | 69.79 |
|      plaything      | 22.12 | 32.71 |
|    swimming pool    | 44.47 | 73.87 |
|        stool        | 45.58 | 63.54 |
|        barrel       | 27.39 | 31.99 |
|        basket       |  29.6 | 39.78 |
|      waterfall      | 54.19 | 77.63 |
|         tent        | 87.19 | 98.45 |
|         bag         | 17.71 | 20.97 |
|       minibike      | 63.04 | 84.13 |
|        cradle       | 83.05 | 96.63 |
|         oven        | 21.69 | 66.93 |
|         ball        |  40.4 | 52.43 |
|         food        | 59.06 | 70.13 |
|         step        | 16.69 | 21.96 |
|         tank        |  37.6 | 40.89 |
|      trade name     | 28.65 | 34.28 |
|      microwave      | 38.65 | 42.12 |
|         pot         |  45.0 | 52.69 |
|        animal       | 56.06 |  60.3 |
|       bicycle       | 59.19 | 75.62 |
|         lake        |  0.15 |  0.15 |
|      dishwasher     | 74.41 |  80.7 |
|        screen       | 50.22 | 62.44 |
|       blanket       | 16.01 | 21.83 |
|      sculpture      | 43.69 |  63.3 |
|         hood        | 71.02 | 85.42 |
|        sconce       | 42.97 | 59.06 |
|         vase        | 40.88 | 59.24 |
|    traffic light    | 26.77 | 56.93 |
|         tray        |  12.3 | 32.58 |
|        ashcan       | 34.76 | 46.73 |
|         fan         |  61.3 | 79.21 |
|         pier        | 36.33 | 84.19 |
|      crt screen     |  3.51 | 10.91 |
|        plate        | 37.93 | 47.77 |
|       monitor       |  8.0  |  12.7 |
|    bulletin board   | 39.83 | 48.96 |
|        shower       | 14.35 | 18.54 |
|       radiator      |  51.5 | 54.52 |
|        glass        | 20.12 | 22.89 |
|        clock        | 29.85 | 36.58 |
|         flag        | 42.63 | 49.21 |
+---------------------+-------+-------+
09/21 06:11:40 - mmengine - INFO - Iter(test) [2000/2000]    aAcc: 81.8100  mIoU: 46.4000  mAcc: 59.8900  data_time: 0.0015  time: 0.2849
Finished processing corruption type: brightness
Processing corruption type: contrast
09/21 06:11:44 - mmengine - INFO - 
------------------------------------------------------------
System environment:
    sys.platform: linux
    Python: 3.10.13 | packaged by conda-forge | (main, Dec 23 2023, 15:36:39) [GCC 12.3.0]
    CUDA available: True
    MUSA available: False
    numpy_random_seed: 442234238
    GPU 0: Tesla V100-SXM2-32GB
    CUDA_HOME: /opt/bwhpc/common/devel/cuda/11.7
    NVCC: Cuda compilation tools, release 11.7, V11.7.99
    GCC: gcc (GCC) 8.5.0 20210514 (Red Hat 8.5.0-18)
    PyTorch: 1.13.1
    PyTorch compiling details: PyTorch built with:
  - GCC 9.3
  - C++ Version: 201402
  - Intel(R) oneAPI Math Kernel Library Version 2023.1-Product Build 20230303 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v2.6.0 (Git Hash 52b5f107dd9cf10910aaa19cb47f3abf9b349815)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - LAPACK is enabled (usually provided by MKL)
  - NNPACK is enabled
  - CPU capability usage: AVX2
  - CUDA Runtime 11.7
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_61,code=sm_61;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86;-gencode;arch=compute_37,code=compute_37
  - CuDNN 8.5
  - Magma 2.6.1
  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.7, CUDNN_VERSION=8.5.0, CXX_COMPILER=/opt/rh/devtoolset-9/root/usr/bin/c++, CXX_FLAGS= -fabi-version=11 -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -DEDGE_PROFILER_USE_KINETO -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Werror=non-virtual-dtor -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wunused-local-typedefs -Wno-unused-parameter -Wno-unused-function -Wno-unused-result -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Werror=cast-function-type -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.13.1, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, USE_ROCM=OFF, 

    TorchVision: 0.14.1
    OpenCV: 3.4.18
    MMEngine: 0.10.4

Runtime environment:
    cudnn_benchmark: True
    mp_cfg: {'mp_start_method': 'fork', 'opencv_num_threads': 0}
    dist_cfg: {'backend': 'nccl'}
    seed: 442234238
    Distributed launcher: none
    Distributed training: False
    GPU number: 1
------------------------------------------------------------

09/21 06:11:44 - mmengine - INFO - Config:
auto_scale_lr = dict(base_batch_size=16, enable=False)
crop_size = (
    512,
    512,
)
custom_imports = dict(allow_failed_imports=False, imports='mmdet.models')
data_root = 'data/ade/ADEChallengeData2016'
dataset_type = 'ADE20KDataset'
default_hooks = dict(
    checkpoint=dict(
        by_epoch=False, interval=5000, save_best='mIoU',
        type='CheckpointHook'),
    logger=dict(interval=50, log_metric_by_epoch=False, type='LoggerHook'),
    param_scheduler=dict(type='ParamSchedulerHook'),
    sampler_seed=dict(type='DistSamplerSeedHook'),
    timer=dict(type='IterTimerHook'),
    visualization=dict(type='SegVisualizationHook'))
default_scope = 'mmseg'
embed_multi = dict(decay_mult=0.0, lr_mult=1.0)
env_cfg = dict(
    cudnn_benchmark=True,
    dist_cfg=dict(backend='nccl'),
    mp_cfg=dict(mp_start_method='fork', opencv_num_threads=0))
img_ratios = [
    0.5,
    0.75,
    1.0,
    1.25,
    1.5,
    1.75,
]
launcher = 'none'
load_from = '../checkpoint_files/ade20k/mask2former/mask2former_r50_8xb2-160k_ade20k-512x512_20221204_000055-2d1f55f1.pth'
log_level = 'INFO'
log_processor = dict(by_epoch=False)
model = dict(
    backbone=dict(
        deep_stem=False,
        depth=50,
        frozen_stages=-1,
        init_cfg=dict(checkpoint='torchvision://resnet50', type='Pretrained'),
        norm_cfg=dict(requires_grad=False, type='SyncBN'),
        num_stages=4,
        out_indices=(
            0,
            1,
            2,
            3,
        ),
        style='pytorch',
        type='ResNet'),
    data_preprocessor=dict(
        bgr_to_rgb=True,
        corruption='contrast',
        mean=[
            123.675,
            116.28,
            103.53,
        ],
        pad_val=0,
        seg_pad_val=255,
        size=(
            512,
            512,
        ),
        std=[
            58.395,
            57.12,
            57.375,
        ],
        test_cfg=dict(size_divisor=32),
        type='SegDataPreProcessor'),
    decode_head=dict(
        align_corners=False,
        enforce_decoder_input_project=False,
        feat_channels=256,
        in_channels=[
            256,
            512,
            1024,
            2048,
        ],
        loss_cls=dict(
            class_weight=[
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                0.1,
            ],
            loss_weight=2.0,
            reduction='mean',
            type='mmdet.CrossEntropyLoss',
            use_sigmoid=False),
        loss_dice=dict(
            activate=True,
            eps=1.0,
            loss_weight=5.0,
            naive_dice=True,
            reduction='mean',
            type='mmdet.DiceLoss',
            use_sigmoid=True),
        loss_mask=dict(
            loss_weight=5.0,
            reduction='mean',
            type='mmdet.CrossEntropyLoss',
            use_sigmoid=True),
        num_classes=150,
        num_queries=100,
        num_transformer_feat_level=3,
        out_channels=256,
        pixel_decoder=dict(
            act_cfg=dict(type='ReLU'),
            encoder=dict(
                init_cfg=None,
                layer_cfg=dict(
                    ffn_cfg=dict(
                        act_cfg=dict(inplace=True, type='ReLU'),
                        embed_dims=256,
                        feedforward_channels=1024,
                        ffn_drop=0.0,
                        num_fcs=2),
                    self_attn_cfg=dict(
                        batch_first=True,
                        dropout=0.0,
                        embed_dims=256,
                        im2col_step=64,
                        init_cfg=None,
                        norm_cfg=None,
                        num_heads=8,
                        num_levels=3,
                        num_points=4)),
                num_layers=6),
            init_cfg=None,
            norm_cfg=dict(num_groups=32, type='GN'),
            num_outs=3,
            positional_encoding=dict(normalize=True, num_feats=128),
            type='mmdet.MSDeformAttnPixelDecoder'),
        positional_encoding=dict(normalize=True, num_feats=128),
        strides=[
            4,
            8,
            16,
            32,
        ],
        train_cfg=dict(
            assigner=dict(
                match_costs=[
                    dict(type='mmdet.ClassificationCost', weight=2.0),
                    dict(
                        type='mmdet.CrossEntropyLossCost',
                        use_sigmoid=True,
                        weight=5.0),
                    dict(
                        eps=1.0,
                        pred_act=True,
                        type='mmdet.DiceCost',
                        weight=5.0),
                ],
                type='mmdet.HungarianAssigner'),
            importance_sample_ratio=0.75,
            num_points=12544,
            oversample_ratio=3.0,
            sampler=dict(type='mmdet.MaskPseudoSampler')),
        transformer_decoder=dict(
            init_cfg=None,
            layer_cfg=dict(
                cross_attn_cfg=dict(
                    attn_drop=0.0,
                    batch_first=True,
                    dropout_layer=None,
                    embed_dims=256,
                    num_heads=8,
                    proj_drop=0.0),
                ffn_cfg=dict(
                    act_cfg=dict(inplace=True, type='ReLU'),
                    add_identity=True,
                    dropout_layer=None,
                    embed_dims=256,
                    feedforward_channels=2048,
                    ffn_drop=0.0,
                    num_fcs=2),
                self_attn_cfg=dict(
                    attn_drop=0.0,
                    batch_first=True,
                    dropout_layer=None,
                    embed_dims=256,
                    num_heads=8,
                    proj_drop=0.0)),
            num_layers=9,
            return_intermediate=True),
        type='Mask2FormerHead'),
    test_cfg=dict(mode='whole'),
    train_cfg=dict(),
    type='EncoderDecoder')
num_classes = 150
optim_wrapper = dict(
    clip_grad=dict(max_norm=0.01, norm_type=2),
    optimizer=dict(
        betas=(
            0.9,
            0.999,
        ),
        eps=1e-08,
        lr=0.0001,
        type='AdamW',
        weight_decay=0.05),
    paramwise_cfg=dict(
        custom_keys=dict(
            backbone=dict(decay_mult=1.0, lr_mult=0.1),
            level_embed=dict(decay_mult=0.0, lr_mult=1.0),
            query_embed=dict(decay_mult=0.0, lr_mult=1.0),
            query_feat=dict(decay_mult=0.0, lr_mult=1.0)),
        norm_decay_mult=0.0),
    type='OptimWrapper')
optimizer = dict(
    betas=(
        0.9,
        0.999,
    ),
    eps=1e-08,
    lr=0.0001,
    type='AdamW',
    weight_decay=0.05)
param_scheduler = [
    dict(
        begin=0,
        by_epoch=False,
        end=160000,
        eta_min=0,
        power=0.9,
        type='PolyLR'),
]
resume = False
test_cfg = dict(type='TestLoop')
test_dataloader = dict(
    batch_size=1,
    dataset=dict(
        data_prefix=dict(
            img_path='images/validation',
            seg_map_path='annotations/validation'),
        data_root='data/ade/ADEChallengeData2016',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(keep_ratio=True, scale=(
                2048,
                512,
            ), type='Resize'),
            dict(reduce_zero_label=True, type='LoadAnnotations'),
            dict(type='PackSegInputs'),
        ],
        type='ADE20KDataset'),
    num_workers=4,
    persistent_workers=True,
    sampler=dict(shuffle=False, type='DefaultSampler'))
test_evaluator = dict(
    iou_metrics=[
        'mIoU',
    ], type='IoUMetric')
test_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(keep_ratio=True, scale=(
        2048,
        512,
    ), type='Resize'),
    dict(reduce_zero_label=True, type='LoadAnnotations'),
    dict(type='PackSegInputs'),
]
train_cfg = dict(
    max_iters=160000, type='IterBasedTrainLoop', val_interval=5000)
train_dataloader = dict(
    batch_size=2,
    dataset=dict(
        data_prefix=dict(
            img_path='images/training', seg_map_path='annotations/training'),
        data_root='data/ade/ADEChallengeData2016',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(reduce_zero_label=True, type='LoadAnnotations'),
            dict(
                max_size=2048,
                resize_type='ResizeShortestEdge',
                scales=[
                    256,
                    307,
                    358,
                    409,
                    460,
                    512,
                    563,
                    614,
                    665,
                    716,
                    768,
                    819,
                    870,
                    921,
                    972,
                    1024,
                ],
                type='RandomChoiceResize'),
            dict(
                cat_max_ratio=0.75, crop_size=(
                    512,
                    512,
                ), type='RandomCrop'),
            dict(prob=0.5, type='RandomFlip'),
            dict(type='PhotoMetricDistortion'),
            dict(type='PackSegInputs'),
        ],
        type='ADE20KDataset'),
    num_workers=4,
    persistent_workers=True,
    sampler=dict(shuffle=True, type='InfiniteSampler'))
train_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(reduce_zero_label=True, type='LoadAnnotations'),
    dict(
        max_size=2048,
        resize_type='ResizeShortestEdge',
        scales=[
            256,
            307,
            358,
            409,
            460,
            512,
            563,
            614,
            665,
            716,
            768,
            819,
            870,
            921,
            972,
            1024,
        ],
        type='RandomChoiceResize'),
    dict(cat_max_ratio=0.75, crop_size=(
        512,
        512,
    ), type='RandomCrop'),
    dict(prob=0.5, type='RandomFlip'),
    dict(type='PhotoMetricDistortion'),
    dict(type='PackSegInputs'),
]
tta_model = dict(type='SegTTAModel')
tta_pipeline = [
    dict(backend_args=None, type='LoadImageFromFile'),
    dict(
        transforms=[
            [
                dict(keep_ratio=True, scale_factor=0.5, type='Resize'),
                dict(keep_ratio=True, scale_factor=0.75, type='Resize'),
                dict(keep_ratio=True, scale_factor=1.0, type='Resize'),
                dict(keep_ratio=True, scale_factor=1.25, type='Resize'),
                dict(keep_ratio=True, scale_factor=1.5, type='Resize'),
                dict(keep_ratio=True, scale_factor=1.75, type='Resize'),
            ],
            [
                dict(direction='horizontal', prob=0.0, type='RandomFlip'),
                dict(direction='horizontal', prob=1.0, type='RandomFlip'),
            ],
            [
                dict(type='LoadAnnotations'),
            ],
            [
                dict(type='PackSegInputs'),
            ],
        ],
        type='TestTimeAug'),
]
val_cfg = dict(type='ValLoop')
val_dataloader = dict(
    batch_size=1,
    dataset=dict(
        data_prefix=dict(
            img_path='images/validation',
            seg_map_path='annotations/validation'),
        data_root='data/ade/ADEChallengeData2016',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(keep_ratio=True, scale=(
                2048,
                512,
            ), type='Resize'),
            dict(reduce_zero_label=True, type='LoadAnnotations'),
            dict(type='PackSegInputs'),
        ],
        type='ADE20KDataset'),
    num_workers=4,
    persistent_workers=True,
    sampler=dict(shuffle=False, type='DefaultSampler'))
val_evaluator = dict(
    iou_metrics=[
        'mIoU',
    ], type='IoUMetric')
vis_backends = [
    dict(type='LocalVisBackend'),
]
visualizer = dict(
    name='visualizer',
    type='SegLocalVisualizer',
    vis_backends=[
        dict(type='LocalVisBackend'),
    ])
work_dir = '../corruptions/work_dirs/ade20k/mask2former/mask2former_r50_8xb2-160k_ade20k-512x512/contrast'

09/21 06:11:47 - mmengine - INFO - Distributed training is not used, all SyncBatchNorm (SyncBN) layers in the model will be automatically reverted to BatchNormXd layers if they are used.
09/21 06:11:47 - mmengine - INFO - Hooks will be executed in the following order:
before_run:
(VERY_HIGH   ) RuntimeInfoHook                    
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
before_train:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_train_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(NORMAL      ) DistSamplerSeedHook                
 -------------------- 
before_train_iter:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_train_iter:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(NORMAL      ) SegVisualizationHook               
(BELOW_NORMAL) LoggerHook                         
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
after_train_epoch:
(NORMAL      ) IterTimerHook                      
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_val:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
before_val_epoch:
(NORMAL      ) IterTimerHook                      
 -------------------- 
before_val_iter:
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_val_iter:
(NORMAL      ) IterTimerHook                      
(NORMAL      ) SegVisualizationHook               
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_val_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
after_val:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
after_train:
(VERY_HIGH   ) RuntimeInfoHook                    
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_test:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
before_test_epoch:
(NORMAL      ) IterTimerHook                      
 -------------------- 
before_test_iter:
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_test_iter:
(NORMAL      ) IterTimerHook                      
(NORMAL      ) SegVisualizationHook               
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_test_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_test:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
after_run:
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
09/21 06:11:47 - mmengine - WARNING - The prefix is not set in metric class IoUMetric.
Loads checkpoint by local backend from path: ../checkpoint_files/ade20k/mask2former/mask2former_r50_8xb2-160k_ade20k-512x512_20221204_000055-2d1f55f1.pth
09/21 06:11:48 - mmengine - INFO - Load checkpoint from ../checkpoint_files/ade20k/mask2former/mask2former_r50_8xb2-160k_ade20k-512x512_20221204_000055-2d1f55f1.pth
09/21 06:12:56 - mmengine - INFO - Iter(test) [  50/2000]    eta: 0:44:40  time: 0.9851  data_time: 0.0015  memory: 17167  
09/21 06:13:14 - mmengine - INFO - Iter(test) [ 100/2000]    eta: 0:27:21  time: 0.5367  data_time: 0.0016  memory: 17158  
09/21 06:13:19 - mmengine - INFO - Iter(test) [ 150/2000]    eta: 0:18:42  time: 0.0678  data_time: 0.0016  memory: 872  
09/21 06:13:33 - mmengine - INFO - Iter(test) [ 200/2000]    eta: 0:15:50  time: 0.0665  data_time: 0.0014  memory: 17214  
09/21 06:13:43 - mmengine - INFO - Iter(test) [ 250/2000]    eta: 0:13:28  time: 0.0665  data_time: 0.0014  memory: 17221  
09/21 06:13:52 - mmengine - INFO - Iter(test) [ 300/2000]    eta: 0:11:43  time: 0.0671  data_time: 0.0014  memory: 17162  
09/21 06:14:05 - mmengine - INFO - Iter(test) [ 350/2000]    eta: 0:10:47  time: 0.0639  data_time: 0.0013  memory: 17165  
09/21 06:14:14 - mmengine - INFO - Iter(test) [ 400/2000]    eta: 0:09:44  time: 0.0869  data_time: 0.0013  memory: 17147  
09/21 06:14:18 - mmengine - INFO - Iter(test) [ 450/2000]    eta: 0:08:37  time: 0.0623  data_time: 0.0013  memory: 883  
09/21 06:14:21 - mmengine - INFO - Iter(test) [ 500/2000]    eta: 0:07:40  time: 0.0641  data_time: 0.0013  memory: 872  
09/21 06:14:25 - mmengine - INFO - Iter(test) [ 550/2000]    eta: 0:06:54  time: 0.0680  data_time: 0.0014  memory: 983  
09/21 06:14:28 - mmengine - INFO - Iter(test) [ 600/2000]    eta: 0:06:14  time: 0.0675  data_time: 0.0015  memory: 981  
09/21 06:14:37 - mmengine - INFO - Iter(test) [ 650/2000]    eta: 0:05:50  time: 0.5380  data_time: 0.0013  memory: 17168  
09/21 06:14:45 - mmengine - INFO - Iter(test) [ 700/2000]    eta: 0:05:29  time: 0.0673  data_time: 0.0015  memory: 17163  
09/21 06:14:49 - mmengine - INFO - Iter(test) [ 750/2000]    eta: 0:05:02  time: 0.0652  data_time: 0.0014  memory: 1039  
09/21 06:14:52 - mmengine - INFO - Iter(test) [ 800/2000]    eta: 0:04:36  time: 0.0665  data_time: 0.0015  memory: 872  
09/21 06:14:56 - mmengine - INFO - Iter(test) [ 850/2000]    eta: 0:04:14  time: 0.0671  data_time: 0.0015  memory: 844  
09/21 06:15:00 - mmengine - INFO - Iter(test) [ 900/2000]    eta: 0:03:54  time: 0.0893  data_time: 0.0013  memory: 925  
09/21 06:15:03 - mmengine - INFO - Iter(test) [ 950/2000]    eta: 0:03:35  time: 0.0649  data_time: 0.0014  memory: 955  
09/21 06:15:06 - mmengine - INFO - Iter(test) [1000/2000]    eta: 0:03:18  time: 0.0642  data_time: 0.0014  memory: 955  
09/21 06:15:14 - mmengine - INFO - Iter(test) [1050/2000]    eta: 0:03:06  time: 0.0694  data_time: 0.0014  memory: 17170  
09/21 06:15:18 - mmengine - INFO - Iter(test) [1100/2000]    eta: 0:02:51  time: 0.0652  data_time: 0.0014  memory: 952  
09/21 06:15:22 - mmengine - INFO - Iter(test) [1150/2000]    eta: 0:02:38  time: 0.0821  data_time: 0.0014  memory: 924  
09/21 06:15:25 - mmengine - INFO - Iter(test) [1200/2000]    eta: 0:02:24  time: 0.0644  data_time: 0.0014  memory: 1829  
09/21 06:15:33 - mmengine - INFO - Iter(test) [1250/2000]    eta: 0:02:15  time: 0.0798  data_time: 0.0014  memory: 17158  
09/21 06:15:37 - mmengine - INFO - Iter(test) [1300/2000]    eta: 0:02:03  time: 0.0656  data_time: 0.0014  memory: 872  
09/21 06:15:40 - mmengine - INFO - Iter(test) [1350/2000]    eta: 0:01:51  time: 0.0625  data_time: 0.0014  memory: 872  
09/21 06:15:43 - mmengine - INFO - Iter(test) [1400/2000]    eta: 0:01:40  time: 0.0678  data_time: 0.0014  memory: 953  
09/21 06:15:46 - mmengine - INFO - Iter(test) [1450/2000]    eta: 0:01:30  time: 0.0672  data_time: 0.0014  memory: 955  
09/21 06:15:50 - mmengine - INFO - Iter(test) [1500/2000]    eta: 0:01:20  time: 0.0630  data_time: 0.0014  memory: 869  
09/21 06:15:54 - mmengine - INFO - Iter(test) [1550/2000]    eta: 0:01:11  time: 0.0670  data_time: 0.0014  memory: 955  
09/21 06:15:57 - mmengine - INFO - Iter(test) [1600/2000]    eta: 0:01:02  time: 0.0656  data_time: 0.0014  memory: 844  
09/21 06:16:06 - mmengine - INFO - Iter(test) [1650/2000]    eta: 0:00:54  time: 0.0625  data_time: 0.0013  memory: 17165  
09/21 06:16:09 - mmengine - INFO - Iter(test) [1700/2000]    eta: 0:00:46  time: 0.0667  data_time: 0.0015  memory: 952  
09/21 06:16:13 - mmengine - INFO - Iter(test) [1750/2000]    eta: 0:00:37  time: 0.0657  data_time: 0.0013  memory: 980  
09/21 06:16:16 - mmengine - INFO - Iter(test) [1800/2000]    eta: 0:00:29  time: 0.0673  data_time: 0.0015  memory: 872  
09/21 06:16:19 - mmengine - INFO - Iter(test) [1850/2000]    eta: 0:00:22  time: 0.0668  data_time: 0.0015  memory: 787  
09/21 06:16:22 - mmengine - INFO - Iter(test) [1900/2000]    eta: 0:00:14  time: 0.0654  data_time: 0.0014  memory: 1011  
09/21 06:16:26 - mmengine - INFO - Iter(test) [1950/2000]    eta: 0:00:07  time: 0.0647  data_time: 0.0013  memory: 1258  
09/21 06:16:29 - mmengine - INFO - Iter(test) [2000/2000]    eta: 0:00:00  time: 0.0612  data_time: 0.0013  memory: 1037  
09/21 06:16:29 - mmengine - INFO - per class results:
09/21 06:16:29 - mmengine - INFO - 
+---------------------+-------+-------+
|        Class        |  IoU  |  Acc  |
+---------------------+-------+-------+
|         wall        | 74.48 | 87.19 |
|       building      | 80.04 | 90.11 |
|         sky         | 93.76 | 96.59 |
|        floor        | 79.29 | 89.79 |
|         tree        | 72.02 |  84.1 |
|       ceiling       | 82.08 | 91.41 |
|         road        | 80.45 | 85.31 |
|         bed         | 87.12 |  93.7 |
|      windowpane     | 59.15 | 74.96 |
|        grass        | 66.66 | 81.75 |
|       cabinet       | 56.98 | 69.66 |
|       sidewalk      | 63.42 | 78.57 |
|        person       | 80.82 | 87.52 |
|        earth        | 34.33 | 52.88 |
|         door        | 42.78 | 61.07 |
|        table        | 58.42 | 72.16 |
|       mountain      | 56.06 | 73.55 |
|        plant        | 45.48 | 57.21 |
|       curtain       | 66.44 | 82.18 |
|        chair        | 57.07 | 73.14 |
|         car         | 81.64 | 87.48 |
|        water        | 45.31 | 63.96 |
|       painting      | 69.68 | 83.46 |
|         sofa        | 62.09 | 80.48 |
|        shelf        | 37.55 | 58.21 |
|        house        |  45.0 | 64.18 |
|         sea         | 40.56 | 56.63 |
|        mirror       | 58.14 | 72.82 |
|         rug         |  55.8 |  69.4 |
|        field        | 33.14 | 50.65 |
|       armchair      | 41.12 | 55.45 |
|         seat        | 54.27 | 82.93 |
|        fence        | 31.03 | 46.76 |
|         desk        | 48.75 | 65.06 |
|         rock        | 32.66 | 40.56 |
|       wardrobe      | 34.86 | 50.95 |
|         lamp        | 64.85 | 76.53 |
|       bathtub       | 63.99 | 87.31 |
|       railing       | 25.68 | 39.86 |
|       cushion       | 49.92 |  60.1 |
|         base        |  22.1 | 43.77 |
|         box         | 18.96 | 29.15 |
|        column       |  46.4 | 59.57 |
|      signboard      |  36.2 | 50.47 |
|   chest of drawers  | 38.67 | 57.56 |
|       counter       | 21.38 | 29.79 |
|         sand        | 29.97 | 49.67 |
|         sink        | 69.71 | 75.92 |
|      skyscraper     | 37.35 | 42.34 |
|      fireplace      | 69.65 | 79.76 |
|     refrigerator    | 72.31 | 77.11 |
|      grandstand     | 36.17 | 70.82 |
|         path        | 23.39 | 34.25 |
|        stairs       | 33.55 | 44.01 |
|        runway       |  71.8 | 90.05 |
|         case        |  37.6 | 63.07 |
|      pool table     |  93.0 | 96.32 |
|        pillow       | 57.94 | 76.59 |
|     screen door     | 57.97 | 82.73 |
|       stairway      | 46.99 | 56.94 |
|        river        |  5.11 | 12.05 |
|        bridge       | 55.79 | 77.21 |
|       bookcase      | 38.12 |  50.5 |
|        blind        | 26.77 | 31.38 |
|     coffee table    | 63.43 | 81.31 |
|        toilet       | 84.74 | 89.06 |
|        flower       | 38.21 | 46.17 |
|         book        | 47.71 | 65.66 |
|         hill        |  7.77 |  9.53 |
|        bench        | 36.72 |  48.7 |
|      countertop     | 50.74 | 70.45 |
|        stove        | 76.52 | 79.19 |
|         palm        | 50.06 | 71.49 |
|    kitchen island   | 30.54 | 59.38 |
|       computer      |  57.9 | 65.83 |
|     swivel chair    | 42.78 | 59.43 |
|         boat        | 34.11 | 51.87 |
|         bar         | 31.44 | 35.92 |
|    arcade machine   | 19.16 | 22.08 |
|        hovel        | 32.43 | 66.01 |
|         bus         |  81.6 | 86.47 |
|        towel        | 57.55 | 76.53 |
|        light        | 55.81 | 70.41 |
|        truck        | 22.14 | 44.23 |
|        tower        | 28.37 |  56.7 |
|      chandelier     | 58.33 | 70.39 |
|        awning       | 24.06 |  30.9 |
|     streetlight     | 33.89 | 47.02 |
|        booth        | 43.41 | 54.56 |
| television receiver | 57.31 | 60.99 |
|       airplane      |  53.0 | 61.47 |
|      dirt track     |  6.05 | 26.32 |
|       apparel       | 31.27 | 41.56 |
|         pole        | 23.17 | 36.39 |
|         land        |  4.51 |  8.43 |
|      bannister      |  8.59 | 14.29 |
|      escalator      | 50.12 | 71.68 |
|       ottoman       | 34.81 | 46.75 |
|        bottle       | 28.47 | 34.79 |
|        buffet       | 45.09 | 51.39 |
|        poster       | 25.39 | 40.33 |
|        stage        | 12.85 |  21.1 |
|         van         | 46.62 |  59.8 |
|         ship        |  4.61 |  6.43 |
|       fountain      | 18.62 | 19.05 |
|    conveyer belt    | 58.33 | 65.45 |
|        canopy       | 19.23 |  24.5 |
|        washer       | 68.96 | 69.21 |
|      plaything      |  16.9 |  26.2 |
|    swimming pool    | 56.06 | 73.38 |
|        stool        | 45.42 |  59.5 |
|        barrel       | 20.48 | 72.77 |
|        basket       | 27.82 | 35.22 |
|      waterfall      | 42.38 | 56.98 |
|         tent        | 84.65 | 96.95 |
|         bag         | 14.58 | 17.74 |
|       minibike      | 67.22 | 83.56 |
|        cradle       | 81.82 | 96.78 |
|         oven        | 21.49 | 59.18 |
|         ball        | 29.33 | 57.72 |
|         food        | 51.35 | 57.89 |
|         step        |  10.6 | 20.64 |
|         tank        | 22.55 | 23.35 |
|      trade name     |  17.0 | 19.61 |
|      microwave      |  38.3 | 41.06 |
|         pot         | 44.19 | 50.66 |
|        animal       | 64.81 | 72.86 |
|       bicycle       |  57.6 | 75.06 |
|         lake        |  0.05 |  0.05 |
|      dishwasher     | 56.36 | 75.97 |
|        screen       | 58.03 | 62.29 |
|       blanket       | 12.06 | 18.36 |
|      sculpture      | 37.06 | 52.52 |
|         hood        | 72.86 | 82.41 |
|        sconce       | 45.45 | 60.24 |
|         vase        | 33.78 | 50.47 |
|    traffic light    | 27.48 | 57.08 |
|         tray        |  9.31 | 15.81 |
|        ashcan       | 38.71 | 47.73 |
|         fan         | 54.63 | 76.21 |
|         pier        | 11.77 | 25.57 |
|      crt screen     |  0.39 |  1.23 |
|        plate        |  37.3 | 45.01 |
|       monitor       |  0.23 |  0.34 |
|    bulletin board   | 39.05 | 50.34 |
|        shower       |  6.6  | 18.99 |
|       radiator      | 39.12 | 52.69 |
|        glass        | 18.14 | 21.27 |
|        clock        | 31.35 | 34.53 |
|         flag        | 32.43 | 36.62 |
+---------------------+-------+-------+
09/21 06:16:29 - mmengine - INFO - Iter(test) [2000/2000]    aAcc: 80.5800  mIoU: 43.6200  mAcc: 56.3900  data_time: 0.0015  time: 0.1405
Finished processing corruption type: contrast
Processing corruption type: elastic_transform
09/21 06:16:33 - mmengine - INFO - 
------------------------------------------------------------
System environment:
    sys.platform: linux
    Python: 3.10.13 | packaged by conda-forge | (main, Dec 23 2023, 15:36:39) [GCC 12.3.0]
    CUDA available: True
    MUSA available: False
    numpy_random_seed: 2039893423
    GPU 0: Tesla V100-SXM2-32GB
    CUDA_HOME: /opt/bwhpc/common/devel/cuda/11.7
    NVCC: Cuda compilation tools, release 11.7, V11.7.99
    GCC: gcc (GCC) 8.5.0 20210514 (Red Hat 8.5.0-18)
    PyTorch: 1.13.1
    PyTorch compiling details: PyTorch built with:
  - GCC 9.3
  - C++ Version: 201402
  - Intel(R) oneAPI Math Kernel Library Version 2023.1-Product Build 20230303 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v2.6.0 (Git Hash 52b5f107dd9cf10910aaa19cb47f3abf9b349815)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - LAPACK is enabled (usually provided by MKL)
  - NNPACK is enabled
  - CPU capability usage: AVX2
  - CUDA Runtime 11.7
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_61,code=sm_61;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86;-gencode;arch=compute_37,code=compute_37
  - CuDNN 8.5
  - Magma 2.6.1
  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.7, CUDNN_VERSION=8.5.0, CXX_COMPILER=/opt/rh/devtoolset-9/root/usr/bin/c++, CXX_FLAGS= -fabi-version=11 -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -DEDGE_PROFILER_USE_KINETO -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Werror=non-virtual-dtor -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wunused-local-typedefs -Wno-unused-parameter -Wno-unused-function -Wno-unused-result -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Werror=cast-function-type -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.13.1, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, USE_ROCM=OFF, 

    TorchVision: 0.14.1
    OpenCV: 3.4.18
    MMEngine: 0.10.4

Runtime environment:
    cudnn_benchmark: True
    mp_cfg: {'mp_start_method': 'fork', 'opencv_num_threads': 0}
    dist_cfg: {'backend': 'nccl'}
    seed: 2039893423
    Distributed launcher: none
    Distributed training: False
    GPU number: 1
------------------------------------------------------------

09/21 06:16:33 - mmengine - INFO - Config:
auto_scale_lr = dict(base_batch_size=16, enable=False)
crop_size = (
    512,
    512,
)
custom_imports = dict(allow_failed_imports=False, imports='mmdet.models')
data_root = 'data/ade/ADEChallengeData2016'
dataset_type = 'ADE20KDataset'
default_hooks = dict(
    checkpoint=dict(
        by_epoch=False, interval=5000, save_best='mIoU',
        type='CheckpointHook'),
    logger=dict(interval=50, log_metric_by_epoch=False, type='LoggerHook'),
    param_scheduler=dict(type='ParamSchedulerHook'),
    sampler_seed=dict(type='DistSamplerSeedHook'),
    timer=dict(type='IterTimerHook'),
    visualization=dict(type='SegVisualizationHook'))
default_scope = 'mmseg'
embed_multi = dict(decay_mult=0.0, lr_mult=1.0)
env_cfg = dict(
    cudnn_benchmark=True,
    dist_cfg=dict(backend='nccl'),
    mp_cfg=dict(mp_start_method='fork', opencv_num_threads=0))
img_ratios = [
    0.5,
    0.75,
    1.0,
    1.25,
    1.5,
    1.75,
]
launcher = 'none'
load_from = '../checkpoint_files/ade20k/mask2former/mask2former_r50_8xb2-160k_ade20k-512x512_20221204_000055-2d1f55f1.pth'
log_level = 'INFO'
log_processor = dict(by_epoch=False)
model = dict(
    backbone=dict(
        deep_stem=False,
        depth=50,
        frozen_stages=-1,
        init_cfg=dict(checkpoint='torchvision://resnet50', type='Pretrained'),
        norm_cfg=dict(requires_grad=False, type='SyncBN'),
        num_stages=4,
        out_indices=(
            0,
            1,
            2,
            3,
        ),
        style='pytorch',
        type='ResNet'),
    data_preprocessor=dict(
        bgr_to_rgb=True,
        corruption='elastic_transform',
        mean=[
            123.675,
            116.28,
            103.53,
        ],
        pad_val=0,
        seg_pad_val=255,
        size=(
            512,
            512,
        ),
        std=[
            58.395,
            57.12,
            57.375,
        ],
        test_cfg=dict(size_divisor=32),
        type='SegDataPreProcessor'),
    decode_head=dict(
        align_corners=False,
        enforce_decoder_input_project=False,
        feat_channels=256,
        in_channels=[
            256,
            512,
            1024,
            2048,
        ],
        loss_cls=dict(
            class_weight=[
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                0.1,
            ],
            loss_weight=2.0,
            reduction='mean',
            type='mmdet.CrossEntropyLoss',
            use_sigmoid=False),
        loss_dice=dict(
            activate=True,
            eps=1.0,
            loss_weight=5.0,
            naive_dice=True,
            reduction='mean',
            type='mmdet.DiceLoss',
            use_sigmoid=True),
        loss_mask=dict(
            loss_weight=5.0,
            reduction='mean',
            type='mmdet.CrossEntropyLoss',
            use_sigmoid=True),
        num_classes=150,
        num_queries=100,
        num_transformer_feat_level=3,
        out_channels=256,
        pixel_decoder=dict(
            act_cfg=dict(type='ReLU'),
            encoder=dict(
                init_cfg=None,
                layer_cfg=dict(
                    ffn_cfg=dict(
                        act_cfg=dict(inplace=True, type='ReLU'),
                        embed_dims=256,
                        feedforward_channels=1024,
                        ffn_drop=0.0,
                        num_fcs=2),
                    self_attn_cfg=dict(
                        batch_first=True,
                        dropout=0.0,
                        embed_dims=256,
                        im2col_step=64,
                        init_cfg=None,
                        norm_cfg=None,
                        num_heads=8,
                        num_levels=3,
                        num_points=4)),
                num_layers=6),
            init_cfg=None,
            norm_cfg=dict(num_groups=32, type='GN'),
            num_outs=3,
            positional_encoding=dict(normalize=True, num_feats=128),
            type='mmdet.MSDeformAttnPixelDecoder'),
        positional_encoding=dict(normalize=True, num_feats=128),
        strides=[
            4,
            8,
            16,
            32,
        ],
        train_cfg=dict(
            assigner=dict(
                match_costs=[
                    dict(type='mmdet.ClassificationCost', weight=2.0),
                    dict(
                        type='mmdet.CrossEntropyLossCost',
                        use_sigmoid=True,
                        weight=5.0),
                    dict(
                        eps=1.0,
                        pred_act=True,
                        type='mmdet.DiceCost',
                        weight=5.0),
                ],
                type='mmdet.HungarianAssigner'),
            importance_sample_ratio=0.75,
            num_points=12544,
            oversample_ratio=3.0,
            sampler=dict(type='mmdet.MaskPseudoSampler')),
        transformer_decoder=dict(
            init_cfg=None,
            layer_cfg=dict(
                cross_attn_cfg=dict(
                    attn_drop=0.0,
                    batch_first=True,
                    dropout_layer=None,
                    embed_dims=256,
                    num_heads=8,
                    proj_drop=0.0),
                ffn_cfg=dict(
                    act_cfg=dict(inplace=True, type='ReLU'),
                    add_identity=True,
                    dropout_layer=None,
                    embed_dims=256,
                    feedforward_channels=2048,
                    ffn_drop=0.0,
                    num_fcs=2),
                self_attn_cfg=dict(
                    attn_drop=0.0,
                    batch_first=True,
                    dropout_layer=None,
                    embed_dims=256,
                    num_heads=8,
                    proj_drop=0.0)),
            num_layers=9,
            return_intermediate=True),
        type='Mask2FormerHead'),
    test_cfg=dict(mode='whole'),
    train_cfg=dict(),
    type='EncoderDecoder')
num_classes = 150
optim_wrapper = dict(
    clip_grad=dict(max_norm=0.01, norm_type=2),
    optimizer=dict(
        betas=(
            0.9,
            0.999,
        ),
        eps=1e-08,
        lr=0.0001,
        type='AdamW',
        weight_decay=0.05),
    paramwise_cfg=dict(
        custom_keys=dict(
            backbone=dict(decay_mult=1.0, lr_mult=0.1),
            level_embed=dict(decay_mult=0.0, lr_mult=1.0),
            query_embed=dict(decay_mult=0.0, lr_mult=1.0),
            query_feat=dict(decay_mult=0.0, lr_mult=1.0)),
        norm_decay_mult=0.0),
    type='OptimWrapper')
optimizer = dict(
    betas=(
        0.9,
        0.999,
    ),
    eps=1e-08,
    lr=0.0001,
    type='AdamW',
    weight_decay=0.05)
param_scheduler = [
    dict(
        begin=0,
        by_epoch=False,
        end=160000,
        eta_min=0,
        power=0.9,
        type='PolyLR'),
]
resume = False
test_cfg = dict(type='TestLoop')
test_dataloader = dict(
    batch_size=1,
    dataset=dict(
        data_prefix=dict(
            img_path='images/validation',
            seg_map_path='annotations/validation'),
        data_root='data/ade/ADEChallengeData2016',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(keep_ratio=True, scale=(
                2048,
                512,
            ), type='Resize'),
            dict(reduce_zero_label=True, type='LoadAnnotations'),
            dict(type='PackSegInputs'),
        ],
        type='ADE20KDataset'),
    num_workers=4,
    persistent_workers=True,
    sampler=dict(shuffle=False, type='DefaultSampler'))
test_evaluator = dict(
    iou_metrics=[
        'mIoU',
    ], type='IoUMetric')
test_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(keep_ratio=True, scale=(
        2048,
        512,
    ), type='Resize'),
    dict(reduce_zero_label=True, type='LoadAnnotations'),
    dict(type='PackSegInputs'),
]
train_cfg = dict(
    max_iters=160000, type='IterBasedTrainLoop', val_interval=5000)
train_dataloader = dict(
    batch_size=2,
    dataset=dict(
        data_prefix=dict(
            img_path='images/training', seg_map_path='annotations/training'),
        data_root='data/ade/ADEChallengeData2016',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(reduce_zero_label=True, type='LoadAnnotations'),
            dict(
                max_size=2048,
                resize_type='ResizeShortestEdge',
                scales=[
                    256,
                    307,
                    358,
                    409,
                    460,
                    512,
                    563,
                    614,
                    665,
                    716,
                    768,
                    819,
                    870,
                    921,
                    972,
                    1024,
                ],
                type='RandomChoiceResize'),
            dict(
                cat_max_ratio=0.75, crop_size=(
                    512,
                    512,
                ), type='RandomCrop'),
            dict(prob=0.5, type='RandomFlip'),
            dict(type='PhotoMetricDistortion'),
            dict(type='PackSegInputs'),
        ],
        type='ADE20KDataset'),
    num_workers=4,
    persistent_workers=True,
    sampler=dict(shuffle=True, type='InfiniteSampler'))
train_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(reduce_zero_label=True, type='LoadAnnotations'),
    dict(
        max_size=2048,
        resize_type='ResizeShortestEdge',
        scales=[
            256,
            307,
            358,
            409,
            460,
            512,
            563,
            614,
            665,
            716,
            768,
            819,
            870,
            921,
            972,
            1024,
        ],
        type='RandomChoiceResize'),
    dict(cat_max_ratio=0.75, crop_size=(
        512,
        512,
    ), type='RandomCrop'),
    dict(prob=0.5, type='RandomFlip'),
    dict(type='PhotoMetricDistortion'),
    dict(type='PackSegInputs'),
]
tta_model = dict(type='SegTTAModel')
tta_pipeline = [
    dict(backend_args=None, type='LoadImageFromFile'),
    dict(
        transforms=[
            [
                dict(keep_ratio=True, scale_factor=0.5, type='Resize'),
                dict(keep_ratio=True, scale_factor=0.75, type='Resize'),
                dict(keep_ratio=True, scale_factor=1.0, type='Resize'),
                dict(keep_ratio=True, scale_factor=1.25, type='Resize'),
                dict(keep_ratio=True, scale_factor=1.5, type='Resize'),
                dict(keep_ratio=True, scale_factor=1.75, type='Resize'),
            ],
            [
                dict(direction='horizontal', prob=0.0, type='RandomFlip'),
                dict(direction='horizontal', prob=1.0, type='RandomFlip'),
            ],
            [
                dict(type='LoadAnnotations'),
            ],
            [
                dict(type='PackSegInputs'),
            ],
        ],
        type='TestTimeAug'),
]
val_cfg = dict(type='ValLoop')
val_dataloader = dict(
    batch_size=1,
    dataset=dict(
        data_prefix=dict(
            img_path='images/validation',
            seg_map_path='annotations/validation'),
        data_root='data/ade/ADEChallengeData2016',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(keep_ratio=True, scale=(
                2048,
                512,
            ), type='Resize'),
            dict(reduce_zero_label=True, type='LoadAnnotations'),
            dict(type='PackSegInputs'),
        ],
        type='ADE20KDataset'),
    num_workers=4,
    persistent_workers=True,
    sampler=dict(shuffle=False, type='DefaultSampler'))
val_evaluator = dict(
    iou_metrics=[
        'mIoU',
    ], type='IoUMetric')
vis_backends = [
    dict(type='LocalVisBackend'),
]
visualizer = dict(
    name='visualizer',
    type='SegLocalVisualizer',
    vis_backends=[
        dict(type='LocalVisBackend'),
    ])
work_dir = '../corruptions/work_dirs/ade20k/mask2former/mask2former_r50_8xb2-160k_ade20k-512x512/elastic_transform'

09/21 06:16:36 - mmengine - INFO - Distributed training is not used, all SyncBatchNorm (SyncBN) layers in the model will be automatically reverted to BatchNormXd layers if they are used.
09/21 06:16:36 - mmengine - INFO - Hooks will be executed in the following order:
before_run:
(VERY_HIGH   ) RuntimeInfoHook                    
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
before_train:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_train_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(NORMAL      ) DistSamplerSeedHook                
 -------------------- 
before_train_iter:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_train_iter:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(NORMAL      ) SegVisualizationHook               
(BELOW_NORMAL) LoggerHook                         
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
after_train_epoch:
(NORMAL      ) IterTimerHook                      
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_val:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
before_val_epoch:
(NORMAL      ) IterTimerHook                      
 -------------------- 
before_val_iter:
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_val_iter:
(NORMAL      ) IterTimerHook                      
(NORMAL      ) SegVisualizationHook               
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_val_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
after_val:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
after_train:
(VERY_HIGH   ) RuntimeInfoHook                    
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_test:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
before_test_epoch:
(NORMAL      ) IterTimerHook                      
 -------------------- 
before_test_iter:
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_test_iter:
(NORMAL      ) IterTimerHook                      
(NORMAL      ) SegVisualizationHook               
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_test_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_test:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
after_run:
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
09/21 06:16:36 - mmengine - WARNING - The prefix is not set in metric class IoUMetric.
Loads checkpoint by local backend from path: ../checkpoint_files/ade20k/mask2former/mask2former_r50_8xb2-160k_ade20k-512x512_20221204_000055-2d1f55f1.pth
09/21 06:16:37 - mmengine - INFO - Load checkpoint from ../checkpoint_files/ade20k/mask2former/mask2former_r50_8xb2-160k_ade20k-512x512_20221204_000055-2d1f55f1.pth
09/21 06:18:27 - mmengine - INFO - Iter(test) [  50/2000]    eta: 1:11:46  time: 1.8870  data_time: 0.0014  memory: 17167  
09/21 06:19:28 - mmengine - INFO - Iter(test) [ 100/2000]    eta: 0:54:18  time: 1.4939  data_time: 0.0015  memory: 17158  
09/21 06:20:16 - mmengine - INFO - Iter(test) [ 150/2000]    eta: 0:45:03  time: 1.0086  data_time: 0.0015  memory: 872  
09/21 06:21:14 - mmengine - INFO - Iter(test) [ 200/2000]    eta: 0:41:38  time: 0.9344  data_time: 0.0014  memory: 17214  
09/21 06:22:06 - mmengine - INFO - Iter(test) [ 250/2000]    eta: 0:38:23  time: 0.9180  data_time: 0.0014  memory: 17221  
09/21 06:22:57 - mmengine - INFO - Iter(test) [ 300/2000]    eta: 0:35:52  time: 0.9577  data_time: 0.0015  memory: 17162  
09/21 06:23:52 - mmengine - INFO - Iter(test) [ 350/2000]    eta: 0:34:12  time: 0.8880  data_time: 0.0013  memory: 17165  
09/21 06:24:42 - mmengine - INFO - Iter(test) [ 400/2000]    eta: 0:32:22  time: 0.9507  data_time: 0.0013  memory: 17147  
09/21 06:25:25 - mmengine - INFO - Iter(test) [ 450/2000]    eta: 0:30:17  time: 0.8531  data_time: 0.0014  memory: 883  
09/21 06:26:11 - mmengine - INFO - Iter(test) [ 500/2000]    eta: 0:28:42  time: 0.9013  data_time: 0.0014  memory: 872  
09/21 06:27:00 - mmengine - INFO - Iter(test) [ 550/2000]    eta: 0:27:22  time: 0.9721  data_time: 0.0015  memory: 983  
09/21 06:27:46 - mmengine - INFO - Iter(test) [ 600/2000]    eta: 0:26:01  time: 0.9561  data_time: 0.0015  memory: 981  
09/21 06:28:37 - mmengine - INFO - Iter(test) [ 650/2000]    eta: 0:24:56  time: 1.4210  data_time: 0.0013  memory: 17168  
09/21 06:29:31 - mmengine - INFO - Iter(test) [ 700/2000]    eta: 0:23:58  time: 0.9710  data_time: 0.0015  memory: 17163  
09/21 06:30:19 - mmengine - INFO - Iter(test) [ 750/2000]    eta: 0:22:50  time: 0.9062  data_time: 0.0013  memory: 1039  
09/21 06:31:03 - mmengine - INFO - Iter(test) [ 800/2000]    eta: 0:21:38  time: 0.9359  data_time: 0.0015  memory: 872  
09/21 06:31:50 - mmengine - INFO - Iter(test) [ 850/2000]    eta: 0:20:34  time: 0.9444  data_time: 0.0015  memory: 844  
09/21 06:32:32 - mmengine - INFO - Iter(test) [ 900/2000]    eta: 0:19:27  time: 0.8305  data_time: 0.0014  memory: 925  
09/21 06:33:20 - mmengine - INFO - Iter(test) [ 950/2000]    eta: 0:18:28  time: 0.9074  data_time: 0.0014  memory: 955  
09/21 06:34:04 - mmengine - INFO - Iter(test) [1000/2000]    eta: 0:17:27  time: 0.8914  data_time: 0.0014  memory: 955  
09/21 06:34:57 - mmengine - INFO - Iter(test) [1050/2000]    eta: 0:16:35  time: 0.9615  data_time: 0.0014  memory: 17170  
09/21 06:35:43 - mmengine - INFO - Iter(test) [1100/2000]    eta: 0:15:38  time: 0.9348  data_time: 0.0015  memory: 952  
09/21 06:36:29 - mmengine - INFO - Iter(test) [1150/2000]    eta: 0:14:41  time: 0.9285  data_time: 0.0014  memory: 924  
09/21 06:37:16 - mmengine - INFO - Iter(test) [1200/2000]    eta: 0:13:46  time: 0.9306  data_time: 0.0014  memory: 1829  
09/21 06:38:08 - mmengine - INFO - Iter(test) [1250/2000]    eta: 0:12:54  time: 0.9246  data_time: 0.0014  memory: 17158  
09/21 06:38:55 - mmengine - INFO - Iter(test) [1300/2000]    eta: 0:12:00  time: 0.9600  data_time: 0.0014  memory: 872  
09/21 06:39:44 - mmengine - INFO - Iter(test) [1350/2000]    eta: 0:11:07  time: 0.9672  data_time: 0.0013  memory: 872  
09/21 06:40:31 - mmengine - INFO - Iter(test) [1400/2000]    eta: 0:10:14  time: 1.0157  data_time: 0.0014  memory: 953  
09/21 06:41:17 - mmengine - INFO - Iter(test) [1450/2000]    eta: 0:09:21  time: 1.0461  data_time: 0.0014  memory: 955  
09/21 06:42:04 - mmengine - INFO - Iter(test) [1500/2000]    eta: 0:08:29  time: 0.8771  data_time: 0.0013  memory: 869  
09/21 06:42:55 - mmengine - INFO - Iter(test) [1550/2000]    eta: 0:07:38  time: 1.0135  data_time: 0.0014  memory: 955  
09/21 06:43:43 - mmengine - INFO - Iter(test) [1600/2000]    eta: 0:06:46  time: 0.9290  data_time: 0.0015  memory: 844  
09/21 06:44:33 - mmengine - INFO - Iter(test) [1650/2000]    eta: 0:05:55  time: 0.8787  data_time: 0.0013  memory: 17165  
09/21 06:45:21 - mmengine - INFO - Iter(test) [1700/2000]    eta: 0:05:04  time: 0.9316  data_time: 0.0014  memory: 952  
09/21 06:46:09 - mmengine - INFO - Iter(test) [1750/2000]    eta: 0:04:13  time: 0.9214  data_time: 0.0013  memory: 980  
09/21 06:46:55 - mmengine - INFO - Iter(test) [1800/2000]    eta: 0:03:22  time: 0.9389  data_time: 0.0015  memory: 872  
09/21 06:47:42 - mmengine - INFO - Iter(test) [1850/2000]    eta: 0:02:31  time: 0.9269  data_time: 0.0018  memory: 787  
09/21 06:48:26 - mmengine - INFO - Iter(test) [1900/2000]    eta: 0:01:40  time: 0.9389  data_time: 0.0014  memory: 1011  
09/21 06:49:13 - mmengine - INFO - Iter(test) [1950/2000]    eta: 0:00:50  time: 0.9480  data_time: 0.0014  memory: 1258  
09/21 06:49:57 - mmengine - INFO - Iter(test) [2000/2000]    eta: 0:00:00  time: 0.8447  data_time: 0.0012  memory: 1037  
09/21 06:49:57 - mmengine - INFO - per class results:
09/21 06:49:57 - mmengine - INFO - 
+---------------------+-------+-------+
|        Class        |  IoU  |  Acc  |
+---------------------+-------+-------+
|         wall        | 61.56 | 76.65 |
|       building      | 72.98 | 85.71 |
|         sky         | 83.52 | 90.76 |
|        floor        | 67.82 | 80.96 |
|         tree        | 61.28 | 75.19 |
|       ceiling       | 68.28 | 82.79 |
|         road        | 73.89 | 83.01 |
|         bed         |  74.3 | 85.83 |
|      windowpane     | 46.18 | 65.27 |
|        grass        | 63.54 | 78.32 |
|       cabinet       | 45.67 | 60.79 |
|       sidewalk      | 53.93 | 69.23 |
|        person       |  59.0 | 73.16 |
|        earth        | 33.36 | 44.27 |
|         door        | 38.94 | 56.97 |
|        table        | 39.39 | 56.85 |
|       mountain      | 49.85 | 67.89 |
|        plant        | 41.15 | 56.39 |
|       curtain       | 52.14 | 68.46 |
|        chair        | 39.01 | 55.26 |
|         car         | 60.55 | 74.14 |
|        water        | 38.82 | 52.97 |
|       painting      | 45.85 | 65.18 |
|         sofa        | 52.05 | 73.99 |
|        shelf        | 33.53 | 56.48 |
|        house        | 38.29 | 57.01 |
|         sea         | 40.02 | 61.61 |
|        mirror       | 48.07 | 64.14 |
|         rug         | 48.01 |  65.3 |
|        field        | 30.72 | 49.87 |
|       armchair      | 32.37 | 44.73 |
|         seat        | 48.83 | 79.58 |
|        fence        | 28.77 | 44.29 |
|         desk        | 35.16 | 53.42 |
|         rock        | 40.81 | 64.46 |
|       wardrobe      |  38.8 | 51.83 |
|         lamp        | 29.99 | 45.58 |
|       bathtub       | 58.33 | 76.14 |
|       railing       | 21.98 | 36.87 |
|       cushion       | 33.33 | 47.32 |
|         base        | 24.13 | 44.27 |
|         box         | 15.68 | 23.29 |
|        column       | 29.26 | 43.35 |
|      signboard      |  22.5 | 35.48 |
|   chest of drawers  | 26.54 | 49.43 |
|       counter       | 31.42 | 36.35 |
|         sand        | 23.81 | 43.21 |
|         sink        | 47.16 | 63.32 |
|      skyscraper     | 38.63 | 49.58 |
|      fireplace      | 49.78 | 69.44 |
|     refrigerator    | 55.13 | 66.43 |
|      grandstand     | 36.14 | 66.45 |
|         path        | 21.57 | 33.38 |
|        stairs       |  21.2 | 27.83 |
|        runway       | 67.03 |  88.1 |
|         case        | 47.39 | 71.21 |
|      pool table     |  76.2 | 86.45 |
|        pillow       | 39.27 | 55.05 |
|     screen door     | 54.55 | 77.88 |
|       stairway      | 23.65 | 35.98 |
|        river        |  9.45 | 23.83 |
|        bridge       | 44.62 | 70.78 |
|       bookcase      | 24.91 | 41.61 |
|        blind        | 33.94 | 40.53 |
|     coffee table    | 45.42 | 68.14 |
|        toilet       | 53.14 | 66.92 |
|        flower       | 23.52 | 32.59 |
|         book        | 31.77 | 51.12 |
|         hill        |  6.58 |  9.8  |
|        bench        | 27.24 |  37.7 |
|      countertop     | 28.55 | 45.26 |
|        stove        | 59.98 | 72.97 |
|         palm        | 34.14 | 58.26 |
|    kitchen island   | 21.89 | 51.63 |
|       computer      | 47.89 | 57.66 |
|     swivel chair    | 27.94 | 44.28 |
|         boat        | 37.15 | 48.19 |
|         bar         | 40.44 | 53.48 |
|    arcade machine   | 20.22 | 43.71 |
|        hovel        | 28.11 | 33.29 |
|         bus         | 74.13 | 85.32 |
|        towel        | 39.06 |  54.1 |
|        light        | 14.64 | 25.68 |
|        truck        | 22.22 | 48.61 |
|        tower        | 22.61 | 40.35 |
|      chandelier     | 40.28 | 55.24 |
|        awning       | 13.59 | 18.91 |
|     streetlight     | 10.31 | 17.14 |
|        booth        | 55.22 | 68.42 |
| television receiver | 43.02 | 61.03 |
|       airplane      |  34.6 | 48.84 |
|      dirt track     |  4.25 | 18.89 |
|       apparel       | 22.12 | 47.23 |
|         pole        | 11.78 | 20.78 |
|         land        |  4.71 |  8.78 |
|      bannister      | 11.09 | 19.81 |
|      escalator      | 39.61 | 54.94 |
|       ottoman       | 25.91 | 46.61 |
|        bottle       |  8.27 | 12.01 |
|        buffet       | 28.99 | 33.14 |
|        poster       | 23.08 | 35.77 |
|        stage        | 10.88 | 16.29 |
|         van         | 32.47 | 49.99 |
|         ship        | 45.32 | 83.53 |
|       fountain      | 20.58 | 21.21 |
|    conveyer belt    | 42.83 | 60.93 |
|        canopy       | 14.32 | 25.31 |
|        washer       | 61.56 | 64.36 |
|      plaything      | 13.15 | 22.15 |
|    swimming pool    | 16.21 | 43.83 |
|        stool        | 23.78 | 45.35 |
|        barrel       | 29.71 | 72.69 |
|        basket       | 17.31 | 24.92 |
|      waterfall      | 51.61 | 80.66 |
|         tent        | 80.32 | 94.74 |
|         bag         | 13.06 | 18.56 |
|       minibike      | 40.11 |  65.4 |
|        cradle       | 65.85 | 84.56 |
|         oven        | 16.78 | 50.17 |
|         ball        | 33.54 | 47.48 |
|         food        | 48.49 | 64.34 |
|         step        | 10.27 | 15.75 |
|         tank        | 43.19 | 47.07 |
|      trade name     | 18.48 | 23.76 |
|      microwave      | 29.66 | 34.87 |
|         pot         | 31.78 | 44.07 |
|        animal       | 48.25 | 58.39 |
|       bicycle       | 38.07 | 54.72 |
|         lake        |  4.99 |  5.16 |
|      dishwasher     | 61.19 | 70.75 |
|        screen       | 54.03 | 62.76 |
|       blanket       | 12.28 | 19.87 |
|      sculpture      | 32.57 | 56.73 |
|         hood        | 53.83 | 74.71 |
|        sconce       | 17.92 | 32.55 |
|         vase        | 17.72 | 33.06 |
|    traffic light    | 11.98 | 26.82 |
|         tray        |  6.07 | 13.81 |
|        ashcan       | 19.28 | 33.56 |
|         fan         | 26.85 |  44.2 |
|         pier        | 35.08 | 47.04 |
|      crt screen     |  7.88 | 25.44 |
|        plate        | 19.16 | 28.02 |
|       monitor       |  5.57 |  6.41 |
|    bulletin board   | 20.95 | 26.44 |
|        shower       |  2.58 |  7.29 |
|       radiator      | 31.99 |  42.7 |
|        glass        |  8.87 | 11.98 |
|        clock        | 12.28 | 17.51 |
|         flag        | 15.72 | 21.29 |
+---------------------+-------+-------+
09/21 06:49:57 - mmengine - INFO - Iter(test) [2000/2000]    aAcc: 72.9400  mIoU: 35.0300  mAcc: 49.6100  data_time: 0.0016  time: 1.0002
Finished processing corruption type: elastic_transform
Processing corruption type: pixelate
09/21 06:50:01 - mmengine - INFO - 
------------------------------------------------------------
System environment:
    sys.platform: linux
    Python: 3.10.13 | packaged by conda-forge | (main, Dec 23 2023, 15:36:39) [GCC 12.3.0]
    CUDA available: True
    MUSA available: False
    numpy_random_seed: 508811922
    GPU 0: Tesla V100-SXM2-32GB
    CUDA_HOME: /opt/bwhpc/common/devel/cuda/11.7
    NVCC: Cuda compilation tools, release 11.7, V11.7.99
    GCC: gcc (GCC) 8.5.0 20210514 (Red Hat 8.5.0-18)
    PyTorch: 1.13.1
    PyTorch compiling details: PyTorch built with:
  - GCC 9.3
  - C++ Version: 201402
  - Intel(R) oneAPI Math Kernel Library Version 2023.1-Product Build 20230303 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v2.6.0 (Git Hash 52b5f107dd9cf10910aaa19cb47f3abf9b349815)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - LAPACK is enabled (usually provided by MKL)
  - NNPACK is enabled
  - CPU capability usage: AVX2
  - CUDA Runtime 11.7
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_61,code=sm_61;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86;-gencode;arch=compute_37,code=compute_37
  - CuDNN 8.5
  - Magma 2.6.1
  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.7, CUDNN_VERSION=8.5.0, CXX_COMPILER=/opt/rh/devtoolset-9/root/usr/bin/c++, CXX_FLAGS= -fabi-version=11 -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -DEDGE_PROFILER_USE_KINETO -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Werror=non-virtual-dtor -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wunused-local-typedefs -Wno-unused-parameter -Wno-unused-function -Wno-unused-result -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Werror=cast-function-type -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.13.1, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, USE_ROCM=OFF, 

    TorchVision: 0.14.1
    OpenCV: 3.4.18
    MMEngine: 0.10.4

Runtime environment:
    cudnn_benchmark: True
    mp_cfg: {'mp_start_method': 'fork', 'opencv_num_threads': 0}
    dist_cfg: {'backend': 'nccl'}
    seed: 508811922
    Distributed launcher: none
    Distributed training: False
    GPU number: 1
------------------------------------------------------------

09/21 06:50:02 - mmengine - INFO - Config:
auto_scale_lr = dict(base_batch_size=16, enable=False)
crop_size = (
    512,
    512,
)
custom_imports = dict(allow_failed_imports=False, imports='mmdet.models')
data_root = 'data/ade/ADEChallengeData2016'
dataset_type = 'ADE20KDataset'
default_hooks = dict(
    checkpoint=dict(
        by_epoch=False, interval=5000, save_best='mIoU',
        type='CheckpointHook'),
    logger=dict(interval=50, log_metric_by_epoch=False, type='LoggerHook'),
    param_scheduler=dict(type='ParamSchedulerHook'),
    sampler_seed=dict(type='DistSamplerSeedHook'),
    timer=dict(type='IterTimerHook'),
    visualization=dict(type='SegVisualizationHook'))
default_scope = 'mmseg'
embed_multi = dict(decay_mult=0.0, lr_mult=1.0)
env_cfg = dict(
    cudnn_benchmark=True,
    dist_cfg=dict(backend='nccl'),
    mp_cfg=dict(mp_start_method='fork', opencv_num_threads=0))
img_ratios = [
    0.5,
    0.75,
    1.0,
    1.25,
    1.5,
    1.75,
]
launcher = 'none'
load_from = '../checkpoint_files/ade20k/mask2former/mask2former_r50_8xb2-160k_ade20k-512x512_20221204_000055-2d1f55f1.pth'
log_level = 'INFO'
log_processor = dict(by_epoch=False)
model = dict(
    backbone=dict(
        deep_stem=False,
        depth=50,
        frozen_stages=-1,
        init_cfg=dict(checkpoint='torchvision://resnet50', type='Pretrained'),
        norm_cfg=dict(requires_grad=False, type='SyncBN'),
        num_stages=4,
        out_indices=(
            0,
            1,
            2,
            3,
        ),
        style='pytorch',
        type='ResNet'),
    data_preprocessor=dict(
        bgr_to_rgb=True,
        corruption='pixelate',
        mean=[
            123.675,
            116.28,
            103.53,
        ],
        pad_val=0,
        seg_pad_val=255,
        size=(
            512,
            512,
        ),
        std=[
            58.395,
            57.12,
            57.375,
        ],
        test_cfg=dict(size_divisor=32),
        type='SegDataPreProcessor'),
    decode_head=dict(
        align_corners=False,
        enforce_decoder_input_project=False,
        feat_channels=256,
        in_channels=[
            256,
            512,
            1024,
            2048,
        ],
        loss_cls=dict(
            class_weight=[
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                0.1,
            ],
            loss_weight=2.0,
            reduction='mean',
            type='mmdet.CrossEntropyLoss',
            use_sigmoid=False),
        loss_dice=dict(
            activate=True,
            eps=1.0,
            loss_weight=5.0,
            naive_dice=True,
            reduction='mean',
            type='mmdet.DiceLoss',
            use_sigmoid=True),
        loss_mask=dict(
            loss_weight=5.0,
            reduction='mean',
            type='mmdet.CrossEntropyLoss',
            use_sigmoid=True),
        num_classes=150,
        num_queries=100,
        num_transformer_feat_level=3,
        out_channels=256,
        pixel_decoder=dict(
            act_cfg=dict(type='ReLU'),
            encoder=dict(
                init_cfg=None,
                layer_cfg=dict(
                    ffn_cfg=dict(
                        act_cfg=dict(inplace=True, type='ReLU'),
                        embed_dims=256,
                        feedforward_channels=1024,
                        ffn_drop=0.0,
                        num_fcs=2),
                    self_attn_cfg=dict(
                        batch_first=True,
                        dropout=0.0,
                        embed_dims=256,
                        im2col_step=64,
                        init_cfg=None,
                        norm_cfg=None,
                        num_heads=8,
                        num_levels=3,
                        num_points=4)),
                num_layers=6),
            init_cfg=None,
            norm_cfg=dict(num_groups=32, type='GN'),
            num_outs=3,
            positional_encoding=dict(normalize=True, num_feats=128),
            type='mmdet.MSDeformAttnPixelDecoder'),
        positional_encoding=dict(normalize=True, num_feats=128),
        strides=[
            4,
            8,
            16,
            32,
        ],
        train_cfg=dict(
            assigner=dict(
                match_costs=[
                    dict(type='mmdet.ClassificationCost', weight=2.0),
                    dict(
                        type='mmdet.CrossEntropyLossCost',
                        use_sigmoid=True,
                        weight=5.0),
                    dict(
                        eps=1.0,
                        pred_act=True,
                        type='mmdet.DiceCost',
                        weight=5.0),
                ],
                type='mmdet.HungarianAssigner'),
            importance_sample_ratio=0.75,
            num_points=12544,
            oversample_ratio=3.0,
            sampler=dict(type='mmdet.MaskPseudoSampler')),
        transformer_decoder=dict(
            init_cfg=None,
            layer_cfg=dict(
                cross_attn_cfg=dict(
                    attn_drop=0.0,
                    batch_first=True,
                    dropout_layer=None,
                    embed_dims=256,
                    num_heads=8,
                    proj_drop=0.0),
                ffn_cfg=dict(
                    act_cfg=dict(inplace=True, type='ReLU'),
                    add_identity=True,
                    dropout_layer=None,
                    embed_dims=256,
                    feedforward_channels=2048,
                    ffn_drop=0.0,
                    num_fcs=2),
                self_attn_cfg=dict(
                    attn_drop=0.0,
                    batch_first=True,
                    dropout_layer=None,
                    embed_dims=256,
                    num_heads=8,
                    proj_drop=0.0)),
            num_layers=9,
            return_intermediate=True),
        type='Mask2FormerHead'),
    test_cfg=dict(mode='whole'),
    train_cfg=dict(),
    type='EncoderDecoder')
num_classes = 150
optim_wrapper = dict(
    clip_grad=dict(max_norm=0.01, norm_type=2),
    optimizer=dict(
        betas=(
            0.9,
            0.999,
        ),
        eps=1e-08,
        lr=0.0001,
        type='AdamW',
        weight_decay=0.05),
    paramwise_cfg=dict(
        custom_keys=dict(
            backbone=dict(decay_mult=1.0, lr_mult=0.1),
            level_embed=dict(decay_mult=0.0, lr_mult=1.0),
            query_embed=dict(decay_mult=0.0, lr_mult=1.0),
            query_feat=dict(decay_mult=0.0, lr_mult=1.0)),
        norm_decay_mult=0.0),
    type='OptimWrapper')
optimizer = dict(
    betas=(
        0.9,
        0.999,
    ),
    eps=1e-08,
    lr=0.0001,
    type='AdamW',
    weight_decay=0.05)
param_scheduler = [
    dict(
        begin=0,
        by_epoch=False,
        end=160000,
        eta_min=0,
        power=0.9,
        type='PolyLR'),
]
resume = False
test_cfg = dict(type='TestLoop')
test_dataloader = dict(
    batch_size=1,
    dataset=dict(
        data_prefix=dict(
            img_path='images/validation',
            seg_map_path='annotations/validation'),
        data_root='data/ade/ADEChallengeData2016',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(keep_ratio=True, scale=(
                2048,
                512,
            ), type='Resize'),
            dict(reduce_zero_label=True, type='LoadAnnotations'),
            dict(type='PackSegInputs'),
        ],
        type='ADE20KDataset'),
    num_workers=4,
    persistent_workers=True,
    sampler=dict(shuffle=False, type='DefaultSampler'))
test_evaluator = dict(
    iou_metrics=[
        'mIoU',
    ], type='IoUMetric')
test_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(keep_ratio=True, scale=(
        2048,
        512,
    ), type='Resize'),
    dict(reduce_zero_label=True, type='LoadAnnotations'),
    dict(type='PackSegInputs'),
]
train_cfg = dict(
    max_iters=160000, type='IterBasedTrainLoop', val_interval=5000)
train_dataloader = dict(
    batch_size=2,
    dataset=dict(
        data_prefix=dict(
            img_path='images/training', seg_map_path='annotations/training'),
        data_root='data/ade/ADEChallengeData2016',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(reduce_zero_label=True, type='LoadAnnotations'),
            dict(
                max_size=2048,
                resize_type='ResizeShortestEdge',
                scales=[
                    256,
                    307,
                    358,
                    409,
                    460,
                    512,
                    563,
                    614,
                    665,
                    716,
                    768,
                    819,
                    870,
                    921,
                    972,
                    1024,
                ],
                type='RandomChoiceResize'),
            dict(
                cat_max_ratio=0.75, crop_size=(
                    512,
                    512,
                ), type='RandomCrop'),
            dict(prob=0.5, type='RandomFlip'),
            dict(type='PhotoMetricDistortion'),
            dict(type='PackSegInputs'),
        ],
        type='ADE20KDataset'),
    num_workers=4,
    persistent_workers=True,
    sampler=dict(shuffle=True, type='InfiniteSampler'))
train_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(reduce_zero_label=True, type='LoadAnnotations'),
    dict(
        max_size=2048,
        resize_type='ResizeShortestEdge',
        scales=[
            256,
            307,
            358,
            409,
            460,
            512,
            563,
            614,
            665,
            716,
            768,
            819,
            870,
            921,
            972,
            1024,
        ],
        type='RandomChoiceResize'),
    dict(cat_max_ratio=0.75, crop_size=(
        512,
        512,
    ), type='RandomCrop'),
    dict(prob=0.5, type='RandomFlip'),
    dict(type='PhotoMetricDistortion'),
    dict(type='PackSegInputs'),
]
tta_model = dict(type='SegTTAModel')
tta_pipeline = [
    dict(backend_args=None, type='LoadImageFromFile'),
    dict(
        transforms=[
            [
                dict(keep_ratio=True, scale_factor=0.5, type='Resize'),
                dict(keep_ratio=True, scale_factor=0.75, type='Resize'),
                dict(keep_ratio=True, scale_factor=1.0, type='Resize'),
                dict(keep_ratio=True, scale_factor=1.25, type='Resize'),
                dict(keep_ratio=True, scale_factor=1.5, type='Resize'),
                dict(keep_ratio=True, scale_factor=1.75, type='Resize'),
            ],
            [
                dict(direction='horizontal', prob=0.0, type='RandomFlip'),
                dict(direction='horizontal', prob=1.0, type='RandomFlip'),
            ],
            [
                dict(type='LoadAnnotations'),
            ],
            [
                dict(type='PackSegInputs'),
            ],
        ],
        type='TestTimeAug'),
]
val_cfg = dict(type='ValLoop')
val_dataloader = dict(
    batch_size=1,
    dataset=dict(
        data_prefix=dict(
            img_path='images/validation',
            seg_map_path='annotations/validation'),
        data_root='data/ade/ADEChallengeData2016',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(keep_ratio=True, scale=(
                2048,
                512,
            ), type='Resize'),
            dict(reduce_zero_label=True, type='LoadAnnotations'),
            dict(type='PackSegInputs'),
        ],
        type='ADE20KDataset'),
    num_workers=4,
    persistent_workers=True,
    sampler=dict(shuffle=False, type='DefaultSampler'))
val_evaluator = dict(
    iou_metrics=[
        'mIoU',
    ], type='IoUMetric')
vis_backends = [
    dict(type='LocalVisBackend'),
]
visualizer = dict(
    name='visualizer',
    type='SegLocalVisualizer',
    vis_backends=[
        dict(type='LocalVisBackend'),
    ])
work_dir = '../corruptions/work_dirs/ade20k/mask2former/mask2former_r50_8xb2-160k_ade20k-512x512/pixelate'

09/21 06:50:04 - mmengine - INFO - Distributed training is not used, all SyncBatchNorm (SyncBN) layers in the model will be automatically reverted to BatchNormXd layers if they are used.
09/21 06:50:04 - mmengine - INFO - Hooks will be executed in the following order:
before_run:
(VERY_HIGH   ) RuntimeInfoHook                    
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
before_train:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_train_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(NORMAL      ) DistSamplerSeedHook                
 -------------------- 
before_train_iter:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_train_iter:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(NORMAL      ) SegVisualizationHook               
(BELOW_NORMAL) LoggerHook                         
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
after_train_epoch:
(NORMAL      ) IterTimerHook                      
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_val:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
before_val_epoch:
(NORMAL      ) IterTimerHook                      
 -------------------- 
before_val_iter:
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_val_iter:
(NORMAL      ) IterTimerHook                      
(NORMAL      ) SegVisualizationHook               
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_val_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
after_val:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
after_train:
(VERY_HIGH   ) RuntimeInfoHook                    
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_test:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
before_test_epoch:
(NORMAL      ) IterTimerHook                      
 -------------------- 
before_test_iter:
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_test_iter:
(NORMAL      ) IterTimerHook                      
(NORMAL      ) SegVisualizationHook               
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_test_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_test:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
after_run:
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
09/21 06:50:05 - mmengine - WARNING - The prefix is not set in metric class IoUMetric.
Loads checkpoint by local backend from path: ../checkpoint_files/ade20k/mask2former/mask2former_r50_8xb2-160k_ade20k-512x512_20221204_000055-2d1f55f1.pth
09/21 06:50:05 - mmengine - INFO - Load checkpoint from ../checkpoint_files/ade20k/mask2former/mask2former_r50_8xb2-160k_ade20k-512x512_20221204_000055-2d1f55f1.pth
09/21 06:51:12 - mmengine - INFO - Iter(test) [  50/2000]    eta: 0:43:12  time: 0.9330  data_time: 0.0013  memory: 17167  
09/21 06:51:28 - mmengine - INFO - Iter(test) [ 100/2000]    eta: 0:26:17  time: 0.5247  data_time: 0.0014  memory: 17158  
09/21 06:51:31 - mmengine - INFO - Iter(test) [ 150/2000]    eta: 0:17:38  time: 0.0568  data_time: 0.0013  memory: 872  
09/21 06:51:44 - mmengine - INFO - Iter(test) [ 200/2000]    eta: 0:14:50  time: 0.0767  data_time: 0.0013  memory: 17214  
09/21 06:51:54 - mmengine - INFO - Iter(test) [ 250/2000]    eta: 0:12:41  time: 0.0560  data_time: 0.0013  memory: 17221  
09/21 06:52:01 - mmengine - INFO - Iter(test) [ 300/2000]    eta: 0:10:57  time: 0.0566  data_time: 0.0013  memory: 17162  
09/21 06:52:13 - mmengine - INFO - Iter(test) [ 350/2000]    eta: 0:10:02  time: 0.0541  data_time: 0.0012  memory: 17165  
09/21 06:52:20 - mmengine - INFO - Iter(test) [ 400/2000]    eta: 0:08:58  time: 0.0554  data_time: 0.0012  memory: 17147  
09/21 06:52:22 - mmengine - INFO - Iter(test) [ 450/2000]    eta: 0:07:52  time: 0.0526  data_time: 0.0012  memory: 883  
09/21 06:52:25 - mmengine - INFO - Iter(test) [ 500/2000]    eta: 0:06:59  time: 0.0542  data_time: 0.0012  memory: 872  
09/21 06:52:28 - mmengine - INFO - Iter(test) [ 550/2000]    eta: 0:06:16  time: 0.0568  data_time: 0.0013  memory: 983  
09/21 06:52:31 - mmengine - INFO - Iter(test) [ 600/2000]    eta: 0:05:39  time: 0.0566  data_time: 0.0014  memory: 981  
09/21 06:52:38 - mmengine - INFO - Iter(test) [ 650/2000]    eta: 0:05:17  time: 0.5267  data_time: 0.0012  memory: 17168  
09/21 06:52:46 - mmengine - INFO - Iter(test) [ 700/2000]    eta: 0:04:58  time: 0.0567  data_time: 0.0014  memory: 17163  
09/21 06:52:48 - mmengine - INFO - Iter(test) [ 750/2000]    eta: 0:04:32  time: 0.0544  data_time: 0.0012  memory: 1039  
09/21 06:52:52 - mmengine - INFO - Iter(test) [ 800/2000]    eta: 0:04:09  time: 0.0560  data_time: 0.0014  memory: 872  
09/21 06:52:54 - mmengine - INFO - Iter(test) [ 850/2000]    eta: 0:03:48  time: 0.0570  data_time: 0.0018  memory: 844  
09/21 06:52:57 - mmengine - INFO - Iter(test) [ 900/2000]    eta: 0:03:30  time: 0.0692  data_time: 0.0012  memory: 925  
09/21 06:53:01 - mmengine - INFO - Iter(test) [ 950/2000]    eta: 0:03:14  time: 0.0542  data_time: 0.0013  memory: 955  
09/21 06:53:04 - mmengine - INFO - Iter(test) [1000/2000]    eta: 0:02:58  time: 0.0537  data_time: 0.0013  memory: 955  
09/21 06:53:11 - mmengine - INFO - Iter(test) [1050/2000]    eta: 0:02:48  time: 0.0743  data_time: 0.0013  memory: 17170  
09/21 06:53:14 - mmengine - INFO - Iter(test) [1100/2000]    eta: 0:02:34  time: 0.0546  data_time: 0.0013  memory: 952  
09/21 06:53:17 - mmengine - INFO - Iter(test) [1150/2000]    eta: 0:02:21  time: 0.0554  data_time: 0.0013  memory: 924  
09/21 06:53:20 - mmengine - INFO - Iter(test) [1200/2000]    eta: 0:02:09  time: 0.0541  data_time: 0.0013  memory: 1829  
09/21 06:53:28 - mmengine - INFO - Iter(test) [1250/2000]    eta: 0:02:01  time: 0.0543  data_time: 0.0013  memory: 17158  
09/21 06:53:31 - mmengine - INFO - Iter(test) [1300/2000]    eta: 0:01:50  time: 0.0553  data_time: 0.0013  memory: 872  
09/21 06:53:33 - mmengine - INFO - Iter(test) [1350/2000]    eta: 0:01:40  time: 0.0530  data_time: 0.0013  memory: 872  
09/21 06:53:36 - mmengine - INFO - Iter(test) [1400/2000]    eta: 0:01:30  time: 0.0563  data_time: 0.0013  memory: 953  
09/21 06:53:40 - mmengine - INFO - Iter(test) [1450/2000]    eta: 0:01:21  time: 0.0560  data_time: 0.0013  memory: 955  
09/21 06:53:43 - mmengine - INFO - Iter(test) [1500/2000]    eta: 0:01:12  time: 0.0531  data_time: 0.0013  memory: 869  
09/21 06:53:46 - mmengine - INFO - Iter(test) [1550/2000]    eta: 0:01:04  time: 0.0558  data_time: 0.0013  memory: 955  
09/21 06:53:49 - mmengine - INFO - Iter(test) [1600/2000]    eta: 0:00:55  time: 0.0548  data_time: 0.0014  memory: 844  
09/21 06:53:56 - mmengine - INFO - Iter(test) [1650/2000]    eta: 0:00:48  time: 0.0521  data_time: 0.0012  memory: 17165  
09/21 06:53:59 - mmengine - INFO - Iter(test) [1700/2000]    eta: 0:00:41  time: 0.0568  data_time: 0.0014  memory: 952  
09/21 06:54:03 - mmengine - INFO - Iter(test) [1750/2000]    eta: 0:00:33  time: 0.0545  data_time: 0.0012  memory: 980  
09/21 06:54:06 - mmengine - INFO - Iter(test) [1800/2000]    eta: 0:00:26  time: 0.0561  data_time: 0.0014  memory: 872  
09/21 06:54:09 - mmengine - INFO - Iter(test) [1850/2000]    eta: 0:00:19  time: 0.0560  data_time: 0.0014  memory: 787  
09/21 06:54:11 - mmengine - INFO - Iter(test) [1900/2000]    eta: 0:00:12  time: 0.0536  data_time: 0.0013  memory: 1011  
09/21 06:54:14 - mmengine - INFO - Iter(test) [1950/2000]    eta: 0:00:06  time: 0.0540  data_time: 0.0013  memory: 1258  
09/21 06:54:17 - mmengine - INFO - Iter(test) [2000/2000]    eta: 0:00:00  time: 0.0511  data_time: 0.0011  memory: 1037  
09/21 06:54:17 - mmengine - INFO - per class results:
09/21 06:54:17 - mmengine - INFO - 
+---------------------+-------+-------+
|        Class        |  IoU  |  Acc  |
+---------------------+-------+-------+
|         wall        | 74.97 |  87.2 |
|       building      | 80.04 | 91.38 |
|         sky         | 94.16 |  97.1 |
|        floor        | 80.88 | 89.56 |
|         tree        | 70.89 | 85.84 |
|       ceiling       | 82.33 | 91.92 |
|         road        | 80.93 |  85.7 |
|         bed         | 87.21 | 94.38 |
|      windowpane     | 58.69 | 76.08 |
|        grass        | 68.68 | 84.88 |
|       cabinet       | 55.63 | 70.02 |
|       sidewalk      |  65.2 | 80.57 |
|        person       | 78.63 | 84.89 |
|        earth        | 31.98 | 43.69 |
|         door        | 43.51 | 61.25 |
|        table        | 58.93 | 73.59 |
|       mountain      |  52.2 | 67.64 |
|        plant        | 42.72 | 50.18 |
|       curtain       | 69.44 | 83.49 |
|        chair        | 56.35 | 72.01 |
|         car         | 79.46 |  84.6 |
|        water        | 36.36 | 47.27 |
|       painting      | 69.77 | 82.04 |
|         sofa        | 64.04 | 82.58 |
|        shelf        | 39.79 | 63.25 |
|        house        | 41.48 | 59.33 |
|         sea         | 45.64 | 73.41 |
|        mirror       | 63.83 | 77.21 |
|         rug         | 63.71 | 78.95 |
|        field        | 37.58 |  70.7 |
|       armchair      | 37.76 | 47.66 |
|         seat        |  48.5 | 77.76 |
|        fence        | 31.56 | 46.35 |
|         desk        | 44.87 | 62.05 |
|         rock        | 29.96 | 37.19 |
|       wardrobe      | 38.22 | 54.78 |
|         lamp        | 65.88 | 77.83 |
|       bathtub       | 70.44 | 80.85 |
|       railing       | 28.48 |  43.5 |
|       cushion       | 50.15 | 61.15 |
|         base        | 19.33 | 40.93 |
|         box         | 19.62 |  28.0 |
|        column       | 44.83 | 56.76 |
|      signboard      | 36.78 | 47.16 |
|   chest of drawers  |  36.9 | 54.84 |
|       counter       | 26.36 | 41.92 |
|         sand        | 28.41 | 44.96 |
|         sink        | 70.98 | 76.61 |
|      skyscraper     | 39.18 | 53.07 |
|      fireplace      | 55.51 | 70.79 |
|     refrigerator    | 74.29 | 83.43 |
|      grandstand     | 43.93 | 72.29 |
|         path        | 21.52 |  35.4 |
|        stairs       | 32.72 | 42.77 |
|        runway       | 65.36 | 78.93 |
|         case        | 50.36 | 60.89 |
|      pool table     | 92.93 | 96.71 |
|        pillow       | 58.53 | 70.95 |
|     screen door     | 44.08 | 53.54 |
|       stairway      | 31.68 | 44.51 |
|        river        |  4.5  | 16.75 |
|        bridge       | 56.21 | 78.61 |
|       bookcase      | 40.62 | 65.39 |
|        blind        |  29.3 | 32.21 |
|     coffee table    | 64.66 | 83.55 |
|        toilet       |  86.5 | 88.84 |
|        flower       | 33.37 | 41.52 |
|         book        | 46.41 | 70.49 |
|         hill        |  7.0  | 11.27 |
|        bench        | 38.16 | 50.07 |
|      countertop     | 53.54 | 65.73 |
|        stove        | 70.17 | 77.54 |
|         palm        | 45.07 | 59.44 |
|    kitchen island   | 30.58 | 64.45 |
|       computer      | 55.31 | 61.48 |
|     swivel chair    |  43.9 |  62.1 |
|         boat        |  27.4 | 33.24 |
|         bar         | 46.35 | 64.38 |
|    arcade machine   | 27.54 | 28.73 |
|        hovel        | 11.83 | 30.04 |
|         bus         | 85.25 | 92.13 |
|        towel        | 62.63 | 69.17 |
|        light        | 62.07 | 76.81 |
|        truck        |  24.0 | 52.31 |
|        tower        |  18.2 | 40.24 |
|      chandelier     | 60.48 | 73.64 |
|        awning       | 31.52 | 36.15 |
|     streetlight     | 34.23 | 48.24 |
|        booth        | 48.51 | 54.93 |
| television receiver | 60.22 | 76.12 |
|       airplane      | 47.21 | 59.39 |
|      dirt track     |  8.79 |  26.6 |
|       apparel       |  36.9 | 55.79 |
|         pole        | 22.66 | 35.07 |
|         land        |  7.0  | 11.86 |
|      bannister      | 11.41 | 15.45 |
|      escalator      | 20.11 | 20.78 |
|       ottoman       | 26.25 | 39.82 |
|        bottle       |  21.7 | 28.41 |
|        buffet       | 42.69 |  49.4 |
|        poster       | 19.37 | 26.17 |
|        stage        | 12.07 | 22.15 |
|         van         | 43.23 | 64.27 |
|         ship        | 41.89 | 62.19 |
|       fountain      | 20.86 | 21.36 |
|    conveyer belt    | 77.05 | 89.11 |
|        canopy       | 20.99 | 22.88 |
|        washer       | 63.39 |  63.7 |
|      plaything      | 14.66 | 19.92 |
|    swimming pool    | 44.28 | 72.72 |
|        stool        | 38.06 | 60.17 |
|        barrel       | 13.41 | 31.24 |
|        basket       | 28.09 | 33.99 |
|      waterfall      | 71.08 | 89.95 |
|         tent        | 19.04 | 19.24 |
|         bag         |  9.48 | 10.76 |
|       minibike      | 47.27 | 57.36 |
|        cradle       | 85.19 | 95.85 |
|         oven        | 22.47 | 68.05 |
|         ball        | 41.05 | 60.82 |
|         food        | 56.24 | 61.01 |
|         step        | 13.85 | 19.97 |
|         tank        | 32.47 | 33.83 |
|      trade name     | 25.92 | 30.08 |
|      microwave      |  37.8 | 42.39 |
|         pot         | 45.92 | 52.28 |
|        animal       | 60.84 | 66.12 |
|       bicycle       | 51.66 | 67.72 |
|         lake        |  0.0  |  0.0  |
|      dishwasher     | 71.26 | 75.94 |
|        screen       | 50.17 |  64.7 |
|       blanket       | 18.17 |  22.4 |
|      sculpture      | 42.34 | 50.34 |
|         hood        | 67.13 | 82.45 |
|        sconce       | 44.69 | 60.96 |
|         vase        | 34.63 | 49.09 |
|    traffic light    | 27.44 | 54.01 |
|         tray        | 12.93 | 23.81 |
|        ashcan       | 38.87 | 47.01 |
|         fan         | 63.33 | 79.01 |
|         pier        | 32.27 | 82.62 |
|      crt screen     |  6.12 | 23.67 |
|        plate        | 46.37 | 53.56 |
|       monitor       | 11.13 | 12.79 |
|    bulletin board   | 34.85 |  46.3 |
|        shower       |  2.16 | 17.13 |
|       radiator      | 49.73 | 57.53 |
|        glass        | 12.73 | 17.32 |
|        clock        | 35.09 | 38.54 |
|         flag        | 29.09 | 32.09 |
+---------------------+-------+-------+
09/21 06:54:17 - mmengine - INFO - Iter(test) [2000/2000]    aAcc: 80.6200  mIoU: 43.6800  mAcc: 56.2600  data_time: 0.0014  time: 0.1257
Finished processing corruption type: pixelate
Processing corruption type: jpeg_compression
09/21 06:54:22 - mmengine - INFO - 
------------------------------------------------------------
System environment:
    sys.platform: linux
    Python: 3.10.13 | packaged by conda-forge | (main, Dec 23 2023, 15:36:39) [GCC 12.3.0]
    CUDA available: True
    MUSA available: False
    numpy_random_seed: 1673380595
    GPU 0: Tesla V100-SXM2-32GB
    CUDA_HOME: /opt/bwhpc/common/devel/cuda/11.7
    NVCC: Cuda compilation tools, release 11.7, V11.7.99
    GCC: gcc (GCC) 8.5.0 20210514 (Red Hat 8.5.0-18)
    PyTorch: 1.13.1
    PyTorch compiling details: PyTorch built with:
  - GCC 9.3
  - C++ Version: 201402
  - Intel(R) oneAPI Math Kernel Library Version 2023.1-Product Build 20230303 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v2.6.0 (Git Hash 52b5f107dd9cf10910aaa19cb47f3abf9b349815)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - LAPACK is enabled (usually provided by MKL)
  - NNPACK is enabled
  - CPU capability usage: AVX2
  - CUDA Runtime 11.7
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_61,code=sm_61;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86;-gencode;arch=compute_37,code=compute_37
  - CuDNN 8.5
  - Magma 2.6.1
  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.7, CUDNN_VERSION=8.5.0, CXX_COMPILER=/opt/rh/devtoolset-9/root/usr/bin/c++, CXX_FLAGS= -fabi-version=11 -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -DEDGE_PROFILER_USE_KINETO -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Werror=non-virtual-dtor -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wunused-local-typedefs -Wno-unused-parameter -Wno-unused-function -Wno-unused-result -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Werror=cast-function-type -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.13.1, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, USE_ROCM=OFF, 

    TorchVision: 0.14.1
    OpenCV: 3.4.18
    MMEngine: 0.10.4

Runtime environment:
    cudnn_benchmark: True
    mp_cfg: {'mp_start_method': 'fork', 'opencv_num_threads': 0}
    dist_cfg: {'backend': 'nccl'}
    seed: 1673380595
    Distributed launcher: none
    Distributed training: False
    GPU number: 1
------------------------------------------------------------

09/21 06:54:22 - mmengine - INFO - Config:
auto_scale_lr = dict(base_batch_size=16, enable=False)
crop_size = (
    512,
    512,
)
custom_imports = dict(allow_failed_imports=False, imports='mmdet.models')
data_root = 'data/ade/ADEChallengeData2016'
dataset_type = 'ADE20KDataset'
default_hooks = dict(
    checkpoint=dict(
        by_epoch=False, interval=5000, save_best='mIoU',
        type='CheckpointHook'),
    logger=dict(interval=50, log_metric_by_epoch=False, type='LoggerHook'),
    param_scheduler=dict(type='ParamSchedulerHook'),
    sampler_seed=dict(type='DistSamplerSeedHook'),
    timer=dict(type='IterTimerHook'),
    visualization=dict(type='SegVisualizationHook'))
default_scope = 'mmseg'
embed_multi = dict(decay_mult=0.0, lr_mult=1.0)
env_cfg = dict(
    cudnn_benchmark=True,
    dist_cfg=dict(backend='nccl'),
    mp_cfg=dict(mp_start_method='fork', opencv_num_threads=0))
img_ratios = [
    0.5,
    0.75,
    1.0,
    1.25,
    1.5,
    1.75,
]
launcher = 'none'
load_from = '../checkpoint_files/ade20k/mask2former/mask2former_r50_8xb2-160k_ade20k-512x512_20221204_000055-2d1f55f1.pth'
log_level = 'INFO'
log_processor = dict(by_epoch=False)
model = dict(
    backbone=dict(
        deep_stem=False,
        depth=50,
        frozen_stages=-1,
        init_cfg=dict(checkpoint='torchvision://resnet50', type='Pretrained'),
        norm_cfg=dict(requires_grad=False, type='SyncBN'),
        num_stages=4,
        out_indices=(
            0,
            1,
            2,
            3,
        ),
        style='pytorch',
        type='ResNet'),
    data_preprocessor=dict(
        bgr_to_rgb=True,
        corruption='jpeg_compression',
        mean=[
            123.675,
            116.28,
            103.53,
        ],
        pad_val=0,
        seg_pad_val=255,
        size=(
            512,
            512,
        ),
        std=[
            58.395,
            57.12,
            57.375,
        ],
        test_cfg=dict(size_divisor=32),
        type='SegDataPreProcessor'),
    decode_head=dict(
        align_corners=False,
        enforce_decoder_input_project=False,
        feat_channels=256,
        in_channels=[
            256,
            512,
            1024,
            2048,
        ],
        loss_cls=dict(
            class_weight=[
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                0.1,
            ],
            loss_weight=2.0,
            reduction='mean',
            type='mmdet.CrossEntropyLoss',
            use_sigmoid=False),
        loss_dice=dict(
            activate=True,
            eps=1.0,
            loss_weight=5.0,
            naive_dice=True,
            reduction='mean',
            type='mmdet.DiceLoss',
            use_sigmoid=True),
        loss_mask=dict(
            loss_weight=5.0,
            reduction='mean',
            type='mmdet.CrossEntropyLoss',
            use_sigmoid=True),
        num_classes=150,
        num_queries=100,
        num_transformer_feat_level=3,
        out_channels=256,
        pixel_decoder=dict(
            act_cfg=dict(type='ReLU'),
            encoder=dict(
                init_cfg=None,
                layer_cfg=dict(
                    ffn_cfg=dict(
                        act_cfg=dict(inplace=True, type='ReLU'),
                        embed_dims=256,
                        feedforward_channels=1024,
                        ffn_drop=0.0,
                        num_fcs=2),
                    self_attn_cfg=dict(
                        batch_first=True,
                        dropout=0.0,
                        embed_dims=256,
                        im2col_step=64,
                        init_cfg=None,
                        norm_cfg=None,
                        num_heads=8,
                        num_levels=3,
                        num_points=4)),
                num_layers=6),
            init_cfg=None,
            norm_cfg=dict(num_groups=32, type='GN'),
            num_outs=3,
            positional_encoding=dict(normalize=True, num_feats=128),
            type='mmdet.MSDeformAttnPixelDecoder'),
        positional_encoding=dict(normalize=True, num_feats=128),
        strides=[
            4,
            8,
            16,
            32,
        ],
        train_cfg=dict(
            assigner=dict(
                match_costs=[
                    dict(type='mmdet.ClassificationCost', weight=2.0),
                    dict(
                        type='mmdet.CrossEntropyLossCost',
                        use_sigmoid=True,
                        weight=5.0),
                    dict(
                        eps=1.0,
                        pred_act=True,
                        type='mmdet.DiceCost',
                        weight=5.0),
                ],
                type='mmdet.HungarianAssigner'),
            importance_sample_ratio=0.75,
            num_points=12544,
            oversample_ratio=3.0,
            sampler=dict(type='mmdet.MaskPseudoSampler')),
        transformer_decoder=dict(
            init_cfg=None,
            layer_cfg=dict(
                cross_attn_cfg=dict(
                    attn_drop=0.0,
                    batch_first=True,
                    dropout_layer=None,
                    embed_dims=256,
                    num_heads=8,
                    proj_drop=0.0),
                ffn_cfg=dict(
                    act_cfg=dict(inplace=True, type='ReLU'),
                    add_identity=True,
                    dropout_layer=None,
                    embed_dims=256,
                    feedforward_channels=2048,
                    ffn_drop=0.0,
                    num_fcs=2),
                self_attn_cfg=dict(
                    attn_drop=0.0,
                    batch_first=True,
                    dropout_layer=None,
                    embed_dims=256,
                    num_heads=8,
                    proj_drop=0.0)),
            num_layers=9,
            return_intermediate=True),
        type='Mask2FormerHead'),
    test_cfg=dict(mode='whole'),
    train_cfg=dict(),
    type='EncoderDecoder')
num_classes = 150
optim_wrapper = dict(
    clip_grad=dict(max_norm=0.01, norm_type=2),
    optimizer=dict(
        betas=(
            0.9,
            0.999,
        ),
        eps=1e-08,
        lr=0.0001,
        type='AdamW',
        weight_decay=0.05),
    paramwise_cfg=dict(
        custom_keys=dict(
            backbone=dict(decay_mult=1.0, lr_mult=0.1),
            level_embed=dict(decay_mult=0.0, lr_mult=1.0),
            query_embed=dict(decay_mult=0.0, lr_mult=1.0),
            query_feat=dict(decay_mult=0.0, lr_mult=1.0)),
        norm_decay_mult=0.0),
    type='OptimWrapper')
optimizer = dict(
    betas=(
        0.9,
        0.999,
    ),
    eps=1e-08,
    lr=0.0001,
    type='AdamW',
    weight_decay=0.05)
param_scheduler = [
    dict(
        begin=0,
        by_epoch=False,
        end=160000,
        eta_min=0,
        power=0.9,
        type='PolyLR'),
]
resume = False
test_cfg = dict(type='TestLoop')
test_dataloader = dict(
    batch_size=1,
    dataset=dict(
        data_prefix=dict(
            img_path='images/validation',
            seg_map_path='annotations/validation'),
        data_root='data/ade/ADEChallengeData2016',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(keep_ratio=True, scale=(
                2048,
                512,
            ), type='Resize'),
            dict(reduce_zero_label=True, type='LoadAnnotations'),
            dict(type='PackSegInputs'),
        ],
        type='ADE20KDataset'),
    num_workers=4,
    persistent_workers=True,
    sampler=dict(shuffle=False, type='DefaultSampler'))
test_evaluator = dict(
    iou_metrics=[
        'mIoU',
    ], type='IoUMetric')
test_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(keep_ratio=True, scale=(
        2048,
        512,
    ), type='Resize'),
    dict(reduce_zero_label=True, type='LoadAnnotations'),
    dict(type='PackSegInputs'),
]
train_cfg = dict(
    max_iters=160000, type='IterBasedTrainLoop', val_interval=5000)
train_dataloader = dict(
    batch_size=2,
    dataset=dict(
        data_prefix=dict(
            img_path='images/training', seg_map_path='annotations/training'),
        data_root='data/ade/ADEChallengeData2016',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(reduce_zero_label=True, type='LoadAnnotations'),
            dict(
                max_size=2048,
                resize_type='ResizeShortestEdge',
                scales=[
                    256,
                    307,
                    358,
                    409,
                    460,
                    512,
                    563,
                    614,
                    665,
                    716,
                    768,
                    819,
                    870,
                    921,
                    972,
                    1024,
                ],
                type='RandomChoiceResize'),
            dict(
                cat_max_ratio=0.75, crop_size=(
                    512,
                    512,
                ), type='RandomCrop'),
            dict(prob=0.5, type='RandomFlip'),
            dict(type='PhotoMetricDistortion'),
            dict(type='PackSegInputs'),
        ],
        type='ADE20KDataset'),
    num_workers=4,
    persistent_workers=True,
    sampler=dict(shuffle=True, type='InfiniteSampler'))
train_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(reduce_zero_label=True, type='LoadAnnotations'),
    dict(
        max_size=2048,
        resize_type='ResizeShortestEdge',
        scales=[
            256,
            307,
            358,
            409,
            460,
            512,
            563,
            614,
            665,
            716,
            768,
            819,
            870,
            921,
            972,
            1024,
        ],
        type='RandomChoiceResize'),
    dict(cat_max_ratio=0.75, crop_size=(
        512,
        512,
    ), type='RandomCrop'),
    dict(prob=0.5, type='RandomFlip'),
    dict(type='PhotoMetricDistortion'),
    dict(type='PackSegInputs'),
]
tta_model = dict(type='SegTTAModel')
tta_pipeline = [
    dict(backend_args=None, type='LoadImageFromFile'),
    dict(
        transforms=[
            [
                dict(keep_ratio=True, scale_factor=0.5, type='Resize'),
                dict(keep_ratio=True, scale_factor=0.75, type='Resize'),
                dict(keep_ratio=True, scale_factor=1.0, type='Resize'),
                dict(keep_ratio=True, scale_factor=1.25, type='Resize'),
                dict(keep_ratio=True, scale_factor=1.5, type='Resize'),
                dict(keep_ratio=True, scale_factor=1.75, type='Resize'),
            ],
            [
                dict(direction='horizontal', prob=0.0, type='RandomFlip'),
                dict(direction='horizontal', prob=1.0, type='RandomFlip'),
            ],
            [
                dict(type='LoadAnnotations'),
            ],
            [
                dict(type='PackSegInputs'),
            ],
        ],
        type='TestTimeAug'),
]
val_cfg = dict(type='ValLoop')
val_dataloader = dict(
    batch_size=1,
    dataset=dict(
        data_prefix=dict(
            img_path='images/validation',
            seg_map_path='annotations/validation'),
        data_root='data/ade/ADEChallengeData2016',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(keep_ratio=True, scale=(
                2048,
                512,
            ), type='Resize'),
            dict(reduce_zero_label=True, type='LoadAnnotations'),
            dict(type='PackSegInputs'),
        ],
        type='ADE20KDataset'),
    num_workers=4,
    persistent_workers=True,
    sampler=dict(shuffle=False, type='DefaultSampler'))
val_evaluator = dict(
    iou_metrics=[
        'mIoU',
    ], type='IoUMetric')
vis_backends = [
    dict(type='LocalVisBackend'),
]
visualizer = dict(
    name='visualizer',
    type='SegLocalVisualizer',
    vis_backends=[
        dict(type='LocalVisBackend'),
    ])
work_dir = '../corruptions/work_dirs/ade20k/mask2former/mask2former_r50_8xb2-160k_ade20k-512x512/jpeg_compression'

09/21 06:54:24 - mmengine - INFO - Distributed training is not used, all SyncBatchNorm (SyncBN) layers in the model will be automatically reverted to BatchNormXd layers if they are used.
09/21 06:54:24 - mmengine - INFO - Hooks will be executed in the following order:
before_run:
(VERY_HIGH   ) RuntimeInfoHook                    
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
before_train:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_train_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(NORMAL      ) DistSamplerSeedHook                
 -------------------- 
before_train_iter:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_train_iter:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(NORMAL      ) SegVisualizationHook               
(BELOW_NORMAL) LoggerHook                         
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
after_train_epoch:
(NORMAL      ) IterTimerHook                      
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_val:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
before_val_epoch:
(NORMAL      ) IterTimerHook                      
 -------------------- 
before_val_iter:
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_val_iter:
(NORMAL      ) IterTimerHook                      
(NORMAL      ) SegVisualizationHook               
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_val_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
after_val:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
after_train:
(VERY_HIGH   ) RuntimeInfoHook                    
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_test:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
before_test_epoch:
(NORMAL      ) IterTimerHook                      
 -------------------- 
before_test_iter:
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_test_iter:
(NORMAL      ) IterTimerHook                      
(NORMAL      ) SegVisualizationHook               
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_test_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_test:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
after_run:
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
09/21 06:54:25 - mmengine - WARNING - The prefix is not set in metric class IoUMetric.
Loads checkpoint by local backend from path: ../checkpoint_files/ade20k/mask2former/mask2former_r50_8xb2-160k_ade20k-512x512_20221204_000055-2d1f55f1.pth
09/21 06:54:25 - mmengine - INFO - Load checkpoint from ../checkpoint_files/ade20k/mask2former/mask2former_r50_8xb2-160k_ade20k-512x512_20221204_000055-2d1f55f1.pth
09/21 06:55:32 - mmengine - INFO - Iter(test) [  50/2000]    eta: 0:43:16  time: 0.9364  data_time: 0.0014  memory: 17167  
09/21 06:55:48 - mmengine - INFO - Iter(test) [ 100/2000]    eta: 0:26:20  time: 0.5293  data_time: 0.0014  memory: 17158  
09/21 06:55:52 - mmengine - INFO - Iter(test) [ 150/2000]    eta: 0:17:46  time: 0.0680  data_time: 0.0015  memory: 872  
09/21 06:56:06 - mmengine - INFO - Iter(test) [ 200/2000]    eta: 0:15:05  time: 0.0611  data_time: 0.0013  memory: 17214  
09/21 06:56:17 - mmengine - INFO - Iter(test) [ 250/2000]    eta: 0:12:59  time: 0.0933  data_time: 0.0013  memory: 17221  
09/21 06:56:25 - mmengine - INFO - Iter(test) [ 300/2000]    eta: 0:11:19  time: 0.0625  data_time: 0.0014  memory: 17162  
09/21 06:56:39 - mmengine - INFO - Iter(test) [ 350/2000]    eta: 0:10:32  time: 0.0963  data_time: 0.0012  memory: 17165  
09/21 06:56:48 - mmengine - INFO - Iter(test) [ 400/2000]    eta: 0:09:31  time: 0.1336  data_time: 0.0012  memory: 17147  
09/21 06:56:52 - mmengine - INFO - Iter(test) [ 450/2000]    eta: 0:08:26  time: 0.0585  data_time: 0.0013  memory: 883  
09/21 06:56:57 - mmengine - INFO - Iter(test) [ 500/2000]    eta: 0:07:33  time: 0.0909  data_time: 0.0013  memory: 872  
09/21 06:57:01 - mmengine - INFO - Iter(test) [ 550/2000]    eta: 0:06:49  time: 0.0634  data_time: 0.0014  memory: 983  
09/21 06:57:05 - mmengine - INFO - Iter(test) [ 600/2000]    eta: 0:06:12  time: 0.0629  data_time: 0.0014  memory: 981  
09/21 06:57:14 - mmengine - INFO - Iter(test) [ 650/2000]    eta: 0:05:49  time: 0.5629  data_time: 0.0012  memory: 17168  
09/21 06:57:24 - mmengine - INFO - Iter(test) [ 700/2000]    eta: 0:05:31  time: 0.0823  data_time: 0.0014  memory: 17163  
09/21 06:57:29 - mmengine - INFO - Iter(test) [ 750/2000]    eta: 0:05:05  time: 0.0610  data_time: 0.0012  memory: 1039  
09/21 06:57:33 - mmengine - INFO - Iter(test) [ 800/2000]    eta: 0:04:41  time: 0.1381  data_time: 0.0014  memory: 872  
09/21 06:57:37 - mmengine - INFO - Iter(test) [ 850/2000]    eta: 0:04:19  time: 0.1031  data_time: 0.0014  memory: 844  
09/21 06:57:42 - mmengine - INFO - Iter(test) [ 900/2000]    eta: 0:04:00  time: 0.0819  data_time: 0.0012  memory: 925  
09/21 06:57:46 - mmengine - INFO - Iter(test) [ 950/2000]    eta: 0:03:41  time: 0.0813  data_time: 0.0013  memory: 955  
09/21 06:57:50 - mmengine - INFO - Iter(test) [1000/2000]    eta: 0:03:24  time: 0.1290  data_time: 0.0013  memory: 955  
09/21 06:57:59 - mmengine - INFO - Iter(test) [1050/2000]    eta: 0:03:13  time: 0.1059  data_time: 0.0013  memory: 17170  
09/21 06:58:02 - mmengine - INFO - Iter(test) [1100/2000]    eta: 0:02:57  time: 0.0770  data_time: 0.0013  memory: 952  
09/21 06:58:07 - mmengine - INFO - Iter(test) [1150/2000]    eta: 0:02:43  time: 0.0613  data_time: 0.0013  memory: 924  
09/21 06:58:11 - mmengine - INFO - Iter(test) [1200/2000]    eta: 0:02:30  time: 0.0600  data_time: 0.0013  memory: 1829  
09/21 06:58:20 - mmengine - INFO - Iter(test) [1250/2000]    eta: 0:02:20  time: 0.0599  data_time: 0.0012  memory: 17158  
09/21 06:58:24 - mmengine - INFO - Iter(test) [1300/2000]    eta: 0:02:08  time: 0.0610  data_time: 0.0012  memory: 872  
09/21 06:58:27 - mmengine - INFO - Iter(test) [1350/2000]    eta: 0:01:56  time: 0.0584  data_time: 0.0012  memory: 872  
09/21 06:58:31 - mmengine - INFO - Iter(test) [1400/2000]    eta: 0:01:45  time: 0.0622  data_time: 0.0012  memory: 953  
09/21 06:58:34 - mmengine - INFO - Iter(test) [1450/2000]    eta: 0:01:34  time: 0.0828  data_time: 0.0012  memory: 955  
09/21 06:58:39 - mmengine - INFO - Iter(test) [1500/2000]    eta: 0:01:24  time: 0.0781  data_time: 0.0012  memory: 869  
09/21 06:58:43 - mmengine - INFO - Iter(test) [1550/2000]    eta: 0:01:14  time: 0.0811  data_time: 0.0013  memory: 955  
09/21 06:58:47 - mmengine - INFO - Iter(test) [1600/2000]    eta: 0:01:05  time: 0.0603  data_time: 0.0013  memory: 844  
09/21 06:58:57 - mmengine - INFO - Iter(test) [1650/2000]    eta: 0:00:57  time: 0.0919  data_time: 0.0012  memory: 17165  
09/21 06:59:01 - mmengine - INFO - Iter(test) [1700/2000]    eta: 0:00:48  time: 0.0914  data_time: 0.0014  memory: 952  
09/21 06:59:05 - mmengine - INFO - Iter(test) [1750/2000]    eta: 0:00:39  time: 0.0603  data_time: 0.0012  memory: 980  
09/21 06:59:09 - mmengine - INFO - Iter(test) [1800/2000]    eta: 0:00:31  time: 0.0627  data_time: 0.0014  memory: 872  
09/21 06:59:13 - mmengine - INFO - Iter(test) [1850/2000]    eta: 0:00:23  time: 0.1343  data_time: 0.0014  memory: 787  
09/21 06:59:16 - mmengine - INFO - Iter(test) [1900/2000]    eta: 0:00:15  time: 0.0906  data_time: 0.0013  memory: 1011  
09/21 06:59:21 - mmengine - INFO - Iter(test) [1950/2000]    eta: 0:00:07  time: 0.0741  data_time: 0.0013  memory: 1258  
09/21 06:59:25 - mmengine - INFO - Iter(test) [2000/2000]    eta: 0:00:00  time: 0.0558  data_time: 0.0011  memory: 1037  
09/21 06:59:25 - mmengine - INFO - per class results:
09/21 06:59:25 - mmengine - INFO - 
+---------------------+-------+-------+
|        Class        |  IoU  |  Acc  |
+---------------------+-------+-------+
|         wall        | 74.12 | 87.99 |
|       building      | 79.67 | 89.69 |
|         sky         | 94.13 | 97.38 |
|        floor        | 78.77 |  90.1 |
|         tree        | 72.05 | 84.76 |
|       ceiling       | 81.22 | 90.85 |
|         road        | 80.34 | 87.17 |
|         bed         | 87.23 |  94.1 |
|      windowpane     |  59.0 |  75.0 |
|        grass        | 68.44 | 83.03 |
|       cabinet       | 53.04 | 67.45 |
|       sidewalk      | 63.75 | 75.84 |
|        person       | 79.92 |  87.2 |
|        earth        | 34.26 | 52.48 |
|         door        | 41.35 | 56.82 |
|        table        | 57.79 | 72.55 |
|       mountain      | 58.88 |  71.7 |
|        plant        | 50.64 | 58.38 |
|       curtain       | 72.08 | 79.01 |
|        chair        | 52.97 | 65.33 |
|         car         |  82.5 | 87.94 |
|        water        | 37.89 | 49.56 |
|       painting      | 68.98 | 80.65 |
|         sofa        | 64.38 | 82.93 |
|        shelf        | 35.16 | 51.77 |
|        house        | 40.63 | 65.28 |
|         sea         | 43.71 | 72.25 |
|        mirror       | 59.03 | 68.01 |
|         rug         | 59.13 | 68.87 |
|        field        | 34.66 | 59.29 |
|       armchair      | 36.89 | 51.98 |
|         seat        | 53.33 |  71.6 |
|        fence        | 32.15 |  47.9 |
|         desk        | 48.05 | 65.59 |
|         rock        | 44.02 |  68.2 |
|       wardrobe      | 36.77 | 56.67 |
|         lamp        | 67.45 | 76.83 |
|       bathtub       | 70.92 | 84.45 |
|       railing       | 24.51 | 34.33 |
|       cushion       | 52.05 | 64.28 |
|         base        | 24.17 | 36.71 |
|         box         | 23.56 | 32.61 |
|        column       | 46.14 | 57.16 |
|      signboard      | 38.41 | 47.48 |
|   chest of drawers  | 41.67 | 62.23 |
|       counter       | 26.35 | 35.57 |
|         sand        | 30.34 | 46.07 |
|         sink        | 66.53 | 76.55 |
|      skyscraper     |  59.1 | 79.46 |
|      fireplace      | 67.41 | 79.59 |
|     refrigerator    | 59.86 |  76.2 |
|      grandstand     | 49.64 | 71.51 |
|         path        | 19.47 | 34.61 |
|        stairs       | 35.18 |  44.8 |
|        runway       | 66.08 | 79.02 |
|         case        | 39.67 | 59.57 |
|      pool table     | 91.23 |  96.7 |
|        pillow       | 50.57 | 61.15 |
|     screen door     |  44.9 | 57.31 |
|       stairway      | 35.78 | 43.56 |
|        river        |  5.43 | 15.96 |
|        bridge       | 55.92 | 85.69 |
|       bookcase      | 37.45 | 60.44 |
|        blind        | 18.69 | 19.23 |
|     coffee table    | 62.46 | 80.18 |
|        toilet       | 84.44 | 87.92 |
|        flower       |  41.1 |  52.3 |
|         book        | 48.41 | 66.86 |
|         hill        |  8.77 | 13.16 |
|        bench        | 40.52 | 49.73 |
|      countertop     | 51.16 | 62.68 |
|        stove        | 68.97 | 81.89 |
|         palm        | 52.39 | 73.25 |
|    kitchen island   | 29.92 | 61.36 |
|       computer      |  57.3 |  62.6 |
|     swivel chair    | 46.18 | 63.71 |
|         boat        | 41.82 | 47.69 |
|         bar         | 40.52 | 49.84 |
|    arcade machine   | 20.25 | 37.42 |
|        hovel        | 17.78 | 35.23 |
|         bus         |  82.6 | 91.47 |
|        towel        | 58.18 | 63.66 |
|        light        | 58.47 |  71.8 |
|        truck        | 24.88 | 50.43 |
|        tower        | 28.45 | 54.78 |
|      chandelier     | 64.94 | 75.77 |
|        awning       | 26.62 | 29.74 |
|     streetlight     | 30.96 | 42.98 |
|        booth        | 46.78 | 62.19 |
| television receiver | 58.06 | 71.59 |
|       airplane      | 52.94 | 63.66 |
|      dirt track     |  9.57 | 22.19 |
|       apparel       | 36.55 | 63.19 |
|         pole        | 23.64 | 35.56 |
|         land        |  5.93 | 11.81 |
|      bannister      |  4.94 |  6.42 |
|      escalator      | 53.41 | 69.91 |
|       ottoman       | 44.99 | 58.09 |
|        bottle       | 36.02 | 56.66 |
|        buffet       | 37.01 | 42.47 |
|        poster       | 17.95 | 26.37 |
|        stage        | 16.41 | 21.84 |
|         van         | 46.27 | 62.21 |
|         ship        | 83.76 |  87.3 |
|       fountain      | 20.72 | 21.27 |
|    conveyer belt    | 46.63 | 64.51 |
|        canopy       | 28.16 | 38.13 |
|        washer       | 65.87 |  72.9 |
|      plaything      | 21.07 | 32.82 |
|    swimming pool    | 43.23 | 62.21 |
|        stool        |  45.8 | 57.44 |
|        barrel       | 24.67 | 40.96 |
|        basket       | 19.08 | 23.36 |
|      waterfall      | 37.39 | 54.05 |
|         tent        | 89.74 | 98.24 |
|         bag         |  9.95 | 11.78 |
|       minibike      | 64.89 | 81.62 |
|        cradle       | 72.46 |  95.0 |
|         oven        | 18.68 | 53.48 |
|         ball        | 44.12 |  51.5 |
|         food        | 60.96 |  71.7 |
|         step        | 12.25 | 19.72 |
|         tank        |  41.8 |  43.8 |
|      trade name     | 25.56 | 29.65 |
|      microwave      | 37.53 | 40.47 |
|         pot         | 43.56 | 48.49 |
|        animal       | 56.16 | 59.58 |
|       bicycle       | 54.86 | 67.83 |
|         lake        |  0.02 |  0.02 |
|      dishwasher     | 55.47 |  60.9 |
|        screen       | 61.94 | 70.19 |
|       blanket       |  7.16 |  8.25 |
|      sculpture      | 36.21 | 49.21 |
|         hood        | 64.06 | 82.71 |
|        sconce       | 44.24 | 57.59 |
|         vase        | 34.74 | 56.85 |
|    traffic light    | 28.98 | 50.86 |
|         tray        |  5.89 | 12.21 |
|        ashcan       | 34.37 | 48.08 |
|         fan         | 55.07 | 71.93 |
|         pier        | 37.29 | 84.73 |
|      crt screen     |  9.32 | 31.27 |
|        plate        | 37.61 | 46.89 |
|       monitor       |  9.81 |  10.6 |
|    bulletin board   | 45.29 |  55.2 |
|        shower       |  1.4  | 11.85 |
|       radiator      | 43.85 | 47.58 |
|        glass        | 14.32 | 16.02 |
|        clock        | 30.75 | 34.88 |
|         flag        | 29.56 | 32.11 |
+---------------------+-------+-------+
09/21 06:59:25 - mmengine - INFO - Iter(test) [2000/2000]    aAcc: 80.6400  mIoU: 44.6600  mAcc: 57.2200  data_time: 0.0015  time: 0.1499
Finished processing corruption type: jpeg_compression
Processing corruption type: elastic_transform
09/21 06:59:30 - mmengine - INFO - 
------------------------------------------------------------
System environment:
    sys.platform: linux
    Python: 3.10.13 | packaged by conda-forge | (main, Dec 23 2023, 15:36:39) [GCC 12.3.0]
    CUDA available: True
    MUSA available: False
    numpy_random_seed: 1813752313
    GPU 0: Tesla V100-SXM2-32GB
    CUDA_HOME: /opt/bwhpc/common/devel/cuda/11.7
    NVCC: Cuda compilation tools, release 11.7, V11.7.99
    GCC: gcc (GCC) 8.5.0 20210514 (Red Hat 8.5.0-18)
    PyTorch: 1.13.1
    PyTorch compiling details: PyTorch built with:
  - GCC 9.3
  - C++ Version: 201402
  - Intel(R) oneAPI Math Kernel Library Version 2023.1-Product Build 20230303 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v2.6.0 (Git Hash 52b5f107dd9cf10910aaa19cb47f3abf9b349815)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - LAPACK is enabled (usually provided by MKL)
  - NNPACK is enabled
  - CPU capability usage: AVX2
  - CUDA Runtime 11.7
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_61,code=sm_61;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86;-gencode;arch=compute_37,code=compute_37
  - CuDNN 8.5
  - Magma 2.6.1
  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.7, CUDNN_VERSION=8.5.0, CXX_COMPILER=/opt/rh/devtoolset-9/root/usr/bin/c++, CXX_FLAGS= -fabi-version=11 -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -DEDGE_PROFILER_USE_KINETO -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Werror=non-virtual-dtor -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wunused-local-typedefs -Wno-unused-parameter -Wno-unused-function -Wno-unused-result -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Werror=cast-function-type -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.13.1, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, USE_ROCM=OFF, 

    TorchVision: 0.14.1
    OpenCV: 3.4.18
    MMEngine: 0.10.4

Runtime environment:
    cudnn_benchmark: True
    mp_cfg: {'mp_start_method': 'fork', 'opencv_num_threads': 0}
    dist_cfg: {'backend': 'nccl'}
    seed: 1813752313
    Distributed launcher: none
    Distributed training: False
    GPU number: 1
------------------------------------------------------------

09/21 06:59:30 - mmengine - INFO - Config:
auto_scale_lr = dict(base_batch_size=16, enable=False)
crop_size = (
    512,
    512,
)
custom_imports = dict(allow_failed_imports=False, imports='mmdet.models')
data_root = 'data/ade/ADEChallengeData2016'
dataset_type = 'ADE20KDataset'
default_hooks = dict(
    checkpoint=dict(
        by_epoch=False, interval=5000, save_best='mIoU',
        type='CheckpointHook'),
    logger=dict(interval=50, log_metric_by_epoch=False, type='LoggerHook'),
    param_scheduler=dict(type='ParamSchedulerHook'),
    sampler_seed=dict(type='DistSamplerSeedHook'),
    timer=dict(type='IterTimerHook'),
    visualization=dict(type='SegVisualizationHook'))
default_scope = 'mmseg'
embed_multi = dict(decay_mult=0.0, lr_mult=1.0)
env_cfg = dict(
    cudnn_benchmark=True,
    dist_cfg=dict(backend='nccl'),
    mp_cfg=dict(mp_start_method='fork', opencv_num_threads=0))
img_ratios = [
    0.5,
    0.75,
    1.0,
    1.25,
    1.5,
    1.75,
]
launcher = 'none'
load_from = '../checkpoint_files/ade20k/mask2former/mask2former_r50_8xb2-160k_ade20k-512x512_20221204_000055-2d1f55f1.pth'
log_level = 'INFO'
log_processor = dict(by_epoch=False)
model = dict(
    backbone=dict(
        deep_stem=False,
        depth=50,
        frozen_stages=-1,
        init_cfg=dict(checkpoint='torchvision://resnet50', type='Pretrained'),
        norm_cfg=dict(requires_grad=False, type='SyncBN'),
        num_stages=4,
        out_indices=(
            0,
            1,
            2,
            3,
        ),
        style='pytorch',
        type='ResNet'),
    data_preprocessor=dict(
        bgr_to_rgb=True,
        corruption='elastic_transform',
        mean=[
            123.675,
            116.28,
            103.53,
        ],
        pad_val=0,
        seg_pad_val=255,
        size=(
            512,
            512,
        ),
        std=[
            58.395,
            57.12,
            57.375,
        ],
        test_cfg=dict(size_divisor=32),
        type='SegDataPreProcessor'),
    decode_head=dict(
        align_corners=False,
        enforce_decoder_input_project=False,
        feat_channels=256,
        in_channels=[
            256,
            512,
            1024,
            2048,
        ],
        loss_cls=dict(
            class_weight=[
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                0.1,
            ],
            loss_weight=2.0,
            reduction='mean',
            type='mmdet.CrossEntropyLoss',
            use_sigmoid=False),
        loss_dice=dict(
            activate=True,
            eps=1.0,
            loss_weight=5.0,
            naive_dice=True,
            reduction='mean',
            type='mmdet.DiceLoss',
            use_sigmoid=True),
        loss_mask=dict(
            loss_weight=5.0,
            reduction='mean',
            type='mmdet.CrossEntropyLoss',
            use_sigmoid=True),
        num_classes=150,
        num_queries=100,
        num_transformer_feat_level=3,
        out_channels=256,
        pixel_decoder=dict(
            act_cfg=dict(type='ReLU'),
            encoder=dict(
                init_cfg=None,
                layer_cfg=dict(
                    ffn_cfg=dict(
                        act_cfg=dict(inplace=True, type='ReLU'),
                        embed_dims=256,
                        feedforward_channels=1024,
                        ffn_drop=0.0,
                        num_fcs=2),
                    self_attn_cfg=dict(
                        batch_first=True,
                        dropout=0.0,
                        embed_dims=256,
                        im2col_step=64,
                        init_cfg=None,
                        norm_cfg=None,
                        num_heads=8,
                        num_levels=3,
                        num_points=4)),
                num_layers=6),
            init_cfg=None,
            norm_cfg=dict(num_groups=32, type='GN'),
            num_outs=3,
            positional_encoding=dict(normalize=True, num_feats=128),
            type='mmdet.MSDeformAttnPixelDecoder'),
        positional_encoding=dict(normalize=True, num_feats=128),
        strides=[
            4,
            8,
            16,
            32,
        ],
        train_cfg=dict(
            assigner=dict(
                match_costs=[
                    dict(type='mmdet.ClassificationCost', weight=2.0),
                    dict(
                        type='mmdet.CrossEntropyLossCost',
                        use_sigmoid=True,
                        weight=5.0),
                    dict(
                        eps=1.0,
                        pred_act=True,
                        type='mmdet.DiceCost',
                        weight=5.0),
                ],
                type='mmdet.HungarianAssigner'),
            importance_sample_ratio=0.75,
            num_points=12544,
            oversample_ratio=3.0,
            sampler=dict(type='mmdet.MaskPseudoSampler')),
        transformer_decoder=dict(
            init_cfg=None,
            layer_cfg=dict(
                cross_attn_cfg=dict(
                    attn_drop=0.0,
                    batch_first=True,
                    dropout_layer=None,
                    embed_dims=256,
                    num_heads=8,
                    proj_drop=0.0),
                ffn_cfg=dict(
                    act_cfg=dict(inplace=True, type='ReLU'),
                    add_identity=True,
                    dropout_layer=None,
                    embed_dims=256,
                    feedforward_channels=2048,
                    ffn_drop=0.0,
                    num_fcs=2),
                self_attn_cfg=dict(
                    attn_drop=0.0,
                    batch_first=True,
                    dropout_layer=None,
                    embed_dims=256,
                    num_heads=8,
                    proj_drop=0.0)),
            num_layers=9,
            return_intermediate=True),
        type='Mask2FormerHead'),
    test_cfg=dict(mode='whole'),
    train_cfg=dict(),
    type='EncoderDecoder')
num_classes = 150
optim_wrapper = dict(
    clip_grad=dict(max_norm=0.01, norm_type=2),
    optimizer=dict(
        betas=(
            0.9,
            0.999,
        ),
        eps=1e-08,
        lr=0.0001,
        type='AdamW',
        weight_decay=0.05),
    paramwise_cfg=dict(
        custom_keys=dict(
            backbone=dict(decay_mult=1.0, lr_mult=0.1),
            level_embed=dict(decay_mult=0.0, lr_mult=1.0),
            query_embed=dict(decay_mult=0.0, lr_mult=1.0),
            query_feat=dict(decay_mult=0.0, lr_mult=1.0)),
        norm_decay_mult=0.0),
    type='OptimWrapper')
optimizer = dict(
    betas=(
        0.9,
        0.999,
    ),
    eps=1e-08,
    lr=0.0001,
    type='AdamW',
    weight_decay=0.05)
param_scheduler = [
    dict(
        begin=0,
        by_epoch=False,
        end=160000,
        eta_min=0,
        power=0.9,
        type='PolyLR'),
]
resume = False
test_cfg = dict(type='TestLoop')
test_dataloader = dict(
    batch_size=1,
    dataset=dict(
        data_prefix=dict(
            img_path='images/validation',
            seg_map_path='annotations/validation'),
        data_root='data/ade/ADEChallengeData2016',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(keep_ratio=True, scale=(
                2048,
                512,
            ), type='Resize'),
            dict(reduce_zero_label=True, type='LoadAnnotations'),
            dict(type='PackSegInputs'),
        ],
        type='ADE20KDataset'),
    num_workers=4,
    persistent_workers=True,
    sampler=dict(shuffle=False, type='DefaultSampler'))
test_evaluator = dict(
    iou_metrics=[
        'mIoU',
    ], type='IoUMetric')
test_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(keep_ratio=True, scale=(
        2048,
        512,
    ), type='Resize'),
    dict(reduce_zero_label=True, type='LoadAnnotations'),
    dict(type='PackSegInputs'),
]
train_cfg = dict(
    max_iters=160000, type='IterBasedTrainLoop', val_interval=5000)
train_dataloader = dict(
    batch_size=2,
    dataset=dict(
        data_prefix=dict(
            img_path='images/training', seg_map_path='annotations/training'),
        data_root='data/ade/ADEChallengeData2016',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(reduce_zero_label=True, type='LoadAnnotations'),
            dict(
                max_size=2048,
                resize_type='ResizeShortestEdge',
                scales=[
                    256,
                    307,
                    358,
                    409,
                    460,
                    512,
                    563,
                    614,
                    665,
                    716,
                    768,
                    819,
                    870,
                    921,
                    972,
                    1024,
                ],
                type='RandomChoiceResize'),
            dict(
                cat_max_ratio=0.75, crop_size=(
                    512,
                    512,
                ), type='RandomCrop'),
            dict(prob=0.5, type='RandomFlip'),
            dict(type='PhotoMetricDistortion'),
            dict(type='PackSegInputs'),
        ],
        type='ADE20KDataset'),
    num_workers=4,
    persistent_workers=True,
    sampler=dict(shuffle=True, type='InfiniteSampler'))
train_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(reduce_zero_label=True, type='LoadAnnotations'),
    dict(
        max_size=2048,
        resize_type='ResizeShortestEdge',
        scales=[
            256,
            307,
            358,
            409,
            460,
            512,
            563,
            614,
            665,
            716,
            768,
            819,
            870,
            921,
            972,
            1024,
        ],
        type='RandomChoiceResize'),
    dict(cat_max_ratio=0.75, crop_size=(
        512,
        512,
    ), type='RandomCrop'),
    dict(prob=0.5, type='RandomFlip'),
    dict(type='PhotoMetricDistortion'),
    dict(type='PackSegInputs'),
]
tta_model = dict(type='SegTTAModel')
tta_pipeline = [
    dict(backend_args=None, type='LoadImageFromFile'),
    dict(
        transforms=[
            [
                dict(keep_ratio=True, scale_factor=0.5, type='Resize'),
                dict(keep_ratio=True, scale_factor=0.75, type='Resize'),
                dict(keep_ratio=True, scale_factor=1.0, type='Resize'),
                dict(keep_ratio=True, scale_factor=1.25, type='Resize'),
                dict(keep_ratio=True, scale_factor=1.5, type='Resize'),
                dict(keep_ratio=True, scale_factor=1.75, type='Resize'),
            ],
            [
                dict(direction='horizontal', prob=0.0, type='RandomFlip'),
                dict(direction='horizontal', prob=1.0, type='RandomFlip'),
            ],
            [
                dict(type='LoadAnnotations'),
            ],
            [
                dict(type='PackSegInputs'),
            ],
        ],
        type='TestTimeAug'),
]
val_cfg = dict(type='ValLoop')
val_dataloader = dict(
    batch_size=1,
    dataset=dict(
        data_prefix=dict(
            img_path='images/validation',
            seg_map_path='annotations/validation'),
        data_root='data/ade/ADEChallengeData2016',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(keep_ratio=True, scale=(
                2048,
                512,
            ), type='Resize'),
            dict(reduce_zero_label=True, type='LoadAnnotations'),
            dict(type='PackSegInputs'),
        ],
        type='ADE20KDataset'),
    num_workers=4,
    persistent_workers=True,
    sampler=dict(shuffle=False, type='DefaultSampler'))
val_evaluator = dict(
    iou_metrics=[
        'mIoU',
    ], type='IoUMetric')
vis_backends = [
    dict(type='LocalVisBackend'),
]
visualizer = dict(
    name='visualizer',
    type='SegLocalVisualizer',
    vis_backends=[
        dict(type='LocalVisBackend'),
    ])
work_dir = '../corruptions/work_dirs/ade20k/mask2former/mask2former_r50_8xb2-160k_ade20k-512x512/elastic_transform'

09/21 06:59:33 - mmengine - INFO - Distributed training is not used, all SyncBatchNorm (SyncBN) layers in the model will be automatically reverted to BatchNormXd layers if they are used.
09/21 06:59:33 - mmengine - INFO - Hooks will be executed in the following order:
before_run:
(VERY_HIGH   ) RuntimeInfoHook                    
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
before_train:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_train_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(NORMAL      ) DistSamplerSeedHook                
 -------------------- 
before_train_iter:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_train_iter:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(NORMAL      ) SegVisualizationHook               
(BELOW_NORMAL) LoggerHook                         
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
after_train_epoch:
(NORMAL      ) IterTimerHook                      
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_val:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
before_val_epoch:
(NORMAL      ) IterTimerHook                      
 -------------------- 
before_val_iter:
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_val_iter:
(NORMAL      ) IterTimerHook                      
(NORMAL      ) SegVisualizationHook               
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_val_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
after_val:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
after_train:
(VERY_HIGH   ) RuntimeInfoHook                    
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_test:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
before_test_epoch:
(NORMAL      ) IterTimerHook                      
 -------------------- 
before_test_iter:
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_test_iter:
(NORMAL      ) IterTimerHook                      
(NORMAL      ) SegVisualizationHook               
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_test_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_test:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
after_run:
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
09/21 06:59:33 - mmengine - WARNING - The prefix is not set in metric class IoUMetric.
Loads checkpoint by local backend from path: ../checkpoint_files/ade20k/mask2former/mask2former_r50_8xb2-160k_ade20k-512x512_20221204_000055-2d1f55f1.pth
09/21 06:59:34 - mmengine - INFO - Load checkpoint from ../checkpoint_files/ade20k/mask2former/mask2former_r50_8xb2-160k_ade20k-512x512_20221204_000055-2d1f55f1.pth
09/21 07:01:32 - mmengine - INFO - Iter(test) [  50/2000]    eta: 1:16:48  time: 1.9603  data_time: 0.0014  memory: 17167  
09/21 07:02:35 - mmengine - INFO - Iter(test) [ 100/2000]    eta: 0:57:27  time: 1.5001  data_time: 0.0015  memory: 17158  
09/21 07:03:25 - mmengine - INFO - Iter(test) [ 150/2000]    eta: 0:47:25  time: 0.9849  data_time: 0.0014  memory: 872  
09/21 07:04:25 - mmengine - INFO - Iter(test) [ 200/2000]    eta: 0:43:37  time: 1.0014  data_time: 0.0014  memory: 17214  
09/21 07:05:19 - mmengine - INFO - Iter(test) [ 250/2000]    eta: 0:40:14  time: 0.9465  data_time: 0.0014  memory: 17221  
09/21 07:06:11 - mmengine - INFO - Iter(test) [ 300/2000]    eta: 0:37:29  time: 1.0565  data_time: 0.0015  memory: 17162  
09/21 07:07:08 - mmengine - INFO - Iter(test) [ 350/2000]    eta: 0:35:40  time: 0.9181  data_time: 0.0014  memory: 17165  
09/21 07:08:00 - mmengine - INFO - Iter(test) [ 400/2000]    eta: 0:33:43  time: 1.0447  data_time: 0.0013  memory: 17147  
09/21 07:08:45 - mmengine - INFO - Iter(test) [ 450/2000]    eta: 0:31:38  time: 0.8806  data_time: 0.0013  memory: 883  
09/21 07:09:34 - mmengine - INFO - Iter(test) [ 500/2000]    eta: 0:30:00  time: 1.0101  data_time: 0.0014  memory: 872  
09/21 07:10:25 - mmengine - INFO - Iter(test) [ 550/2000]    eta: 0:28:36  time: 1.0377  data_time: 0.0014  memory: 983  
09/21 07:11:13 - mmengine - INFO - Iter(test) [ 600/2000]    eta: 0:27:11  time: 1.0337  data_time: 0.0015  memory: 981  
09/21 07:12:07 - mmengine - INFO - Iter(test) [ 650/2000]    eta: 0:26:02  time: 1.4531  data_time: 0.0013  memory: 17168  
09/21 07:13:01 - mmengine - INFO - Iter(test) [ 700/2000]    eta: 0:24:59  time: 0.9702  data_time: 0.0015  memory: 17163  
09/21 07:13:50 - mmengine - INFO - Iter(test) [ 750/2000]    eta: 0:23:46  time: 0.9108  data_time: 0.0014  memory: 1039  
09/21 07:14:34 - mmengine - INFO - Iter(test) [ 800/2000]    eta: 0:22:30  time: 0.9346  data_time: 0.0015  memory: 872  
09/21 07:15:22 - mmengine - INFO - Iter(test) [ 850/2000]    eta: 0:21:23  time: 0.9546  data_time: 0.0015  memory: 844  
09/21 07:16:06 - mmengine - INFO - Iter(test) [ 900/2000]    eta: 0:20:12  time: 0.8312  data_time: 0.0013  memory: 925  
09/21 07:16:54 - mmengine - INFO - Iter(test) [ 950/2000]    eta: 0:19:09  time: 0.9201  data_time: 0.0014  memory: 955  
09/21 07:17:39 - mmengine - INFO - Iter(test) [1000/2000]    eta: 0:18:05  time: 0.9591  data_time: 0.0014  memory: 955  
09/21 07:18:32 - mmengine - INFO - Iter(test) [1050/2000]    eta: 0:17:09  time: 0.9646  data_time: 0.0022  memory: 17170  
09/21 07:19:19 - mmengine - INFO - Iter(test) [1100/2000]    eta: 0:16:09  time: 0.9392  data_time: 0.0015  memory: 952  
09/21 07:20:05 - mmengine - INFO - Iter(test) [1150/2000]    eta: 0:15:09  time: 0.9294  data_time: 0.0014  memory: 924  
09/21 07:20:53 - mmengine - INFO - Iter(test) [1200/2000]    eta: 0:14:12  time: 0.9155  data_time: 0.0013  memory: 1829  
09/21 07:21:43 - mmengine - INFO - Iter(test) [1250/2000]    eta: 0:13:17  time: 0.8962  data_time: 0.0013  memory: 17158  
09/21 07:22:27 - mmengine - INFO - Iter(test) [1300/2000]    eta: 0:12:19  time: 0.9911  data_time: 0.0014  memory: 872  
09/21 07:23:16 - mmengine - INFO - Iter(test) [1350/2000]    eta: 0:11:24  time: 0.9613  data_time: 0.0013  memory: 872  
09/21 07:24:04 - mmengine - INFO - Iter(test) [1400/2000]    eta: 0:10:29  time: 0.9999  data_time: 0.0013  memory: 953  
09/21 07:24:51 - mmengine - INFO - Iter(test) [1450/2000]    eta: 0:09:35  time: 0.9894  data_time: 0.0013  memory: 955  
09/21 07:25:38 - mmengine - INFO - Iter(test) [1500/2000]    eta: 0:08:41  time: 0.9866  data_time: 0.0014  memory: 869  
09/21 07:26:29 - mmengine - INFO - Iter(test) [1550/2000]    eta: 0:07:48  time: 0.9512  data_time: 0.0013  memory: 955  
09/21 07:27:15 - mmengine - INFO - Iter(test) [1600/2000]    eta: 0:06:55  time: 0.9458  data_time: 0.0015  memory: 844  
09/21 07:28:07 - mmengine - INFO - Iter(test) [1650/2000]    eta: 0:06:03  time: 0.8752  data_time: 0.0013  memory: 17165  
09/21 07:28:53 - mmengine - INFO - Iter(test) [1700/2000]    eta: 0:05:10  time: 0.9377  data_time: 0.0015  memory: 952  
09/21 07:29:41 - mmengine - INFO - Iter(test) [1750/2000]    eta: 0:04:18  time: 0.9307  data_time: 0.0013  memory: 980  
09/21 07:30:26 - mmengine - INFO - Iter(test) [1800/2000]    eta: 0:03:25  time: 1.0121  data_time: 0.0015  memory: 872  
09/21 07:31:13 - mmengine - INFO - Iter(test) [1850/2000]    eta: 0:02:33  time: 0.9195  data_time: 0.0015  memory: 787  
09/21 07:31:56 - mmengine - INFO - Iter(test) [1900/2000]    eta: 0:01:42  time: 0.8856  data_time: 0.0013  memory: 1011  
09/21 07:32:44 - mmengine - INFO - Iter(test) [1950/2000]    eta: 0:00:51  time: 0.8868  data_time: 0.0013  memory: 1258  
09/21 07:33:28 - mmengine - INFO - Iter(test) [2000/2000]    eta: 0:00:00  time: 0.8338  data_time: 0.0012  memory: 1037  
09/21 07:33:28 - mmengine - INFO - per class results:
09/21 07:33:28 - mmengine - INFO - 
+---------------------+-------+-------+
|        Class        |  IoU  |  Acc  |
+---------------------+-------+-------+
|         wall        | 61.21 | 76.23 |
|       building      | 72.11 | 85.04 |
|         sky         | 83.88 |  91.2 |
|        floor        | 67.15 | 80.64 |
|         tree        | 61.78 |  76.1 |
|       ceiling       | 69.13 | 82.42 |
|         road        | 74.81 |  83.0 |
|         bed         | 75.85 | 87.61 |
|      windowpane     | 46.77 | 66.18 |
|        grass        |  63.7 | 79.87 |
|       cabinet       | 48.31 | 64.38 |
|       sidewalk      | 54.92 | 70.71 |
|        person       | 60.16 | 74.34 |
|        earth        | 32.87 | 44.27 |
|         door        | 36.53 | 53.77 |
|        table        | 42.32 | 58.62 |
|       mountain      | 50.68 | 70.02 |
|        plant        | 42.46 | 56.78 |
|       curtain       | 54.62 | 71.68 |
|        chair        | 37.88 | 54.32 |
|         car         | 60.45 | 73.36 |
|        water        |  39.8 |  54.2 |
|       painting      | 43.78 | 62.89 |
|         sofa        | 51.69 | 72.94 |
|        shelf        | 31.39 | 52.22 |
|        house        | 43.26 | 66.03 |
|         sea         |  33.7 | 54.93 |
|        mirror       | 45.43 | 61.99 |
|         rug         | 50.02 | 67.67 |
|        field        | 30.26 | 49.49 |
|       armchair      | 30.79 | 45.09 |
|         seat        | 49.85 | 79.14 |
|        fence        | 23.64 | 36.57 |
|         desk        | 32.93 | 53.02 |
|         rock        |  41.2 | 62.46 |
|       wardrobe      | 39.04 |  50.9 |
|         lamp        | 32.95 | 51.26 |
|       bathtub       | 61.28 | 77.23 |
|       railing       |  19.6 | 31.99 |
|       cushion       | 33.71 | 48.77 |
|         base        | 21.02 |  44.9 |
|         box         | 13.38 |  18.7 |
|        column       | 29.35 | 45.17 |
|      signboard      | 22.06 | 34.84 |
|   chest of drawers  | 32.11 | 51.16 |
|       counter       | 25.23 | 32.48 |
|         sand        | 26.93 | 42.06 |
|         sink        | 48.96 | 60.29 |
|      skyscraper     | 40.27 | 54.12 |
|      fireplace      | 49.61 | 70.01 |
|     refrigerator    | 58.84 | 74.54 |
|      grandstand     | 39.21 | 66.57 |
|         path        | 19.07 | 30.44 |
|        stairs       | 22.15 | 29.72 |
|        runway       | 66.13 |  85.9 |
|         case        | 31.31 | 46.31 |
|      pool table     |  75.8 | 86.26 |
|        pillow       | 37.29 |  55.2 |
|     screen door     | 52.89 | 68.05 |
|       stairway      | 27.46 | 41.21 |
|        river        |  4.0  | 10.22 |
|        bridge       | 46.54 | 67.89 |
|       bookcase      | 21.39 | 36.91 |
|        blind        | 28.01 | 32.89 |
|     coffee table    | 44.61 | 69.06 |
|        toilet       | 59.15 | 72.92 |
|        flower       | 25.64 | 35.92 |
|         book        | 31.97 | 50.95 |
|         hill        | 14.31 | 23.02 |
|        bench        | 34.58 | 47.02 |
|      countertop     | 33.39 | 48.92 |
|        stove        | 56.18 | 71.54 |
|         palm        |  37.1 | 63.33 |
|    kitchen island   | 29.46 | 52.99 |
|       computer      | 45.82 | 56.48 |
|     swivel chair    | 30.46 |  48.6 |
|         boat        |  31.2 | 47.37 |
|         bar         | 28.99 | 39.46 |
|    arcade machine   | 14.15 | 21.47 |
|        hovel        | 18.59 | 32.97 |
|         bus         | 73.51 | 86.74 |
|        towel        | 41.13 | 57.19 |
|        light        | 13.99 | 23.69 |
|        truck        | 17.38 | 37.84 |
|        tower        | 20.71 | 43.59 |
|      chandelier     |  40.4 | 56.06 |
|        awning       |  18.1 | 26.57 |
|     streetlight     | 10.37 | 18.73 |
|        booth        | 46.27 | 55.58 |
| television receiver |  42.0 | 60.19 |
|       airplane      | 39.65 |  57.2 |
|      dirt track     |  8.69 | 32.98 |
|       apparel       | 25.13 | 48.78 |
|         pole        |  8.04 | 13.92 |
|         land        |  4.68 |  8.36 |
|      bannister      |  3.34 |  7.37 |
|      escalator      | 39.13 | 58.95 |
|       ottoman       | 23.13 | 41.21 |
|        bottle       | 19.28 | 30.15 |
|        buffet       | 37.05 | 44.06 |
|        poster       | 14.72 | 26.65 |
|        stage        | 13.76 | 19.92 |
|         van         | 25.87 | 38.77 |
|         ship        | 47.49 | 79.49 |
|       fountain      | 18.28 | 19.87 |
|    conveyer belt    | 53.75 | 74.08 |
|        canopy       |  10.3 | 17.62 |
|        washer       | 55.83 | 65.58 |
|      plaything      | 16.66 | 34.22 |
|    swimming pool    | 50.04 | 73.35 |
|        stool        | 20.77 | 40.17 |
|        barrel       | 36.52 | 69.27 |
|        basket       | 19.58 | 26.68 |
|      waterfall      | 60.84 | 89.78 |
|         tent        | 74.28 | 88.41 |
|         bag         | 13.07 | 16.04 |
|       minibike      |  46.3 |  71.0 |
|        cradle       | 65.42 | 85.15 |
|         oven        | 18.69 | 49.67 |
|         ball        | 30.49 | 48.32 |
|         food        | 44.44 | 56.26 |
|         step        | 15.93 | 18.74 |
|         tank        | 41.86 | 45.45 |
|      trade name     | 14.63 |  19.8 |
|      microwave      | 28.03 | 32.65 |
|         pot         | 25.37 | 36.27 |
|        animal       | 46.71 | 57.31 |
|       bicycle       | 36.26 |  54.2 |
|         lake        |  0.08 |  0.09 |
|      dishwasher     | 58.06 | 68.16 |
|        screen       | 54.84 | 71.95 |
|       blanket       | 13.67 | 18.46 |
|      sculpture      | 34.59 | 53.15 |
|         hood        | 53.54 | 70.46 |
|        sconce       |  20.5 | 33.24 |
|         vase        | 16.67 | 33.53 |
|    traffic light    | 12.09 | 28.87 |
|         tray        |  4.59 | 13.41 |
|        ashcan       | 21.06 | 32.63 |
|         fan         | 25.98 | 43.75 |
|         pier        | 37.02 | 51.01 |
|      crt screen     | 16.85 |  27.7 |
|        plate        | 20.34 | 28.38 |
|       monitor       |  4.89 |  6.62 |
|    bulletin board   | 28.94 | 38.77 |
|        shower       |  3.12 |  8.49 |
|       radiator      | 34.28 | 42.04 |
|        glass        |  7.7  |  9.69 |
|        clock        |  8.93 | 13.36 |
|         flag        | 15.76 | 22.04 |
+---------------------+-------+-------+
09/21 07:33:28 - mmengine - INFO - Iter(test) [2000/2000]    aAcc: 72.9700  mIoU: 35.1900  mAcc: 49.5100  data_time: 0.0016  time: 1.0168
Finished processing corruption type: elastic_transform
Processing corruption type: pixelate
09/21 07:33:32 - mmengine - INFO - 
------------------------------------------------------------
System environment:
    sys.platform: linux
    Python: 3.10.13 | packaged by conda-forge | (main, Dec 23 2023, 15:36:39) [GCC 12.3.0]
    CUDA available: True
    MUSA available: False
    numpy_random_seed: 2066326422
    GPU 0: Tesla V100-SXM2-32GB
    CUDA_HOME: /opt/bwhpc/common/devel/cuda/11.7
    NVCC: Cuda compilation tools, release 11.7, V11.7.99
    GCC: gcc (GCC) 8.5.0 20210514 (Red Hat 8.5.0-18)
    PyTorch: 1.13.1
    PyTorch compiling details: PyTorch built with:
  - GCC 9.3
  - C++ Version: 201402
  - Intel(R) oneAPI Math Kernel Library Version 2023.1-Product Build 20230303 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v2.6.0 (Git Hash 52b5f107dd9cf10910aaa19cb47f3abf9b349815)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - LAPACK is enabled (usually provided by MKL)
  - NNPACK is enabled
  - CPU capability usage: AVX2
  - CUDA Runtime 11.7
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_61,code=sm_61;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86;-gencode;arch=compute_37,code=compute_37
  - CuDNN 8.5
  - Magma 2.6.1
  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.7, CUDNN_VERSION=8.5.0, CXX_COMPILER=/opt/rh/devtoolset-9/root/usr/bin/c++, CXX_FLAGS= -fabi-version=11 -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -DEDGE_PROFILER_USE_KINETO -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Werror=non-virtual-dtor -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wunused-local-typedefs -Wno-unused-parameter -Wno-unused-function -Wno-unused-result -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Werror=cast-function-type -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.13.1, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, USE_ROCM=OFF, 

    TorchVision: 0.14.1
    OpenCV: 3.4.18
    MMEngine: 0.10.4

Runtime environment:
    cudnn_benchmark: True
    mp_cfg: {'mp_start_method': 'fork', 'opencv_num_threads': 0}
    dist_cfg: {'backend': 'nccl'}
    seed: 2066326422
    Distributed launcher: none
    Distributed training: False
    GPU number: 1
------------------------------------------------------------

09/21 07:33:32 - mmengine - INFO - Config:
auto_scale_lr = dict(base_batch_size=16, enable=False)
crop_size = (
    512,
    512,
)
custom_imports = dict(allow_failed_imports=False, imports='mmdet.models')
data_root = 'data/ade/ADEChallengeData2016'
dataset_type = 'ADE20KDataset'
default_hooks = dict(
    checkpoint=dict(
        by_epoch=False, interval=5000, save_best='mIoU',
        type='CheckpointHook'),
    logger=dict(interval=50, log_metric_by_epoch=False, type='LoggerHook'),
    param_scheduler=dict(type='ParamSchedulerHook'),
    sampler_seed=dict(type='DistSamplerSeedHook'),
    timer=dict(type='IterTimerHook'),
    visualization=dict(type='SegVisualizationHook'))
default_scope = 'mmseg'
embed_multi = dict(decay_mult=0.0, lr_mult=1.0)
env_cfg = dict(
    cudnn_benchmark=True,
    dist_cfg=dict(backend='nccl'),
    mp_cfg=dict(mp_start_method='fork', opencv_num_threads=0))
img_ratios = [
    0.5,
    0.75,
    1.0,
    1.25,
    1.5,
    1.75,
]
launcher = 'none'
load_from = '../checkpoint_files/ade20k/mask2former/mask2former_r50_8xb2-160k_ade20k-512x512_20221204_000055-2d1f55f1.pth'
log_level = 'INFO'
log_processor = dict(by_epoch=False)
model = dict(
    backbone=dict(
        deep_stem=False,
        depth=50,
        frozen_stages=-1,
        init_cfg=dict(checkpoint='torchvision://resnet50', type='Pretrained'),
        norm_cfg=dict(requires_grad=False, type='SyncBN'),
        num_stages=4,
        out_indices=(
            0,
            1,
            2,
            3,
        ),
        style='pytorch',
        type='ResNet'),
    data_preprocessor=dict(
        bgr_to_rgb=True,
        corruption='pixelate',
        mean=[
            123.675,
            116.28,
            103.53,
        ],
        pad_val=0,
        seg_pad_val=255,
        size=(
            512,
            512,
        ),
        std=[
            58.395,
            57.12,
            57.375,
        ],
        test_cfg=dict(size_divisor=32),
        type='SegDataPreProcessor'),
    decode_head=dict(
        align_corners=False,
        enforce_decoder_input_project=False,
        feat_channels=256,
        in_channels=[
            256,
            512,
            1024,
            2048,
        ],
        loss_cls=dict(
            class_weight=[
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                0.1,
            ],
            loss_weight=2.0,
            reduction='mean',
            type='mmdet.CrossEntropyLoss',
            use_sigmoid=False),
        loss_dice=dict(
            activate=True,
            eps=1.0,
            loss_weight=5.0,
            naive_dice=True,
            reduction='mean',
            type='mmdet.DiceLoss',
            use_sigmoid=True),
        loss_mask=dict(
            loss_weight=5.0,
            reduction='mean',
            type='mmdet.CrossEntropyLoss',
            use_sigmoid=True),
        num_classes=150,
        num_queries=100,
        num_transformer_feat_level=3,
        out_channels=256,
        pixel_decoder=dict(
            act_cfg=dict(type='ReLU'),
            encoder=dict(
                init_cfg=None,
                layer_cfg=dict(
                    ffn_cfg=dict(
                        act_cfg=dict(inplace=True, type='ReLU'),
                        embed_dims=256,
                        feedforward_channels=1024,
                        ffn_drop=0.0,
                        num_fcs=2),
                    self_attn_cfg=dict(
                        batch_first=True,
                        dropout=0.0,
                        embed_dims=256,
                        im2col_step=64,
                        init_cfg=None,
                        norm_cfg=None,
                        num_heads=8,
                        num_levels=3,
                        num_points=4)),
                num_layers=6),
            init_cfg=None,
            norm_cfg=dict(num_groups=32, type='GN'),
            num_outs=3,
            positional_encoding=dict(normalize=True, num_feats=128),
            type='mmdet.MSDeformAttnPixelDecoder'),
        positional_encoding=dict(normalize=True, num_feats=128),
        strides=[
            4,
            8,
            16,
            32,
        ],
        train_cfg=dict(
            assigner=dict(
                match_costs=[
                    dict(type='mmdet.ClassificationCost', weight=2.0),
                    dict(
                        type='mmdet.CrossEntropyLossCost',
                        use_sigmoid=True,
                        weight=5.0),
                    dict(
                        eps=1.0,
                        pred_act=True,
                        type='mmdet.DiceCost',
                        weight=5.0),
                ],
                type='mmdet.HungarianAssigner'),
            importance_sample_ratio=0.75,
            num_points=12544,
            oversample_ratio=3.0,
            sampler=dict(type='mmdet.MaskPseudoSampler')),
        transformer_decoder=dict(
            init_cfg=None,
            layer_cfg=dict(
                cross_attn_cfg=dict(
                    attn_drop=0.0,
                    batch_first=True,
                    dropout_layer=None,
                    embed_dims=256,
                    num_heads=8,
                    proj_drop=0.0),
                ffn_cfg=dict(
                    act_cfg=dict(inplace=True, type='ReLU'),
                    add_identity=True,
                    dropout_layer=None,
                    embed_dims=256,
                    feedforward_channels=2048,
                    ffn_drop=0.0,
                    num_fcs=2),
                self_attn_cfg=dict(
                    attn_drop=0.0,
                    batch_first=True,
                    dropout_layer=None,
                    embed_dims=256,
                    num_heads=8,
                    proj_drop=0.0)),
            num_layers=9,
            return_intermediate=True),
        type='Mask2FormerHead'),
    test_cfg=dict(mode='whole'),
    train_cfg=dict(),
    type='EncoderDecoder')
num_classes = 150
optim_wrapper = dict(
    clip_grad=dict(max_norm=0.01, norm_type=2),
    optimizer=dict(
        betas=(
            0.9,
            0.999,
        ),
        eps=1e-08,
        lr=0.0001,
        type='AdamW',
        weight_decay=0.05),
    paramwise_cfg=dict(
        custom_keys=dict(
            backbone=dict(decay_mult=1.0, lr_mult=0.1),
            level_embed=dict(decay_mult=0.0, lr_mult=1.0),
            query_embed=dict(decay_mult=0.0, lr_mult=1.0),
            query_feat=dict(decay_mult=0.0, lr_mult=1.0)),
        norm_decay_mult=0.0),
    type='OptimWrapper')
optimizer = dict(
    betas=(
        0.9,
        0.999,
    ),
    eps=1e-08,
    lr=0.0001,
    type='AdamW',
    weight_decay=0.05)
param_scheduler = [
    dict(
        begin=0,
        by_epoch=False,
        end=160000,
        eta_min=0,
        power=0.9,
        type='PolyLR'),
]
resume = False
test_cfg = dict(type='TestLoop')
test_dataloader = dict(
    batch_size=1,
    dataset=dict(
        data_prefix=dict(
            img_path='images/validation',
            seg_map_path='annotations/validation'),
        data_root='data/ade/ADEChallengeData2016',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(keep_ratio=True, scale=(
                2048,
                512,
            ), type='Resize'),
            dict(reduce_zero_label=True, type='LoadAnnotations'),
            dict(type='PackSegInputs'),
        ],
        type='ADE20KDataset'),
    num_workers=4,
    persistent_workers=True,
    sampler=dict(shuffle=False, type='DefaultSampler'))
test_evaluator = dict(
    iou_metrics=[
        'mIoU',
    ], type='IoUMetric')
test_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(keep_ratio=True, scale=(
        2048,
        512,
    ), type='Resize'),
    dict(reduce_zero_label=True, type='LoadAnnotations'),
    dict(type='PackSegInputs'),
]
train_cfg = dict(
    max_iters=160000, type='IterBasedTrainLoop', val_interval=5000)
train_dataloader = dict(
    batch_size=2,
    dataset=dict(
        data_prefix=dict(
            img_path='images/training', seg_map_path='annotations/training'),
        data_root='data/ade/ADEChallengeData2016',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(reduce_zero_label=True, type='LoadAnnotations'),
            dict(
                max_size=2048,
                resize_type='ResizeShortestEdge',
                scales=[
                    256,
                    307,
                    358,
                    409,
                    460,
                    512,
                    563,
                    614,
                    665,
                    716,
                    768,
                    819,
                    870,
                    921,
                    972,
                    1024,
                ],
                type='RandomChoiceResize'),
            dict(
                cat_max_ratio=0.75, crop_size=(
                    512,
                    512,
                ), type='RandomCrop'),
            dict(prob=0.5, type='RandomFlip'),
            dict(type='PhotoMetricDistortion'),
            dict(type='PackSegInputs'),
        ],
        type='ADE20KDataset'),
    num_workers=4,
    persistent_workers=True,
    sampler=dict(shuffle=True, type='InfiniteSampler'))
train_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(reduce_zero_label=True, type='LoadAnnotations'),
    dict(
        max_size=2048,
        resize_type='ResizeShortestEdge',
        scales=[
            256,
            307,
            358,
            409,
            460,
            512,
            563,
            614,
            665,
            716,
            768,
            819,
            870,
            921,
            972,
            1024,
        ],
        type='RandomChoiceResize'),
    dict(cat_max_ratio=0.75, crop_size=(
        512,
        512,
    ), type='RandomCrop'),
    dict(prob=0.5, type='RandomFlip'),
    dict(type='PhotoMetricDistortion'),
    dict(type='PackSegInputs'),
]
tta_model = dict(type='SegTTAModel')
tta_pipeline = [
    dict(backend_args=None, type='LoadImageFromFile'),
    dict(
        transforms=[
            [
                dict(keep_ratio=True, scale_factor=0.5, type='Resize'),
                dict(keep_ratio=True, scale_factor=0.75, type='Resize'),
                dict(keep_ratio=True, scale_factor=1.0, type='Resize'),
                dict(keep_ratio=True, scale_factor=1.25, type='Resize'),
                dict(keep_ratio=True, scale_factor=1.5, type='Resize'),
                dict(keep_ratio=True, scale_factor=1.75, type='Resize'),
            ],
            [
                dict(direction='horizontal', prob=0.0, type='RandomFlip'),
                dict(direction='horizontal', prob=1.0, type='RandomFlip'),
            ],
            [
                dict(type='LoadAnnotations'),
            ],
            [
                dict(type='PackSegInputs'),
            ],
        ],
        type='TestTimeAug'),
]
val_cfg = dict(type='ValLoop')
val_dataloader = dict(
    batch_size=1,
    dataset=dict(
        data_prefix=dict(
            img_path='images/validation',
            seg_map_path='annotations/validation'),
        data_root='data/ade/ADEChallengeData2016',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(keep_ratio=True, scale=(
                2048,
                512,
            ), type='Resize'),
            dict(reduce_zero_label=True, type='LoadAnnotations'),
            dict(type='PackSegInputs'),
        ],
        type='ADE20KDataset'),
    num_workers=4,
    persistent_workers=True,
    sampler=dict(shuffle=False, type='DefaultSampler'))
val_evaluator = dict(
    iou_metrics=[
        'mIoU',
    ], type='IoUMetric')
vis_backends = [
    dict(type='LocalVisBackend'),
]
visualizer = dict(
    name='visualizer',
    type='SegLocalVisualizer',
    vis_backends=[
        dict(type='LocalVisBackend'),
    ])
work_dir = '../corruptions/work_dirs/ade20k/mask2former/mask2former_r50_8xb2-160k_ade20k-512x512/pixelate'

09/21 07:33:35 - mmengine - INFO - Distributed training is not used, all SyncBatchNorm (SyncBN) layers in the model will be automatically reverted to BatchNormXd layers if they are used.
09/21 07:33:35 - mmengine - INFO - Hooks will be executed in the following order:
before_run:
(VERY_HIGH   ) RuntimeInfoHook                    
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
before_train:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_train_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(NORMAL      ) DistSamplerSeedHook                
 -------------------- 
before_train_iter:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_train_iter:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(NORMAL      ) SegVisualizationHook               
(BELOW_NORMAL) LoggerHook                         
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
after_train_epoch:
(NORMAL      ) IterTimerHook                      
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_val:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
before_val_epoch:
(NORMAL      ) IterTimerHook                      
 -------------------- 
before_val_iter:
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_val_iter:
(NORMAL      ) IterTimerHook                      
(NORMAL      ) SegVisualizationHook               
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_val_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
after_val:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
after_train:
(VERY_HIGH   ) RuntimeInfoHook                    
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_test:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
before_test_epoch:
(NORMAL      ) IterTimerHook                      
 -------------------- 
before_test_iter:
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_test_iter:
(NORMAL      ) IterTimerHook                      
(NORMAL      ) SegVisualizationHook               
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_test_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_test:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
after_run:
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
09/21 07:33:35 - mmengine - WARNING - The prefix is not set in metric class IoUMetric.
Loads checkpoint by local backend from path: ../checkpoint_files/ade20k/mask2former/mask2former_r50_8xb2-160k_ade20k-512x512_20221204_000055-2d1f55f1.pth
09/21 07:33:36 - mmengine - INFO - Load checkpoint from ../checkpoint_files/ade20k/mask2former/mask2former_r50_8xb2-160k_ade20k-512x512_20221204_000055-2d1f55f1.pth
09/21 07:34:44 - mmengine - INFO - Iter(test) [  50/2000]    eta: 0:44:24  time: 0.9324  data_time: 0.0014  memory: 17167  
09/21 07:35:01 - mmengine - INFO - Iter(test) [ 100/2000]    eta: 0:26:55  time: 0.5224  data_time: 0.0014  memory: 17158  
09/21 07:35:03 - mmengine - INFO - Iter(test) [ 150/2000]    eta: 0:18:02  time: 0.0562  data_time: 0.0013  memory: 872  
09/21 07:35:16 - mmengine - INFO - Iter(test) [ 200/2000]    eta: 0:15:06  time: 0.0550  data_time: 0.0013  memory: 17214  
09/21 07:35:25 - mmengine - INFO - Iter(test) [ 250/2000]    eta: 0:12:47  time: 0.0561  data_time: 0.0013  memory: 17221  
09/21 07:35:33 - mmengine - INFO - Iter(test) [ 300/2000]    eta: 0:11:02  time: 0.0561  data_time: 0.0014  memory: 17162  
09/21 07:35:44 - mmengine - INFO - Iter(test) [ 350/2000]    eta: 0:10:05  time: 0.0545  data_time: 0.0012  memory: 17165  
09/21 07:35:52 - mmengine - INFO - Iter(test) [ 400/2000]    eta: 0:09:04  time: 0.0991  data_time: 0.0012  memory: 17147  
09/21 07:35:55 - mmengine - INFO - Iter(test) [ 450/2000]    eta: 0:07:58  time: 0.0527  data_time: 0.0012  memory: 883  
09/21 07:35:57 - mmengine - INFO - Iter(test) [ 500/2000]    eta: 0:07:05  time: 0.0542  data_time: 0.0013  memory: 872  
09/21 07:36:01 - mmengine - INFO - Iter(test) [ 550/2000]    eta: 0:06:22  time: 0.0737  data_time: 0.0014  memory: 983  
09/21 07:36:04 - mmengine - INFO - Iter(test) [ 600/2000]    eta: 0:05:45  time: 0.0744  data_time: 0.0014  memory: 981  
09/21 07:36:12 - mmengine - INFO - Iter(test) [ 650/2000]    eta: 0:05:23  time: 0.5595  data_time: 0.0012  memory: 17168  
09/21 07:36:19 - mmengine - INFO - Iter(test) [ 700/2000]    eta: 0:05:03  time: 0.0564  data_time: 0.0014  memory: 17163  
09/21 07:36:22 - mmengine - INFO - Iter(test) [ 750/2000]    eta: 0:04:37  time: 0.0747  data_time: 0.0013  memory: 1039  
09/21 07:36:26 - mmengine - INFO - Iter(test) [ 800/2000]    eta: 0:04:15  time: 0.0557  data_time: 0.0014  memory: 872  
09/21 07:36:29 - mmengine - INFO - Iter(test) [ 850/2000]    eta: 0:03:53  time: 0.0559  data_time: 0.0014  memory: 844  
09/21 07:36:32 - mmengine - INFO - Iter(test) [ 900/2000]    eta: 0:03:34  time: 0.0521  data_time: 0.0012  memory: 925  
09/21 07:36:34 - mmengine - INFO - Iter(test) [ 950/2000]    eta: 0:03:17  time: 0.0546  data_time: 0.0013  memory: 955  
09/21 07:36:37 - mmengine - INFO - Iter(test) [1000/2000]    eta: 0:03:01  time: 0.0537  data_time: 0.0013  memory: 955  
09/21 07:36:46 - mmengine - INFO - Iter(test) [1050/2000]    eta: 0:02:51  time: 0.0560  data_time: 0.0013  memory: 17170  
09/21 07:36:48 - mmengine - INFO - Iter(test) [1100/2000]    eta: 0:02:37  time: 0.0543  data_time: 0.0013  memory: 952  
09/21 07:36:51 - mmengine - INFO - Iter(test) [1150/2000]    eta: 0:02:24  time: 0.0551  data_time: 0.0013  memory: 924  
09/21 07:36:54 - mmengine - INFO - Iter(test) [1200/2000]    eta: 0:02:12  time: 0.0541  data_time: 0.0013  memory: 1829  
09/21 07:37:01 - mmengine - INFO - Iter(test) [1250/2000]    eta: 0:02:03  time: 0.0549  data_time: 0.0013  memory: 17158  
09/21 07:37:04 - mmengine - INFO - Iter(test) [1300/2000]    eta: 0:01:52  time: 0.0551  data_time: 0.0013  memory: 872  
09/21 07:37:07 - mmengine - INFO - Iter(test) [1350/2000]    eta: 0:01:41  time: 0.0525  data_time: 0.0013  memory: 872  
09/21 07:37:09 - mmengine - INFO - Iter(test) [1400/2000]    eta: 0:01:31  time: 0.0558  data_time: 0.0013  memory: 953  
09/21 07:37:13 - mmengine - INFO - Iter(test) [1450/2000]    eta: 0:01:22  time: 0.1177  data_time: 0.0014  memory: 955  
09/21 07:37:16 - mmengine - INFO - Iter(test) [1500/2000]    eta: 0:01:13  time: 0.0527  data_time: 0.0012  memory: 869  
09/21 07:37:19 - mmengine - INFO - Iter(test) [1550/2000]    eta: 0:01:04  time: 0.0556  data_time: 0.0013  memory: 955  
09/21 07:37:21 - mmengine - INFO - Iter(test) [1600/2000]    eta: 0:00:56  time: 0.0546  data_time: 0.0014  memory: 844  
09/21 07:37:29 - mmengine - INFO - Iter(test) [1650/2000]    eta: 0:00:49  time: 0.0521  data_time: 0.0012  memory: 17165  
09/21 07:37:32 - mmengine - INFO - Iter(test) [1700/2000]    eta: 0:00:41  time: 0.0569  data_time: 0.0015  memory: 952  
09/21 07:37:35 - mmengine - INFO - Iter(test) [1750/2000]    eta: 0:00:34  time: 0.0549  data_time: 0.0012  memory: 980  
09/21 07:37:38 - mmengine - INFO - Iter(test) [1800/2000]    eta: 0:00:26  time: 0.0561  data_time: 0.0014  memory: 872  
09/21 07:37:40 - mmengine - INFO - Iter(test) [1850/2000]    eta: 0:00:19  time: 0.0556  data_time: 0.0014  memory: 787  
09/21 07:37:43 - mmengine - INFO - Iter(test) [1900/2000]    eta: 0:00:13  time: 0.0732  data_time: 0.0013  memory: 1011  
09/21 07:37:46 - mmengine - INFO - Iter(test) [1950/2000]    eta: 0:00:06  time: 0.0689  data_time: 0.0013  memory: 1258  
09/21 07:37:49 - mmengine - INFO - Iter(test) [2000/2000]    eta: 0:00:00  time: 0.0504  data_time: 0.0011  memory: 1037  
09/21 07:37:49 - mmengine - INFO - per class results:
09/21 07:37:49 - mmengine - INFO - 
+---------------------+-------+-------+
|        Class        |  IoU  |  Acc  |
+---------------------+-------+-------+
|         wall        | 74.97 |  87.2 |
|       building      | 80.04 | 91.38 |
|         sky         | 94.16 |  97.1 |
|        floor        | 80.88 | 89.56 |
|         tree        | 70.89 | 85.84 |
|       ceiling       | 82.33 | 91.92 |
|         road        | 80.93 |  85.7 |
|         bed         | 87.21 | 94.38 |
|      windowpane     | 58.69 | 76.08 |
|        grass        | 68.68 | 84.88 |
|       cabinet       | 55.63 | 70.02 |
|       sidewalk      |  65.2 | 80.57 |
|        person       | 78.63 | 84.89 |
|        earth        | 31.98 | 43.69 |
|         door        | 43.51 | 61.25 |
|        table        | 58.93 | 73.59 |
|       mountain      |  52.2 | 67.64 |
|        plant        | 42.72 | 50.18 |
|       curtain       | 69.44 | 83.49 |
|        chair        | 56.35 | 72.01 |
|         car         | 79.46 |  84.6 |
|        water        | 36.36 | 47.27 |
|       painting      | 69.77 | 82.04 |
|         sofa        | 64.04 | 82.58 |
|        shelf        | 39.79 | 63.25 |
|        house        | 41.48 | 59.33 |
|         sea         | 45.64 | 73.41 |
|        mirror       | 63.83 | 77.21 |
|         rug         | 63.71 | 78.95 |
|        field        | 37.58 |  70.7 |
|       armchair      | 37.76 | 47.66 |
|         seat        |  48.5 | 77.76 |
|        fence        | 31.56 | 46.35 |
|         desk        | 44.87 | 62.05 |
|         rock        | 29.96 | 37.19 |
|       wardrobe      | 38.22 | 54.78 |
|         lamp        | 65.88 | 77.83 |
|       bathtub       | 70.44 | 80.85 |
|       railing       | 28.48 |  43.5 |
|       cushion       | 50.15 | 61.15 |
|         base        | 19.33 | 40.93 |
|         box         | 19.62 |  28.0 |
|        column       | 44.83 | 56.76 |
|      signboard      | 36.78 | 47.16 |
|   chest of drawers  |  36.9 | 54.84 |
|       counter       | 26.36 | 41.92 |
|         sand        | 28.41 | 44.96 |
|         sink        | 70.98 | 76.61 |
|      skyscraper     | 39.18 | 53.07 |
|      fireplace      | 55.51 | 70.79 |
|     refrigerator    | 74.29 | 83.43 |
|      grandstand     | 43.93 | 72.29 |
|         path        | 21.52 |  35.4 |
|        stairs       | 32.72 | 42.77 |
|        runway       | 65.36 | 78.93 |
|         case        | 50.36 | 60.89 |
|      pool table     | 92.93 | 96.71 |
|        pillow       | 58.53 | 70.95 |
|     screen door     | 44.08 | 53.54 |
|       stairway      | 31.68 | 44.51 |
|        river        |  4.5  | 16.75 |
|        bridge       | 56.21 | 78.61 |
|       bookcase      | 40.62 | 65.39 |
|        blind        |  29.3 | 32.21 |
|     coffee table    | 64.66 | 83.55 |
|        toilet       |  86.5 | 88.84 |
|        flower       | 33.37 | 41.52 |
|         book        | 46.41 | 70.49 |
|         hill        |  7.0  | 11.27 |
|        bench        | 38.16 | 50.07 |
|      countertop     | 53.54 | 65.73 |
|        stove        | 70.17 | 77.54 |
|         palm        | 45.07 | 59.44 |
|    kitchen island   | 30.58 | 64.45 |
|       computer      | 55.31 | 61.48 |
|     swivel chair    |  43.9 |  62.1 |
|         boat        |  27.4 | 33.24 |
|         bar         | 46.35 | 64.38 |
|    arcade machine   | 27.54 | 28.73 |
|        hovel        | 11.83 | 30.04 |
|         bus         | 85.25 | 92.13 |
|        towel        | 62.63 | 69.17 |
|        light        | 62.07 | 76.81 |
|        truck        |  24.0 | 52.31 |
|        tower        |  18.2 | 40.24 |
|      chandelier     | 60.48 | 73.64 |
|        awning       | 31.52 | 36.15 |
|     streetlight     | 34.23 | 48.24 |
|        booth        | 48.51 | 54.93 |
| television receiver | 60.22 | 76.12 |
|       airplane      | 47.21 | 59.39 |
|      dirt track     |  8.79 |  26.6 |
|       apparel       |  36.9 | 55.79 |
|         pole        | 22.66 | 35.07 |
|         land        |  7.0  | 11.86 |
|      bannister      | 11.41 | 15.45 |
|      escalator      | 20.11 | 20.78 |
|       ottoman       | 26.25 | 39.82 |
|        bottle       |  21.7 | 28.41 |
|        buffet       | 42.69 |  49.4 |
|        poster       | 19.37 | 26.17 |
|        stage        | 12.07 | 22.15 |
|         van         | 43.23 | 64.27 |
|         ship        | 41.89 | 62.19 |
|       fountain      | 20.86 | 21.36 |
|    conveyer belt    | 77.05 | 89.11 |
|        canopy       | 20.99 | 22.88 |
|        washer       | 63.39 |  63.7 |
|      plaything      | 14.66 | 19.92 |
|    swimming pool    | 44.28 | 72.72 |
|        stool        | 38.06 | 60.17 |
|        barrel       | 13.41 | 31.24 |
|        basket       | 28.09 | 33.99 |
|      waterfall      | 71.08 | 89.95 |
|         tent        | 19.04 | 19.24 |
|         bag         |  9.48 | 10.76 |
|       minibike      | 47.27 | 57.36 |
|        cradle       | 85.19 | 95.85 |
|         oven        | 22.47 | 68.05 |
|         ball        | 41.05 | 60.82 |
|         food        | 56.24 | 61.01 |
|         step        | 13.85 | 19.97 |
|         tank        | 32.47 | 33.83 |
|      trade name     | 25.92 | 30.08 |
|      microwave      |  37.8 | 42.39 |
|         pot         | 45.92 | 52.28 |
|        animal       | 60.84 | 66.12 |
|       bicycle       | 51.66 | 67.72 |
|         lake        |  0.0  |  0.0  |
|      dishwasher     | 71.26 | 75.94 |
|        screen       | 50.17 |  64.7 |
|       blanket       | 18.17 |  22.4 |
|      sculpture      | 42.34 | 50.34 |
|         hood        | 67.13 | 82.45 |
|        sconce       | 44.69 | 60.96 |
|         vase        | 34.63 | 49.09 |
|    traffic light    | 27.44 | 54.01 |
|         tray        | 12.93 | 23.81 |
|        ashcan       | 38.87 | 47.01 |
|         fan         | 63.33 | 79.01 |
|         pier        | 32.27 | 82.62 |
|      crt screen     |  6.12 | 23.67 |
|        plate        | 46.37 | 53.56 |
|       monitor       | 11.13 | 12.79 |
|    bulletin board   | 34.85 |  46.3 |
|        shower       |  2.16 | 17.13 |
|       radiator      | 49.73 | 57.53 |
|        glass        | 12.73 | 17.32 |
|        clock        | 35.09 | 38.54 |
|         flag        | 29.09 | 32.09 |
+---------------------+-------+-------+
09/21 07:37:49 - mmengine - INFO - Iter(test) [2000/2000]    aAcc: 80.6200  mIoU: 43.6800  mAcc: 56.2600  data_time: 0.0014  time: 0.1267
Finished processing corruption type: pixelate
Processing corruption type: jpeg_compression
09/21 07:37:53 - mmengine - INFO - 
------------------------------------------------------------
System environment:
    sys.platform: linux
    Python: 3.10.13 | packaged by conda-forge | (main, Dec 23 2023, 15:36:39) [GCC 12.3.0]
    CUDA available: True
    MUSA available: False
    numpy_random_seed: 1511936240
    GPU 0: Tesla V100-SXM2-32GB
    CUDA_HOME: /opt/bwhpc/common/devel/cuda/11.7
    NVCC: Cuda compilation tools, release 11.7, V11.7.99
    GCC: gcc (GCC) 8.5.0 20210514 (Red Hat 8.5.0-18)
    PyTorch: 1.13.1
    PyTorch compiling details: PyTorch built with:
  - GCC 9.3
  - C++ Version: 201402
  - Intel(R) oneAPI Math Kernel Library Version 2023.1-Product Build 20230303 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v2.6.0 (Git Hash 52b5f107dd9cf10910aaa19cb47f3abf9b349815)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - LAPACK is enabled (usually provided by MKL)
  - NNPACK is enabled
  - CPU capability usage: AVX2
  - CUDA Runtime 11.7
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_61,code=sm_61;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86;-gencode;arch=compute_37,code=compute_37
  - CuDNN 8.5
  - Magma 2.6.1
  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.7, CUDNN_VERSION=8.5.0, CXX_COMPILER=/opt/rh/devtoolset-9/root/usr/bin/c++, CXX_FLAGS= -fabi-version=11 -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -DEDGE_PROFILER_USE_KINETO -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Werror=non-virtual-dtor -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wunused-local-typedefs -Wno-unused-parameter -Wno-unused-function -Wno-unused-result -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Werror=cast-function-type -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.13.1, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, USE_ROCM=OFF, 

    TorchVision: 0.14.1
    OpenCV: 3.4.18
    MMEngine: 0.10.4

Runtime environment:
    cudnn_benchmark: True
    mp_cfg: {'mp_start_method': 'fork', 'opencv_num_threads': 0}
    dist_cfg: {'backend': 'nccl'}
    seed: 1511936240
    Distributed launcher: none
    Distributed training: False
    GPU number: 1
------------------------------------------------------------

09/21 07:37:54 - mmengine - INFO - Config:
auto_scale_lr = dict(base_batch_size=16, enable=False)
crop_size = (
    512,
    512,
)
custom_imports = dict(allow_failed_imports=False, imports='mmdet.models')
data_root = 'data/ade/ADEChallengeData2016'
dataset_type = 'ADE20KDataset'
default_hooks = dict(
    checkpoint=dict(
        by_epoch=False, interval=5000, save_best='mIoU',
        type='CheckpointHook'),
    logger=dict(interval=50, log_metric_by_epoch=False, type='LoggerHook'),
    param_scheduler=dict(type='ParamSchedulerHook'),
    sampler_seed=dict(type='DistSamplerSeedHook'),
    timer=dict(type='IterTimerHook'),
    visualization=dict(type='SegVisualizationHook'))
default_scope = 'mmseg'
embed_multi = dict(decay_mult=0.0, lr_mult=1.0)
env_cfg = dict(
    cudnn_benchmark=True,
    dist_cfg=dict(backend='nccl'),
    mp_cfg=dict(mp_start_method='fork', opencv_num_threads=0))
img_ratios = [
    0.5,
    0.75,
    1.0,
    1.25,
    1.5,
    1.75,
]
launcher = 'none'
load_from = '../checkpoint_files/ade20k/mask2former/mask2former_r50_8xb2-160k_ade20k-512x512_20221204_000055-2d1f55f1.pth'
log_level = 'INFO'
log_processor = dict(by_epoch=False)
model = dict(
    backbone=dict(
        deep_stem=False,
        depth=50,
        frozen_stages=-1,
        init_cfg=dict(checkpoint='torchvision://resnet50', type='Pretrained'),
        norm_cfg=dict(requires_grad=False, type='SyncBN'),
        num_stages=4,
        out_indices=(
            0,
            1,
            2,
            3,
        ),
        style='pytorch',
        type='ResNet'),
    data_preprocessor=dict(
        bgr_to_rgb=True,
        corruption='jpeg_compression',
        mean=[
            123.675,
            116.28,
            103.53,
        ],
        pad_val=0,
        seg_pad_val=255,
        size=(
            512,
            512,
        ),
        std=[
            58.395,
            57.12,
            57.375,
        ],
        test_cfg=dict(size_divisor=32),
        type='SegDataPreProcessor'),
    decode_head=dict(
        align_corners=False,
        enforce_decoder_input_project=False,
        feat_channels=256,
        in_channels=[
            256,
            512,
            1024,
            2048,
        ],
        loss_cls=dict(
            class_weight=[
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                0.1,
            ],
            loss_weight=2.0,
            reduction='mean',
            type='mmdet.CrossEntropyLoss',
            use_sigmoid=False),
        loss_dice=dict(
            activate=True,
            eps=1.0,
            loss_weight=5.0,
            naive_dice=True,
            reduction='mean',
            type='mmdet.DiceLoss',
            use_sigmoid=True),
        loss_mask=dict(
            loss_weight=5.0,
            reduction='mean',
            type='mmdet.CrossEntropyLoss',
            use_sigmoid=True),
        num_classes=150,
        num_queries=100,
        num_transformer_feat_level=3,
        out_channels=256,
        pixel_decoder=dict(
            act_cfg=dict(type='ReLU'),
            encoder=dict(
                init_cfg=None,
                layer_cfg=dict(
                    ffn_cfg=dict(
                        act_cfg=dict(inplace=True, type='ReLU'),
                        embed_dims=256,
                        feedforward_channels=1024,
                        ffn_drop=0.0,
                        num_fcs=2),
                    self_attn_cfg=dict(
                        batch_first=True,
                        dropout=0.0,
                        embed_dims=256,
                        im2col_step=64,
                        init_cfg=None,
                        norm_cfg=None,
                        num_heads=8,
                        num_levels=3,
                        num_points=4)),
                num_layers=6),
            init_cfg=None,
            norm_cfg=dict(num_groups=32, type='GN'),
            num_outs=3,
            positional_encoding=dict(normalize=True, num_feats=128),
            type='mmdet.MSDeformAttnPixelDecoder'),
        positional_encoding=dict(normalize=True, num_feats=128),
        strides=[
            4,
            8,
            16,
            32,
        ],
        train_cfg=dict(
            assigner=dict(
                match_costs=[
                    dict(type='mmdet.ClassificationCost', weight=2.0),
                    dict(
                        type='mmdet.CrossEntropyLossCost',
                        use_sigmoid=True,
                        weight=5.0),
                    dict(
                        eps=1.0,
                        pred_act=True,
                        type='mmdet.DiceCost',
                        weight=5.0),
                ],
                type='mmdet.HungarianAssigner'),
            importance_sample_ratio=0.75,
            num_points=12544,
            oversample_ratio=3.0,
            sampler=dict(type='mmdet.MaskPseudoSampler')),
        transformer_decoder=dict(
            init_cfg=None,
            layer_cfg=dict(
                cross_attn_cfg=dict(
                    attn_drop=0.0,
                    batch_first=True,
                    dropout_layer=None,
                    embed_dims=256,
                    num_heads=8,
                    proj_drop=0.0),
                ffn_cfg=dict(
                    act_cfg=dict(inplace=True, type='ReLU'),
                    add_identity=True,
                    dropout_layer=None,
                    embed_dims=256,
                    feedforward_channels=2048,
                    ffn_drop=0.0,
                    num_fcs=2),
                self_attn_cfg=dict(
                    attn_drop=0.0,
                    batch_first=True,
                    dropout_layer=None,
                    embed_dims=256,
                    num_heads=8,
                    proj_drop=0.0)),
            num_layers=9,
            return_intermediate=True),
        type='Mask2FormerHead'),
    test_cfg=dict(mode='whole'),
    train_cfg=dict(),
    type='EncoderDecoder')
num_classes = 150
optim_wrapper = dict(
    clip_grad=dict(max_norm=0.01, norm_type=2),
    optimizer=dict(
        betas=(
            0.9,
            0.999,
        ),
        eps=1e-08,
        lr=0.0001,
        type='AdamW',
        weight_decay=0.05),
    paramwise_cfg=dict(
        custom_keys=dict(
            backbone=dict(decay_mult=1.0, lr_mult=0.1),
            level_embed=dict(decay_mult=0.0, lr_mult=1.0),
            query_embed=dict(decay_mult=0.0, lr_mult=1.0),
            query_feat=dict(decay_mult=0.0, lr_mult=1.0)),
        norm_decay_mult=0.0),
    type='OptimWrapper')
optimizer = dict(
    betas=(
        0.9,
        0.999,
    ),
    eps=1e-08,
    lr=0.0001,
    type='AdamW',
    weight_decay=0.05)
param_scheduler = [
    dict(
        begin=0,
        by_epoch=False,
        end=160000,
        eta_min=0,
        power=0.9,
        type='PolyLR'),
]
resume = False
test_cfg = dict(type='TestLoop')
test_dataloader = dict(
    batch_size=1,
    dataset=dict(
        data_prefix=dict(
            img_path='images/validation',
            seg_map_path='annotations/validation'),
        data_root='data/ade/ADEChallengeData2016',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(keep_ratio=True, scale=(
                2048,
                512,
            ), type='Resize'),
            dict(reduce_zero_label=True, type='LoadAnnotations'),
            dict(type='PackSegInputs'),
        ],
        type='ADE20KDataset'),
    num_workers=4,
    persistent_workers=True,
    sampler=dict(shuffle=False, type='DefaultSampler'))
test_evaluator = dict(
    iou_metrics=[
        'mIoU',
    ], type='IoUMetric')
test_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(keep_ratio=True, scale=(
        2048,
        512,
    ), type='Resize'),
    dict(reduce_zero_label=True, type='LoadAnnotations'),
    dict(type='PackSegInputs'),
]
train_cfg = dict(
    max_iters=160000, type='IterBasedTrainLoop', val_interval=5000)
train_dataloader = dict(
    batch_size=2,
    dataset=dict(
        data_prefix=dict(
            img_path='images/training', seg_map_path='annotations/training'),
        data_root='data/ade/ADEChallengeData2016',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(reduce_zero_label=True, type='LoadAnnotations'),
            dict(
                max_size=2048,
                resize_type='ResizeShortestEdge',
                scales=[
                    256,
                    307,
                    358,
                    409,
                    460,
                    512,
                    563,
                    614,
                    665,
                    716,
                    768,
                    819,
                    870,
                    921,
                    972,
                    1024,
                ],
                type='RandomChoiceResize'),
            dict(
                cat_max_ratio=0.75, crop_size=(
                    512,
                    512,
                ), type='RandomCrop'),
            dict(prob=0.5, type='RandomFlip'),
            dict(type='PhotoMetricDistortion'),
            dict(type='PackSegInputs'),
        ],
        type='ADE20KDataset'),
    num_workers=4,
    persistent_workers=True,
    sampler=dict(shuffle=True, type='InfiniteSampler'))
train_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(reduce_zero_label=True, type='LoadAnnotations'),
    dict(
        max_size=2048,
        resize_type='ResizeShortestEdge',
        scales=[
            256,
            307,
            358,
            409,
            460,
            512,
            563,
            614,
            665,
            716,
            768,
            819,
            870,
            921,
            972,
            1024,
        ],
        type='RandomChoiceResize'),
    dict(cat_max_ratio=0.75, crop_size=(
        512,
        512,
    ), type='RandomCrop'),
    dict(prob=0.5, type='RandomFlip'),
    dict(type='PhotoMetricDistortion'),
    dict(type='PackSegInputs'),
]
tta_model = dict(type='SegTTAModel')
tta_pipeline = [
    dict(backend_args=None, type='LoadImageFromFile'),
    dict(
        transforms=[
            [
                dict(keep_ratio=True, scale_factor=0.5, type='Resize'),
                dict(keep_ratio=True, scale_factor=0.75, type='Resize'),
                dict(keep_ratio=True, scale_factor=1.0, type='Resize'),
                dict(keep_ratio=True, scale_factor=1.25, type='Resize'),
                dict(keep_ratio=True, scale_factor=1.5, type='Resize'),
                dict(keep_ratio=True, scale_factor=1.75, type='Resize'),
            ],
            [
                dict(direction='horizontal', prob=0.0, type='RandomFlip'),
                dict(direction='horizontal', prob=1.0, type='RandomFlip'),
            ],
            [
                dict(type='LoadAnnotations'),
            ],
            [
                dict(type='PackSegInputs'),
            ],
        ],
        type='TestTimeAug'),
]
val_cfg = dict(type='ValLoop')
val_dataloader = dict(
    batch_size=1,
    dataset=dict(
        data_prefix=dict(
            img_path='images/validation',
            seg_map_path='annotations/validation'),
        data_root='data/ade/ADEChallengeData2016',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(keep_ratio=True, scale=(
                2048,
                512,
            ), type='Resize'),
            dict(reduce_zero_label=True, type='LoadAnnotations'),
            dict(type='PackSegInputs'),
        ],
        type='ADE20KDataset'),
    num_workers=4,
    persistent_workers=True,
    sampler=dict(shuffle=False, type='DefaultSampler'))
val_evaluator = dict(
    iou_metrics=[
        'mIoU',
    ], type='IoUMetric')
vis_backends = [
    dict(type='LocalVisBackend'),
]
visualizer = dict(
    name='visualizer',
    type='SegLocalVisualizer',
    vis_backends=[
        dict(type='LocalVisBackend'),
    ])
work_dir = '../corruptions/work_dirs/ade20k/mask2former/mask2former_r50_8xb2-160k_ade20k-512x512/jpeg_compression'

09/21 07:37:56 - mmengine - INFO - Distributed training is not used, all SyncBatchNorm (SyncBN) layers in the model will be automatically reverted to BatchNormXd layers if they are used.
09/21 07:37:56 - mmengine - INFO - Hooks will be executed in the following order:
before_run:
(VERY_HIGH   ) RuntimeInfoHook                    
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
before_train:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_train_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(NORMAL      ) DistSamplerSeedHook                
 -------------------- 
before_train_iter:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_train_iter:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(NORMAL      ) SegVisualizationHook               
(BELOW_NORMAL) LoggerHook                         
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
after_train_epoch:
(NORMAL      ) IterTimerHook                      
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_val:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
before_val_epoch:
(NORMAL      ) IterTimerHook                      
 -------------------- 
before_val_iter:
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_val_iter:
(NORMAL      ) IterTimerHook                      
(NORMAL      ) SegVisualizationHook               
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_val_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
after_val:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
after_train:
(VERY_HIGH   ) RuntimeInfoHook                    
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_test:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
before_test_epoch:
(NORMAL      ) IterTimerHook                      
 -------------------- 
before_test_iter:
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_test_iter:
(NORMAL      ) IterTimerHook                      
(NORMAL      ) SegVisualizationHook               
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_test_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_test:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
after_run:
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
09/21 07:37:57 - mmengine - WARNING - The prefix is not set in metric class IoUMetric.
Loads checkpoint by local backend from path: ../checkpoint_files/ade20k/mask2former/mask2former_r50_8xb2-160k_ade20k-512x512_20221204_000055-2d1f55f1.pth
09/21 07:37:57 - mmengine - INFO - Load checkpoint from ../checkpoint_files/ade20k/mask2former/mask2former_r50_8xb2-160k_ade20k-512x512_20221204_000055-2d1f55f1.pth
09/21 07:39:07 - mmengine - INFO - Iter(test) [  50/2000]    eta: 0:45:37  time: 0.9785  data_time: 0.0013  memory: 17167  
09/21 07:39:26 - mmengine - INFO - Iter(test) [ 100/2000]    eta: 0:28:03  time: 0.5922  data_time: 0.0014  memory: 17158  
09/21 07:39:30 - mmengine - INFO - Iter(test) [ 150/2000]    eta: 0:19:00  time: 0.0617  data_time: 0.0013  memory: 872  
09/21 07:39:44 - mmengine - INFO - Iter(test) [ 200/2000]    eta: 0:16:05  time: 0.0788  data_time: 0.0013  memory: 17214  
09/21 07:39:55 - mmengine - INFO - Iter(test) [ 250/2000]    eta: 0:13:45  time: 0.0654  data_time: 0.0013  memory: 17221  
09/21 07:40:04 - mmengine - INFO - Iter(test) [ 300/2000]    eta: 0:11:58  time: 0.1029  data_time: 0.0013  memory: 17162  
09/21 07:40:17 - mmengine - INFO - Iter(test) [ 350/2000]    eta: 0:11:00  time: 0.0595  data_time: 0.0012  memory: 17165  
09/21 07:40:25 - mmengine - INFO - Iter(test) [ 400/2000]    eta: 0:09:51  time: 0.0618  data_time: 0.0012  memory: 17147  
09/21 07:40:29 - mmengine - INFO - Iter(test) [ 450/2000]    eta: 0:08:42  time: 0.0782  data_time: 0.0012  memory: 883  
09/21 07:40:33 - mmengine - INFO - Iter(test) [ 500/2000]    eta: 0:07:46  time: 0.0747  data_time: 0.0013  memory: 872  
09/21 07:40:36 - mmengine - INFO - Iter(test) [ 550/2000]    eta: 0:06:59  time: 0.0816  data_time: 0.0013  memory: 983  
09/21 07:40:40 - mmengine - INFO - Iter(test) [ 600/2000]    eta: 0:06:19  time: 0.0803  data_time: 0.0013  memory: 981  
09/21 07:40:48 - mmengine - INFO - Iter(test) [ 650/2000]    eta: 0:05:54  time: 0.5522  data_time: 0.0012  memory: 17168  
09/21 07:40:57 - mmengine - INFO - Iter(test) [ 700/2000]    eta: 0:05:33  time: 0.1001  data_time: 0.0014  memory: 17163  
09/21 07:41:00 - mmengine - INFO - Iter(test) [ 750/2000]    eta: 0:05:05  time: 0.0784  data_time: 0.0012  memory: 1039  
09/21 07:41:04 - mmengine - INFO - Iter(test) [ 800/2000]    eta: 0:04:40  time: 0.0621  data_time: 0.0014  memory: 872  
09/21 07:41:08 - mmengine - INFO - Iter(test) [ 850/2000]    eta: 0:04:17  time: 0.0626  data_time: 0.0014  memory: 844  
09/21 07:41:12 - mmengine - INFO - Iter(test) [ 900/2000]    eta: 0:03:57  time: 0.0573  data_time: 0.0012  memory: 925  
09/21 07:41:16 - mmengine - INFO - Iter(test) [ 950/2000]    eta: 0:03:39  time: 0.0859  data_time: 0.0013  memory: 955  
09/21 07:41:20 - mmengine - INFO - Iter(test) [1000/2000]    eta: 0:03:22  time: 0.0813  data_time: 0.0012  memory: 955  
09/21 07:41:28 - mmengine - INFO - Iter(test) [1050/2000]    eta: 0:03:11  time: 0.0620  data_time: 0.0013  memory: 17170  
09/21 07:41:32 - mmengine - INFO - Iter(test) [1100/2000]    eta: 0:02:55  time: 0.0771  data_time: 0.0014  memory: 952  
09/21 07:41:36 - mmengine - INFO - Iter(test) [1150/2000]    eta: 0:02:41  time: 0.0605  data_time: 0.0013  memory: 924  
09/21 07:41:40 - mmengine - INFO - Iter(test) [1200/2000]    eta: 0:02:28  time: 0.0809  data_time: 0.0012  memory: 1829  
09/21 07:41:49 - mmengine - INFO - Iter(test) [1250/2000]    eta: 0:02:19  time: 0.0793  data_time: 0.0013  memory: 17158  
09/21 07:41:53 - mmengine - INFO - Iter(test) [1300/2000]    eta: 0:02:06  time: 0.0820  data_time: 0.0013  memory: 872  
09/21 07:41:57 - mmengine - INFO - Iter(test) [1350/2000]    eta: 0:01:55  time: 0.0864  data_time: 0.0012  memory: 872  
09/21 07:42:01 - mmengine - INFO - Iter(test) [1400/2000]    eta: 0:01:44  time: 0.0622  data_time: 0.0012  memory: 953  
09/21 07:42:05 - mmengine - INFO - Iter(test) [1450/2000]    eta: 0:01:33  time: 0.1045  data_time: 0.0013  memory: 955  
09/21 07:42:09 - mmengine - INFO - Iter(test) [1500/2000]    eta: 0:01:23  time: 0.0583  data_time: 0.0012  memory: 869  
09/21 07:42:13 - mmengine - INFO - Iter(test) [1550/2000]    eta: 0:01:14  time: 0.0749  data_time: 0.0012  memory: 955  
09/21 07:42:17 - mmengine - INFO - Iter(test) [1600/2000]    eta: 0:01:04  time: 0.0601  data_time: 0.0013  memory: 844  
09/21 07:42:26 - mmengine - INFO - Iter(test) [1650/2000]    eta: 0:00:56  time: 0.0580  data_time: 0.0012  memory: 17165  
09/21 07:42:29 - mmengine - INFO - Iter(test) [1700/2000]    eta: 0:00:47  time: 0.0619  data_time: 0.0014  memory: 952  
09/21 07:42:33 - mmengine - INFO - Iter(test) [1750/2000]    eta: 0:00:39  time: 0.0770  data_time: 0.0012  memory: 980  
09/21 07:42:37 - mmengine - INFO - Iter(test) [1800/2000]    eta: 0:00:31  time: 0.0986  data_time: 0.0014  memory: 872  
09/21 07:42:41 - mmengine - INFO - Iter(test) [1850/2000]    eta: 0:00:23  time: 0.0622  data_time: 0.0014  memory: 787  
09/21 07:42:45 - mmengine - INFO - Iter(test) [1900/2000]    eta: 0:00:15  time: 0.0816  data_time: 0.0013  memory: 1011  
09/21 07:42:48 - mmengine - INFO - Iter(test) [1950/2000]    eta: 0:00:07  time: 0.0793  data_time: 0.0012  memory: 1258  
09/21 07:42:53 - mmengine - INFO - Iter(test) [2000/2000]    eta: 0:00:00  time: 0.1155  data_time: 0.0011  memory: 1037  
09/21 07:42:53 - mmengine - INFO - per class results:
09/21 07:42:53 - mmengine - INFO - 
+---------------------+-------+-------+
|        Class        |  IoU  |  Acc  |
+---------------------+-------+-------+
|         wall        | 74.12 | 87.99 |
|       building      | 79.67 | 89.69 |
|         sky         | 94.13 | 97.38 |
|        floor        | 78.77 |  90.1 |
|         tree        | 72.05 | 84.76 |
|       ceiling       | 81.22 | 90.85 |
|         road        | 80.34 | 87.17 |
|         bed         | 87.23 |  94.1 |
|      windowpane     |  59.0 |  75.0 |
|        grass        | 68.44 | 83.03 |
|       cabinet       | 53.04 | 67.45 |
|       sidewalk      | 63.75 | 75.84 |
|        person       | 79.92 |  87.2 |
|        earth        | 34.26 | 52.48 |
|         door        | 41.35 | 56.82 |
|        table        | 57.79 | 72.55 |
|       mountain      | 58.88 |  71.7 |
|        plant        | 50.64 | 58.38 |
|       curtain       | 72.08 | 79.01 |
|        chair        | 52.97 | 65.33 |
|         car         |  82.5 | 87.94 |
|        water        | 37.89 | 49.56 |
|       painting      | 68.98 | 80.65 |
|         sofa        | 64.38 | 82.93 |
|        shelf        | 35.16 | 51.77 |
|        house        | 40.63 | 65.28 |
|         sea         | 43.71 | 72.25 |
|        mirror       | 59.03 | 68.01 |
|         rug         | 59.13 | 68.87 |
|        field        | 34.66 | 59.29 |
|       armchair      | 36.89 | 51.98 |
|         seat        | 53.33 |  71.6 |
|        fence        | 32.15 |  47.9 |
|         desk        | 48.05 | 65.59 |
|         rock        | 44.02 |  68.2 |
|       wardrobe      | 36.77 | 56.67 |
|         lamp        | 67.45 | 76.83 |
|       bathtub       | 70.92 | 84.45 |
|       railing       | 24.51 | 34.33 |
|       cushion       | 52.05 | 64.28 |
|         base        | 24.17 | 36.71 |
|         box         | 23.56 | 32.61 |
|        column       | 46.14 | 57.16 |
|      signboard      | 38.41 | 47.48 |
|   chest of drawers  | 41.67 | 62.23 |
|       counter       | 26.35 | 35.57 |
|         sand        | 30.34 | 46.07 |
|         sink        | 66.53 | 76.55 |
|      skyscraper     |  59.1 | 79.46 |
|      fireplace      | 67.41 | 79.59 |
|     refrigerator    | 59.86 |  76.2 |
|      grandstand     | 49.64 | 71.51 |
|         path        | 19.47 | 34.61 |
|        stairs       | 35.18 |  44.8 |
|        runway       | 66.08 | 79.02 |
|         case        | 39.67 | 59.57 |
|      pool table     | 91.23 |  96.7 |
|        pillow       | 50.57 | 61.15 |
|     screen door     |  44.9 | 57.31 |
|       stairway      | 35.78 | 43.56 |
|        river        |  5.43 | 15.96 |
|        bridge       | 55.92 | 85.69 |
|       bookcase      | 37.45 | 60.44 |
|        blind        | 18.69 | 19.23 |
|     coffee table    | 62.46 | 80.18 |
|        toilet       | 84.44 | 87.92 |
|        flower       |  41.1 |  52.3 |
|         book        | 48.41 | 66.86 |
|         hill        |  8.77 | 13.16 |
|        bench        | 40.52 | 49.73 |
|      countertop     | 51.16 | 62.68 |
|        stove        | 68.97 | 81.89 |
|         palm        | 52.39 | 73.25 |
|    kitchen island   | 29.92 | 61.36 |
|       computer      |  57.3 |  62.6 |
|     swivel chair    | 46.18 | 63.71 |
|         boat        | 41.82 | 47.69 |
|         bar         | 40.52 | 49.84 |
|    arcade machine   | 20.25 | 37.42 |
|        hovel        | 17.78 | 35.23 |
|         bus         |  82.6 | 91.47 |
|        towel        | 58.18 | 63.66 |
|        light        | 58.47 |  71.8 |
|        truck        | 24.88 | 50.43 |
|        tower        | 28.45 | 54.78 |
|      chandelier     | 64.94 | 75.77 |
|        awning       | 26.62 | 29.74 |
|     streetlight     | 30.96 | 42.98 |
|        booth        | 46.78 | 62.19 |
| television receiver | 58.06 | 71.59 |
|       airplane      | 52.94 | 63.66 |
|      dirt track     |  9.57 | 22.19 |
|       apparel       | 36.55 | 63.19 |
|         pole        | 23.64 | 35.56 |
|         land        |  5.93 | 11.81 |
|      bannister      |  4.94 |  6.42 |
|      escalator      | 53.41 | 69.91 |
|       ottoman       | 44.99 | 58.09 |
|        bottle       | 36.02 | 56.66 |
|        buffet       | 37.01 | 42.47 |
|        poster       | 17.95 | 26.37 |
|        stage        | 16.41 | 21.84 |
|         van         | 46.27 | 62.21 |
|         ship        | 83.76 |  87.3 |
|       fountain      | 20.72 | 21.27 |
|    conveyer belt    | 46.63 | 64.51 |
|        canopy       | 28.16 | 38.13 |
|        washer       | 65.87 |  72.9 |
|      plaything      | 21.07 | 32.82 |
|    swimming pool    | 43.23 | 62.21 |
|        stool        |  45.8 | 57.44 |
|        barrel       | 24.67 | 40.96 |
|        basket       | 19.08 | 23.36 |
|      waterfall      | 37.39 | 54.05 |
|         tent        | 89.74 | 98.24 |
|         bag         |  9.95 | 11.78 |
|       minibike      | 64.89 | 81.62 |
|        cradle       | 72.46 |  95.0 |
|         oven        | 18.68 | 53.48 |
|         ball        | 44.12 |  51.5 |
|         food        | 60.96 |  71.7 |
|         step        | 12.25 | 19.72 |
|         tank        |  41.8 |  43.8 |
|      trade name     | 25.56 | 29.65 |
|      microwave      | 37.53 | 40.47 |
|         pot         | 43.56 | 48.49 |
|        animal       | 56.16 | 59.58 |
|       bicycle       | 54.86 | 67.83 |
|         lake        |  0.02 |  0.02 |
|      dishwasher     | 55.47 |  60.9 |
|        screen       | 61.94 | 70.19 |
|       blanket       |  7.16 |  8.25 |
|      sculpture      | 36.21 | 49.21 |
|         hood        | 64.06 | 82.71 |
|        sconce       | 44.24 | 57.59 |
|         vase        | 34.74 | 56.85 |
|    traffic light    | 28.98 | 50.86 |
|         tray        |  5.89 | 12.21 |
|        ashcan       | 34.37 | 48.08 |
|         fan         | 55.07 | 71.93 |
|         pier        | 37.29 | 84.73 |
|      crt screen     |  9.32 | 31.27 |
|        plate        | 37.61 | 46.89 |
|       monitor       |  9.81 |  10.6 |
|    bulletin board   | 45.29 |  55.2 |
|        shower       |  1.4  | 11.85 |
|       radiator      | 43.85 | 47.58 |
|        glass        | 14.32 | 16.02 |
|        clock        | 30.75 | 34.88 |
|         flag        | 29.56 | 32.11 |
+---------------------+-------+-------+
09/21 07:42:53 - mmengine - INFO - Iter(test) [2000/2000]    aAcc: 80.6400  mIoU: 44.6600  mAcc: 57.2200  data_time: 0.0014  time: 0.1477
Finished processing corruption type: jpeg_compression
Runtime: 1726897374

============================= JOB FEEDBACK =============================

NodeName=uc2n485
Job ID: 24247177
Cluster: uc2
User/Group: ma_mkacar/ma_ma
State: COMPLETED (exit code 0)
Nodes: 1
Cores per node: 16
CPU Utilized: 06:11:07
CPU Efficiency: 5.59% of 4-14:37:20 core-walltime
Job Wall-clock time: 06:54:50
Memory Utilized: 3.43 GB
Memory Efficiency: 3.43% of 100.00 GB
