Started at Sat Sep 21 01:08:57 CEST 2024
Processing corruption type: gaussian_noise
09/21 01:09:00 - mmengine - INFO - 
------------------------------------------------------------
System environment:
    sys.platform: linux
    Python: 3.10.13 | packaged by conda-forge | (main, Dec 23 2023, 15:36:39) [GCC 12.3.0]
    CUDA available: True
    MUSA available: False
    numpy_random_seed: 1688089443
    GPU 0: Tesla V100-SXM2-32GB
    CUDA_HOME: /opt/bwhpc/common/devel/cuda/11.7
    NVCC: Cuda compilation tools, release 11.7, V11.7.99
    GCC: gcc (GCC) 8.5.0 20210514 (Red Hat 8.5.0-18)
    PyTorch: 1.13.1
    PyTorch compiling details: PyTorch built with:
  - GCC 9.3
  - C++ Version: 201402
  - Intel(R) oneAPI Math Kernel Library Version 2023.1-Product Build 20230303 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v2.6.0 (Git Hash 52b5f107dd9cf10910aaa19cb47f3abf9b349815)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - LAPACK is enabled (usually provided by MKL)
  - NNPACK is enabled
  - CPU capability usage: AVX2
  - CUDA Runtime 11.7
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_61,code=sm_61;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86;-gencode;arch=compute_37,code=compute_37
  - CuDNN 8.5
  - Magma 2.6.1
  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.7, CUDNN_VERSION=8.5.0, CXX_COMPILER=/opt/rh/devtoolset-9/root/usr/bin/c++, CXX_FLAGS= -fabi-version=11 -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -DEDGE_PROFILER_USE_KINETO -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Werror=non-virtual-dtor -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wunused-local-typedefs -Wno-unused-parameter -Wno-unused-function -Wno-unused-result -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Werror=cast-function-type -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.13.1, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, USE_ROCM=OFF, 

    TorchVision: 0.14.1
    OpenCV: 3.4.18
    MMEngine: 0.10.4

Runtime environment:
    cudnn_benchmark: True
    mp_cfg: {'mp_start_method': 'fork', 'opencv_num_threads': 0}
    dist_cfg: {'backend': 'nccl'}
    seed: 1688089443
    Distributed launcher: none
    Distributed training: False
    GPU number: 1
------------------------------------------------------------

09/21 01:09:01 - mmengine - INFO - Config:
auto_scale_lr = dict(base_batch_size=16, enable=False)
backbone_embed_multi = dict(decay_mult=0.0, lr_mult=0.1)
backbone_norm_multi = dict(decay_mult=0.0, lr_mult=0.1)
crop_size = (
    512,
    512,
)
custom_imports = dict(allow_failed_imports=False, imports='mmdet.models')
custom_keys = dict({
    'absolute_pos_embed':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone':
    dict(decay_mult=1.0, lr_mult=0.1),
    'backbone.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.patch_embed.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.0.blocks.0.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.0.blocks.1.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.0.downsample.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.1.blocks.0.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.1.blocks.1.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.1.downsample.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.0.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.1.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.2.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.3.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.4.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.5.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.downsample.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.3.blocks.0.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.3.blocks.1.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'level_embed':
    dict(decay_mult=0.0, lr_mult=1.0),
    'query_embed':
    dict(decay_mult=0.0, lr_mult=1.0),
    'query_feat':
    dict(decay_mult=0.0, lr_mult=1.0),
    'relative_position_bias_table':
    dict(decay_mult=0.0, lr_mult=0.1)
})
data_root = 'data/ade/ADEChallengeData2016'
dataset_type = 'ADE20KDataset'
default_hooks = dict(
    checkpoint=dict(
        by_epoch=False, interval=5000, save_best='mIoU',
        type='CheckpointHook'),
    logger=dict(interval=50, log_metric_by_epoch=False, type='LoggerHook'),
    param_scheduler=dict(type='ParamSchedulerHook'),
    sampler_seed=dict(type='DistSamplerSeedHook'),
    timer=dict(type='IterTimerHook'),
    visualization=dict(type='SegVisualizationHook'))
default_scope = 'mmseg'
depths = [
    2,
    2,
    6,
    2,
]
embed_multi = dict(decay_mult=0.0, lr_mult=1.0)
env_cfg = dict(
    cudnn_benchmark=True,
    dist_cfg=dict(backend='nccl'),
    mp_cfg=dict(mp_start_method='fork', opencv_num_threads=0))
img_ratios = [
    0.5,
    0.75,
    1.0,
    1.25,
    1.5,
    1.75,
]
launcher = 'none'
load_from = '../checkpoint_files/ade20k/mask2former/mask2former_swin-t_8xb2-160k_ade20k-512x512_20221203_234230-7d64e5dd.pth'
log_level = 'INFO'
log_processor = dict(by_epoch=False)
model = dict(
    backbone=dict(
        attn_drop_rate=0.0,
        depths=[
            2,
            2,
            6,
            2,
        ],
        drop_path_rate=0.3,
        drop_rate=0.0,
        embed_dims=96,
        frozen_stages=-1,
        init_cfg=dict(
            checkpoint=
            'https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/swin/swin_tiny_patch4_window7_224_20220317-1cdeb081.pth',
            type='Pretrained'),
        mlp_ratio=4,
        num_heads=[
            3,
            6,
            12,
            24,
        ],
        out_indices=(
            0,
            1,
            2,
            3,
        ),
        patch_norm=True,
        qk_scale=None,
        qkv_bias=True,
        type='SwinTransformer',
        window_size=7,
        with_cp=False),
    data_preprocessor=dict(
        bgr_to_rgb=True,
        corruption='gaussian_noise',
        mean=[
            123.675,
            116.28,
            103.53,
        ],
        pad_val=0,
        seg_pad_val=255,
        size=(
            512,
            512,
        ),
        std=[
            58.395,
            57.12,
            57.375,
        ],
        test_cfg=dict(size_divisor=32),
        type='SegDataPreProcessor'),
    decode_head=dict(
        align_corners=False,
        enforce_decoder_input_project=False,
        feat_channels=256,
        in_channels=[
            96,
            192,
            384,
            768,
        ],
        loss_cls=dict(
            class_weight=[
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                0.1,
            ],
            loss_weight=2.0,
            reduction='mean',
            type='mmdet.CrossEntropyLoss',
            use_sigmoid=False),
        loss_dice=dict(
            activate=True,
            eps=1.0,
            loss_weight=5.0,
            naive_dice=True,
            reduction='mean',
            type='mmdet.DiceLoss',
            use_sigmoid=True),
        loss_mask=dict(
            loss_weight=5.0,
            reduction='mean',
            type='mmdet.CrossEntropyLoss',
            use_sigmoid=True),
        num_classes=150,
        num_queries=100,
        num_transformer_feat_level=3,
        out_channels=256,
        pixel_decoder=dict(
            act_cfg=dict(type='ReLU'),
            encoder=dict(
                init_cfg=None,
                layer_cfg=dict(
                    ffn_cfg=dict(
                        act_cfg=dict(inplace=True, type='ReLU'),
                        embed_dims=256,
                        feedforward_channels=1024,
                        ffn_drop=0.0,
                        num_fcs=2),
                    self_attn_cfg=dict(
                        batch_first=True,
                        dropout=0.0,
                        embed_dims=256,
                        im2col_step=64,
                        init_cfg=None,
                        norm_cfg=None,
                        num_heads=8,
                        num_levels=3,
                        num_points=4)),
                num_layers=6),
            init_cfg=None,
            norm_cfg=dict(num_groups=32, type='GN'),
            num_outs=3,
            positional_encoding=dict(normalize=True, num_feats=128),
            type='mmdet.MSDeformAttnPixelDecoder'),
        positional_encoding=dict(normalize=True, num_feats=128),
        strides=[
            4,
            8,
            16,
            32,
        ],
        train_cfg=dict(
            assigner=dict(
                match_costs=[
                    dict(type='mmdet.ClassificationCost', weight=2.0),
                    dict(
                        type='mmdet.CrossEntropyLossCost',
                        use_sigmoid=True,
                        weight=5.0),
                    dict(
                        eps=1.0,
                        pred_act=True,
                        type='mmdet.DiceCost',
                        weight=5.0),
                ],
                type='mmdet.HungarianAssigner'),
            importance_sample_ratio=0.75,
            num_points=12544,
            oversample_ratio=3.0,
            sampler=dict(type='mmdet.MaskPseudoSampler')),
        transformer_decoder=dict(
            init_cfg=None,
            layer_cfg=dict(
                cross_attn_cfg=dict(
                    attn_drop=0.0,
                    batch_first=True,
                    dropout_layer=None,
                    embed_dims=256,
                    num_heads=8,
                    proj_drop=0.0),
                ffn_cfg=dict(
                    act_cfg=dict(inplace=True, type='ReLU'),
                    add_identity=True,
                    dropout_layer=None,
                    embed_dims=256,
                    feedforward_channels=2048,
                    ffn_drop=0.0,
                    num_fcs=2),
                self_attn_cfg=dict(
                    attn_drop=0.0,
                    batch_first=True,
                    dropout_layer=None,
                    embed_dims=256,
                    num_heads=8,
                    proj_drop=0.0)),
            num_layers=9,
            return_intermediate=True),
        type='Mask2FormerHead'),
    test_cfg=dict(mode='whole'),
    train_cfg=dict(),
    type='EncoderDecoder')
num_classes = 150
optim_wrapper = dict(
    clip_grad=dict(max_norm=0.01, norm_type=2),
    optimizer=dict(
        betas=(
            0.9,
            0.999,
        ),
        eps=1e-08,
        lr=0.0001,
        type='AdamW',
        weight_decay=0.05),
    paramwise_cfg=dict(
        custom_keys=dict({
            'absolute_pos_embed':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone':
            dict(decay_mult=1.0, lr_mult=0.1),
            'backbone.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.patch_embed.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.0.blocks.0.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.0.blocks.1.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.0.downsample.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.1.blocks.0.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.1.blocks.1.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.1.downsample.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.0.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.1.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.2.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.3.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.4.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.5.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.downsample.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.3.blocks.0.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.3.blocks.1.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'level_embed':
            dict(decay_mult=0.0, lr_mult=1.0),
            'query_embed':
            dict(decay_mult=0.0, lr_mult=1.0),
            'query_feat':
            dict(decay_mult=0.0, lr_mult=1.0),
            'relative_position_bias_table':
            dict(decay_mult=0.0, lr_mult=0.1)
        }),
        norm_decay_mult=0.0),
    type='OptimWrapper')
optimizer = dict(
    betas=(
        0.9,
        0.999,
    ),
    eps=1e-08,
    lr=0.0001,
    type='AdamW',
    weight_decay=0.05)
param_scheduler = [
    dict(
        begin=0,
        by_epoch=False,
        end=160000,
        eta_min=0,
        power=0.9,
        type='PolyLR'),
]
pretrained = 'https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/swin/swin_tiny_patch4_window7_224_20220317-1cdeb081.pth'
resume = False
test_cfg = dict(type='TestLoop')
test_dataloader = dict(
    batch_size=1,
    dataset=dict(
        data_prefix=dict(
            img_path='images/validation',
            seg_map_path='annotations/validation'),
        data_root='data/ade/ADEChallengeData2016',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(keep_ratio=True, scale=(
                2048,
                512,
            ), type='Resize'),
            dict(reduce_zero_label=True, type='LoadAnnotations'),
            dict(type='PackSegInputs'),
        ],
        type='ADE20KDataset'),
    num_workers=4,
    persistent_workers=True,
    sampler=dict(shuffle=False, type='DefaultSampler'))
test_evaluator = dict(
    iou_metrics=[
        'mIoU',
    ], type='IoUMetric')
test_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(keep_ratio=True, scale=(
        2048,
        512,
    ), type='Resize'),
    dict(reduce_zero_label=True, type='LoadAnnotations'),
    dict(type='PackSegInputs'),
]
train_cfg = dict(
    max_iters=160000, type='IterBasedTrainLoop', val_interval=5000)
train_dataloader = dict(
    batch_size=2,
    dataset=dict(
        data_prefix=dict(
            img_path='images/training', seg_map_path='annotations/training'),
        data_root='data/ade/ADEChallengeData2016',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(reduce_zero_label=True, type='LoadAnnotations'),
            dict(
                max_size=2048,
                resize_type='ResizeShortestEdge',
                scales=[
                    256,
                    307,
                    358,
                    409,
                    460,
                    512,
                    563,
                    614,
                    665,
                    716,
                    768,
                    819,
                    870,
                    921,
                    972,
                    1024,
                ],
                type='RandomChoiceResize'),
            dict(
                cat_max_ratio=0.75, crop_size=(
                    512,
                    512,
                ), type='RandomCrop'),
            dict(prob=0.5, type='RandomFlip'),
            dict(type='PhotoMetricDistortion'),
            dict(type='PackSegInputs'),
        ],
        type='ADE20KDataset'),
    num_workers=4,
    persistent_workers=True,
    sampler=dict(shuffle=True, type='InfiniteSampler'))
train_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(reduce_zero_label=True, type='LoadAnnotations'),
    dict(
        max_size=2048,
        resize_type='ResizeShortestEdge',
        scales=[
            256,
            307,
            358,
            409,
            460,
            512,
            563,
            614,
            665,
            716,
            768,
            819,
            870,
            921,
            972,
            1024,
        ],
        type='RandomChoiceResize'),
    dict(cat_max_ratio=0.75, crop_size=(
        512,
        512,
    ), type='RandomCrop'),
    dict(prob=0.5, type='RandomFlip'),
    dict(type='PhotoMetricDistortion'),
    dict(type='PackSegInputs'),
]
tta_model = dict(type='SegTTAModel')
tta_pipeline = [
    dict(backend_args=None, type='LoadImageFromFile'),
    dict(
        transforms=[
            [
                dict(keep_ratio=True, scale_factor=0.5, type='Resize'),
                dict(keep_ratio=True, scale_factor=0.75, type='Resize'),
                dict(keep_ratio=True, scale_factor=1.0, type='Resize'),
                dict(keep_ratio=True, scale_factor=1.25, type='Resize'),
                dict(keep_ratio=True, scale_factor=1.5, type='Resize'),
                dict(keep_ratio=True, scale_factor=1.75, type='Resize'),
            ],
            [
                dict(direction='horizontal', prob=0.0, type='RandomFlip'),
                dict(direction='horizontal', prob=1.0, type='RandomFlip'),
            ],
            [
                dict(type='LoadAnnotations'),
            ],
            [
                dict(type='PackSegInputs'),
            ],
        ],
        type='TestTimeAug'),
]
val_cfg = dict(type='ValLoop')
val_dataloader = dict(
    batch_size=1,
    dataset=dict(
        data_prefix=dict(
            img_path='images/validation',
            seg_map_path='annotations/validation'),
        data_root='data/ade/ADEChallengeData2016',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(keep_ratio=True, scale=(
                2048,
                512,
            ), type='Resize'),
            dict(reduce_zero_label=True, type='LoadAnnotations'),
            dict(type='PackSegInputs'),
        ],
        type='ADE20KDataset'),
    num_workers=4,
    persistent_workers=True,
    sampler=dict(shuffle=False, type='DefaultSampler'))
val_evaluator = dict(
    iou_metrics=[
        'mIoU',
    ], type='IoUMetric')
vis_backends = [
    dict(type='LocalVisBackend'),
]
visualizer = dict(
    name='visualizer',
    type='SegLocalVisualizer',
    vis_backends=[
        dict(type='LocalVisBackend'),
    ])
work_dir = '../corruptions/work_dirs/ade20k/mask2former/mask2former_swin-t_8xb2-160k_ade20k-512x512/gaussian_noise'

09/21 01:09:03 - mmengine - INFO - Distributed training is not used, all SyncBatchNorm (SyncBN) layers in the model will be automatically reverted to BatchNormXd layers if they are used.
09/21 01:09:03 - mmengine - INFO - Hooks will be executed in the following order:
before_run:
(VERY_HIGH   ) RuntimeInfoHook                    
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
before_train:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_train_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(NORMAL      ) DistSamplerSeedHook                
 -------------------- 
before_train_iter:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_train_iter:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(NORMAL      ) SegVisualizationHook               
(BELOW_NORMAL) LoggerHook                         
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
after_train_epoch:
(NORMAL      ) IterTimerHook                      
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_val:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
before_val_epoch:
(NORMAL      ) IterTimerHook                      
 -------------------- 
before_val_iter:
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_val_iter:
(NORMAL      ) IterTimerHook                      
(NORMAL      ) SegVisualizationHook               
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_val_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
after_val:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
after_train:
(VERY_HIGH   ) RuntimeInfoHook                    
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_test:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
before_test_epoch:
(NORMAL      ) IterTimerHook                      
 -------------------- 
before_test_iter:
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_test_iter:
(NORMAL      ) IterTimerHook                      
(NORMAL      ) SegVisualizationHook               
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_test_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_test:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
after_run:
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
09/21 01:09:04 - mmengine - WARNING - The prefix is not set in metric class IoUMetric.
Loads checkpoint by local backend from path: ../checkpoint_files/ade20k/mask2former/mask2former_swin-t_8xb2-160k_ade20k-512x512_20221203_234230-7d64e5dd.pth
09/21 01:09:06 - mmengine - INFO - Load checkpoint from ../checkpoint_files/ade20k/mask2former/mask2former_swin-t_8xb2-160k_ade20k-512x512_20221203_234230-7d64e5dd.pth
09/21 01:09:25 - mmengine - INFO - Iter(test) [  50/2000]    eta: 0:12:11  time: 0.2750  data_time: 0.0016  memory: 12733  
09/21 01:09:32 - mmengine - INFO - Iter(test) [ 100/2000]    eta: 0:08:17  time: 0.1814  data_time: 0.0017  memory: 12714  
09/21 01:09:37 - mmengine - INFO - Iter(test) [ 150/2000]    eta: 0:06:27  time: 0.1065  data_time: 0.0031  memory: 853  
09/21 01:09:45 - mmengine - INFO - Iter(test) [ 200/2000]    eta: 0:05:46  time: 0.1008  data_time: 0.0016  memory: 12754  
09/21 01:09:51 - mmengine - INFO - Iter(test) [ 250/2000]    eta: 0:05:15  time: 0.1010  data_time: 0.0016  memory: 12756  
09/21 01:09:57 - mmengine - INFO - Iter(test) [ 300/2000]    eta: 0:04:47  time: 0.1020  data_time: 0.0015  memory: 12721  
09/21 01:10:03 - mmengine - INFO - Iter(test) [ 350/2000]    eta: 0:04:30  time: 0.0922  data_time: 0.0015  memory: 12728  
09/21 01:10:09 - mmengine - INFO - Iter(test) [ 400/2000]    eta: 0:04:10  time: 0.0958  data_time: 0.0014  memory: 12694  
09/21 01:10:13 - mmengine - INFO - Iter(test) [ 450/2000]    eta: 0:03:52  time: 0.0950  data_time: 0.0014  memory: 894  
09/21 01:10:18 - mmengine - INFO - Iter(test) [ 500/2000]    eta: 0:03:37  time: 0.0997  data_time: 0.0014  memory: 853  
09/21 01:10:24 - mmengine - INFO - Iter(test) [ 550/2000]    eta: 0:03:24  time: 0.1044  data_time: 0.0015  memory: 961  
09/21 01:10:29 - mmengine - INFO - Iter(test) [ 600/2000]    eta: 0:03:12  time: 0.1008  data_time: 0.0015  memory: 958  
09/21 01:10:34 - mmengine - INFO - Iter(test) [ 650/2000]    eta: 0:03:03  time: 0.1833  data_time: 0.0014  memory: 12735  
09/21 01:10:40 - mmengine - INFO - Iter(test) [ 700/2000]    eta: 0:02:54  time: 0.0966  data_time: 0.0016  memory: 12724  
09/21 01:10:45 - mmengine - INFO - Iter(test) [ 750/2000]    eta: 0:02:44  time: 0.0980  data_time: 0.0014  memory: 1014  
09/21 01:10:50 - mmengine - INFO - Iter(test) [ 800/2000]    eta: 0:02:35  time: 0.1010  data_time: 0.0015  memory: 853  
09/21 01:10:55 - mmengine - INFO - Iter(test) [ 850/2000]    eta: 0:02:26  time: 0.0953  data_time: 0.0016  memory: 826  
09/21 01:10:59 - mmengine - INFO - Iter(test) [ 900/2000]    eta: 0:02:17  time: 0.0866  data_time: 0.0014  memory: 906  
09/21 01:11:04 - mmengine - INFO - Iter(test) [ 950/2000]    eta: 0:02:10  time: 0.1009  data_time: 0.0015  memory: 934  
09/21 01:11:09 - mmengine - INFO - Iter(test) [1000/2000]    eta: 0:02:02  time: 0.0970  data_time: 0.0014  memory: 934  
09/21 01:11:15 - mmengine - INFO - Iter(test) [1050/2000]    eta: 0:01:56  time: 0.1027  data_time: 0.0014  memory: 12737  
09/21 01:11:20 - mmengine - INFO - Iter(test) [1100/2000]    eta: 0:01:49  time: 0.1019  data_time: 0.0015  memory: 931  
09/21 01:11:25 - mmengine - INFO - Iter(test) [1150/2000]    eta: 0:01:42  time: 0.1004  data_time: 0.0014  memory: 904  
09/21 01:11:30 - mmengine - INFO - Iter(test) [1200/2000]    eta: 0:01:35  time: 0.0973  data_time: 0.0014  memory: 1839  
09/21 01:11:36 - mmengine - INFO - Iter(test) [1250/2000]    eta: 0:01:29  time: 0.0987  data_time: 0.0014  memory: 12716  
09/21 01:11:40 - mmengine - INFO - Iter(test) [1300/2000]    eta: 0:01:23  time: 0.0991  data_time: 0.0014  memory: 853  
09/21 01:11:45 - mmengine - INFO - Iter(test) [1350/2000]    eta: 0:01:16  time: 0.0890  data_time: 0.0014  memory: 853  
09/21 01:11:50 - mmengine - INFO - Iter(test) [1400/2000]    eta: 0:01:10  time: 0.0963  data_time: 0.0014  memory: 931  
09/21 01:11:55 - mmengine - INFO - Iter(test) [1450/2000]    eta: 0:01:03  time: 0.1008  data_time: 0.0014  memory: 934  
09/21 01:12:00 - mmengine - INFO - Iter(test) [1500/2000]    eta: 0:00:57  time: 0.0967  data_time: 0.0013  memory: 852  
09/21 01:12:04 - mmengine - INFO - Iter(test) [1550/2000]    eta: 0:00:51  time: 0.0947  data_time: 0.0014  memory: 934  
09/21 01:12:09 - mmengine - INFO - Iter(test) [1600/2000]    eta: 0:00:45  time: 0.0926  data_time: 0.0015  memory: 826  
09/21 01:12:15 - mmengine - INFO - Iter(test) [1650/2000]    eta: 0:00:40  time: 0.0957  data_time: 0.0013  memory: 12725  
09/21 01:12:20 - mmengine - INFO - Iter(test) [1700/2000]    eta: 0:00:34  time: 0.1027  data_time: 0.0015  memory: 930  
09/21 01:12:25 - mmengine - INFO - Iter(test) [1750/2000]    eta: 0:00:28  time: 0.0981  data_time: 0.0014  memory: 957  
09/21 01:12:29 - mmengine - INFO - Iter(test) [1800/2000]    eta: 0:00:22  time: 0.0962  data_time: 0.0016  memory: 853  
09/21 01:12:34 - mmengine - INFO - Iter(test) [1850/2000]    eta: 0:00:16  time: 0.1020  data_time: 0.0015  memory: 773  
09/21 01:12:39 - mmengine - INFO - Iter(test) [1900/2000]    eta: 0:00:11  time: 0.0980  data_time: 0.0014  memory: 987  
09/21 01:12:45 - mmengine - INFO - Iter(test) [1950/2000]    eta: 0:00:05  time: 0.1107  data_time: 0.0014  memory: 1224  
09/21 01:12:50 - mmengine - INFO - Iter(test) [2000/2000]    eta: 0:00:00  time: 0.1150  data_time: 0.0014  memory: 1012  
09/21 01:12:50 - mmengine - INFO - per class results:
09/21 01:12:50 - mmengine - INFO - 
+---------------------+-------+-------+
|        Class        |  IoU  |  Acc  |
+---------------------+-------+-------+
|         wall        | 74.14 | 86.06 |
|       building      | 82.05 |  91.6 |
|         sky         | 93.76 | 96.36 |
|        floor        | 78.34 |  89.2 |
|         tree        | 71.13 | 86.43 |
|       ceiling       | 79.98 | 90.54 |
|         road        | 78.36 | 88.32 |
|         bed         |  86.5 | 93.64 |
|      windowpane     |  59.3 | 75.97 |
|        grass        | 66.26 |  80.0 |
|       cabinet       | 53.81 | 67.05 |
|       sidewalk      | 56.53 | 67.85 |
|        person       | 78.05 | 89.68 |
|        earth        | 32.52 | 48.87 |
|         door        | 38.42 | 49.99 |
|        table        | 57.22 | 75.86 |
|       mountain      | 57.59 | 74.16 |
|        plant        | 49.83 | 60.67 |
|       curtain       |  65.9 | 79.34 |
|        chair        | 52.64 | 68.56 |
|         car         | 83.56 | 91.72 |
|        water        | 47.57 | 61.48 |
|       painting      | 73.18 | 85.01 |
|         sofa        | 61.01 | 80.35 |
|        shelf        |  36.5 | 53.85 |
|        house        | 47.53 | 67.38 |
|         sea         | 48.02 | 75.77 |
|        mirror       | 62.14 | 72.92 |
|         rug         | 55.01 | 59.24 |
|        field        | 33.14 | 59.69 |
|       armchair      |  40.4 | 64.48 |
|         seat        |  58.1 | 80.42 |
|        fence        | 30.65 | 44.63 |
|         desk        | 45.09 | 63.98 |
|         rock        | 55.72 | 76.21 |
|       wardrobe      | 41.91 | 58.31 |
|         lamp        | 60.12 |  75.7 |
|       bathtub       | 64.57 | 74.96 |
|       railing       |  34.7 | 49.86 |
|       cushion       | 50.37 | 64.43 |
|         base        | 26.21 | 42.63 |
|         box         | 16.46 | 23.85 |
|        column       | 41.85 | 58.84 |
|      signboard      | 37.74 | 50.26 |
|   chest of drawers  | 31.27 |  58.1 |
|       counter       | 18.17 | 26.57 |
|         sand        | 30.33 | 53.23 |
|         sink        | 69.71 |  79.6 |
|      skyscraper     |  58.5 | 77.98 |
|      fireplace      | 75.68 | 88.42 |
|     refrigerator    | 84.28 | 91.42 |
|      grandstand     | 40.27 |  69.5 |
|         path        | 21.47 | 35.96 |
|        stairs       | 29.07 | 33.05 |
|        runway       | 74.13 | 74.93 |
|         case        | 33.33 |  42.4 |
|      pool table     | 88.59 | 95.58 |
|        pillow       |  49.9 | 60.94 |
|     screen door     | 42.45 | 51.05 |
|       stairway      | 34.02 | 47.47 |
|        river        | 18.37 |  25.9 |
|        bridge       | 59.87 | 78.92 |
|       bookcase      | 33.59 | 47.93 |
|        blind        | 23.59 | 24.93 |
|     coffee table    | 59.34 | 76.93 |
|        toilet       | 83.44 | 87.02 |
|        flower       | 36.78 | 51.36 |
|         book        | 47.72 | 64.05 |
|         hill        | 11.59 | 24.68 |
|        bench        | 39.59 | 49.66 |
|      countertop     | 61.47 | 76.11 |
|        stove        | 75.43 | 84.49 |
|         palm        | 50.28 | 64.78 |
|    kitchen island   | 39.68 | 67.96 |
|       computer      | 49.73 | 55.24 |
|     swivel chair    | 46.82 | 55.08 |
|         boat        | 33.85 | 49.49 |
|         bar         | 47.54 | 70.88 |
|    arcade machine   | 30.82 | 34.63 |
|        hovel        | 27.79 | 45.75 |
|         bus         |  81.4 | 85.04 |
|        towel        | 54.06 | 61.94 |
|        light        | 54.76 |  68.1 |
|        truck        | 27.19 | 41.31 |
|        tower        | 30.35 | 40.14 |
|      chandelier     | 63.52 | 79.47 |
|        awning       |  29.3 | 34.42 |
|     streetlight     | 27.29 | 40.59 |
|        booth        | 35.84 | 39.67 |
| television receiver | 57.38 | 73.06 |
|       airplane      | 58.12 | 64.22 |
|      dirt track     |  2.95 | 25.59 |
|       apparel       | 24.41 | 36.69 |
|         pole        | 16.47 | 24.84 |
|         land        |  1.79 |  2.66 |
|      bannister      | 11.23 | 21.34 |
|      escalator      | 20.57 | 23.26 |
|       ottoman       | 49.27 | 61.58 |
|        bottle       | 29.69 | 47.26 |
|        buffet       | 36.22 | 49.25 |
|        poster       | 28.97 | 41.76 |
|        stage        | 15.49 | 23.38 |
|         van         | 46.77 |  62.6 |
|         ship        |  6.85 |  9.55 |
|       fountain      | 18.47 | 21.61 |
|    conveyer belt    |  54.8 | 84.54 |
|        canopy       | 20.01 | 41.16 |
|        washer       | 63.81 | 68.97 |
|      plaything      | 15.02 | 25.06 |
|    swimming pool    |  14.8 | 24.33 |
|        stool        | 34.92 | 58.28 |
|        barrel       |  9.59 | 10.06 |
|        basket       | 20.75 | 29.62 |
|      waterfall      | 47.24 | 51.51 |
|         tent        | 92.58 |  98.2 |
|         bag         | 11.56 | 15.47 |
|       minibike      | 62.54 | 84.19 |
|        cradle       | 80.69 | 93.47 |
|         oven        | 35.98 | 56.92 |
|         ball        | 42.35 | 50.83 |
|         food        | 58.05 | 77.59 |
|         step        |  2.34 |  3.05 |
|         tank        |  40.1 | 43.31 |
|      trade name     | 22.28 | 27.79 |
|      microwave      | 69.76 | 76.82 |
|         pot         |  39.8 | 47.01 |
|        animal       | 64.08 | 68.09 |
|       bicycle       | 52.02 | 80.66 |
|         lake        | 60.65 | 63.82 |
|      dishwasher     | 49.62 | 64.02 |
|        screen       | 49.45 | 68.84 |
|       blanket       | 16.34 | 18.49 |
|      sculpture      | 44.61 | 51.25 |
|         hood        | 66.28 | 71.48 |
|        sconce       | 40.73 | 50.32 |
|         vase        |  39.0 | 60.28 |
|    traffic light    | 26.86 | 41.22 |
|         tray        | 13.63 | 22.95 |
|        ashcan       |  37.6 | 46.64 |
|         fan         | 58.58 | 76.55 |
|         pier        |  50.8 | 60.81 |
|      crt screen     |  2.75 |  8.47 |
|        plate        | 49.24 | 65.79 |
|       monitor       |  1.46 |  1.83 |
|    bulletin board   | 27.96 | 36.32 |
|        shower       |  3.42 | 19.15 |
|       radiator      | 35.79 | 54.39 |
|        glass        | 16.72 |  19.0 |
|        clock        | 25.46 | 30.53 |
|         flag        | 34.35 |  39.2 |
+---------------------+-------+-------+
09/21 01:12:50 - mmengine - INFO - Iter(test) [2000/2000]    aAcc: 80.5600  mIoU: 44.3800  mAcc: 56.5700  data_time: 0.0016  time: 0.1117
Finished processing corruption type: gaussian_noise
Processing corruption type: shot_noise
09/21 01:12:54 - mmengine - INFO - 
------------------------------------------------------------
System environment:
    sys.platform: linux
    Python: 3.10.13 | packaged by conda-forge | (main, Dec 23 2023, 15:36:39) [GCC 12.3.0]
    CUDA available: True
    MUSA available: False
    numpy_random_seed: 193305844
    GPU 0: Tesla V100-SXM2-32GB
    CUDA_HOME: /opt/bwhpc/common/devel/cuda/11.7
    NVCC: Cuda compilation tools, release 11.7, V11.7.99
    GCC: gcc (GCC) 8.5.0 20210514 (Red Hat 8.5.0-18)
    PyTorch: 1.13.1
    PyTorch compiling details: PyTorch built with:
  - GCC 9.3
  - C++ Version: 201402
  - Intel(R) oneAPI Math Kernel Library Version 2023.1-Product Build 20230303 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v2.6.0 (Git Hash 52b5f107dd9cf10910aaa19cb47f3abf9b349815)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - LAPACK is enabled (usually provided by MKL)
  - NNPACK is enabled
  - CPU capability usage: AVX2
  - CUDA Runtime 11.7
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_61,code=sm_61;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86;-gencode;arch=compute_37,code=compute_37
  - CuDNN 8.5
  - Magma 2.6.1
  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.7, CUDNN_VERSION=8.5.0, CXX_COMPILER=/opt/rh/devtoolset-9/root/usr/bin/c++, CXX_FLAGS= -fabi-version=11 -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -DEDGE_PROFILER_USE_KINETO -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Werror=non-virtual-dtor -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wunused-local-typedefs -Wno-unused-parameter -Wno-unused-function -Wno-unused-result -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Werror=cast-function-type -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.13.1, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, USE_ROCM=OFF, 

    TorchVision: 0.14.1
    OpenCV: 3.4.18
    MMEngine: 0.10.4

Runtime environment:
    cudnn_benchmark: True
    mp_cfg: {'mp_start_method': 'fork', 'opencv_num_threads': 0}
    dist_cfg: {'backend': 'nccl'}
    seed: 193305844
    Distributed launcher: none
    Distributed training: False
    GPU number: 1
------------------------------------------------------------

09/21 01:12:54 - mmengine - INFO - Config:
auto_scale_lr = dict(base_batch_size=16, enable=False)
backbone_embed_multi = dict(decay_mult=0.0, lr_mult=0.1)
backbone_norm_multi = dict(decay_mult=0.0, lr_mult=0.1)
crop_size = (
    512,
    512,
)
custom_imports = dict(allow_failed_imports=False, imports='mmdet.models')
custom_keys = dict({
    'absolute_pos_embed':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone':
    dict(decay_mult=1.0, lr_mult=0.1),
    'backbone.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.patch_embed.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.0.blocks.0.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.0.blocks.1.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.0.downsample.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.1.blocks.0.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.1.blocks.1.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.1.downsample.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.0.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.1.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.2.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.3.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.4.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.5.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.downsample.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.3.blocks.0.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.3.blocks.1.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'level_embed':
    dict(decay_mult=0.0, lr_mult=1.0),
    'query_embed':
    dict(decay_mult=0.0, lr_mult=1.0),
    'query_feat':
    dict(decay_mult=0.0, lr_mult=1.0),
    'relative_position_bias_table':
    dict(decay_mult=0.0, lr_mult=0.1)
})
data_root = 'data/ade/ADEChallengeData2016'
dataset_type = 'ADE20KDataset'
default_hooks = dict(
    checkpoint=dict(
        by_epoch=False, interval=5000, save_best='mIoU',
        type='CheckpointHook'),
    logger=dict(interval=50, log_metric_by_epoch=False, type='LoggerHook'),
    param_scheduler=dict(type='ParamSchedulerHook'),
    sampler_seed=dict(type='DistSamplerSeedHook'),
    timer=dict(type='IterTimerHook'),
    visualization=dict(type='SegVisualizationHook'))
default_scope = 'mmseg'
depths = [
    2,
    2,
    6,
    2,
]
embed_multi = dict(decay_mult=0.0, lr_mult=1.0)
env_cfg = dict(
    cudnn_benchmark=True,
    dist_cfg=dict(backend='nccl'),
    mp_cfg=dict(mp_start_method='fork', opencv_num_threads=0))
img_ratios = [
    0.5,
    0.75,
    1.0,
    1.25,
    1.5,
    1.75,
]
launcher = 'none'
load_from = '../checkpoint_files/ade20k/mask2former/mask2former_swin-t_8xb2-160k_ade20k-512x512_20221203_234230-7d64e5dd.pth'
log_level = 'INFO'
log_processor = dict(by_epoch=False)
model = dict(
    backbone=dict(
        attn_drop_rate=0.0,
        depths=[
            2,
            2,
            6,
            2,
        ],
        drop_path_rate=0.3,
        drop_rate=0.0,
        embed_dims=96,
        frozen_stages=-1,
        init_cfg=dict(
            checkpoint=
            'https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/swin/swin_tiny_patch4_window7_224_20220317-1cdeb081.pth',
            type='Pretrained'),
        mlp_ratio=4,
        num_heads=[
            3,
            6,
            12,
            24,
        ],
        out_indices=(
            0,
            1,
            2,
            3,
        ),
        patch_norm=True,
        qk_scale=None,
        qkv_bias=True,
        type='SwinTransformer',
        window_size=7,
        with_cp=False),
    data_preprocessor=dict(
        bgr_to_rgb=True,
        corruption='shot_noise',
        mean=[
            123.675,
            116.28,
            103.53,
        ],
        pad_val=0,
        seg_pad_val=255,
        size=(
            512,
            512,
        ),
        std=[
            58.395,
            57.12,
            57.375,
        ],
        test_cfg=dict(size_divisor=32),
        type='SegDataPreProcessor'),
    decode_head=dict(
        align_corners=False,
        enforce_decoder_input_project=False,
        feat_channels=256,
        in_channels=[
            96,
            192,
            384,
            768,
        ],
        loss_cls=dict(
            class_weight=[
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                0.1,
            ],
            loss_weight=2.0,
            reduction='mean',
            type='mmdet.CrossEntropyLoss',
            use_sigmoid=False),
        loss_dice=dict(
            activate=True,
            eps=1.0,
            loss_weight=5.0,
            naive_dice=True,
            reduction='mean',
            type='mmdet.DiceLoss',
            use_sigmoid=True),
        loss_mask=dict(
            loss_weight=5.0,
            reduction='mean',
            type='mmdet.CrossEntropyLoss',
            use_sigmoid=True),
        num_classes=150,
        num_queries=100,
        num_transformer_feat_level=3,
        out_channels=256,
        pixel_decoder=dict(
            act_cfg=dict(type='ReLU'),
            encoder=dict(
                init_cfg=None,
                layer_cfg=dict(
                    ffn_cfg=dict(
                        act_cfg=dict(inplace=True, type='ReLU'),
                        embed_dims=256,
                        feedforward_channels=1024,
                        ffn_drop=0.0,
                        num_fcs=2),
                    self_attn_cfg=dict(
                        batch_first=True,
                        dropout=0.0,
                        embed_dims=256,
                        im2col_step=64,
                        init_cfg=None,
                        norm_cfg=None,
                        num_heads=8,
                        num_levels=3,
                        num_points=4)),
                num_layers=6),
            init_cfg=None,
            norm_cfg=dict(num_groups=32, type='GN'),
            num_outs=3,
            positional_encoding=dict(normalize=True, num_feats=128),
            type='mmdet.MSDeformAttnPixelDecoder'),
        positional_encoding=dict(normalize=True, num_feats=128),
        strides=[
            4,
            8,
            16,
            32,
        ],
        train_cfg=dict(
            assigner=dict(
                match_costs=[
                    dict(type='mmdet.ClassificationCost', weight=2.0),
                    dict(
                        type='mmdet.CrossEntropyLossCost',
                        use_sigmoid=True,
                        weight=5.0),
                    dict(
                        eps=1.0,
                        pred_act=True,
                        type='mmdet.DiceCost',
                        weight=5.0),
                ],
                type='mmdet.HungarianAssigner'),
            importance_sample_ratio=0.75,
            num_points=12544,
            oversample_ratio=3.0,
            sampler=dict(type='mmdet.MaskPseudoSampler')),
        transformer_decoder=dict(
            init_cfg=None,
            layer_cfg=dict(
                cross_attn_cfg=dict(
                    attn_drop=0.0,
                    batch_first=True,
                    dropout_layer=None,
                    embed_dims=256,
                    num_heads=8,
                    proj_drop=0.0),
                ffn_cfg=dict(
                    act_cfg=dict(inplace=True, type='ReLU'),
                    add_identity=True,
                    dropout_layer=None,
                    embed_dims=256,
                    feedforward_channels=2048,
                    ffn_drop=0.0,
                    num_fcs=2),
                self_attn_cfg=dict(
                    attn_drop=0.0,
                    batch_first=True,
                    dropout_layer=None,
                    embed_dims=256,
                    num_heads=8,
                    proj_drop=0.0)),
            num_layers=9,
            return_intermediate=True),
        type='Mask2FormerHead'),
    test_cfg=dict(mode='whole'),
    train_cfg=dict(),
    type='EncoderDecoder')
num_classes = 150
optim_wrapper = dict(
    clip_grad=dict(max_norm=0.01, norm_type=2),
    optimizer=dict(
        betas=(
            0.9,
            0.999,
        ),
        eps=1e-08,
        lr=0.0001,
        type='AdamW',
        weight_decay=0.05),
    paramwise_cfg=dict(
        custom_keys=dict({
            'absolute_pos_embed':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone':
            dict(decay_mult=1.0, lr_mult=0.1),
            'backbone.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.patch_embed.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.0.blocks.0.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.0.blocks.1.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.0.downsample.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.1.blocks.0.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.1.blocks.1.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.1.downsample.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.0.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.1.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.2.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.3.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.4.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.5.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.downsample.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.3.blocks.0.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.3.blocks.1.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'level_embed':
            dict(decay_mult=0.0, lr_mult=1.0),
            'query_embed':
            dict(decay_mult=0.0, lr_mult=1.0),
            'query_feat':
            dict(decay_mult=0.0, lr_mult=1.0),
            'relative_position_bias_table':
            dict(decay_mult=0.0, lr_mult=0.1)
        }),
        norm_decay_mult=0.0),
    type='OptimWrapper')
optimizer = dict(
    betas=(
        0.9,
        0.999,
    ),
    eps=1e-08,
    lr=0.0001,
    type='AdamW',
    weight_decay=0.05)
param_scheduler = [
    dict(
        begin=0,
        by_epoch=False,
        end=160000,
        eta_min=0,
        power=0.9,
        type='PolyLR'),
]
pretrained = 'https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/swin/swin_tiny_patch4_window7_224_20220317-1cdeb081.pth'
resume = False
test_cfg = dict(type='TestLoop')
test_dataloader = dict(
    batch_size=1,
    dataset=dict(
        data_prefix=dict(
            img_path='images/validation',
            seg_map_path='annotations/validation'),
        data_root='data/ade/ADEChallengeData2016',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(keep_ratio=True, scale=(
                2048,
                512,
            ), type='Resize'),
            dict(reduce_zero_label=True, type='LoadAnnotations'),
            dict(type='PackSegInputs'),
        ],
        type='ADE20KDataset'),
    num_workers=4,
    persistent_workers=True,
    sampler=dict(shuffle=False, type='DefaultSampler'))
test_evaluator = dict(
    iou_metrics=[
        'mIoU',
    ], type='IoUMetric')
test_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(keep_ratio=True, scale=(
        2048,
        512,
    ), type='Resize'),
    dict(reduce_zero_label=True, type='LoadAnnotations'),
    dict(type='PackSegInputs'),
]
train_cfg = dict(
    max_iters=160000, type='IterBasedTrainLoop', val_interval=5000)
train_dataloader = dict(
    batch_size=2,
    dataset=dict(
        data_prefix=dict(
            img_path='images/training', seg_map_path='annotations/training'),
        data_root='data/ade/ADEChallengeData2016',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(reduce_zero_label=True, type='LoadAnnotations'),
            dict(
                max_size=2048,
                resize_type='ResizeShortestEdge',
                scales=[
                    256,
                    307,
                    358,
                    409,
                    460,
                    512,
                    563,
                    614,
                    665,
                    716,
                    768,
                    819,
                    870,
                    921,
                    972,
                    1024,
                ],
                type='RandomChoiceResize'),
            dict(
                cat_max_ratio=0.75, crop_size=(
                    512,
                    512,
                ), type='RandomCrop'),
            dict(prob=0.5, type='RandomFlip'),
            dict(type='PhotoMetricDistortion'),
            dict(type='PackSegInputs'),
        ],
        type='ADE20KDataset'),
    num_workers=4,
    persistent_workers=True,
    sampler=dict(shuffle=True, type='InfiniteSampler'))
train_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(reduce_zero_label=True, type='LoadAnnotations'),
    dict(
        max_size=2048,
        resize_type='ResizeShortestEdge',
        scales=[
            256,
            307,
            358,
            409,
            460,
            512,
            563,
            614,
            665,
            716,
            768,
            819,
            870,
            921,
            972,
            1024,
        ],
        type='RandomChoiceResize'),
    dict(cat_max_ratio=0.75, crop_size=(
        512,
        512,
    ), type='RandomCrop'),
    dict(prob=0.5, type='RandomFlip'),
    dict(type='PhotoMetricDistortion'),
    dict(type='PackSegInputs'),
]
tta_model = dict(type='SegTTAModel')
tta_pipeline = [
    dict(backend_args=None, type='LoadImageFromFile'),
    dict(
        transforms=[
            [
                dict(keep_ratio=True, scale_factor=0.5, type='Resize'),
                dict(keep_ratio=True, scale_factor=0.75, type='Resize'),
                dict(keep_ratio=True, scale_factor=1.0, type='Resize'),
                dict(keep_ratio=True, scale_factor=1.25, type='Resize'),
                dict(keep_ratio=True, scale_factor=1.5, type='Resize'),
                dict(keep_ratio=True, scale_factor=1.75, type='Resize'),
            ],
            [
                dict(direction='horizontal', prob=0.0, type='RandomFlip'),
                dict(direction='horizontal', prob=1.0, type='RandomFlip'),
            ],
            [
                dict(type='LoadAnnotations'),
            ],
            [
                dict(type='PackSegInputs'),
            ],
        ],
        type='TestTimeAug'),
]
val_cfg = dict(type='ValLoop')
val_dataloader = dict(
    batch_size=1,
    dataset=dict(
        data_prefix=dict(
            img_path='images/validation',
            seg_map_path='annotations/validation'),
        data_root='data/ade/ADEChallengeData2016',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(keep_ratio=True, scale=(
                2048,
                512,
            ), type='Resize'),
            dict(reduce_zero_label=True, type='LoadAnnotations'),
            dict(type='PackSegInputs'),
        ],
        type='ADE20KDataset'),
    num_workers=4,
    persistent_workers=True,
    sampler=dict(shuffle=False, type='DefaultSampler'))
val_evaluator = dict(
    iou_metrics=[
        'mIoU',
    ], type='IoUMetric')
vis_backends = [
    dict(type='LocalVisBackend'),
]
visualizer = dict(
    name='visualizer',
    type='SegLocalVisualizer',
    vis_backends=[
        dict(type='LocalVisBackend'),
    ])
work_dir = '../corruptions/work_dirs/ade20k/mask2former/mask2former_swin-t_8xb2-160k_ade20k-512x512/shot_noise'

09/21 01:12:57 - mmengine - INFO - Distributed training is not used, all SyncBatchNorm (SyncBN) layers in the model will be automatically reverted to BatchNormXd layers if they are used.
09/21 01:12:57 - mmengine - INFO - Hooks will be executed in the following order:
before_run:
(VERY_HIGH   ) RuntimeInfoHook                    
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
before_train:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_train_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(NORMAL      ) DistSamplerSeedHook                
 -------------------- 
before_train_iter:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_train_iter:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(NORMAL      ) SegVisualizationHook               
(BELOW_NORMAL) LoggerHook                         
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
after_train_epoch:
(NORMAL      ) IterTimerHook                      
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_val:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
before_val_epoch:
(NORMAL      ) IterTimerHook                      
 -------------------- 
before_val_iter:
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_val_iter:
(NORMAL      ) IterTimerHook                      
(NORMAL      ) SegVisualizationHook               
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_val_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
after_val:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
after_train:
(VERY_HIGH   ) RuntimeInfoHook                    
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_test:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
before_test_epoch:
(NORMAL      ) IterTimerHook                      
 -------------------- 
before_test_iter:
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_test_iter:
(NORMAL      ) IterTimerHook                      
(NORMAL      ) SegVisualizationHook               
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_test_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_test:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
after_run:
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
09/21 01:12:58 - mmengine - WARNING - The prefix is not set in metric class IoUMetric.
Loads checkpoint by local backend from path: ../checkpoint_files/ade20k/mask2former/mask2former_swin-t_8xb2-160k_ade20k-512x512_20221203_234230-7d64e5dd.pth
09/21 01:12:59 - mmengine - INFO - Load checkpoint from ../checkpoint_files/ade20k/mask2former/mask2former_swin-t_8xb2-160k_ade20k-512x512_20221203_234230-7d64e5dd.pth
09/21 01:13:21 - mmengine - INFO - Iter(test) [  50/2000]    eta: 0:14:21  time: 0.3565  data_time: 0.0016  memory: 12733  
09/21 01:13:32 - mmengine - INFO - Iter(test) [ 100/2000]    eta: 0:10:32  time: 0.2605  data_time: 0.0016  memory: 12714  
09/21 01:13:41 - mmengine - INFO - Iter(test) [ 150/2000]    eta: 0:08:43  time: 0.1881  data_time: 0.0016  memory: 853  
09/21 01:13:52 - mmengine - INFO - Iter(test) [ 200/2000]    eta: 0:07:57  time: 0.1752  data_time: 0.0015  memory: 12754  
09/21 01:14:02 - mmengine - INFO - Iter(test) [ 250/2000]    eta: 0:07:23  time: 0.1719  data_time: 0.0015  memory: 12756  
09/21 01:14:11 - mmengine - INFO - Iter(test) [ 300/2000]    eta: 0:06:50  time: 0.1743  data_time: 0.0016  memory: 12721  
09/21 01:14:21 - mmengine - INFO - Iter(test) [ 350/2000]    eta: 0:06:29  time: 0.1705  data_time: 0.0014  memory: 12728  
09/21 01:14:31 - mmengine - INFO - Iter(test) [ 400/2000]    eta: 0:06:07  time: 0.1727  data_time: 0.0014  memory: 12694  
09/21 01:14:39 - mmengine - INFO - Iter(test) [ 450/2000]    eta: 0:05:45  time: 0.1674  data_time: 0.0014  memory: 894  
09/21 01:14:47 - mmengine - INFO - Iter(test) [ 500/2000]    eta: 0:05:26  time: 0.1697  data_time: 0.0014  memory: 853  
09/21 01:14:57 - mmengine - INFO - Iter(test) [ 550/2000]    eta: 0:05:11  time: 0.1891  data_time: 0.0016  memory: 961  
09/21 01:15:06 - mmengine - INFO - Iter(test) [ 600/2000]    eta: 0:04:56  time: 0.1752  data_time: 0.0016  memory: 958  
09/21 01:15:15 - mmengine - INFO - Iter(test) [ 650/2000]    eta: 0:04:43  time: 0.2700  data_time: 0.0014  memory: 12735  
09/21 01:15:25 - mmengine - INFO - Iter(test) [ 700/2000]    eta: 0:04:31  time: 0.1767  data_time: 0.0015  memory: 12724  
09/21 01:15:34 - mmengine - INFO - Iter(test) [ 750/2000]    eta: 0:04:18  time: 0.1737  data_time: 0.0014  memory: 1014  
09/21 01:15:42 - mmengine - INFO - Iter(test) [ 800/2000]    eta: 0:04:05  time: 0.1727  data_time: 0.0016  memory: 853  
09/21 01:15:51 - mmengine - INFO - Iter(test) [ 850/2000]    eta: 0:03:52  time: 0.1738  data_time: 0.0016  memory: 826  
09/21 01:15:59 - mmengine - INFO - Iter(test) [ 900/2000]    eta: 0:03:40  time: 0.1620  data_time: 0.0013  memory: 906  
09/21 01:16:08 - mmengine - INFO - Iter(test) [ 950/2000]    eta: 0:03:29  time: 0.1680  data_time: 0.0017  memory: 934  
09/21 01:16:16 - mmengine - INFO - Iter(test) [1000/2000]    eta: 0:03:17  time: 0.1719  data_time: 0.0015  memory: 934  
09/21 01:16:26 - mmengine - INFO - Iter(test) [1050/2000]    eta: 0:03:07  time: 0.1835  data_time: 0.0016  memory: 12737  
09/21 01:16:35 - mmengine - INFO - Iter(test) [1100/2000]    eta: 0:02:57  time: 0.1818  data_time: 0.0015  memory: 931  
09/21 01:16:45 - mmengine - INFO - Iter(test) [1150/2000]    eta: 0:02:47  time: 0.1908  data_time: 0.0014  memory: 904  
09/21 01:16:54 - mmengine - INFO - Iter(test) [1200/2000]    eta: 0:02:36  time: 0.1775  data_time: 0.0014  memory: 1839  
09/21 01:17:03 - mmengine - INFO - Iter(test) [1250/2000]    eta: 0:02:26  time: 0.1727  data_time: 0.0014  memory: 12716  
09/21 01:17:12 - mmengine - INFO - Iter(test) [1300/2000]    eta: 0:02:16  time: 0.1824  data_time: 0.0014  memory: 853  
09/21 01:17:21 - mmengine - INFO - Iter(test) [1350/2000]    eta: 0:02:06  time: 0.1658  data_time: 0.0014  memory: 853  
09/21 01:17:30 - mmengine - INFO - Iter(test) [1400/2000]    eta: 0:01:56  time: 0.1868  data_time: 0.0014  memory: 931  
09/21 01:17:38 - mmengine - INFO - Iter(test) [1450/2000]    eta: 0:01:45  time: 0.1850  data_time: 0.0014  memory: 934  
09/21 01:17:47 - mmengine - INFO - Iter(test) [1500/2000]    eta: 0:01:36  time: 0.1641  data_time: 0.0014  memory: 852  
09/21 01:17:56 - mmengine - INFO - Iter(test) [1550/2000]    eta: 0:01:26  time: 0.1828  data_time: 0.0015  memory: 934  
09/21 01:18:05 - mmengine - INFO - Iter(test) [1600/2000]    eta: 0:01:16  time: 0.1763  data_time: 0.0016  memory: 826  
09/21 01:18:14 - mmengine - INFO - Iter(test) [1650/2000]    eta: 0:01:06  time: 0.1655  data_time: 0.0014  memory: 12725  
09/21 01:18:23 - mmengine - INFO - Iter(test) [1700/2000]    eta: 0:00:57  time: 0.1816  data_time: 0.0016  memory: 930  
09/21 01:18:33 - mmengine - INFO - Iter(test) [1750/2000]    eta: 0:00:47  time: 0.1799  data_time: 0.0014  memory: 957  
09/21 01:18:41 - mmengine - INFO - Iter(test) [1800/2000]    eta: 0:00:38  time: 0.1857  data_time: 0.0016  memory: 853  
09/21 01:18:50 - mmengine - INFO - Iter(test) [1850/2000]    eta: 0:00:28  time: 0.1813  data_time: 0.0017  memory: 773  
09/21 01:18:59 - mmengine - INFO - Iter(test) [1900/2000]    eta: 0:00:18  time: 0.1744  data_time: 0.0015  memory: 987  
09/21 01:19:08 - mmengine - INFO - Iter(test) [1950/2000]    eta: 0:00:09  time: 0.1804  data_time: 0.0014  memory: 1224  
09/21 01:19:17 - mmengine - INFO - Iter(test) [2000/2000]    eta: 0:00:00  time: 0.1617  data_time: 0.0013  memory: 1012  
09/21 01:19:17 - mmengine - INFO - per class results:
09/21 01:19:17 - mmengine - INFO - 
+---------------------+-------+-------+
|        Class        |  IoU  |  Acc  |
+---------------------+-------+-------+
|         wall        | 73.54 | 86.07 |
|       building      | 81.48 | 90.95 |
|         sky         | 93.49 |  96.2 |
|        floor        | 77.97 | 89.36 |
|         tree        | 73.58 |  87.5 |
|       ceiling       | 79.18 | 89.95 |
|         road        | 79.81 | 90.22 |
|         bed         | 86.07 | 93.52 |
|      windowpane     | 57.79 |  74.6 |
|        grass        | 67.48 | 82.51 |
|       cabinet       | 53.27 | 66.81 |
|       sidewalk      | 54.88 | 65.57 |
|        person       | 79.42 | 89.87 |
|        earth        | 36.49 | 52.23 |
|         door        | 37.22 |  47.4 |
|        table        | 56.37 | 75.46 |
|       mountain      | 49.89 | 65.96 |
|        plant        | 49.63 | 62.12 |
|       curtain       | 65.86 | 79.77 |
|        chair        | 54.36 | 70.32 |
|         car         | 84.49 | 92.54 |
|        water        | 45.54 | 59.79 |
|       painting      | 72.83 | 85.87 |
|         sofa        | 62.71 | 79.68 |
|        shelf        | 35.94 | 51.94 |
|        house        | 46.62 | 66.56 |
|         sea         | 43.93 |  66.2 |
|        mirror       | 61.79 | 72.66 |
|         rug         | 55.15 | 59.16 |
|        field        |  33.1 | 59.24 |
|       armchair      | 41.17 | 67.77 |
|         seat        | 58.27 | 79.81 |
|        fence        | 30.99 | 45.31 |
|         desk        | 45.97 | 64.01 |
|         rock        | 45.11 | 72.01 |
|       wardrobe      |  45.0 | 66.41 |
|         lamp        | 61.13 |  75.3 |
|       bathtub       | 57.26 | 63.63 |
|       railing       | 35.34 | 48.33 |
|       cushion       | 52.51 | 65.18 |
|         base        | 25.13 | 43.02 |
|         box         | 17.94 | 23.86 |
|        column       | 38.96 | 53.28 |
|      signboard      | 36.24 | 48.65 |
|   chest of drawers  | 32.56 | 62.76 |
|       counter       | 18.71 | 25.52 |
|         sand        | 31.61 | 53.72 |
|         sink        | 60.61 | 78.82 |
|      skyscraper     | 51.95 | 68.25 |
|      fireplace      | 72.81 | 83.56 |
|     refrigerator    | 85.72 | 91.64 |
|      grandstand     | 35.49 | 66.35 |
|         path        | 20.49 | 35.42 |
|        stairs       | 28.27 |  33.5 |
|        runway       | 74.34 | 75.43 |
|         case        | 33.08 | 42.36 |
|      pool table     | 92.18 | 95.76 |
|        pillow       | 51.78 | 60.02 |
|     screen door     | 37.07 | 45.16 |
|       stairway      | 39.14 | 52.52 |
|        river        | 10.02 | 21.99 |
|        bridge       | 37.89 | 46.46 |
|       bookcase      | 28.29 |  41.1 |
|        blind        | 27.22 | 28.47 |
|     coffee table    | 60.15 | 80.23 |
|        toilet       | 78.62 | 81.51 |
|        flower       | 38.69 | 51.47 |
|         book        | 47.18 | 62.88 |
|         hill        |  12.0 | 24.25 |
|        bench        | 38.92 | 47.67 |
|      countertop     | 58.07 |  74.1 |
|        stove        | 76.32 | 83.51 |
|         palm        |  49.2 | 67.16 |
|    kitchen island   | 44.81 | 74.59 |
|       computer      | 50.76 | 55.73 |
|     swivel chair    | 51.14 | 67.13 |
|         boat        | 34.45 | 47.93 |
|         bar         | 42.45 | 63.29 |
|    arcade machine   | 30.16 | 34.25 |
|        hovel        | 27.66 | 45.76 |
|         bus         | 84.93 | 87.85 |
|        towel        | 48.04 | 57.54 |
|        light        | 54.12 | 65.95 |
|        truck        |  28.1 | 43.98 |
|        tower        |  30.4 | 40.11 |
|      chandelier     | 60.13 | 76.33 |
|        awning       | 21.61 |  24.7 |
|     streetlight     | 29.57 | 44.16 |
|        booth        | 43.82 | 49.77 |
| television receiver | 60.97 | 74.14 |
|       airplane      | 56.79 | 63.53 |
|      dirt track     |  5.27 | 25.96 |
|       apparel       | 23.76 | 36.38 |
|         pole        | 18.15 | 27.34 |
|         land        |  2.8  |  4.78 |
|      bannister      | 15.33 | 24.54 |
|      escalator      | 36.93 | 46.52 |
|       ottoman       | 38.11 | 57.88 |
|        bottle       | 28.89 | 44.85 |
|        buffet       |  37.9 | 50.91 |
|        poster       | 20.56 | 28.04 |
|        stage        | 21.92 | 31.96 |
|         van         |  47.5 | 58.01 |
|         ship        |  5.14 |  7.17 |
|       fountain      | 20.12 | 21.61 |
|    conveyer belt    | 59.29 | 83.85 |
|        canopy       | 19.07 | 39.78 |
|        washer       | 65.59 | 71.08 |
|      plaything      | 17.77 | 23.95 |
|    swimming pool    | 15.35 | 26.29 |
|        stool        | 38.11 | 64.72 |
|        barrel       | 23.76 |  32.3 |
|        basket       | 26.88 | 36.37 |
|      waterfall      | 46.64 | 50.35 |
|         tent        | 74.43 | 98.39 |
|         bag         |  10.6 | 13.32 |
|       minibike      | 72.01 | 85.14 |
|        cradle       | 81.37 | 93.82 |
|         oven        |  44.4 | 54.29 |
|         ball        | 46.04 | 65.06 |
|         food        | 55.23 | 77.27 |
|         step        |  0.0  |  0.0  |
|         tank        | 34.75 | 37.14 |
|      trade name     | 18.49 | 22.24 |
|      microwave      | 72.14 | 78.86 |
|         pot         | 37.24 | 45.19 |
|        animal       |  66.3 | 70.06 |
|       bicycle       | 51.69 | 82.08 |
|         lake        | 69.79 | 73.25 |
|      dishwasher     | 68.15 | 73.49 |
|        screen       | 48.73 | 68.86 |
|       blanket       | 16.74 | 18.56 |
|      sculpture      | 37.97 | 55.29 |
|         hood        |  56.5 | 60.86 |
|        sconce       | 38.97 | 49.37 |
|         vase        | 38.66 | 57.69 |
|    traffic light    | 28.26 | 42.43 |
|         tray        | 12.29 | 21.65 |
|        ashcan       | 35.15 | 50.38 |
|         fan         | 52.26 | 72.94 |
|         pier        | 50.46 |  60.2 |
|      crt screen     |  3.18 | 10.39 |
|        plate        | 44.13 | 56.81 |
|       monitor       |  1.48 |  1.86 |
|    bulletin board   | 26.53 | 38.24 |
|        shower       |  2.2  | 23.27 |
|       radiator      | 29.92 | 45.89 |
|        glass        | 16.01 | 18.21 |
|        clock        | 28.84 | 33.48 |
|         flag        | 33.06 | 37.75 |
+---------------------+-------+-------+
09/21 01:19:17 - mmengine - INFO - Iter(test) [2000/2000]    aAcc: 80.3800  mIoU: 44.0500  mAcc: 56.3600  data_time: 0.0016  time: 0.1889
Finished processing corruption type: shot_noise
Processing corruption type: impulse_noise
09/21 01:19:21 - mmengine - INFO - 
------------------------------------------------------------
System environment:
    sys.platform: linux
    Python: 3.10.13 | packaged by conda-forge | (main, Dec 23 2023, 15:36:39) [GCC 12.3.0]
    CUDA available: True
    MUSA available: False
    numpy_random_seed: 1609129762
    GPU 0: Tesla V100-SXM2-32GB
    CUDA_HOME: /opt/bwhpc/common/devel/cuda/11.7
    NVCC: Cuda compilation tools, release 11.7, V11.7.99
    GCC: gcc (GCC) 8.5.0 20210514 (Red Hat 8.5.0-18)
    PyTorch: 1.13.1
    PyTorch compiling details: PyTorch built with:
  - GCC 9.3
  - C++ Version: 201402
  - Intel(R) oneAPI Math Kernel Library Version 2023.1-Product Build 20230303 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v2.6.0 (Git Hash 52b5f107dd9cf10910aaa19cb47f3abf9b349815)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - LAPACK is enabled (usually provided by MKL)
  - NNPACK is enabled
  - CPU capability usage: AVX2
  - CUDA Runtime 11.7
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_61,code=sm_61;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86;-gencode;arch=compute_37,code=compute_37
  - CuDNN 8.5
  - Magma 2.6.1
  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.7, CUDNN_VERSION=8.5.0, CXX_COMPILER=/opt/rh/devtoolset-9/root/usr/bin/c++, CXX_FLAGS= -fabi-version=11 -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -DEDGE_PROFILER_USE_KINETO -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Werror=non-virtual-dtor -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wunused-local-typedefs -Wno-unused-parameter -Wno-unused-function -Wno-unused-result -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Werror=cast-function-type -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.13.1, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, USE_ROCM=OFF, 

    TorchVision: 0.14.1
    OpenCV: 3.4.18
    MMEngine: 0.10.4

Runtime environment:
    cudnn_benchmark: True
    mp_cfg: {'mp_start_method': 'fork', 'opencv_num_threads': 0}
    dist_cfg: {'backend': 'nccl'}
    seed: 1609129762
    Distributed launcher: none
    Distributed training: False
    GPU number: 1
------------------------------------------------------------

09/21 01:19:21 - mmengine - INFO - Config:
auto_scale_lr = dict(base_batch_size=16, enable=False)
backbone_embed_multi = dict(decay_mult=0.0, lr_mult=0.1)
backbone_norm_multi = dict(decay_mult=0.0, lr_mult=0.1)
crop_size = (
    512,
    512,
)
custom_imports = dict(allow_failed_imports=False, imports='mmdet.models')
custom_keys = dict({
    'absolute_pos_embed':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone':
    dict(decay_mult=1.0, lr_mult=0.1),
    'backbone.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.patch_embed.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.0.blocks.0.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.0.blocks.1.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.0.downsample.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.1.blocks.0.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.1.blocks.1.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.1.downsample.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.0.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.1.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.2.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.3.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.4.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.5.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.downsample.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.3.blocks.0.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.3.blocks.1.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'level_embed':
    dict(decay_mult=0.0, lr_mult=1.0),
    'query_embed':
    dict(decay_mult=0.0, lr_mult=1.0),
    'query_feat':
    dict(decay_mult=0.0, lr_mult=1.0),
    'relative_position_bias_table':
    dict(decay_mult=0.0, lr_mult=0.1)
})
data_root = 'data/ade/ADEChallengeData2016'
dataset_type = 'ADE20KDataset'
default_hooks = dict(
    checkpoint=dict(
        by_epoch=False, interval=5000, save_best='mIoU',
        type='CheckpointHook'),
    logger=dict(interval=50, log_metric_by_epoch=False, type='LoggerHook'),
    param_scheduler=dict(type='ParamSchedulerHook'),
    sampler_seed=dict(type='DistSamplerSeedHook'),
    timer=dict(type='IterTimerHook'),
    visualization=dict(type='SegVisualizationHook'))
default_scope = 'mmseg'
depths = [
    2,
    2,
    6,
    2,
]
embed_multi = dict(decay_mult=0.0, lr_mult=1.0)
env_cfg = dict(
    cudnn_benchmark=True,
    dist_cfg=dict(backend='nccl'),
    mp_cfg=dict(mp_start_method='fork', opencv_num_threads=0))
img_ratios = [
    0.5,
    0.75,
    1.0,
    1.25,
    1.5,
    1.75,
]
launcher = 'none'
load_from = '../checkpoint_files/ade20k/mask2former/mask2former_swin-t_8xb2-160k_ade20k-512x512_20221203_234230-7d64e5dd.pth'
log_level = 'INFO'
log_processor = dict(by_epoch=False)
model = dict(
    backbone=dict(
        attn_drop_rate=0.0,
        depths=[
            2,
            2,
            6,
            2,
        ],
        drop_path_rate=0.3,
        drop_rate=0.0,
        embed_dims=96,
        frozen_stages=-1,
        init_cfg=dict(
            checkpoint=
            'https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/swin/swin_tiny_patch4_window7_224_20220317-1cdeb081.pth',
            type='Pretrained'),
        mlp_ratio=4,
        num_heads=[
            3,
            6,
            12,
            24,
        ],
        out_indices=(
            0,
            1,
            2,
            3,
        ),
        patch_norm=True,
        qk_scale=None,
        qkv_bias=True,
        type='SwinTransformer',
        window_size=7,
        with_cp=False),
    data_preprocessor=dict(
        bgr_to_rgb=True,
        corruption='impulse_noise',
        mean=[
            123.675,
            116.28,
            103.53,
        ],
        pad_val=0,
        seg_pad_val=255,
        size=(
            512,
            512,
        ),
        std=[
            58.395,
            57.12,
            57.375,
        ],
        test_cfg=dict(size_divisor=32),
        type='SegDataPreProcessor'),
    decode_head=dict(
        align_corners=False,
        enforce_decoder_input_project=False,
        feat_channels=256,
        in_channels=[
            96,
            192,
            384,
            768,
        ],
        loss_cls=dict(
            class_weight=[
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                0.1,
            ],
            loss_weight=2.0,
            reduction='mean',
            type='mmdet.CrossEntropyLoss',
            use_sigmoid=False),
        loss_dice=dict(
            activate=True,
            eps=1.0,
            loss_weight=5.0,
            naive_dice=True,
            reduction='mean',
            type='mmdet.DiceLoss',
            use_sigmoid=True),
        loss_mask=dict(
            loss_weight=5.0,
            reduction='mean',
            type='mmdet.CrossEntropyLoss',
            use_sigmoid=True),
        num_classes=150,
        num_queries=100,
        num_transformer_feat_level=3,
        out_channels=256,
        pixel_decoder=dict(
            act_cfg=dict(type='ReLU'),
            encoder=dict(
                init_cfg=None,
                layer_cfg=dict(
                    ffn_cfg=dict(
                        act_cfg=dict(inplace=True, type='ReLU'),
                        embed_dims=256,
                        feedforward_channels=1024,
                        ffn_drop=0.0,
                        num_fcs=2),
                    self_attn_cfg=dict(
                        batch_first=True,
                        dropout=0.0,
                        embed_dims=256,
                        im2col_step=64,
                        init_cfg=None,
                        norm_cfg=None,
                        num_heads=8,
                        num_levels=3,
                        num_points=4)),
                num_layers=6),
            init_cfg=None,
            norm_cfg=dict(num_groups=32, type='GN'),
            num_outs=3,
            positional_encoding=dict(normalize=True, num_feats=128),
            type='mmdet.MSDeformAttnPixelDecoder'),
        positional_encoding=dict(normalize=True, num_feats=128),
        strides=[
            4,
            8,
            16,
            32,
        ],
        train_cfg=dict(
            assigner=dict(
                match_costs=[
                    dict(type='mmdet.ClassificationCost', weight=2.0),
                    dict(
                        type='mmdet.CrossEntropyLossCost',
                        use_sigmoid=True,
                        weight=5.0),
                    dict(
                        eps=1.0,
                        pred_act=True,
                        type='mmdet.DiceCost',
                        weight=5.0),
                ],
                type='mmdet.HungarianAssigner'),
            importance_sample_ratio=0.75,
            num_points=12544,
            oversample_ratio=3.0,
            sampler=dict(type='mmdet.MaskPseudoSampler')),
        transformer_decoder=dict(
            init_cfg=None,
            layer_cfg=dict(
                cross_attn_cfg=dict(
                    attn_drop=0.0,
                    batch_first=True,
                    dropout_layer=None,
                    embed_dims=256,
                    num_heads=8,
                    proj_drop=0.0),
                ffn_cfg=dict(
                    act_cfg=dict(inplace=True, type='ReLU'),
                    add_identity=True,
                    dropout_layer=None,
                    embed_dims=256,
                    feedforward_channels=2048,
                    ffn_drop=0.0,
                    num_fcs=2),
                self_attn_cfg=dict(
                    attn_drop=0.0,
                    batch_first=True,
                    dropout_layer=None,
                    embed_dims=256,
                    num_heads=8,
                    proj_drop=0.0)),
            num_layers=9,
            return_intermediate=True),
        type='Mask2FormerHead'),
    test_cfg=dict(mode='whole'),
    train_cfg=dict(),
    type='EncoderDecoder')
num_classes = 150
optim_wrapper = dict(
    clip_grad=dict(max_norm=0.01, norm_type=2),
    optimizer=dict(
        betas=(
            0.9,
            0.999,
        ),
        eps=1e-08,
        lr=0.0001,
        type='AdamW',
        weight_decay=0.05),
    paramwise_cfg=dict(
        custom_keys=dict({
            'absolute_pos_embed':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone':
            dict(decay_mult=1.0, lr_mult=0.1),
            'backbone.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.patch_embed.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.0.blocks.0.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.0.blocks.1.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.0.downsample.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.1.blocks.0.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.1.blocks.1.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.1.downsample.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.0.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.1.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.2.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.3.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.4.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.5.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.downsample.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.3.blocks.0.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.3.blocks.1.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'level_embed':
            dict(decay_mult=0.0, lr_mult=1.0),
            'query_embed':
            dict(decay_mult=0.0, lr_mult=1.0),
            'query_feat':
            dict(decay_mult=0.0, lr_mult=1.0),
            'relative_position_bias_table':
            dict(decay_mult=0.0, lr_mult=0.1)
        }),
        norm_decay_mult=0.0),
    type='OptimWrapper')
optimizer = dict(
    betas=(
        0.9,
        0.999,
    ),
    eps=1e-08,
    lr=0.0001,
    type='AdamW',
    weight_decay=0.05)
param_scheduler = [
    dict(
        begin=0,
        by_epoch=False,
        end=160000,
        eta_min=0,
        power=0.9,
        type='PolyLR'),
]
pretrained = 'https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/swin/swin_tiny_patch4_window7_224_20220317-1cdeb081.pth'
resume = False
test_cfg = dict(type='TestLoop')
test_dataloader = dict(
    batch_size=1,
    dataset=dict(
        data_prefix=dict(
            img_path='images/validation',
            seg_map_path='annotations/validation'),
        data_root='data/ade/ADEChallengeData2016',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(keep_ratio=True, scale=(
                2048,
                512,
            ), type='Resize'),
            dict(reduce_zero_label=True, type='LoadAnnotations'),
            dict(type='PackSegInputs'),
        ],
        type='ADE20KDataset'),
    num_workers=4,
    persistent_workers=True,
    sampler=dict(shuffle=False, type='DefaultSampler'))
test_evaluator = dict(
    iou_metrics=[
        'mIoU',
    ], type='IoUMetric')
test_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(keep_ratio=True, scale=(
        2048,
        512,
    ), type='Resize'),
    dict(reduce_zero_label=True, type='LoadAnnotations'),
    dict(type='PackSegInputs'),
]
train_cfg = dict(
    max_iters=160000, type='IterBasedTrainLoop', val_interval=5000)
train_dataloader = dict(
    batch_size=2,
    dataset=dict(
        data_prefix=dict(
            img_path='images/training', seg_map_path='annotations/training'),
        data_root='data/ade/ADEChallengeData2016',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(reduce_zero_label=True, type='LoadAnnotations'),
            dict(
                max_size=2048,
                resize_type='ResizeShortestEdge',
                scales=[
                    256,
                    307,
                    358,
                    409,
                    460,
                    512,
                    563,
                    614,
                    665,
                    716,
                    768,
                    819,
                    870,
                    921,
                    972,
                    1024,
                ],
                type='RandomChoiceResize'),
            dict(
                cat_max_ratio=0.75, crop_size=(
                    512,
                    512,
                ), type='RandomCrop'),
            dict(prob=0.5, type='RandomFlip'),
            dict(type='PhotoMetricDistortion'),
            dict(type='PackSegInputs'),
        ],
        type='ADE20KDataset'),
    num_workers=4,
    persistent_workers=True,
    sampler=dict(shuffle=True, type='InfiniteSampler'))
train_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(reduce_zero_label=True, type='LoadAnnotations'),
    dict(
        max_size=2048,
        resize_type='ResizeShortestEdge',
        scales=[
            256,
            307,
            358,
            409,
            460,
            512,
            563,
            614,
            665,
            716,
            768,
            819,
            870,
            921,
            972,
            1024,
        ],
        type='RandomChoiceResize'),
    dict(cat_max_ratio=0.75, crop_size=(
        512,
        512,
    ), type='RandomCrop'),
    dict(prob=0.5, type='RandomFlip'),
    dict(type='PhotoMetricDistortion'),
    dict(type='PackSegInputs'),
]
tta_model = dict(type='SegTTAModel')
tta_pipeline = [
    dict(backend_args=None, type='LoadImageFromFile'),
    dict(
        transforms=[
            [
                dict(keep_ratio=True, scale_factor=0.5, type='Resize'),
                dict(keep_ratio=True, scale_factor=0.75, type='Resize'),
                dict(keep_ratio=True, scale_factor=1.0, type='Resize'),
                dict(keep_ratio=True, scale_factor=1.25, type='Resize'),
                dict(keep_ratio=True, scale_factor=1.5, type='Resize'),
                dict(keep_ratio=True, scale_factor=1.75, type='Resize'),
            ],
            [
                dict(direction='horizontal', prob=0.0, type='RandomFlip'),
                dict(direction='horizontal', prob=1.0, type='RandomFlip'),
            ],
            [
                dict(type='LoadAnnotations'),
            ],
            [
                dict(type='PackSegInputs'),
            ],
        ],
        type='TestTimeAug'),
]
val_cfg = dict(type='ValLoop')
val_dataloader = dict(
    batch_size=1,
    dataset=dict(
        data_prefix=dict(
            img_path='images/validation',
            seg_map_path='annotations/validation'),
        data_root='data/ade/ADEChallengeData2016',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(keep_ratio=True, scale=(
                2048,
                512,
            ), type='Resize'),
            dict(reduce_zero_label=True, type='LoadAnnotations'),
            dict(type='PackSegInputs'),
        ],
        type='ADE20KDataset'),
    num_workers=4,
    persistent_workers=True,
    sampler=dict(shuffle=False, type='DefaultSampler'))
val_evaluator = dict(
    iou_metrics=[
        'mIoU',
    ], type='IoUMetric')
vis_backends = [
    dict(type='LocalVisBackend'),
]
visualizer = dict(
    name='visualizer',
    type='SegLocalVisualizer',
    vis_backends=[
        dict(type='LocalVisBackend'),
    ])
work_dir = '../corruptions/work_dirs/ade20k/mask2former/mask2former_swin-t_8xb2-160k_ade20k-512x512/impulse_noise'

09/21 01:19:24 - mmengine - INFO - Distributed training is not used, all SyncBatchNorm (SyncBN) layers in the model will be automatically reverted to BatchNormXd layers if they are used.
09/21 01:19:24 - mmengine - INFO - Hooks will be executed in the following order:
before_run:
(VERY_HIGH   ) RuntimeInfoHook                    
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
before_train:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_train_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(NORMAL      ) DistSamplerSeedHook                
 -------------------- 
before_train_iter:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_train_iter:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(NORMAL      ) SegVisualizationHook               
(BELOW_NORMAL) LoggerHook                         
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
after_train_epoch:
(NORMAL      ) IterTimerHook                      
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_val:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
before_val_epoch:
(NORMAL      ) IterTimerHook                      
 -------------------- 
before_val_iter:
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_val_iter:
(NORMAL      ) IterTimerHook                      
(NORMAL      ) SegVisualizationHook               
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_val_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
after_val:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
after_train:
(VERY_HIGH   ) RuntimeInfoHook                    
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_test:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
before_test_epoch:
(NORMAL      ) IterTimerHook                      
 -------------------- 
before_test_iter:
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_test_iter:
(NORMAL      ) IterTimerHook                      
(NORMAL      ) SegVisualizationHook               
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_test_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_test:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
after_run:
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
09/21 01:19:24 - mmengine - WARNING - The prefix is not set in metric class IoUMetric.
Loads checkpoint by local backend from path: ../checkpoint_files/ade20k/mask2former/mask2former_swin-t_8xb2-160k_ade20k-512x512_20221203_234230-7d64e5dd.pth
09/21 01:19:25 - mmengine - INFO - Load checkpoint from ../checkpoint_files/ade20k/mask2former/mask2former_swin-t_8xb2-160k_ade20k-512x512_20221203_234230-7d64e5dd.pth
09/21 01:19:43 - mmengine - INFO - Iter(test) [  50/2000]    eta: 0:11:43  time: 0.2616  data_time: 0.0016  memory: 12733  
09/21 01:19:50 - mmengine - INFO - Iter(test) [ 100/2000]    eta: 0:07:51  time: 0.1751  data_time: 0.0017  memory: 12714  
09/21 01:19:54 - mmengine - INFO - Iter(test) [ 150/2000]    eta: 0:05:58  time: 0.0865  data_time: 0.0016  memory: 853  
09/21 01:20:00 - mmengine - INFO - Iter(test) [ 200/2000]    eta: 0:05:16  time: 0.0807  data_time: 0.0015  memory: 12754  
09/21 01:20:06 - mmengine - INFO - Iter(test) [ 250/2000]    eta: 0:04:47  time: 0.0881  data_time: 0.0014  memory: 12756  
09/21 01:20:11 - mmengine - INFO - Iter(test) [ 300/2000]    eta: 0:04:20  time: 0.0862  data_time: 0.0016  memory: 12721  
09/21 01:20:17 - mmengine - INFO - Iter(test) [ 350/2000]    eta: 0:04:02  time: 0.0780  data_time: 0.0015  memory: 12728  
09/21 01:20:22 - mmengine - INFO - Iter(test) [ 400/2000]    eta: 0:03:45  time: 0.0844  data_time: 0.0014  memory: 12694  
09/21 01:20:26 - mmengine - INFO - Iter(test) [ 450/2000]    eta: 0:03:27  time: 0.0811  data_time: 0.0014  memory: 894  
09/21 01:20:30 - mmengine - INFO - Iter(test) [ 500/2000]    eta: 0:03:13  time: 0.0804  data_time: 0.0014  memory: 853  
09/21 01:20:34 - mmengine - INFO - Iter(test) [ 550/2000]    eta: 0:03:01  time: 0.0855  data_time: 0.0014  memory: 961  
09/21 01:20:38 - mmengine - INFO - Iter(test) [ 600/2000]    eta: 0:02:50  time: 0.0884  data_time: 0.0015  memory: 958  
09/21 01:20:43 - mmengine - INFO - Iter(test) [ 650/2000]    eta: 0:02:42  time: 0.1674  data_time: 0.0013  memory: 12735  
09/21 01:20:48 - mmengine - INFO - Iter(test) [ 700/2000]    eta: 0:02:34  time: 0.0810  data_time: 0.0016  memory: 12724  
09/21 01:20:53 - mmengine - INFO - Iter(test) [ 750/2000]    eta: 0:02:25  time: 0.0827  data_time: 0.0014  memory: 1014  
09/21 01:20:57 - mmengine - INFO - Iter(test) [ 800/2000]    eta: 0:02:17  time: 0.0841  data_time: 0.0016  memory: 853  
09/21 01:21:01 - mmengine - INFO - Iter(test) [ 850/2000]    eta: 0:02:09  time: 0.0826  data_time: 0.0016  memory: 826  
09/21 01:21:05 - mmengine - INFO - Iter(test) [ 900/2000]    eta: 0:02:01  time: 0.0797  data_time: 0.0014  memory: 906  
09/21 01:21:09 - mmengine - INFO - Iter(test) [ 950/2000]    eta: 0:01:54  time: 0.0839  data_time: 0.0015  memory: 934  
09/21 01:21:13 - mmengine - INFO - Iter(test) [1000/2000]    eta: 0:01:48  time: 0.0811  data_time: 0.0015  memory: 934  
09/21 01:21:19 - mmengine - INFO - Iter(test) [1050/2000]    eta: 0:01:42  time: 0.0860  data_time: 0.0014  memory: 12737  
09/21 01:21:23 - mmengine - INFO - Iter(test) [1100/2000]    eta: 0:01:36  time: 0.0835  data_time: 0.0015  memory: 931  
09/21 01:21:27 - mmengine - INFO - Iter(test) [1150/2000]    eta: 0:01:29  time: 0.0830  data_time: 0.0014  memory: 904  
09/21 01:21:31 - mmengine - INFO - Iter(test) [1200/2000]    eta: 0:01:23  time: 0.0793  data_time: 0.0014  memory: 1839  
09/21 01:21:36 - mmengine - INFO - Iter(test) [1250/2000]    eta: 0:01:18  time: 0.0849  data_time: 0.0014  memory: 12716  
09/21 01:21:40 - mmengine - INFO - Iter(test) [1300/2000]    eta: 0:01:12  time: 0.0830  data_time: 0.0014  memory: 853  
09/21 01:21:44 - mmengine - INFO - Iter(test) [1350/2000]    eta: 0:01:06  time: 0.0781  data_time: 0.0014  memory: 853  
09/21 01:21:49 - mmengine - INFO - Iter(test) [1400/2000]    eta: 0:01:01  time: 0.0861  data_time: 0.0014  memory: 931  
09/21 01:21:53 - mmengine - INFO - Iter(test) [1450/2000]    eta: 0:00:55  time: 0.0867  data_time: 0.0014  memory: 934  
09/21 01:21:57 - mmengine - INFO - Iter(test) [1500/2000]    eta: 0:00:50  time: 0.0785  data_time: 0.0014  memory: 852  
09/21 01:22:01 - mmengine - INFO - Iter(test) [1550/2000]    eta: 0:00:45  time: 0.0812  data_time: 0.0014  memory: 934  
09/21 01:22:05 - mmengine - INFO - Iter(test) [1600/2000]    eta: 0:00:39  time: 0.0840  data_time: 0.0015  memory: 826  
09/21 01:22:10 - mmengine - INFO - Iter(test) [1650/2000]    eta: 0:00:34  time: 0.0798  data_time: 0.0013  memory: 12725  
09/21 01:22:14 - mmengine - INFO - Iter(test) [1700/2000]    eta: 0:00:29  time: 0.0840  data_time: 0.0015  memory: 930  
09/21 01:22:19 - mmengine - INFO - Iter(test) [1750/2000]    eta: 0:00:24  time: 0.0841  data_time: 0.0013  memory: 957  
09/21 01:22:23 - mmengine - INFO - Iter(test) [1800/2000]    eta: 0:00:19  time: 0.0833  data_time: 0.0015  memory: 853  
09/21 01:22:27 - mmengine - INFO - Iter(test) [1850/2000]    eta: 0:00:14  time: 0.0872  data_time: 0.0017  memory: 773  
09/21 01:22:31 - mmengine - INFO - Iter(test) [1900/2000]    eta: 0:00:09  time: 0.0802  data_time: 0.0014  memory: 987  
09/21 01:22:35 - mmengine - INFO - Iter(test) [1950/2000]    eta: 0:00:04  time: 0.0832  data_time: 0.0014  memory: 1224  
09/21 01:22:39 - mmengine - INFO - Iter(test) [2000/2000]    eta: 0:00:00  time: 0.0742  data_time: 0.0013  memory: 1012  
09/21 01:22:39 - mmengine - INFO - per class results:
09/21 01:22:39 - mmengine - INFO - 
+---------------------+-------+-------+
|        Class        |  IoU  |  Acc  |
+---------------------+-------+-------+
|         wall        | 74.33 |  86.5 |
|       building      |  81.2 | 91.89 |
|         sky         | 93.37 |  96.2 |
|        floor        | 78.45 |  89.2 |
|         tree        | 72.66 | 86.69 |
|       ceiling       | 79.95 |  87.1 |
|         road        | 79.18 | 88.92 |
|         bed         | 85.52 | 92.48 |
|      windowpane     | 58.61 | 74.77 |
|        grass        | 65.39 | 78.33 |
|       cabinet       |  53.8 | 68.36 |
|       sidewalk      | 57.56 |  72.2 |
|        person       | 79.28 |  89.5 |
|        earth        | 34.57 | 54.02 |
|         door        | 41.68 | 59.56 |
|        table        | 56.39 |  76.1 |
|       mountain      |  59.0 |  74.1 |
|        plant        | 50.83 | 60.28 |
|       curtain       | 70.66 | 83.03 |
|        chair        | 55.29 | 71.03 |
|         car         | 84.98 | 92.88 |
|        water        | 50.64 | 66.71 |
|       painting      | 71.73 | 84.19 |
|         sofa        | 61.72 | 80.11 |
|        shelf        | 38.64 | 56.41 |
|        house        | 46.56 | 60.38 |
|         sea         | 43.87 | 67.84 |
|        mirror       |  58.6 | 72.45 |
|         rug         | 56.67 | 60.09 |
|        field        | 34.63 | 51.54 |
|       armchair      | 41.97 | 63.21 |
|         seat        | 60.08 | 78.89 |
|        fence        | 30.59 | 44.64 |
|         desk        | 47.04 | 66.59 |
|         rock        | 56.18 | 80.11 |
|       wardrobe      | 52.69 | 70.03 |
|         lamp        | 61.64 | 73.99 |
|       bathtub       | 67.89 | 79.48 |
|       railing       |  34.7 | 48.88 |
|       cushion       | 51.78 |  62.9 |
|         base        | 22.71 | 41.62 |
|         box         | 19.74 | 27.31 |
|        column       | 43.62 | 53.68 |
|      signboard      | 38.65 | 55.01 |
|   chest of drawers  | 31.51 | 58.86 |
|       counter       | 17.28 | 26.43 |
|         sand        | 25.18 | 42.22 |
|         sink        | 69.95 | 78.31 |
|      skyscraper     |  36.0 | 44.78 |
|      fireplace      | 66.92 | 81.99 |
|     refrigerator    | 77.44 | 89.37 |
|      grandstand     | 40.03 | 69.62 |
|         path        | 19.12 | 33.72 |
|        stairs       | 31.61 | 42.77 |
|        runway       | 64.11 | 80.75 |
|         case        | 31.69 | 42.36 |
|      pool table     | 89.78 | 95.84 |
|        pillow       | 51.85 | 67.89 |
|     screen door     | 54.07 |  64.7 |
|       stairway      |  37.7 | 48.16 |
|        river        | 13.24 | 16.43 |
|        bridge       | 38.52 | 46.62 |
|       bookcase      | 32.67 | 41.23 |
|        blind        | 28.15 | 31.12 |
|     coffee table    |  62.0 | 77.53 |
|        toilet       | 82.98 | 88.64 |
|        flower       | 35.75 | 49.39 |
|         book        | 48.74 | 67.42 |
|         hill        | 15.46 | 24.32 |
|        bench        | 43.46 |  50.3 |
|      countertop     | 63.75 | 82.19 |
|        stove        |  69.4 | 80.94 |
|         palm        | 48.05 | 68.77 |
|    kitchen island   | 40.73 | 67.83 |
|       computer      | 47.84 | 55.88 |
|     swivel chair    |  49.7 | 63.23 |
|         boat        |  34.7 | 49.29 |
|         bar         |  51.3 | 75.23 |
|    arcade machine   | 32.59 | 36.14 |
|        hovel        | 28.09 | 46.97 |
|         bus         | 65.96 |  89.6 |
|        towel        | 58.65 | 66.83 |
|        light        | 55.01 | 67.83 |
|        truck        | 28.24 |  46.0 |
|        tower        |  31.7 | 40.19 |
|      chandelier     | 64.93 |  76.0 |
|        awning       | 22.52 | 27.24 |
|     streetlight     | 27.04 | 40.28 |
|        booth        | 54.66 | 64.57 |
| television receiver | 68.39 | 81.18 |
|       airplane      | 52.85 | 65.52 |
|      dirt track     |  1.82 |  5.32 |
|       apparel       |  23.3 | 33.45 |
|         pole        | 18.48 | 30.72 |
|         land        |  1.16 |  2.03 |
|      bannister      | 15.84 |  28.2 |
|      escalator      | 20.17 |  20.9 |
|       ottoman       | 51.32 | 63.41 |
|        bottle       | 27.96 | 45.15 |
|        buffet       | 44.92 | 59.54 |
|        poster       | 31.76 | 40.24 |
|        stage        | 16.18 | 23.83 |
|         van         | 49.45 | 66.54 |
|         ship        |  5.17 |  7.15 |
|       fountain      | 20.23 | 22.51 |
|    conveyer belt    | 64.36 | 90.03 |
|        canopy       | 25.46 | 38.91 |
|        washer       | 55.07 |  60.5 |
|      plaything      |  23.3 | 33.61 |
|    swimming pool    | 15.51 | 24.48 |
|        stool        | 37.72 | 56.82 |
|        barrel       | 43.69 | 50.37 |
|        basket       | 23.93 | 31.87 |
|      waterfall      | 40.18 | 51.78 |
|         tent        | 92.16 | 98.28 |
|         bag         | 12.86 | 16.67 |
|       minibike      | 67.22 | 83.95 |
|        cradle       | 73.84 |  81.4 |
|         oven        | 16.83 | 39.76 |
|         ball        | 43.93 | 54.85 |
|         food        | 47.17 | 56.55 |
|         step        |  2.75 |  3.68 |
|         tank        | 35.57 | 40.06 |
|      trade name     | 26.16 | 32.05 |
|      microwave      | 38.54 | 41.96 |
|         pot         | 39.86 | 46.19 |
|        animal       | 62.99 |  65.9 |
|       bicycle       | 52.03 | 81.66 |
|         lake        |  9.22 |  9.62 |
|      dishwasher     | 53.92 |  65.7 |
|        screen       | 54.81 | 85.29 |
|       blanket       | 17.33 | 20.12 |
|      sculpture      | 41.11 | 49.39 |
|         hood        | 61.04 | 63.85 |
|        sconce       | 43.48 |  59.7 |
|         vase        | 34.46 | 55.54 |
|    traffic light    | 29.43 | 44.15 |
|         tray        | 13.49 | 26.87 |
|        ashcan       | 34.67 | 51.65 |
|         fan         | 51.92 | 73.56 |
|         pier        | 17.82 | 19.41 |
|      crt screen     |  0.27 |  0.76 |
|        plate        | 49.91 | 66.39 |
|       monitor       |  2.45 |  3.76 |
|    bulletin board   | 31.29 |  42.2 |
|        shower       |  1.91 | 14.85 |
|       radiator      | 46.33 | 63.35 |
|        glass        | 14.85 |  17.3 |
|        clock        | 21.27 |  29.9 |
|         flag        | 34.96 | 38.73 |
+---------------------+-------+-------+
09/21 01:22:39 - mmengine - INFO - Iter(test) [2000/2000]    aAcc: 80.7100  mIoU: 43.8700  mAcc: 56.0300  data_time: 0.0016  time: 0.0970
Finished processing corruption type: impulse_noise
Processing corruption type: defocus_blur
09/21 01:22:44 - mmengine - INFO - 
------------------------------------------------------------
System environment:
    sys.platform: linux
    Python: 3.10.13 | packaged by conda-forge | (main, Dec 23 2023, 15:36:39) [GCC 12.3.0]
    CUDA available: True
    MUSA available: False
    numpy_random_seed: 219015255
    GPU 0: Tesla V100-SXM2-32GB
    CUDA_HOME: /opt/bwhpc/common/devel/cuda/11.7
    NVCC: Cuda compilation tools, release 11.7, V11.7.99
    GCC: gcc (GCC) 8.5.0 20210514 (Red Hat 8.5.0-18)
    PyTorch: 1.13.1
    PyTorch compiling details: PyTorch built with:
  - GCC 9.3
  - C++ Version: 201402
  - Intel(R) oneAPI Math Kernel Library Version 2023.1-Product Build 20230303 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v2.6.0 (Git Hash 52b5f107dd9cf10910aaa19cb47f3abf9b349815)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - LAPACK is enabled (usually provided by MKL)
  - NNPACK is enabled
  - CPU capability usage: AVX2
  - CUDA Runtime 11.7
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_61,code=sm_61;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86;-gencode;arch=compute_37,code=compute_37
  - CuDNN 8.5
  - Magma 2.6.1
  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.7, CUDNN_VERSION=8.5.0, CXX_COMPILER=/opt/rh/devtoolset-9/root/usr/bin/c++, CXX_FLAGS= -fabi-version=11 -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -DEDGE_PROFILER_USE_KINETO -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Werror=non-virtual-dtor -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wunused-local-typedefs -Wno-unused-parameter -Wno-unused-function -Wno-unused-result -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Werror=cast-function-type -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.13.1, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, USE_ROCM=OFF, 

    TorchVision: 0.14.1
    OpenCV: 3.4.18
    MMEngine: 0.10.4

Runtime environment:
    cudnn_benchmark: True
    mp_cfg: {'mp_start_method': 'fork', 'opencv_num_threads': 0}
    dist_cfg: {'backend': 'nccl'}
    seed: 219015255
    Distributed launcher: none
    Distributed training: False
    GPU number: 1
------------------------------------------------------------

09/21 01:22:44 - mmengine - INFO - Config:
auto_scale_lr = dict(base_batch_size=16, enable=False)
backbone_embed_multi = dict(decay_mult=0.0, lr_mult=0.1)
backbone_norm_multi = dict(decay_mult=0.0, lr_mult=0.1)
crop_size = (
    512,
    512,
)
custom_imports = dict(allow_failed_imports=False, imports='mmdet.models')
custom_keys = dict({
    'absolute_pos_embed':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone':
    dict(decay_mult=1.0, lr_mult=0.1),
    'backbone.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.patch_embed.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.0.blocks.0.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.0.blocks.1.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.0.downsample.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.1.blocks.0.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.1.blocks.1.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.1.downsample.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.0.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.1.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.2.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.3.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.4.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.5.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.downsample.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.3.blocks.0.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.3.blocks.1.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'level_embed':
    dict(decay_mult=0.0, lr_mult=1.0),
    'query_embed':
    dict(decay_mult=0.0, lr_mult=1.0),
    'query_feat':
    dict(decay_mult=0.0, lr_mult=1.0),
    'relative_position_bias_table':
    dict(decay_mult=0.0, lr_mult=0.1)
})
data_root = 'data/ade/ADEChallengeData2016'
dataset_type = 'ADE20KDataset'
default_hooks = dict(
    checkpoint=dict(
        by_epoch=False, interval=5000, save_best='mIoU',
        type='CheckpointHook'),
    logger=dict(interval=50, log_metric_by_epoch=False, type='LoggerHook'),
    param_scheduler=dict(type='ParamSchedulerHook'),
    sampler_seed=dict(type='DistSamplerSeedHook'),
    timer=dict(type='IterTimerHook'),
    visualization=dict(type='SegVisualizationHook'))
default_scope = 'mmseg'
depths = [
    2,
    2,
    6,
    2,
]
embed_multi = dict(decay_mult=0.0, lr_mult=1.0)
env_cfg = dict(
    cudnn_benchmark=True,
    dist_cfg=dict(backend='nccl'),
    mp_cfg=dict(mp_start_method='fork', opencv_num_threads=0))
img_ratios = [
    0.5,
    0.75,
    1.0,
    1.25,
    1.5,
    1.75,
]
launcher = 'none'
load_from = '../checkpoint_files/ade20k/mask2former/mask2former_swin-t_8xb2-160k_ade20k-512x512_20221203_234230-7d64e5dd.pth'
log_level = 'INFO'
log_processor = dict(by_epoch=False)
model = dict(
    backbone=dict(
        attn_drop_rate=0.0,
        depths=[
            2,
            2,
            6,
            2,
        ],
        drop_path_rate=0.3,
        drop_rate=0.0,
        embed_dims=96,
        frozen_stages=-1,
        init_cfg=dict(
            checkpoint=
            'https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/swin/swin_tiny_patch4_window7_224_20220317-1cdeb081.pth',
            type='Pretrained'),
        mlp_ratio=4,
        num_heads=[
            3,
            6,
            12,
            24,
        ],
        out_indices=(
            0,
            1,
            2,
            3,
        ),
        patch_norm=True,
        qk_scale=None,
        qkv_bias=True,
        type='SwinTransformer',
        window_size=7,
        with_cp=False),
    data_preprocessor=dict(
        bgr_to_rgb=True,
        corruption='defocus_blur',
        mean=[
            123.675,
            116.28,
            103.53,
        ],
        pad_val=0,
        seg_pad_val=255,
        size=(
            512,
            512,
        ),
        std=[
            58.395,
            57.12,
            57.375,
        ],
        test_cfg=dict(size_divisor=32),
        type='SegDataPreProcessor'),
    decode_head=dict(
        align_corners=False,
        enforce_decoder_input_project=False,
        feat_channels=256,
        in_channels=[
            96,
            192,
            384,
            768,
        ],
        loss_cls=dict(
            class_weight=[
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                0.1,
            ],
            loss_weight=2.0,
            reduction='mean',
            type='mmdet.CrossEntropyLoss',
            use_sigmoid=False),
        loss_dice=dict(
            activate=True,
            eps=1.0,
            loss_weight=5.0,
            naive_dice=True,
            reduction='mean',
            type='mmdet.DiceLoss',
            use_sigmoid=True),
        loss_mask=dict(
            loss_weight=5.0,
            reduction='mean',
            type='mmdet.CrossEntropyLoss',
            use_sigmoid=True),
        num_classes=150,
        num_queries=100,
        num_transformer_feat_level=3,
        out_channels=256,
        pixel_decoder=dict(
            act_cfg=dict(type='ReLU'),
            encoder=dict(
                init_cfg=None,
                layer_cfg=dict(
                    ffn_cfg=dict(
                        act_cfg=dict(inplace=True, type='ReLU'),
                        embed_dims=256,
                        feedforward_channels=1024,
                        ffn_drop=0.0,
                        num_fcs=2),
                    self_attn_cfg=dict(
                        batch_first=True,
                        dropout=0.0,
                        embed_dims=256,
                        im2col_step=64,
                        init_cfg=None,
                        norm_cfg=None,
                        num_heads=8,
                        num_levels=3,
                        num_points=4)),
                num_layers=6),
            init_cfg=None,
            norm_cfg=dict(num_groups=32, type='GN'),
            num_outs=3,
            positional_encoding=dict(normalize=True, num_feats=128),
            type='mmdet.MSDeformAttnPixelDecoder'),
        positional_encoding=dict(normalize=True, num_feats=128),
        strides=[
            4,
            8,
            16,
            32,
        ],
        train_cfg=dict(
            assigner=dict(
                match_costs=[
                    dict(type='mmdet.ClassificationCost', weight=2.0),
                    dict(
                        type='mmdet.CrossEntropyLossCost',
                        use_sigmoid=True,
                        weight=5.0),
                    dict(
                        eps=1.0,
                        pred_act=True,
                        type='mmdet.DiceCost',
                        weight=5.0),
                ],
                type='mmdet.HungarianAssigner'),
            importance_sample_ratio=0.75,
            num_points=12544,
            oversample_ratio=3.0,
            sampler=dict(type='mmdet.MaskPseudoSampler')),
        transformer_decoder=dict(
            init_cfg=None,
            layer_cfg=dict(
                cross_attn_cfg=dict(
                    attn_drop=0.0,
                    batch_first=True,
                    dropout_layer=None,
                    embed_dims=256,
                    num_heads=8,
                    proj_drop=0.0),
                ffn_cfg=dict(
                    act_cfg=dict(inplace=True, type='ReLU'),
                    add_identity=True,
                    dropout_layer=None,
                    embed_dims=256,
                    feedforward_channels=2048,
                    ffn_drop=0.0,
                    num_fcs=2),
                self_attn_cfg=dict(
                    attn_drop=0.0,
                    batch_first=True,
                    dropout_layer=None,
                    embed_dims=256,
                    num_heads=8,
                    proj_drop=0.0)),
            num_layers=9,
            return_intermediate=True),
        type='Mask2FormerHead'),
    test_cfg=dict(mode='whole'),
    train_cfg=dict(),
    type='EncoderDecoder')
num_classes = 150
optim_wrapper = dict(
    clip_grad=dict(max_norm=0.01, norm_type=2),
    optimizer=dict(
        betas=(
            0.9,
            0.999,
        ),
        eps=1e-08,
        lr=0.0001,
        type='AdamW',
        weight_decay=0.05),
    paramwise_cfg=dict(
        custom_keys=dict({
            'absolute_pos_embed':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone':
            dict(decay_mult=1.0, lr_mult=0.1),
            'backbone.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.patch_embed.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.0.blocks.0.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.0.blocks.1.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.0.downsample.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.1.blocks.0.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.1.blocks.1.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.1.downsample.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.0.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.1.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.2.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.3.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.4.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.5.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.downsample.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.3.blocks.0.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.3.blocks.1.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'level_embed':
            dict(decay_mult=0.0, lr_mult=1.0),
            'query_embed':
            dict(decay_mult=0.0, lr_mult=1.0),
            'query_feat':
            dict(decay_mult=0.0, lr_mult=1.0),
            'relative_position_bias_table':
            dict(decay_mult=0.0, lr_mult=0.1)
        }),
        norm_decay_mult=0.0),
    type='OptimWrapper')
optimizer = dict(
    betas=(
        0.9,
        0.999,
    ),
    eps=1e-08,
    lr=0.0001,
    type='AdamW',
    weight_decay=0.05)
param_scheduler = [
    dict(
        begin=0,
        by_epoch=False,
        end=160000,
        eta_min=0,
        power=0.9,
        type='PolyLR'),
]
pretrained = 'https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/swin/swin_tiny_patch4_window7_224_20220317-1cdeb081.pth'
resume = False
test_cfg = dict(type='TestLoop')
test_dataloader = dict(
    batch_size=1,
    dataset=dict(
        data_prefix=dict(
            img_path='images/validation',
            seg_map_path='annotations/validation'),
        data_root='data/ade/ADEChallengeData2016',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(keep_ratio=True, scale=(
                2048,
                512,
            ), type='Resize'),
            dict(reduce_zero_label=True, type='LoadAnnotations'),
            dict(type='PackSegInputs'),
        ],
        type='ADE20KDataset'),
    num_workers=4,
    persistent_workers=True,
    sampler=dict(shuffle=False, type='DefaultSampler'))
test_evaluator = dict(
    iou_metrics=[
        'mIoU',
    ], type='IoUMetric')
test_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(keep_ratio=True, scale=(
        2048,
        512,
    ), type='Resize'),
    dict(reduce_zero_label=True, type='LoadAnnotations'),
    dict(type='PackSegInputs'),
]
train_cfg = dict(
    max_iters=160000, type='IterBasedTrainLoop', val_interval=5000)
train_dataloader = dict(
    batch_size=2,
    dataset=dict(
        data_prefix=dict(
            img_path='images/training', seg_map_path='annotations/training'),
        data_root='data/ade/ADEChallengeData2016',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(reduce_zero_label=True, type='LoadAnnotations'),
            dict(
                max_size=2048,
                resize_type='ResizeShortestEdge',
                scales=[
                    256,
                    307,
                    358,
                    409,
                    460,
                    512,
                    563,
                    614,
                    665,
                    716,
                    768,
                    819,
                    870,
                    921,
                    972,
                    1024,
                ],
                type='RandomChoiceResize'),
            dict(
                cat_max_ratio=0.75, crop_size=(
                    512,
                    512,
                ), type='RandomCrop'),
            dict(prob=0.5, type='RandomFlip'),
            dict(type='PhotoMetricDistortion'),
            dict(type='PackSegInputs'),
        ],
        type='ADE20KDataset'),
    num_workers=4,
    persistent_workers=True,
    sampler=dict(shuffle=True, type='InfiniteSampler'))
train_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(reduce_zero_label=True, type='LoadAnnotations'),
    dict(
        max_size=2048,
        resize_type='ResizeShortestEdge',
        scales=[
            256,
            307,
            358,
            409,
            460,
            512,
            563,
            614,
            665,
            716,
            768,
            819,
            870,
            921,
            972,
            1024,
        ],
        type='RandomChoiceResize'),
    dict(cat_max_ratio=0.75, crop_size=(
        512,
        512,
    ), type='RandomCrop'),
    dict(prob=0.5, type='RandomFlip'),
    dict(type='PhotoMetricDistortion'),
    dict(type='PackSegInputs'),
]
tta_model = dict(type='SegTTAModel')
tta_pipeline = [
    dict(backend_args=None, type='LoadImageFromFile'),
    dict(
        transforms=[
            [
                dict(keep_ratio=True, scale_factor=0.5, type='Resize'),
                dict(keep_ratio=True, scale_factor=0.75, type='Resize'),
                dict(keep_ratio=True, scale_factor=1.0, type='Resize'),
                dict(keep_ratio=True, scale_factor=1.25, type='Resize'),
                dict(keep_ratio=True, scale_factor=1.5, type='Resize'),
                dict(keep_ratio=True, scale_factor=1.75, type='Resize'),
            ],
            [
                dict(direction='horizontal', prob=0.0, type='RandomFlip'),
                dict(direction='horizontal', prob=1.0, type='RandomFlip'),
            ],
            [
                dict(type='LoadAnnotations'),
            ],
            [
                dict(type='PackSegInputs'),
            ],
        ],
        type='TestTimeAug'),
]
val_cfg = dict(type='ValLoop')
val_dataloader = dict(
    batch_size=1,
    dataset=dict(
        data_prefix=dict(
            img_path='images/validation',
            seg_map_path='annotations/validation'),
        data_root='data/ade/ADEChallengeData2016',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(keep_ratio=True, scale=(
                2048,
                512,
            ), type='Resize'),
            dict(reduce_zero_label=True, type='LoadAnnotations'),
            dict(type='PackSegInputs'),
        ],
        type='ADE20KDataset'),
    num_workers=4,
    persistent_workers=True,
    sampler=dict(shuffle=False, type='DefaultSampler'))
val_evaluator = dict(
    iou_metrics=[
        'mIoU',
    ], type='IoUMetric')
vis_backends = [
    dict(type='LocalVisBackend'),
]
visualizer = dict(
    name='visualizer',
    type='SegLocalVisualizer',
    vis_backends=[
        dict(type='LocalVisBackend'),
    ])
work_dir = '../corruptions/work_dirs/ade20k/mask2former/mask2former_swin-t_8xb2-160k_ade20k-512x512/defocus_blur'

09/21 01:22:47 - mmengine - INFO - Distributed training is not used, all SyncBatchNorm (SyncBN) layers in the model will be automatically reverted to BatchNormXd layers if they are used.
09/21 01:22:47 - mmengine - INFO - Hooks will be executed in the following order:
before_run:
(VERY_HIGH   ) RuntimeInfoHook                    
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
before_train:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_train_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(NORMAL      ) DistSamplerSeedHook                
 -------------------- 
before_train_iter:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_train_iter:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(NORMAL      ) SegVisualizationHook               
(BELOW_NORMAL) LoggerHook                         
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
after_train_epoch:
(NORMAL      ) IterTimerHook                      
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_val:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
before_val_epoch:
(NORMAL      ) IterTimerHook                      
 -------------------- 
before_val_iter:
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_val_iter:
(NORMAL      ) IterTimerHook                      
(NORMAL      ) SegVisualizationHook               
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_val_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
after_val:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
after_train:
(VERY_HIGH   ) RuntimeInfoHook                    
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_test:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
before_test_epoch:
(NORMAL      ) IterTimerHook                      
 -------------------- 
before_test_iter:
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_test_iter:
(NORMAL      ) IterTimerHook                      
(NORMAL      ) SegVisualizationHook               
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_test_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_test:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
after_run:
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
09/21 01:22:47 - mmengine - WARNING - The prefix is not set in metric class IoUMetric.
Loads checkpoint by local backend from path: ../checkpoint_files/ade20k/mask2former/mask2former_swin-t_8xb2-160k_ade20k-512x512_20221203_234230-7d64e5dd.pth
09/21 01:22:48 - mmengine - INFO - Load checkpoint from ../checkpoint_files/ade20k/mask2former/mask2former_swin-t_8xb2-160k_ade20k-512x512_20221203_234230-7d64e5dd.pth
09/21 01:23:07 - mmengine - INFO - Iter(test) [  50/2000]    eta: 0:11:58  time: 0.2675  data_time: 0.0016  memory: 12733  
09/21 01:23:14 - mmengine - INFO - Iter(test) [ 100/2000]    eta: 0:08:03  time: 0.1739  data_time: 0.0017  memory: 12714  
09/21 01:23:18 - mmengine - INFO - Iter(test) [ 150/2000]    eta: 0:06:11  time: 0.0948  data_time: 0.0016  memory: 853  
09/21 01:23:25 - mmengine - INFO - Iter(test) [ 200/2000]    eta: 0:05:30  time: 0.0927  data_time: 0.0016  memory: 12754  
09/21 01:23:31 - mmengine - INFO - Iter(test) [ 250/2000]    eta: 0:04:59  time: 0.0857  data_time: 0.0015  memory: 12756  
09/21 01:23:36 - mmengine - INFO - Iter(test) [ 300/2000]    eta: 0:04:32  time: 0.0963  data_time: 0.0016  memory: 12721  
09/21 01:23:43 - mmengine - INFO - Iter(test) [ 350/2000]    eta: 0:04:15  time: 0.0898  data_time: 0.0014  memory: 12728  
09/21 01:23:48 - mmengine - INFO - Iter(test) [ 400/2000]    eta: 0:03:58  time: 0.0919  data_time: 0.0015  memory: 12694  
09/21 01:23:52 - mmengine - INFO - Iter(test) [ 450/2000]    eta: 0:03:40  time: 0.0883  data_time: 0.0015  memory: 894  
09/21 01:23:57 - mmengine - INFO - Iter(test) [ 500/2000]    eta: 0:03:25  time: 0.0874  data_time: 0.0014  memory: 853  
09/21 01:24:01 - mmengine - INFO - Iter(test) [ 550/2000]    eta: 0:03:12  time: 0.0912  data_time: 0.0016  memory: 961  
09/21 01:24:06 - mmengine - INFO - Iter(test) [ 600/2000]    eta: 0:03:01  time: 0.0960  data_time: 0.0016  memory: 958  
09/21 01:24:11 - mmengine - INFO - Iter(test) [ 650/2000]    eta: 0:02:52  time: 0.1786  data_time: 0.0013  memory: 12735  
09/21 01:24:17 - mmengine - INFO - Iter(test) [ 700/2000]    eta: 0:02:44  time: 0.0921  data_time: 0.0015  memory: 12724  
09/21 01:24:21 - mmengine - INFO - Iter(test) [ 750/2000]    eta: 0:02:35  time: 0.0858  data_time: 0.0014  memory: 1014  
09/21 01:24:26 - mmengine - INFO - Iter(test) [ 800/2000]    eta: 0:02:26  time: 0.0887  data_time: 0.0015  memory: 853  
09/21 01:24:30 - mmengine - INFO - Iter(test) [ 850/2000]    eta: 0:02:17  time: 0.0884  data_time: 0.0015  memory: 826  
09/21 01:24:34 - mmengine - INFO - Iter(test) [ 900/2000]    eta: 0:02:09  time: 0.0854  data_time: 0.0014  memory: 906  
09/21 01:24:39 - mmengine - INFO - Iter(test) [ 950/2000]    eta: 0:02:02  time: 0.0891  data_time: 0.0015  memory: 934  
09/21 01:24:44 - mmengine - INFO - Iter(test) [1000/2000]    eta: 0:01:55  time: 0.0867  data_time: 0.0014  memory: 934  
09/21 01:24:49 - mmengine - INFO - Iter(test) [1050/2000]    eta: 0:01:49  time: 0.0906  data_time: 0.0014  memory: 12737  
09/21 01:24:53 - mmengine - INFO - Iter(test) [1100/2000]    eta: 0:01:42  time: 0.0893  data_time: 0.0014  memory: 931  
09/21 01:24:58 - mmengine - INFO - Iter(test) [1150/2000]    eta: 0:01:35  time: 0.0912  data_time: 0.0014  memory: 904  
09/21 01:25:02 - mmengine - INFO - Iter(test) [1200/2000]    eta: 0:01:29  time: 0.0873  data_time: 0.0015  memory: 1839  
09/21 01:25:08 - mmengine - INFO - Iter(test) [1250/2000]    eta: 0:01:23  time: 0.0900  data_time: 0.0015  memory: 12716  
09/21 01:25:12 - mmengine - INFO - Iter(test) [1300/2000]    eta: 0:01:17  time: 0.0920  data_time: 0.0015  memory: 853  
09/21 01:25:16 - mmengine - INFO - Iter(test) [1350/2000]    eta: 0:01:11  time: 0.0860  data_time: 0.0014  memory: 853  
09/21 01:25:21 - mmengine - INFO - Iter(test) [1400/2000]    eta: 0:01:05  time: 0.0900  data_time: 0.0014  memory: 931  
09/21 01:25:25 - mmengine - INFO - Iter(test) [1450/2000]    eta: 0:00:59  time: 0.0905  data_time: 0.0014  memory: 934  
09/21 01:25:29 - mmengine - INFO - Iter(test) [1500/2000]    eta: 0:00:53  time: 0.0844  data_time: 0.0013  memory: 852  
09/21 01:25:34 - mmengine - INFO - Iter(test) [1550/2000]    eta: 0:00:48  time: 0.0904  data_time: 0.0014  memory: 934  
09/21 01:25:38 - mmengine - INFO - Iter(test) [1600/2000]    eta: 0:00:42  time: 0.0878  data_time: 0.0015  memory: 826  
09/21 01:25:44 - mmengine - INFO - Iter(test) [1650/2000]    eta: 0:00:37  time: 0.0848  data_time: 0.0013  memory: 12725  
09/21 01:25:48 - mmengine - INFO - Iter(test) [1700/2000]    eta: 0:00:31  time: 0.0899  data_time: 0.0015  memory: 930  
09/21 01:25:53 - mmengine - INFO - Iter(test) [1750/2000]    eta: 0:00:26  time: 0.0902  data_time: 0.0013  memory: 957  
09/21 01:25:57 - mmengine - INFO - Iter(test) [1800/2000]    eta: 0:00:20  time: 0.0891  data_time: 0.0015  memory: 853  
09/21 01:26:01 - mmengine - INFO - Iter(test) [1850/2000]    eta: 0:00:15  time: 0.0842  data_time: 0.0015  memory: 773  
09/21 01:26:06 - mmengine - INFO - Iter(test) [1900/2000]    eta: 0:00:10  time: 0.0931  data_time: 0.0015  memory: 987  
09/21 01:26:10 - mmengine - INFO - Iter(test) [1950/2000]    eta: 0:00:05  time: 0.0871  data_time: 0.0014  memory: 1224  
09/21 01:26:15 - mmengine - INFO - Iter(test) [2000/2000]    eta: 0:00:00  time: 0.0763  data_time: 0.0012  memory: 1012  
09/21 01:26:15 - mmengine - INFO - per class results:
09/21 01:26:15 - mmengine - INFO - 
+---------------------+-------+-------+
|        Class        |  IoU  |  Acc  |
+---------------------+-------+-------+
|         wall        | 75.91 |  86.5 |
|       building      | 81.42 |  93.3 |
|         sky         | 94.43 | 96.83 |
|        floor        | 80.79 | 90.02 |
|         tree        | 73.08 | 85.22 |
|       ceiling       | 81.81 |  88.2 |
|         road        | 82.99 | 90.95 |
|         bed         | 89.13 | 95.36 |
|      windowpane     | 59.71 |  79.7 |
|        grass        | 66.87 | 83.64 |
|       cabinet       | 56.29 | 70.23 |
|       sidewalk      | 65.05 | 79.79 |
|        person       | 79.22 | 88.57 |
|        earth        | 33.46 | 41.96 |
|         door        | 45.57 | 61.48 |
|        table        | 58.06 | 75.26 |
|       mountain      | 58.91 | 77.07 |
|        plant        | 49.91 | 65.26 |
|       curtain       | 73.76 | 85.77 |
|        chair        | 54.82 | 72.13 |
|         car         |  82.8 | 92.22 |
|        water        | 48.19 |  66.5 |
|       painting      |  68.0 | 86.69 |
|         sofa        | 62.09 | 76.92 |
|        shelf        | 43.54 | 62.02 |
|        house        | 43.77 | 53.35 |
|         sea         | 50.72 | 68.97 |
|        mirror       | 64.58 | 75.86 |
|         rug         |  61.3 | 74.16 |
|        field        | 26.63 | 40.99 |
|       armchair      | 38.87 | 60.92 |
|         seat        | 59.62 | 79.12 |
|        fence        | 43.86 | 55.11 |
|         desk        | 41.43 | 64.66 |
|         rock        | 44.71 | 70.62 |
|       wardrobe      | 49.96 | 63.39 |
|         lamp        | 63.41 | 77.57 |
|       bathtub       | 76.38 | 88.72 |
|       railing       | 31.86 | 47.52 |
|       cushion       | 52.04 | 63.04 |
|         base        | 31.32 | 53.48 |
|         box         | 19.36 | 27.98 |
|        column       |  41.6 | 55.09 |
|      signboard      |  34.7 | 48.69 |
|   chest of drawers  | 33.45 | 57.49 |
|       counter       | 32.52 | 46.74 |
|         sand        | 35.63 | 54.04 |
|         sink        | 72.66 | 80.66 |
|      skyscraper     |  50.1 | 58.32 |
|      fireplace      | 67.59 | 85.54 |
|     refrigerator    | 75.77 | 88.29 |
|      grandstand     | 42.78 | 70.47 |
|         path        | 23.28 |  35.6 |
|        stairs       | 27.41 | 32.68 |
|        runway       | 66.18 | 84.48 |
|         case        | 36.94 | 57.46 |
|      pool table     | 86.99 | 96.44 |
|        pillow       | 51.85 | 63.58 |
|     screen door     | 42.86 | 54.89 |
|       stairway      | 34.22 | 45.25 |
|        river        | 16.71 | 24.22 |
|        bridge       | 66.06 | 80.85 |
|       bookcase      | 44.33 |  58.1 |
|        blind        | 29.39 | 30.99 |
|     coffee table    | 60.61 | 80.49 |
|        toilet       | 85.91 | 90.49 |
|        flower       | 33.89 | 51.34 |
|         book        | 46.18 | 60.13 |
|         hill        | 11.21 | 22.13 |
|        bench        | 39.65 | 51.61 |
|      countertop     | 65.48 |  82.3 |
|        stove        | 76.11 | 85.58 |
|         palm        | 45.27 | 56.17 |
|    kitchen island   | 38.53 | 65.94 |
|       computer      | 57.77 | 65.51 |
|     swivel chair    | 42.38 | 60.99 |
|         boat        |  33.8 | 49.46 |
|         bar         | 47.33 | 55.83 |
|    arcade machine   | 30.05 | 32.73 |
|        hovel        |  9.28 | 15.15 |
|         bus         | 80.52 | 89.35 |
|        towel        | 64.84 |  74.0 |
|        light        | 55.45 |  74.9 |
|        truck        | 29.28 | 49.81 |
|        tower        |  3.74 |  5.92 |
|      chandelier     | 65.29 | 75.75 |
|        awning       | 29.32 | 37.11 |
|     streetlight     | 26.89 |  42.7 |
|        booth        | 29.13 | 66.92 |
| television receiver | 50.37 | 71.76 |
|       airplane      | 58.03 | 66.12 |
|      dirt track     |  3.09 |  6.79 |
|       apparel       | 30.54 | 46.23 |
|         pole        | 15.99 | 21.51 |
|         land        |  2.34 |  5.1  |
|      bannister      |  12.9 | 23.04 |
|      escalator      | 40.65 | 42.27 |
|       ottoman       | 36.03 | 54.23 |
|        bottle       | 32.59 | 56.85 |
|        buffet       | 28.12 | 35.09 |
|        poster       | 18.76 | 26.38 |
|        stage        | 22.83 | 30.68 |
|         van         | 47.97 | 60.46 |
|         ship        |  7.03 | 10.27 |
|       fountain      | 20.72 | 21.84 |
|    conveyer belt    | 59.82 | 86.93 |
|        canopy       | 30.27 | 44.65 |
|        washer       |  59.5 | 63.32 |
|      plaything      | 15.11 | 41.06 |
|    swimming pool    | 49.21 | 72.34 |
|        stool        | 41.13 | 60.85 |
|        barrel       | 62.09 | 73.91 |
|        basket       | 22.92 | 26.52 |
|      waterfall      | 32.07 | 45.37 |
|         tent        |  93.1 | 98.05 |
|         bag         | 11.05 | 14.34 |
|       minibike      |  67.3 | 83.97 |
|        cradle       | 83.62 | 97.04 |
|         oven        | 41.63 | 46.97 |
|         ball        | 44.47 | 51.02 |
|         food        | 59.44 | 71.63 |
|         step        |  7.62 |  9.1  |
|         tank        | 24.77 | 25.92 |
|      trade name     |  19.2 | 23.26 |
|      microwave      |  37.4 | 41.58 |
|         pot         | 43.28 | 50.17 |
|        animal       | 58.86 | 60.82 |
|       bicycle       | 52.33 | 66.45 |
|         lake        | 43.31 | 73.28 |
|      dishwasher     | 61.03 | 74.66 |
|        screen       | 46.59 | 69.07 |
|       blanket       |  14.1 | 16.68 |
|      sculpture      | 42.14 | 62.45 |
|         hood        | 66.09 | 73.25 |
|        sconce       | 45.44 | 62.41 |
|         vase        | 34.73 | 52.29 |
|    traffic light    | 32.21 | 65.66 |
|         tray        | 13.01 | 23.28 |
|        ashcan       | 33.05 | 53.73 |
|         fan         | 58.54 | 74.58 |
|         pier        | 61.89 | 81.32 |
|      crt screen     |  0.64 |  2.29 |
|        plate        | 40.41 | 50.84 |
|       monitor       |  5.49 |  7.91 |
|    bulletin board   | 41.52 | 45.32 |
|        shower       |  2.1  | 24.09 |
|       radiator      | 46.22 | 54.93 |
|        glass        | 12.59 |  13.8 |
|        clock        | 27.52 | 34.19 |
|         flag        | 31.43 |  34.9 |
+---------------------+-------+-------+
09/21 01:26:15 - mmengine - INFO - Iter(test) [2000/2000]    aAcc: 81.6600  mIoU: 45.2700  mAcc: 57.9600  data_time: 0.0016  time: 0.1031
Finished processing corruption type: defocus_blur
Processing corruption type: glass_blur
09/21 01:26:19 - mmengine - INFO - 
------------------------------------------------------------
System environment:
    sys.platform: linux
    Python: 3.10.13 | packaged by conda-forge | (main, Dec 23 2023, 15:36:39) [GCC 12.3.0]
    CUDA available: True
    MUSA available: False
    numpy_random_seed: 1503301636
    GPU 0: Tesla V100-SXM2-32GB
    CUDA_HOME: /opt/bwhpc/common/devel/cuda/11.7
    NVCC: Cuda compilation tools, release 11.7, V11.7.99
    GCC: gcc (GCC) 8.5.0 20210514 (Red Hat 8.5.0-18)
    PyTorch: 1.13.1
    PyTorch compiling details: PyTorch built with:
  - GCC 9.3
  - C++ Version: 201402
  - Intel(R) oneAPI Math Kernel Library Version 2023.1-Product Build 20230303 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v2.6.0 (Git Hash 52b5f107dd9cf10910aaa19cb47f3abf9b349815)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - LAPACK is enabled (usually provided by MKL)
  - NNPACK is enabled
  - CPU capability usage: AVX2
  - CUDA Runtime 11.7
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_61,code=sm_61;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86;-gencode;arch=compute_37,code=compute_37
  - CuDNN 8.5
  - Magma 2.6.1
  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.7, CUDNN_VERSION=8.5.0, CXX_COMPILER=/opt/rh/devtoolset-9/root/usr/bin/c++, CXX_FLAGS= -fabi-version=11 -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -DEDGE_PROFILER_USE_KINETO -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Werror=non-virtual-dtor -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wunused-local-typedefs -Wno-unused-parameter -Wno-unused-function -Wno-unused-result -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Werror=cast-function-type -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.13.1, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, USE_ROCM=OFF, 

    TorchVision: 0.14.1
    OpenCV: 3.4.18
    MMEngine: 0.10.4

Runtime environment:
    cudnn_benchmark: True
    mp_cfg: {'mp_start_method': 'fork', 'opencv_num_threads': 0}
    dist_cfg: {'backend': 'nccl'}
    seed: 1503301636
    Distributed launcher: none
    Distributed training: False
    GPU number: 1
------------------------------------------------------------

09/21 01:26:19 - mmengine - INFO - Config:
auto_scale_lr = dict(base_batch_size=16, enable=False)
backbone_embed_multi = dict(decay_mult=0.0, lr_mult=0.1)
backbone_norm_multi = dict(decay_mult=0.0, lr_mult=0.1)
crop_size = (
    512,
    512,
)
custom_imports = dict(allow_failed_imports=False, imports='mmdet.models')
custom_keys = dict({
    'absolute_pos_embed':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone':
    dict(decay_mult=1.0, lr_mult=0.1),
    'backbone.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.patch_embed.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.0.blocks.0.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.0.blocks.1.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.0.downsample.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.1.blocks.0.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.1.blocks.1.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.1.downsample.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.0.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.1.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.2.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.3.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.4.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.5.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.downsample.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.3.blocks.0.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.3.blocks.1.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'level_embed':
    dict(decay_mult=0.0, lr_mult=1.0),
    'query_embed':
    dict(decay_mult=0.0, lr_mult=1.0),
    'query_feat':
    dict(decay_mult=0.0, lr_mult=1.0),
    'relative_position_bias_table':
    dict(decay_mult=0.0, lr_mult=0.1)
})
data_root = 'data/ade/ADEChallengeData2016'
dataset_type = 'ADE20KDataset'
default_hooks = dict(
    checkpoint=dict(
        by_epoch=False, interval=5000, save_best='mIoU',
        type='CheckpointHook'),
    logger=dict(interval=50, log_metric_by_epoch=False, type='LoggerHook'),
    param_scheduler=dict(type='ParamSchedulerHook'),
    sampler_seed=dict(type='DistSamplerSeedHook'),
    timer=dict(type='IterTimerHook'),
    visualization=dict(type='SegVisualizationHook'))
default_scope = 'mmseg'
depths = [
    2,
    2,
    6,
    2,
]
embed_multi = dict(decay_mult=0.0, lr_mult=1.0)
env_cfg = dict(
    cudnn_benchmark=True,
    dist_cfg=dict(backend='nccl'),
    mp_cfg=dict(mp_start_method='fork', opencv_num_threads=0))
img_ratios = [
    0.5,
    0.75,
    1.0,
    1.25,
    1.5,
    1.75,
]
launcher = 'none'
load_from = '../checkpoint_files/ade20k/mask2former/mask2former_swin-t_8xb2-160k_ade20k-512x512_20221203_234230-7d64e5dd.pth'
log_level = 'INFO'
log_processor = dict(by_epoch=False)
model = dict(
    backbone=dict(
        attn_drop_rate=0.0,
        depths=[
            2,
            2,
            6,
            2,
        ],
        drop_path_rate=0.3,
        drop_rate=0.0,
        embed_dims=96,
        frozen_stages=-1,
        init_cfg=dict(
            checkpoint=
            'https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/swin/swin_tiny_patch4_window7_224_20220317-1cdeb081.pth',
            type='Pretrained'),
        mlp_ratio=4,
        num_heads=[
            3,
            6,
            12,
            24,
        ],
        out_indices=(
            0,
            1,
            2,
            3,
        ),
        patch_norm=True,
        qk_scale=None,
        qkv_bias=True,
        type='SwinTransformer',
        window_size=7,
        with_cp=False),
    data_preprocessor=dict(
        bgr_to_rgb=True,
        corruption='glass_blur',
        mean=[
            123.675,
            116.28,
            103.53,
        ],
        pad_val=0,
        seg_pad_val=255,
        size=(
            512,
            512,
        ),
        std=[
            58.395,
            57.12,
            57.375,
        ],
        test_cfg=dict(size_divisor=32),
        type='SegDataPreProcessor'),
    decode_head=dict(
        align_corners=False,
        enforce_decoder_input_project=False,
        feat_channels=256,
        in_channels=[
            96,
            192,
            384,
            768,
        ],
        loss_cls=dict(
            class_weight=[
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                0.1,
            ],
            loss_weight=2.0,
            reduction='mean',
            type='mmdet.CrossEntropyLoss',
            use_sigmoid=False),
        loss_dice=dict(
            activate=True,
            eps=1.0,
            loss_weight=5.0,
            naive_dice=True,
            reduction='mean',
            type='mmdet.DiceLoss',
            use_sigmoid=True),
        loss_mask=dict(
            loss_weight=5.0,
            reduction='mean',
            type='mmdet.CrossEntropyLoss',
            use_sigmoid=True),
        num_classes=150,
        num_queries=100,
        num_transformer_feat_level=3,
        out_channels=256,
        pixel_decoder=dict(
            act_cfg=dict(type='ReLU'),
            encoder=dict(
                init_cfg=None,
                layer_cfg=dict(
                    ffn_cfg=dict(
                        act_cfg=dict(inplace=True, type='ReLU'),
                        embed_dims=256,
                        feedforward_channels=1024,
                        ffn_drop=0.0,
                        num_fcs=2),
                    self_attn_cfg=dict(
                        batch_first=True,
                        dropout=0.0,
                        embed_dims=256,
                        im2col_step=64,
                        init_cfg=None,
                        norm_cfg=None,
                        num_heads=8,
                        num_levels=3,
                        num_points=4)),
                num_layers=6),
            init_cfg=None,
            norm_cfg=dict(num_groups=32, type='GN'),
            num_outs=3,
            positional_encoding=dict(normalize=True, num_feats=128),
            type='mmdet.MSDeformAttnPixelDecoder'),
        positional_encoding=dict(normalize=True, num_feats=128),
        strides=[
            4,
            8,
            16,
            32,
        ],
        train_cfg=dict(
            assigner=dict(
                match_costs=[
                    dict(type='mmdet.ClassificationCost', weight=2.0),
                    dict(
                        type='mmdet.CrossEntropyLossCost',
                        use_sigmoid=True,
                        weight=5.0),
                    dict(
                        eps=1.0,
                        pred_act=True,
                        type='mmdet.DiceCost',
                        weight=5.0),
                ],
                type='mmdet.HungarianAssigner'),
            importance_sample_ratio=0.75,
            num_points=12544,
            oversample_ratio=3.0,
            sampler=dict(type='mmdet.MaskPseudoSampler')),
        transformer_decoder=dict(
            init_cfg=None,
            layer_cfg=dict(
                cross_attn_cfg=dict(
                    attn_drop=0.0,
                    batch_first=True,
                    dropout_layer=None,
                    embed_dims=256,
                    num_heads=8,
                    proj_drop=0.0),
                ffn_cfg=dict(
                    act_cfg=dict(inplace=True, type='ReLU'),
                    add_identity=True,
                    dropout_layer=None,
                    embed_dims=256,
                    feedforward_channels=2048,
                    ffn_drop=0.0,
                    num_fcs=2),
                self_attn_cfg=dict(
                    attn_drop=0.0,
                    batch_first=True,
                    dropout_layer=None,
                    embed_dims=256,
                    num_heads=8,
                    proj_drop=0.0)),
            num_layers=9,
            return_intermediate=True),
        type='Mask2FormerHead'),
    test_cfg=dict(mode='whole'),
    train_cfg=dict(),
    type='EncoderDecoder')
num_classes = 150
optim_wrapper = dict(
    clip_grad=dict(max_norm=0.01, norm_type=2),
    optimizer=dict(
        betas=(
            0.9,
            0.999,
        ),
        eps=1e-08,
        lr=0.0001,
        type='AdamW',
        weight_decay=0.05),
    paramwise_cfg=dict(
        custom_keys=dict({
            'absolute_pos_embed':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone':
            dict(decay_mult=1.0, lr_mult=0.1),
            'backbone.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.patch_embed.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.0.blocks.0.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.0.blocks.1.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.0.downsample.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.1.blocks.0.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.1.blocks.1.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.1.downsample.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.0.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.1.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.2.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.3.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.4.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.5.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.downsample.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.3.blocks.0.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.3.blocks.1.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'level_embed':
            dict(decay_mult=0.0, lr_mult=1.0),
            'query_embed':
            dict(decay_mult=0.0, lr_mult=1.0),
            'query_feat':
            dict(decay_mult=0.0, lr_mult=1.0),
            'relative_position_bias_table':
            dict(decay_mult=0.0, lr_mult=0.1)
        }),
        norm_decay_mult=0.0),
    type='OptimWrapper')
optimizer = dict(
    betas=(
        0.9,
        0.999,
    ),
    eps=1e-08,
    lr=0.0001,
    type='AdamW',
    weight_decay=0.05)
param_scheduler = [
    dict(
        begin=0,
        by_epoch=False,
        end=160000,
        eta_min=0,
        power=0.9,
        type='PolyLR'),
]
pretrained = 'https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/swin/swin_tiny_patch4_window7_224_20220317-1cdeb081.pth'
resume = False
test_cfg = dict(type='TestLoop')
test_dataloader = dict(
    batch_size=1,
    dataset=dict(
        data_prefix=dict(
            img_path='images/validation',
            seg_map_path='annotations/validation'),
        data_root='data/ade/ADEChallengeData2016',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(keep_ratio=True, scale=(
                2048,
                512,
            ), type='Resize'),
            dict(reduce_zero_label=True, type='LoadAnnotations'),
            dict(type='PackSegInputs'),
        ],
        type='ADE20KDataset'),
    num_workers=4,
    persistent_workers=True,
    sampler=dict(shuffle=False, type='DefaultSampler'))
test_evaluator = dict(
    iou_metrics=[
        'mIoU',
    ], type='IoUMetric')
test_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(keep_ratio=True, scale=(
        2048,
        512,
    ), type='Resize'),
    dict(reduce_zero_label=True, type='LoadAnnotations'),
    dict(type='PackSegInputs'),
]
train_cfg = dict(
    max_iters=160000, type='IterBasedTrainLoop', val_interval=5000)
train_dataloader = dict(
    batch_size=2,
    dataset=dict(
        data_prefix=dict(
            img_path='images/training', seg_map_path='annotations/training'),
        data_root='data/ade/ADEChallengeData2016',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(reduce_zero_label=True, type='LoadAnnotations'),
            dict(
                max_size=2048,
                resize_type='ResizeShortestEdge',
                scales=[
                    256,
                    307,
                    358,
                    409,
                    460,
                    512,
                    563,
                    614,
                    665,
                    716,
                    768,
                    819,
                    870,
                    921,
                    972,
                    1024,
                ],
                type='RandomChoiceResize'),
            dict(
                cat_max_ratio=0.75, crop_size=(
                    512,
                    512,
                ), type='RandomCrop'),
            dict(prob=0.5, type='RandomFlip'),
            dict(type='PhotoMetricDistortion'),
            dict(type='PackSegInputs'),
        ],
        type='ADE20KDataset'),
    num_workers=4,
    persistent_workers=True,
    sampler=dict(shuffle=True, type='InfiniteSampler'))
train_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(reduce_zero_label=True, type='LoadAnnotations'),
    dict(
        max_size=2048,
        resize_type='ResizeShortestEdge',
        scales=[
            256,
            307,
            358,
            409,
            460,
            512,
            563,
            614,
            665,
            716,
            768,
            819,
            870,
            921,
            972,
            1024,
        ],
        type='RandomChoiceResize'),
    dict(cat_max_ratio=0.75, crop_size=(
        512,
        512,
    ), type='RandomCrop'),
    dict(prob=0.5, type='RandomFlip'),
    dict(type='PhotoMetricDistortion'),
    dict(type='PackSegInputs'),
]
tta_model = dict(type='SegTTAModel')
tta_pipeline = [
    dict(backend_args=None, type='LoadImageFromFile'),
    dict(
        transforms=[
            [
                dict(keep_ratio=True, scale_factor=0.5, type='Resize'),
                dict(keep_ratio=True, scale_factor=0.75, type='Resize'),
                dict(keep_ratio=True, scale_factor=1.0, type='Resize'),
                dict(keep_ratio=True, scale_factor=1.25, type='Resize'),
                dict(keep_ratio=True, scale_factor=1.5, type='Resize'),
                dict(keep_ratio=True, scale_factor=1.75, type='Resize'),
            ],
            [
                dict(direction='horizontal', prob=0.0, type='RandomFlip'),
                dict(direction='horizontal', prob=1.0, type='RandomFlip'),
            ],
            [
                dict(type='LoadAnnotations'),
            ],
            [
                dict(type='PackSegInputs'),
            ],
        ],
        type='TestTimeAug'),
]
val_cfg = dict(type='ValLoop')
val_dataloader = dict(
    batch_size=1,
    dataset=dict(
        data_prefix=dict(
            img_path='images/validation',
            seg_map_path='annotations/validation'),
        data_root='data/ade/ADEChallengeData2016',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(keep_ratio=True, scale=(
                2048,
                512,
            ), type='Resize'),
            dict(reduce_zero_label=True, type='LoadAnnotations'),
            dict(type='PackSegInputs'),
        ],
        type='ADE20KDataset'),
    num_workers=4,
    persistent_workers=True,
    sampler=dict(shuffle=False, type='DefaultSampler'))
val_evaluator = dict(
    iou_metrics=[
        'mIoU',
    ], type='IoUMetric')
vis_backends = [
    dict(type='LocalVisBackend'),
]
visualizer = dict(
    name='visualizer',
    type='SegLocalVisualizer',
    vis_backends=[
        dict(type='LocalVisBackend'),
    ])
work_dir = '../corruptions/work_dirs/ade20k/mask2former/mask2former_swin-t_8xb2-160k_ade20k-512x512/glass_blur'

09/21 01:26:22 - mmengine - INFO - Distributed training is not used, all SyncBatchNorm (SyncBN) layers in the model will be automatically reverted to BatchNormXd layers if they are used.
09/21 01:26:22 - mmengine - INFO - Hooks will be executed in the following order:
before_run:
(VERY_HIGH   ) RuntimeInfoHook                    
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
before_train:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_train_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(NORMAL      ) DistSamplerSeedHook                
 -------------------- 
before_train_iter:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_train_iter:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(NORMAL      ) SegVisualizationHook               
(BELOW_NORMAL) LoggerHook                         
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
after_train_epoch:
(NORMAL      ) IterTimerHook                      
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_val:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
before_val_epoch:
(NORMAL      ) IterTimerHook                      
 -------------------- 
before_val_iter:
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_val_iter:
(NORMAL      ) IterTimerHook                      
(NORMAL      ) SegVisualizationHook               
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_val_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
after_val:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
after_train:
(VERY_HIGH   ) RuntimeInfoHook                    
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_test:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
before_test_epoch:
(NORMAL      ) IterTimerHook                      
 -------------------- 
before_test_iter:
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_test_iter:
(NORMAL      ) IterTimerHook                      
(NORMAL      ) SegVisualizationHook               
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_test_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_test:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
after_run:
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
09/21 01:26:23 - mmengine - WARNING - The prefix is not set in metric class IoUMetric.
Loads checkpoint by local backend from path: ../checkpoint_files/ade20k/mask2former/mask2former_swin-t_8xb2-160k_ade20k-512x512_20221203_234230-7d64e5dd.pth
09/21 01:26:24 - mmengine - INFO - Load checkpoint from ../checkpoint_files/ade20k/mask2former/mask2former_swin-t_8xb2-160k_ade20k-512x512_20221203_234230-7d64e5dd.pth
09/21 01:31:55 - mmengine - INFO - Iter(test) [  50/2000]    eta: 3:35:22  time: 6.8741  data_time: 0.0016  memory: 12733  
09/21 01:37:10 - mmengine - INFO - Iter(test) [ 100/2000]    eta: 3:24:34  time: 6.5700  data_time: 0.0017  memory: 12714  
09/21 01:42:22 - mmengine - INFO - Iter(test) [ 150/2000]    eta: 3:17:01  time: 6.4151  data_time: 0.0017  memory: 853  
09/21 01:47:41 - mmengine - INFO - Iter(test) [ 200/2000]    eta: 3:11:40  time: 6.1862  data_time: 0.0016  memory: 12754  
09/21 01:52:45 - mmengine - INFO - Iter(test) [ 250/2000]    eta: 3:04:26  time: 6.1249  data_time: 0.0016  memory: 12756  
09/21 01:57:46 - mmengine - INFO - Iter(test) [ 300/2000]    eta: 2:57:45  time: 6.3926  data_time: 0.0017  memory: 12721  
09/21 02:02:55 - mmengine - INFO - Iter(test) [ 350/2000]    eta: 2:52:09  time: 5.8322  data_time: 0.0016  memory: 12728  
09/21 02:08:03 - mmengine - INFO - Iter(test) [ 400/2000]    eta: 2:46:39  time: 6.3641  data_time: 0.0015  memory: 12694  
09/21 02:12:46 - mmengine - INFO - Iter(test) [ 450/2000]    eta: 2:39:42  time: 5.7656  data_time: 0.0016  memory: 894  
09/21 02:17:52 - mmengine - INFO - Iter(test) [ 500/2000]    eta: 2:34:24  time: 5.9898  data_time: 0.0016  memory: 853  
09/21 02:23:17 - mmengine - INFO - Iter(test) [ 550/2000]    eta: 2:29:58  time: 6.4631  data_time: 0.0016  memory: 961  
09/21 02:28:23 - mmengine - INFO - Iter(test) [ 600/2000]    eta: 2:24:39  time: 6.3981  data_time: 0.0017  memory: 958  
09/21 02:33:34 - mmengine - INFO - Iter(test) [ 650/2000]    eta: 2:19:30  time: 6.2796  data_time: 0.0015  memory: 12735  
09/21 02:38:57 - mmengine - INFO - Iter(test) [ 700/2000]    eta: 2:14:45  time: 6.4108  data_time: 0.0018  memory: 12724  
09/21 02:44:10 - mmengine - INFO - Iter(test) [ 750/2000]    eta: 2:09:36  time: 6.0273  data_time: 0.0015  memory: 1014  
09/21 02:49:00 - mmengine - INFO - Iter(test) [ 800/2000]    eta: 2:03:54  time: 6.1848  data_time: 0.0017  memory: 853  
09/21 02:54:11 - mmengine - INFO - Iter(test) [ 850/2000]    eta: 1:58:46  time: 6.2738  data_time: 0.0017  memory: 826  
09/21 02:58:57 - mmengine - INFO - Iter(test) [ 900/2000]    eta: 1:53:07  time: 5.5386  data_time: 0.0015  memory: 906  
09/21 03:04:10 - mmengine - INFO - Iter(test) [ 950/2000]    eta: 1:48:04  time: 6.1026  data_time: 0.0016  memory: 934  
09/21 03:09:05 - mmengine - INFO - Iter(test) [1000/2000]    eta: 1:42:41  time: 5.8914  data_time: 0.0016  memory: 934  
09/21 03:14:21 - mmengine - INFO - Iter(test) [1050/2000]    eta: 1:37:40  time: 6.4388  data_time: 0.0017  memory: 12737  
09/21 03:19:29 - mmengine - INFO - Iter(test) [1100/2000]    eta: 1:32:32  time: 6.0499  data_time: 0.0016  memory: 931  
09/21 03:24:32 - mmengine - INFO - Iter(test) [1150/2000]    eta: 1:27:19  time: 6.1635  data_time: 0.0016  memory: 904  
09/21 03:29:44 - mmengine - INFO - Iter(test) [1200/2000]    eta: 1:22:13  time: 6.0156  data_time: 0.0027  memory: 1839  
09/21 03:34:43 - mmengine - INFO - Iter(test) [1250/2000]    eta: 1:16:59  time: 5.9708  data_time: 0.0015  memory: 12716  
09/21 03:39:32 - mmengine - INFO - Iter(test) [1300/2000]    eta: 1:11:41  time: 6.1696  data_time: 0.0015  memory: 853  
09/21 03:44:36 - mmengine - INFO - Iter(test) [1350/2000]    eta: 1:06:32  time: 5.7245  data_time: 0.0015  memory: 853  
09/21 03:49:40 - mmengine - INFO - Iter(test) [1400/2000]    eta: 1:01:24  time: 6.4145  data_time: 0.0015  memory: 931  
09/21 03:54:32 - mmengine - INFO - Iter(test) [1450/2000]    eta: 0:56:11  time: 6.3722  data_time: 0.0015  memory: 934  
09/21 03:59:31 - mmengine - INFO - Iter(test) [1500/2000]    eta: 0:51:02  time: 5.7168  data_time: 0.0014  memory: 852  
09/21 04:04:51 - mmengine - INFO - Iter(test) [1550/2000]    eta: 0:46:00  time: 6.2625  data_time: 0.0015  memory: 934  
09/21 04:09:49 - mmengine - INFO - Iter(test) [1600/2000]    eta: 0:40:51  time: 6.0703  data_time: 0.0016  memory: 826  
09/21 04:14:50 - mmengine - INFO - Iter(test) [1650/2000]    eta: 0:35:43  time: 5.6508  data_time: 0.0014  memory: 12725  
09/21 04:20:00 - mmengine - INFO - Iter(test) [1700/2000]    eta: 0:30:38  time: 6.1524  data_time: 0.0016  memory: 930  
09/21 04:25:13 - mmengine - INFO - Iter(test) [1750/2000]    eta: 0:25:32  time: 6.1128  data_time: 0.0015  memory: 957  
09/21 04:30:07 - mmengine - INFO - Iter(test) [1800/2000]    eta: 0:20:24  time: 6.2256  data_time: 0.0017  memory: 853  
09/21 04:35:16 - mmengine - INFO - Iter(test) [1850/2000]    eta: 0:15:18  time: 6.1867  data_time: 0.0017  memory: 773  
09/21 04:40:06 - mmengine - INFO - Iter(test) [1900/2000]    eta: 0:10:11  time: 6.0209  data_time: 0.0015  memory: 987  
09/21 04:45:15 - mmengine - INFO - Iter(test) [1950/2000]    eta: 0:05:05  time: 5.9521  data_time: 0.0015  memory: 1224  
09/21 04:50:08 - mmengine - INFO - Iter(test) [2000/2000]    eta: 0:00:00  time: 5.5279  data_time: 0.0014  memory: 1012  
09/21 04:50:08 - mmengine - INFO - per class results:
09/21 04:50:08 - mmengine - INFO - 
+---------------------+-------+-------+
|        Class        |  IoU  |  Acc  |
+---------------------+-------+-------+
|         wall        | 74.26 | 86.73 |
|       building      | 81.35 | 90.65 |
|         sky         | 94.05 | 97.43 |
|        floor        | 79.15 | 89.63 |
|         tree        | 71.31 | 86.15 |
|       ceiling       | 82.11 | 90.04 |
|         road        | 82.68 | 88.83 |
|         bed         | 87.03 | 92.96 |
|      windowpane     | 57.61 | 76.79 |
|        grass        | 60.84 | 75.85 |
|       cabinet       | 53.76 | 63.72 |
|       sidewalk      | 58.24 | 70.66 |
|        person       | 78.45 | 88.14 |
|        earth        | 34.58 | 52.63 |
|         door        | 42.46 |  54.6 |
|        table        | 58.36 | 75.56 |
|       mountain      | 55.75 | 79.55 |
|        plant        | 49.48 | 62.08 |
|       curtain       | 61.08 | 87.84 |
|        chair        | 52.51 | 69.96 |
|         car         | 83.44 | 90.16 |
|        water        | 50.24 | 66.41 |
|       painting      | 65.33 | 85.35 |
|         sofa        | 63.52 | 80.39 |
|        shelf        | 36.82 | 57.42 |
|        house        | 50.98 | 64.48 |
|         sea         | 58.62 | 87.74 |
|        mirror       | 57.62 | 75.53 |
|         rug         | 65.15 | 77.09 |
|        field        |  25.0 | 42.46 |
|       armchair      | 38.62 | 55.74 |
|         seat        | 53.18 |  75.8 |
|        fence        | 35.71 | 49.81 |
|         desk        | 46.79 | 55.19 |
|         rock        | 27.84 | 36.42 |
|       wardrobe      | 44.84 | 58.73 |
|         lamp        | 59.47 | 74.86 |
|       bathtub       | 64.05 | 73.92 |
|       railing       | 31.83 | 40.99 |
|       cushion       | 52.93 | 67.54 |
|         base        | 16.84 | 25.29 |
|         box         | 16.57 | 23.97 |
|        column       | 38.32 | 54.56 |
|      signboard      | 32.73 | 42.08 |
|   chest of drawers  | 33.46 | 60.42 |
|       counter       | 27.24 | 37.53 |
|         sand        | 33.96 | 54.95 |
|         sink        | 58.48 | 70.17 |
|      skyscraper     | 50.71 | 79.89 |
|      fireplace      | 61.19 | 85.25 |
|     refrigerator    | 55.74 | 58.61 |
|      grandstand     | 21.73 | 81.62 |
|         path        | 17.62 | 25.73 |
|        stairs       | 34.55 | 38.46 |
|        runway       | 58.77 | 59.38 |
|         case        | 40.48 | 47.37 |
|      pool table     |  85.5 | 95.28 |
|        pillow       |  53.4 | 66.63 |
|     screen door     | 33.89 | 36.77 |
|       stairway      | 39.61 |  45.2 |
|        river        | 15.35 | 20.54 |
|        bridge       | 61.84 | 72.05 |
|       bookcase      | 38.22 | 47.87 |
|        blind        | 17.26 | 18.38 |
|     coffee table    |  56.3 |  81.6 |
|        toilet       | 80.12 | 83.57 |
|        flower       | 32.55 | 56.01 |
|         book        | 46.97 | 61.36 |
|         hill        |  7.58 | 12.78 |
|        bench        | 38.17 | 49.68 |
|      countertop     | 58.08 | 80.81 |
|        stove        | 67.18 | 75.58 |
|         palm        | 43.11 | 55.09 |
|    kitchen island   | 38.52 | 61.37 |
|       computer      | 50.49 | 54.66 |
|     swivel chair    | 40.68 | 51.39 |
|         boat        | 29.46 |  39.0 |
|         bar         | 51.98 | 56.11 |
|    arcade machine   | 20.83 | 22.55 |
|        hovel        | 50.86 | 83.07 |
|         bus         | 78.78 | 85.12 |
|        towel        | 47.14 | 70.59 |
|        light        | 54.71 | 70.74 |
|        truck        | 22.37 | 38.12 |
|        tower        | 27.53 | 37.85 |
|      chandelier     | 63.12 |  78.2 |
|        awning       | 31.65 | 36.77 |
|     streetlight     | 25.69 | 36.07 |
|        booth        | 34.72 | 37.22 |
| television receiver | 54.12 | 65.67 |
|       airplane      | 43.86 | 61.96 |
|      dirt track     |  0.08 |  0.42 |
|       apparel       |  33.1 | 52.04 |
|         pole        |  18.3 | 27.75 |
|         land        |  1.97 |  3.74 |
|      bannister      |  6.62 |  7.91 |
|      escalator      | 18.03 | 18.81 |
|       ottoman       | 37.34 | 57.52 |
|        bottle       | 32.66 | 56.67 |
|        buffet       | 27.66 | 34.76 |
|        poster       |  19.0 | 26.29 |
|        stage        | 14.01 |  29.2 |
|         van         | 39.01 | 52.58 |
|         ship        |  4.84 |  6.71 |
|       fountain      | 17.28 | 21.52 |
|    conveyer belt    |  57.1 | 63.51 |
|        canopy       | 27.17 | 37.31 |
|        washer       | 56.44 | 57.75 |
|      plaything      | 19.29 | 65.29 |
|    swimming pool    | 27.65 |  49.2 |
|        stool        | 33.27 |  52.8 |
|        barrel       | 33.03 | 74.29 |
|        basket       | 18.53 | 23.23 |
|      waterfall      | 58.23 |  87.9 |
|         tent        | 88.21 | 97.56 |
|         bag         |  9.65 | 11.23 |
|       minibike      | 66.15 | 78.44 |
|        cradle       | 80.44 | 95.54 |
|         oven        | 25.25 | 26.54 |
|         ball        | 33.43 | 39.23 |
|         food        | 55.09 | 65.74 |
|         step        |  5.48 |  7.14 |
|         tank        | 34.11 | 34.62 |
|      trade name     | 24.16 | 27.83 |
|      microwave      | 29.44 | 30.86 |
|         pot         | 37.23 |  44.3 |
|        animal       | 65.68 | 68.63 |
|       bicycle       | 49.78 | 61.89 |
|         lake        | 53.05 | 88.69 |
|      dishwasher     | 51.17 |  62.5 |
|        screen       | 43.78 |  86.7 |
|       blanket       | 11.97 | 14.25 |
|      sculpture      | 34.06 | 44.59 |
|         hood        | 63.31 | 67.86 |
|        sconce       |  44.0 | 59.53 |
|         vase        | 32.14 | 53.14 |
|    traffic light    | 35.49 | 56.53 |
|         tray        |  9.14 | 16.86 |
|        ashcan       |  37.2 | 43.62 |
|         fan         | 53.99 | 65.69 |
|         pier        | 32.86 | 41.63 |
|      crt screen     |  2.47 | 10.93 |
|        plate        | 46.57 | 54.99 |
|       monitor       |  7.11 |  9.75 |
|    bulletin board   | 41.14 | 46.29 |
|        shower       |  2.1  | 21.48 |
|       radiator      | 49.09 | 57.97 |
|        glass        | 12.71 | 13.65 |
|        clock        | 27.01 | 32.59 |
|         flag        | 30.99 | 35.48 |
+---------------------+-------+-------+
09/21 04:50:08 - mmengine - INFO - Iter(test) [2000/2000]    aAcc: 80.4300  mIoU: 42.6200  mAcc: 55.1200  data_time: 0.0018  time: 6.1119
Finished processing corruption type: glass_blur
Processing corruption type: motion_blur
09/21 04:52:49 - mmengine - INFO - 
------------------------------------------------------------
System environment:
    sys.platform: linux
    Python: 3.10.13 | packaged by conda-forge | (main, Dec 23 2023, 15:36:39) [GCC 12.3.0]
    CUDA available: True
    MUSA available: False
    numpy_random_seed: 785143598
    GPU 0: Tesla V100-SXM2-32GB
    CUDA_HOME: /opt/bwhpc/common/devel/cuda/11.7
    NVCC: Cuda compilation tools, release 11.7, V11.7.99
    GCC: gcc (GCC) 8.5.0 20210514 (Red Hat 8.5.0-18)
    PyTorch: 1.13.1
    PyTorch compiling details: PyTorch built with:
  - GCC 9.3
  - C++ Version: 201402
  - Intel(R) oneAPI Math Kernel Library Version 2023.1-Product Build 20230303 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v2.6.0 (Git Hash 52b5f107dd9cf10910aaa19cb47f3abf9b349815)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - LAPACK is enabled (usually provided by MKL)
  - NNPACK is enabled
  - CPU capability usage: AVX2
  - CUDA Runtime 11.7
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_61,code=sm_61;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86;-gencode;arch=compute_37,code=compute_37
  - CuDNN 8.5
  - Magma 2.6.1
  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.7, CUDNN_VERSION=8.5.0, CXX_COMPILER=/opt/rh/devtoolset-9/root/usr/bin/c++, CXX_FLAGS= -fabi-version=11 -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -DEDGE_PROFILER_USE_KINETO -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Werror=non-virtual-dtor -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wunused-local-typedefs -Wno-unused-parameter -Wno-unused-function -Wno-unused-result -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Werror=cast-function-type -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.13.1, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, USE_ROCM=OFF, 

    TorchVision: 0.14.1
    OpenCV: 3.4.18
    MMEngine: 0.10.4

Runtime environment:
    cudnn_benchmark: True
    mp_cfg: {'mp_start_method': 'fork', 'opencv_num_threads': 0}
    dist_cfg: {'backend': 'nccl'}
    seed: 785143598
    Distributed launcher: none
    Distributed training: False
    GPU number: 1
------------------------------------------------------------

09/21 04:52:50 - mmengine - INFO - Config:
auto_scale_lr = dict(base_batch_size=16, enable=False)
backbone_embed_multi = dict(decay_mult=0.0, lr_mult=0.1)
backbone_norm_multi = dict(decay_mult=0.0, lr_mult=0.1)
crop_size = (
    512,
    512,
)
custom_imports = dict(allow_failed_imports=False, imports='mmdet.models')
custom_keys = dict({
    'absolute_pos_embed':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone':
    dict(decay_mult=1.0, lr_mult=0.1),
    'backbone.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.patch_embed.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.0.blocks.0.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.0.blocks.1.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.0.downsample.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.1.blocks.0.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.1.blocks.1.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.1.downsample.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.0.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.1.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.2.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.3.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.4.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.5.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.downsample.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.3.blocks.0.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.3.blocks.1.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'level_embed':
    dict(decay_mult=0.0, lr_mult=1.0),
    'query_embed':
    dict(decay_mult=0.0, lr_mult=1.0),
    'query_feat':
    dict(decay_mult=0.0, lr_mult=1.0),
    'relative_position_bias_table':
    dict(decay_mult=0.0, lr_mult=0.1)
})
data_root = 'data/ade/ADEChallengeData2016'
dataset_type = 'ADE20KDataset'
default_hooks = dict(
    checkpoint=dict(
        by_epoch=False, interval=5000, save_best='mIoU',
        type='CheckpointHook'),
    logger=dict(interval=50, log_metric_by_epoch=False, type='LoggerHook'),
    param_scheduler=dict(type='ParamSchedulerHook'),
    sampler_seed=dict(type='DistSamplerSeedHook'),
    timer=dict(type='IterTimerHook'),
    visualization=dict(type='SegVisualizationHook'))
default_scope = 'mmseg'
depths = [
    2,
    2,
    6,
    2,
]
embed_multi = dict(decay_mult=0.0, lr_mult=1.0)
env_cfg = dict(
    cudnn_benchmark=True,
    dist_cfg=dict(backend='nccl'),
    mp_cfg=dict(mp_start_method='fork', opencv_num_threads=0))
img_ratios = [
    0.5,
    0.75,
    1.0,
    1.25,
    1.5,
    1.75,
]
launcher = 'none'
load_from = '../checkpoint_files/ade20k/mask2former/mask2former_swin-t_8xb2-160k_ade20k-512x512_20221203_234230-7d64e5dd.pth'
log_level = 'INFO'
log_processor = dict(by_epoch=False)
model = dict(
    backbone=dict(
        attn_drop_rate=0.0,
        depths=[
            2,
            2,
            6,
            2,
        ],
        drop_path_rate=0.3,
        drop_rate=0.0,
        embed_dims=96,
        frozen_stages=-1,
        init_cfg=dict(
            checkpoint=
            'https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/swin/swin_tiny_patch4_window7_224_20220317-1cdeb081.pth',
            type='Pretrained'),
        mlp_ratio=4,
        num_heads=[
            3,
            6,
            12,
            24,
        ],
        out_indices=(
            0,
            1,
            2,
            3,
        ),
        patch_norm=True,
        qk_scale=None,
        qkv_bias=True,
        type='SwinTransformer',
        window_size=7,
        with_cp=False),
    data_preprocessor=dict(
        bgr_to_rgb=True,
        corruption='motion_blur',
        mean=[
            123.675,
            116.28,
            103.53,
        ],
        pad_val=0,
        seg_pad_val=255,
        size=(
            512,
            512,
        ),
        std=[
            58.395,
            57.12,
            57.375,
        ],
        test_cfg=dict(size_divisor=32),
        type='SegDataPreProcessor'),
    decode_head=dict(
        align_corners=False,
        enforce_decoder_input_project=False,
        feat_channels=256,
        in_channels=[
            96,
            192,
            384,
            768,
        ],
        loss_cls=dict(
            class_weight=[
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                0.1,
            ],
            loss_weight=2.0,
            reduction='mean',
            type='mmdet.CrossEntropyLoss',
            use_sigmoid=False),
        loss_dice=dict(
            activate=True,
            eps=1.0,
            loss_weight=5.0,
            naive_dice=True,
            reduction='mean',
            type='mmdet.DiceLoss',
            use_sigmoid=True),
        loss_mask=dict(
            loss_weight=5.0,
            reduction='mean',
            type='mmdet.CrossEntropyLoss',
            use_sigmoid=True),
        num_classes=150,
        num_queries=100,
        num_transformer_feat_level=3,
        out_channels=256,
        pixel_decoder=dict(
            act_cfg=dict(type='ReLU'),
            encoder=dict(
                init_cfg=None,
                layer_cfg=dict(
                    ffn_cfg=dict(
                        act_cfg=dict(inplace=True, type='ReLU'),
                        embed_dims=256,
                        feedforward_channels=1024,
                        ffn_drop=0.0,
                        num_fcs=2),
                    self_attn_cfg=dict(
                        batch_first=True,
                        dropout=0.0,
                        embed_dims=256,
                        im2col_step=64,
                        init_cfg=None,
                        norm_cfg=None,
                        num_heads=8,
                        num_levels=3,
                        num_points=4)),
                num_layers=6),
            init_cfg=None,
            norm_cfg=dict(num_groups=32, type='GN'),
            num_outs=3,
            positional_encoding=dict(normalize=True, num_feats=128),
            type='mmdet.MSDeformAttnPixelDecoder'),
        positional_encoding=dict(normalize=True, num_feats=128),
        strides=[
            4,
            8,
            16,
            32,
        ],
        train_cfg=dict(
            assigner=dict(
                match_costs=[
                    dict(type='mmdet.ClassificationCost', weight=2.0),
                    dict(
                        type='mmdet.CrossEntropyLossCost',
                        use_sigmoid=True,
                        weight=5.0),
                    dict(
                        eps=1.0,
                        pred_act=True,
                        type='mmdet.DiceCost',
                        weight=5.0),
                ],
                type='mmdet.HungarianAssigner'),
            importance_sample_ratio=0.75,
            num_points=12544,
            oversample_ratio=3.0,
            sampler=dict(type='mmdet.MaskPseudoSampler')),
        transformer_decoder=dict(
            init_cfg=None,
            layer_cfg=dict(
                cross_attn_cfg=dict(
                    attn_drop=0.0,
                    batch_first=True,
                    dropout_layer=None,
                    embed_dims=256,
                    num_heads=8,
                    proj_drop=0.0),
                ffn_cfg=dict(
                    act_cfg=dict(inplace=True, type='ReLU'),
                    add_identity=True,
                    dropout_layer=None,
                    embed_dims=256,
                    feedforward_channels=2048,
                    ffn_drop=0.0,
                    num_fcs=2),
                self_attn_cfg=dict(
                    attn_drop=0.0,
                    batch_first=True,
                    dropout_layer=None,
                    embed_dims=256,
                    num_heads=8,
                    proj_drop=0.0)),
            num_layers=9,
            return_intermediate=True),
        type='Mask2FormerHead'),
    test_cfg=dict(mode='whole'),
    train_cfg=dict(),
    type='EncoderDecoder')
num_classes = 150
optim_wrapper = dict(
    clip_grad=dict(max_norm=0.01, norm_type=2),
    optimizer=dict(
        betas=(
            0.9,
            0.999,
        ),
        eps=1e-08,
        lr=0.0001,
        type='AdamW',
        weight_decay=0.05),
    paramwise_cfg=dict(
        custom_keys=dict({
            'absolute_pos_embed':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone':
            dict(decay_mult=1.0, lr_mult=0.1),
            'backbone.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.patch_embed.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.0.blocks.0.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.0.blocks.1.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.0.downsample.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.1.blocks.0.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.1.blocks.1.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.1.downsample.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.0.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.1.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.2.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.3.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.4.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.5.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.downsample.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.3.blocks.0.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.3.blocks.1.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'level_embed':
            dict(decay_mult=0.0, lr_mult=1.0),
            'query_embed':
            dict(decay_mult=0.0, lr_mult=1.0),
            'query_feat':
            dict(decay_mult=0.0, lr_mult=1.0),
            'relative_position_bias_table':
            dict(decay_mult=0.0, lr_mult=0.1)
        }),
        norm_decay_mult=0.0),
    type='OptimWrapper')
optimizer = dict(
    betas=(
        0.9,
        0.999,
    ),
    eps=1e-08,
    lr=0.0001,
    type='AdamW',
    weight_decay=0.05)
param_scheduler = [
    dict(
        begin=0,
        by_epoch=False,
        end=160000,
        eta_min=0,
        power=0.9,
        type='PolyLR'),
]
pretrained = 'https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/swin/swin_tiny_patch4_window7_224_20220317-1cdeb081.pth'
resume = False
test_cfg = dict(type='TestLoop')
test_dataloader = dict(
    batch_size=1,
    dataset=dict(
        data_prefix=dict(
            img_path='images/validation',
            seg_map_path='annotations/validation'),
        data_root='data/ade/ADEChallengeData2016',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(keep_ratio=True, scale=(
                2048,
                512,
            ), type='Resize'),
            dict(reduce_zero_label=True, type='LoadAnnotations'),
            dict(type='PackSegInputs'),
        ],
        type='ADE20KDataset'),
    num_workers=4,
    persistent_workers=True,
    sampler=dict(shuffle=False, type='DefaultSampler'))
test_evaluator = dict(
    iou_metrics=[
        'mIoU',
    ], type='IoUMetric')
test_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(keep_ratio=True, scale=(
        2048,
        512,
    ), type='Resize'),
    dict(reduce_zero_label=True, type='LoadAnnotations'),
    dict(type='PackSegInputs'),
]
train_cfg = dict(
    max_iters=160000, type='IterBasedTrainLoop', val_interval=5000)
train_dataloader = dict(
    batch_size=2,
    dataset=dict(
        data_prefix=dict(
            img_path='images/training', seg_map_path='annotations/training'),
        data_root='data/ade/ADEChallengeData2016',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(reduce_zero_label=True, type='LoadAnnotations'),
            dict(
                max_size=2048,
                resize_type='ResizeShortestEdge',
                scales=[
                    256,
                    307,
                    358,
                    409,
                    460,
                    512,
                    563,
                    614,
                    665,
                    716,
                    768,
                    819,
                    870,
                    921,
                    972,
                    1024,
                ],
                type='RandomChoiceResize'),
            dict(
                cat_max_ratio=0.75, crop_size=(
                    512,
                    512,
                ), type='RandomCrop'),
            dict(prob=0.5, type='RandomFlip'),
            dict(type='PhotoMetricDistortion'),
            dict(type='PackSegInputs'),
        ],
        type='ADE20KDataset'),
    num_workers=4,
    persistent_workers=True,
    sampler=dict(shuffle=True, type='InfiniteSampler'))
train_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(reduce_zero_label=True, type='LoadAnnotations'),
    dict(
        max_size=2048,
        resize_type='ResizeShortestEdge',
        scales=[
            256,
            307,
            358,
            409,
            460,
            512,
            563,
            614,
            665,
            716,
            768,
            819,
            870,
            921,
            972,
            1024,
        ],
        type='RandomChoiceResize'),
    dict(cat_max_ratio=0.75, crop_size=(
        512,
        512,
    ), type='RandomCrop'),
    dict(prob=0.5, type='RandomFlip'),
    dict(type='PhotoMetricDistortion'),
    dict(type='PackSegInputs'),
]
tta_model = dict(type='SegTTAModel')
tta_pipeline = [
    dict(backend_args=None, type='LoadImageFromFile'),
    dict(
        transforms=[
            [
                dict(keep_ratio=True, scale_factor=0.5, type='Resize'),
                dict(keep_ratio=True, scale_factor=0.75, type='Resize'),
                dict(keep_ratio=True, scale_factor=1.0, type='Resize'),
                dict(keep_ratio=True, scale_factor=1.25, type='Resize'),
                dict(keep_ratio=True, scale_factor=1.5, type='Resize'),
                dict(keep_ratio=True, scale_factor=1.75, type='Resize'),
            ],
            [
                dict(direction='horizontal', prob=0.0, type='RandomFlip'),
                dict(direction='horizontal', prob=1.0, type='RandomFlip'),
            ],
            [
                dict(type='LoadAnnotations'),
            ],
            [
                dict(type='PackSegInputs'),
            ],
        ],
        type='TestTimeAug'),
]
val_cfg = dict(type='ValLoop')
val_dataloader = dict(
    batch_size=1,
    dataset=dict(
        data_prefix=dict(
            img_path='images/validation',
            seg_map_path='annotations/validation'),
        data_root='data/ade/ADEChallengeData2016',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(keep_ratio=True, scale=(
                2048,
                512,
            ), type='Resize'),
            dict(reduce_zero_label=True, type='LoadAnnotations'),
            dict(type='PackSegInputs'),
        ],
        type='ADE20KDataset'),
    num_workers=4,
    persistent_workers=True,
    sampler=dict(shuffle=False, type='DefaultSampler'))
val_evaluator = dict(
    iou_metrics=[
        'mIoU',
    ], type='IoUMetric')
vis_backends = [
    dict(type='LocalVisBackend'),
]
visualizer = dict(
    name='visualizer',
    type='SegLocalVisualizer',
    vis_backends=[
        dict(type='LocalVisBackend'),
    ])
work_dir = '../corruptions/work_dirs/ade20k/mask2former/mask2former_swin-t_8xb2-160k_ade20k-512x512/motion_blur'

09/21 04:53:17 - mmengine - INFO - Distributed training is not used, all SyncBatchNorm (SyncBN) layers in the model will be automatically reverted to BatchNormXd layers if they are used.
09/21 04:53:17 - mmengine - INFO - Hooks will be executed in the following order:
before_run:
(VERY_HIGH   ) RuntimeInfoHook                    
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
before_train:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_train_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(NORMAL      ) DistSamplerSeedHook                
 -------------------- 
before_train_iter:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_train_iter:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(NORMAL      ) SegVisualizationHook               
(BELOW_NORMAL) LoggerHook                         
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
after_train_epoch:
(NORMAL      ) IterTimerHook                      
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_val:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
before_val_epoch:
(NORMAL      ) IterTimerHook                      
 -------------------- 
before_val_iter:
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_val_iter:
(NORMAL      ) IterTimerHook                      
(NORMAL      ) SegVisualizationHook               
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_val_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
after_val:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
after_train:
(VERY_HIGH   ) RuntimeInfoHook                    
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_test:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
before_test_epoch:
(NORMAL      ) IterTimerHook                      
 -------------------- 
before_test_iter:
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_test_iter:
(NORMAL      ) IterTimerHook                      
(NORMAL      ) SegVisualizationHook               
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_test_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_test:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
after_run:
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
09/21 04:53:19 - mmengine - WARNING - The prefix is not set in metric class IoUMetric.
Loads checkpoint by local backend from path: ../checkpoint_files/ade20k/mask2former/mask2former_swin-t_8xb2-160k_ade20k-512x512_20221203_234230-7d64e5dd.pth
09/21 04:53:21 - mmengine - INFO - Load checkpoint from ../checkpoint_files/ade20k/mask2former/mask2former_swin-t_8xb2-160k_ade20k-512x512_20221203_234230-7d64e5dd.pth
09/21 04:55:29 - mmengine - INFO - Iter(test) [  50/2000]    eta: 1:23:31  time: 0.9719  data_time: 0.0016  memory: 12733  
09/21 04:56:11 - mmengine - INFO - Iter(test) [ 100/2000]    eta: 0:53:59  time: 0.8877  data_time: 0.0016  memory: 12714  
09/21 04:56:50 - mmengine - INFO - Iter(test) [ 150/2000]    eta: 0:42:56  time: 0.7926  data_time: 0.0015  memory: 853  
09/21 04:57:32 - mmengine - INFO - Iter(test) [ 200/2000]    eta: 0:37:35  time: 0.7994  data_time: 0.0015  memory: 12754  
09/21 04:58:12 - mmengine - INFO - Iter(test) [ 250/2000]    eta: 0:33:55  time: 0.7901  data_time: 0.0015  memory: 12756  
09/21 04:58:51 - mmengine - INFO - Iter(test) [ 300/2000]    eta: 0:31:08  time: 0.8231  data_time: 0.0015  memory: 12721  
09/21 04:59:30 - mmengine - INFO - Iter(test) [ 350/2000]    eta: 0:29:02  time: 0.7559  data_time: 0.0015  memory: 12728  
09/21 05:00:10 - mmengine - INFO - Iter(test) [ 400/2000]    eta: 0:27:17  time: 0.8171  data_time: 0.0014  memory: 12694  
09/21 05:00:45 - mmengine - INFO - Iter(test) [ 450/2000]    eta: 0:25:30  time: 0.7189  data_time: 0.0014  memory: 894  
09/21 05:01:24 - mmengine - INFO - Iter(test) [ 500/2000]    eta: 0:24:09  time: 0.7445  data_time: 0.0014  memory: 853  
09/21 05:02:04 - mmengine - INFO - Iter(test) [ 550/2000]    eta: 0:22:59  time: 0.7965  data_time: 0.0015  memory: 961  
09/21 05:02:40 - mmengine - INFO - Iter(test) [ 600/2000]    eta: 0:21:45  time: 0.7350  data_time: 0.0015  memory: 958  
09/21 05:03:19 - mmengine - INFO - Iter(test) [ 650/2000]    eta: 0:20:42  time: 0.8379  data_time: 0.0014  memory: 12735  
09/21 05:04:01 - mmengine - INFO - Iter(test) [ 700/2000]    eta: 0:19:47  time: 0.7999  data_time: 0.0016  memory: 12724  
09/21 05:04:40 - mmengine - INFO - Iter(test) [ 750/2000]    eta: 0:18:52  time: 0.7496  data_time: 0.0014  memory: 1014  
09/21 05:05:15 - mmengine - INFO - Iter(test) [ 800/2000]    eta: 0:17:51  time: 0.7173  data_time: 0.0015  memory: 853  
09/21 05:05:52 - mmengine - INFO - Iter(test) [ 850/2000]    eta: 0:16:56  time: 0.7391  data_time: 0.0015  memory: 826  
09/21 05:06:27 - mmengine - INFO - Iter(test) [ 900/2000]    eta: 0:16:01  time: 0.7054  data_time: 0.0014  memory: 906  
09/21 05:07:06 - mmengine - INFO - Iter(test) [ 950/2000]    eta: 0:15:12  time: 0.7681  data_time: 0.0015  memory: 934  
09/21 05:07:43 - mmengine - INFO - Iter(test) [1000/2000]    eta: 0:14:21  time: 0.7200  data_time: 0.0015  memory: 934  
09/21 05:08:23 - mmengine - INFO - Iter(test) [1050/2000]    eta: 0:13:35  time: 0.8283  data_time: 0.0015  memory: 12737  
09/21 05:09:01 - mmengine - INFO - Iter(test) [1100/2000]    eta: 0:12:49  time: 0.7365  data_time: 0.0015  memory: 931  
09/21 05:09:38 - mmengine - INFO - Iter(test) [1150/2000]    eta: 0:12:02  time: 0.7483  data_time: 0.0014  memory: 904  
09/21 05:10:17 - mmengine - INFO - Iter(test) [1200/2000]    eta: 0:11:17  time: 0.7416  data_time: 0.0014  memory: 1839  
09/21 05:10:55 - mmengine - INFO - Iter(test) [1250/2000]    eta: 0:10:32  time: 0.7458  data_time: 0.0014  memory: 12716  
09/21 05:11:31 - mmengine - INFO - Iter(test) [1300/2000]    eta: 0:09:46  time: 0.7623  data_time: 0.0014  memory: 853  
09/21 05:12:09 - mmengine - INFO - Iter(test) [1350/2000]    eta: 0:09:03  time: 0.7207  data_time: 0.0014  memory: 853  
09/21 05:12:48 - mmengine - INFO - Iter(test) [1400/2000]    eta: 0:08:19  time: 0.8309  data_time: 0.0014  memory: 931  
09/21 05:13:25 - mmengine - INFO - Iter(test) [1450/2000]    eta: 0:07:36  time: 0.8385  data_time: 0.0014  memory: 934  
09/21 05:14:02 - mmengine - INFO - Iter(test) [1500/2000]    eta: 0:06:53  time: 0.6811  data_time: 0.0014  memory: 852  
09/21 05:14:41 - mmengine - INFO - Iter(test) [1550/2000]    eta: 0:06:11  time: 0.7702  data_time: 0.0014  memory: 934  
09/21 05:15:17 - mmengine - INFO - Iter(test) [1600/2000]    eta: 0:05:28  time: 0.7021  data_time: 0.0015  memory: 826  
09/21 05:15:55 - mmengine - INFO - Iter(test) [1650/2000]    eta: 0:04:47  time: 0.7098  data_time: 0.0014  memory: 12725  
09/21 05:16:34 - mmengine - INFO - Iter(test) [1700/2000]    eta: 0:04:05  time: 0.7814  data_time: 0.0016  memory: 930  
09/21 05:17:13 - mmengine - INFO - Iter(test) [1750/2000]    eta: 0:03:24  time: 0.8034  data_time: 0.0015  memory: 957  
09/21 05:17:49 - mmengine - INFO - Iter(test) [1800/2000]    eta: 0:02:43  time: 0.7613  data_time: 0.0017  memory: 853  
09/21 05:18:25 - mmengine - INFO - Iter(test) [1850/2000]    eta: 0:02:01  time: 0.7229  data_time: 0.0016  memory: 773  
09/21 05:19:01 - mmengine - INFO - Iter(test) [1900/2000]    eta: 0:01:21  time: 0.7382  data_time: 0.0015  memory: 987  
09/21 05:19:40 - mmengine - INFO - Iter(test) [1950/2000]    eta: 0:00:40  time: 0.7592  data_time: 0.0015  memory: 1224  
09/21 05:20:16 - mmengine - INFO - Iter(test) [2000/2000]    eta: 0:00:00  time: 0.6688  data_time: 0.0013  memory: 1012  
09/21 05:20:16 - mmengine - INFO - per class results:
09/21 05:20:16 - mmengine - INFO - 
+---------------------+-------+-------+
|        Class        |  IoU  |  Acc  |
+---------------------+-------+-------+
|         wall        | 75.65 | 85.12 |
|       building      | 79.04 | 93.07 |
|         sky         | 93.99 | 96.05 |
|        floor        | 81.21 | 89.89 |
|         tree        | 72.26 | 82.88 |
|       ceiling       | 84.25 | 91.85 |
|         road        |  81.4 | 88.79 |
|         bed         | 89.96 | 96.31 |
|      windowpane     | 59.72 | 80.27 |
|        grass        | 61.38 | 79.11 |
|       cabinet       | 58.47 | 70.99 |
|       sidewalk      | 62.27 |  80.9 |
|        person       | 79.93 | 89.24 |
|        earth        | 32.48 |  44.0 |
|         door        | 43.74 | 57.02 |
|        table        | 58.73 | 74.89 |
|       mountain      | 52.69 | 72.33 |
|        plant        |  49.0 | 65.49 |
|       curtain       | 74.31 | 85.49 |
|        chair        | 57.09 | 74.18 |
|         car         |  81.5 | 92.91 |
|        water        |  51.2 | 68.11 |
|       painting      |  67.4 | 85.96 |
|         sofa        | 63.48 | 79.65 |
|        shelf        | 41.59 | 64.46 |
|        house        | 42.83 |  55.5 |
|         sea         |  56.3 | 77.09 |
|        mirror       | 63.19 | 74.36 |
|         rug         | 63.07 | 74.41 |
|        field        | 26.74 | 45.92 |
|       armchair      | 44.34 | 64.61 |
|         seat        |  60.6 | 79.52 |
|        fence        | 36.99 | 53.02 |
|         desk        | 46.11 | 66.95 |
|         rock        | 28.65 | 34.95 |
|       wardrobe      | 49.06 | 63.04 |
|         lamp        | 61.58 | 76.02 |
|       bathtub       | 78.09 | 84.07 |
|       railing       | 33.93 |  52.4 |
|       cushion       | 53.41 |  63.0 |
|         base        | 27.35 | 55.07 |
|         box         | 19.89 | 31.03 |
|        column       | 39.88 | 55.01 |
|      signboard      | 37.15 | 54.28 |
|   chest of drawers  | 35.56 | 60.81 |
|       counter       | 33.27 | 48.35 |
|         sand        | 25.23 | 37.45 |
|         sink        | 72.16 | 79.38 |
|      skyscraper     | 33.61 | 38.11 |
|      fireplace      | 70.24 |  87.1 |
|     refrigerator    | 81.46 | 88.22 |
|      grandstand     | 44.46 | 66.67 |
|         path        | 21.67 | 33.17 |
|        stairs       | 29.75 | 36.26 |
|        runway       | 72.61 | 93.74 |
|         case        | 40.67 | 48.51 |
|      pool table     | 84.61 | 95.78 |
|        pillow       | 55.27 | 69.69 |
|     screen door     | 51.95 | 68.56 |
|       stairway      | 32.92 | 41.87 |
|        river        | 15.42 | 20.51 |
|        bridge       | 62.37 | 75.58 |
|       bookcase      | 42.72 | 54.96 |
|        blind        | 37.06 | 45.65 |
|     coffee table    | 63.18 | 83.44 |
|        toilet       | 83.61 | 88.09 |
|        flower       | 30.73 | 40.02 |
|         book        | 45.93 | 64.92 |
|         hill        |  4.28 | 11.54 |
|        bench        | 42.76 | 52.59 |
|      countertop     | 58.16 | 82.74 |
|        stove        | 75.35 | 85.17 |
|         palm        | 46.79 | 66.65 |
|    kitchen island   |  35.7 | 70.59 |
|       computer      | 55.27 | 63.07 |
|     swivel chair    | 45.82 | 66.37 |
|         boat        | 37.33 | 50.34 |
|         bar         | 51.02 |  60.8 |
|    arcade machine   | 21.98 |  24.2 |
|        hovel        | 22.01 | 40.43 |
|         bus         | 88.37 | 94.62 |
|        towel        | 60.82 | 72.89 |
|        light        | 56.62 | 76.01 |
|        truck        | 29.84 | 52.48 |
|        tower        |  4.72 |  6.11 |
|      chandelier     | 62.75 | 72.05 |
|        awning       | 29.29 | 34.91 |
|     streetlight     | 29.07 | 40.41 |
|        booth        | 47.94 | 64.58 |
| television receiver | 57.37 | 74.41 |
|       airplane      |  54.8 | 67.02 |
|      dirt track     |  1.01 |  3.33 |
|       apparel       | 25.58 | 41.18 |
|         pole        | 23.97 |  36.5 |
|         land        |  4.22 |  9.02 |
|      bannister      | 17.35 | 23.38 |
|      escalator      | 44.36 | 48.22 |
|       ottoman       |  47.9 | 60.77 |
|        bottle       | 19.27 | 25.33 |
|        buffet       | 36.08 | 37.94 |
|        poster       | 19.03 | 31.72 |
|        stage        | 19.55 | 23.56 |
|         van         | 49.74 | 58.07 |
|         ship        |  4.82 |  6.78 |
|       fountain      | 21.41 | 21.64 |
|    conveyer belt    | 55.41 | 87.09 |
|        canopy       | 28.59 | 44.82 |
|        washer       | 70.18 | 76.38 |
|      plaything      | 20.87 | 38.94 |
|    swimming pool    | 23.55 | 38.64 |
|        stool        | 41.15 | 63.46 |
|        barrel       |  53.2 | 73.92 |
|        basket       | 27.05 | 37.12 |
|      waterfall      | 37.09 | 42.41 |
|         tent        | 82.11 |  98.0 |
|         bag         | 16.92 | 25.25 |
|       minibike      |  54.7 | 70.84 |
|        cradle       | 86.44 | 96.08 |
|         oven        | 15.78 | 49.17 |
|         ball        | 34.91 | 41.18 |
|         food        | 37.43 | 43.74 |
|         step        |  5.7  |  7.41 |
|         tank        | 30.18 | 31.66 |
|      trade name     | 23.04 | 27.84 |
|      microwave      | 39.23 | 43.06 |
|         pot         |  39.1 | 47.69 |
|        animal       |  61.9 | 63.25 |
|       bicycle       | 43.77 | 78.26 |
|         lake        | 61.01 | 63.48 |
|      dishwasher     | 51.51 | 73.69 |
|        screen       | 59.97 | 86.22 |
|       blanket       | 14.66 |  19.1 |
|      sculpture      | 45.97 | 56.85 |
|         hood        | 75.23 | 82.28 |
|        sconce       | 45.25 | 62.98 |
|         vase        | 37.97 |  51.9 |
|    traffic light    | 34.73 | 64.87 |
|         tray        | 14.15 | 25.92 |
|        ashcan       |  34.7 | 61.43 |
|         fan         | 58.97 | 77.67 |
|         pier        | 31.18 | 39.23 |
|      crt screen     |  0.06 |  0.17 |
|        plate        | 49.83 | 65.52 |
|       monitor       |  8.79 | 12.32 |
|    bulletin board   | 39.37 | 48.35 |
|        shower       |  2.3  | 19.11 |
|       radiator      | 56.96 | 72.22 |
|        glass        | 15.35 | 16.93 |
|        clock        | 30.51 | 39.27 |
|         flag        |  30.5 | 34.26 |
+---------------------+-------+-------+
09/21 05:20:16 - mmengine - INFO - Iter(test) [2000/2000]    aAcc: 81.2600  mIoU: 45.1200  mAcc: 57.8200  data_time: 0.0020  time: 0.8076
Finished processing corruption type: motion_blur
Processing corruption type: zoom_blur
09/21 05:20:21 - mmengine - INFO - 
------------------------------------------------------------
System environment:
    sys.platform: linux
    Python: 3.10.13 | packaged by conda-forge | (main, Dec 23 2023, 15:36:39) [GCC 12.3.0]
    CUDA available: True
    MUSA available: False
    numpy_random_seed: 1321468962
    GPU 0: Tesla V100-SXM2-32GB
    CUDA_HOME: /opt/bwhpc/common/devel/cuda/11.7
    NVCC: Cuda compilation tools, release 11.7, V11.7.99
    GCC: gcc (GCC) 8.5.0 20210514 (Red Hat 8.5.0-18)
    PyTorch: 1.13.1
    PyTorch compiling details: PyTorch built with:
  - GCC 9.3
  - C++ Version: 201402
  - Intel(R) oneAPI Math Kernel Library Version 2023.1-Product Build 20230303 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v2.6.0 (Git Hash 52b5f107dd9cf10910aaa19cb47f3abf9b349815)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - LAPACK is enabled (usually provided by MKL)
  - NNPACK is enabled
  - CPU capability usage: AVX2
  - CUDA Runtime 11.7
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_61,code=sm_61;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86;-gencode;arch=compute_37,code=compute_37
  - CuDNN 8.5
  - Magma 2.6.1
  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.7, CUDNN_VERSION=8.5.0, CXX_COMPILER=/opt/rh/devtoolset-9/root/usr/bin/c++, CXX_FLAGS= -fabi-version=11 -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -DEDGE_PROFILER_USE_KINETO -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Werror=non-virtual-dtor -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wunused-local-typedefs -Wno-unused-parameter -Wno-unused-function -Wno-unused-result -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Werror=cast-function-type -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.13.1, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, USE_ROCM=OFF, 

    TorchVision: 0.14.1
    OpenCV: 3.4.18
    MMEngine: 0.10.4

Runtime environment:
    cudnn_benchmark: True
    mp_cfg: {'mp_start_method': 'fork', 'opencv_num_threads': 0}
    dist_cfg: {'backend': 'nccl'}
    seed: 1321468962
    Distributed launcher: none
    Distributed training: False
    GPU number: 1
------------------------------------------------------------

09/21 05:20:21 - mmengine - INFO - Config:
auto_scale_lr = dict(base_batch_size=16, enable=False)
backbone_embed_multi = dict(decay_mult=0.0, lr_mult=0.1)
backbone_norm_multi = dict(decay_mult=0.0, lr_mult=0.1)
crop_size = (
    512,
    512,
)
custom_imports = dict(allow_failed_imports=False, imports='mmdet.models')
custom_keys = dict({
    'absolute_pos_embed':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone':
    dict(decay_mult=1.0, lr_mult=0.1),
    'backbone.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.patch_embed.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.0.blocks.0.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.0.blocks.1.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.0.downsample.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.1.blocks.0.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.1.blocks.1.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.1.downsample.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.0.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.1.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.2.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.3.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.4.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.5.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.downsample.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.3.blocks.0.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.3.blocks.1.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'level_embed':
    dict(decay_mult=0.0, lr_mult=1.0),
    'query_embed':
    dict(decay_mult=0.0, lr_mult=1.0),
    'query_feat':
    dict(decay_mult=0.0, lr_mult=1.0),
    'relative_position_bias_table':
    dict(decay_mult=0.0, lr_mult=0.1)
})
data_root = 'data/ade/ADEChallengeData2016'
dataset_type = 'ADE20KDataset'
default_hooks = dict(
    checkpoint=dict(
        by_epoch=False, interval=5000, save_best='mIoU',
        type='CheckpointHook'),
    logger=dict(interval=50, log_metric_by_epoch=False, type='LoggerHook'),
    param_scheduler=dict(type='ParamSchedulerHook'),
    sampler_seed=dict(type='DistSamplerSeedHook'),
    timer=dict(type='IterTimerHook'),
    visualization=dict(type='SegVisualizationHook'))
default_scope = 'mmseg'
depths = [
    2,
    2,
    6,
    2,
]
embed_multi = dict(decay_mult=0.0, lr_mult=1.0)
env_cfg = dict(
    cudnn_benchmark=True,
    dist_cfg=dict(backend='nccl'),
    mp_cfg=dict(mp_start_method='fork', opencv_num_threads=0))
img_ratios = [
    0.5,
    0.75,
    1.0,
    1.25,
    1.5,
    1.75,
]
launcher = 'none'
load_from = '../checkpoint_files/ade20k/mask2former/mask2former_swin-t_8xb2-160k_ade20k-512x512_20221203_234230-7d64e5dd.pth'
log_level = 'INFO'
log_processor = dict(by_epoch=False)
model = dict(
    backbone=dict(
        attn_drop_rate=0.0,
        depths=[
            2,
            2,
            6,
            2,
        ],
        drop_path_rate=0.3,
        drop_rate=0.0,
        embed_dims=96,
        frozen_stages=-1,
        init_cfg=dict(
            checkpoint=
            'https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/swin/swin_tiny_patch4_window7_224_20220317-1cdeb081.pth',
            type='Pretrained'),
        mlp_ratio=4,
        num_heads=[
            3,
            6,
            12,
            24,
        ],
        out_indices=(
            0,
            1,
            2,
            3,
        ),
        patch_norm=True,
        qk_scale=None,
        qkv_bias=True,
        type='SwinTransformer',
        window_size=7,
        with_cp=False),
    data_preprocessor=dict(
        bgr_to_rgb=True,
        corruption='zoom_blur',
        mean=[
            123.675,
            116.28,
            103.53,
        ],
        pad_val=0,
        seg_pad_val=255,
        size=(
            512,
            512,
        ),
        std=[
            58.395,
            57.12,
            57.375,
        ],
        test_cfg=dict(size_divisor=32),
        type='SegDataPreProcessor'),
    decode_head=dict(
        align_corners=False,
        enforce_decoder_input_project=False,
        feat_channels=256,
        in_channels=[
            96,
            192,
            384,
            768,
        ],
        loss_cls=dict(
            class_weight=[
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                0.1,
            ],
            loss_weight=2.0,
            reduction='mean',
            type='mmdet.CrossEntropyLoss',
            use_sigmoid=False),
        loss_dice=dict(
            activate=True,
            eps=1.0,
            loss_weight=5.0,
            naive_dice=True,
            reduction='mean',
            type='mmdet.DiceLoss',
            use_sigmoid=True),
        loss_mask=dict(
            loss_weight=5.0,
            reduction='mean',
            type='mmdet.CrossEntropyLoss',
            use_sigmoid=True),
        num_classes=150,
        num_queries=100,
        num_transformer_feat_level=3,
        out_channels=256,
        pixel_decoder=dict(
            act_cfg=dict(type='ReLU'),
            encoder=dict(
                init_cfg=None,
                layer_cfg=dict(
                    ffn_cfg=dict(
                        act_cfg=dict(inplace=True, type='ReLU'),
                        embed_dims=256,
                        feedforward_channels=1024,
                        ffn_drop=0.0,
                        num_fcs=2),
                    self_attn_cfg=dict(
                        batch_first=True,
                        dropout=0.0,
                        embed_dims=256,
                        im2col_step=64,
                        init_cfg=None,
                        norm_cfg=None,
                        num_heads=8,
                        num_levels=3,
                        num_points=4)),
                num_layers=6),
            init_cfg=None,
            norm_cfg=dict(num_groups=32, type='GN'),
            num_outs=3,
            positional_encoding=dict(normalize=True, num_feats=128),
            type='mmdet.MSDeformAttnPixelDecoder'),
        positional_encoding=dict(normalize=True, num_feats=128),
        strides=[
            4,
            8,
            16,
            32,
        ],
        train_cfg=dict(
            assigner=dict(
                match_costs=[
                    dict(type='mmdet.ClassificationCost', weight=2.0),
                    dict(
                        type='mmdet.CrossEntropyLossCost',
                        use_sigmoid=True,
                        weight=5.0),
                    dict(
                        eps=1.0,
                        pred_act=True,
                        type='mmdet.DiceCost',
                        weight=5.0),
                ],
                type='mmdet.HungarianAssigner'),
            importance_sample_ratio=0.75,
            num_points=12544,
            oversample_ratio=3.0,
            sampler=dict(type='mmdet.MaskPseudoSampler')),
        transformer_decoder=dict(
            init_cfg=None,
            layer_cfg=dict(
                cross_attn_cfg=dict(
                    attn_drop=0.0,
                    batch_first=True,
                    dropout_layer=None,
                    embed_dims=256,
                    num_heads=8,
                    proj_drop=0.0),
                ffn_cfg=dict(
                    act_cfg=dict(inplace=True, type='ReLU'),
                    add_identity=True,
                    dropout_layer=None,
                    embed_dims=256,
                    feedforward_channels=2048,
                    ffn_drop=0.0,
                    num_fcs=2),
                self_attn_cfg=dict(
                    attn_drop=0.0,
                    batch_first=True,
                    dropout_layer=None,
                    embed_dims=256,
                    num_heads=8,
                    proj_drop=0.0)),
            num_layers=9,
            return_intermediate=True),
        type='Mask2FormerHead'),
    test_cfg=dict(mode='whole'),
    train_cfg=dict(),
    type='EncoderDecoder')
num_classes = 150
optim_wrapper = dict(
    clip_grad=dict(max_norm=0.01, norm_type=2),
    optimizer=dict(
        betas=(
            0.9,
            0.999,
        ),
        eps=1e-08,
        lr=0.0001,
        type='AdamW',
        weight_decay=0.05),
    paramwise_cfg=dict(
        custom_keys=dict({
            'absolute_pos_embed':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone':
            dict(decay_mult=1.0, lr_mult=0.1),
            'backbone.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.patch_embed.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.0.blocks.0.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.0.blocks.1.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.0.downsample.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.1.blocks.0.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.1.blocks.1.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.1.downsample.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.0.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.1.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.2.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.3.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.4.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.5.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.downsample.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.3.blocks.0.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.3.blocks.1.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'level_embed':
            dict(decay_mult=0.0, lr_mult=1.0),
            'query_embed':
            dict(decay_mult=0.0, lr_mult=1.0),
            'query_feat':
            dict(decay_mult=0.0, lr_mult=1.0),
            'relative_position_bias_table':
            dict(decay_mult=0.0, lr_mult=0.1)
        }),
        norm_decay_mult=0.0),
    type='OptimWrapper')
optimizer = dict(
    betas=(
        0.9,
        0.999,
    ),
    eps=1e-08,
    lr=0.0001,
    type='AdamW',
    weight_decay=0.05)
param_scheduler = [
    dict(
        begin=0,
        by_epoch=False,
        end=160000,
        eta_min=0,
        power=0.9,
        type='PolyLR'),
]
pretrained = 'https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/swin/swin_tiny_patch4_window7_224_20220317-1cdeb081.pth'
resume = False
test_cfg = dict(type='TestLoop')
test_dataloader = dict(
    batch_size=1,
    dataset=dict(
        data_prefix=dict(
            img_path='images/validation',
            seg_map_path='annotations/validation'),
        data_root='data/ade/ADEChallengeData2016',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(keep_ratio=True, scale=(
                2048,
                512,
            ), type='Resize'),
            dict(reduce_zero_label=True, type='LoadAnnotations'),
            dict(type='PackSegInputs'),
        ],
        type='ADE20KDataset'),
    num_workers=4,
    persistent_workers=True,
    sampler=dict(shuffle=False, type='DefaultSampler'))
test_evaluator = dict(
    iou_metrics=[
        'mIoU',
    ], type='IoUMetric')
test_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(keep_ratio=True, scale=(
        2048,
        512,
    ), type='Resize'),
    dict(reduce_zero_label=True, type='LoadAnnotations'),
    dict(type='PackSegInputs'),
]
train_cfg = dict(
    max_iters=160000, type='IterBasedTrainLoop', val_interval=5000)
train_dataloader = dict(
    batch_size=2,
    dataset=dict(
        data_prefix=dict(
            img_path='images/training', seg_map_path='annotations/training'),
        data_root='data/ade/ADEChallengeData2016',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(reduce_zero_label=True, type='LoadAnnotations'),
            dict(
                max_size=2048,
                resize_type='ResizeShortestEdge',
                scales=[
                    256,
                    307,
                    358,
                    409,
                    460,
                    512,
                    563,
                    614,
                    665,
                    716,
                    768,
                    819,
                    870,
                    921,
                    972,
                    1024,
                ],
                type='RandomChoiceResize'),
            dict(
                cat_max_ratio=0.75, crop_size=(
                    512,
                    512,
                ), type='RandomCrop'),
            dict(prob=0.5, type='RandomFlip'),
            dict(type='PhotoMetricDistortion'),
            dict(type='PackSegInputs'),
        ],
        type='ADE20KDataset'),
    num_workers=4,
    persistent_workers=True,
    sampler=dict(shuffle=True, type='InfiniteSampler'))
train_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(reduce_zero_label=True, type='LoadAnnotations'),
    dict(
        max_size=2048,
        resize_type='ResizeShortestEdge',
        scales=[
            256,
            307,
            358,
            409,
            460,
            512,
            563,
            614,
            665,
            716,
            768,
            819,
            870,
            921,
            972,
            1024,
        ],
        type='RandomChoiceResize'),
    dict(cat_max_ratio=0.75, crop_size=(
        512,
        512,
    ), type='RandomCrop'),
    dict(prob=0.5, type='RandomFlip'),
    dict(type='PhotoMetricDistortion'),
    dict(type='PackSegInputs'),
]
tta_model = dict(type='SegTTAModel')
tta_pipeline = [
    dict(backend_args=None, type='LoadImageFromFile'),
    dict(
        transforms=[
            [
                dict(keep_ratio=True, scale_factor=0.5, type='Resize'),
                dict(keep_ratio=True, scale_factor=0.75, type='Resize'),
                dict(keep_ratio=True, scale_factor=1.0, type='Resize'),
                dict(keep_ratio=True, scale_factor=1.25, type='Resize'),
                dict(keep_ratio=True, scale_factor=1.5, type='Resize'),
                dict(keep_ratio=True, scale_factor=1.75, type='Resize'),
            ],
            [
                dict(direction='horizontal', prob=0.0, type='RandomFlip'),
                dict(direction='horizontal', prob=1.0, type='RandomFlip'),
            ],
            [
                dict(type='LoadAnnotations'),
            ],
            [
                dict(type='PackSegInputs'),
            ],
        ],
        type='TestTimeAug'),
]
val_cfg = dict(type='ValLoop')
val_dataloader = dict(
    batch_size=1,
    dataset=dict(
        data_prefix=dict(
            img_path='images/validation',
            seg_map_path='annotations/validation'),
        data_root='data/ade/ADEChallengeData2016',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(keep_ratio=True, scale=(
                2048,
                512,
            ), type='Resize'),
            dict(reduce_zero_label=True, type='LoadAnnotations'),
            dict(type='PackSegInputs'),
        ],
        type='ADE20KDataset'),
    num_workers=4,
    persistent_workers=True,
    sampler=dict(shuffle=False, type='DefaultSampler'))
val_evaluator = dict(
    iou_metrics=[
        'mIoU',
    ], type='IoUMetric')
vis_backends = [
    dict(type='LocalVisBackend'),
]
visualizer = dict(
    name='visualizer',
    type='SegLocalVisualizer',
    vis_backends=[
        dict(type='LocalVisBackend'),
    ])
work_dir = '../corruptions/work_dirs/ade20k/mask2former/mask2former_swin-t_8xb2-160k_ade20k-512x512/zoom_blur'

09/21 05:20:24 - mmengine - INFO - Distributed training is not used, all SyncBatchNorm (SyncBN) layers in the model will be automatically reverted to BatchNormXd layers if they are used.
09/21 05:20:24 - mmengine - INFO - Hooks will be executed in the following order:
before_run:
(VERY_HIGH   ) RuntimeInfoHook                    
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
before_train:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_train_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(NORMAL      ) DistSamplerSeedHook                
 -------------------- 
before_train_iter:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_train_iter:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(NORMAL      ) SegVisualizationHook               
(BELOW_NORMAL) LoggerHook                         
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
after_train_epoch:
(NORMAL      ) IterTimerHook                      
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_val:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
before_val_epoch:
(NORMAL      ) IterTimerHook                      
 -------------------- 
before_val_iter:
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_val_iter:
(NORMAL      ) IterTimerHook                      
(NORMAL      ) SegVisualizationHook               
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_val_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
after_val:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
after_train:
(VERY_HIGH   ) RuntimeInfoHook                    
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_test:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
before_test_epoch:
(NORMAL      ) IterTimerHook                      
 -------------------- 
before_test_iter:
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_test_iter:
(NORMAL      ) IterTimerHook                      
(NORMAL      ) SegVisualizationHook               
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_test_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_test:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
after_run:
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
09/21 05:20:24 - mmengine - WARNING - The prefix is not set in metric class IoUMetric.
Loads checkpoint by local backend from path: ../checkpoint_files/ade20k/mask2former/mask2former_swin-t_8xb2-160k_ade20k-512x512_20221203_234230-7d64e5dd.pth
09/21 05:20:25 - mmengine - INFO - Load checkpoint from ../checkpoint_files/ade20k/mask2former/mask2former_swin-t_8xb2-160k_ade20k-512x512_20221203_234230-7d64e5dd.pth
09/21 05:21:13 - mmengine - INFO - Iter(test) [  50/2000]    eta: 0:31:12  time: 0.9055  data_time: 0.0017  memory: 12733  
09/21 05:21:50 - mmengine - INFO - Iter(test) [ 100/2000]    eta: 0:26:53  time: 0.8028  data_time: 0.0017  memory: 12714  
09/21 05:22:25 - mmengine - INFO - Iter(test) [ 150/2000]    eta: 0:24:36  time: 0.7170  data_time: 0.0016  memory: 853  
09/21 05:23:02 - mmengine - INFO - Iter(test) [ 200/2000]    eta: 0:23:33  time: 0.6876  data_time: 0.0016  memory: 12754  
09/21 05:23:37 - mmengine - INFO - Iter(test) [ 250/2000]    eta: 0:22:25  time: 0.6692  data_time: 0.0015  memory: 12756  
09/21 05:24:12 - mmengine - INFO - Iter(test) [ 300/2000]    eta: 0:21:22  time: 0.7118  data_time: 0.0017  memory: 12721  
09/21 05:24:47 - mmengine - INFO - Iter(test) [ 350/2000]    eta: 0:20:35  time: 0.6633  data_time: 0.0016  memory: 12728  
09/21 05:25:22 - mmengine - INFO - Iter(test) [ 400/2000]    eta: 0:19:48  time: 0.6981  data_time: 0.0015  memory: 12694  
09/21 05:25:54 - mmengine - INFO - Iter(test) [ 450/2000]    eta: 0:18:52  time: 0.6385  data_time: 0.0015  memory: 894  
09/21 05:26:28 - mmengine - INFO - Iter(test) [ 500/2000]    eta: 0:18:08  time: 0.6807  data_time: 0.0015  memory: 853  
09/21 05:27:05 - mmengine - INFO - Iter(test) [ 550/2000]    eta: 0:17:32  time: 0.7201  data_time: 0.0016  memory: 961  
09/21 05:27:39 - mmengine - INFO - Iter(test) [ 600/2000]    eta: 0:16:51  time: 0.7048  data_time: 0.0018  memory: 958  
09/21 05:28:14 - mmengine - INFO - Iter(test) [ 650/2000]    eta: 0:16:13  time: 0.7885  data_time: 0.0014  memory: 12735  
09/21 05:28:51 - mmengine - INFO - Iter(test) [ 700/2000]    eta: 0:15:39  time: 0.7208  data_time: 0.0017  memory: 12724  
09/21 05:29:26 - mmengine - INFO - Iter(test) [ 750/2000]    eta: 0:15:01  time: 0.6816  data_time: 0.0016  memory: 1014  
09/21 05:29:59 - mmengine - INFO - Iter(test) [ 800/2000]    eta: 0:14:19  time: 0.6833  data_time: 0.0017  memory: 853  
09/21 05:30:33 - mmengine - INFO - Iter(test) [ 850/2000]    eta: 0:13:42  time: 0.7125  data_time: 0.0017  memory: 826  
09/21 05:31:05 - mmengine - INFO - Iter(test) [ 900/2000]    eta: 0:13:02  time: 0.6252  data_time: 0.0015  memory: 906  
09/21 05:31:41 - mmengine - INFO - Iter(test) [ 950/2000]    eta: 0:12:26  time: 0.6673  data_time: 0.0016  memory: 934  
09/21 05:32:14 - mmengine - INFO - Iter(test) [1000/2000]    eta: 0:11:48  time: 0.6666  data_time: 0.0016  memory: 934  
09/21 05:32:50 - mmengine - INFO - Iter(test) [1050/2000]    eta: 0:11:13  time: 0.7220  data_time: 0.0016  memory: 12737  
09/21 05:33:24 - mmengine - INFO - Iter(test) [1100/2000]    eta: 0:10:37  time: 0.6788  data_time: 0.0016  memory: 931  
09/21 05:33:58 - mmengine - INFO - Iter(test) [1150/2000]    eta: 0:10:00  time: 0.6818  data_time: 0.0016  memory: 904  
09/21 05:34:33 - mmengine - INFO - Iter(test) [1200/2000]    eta: 0:09:25  time: 0.6803  data_time: 0.0016  memory: 1839  
09/21 05:35:07 - mmengine - INFO - Iter(test) [1250/2000]    eta: 0:08:49  time: 0.6731  data_time: 0.0015  memory: 12716  
09/21 05:35:39 - mmengine - INFO - Iter(test) [1300/2000]    eta: 0:08:12  time: 0.6811  data_time: 0.0015  memory: 853  
09/21 05:36:13 - mmengine - INFO - Iter(test) [1350/2000]    eta: 0:07:36  time: 0.6443  data_time: 0.0015  memory: 853  
09/21 05:36:48 - mmengine - INFO - Iter(test) [1400/2000]    eta: 0:07:00  time: 0.7232  data_time: 0.0015  memory: 931  
09/21 05:37:20 - mmengine - INFO - Iter(test) [1450/2000]    eta: 0:06:24  time: 0.6980  data_time: 0.0014  memory: 934  
09/21 05:37:53 - mmengine - INFO - Iter(test) [1500/2000]    eta: 0:05:49  time: 0.6432  data_time: 0.0016  memory: 852  
09/21 05:38:29 - mmengine - INFO - Iter(test) [1550/2000]    eta: 0:05:14  time: 0.7167  data_time: 0.0015  memory: 934  
09/21 05:39:02 - mmengine - INFO - Iter(test) [1600/2000]    eta: 0:04:39  time: 0.6711  data_time: 0.0016  memory: 826  
09/21 05:39:37 - mmengine - INFO - Iter(test) [1650/2000]    eta: 0:04:04  time: 0.6302  data_time: 0.0014  memory: 12725  
09/21 05:40:12 - mmengine - INFO - Iter(test) [1700/2000]    eta: 0:03:29  time: 0.7044  data_time: 0.0016  memory: 930  
09/21 05:40:47 - mmengine - INFO - Iter(test) [1750/2000]    eta: 0:02:54  time: 0.6917  data_time: 0.0015  memory: 957  
09/21 05:41:20 - mmengine - INFO - Iter(test) [1800/2000]    eta: 0:02:19  time: 0.6938  data_time: 0.0016  memory: 853  
09/21 05:41:55 - mmengine - INFO - Iter(test) [1850/2000]    eta: 0:01:44  time: 0.6902  data_time: 0.0016  memory: 773  
09/21 05:42:28 - mmengine - INFO - Iter(test) [1900/2000]    eta: 0:01:09  time: 0.6975  data_time: 0.0016  memory: 987  
09/21 05:43:03 - mmengine - INFO - Iter(test) [1950/2000]    eta: 0:00:34  time: 0.6664  data_time: 0.0015  memory: 1224  
09/21 05:43:36 - mmengine - INFO - Iter(test) [2000/2000]    eta: 0:00:00  time: 0.6208  data_time: 0.0014  memory: 1012  
09/21 05:43:36 - mmengine - INFO - per class results:
09/21 05:43:36 - mmengine - INFO - 
+---------------------+-------+-------+
|        Class        |  IoU  |  Acc  |
+---------------------+-------+-------+
|         wall        |  56.7 | 80.74 |
|       building      | 64.93 | 82.75 |
|         sky         | 84.29 | 86.84 |
|        floor        | 58.25 | 78.53 |
|         tree        | 39.89 | 45.33 |
|       ceiling       | 61.66 | 87.69 |
|         road        | 64.98 | 76.63 |
|         bed         | 62.94 | 88.46 |
|      windowpane     | 41.64 | 64.36 |
|        grass        | 43.71 | 66.39 |
|       cabinet       | 35.95 | 42.19 |
|       sidewalk      | 37.19 | 49.93 |
|        person       |  52.4 | 71.57 |
|        earth        |  9.16 | 11.19 |
|         door        |  14.3 | 17.91 |
|        table        | 37.48 | 47.69 |
|       mountain      | 33.62 | 48.22 |
|        plant        | 22.33 | 41.55 |
|       curtain       | 34.89 | 61.64 |
|        chair        | 23.43 | 28.28 |
|         car         | 59.37 | 80.48 |
|        water        | 38.05 | 53.35 |
|       painting      |  43.1 | 64.85 |
|         sofa        | 35.49 | 54.14 |
|        shelf        | 27.43 |  44.8 |
|        house        | 20.01 | 22.46 |
|         sea         | 33.27 |  44.3 |
|        mirror       | 47.44 | 54.96 |
|         rug         | 21.57 | 23.09 |
|        field        | 18.81 | 66.05 |
|       armchair      | 11.45 | 14.92 |
|         seat        | 12.33 | 21.79 |
|        fence        | 12.32 | 36.03 |
|         desk        | 34.64 | 44.81 |
|         rock        |  9.86 | 10.16 |
|       wardrobe      | 34.94 |  51.1 |
|         lamp        | 36.18 | 46.98 |
|       bathtub       | 44.63 | 60.65 |
|       railing       |  9.94 | 14.22 |
|       cushion       | 22.38 | 26.05 |
|         base        |  7.79 | 13.48 |
|         box         |  2.98 |  3.26 |
|        column       | 18.13 | 22.41 |
|      signboard      | 20.45 | 26.41 |
|   chest of drawers  |  32.3 | 39.65 |
|       counter       | 11.97 | 26.88 |
|         sand        |  9.44 |  20.9 |
|         sink        | 47.75 | 52.77 |
|      skyscraper     | 24.85 | 34.27 |
|      fireplace      | 42.69 | 54.26 |
|     refrigerator    | 44.13 | 50.56 |
|      grandstand     | 14.29 | 60.37 |
|         path        |  6.87 |  7.13 |
|        stairs       |  1.4  |  1.44 |
|        runway       | 58.43 | 78.39 |
|         case        | 44.76 |  56.8 |
|      pool table     | 73.99 | 93.47 |
|        pillow       | 36.44 | 49.64 |
|     screen door     | 26.17 | 32.51 |
|       stairway      | 18.64 | 23.73 |
|        river        |  3.98 |  4.03 |
|        bridge       | 22.34 | 29.26 |
|       bookcase      | 19.29 | 23.96 |
|        blind        | 17.36 | 24.74 |
|     coffee table    |  35.2 | 41.76 |
|        toilet       | 62.04 | 70.99 |
|        flower       | 14.25 | 16.75 |
|         book        | 26.04 | 36.93 |
|         hill        |  6.29 | 23.57 |
|        bench        | 18.43 | 29.72 |
|      countertop     | 37.43 | 48.88 |
|        stove        |  53.5 | 61.01 |
|         palm        | 12.84 | 37.55 |
|    kitchen island   | 33.62 | 45.98 |
|       computer      | 41.82 | 45.71 |
|     swivel chair    | 11.14 | 12.74 |
|         boat        |  0.61 |  0.62 |
|         bar         |  4.78 |  5.19 |
|    arcade machine   |  6.63 | 20.28 |
|        hovel        | 38.08 | 46.66 |
|         bus         | 47.37 | 75.49 |
|        towel        | 23.26 | 29.89 |
|        light        | 24.17 | 40.74 |
|        truck        |  1.54 |  2.16 |
|        tower        |  5.08 |  6.4  |
|      chandelier     | 31.37 | 33.93 |
|        awning       | 13.14 | 14.22 |
|     streetlight     |  4.4  |  5.0  |
|        booth        | 27.89 |  36.6 |
| television receiver | 41.17 | 50.97 |
|       airplane      | 30.96 | 57.71 |
|      dirt track     |  0.0  |  0.0  |
|       apparel       | 15.06 | 23.17 |
|         pole        |  6.24 |  7.75 |
|         land        |  0.32 |  0.49 |
|      bannister      |  3.03 |  4.76 |
|      escalator      | 14.19 | 24.65 |
|       ottoman       | 21.92 | 29.67 |
|        bottle       |  7.24 |  7.69 |
|        buffet       | 24.59 | 26.61 |
|        poster       | 11.18 | 20.83 |
|        stage        | 10.08 | 12.95 |
|         van         | 36.77 | 46.01 |
|         ship        |  5.96 |  6.24 |
|       fountain      |  0.0  |  0.0  |
|    conveyer belt    | 22.93 | 87.12 |
|        canopy       | 14.39 | 15.87 |
|        washer       | 69.84 | 73.01 |
|      plaything      |  1.12 |  1.79 |
|    swimming pool    | 20.75 | 51.65 |
|        stool        | 21.22 | 26.48 |
|        barrel       |  0.0  |  0.0  |
|        basket       | 11.66 | 13.06 |
|      waterfall      | 50.64 | 63.98 |
|         tent        | 11.23 | 12.12 |
|         bag         |  2.99 |  6.42 |
|       minibike      | 13.08 | 14.26 |
|        cradle       |  67.2 | 77.87 |
|         oven        | 15.84 | 17.56 |
|         ball        | 18.33 | 59.37 |
|         food        |  7.67 |  7.82 |
|         step        |  1.87 |  2.34 |
|         tank        |  0.69 |  0.92 |
|      trade name     |  12.2 | 12.82 |
|      microwave      | 19.71 |  21.3 |
|         pot         | 10.87 | 11.78 |
|        animal       | 31.42 | 45.42 |
|       bicycle       | 15.12 | 25.16 |
|         lake        |  0.17 |  0.17 |
|      dishwasher     | 26.56 | 36.05 |
|        screen       | 35.14 | 88.46 |
|       blanket       |  3.57 |  5.58 |
|      sculpture      |  7.38 |  9.54 |
|         hood        | 25.17 | 27.04 |
|        sconce       | 21.99 | 30.44 |
|         vase        |  14.0 | 18.62 |
|    traffic light    | 13.31 | 14.81 |
|         tray        |  8.42 |  9.5  |
|        ashcan       | 22.55 |  27.9 |
|         fan         | 31.73 | 42.83 |
|         pier        |  4.37 |  4.37 |
|      crt screen     |  0.14 |  0.18 |
|        plate        | 15.38 | 18.42 |
|       monitor       |  5.91 |  8.74 |
|    bulletin board   | 13.11 | 17.07 |
|        shower       |  1.49 |  6.44 |
|       radiator      | 17.96 | 27.74 |
|        glass        |  1.75 |  1.85 |
|        clock        |  7.75 |  8.6  |
|         flag        | 15.74 | 18.39 |
+---------------------+-------+-------+
09/21 05:43:36 - mmengine - INFO - Iter(test) [2000/2000]    aAcc: 65.3600  mIoU: 24.0200  mAcc: 33.4800  data_time: 0.0017  time: 0.6953
Finished processing corruption type: zoom_blur
Processing corruption type: snow
09/21 05:43:40 - mmengine - INFO - 
------------------------------------------------------------
System environment:
    sys.platform: linux
    Python: 3.10.13 | packaged by conda-forge | (main, Dec 23 2023, 15:36:39) [GCC 12.3.0]
    CUDA available: True
    MUSA available: False
    numpy_random_seed: 888664550
    GPU 0: Tesla V100-SXM2-32GB
    CUDA_HOME: /opt/bwhpc/common/devel/cuda/11.7
    NVCC: Cuda compilation tools, release 11.7, V11.7.99
    GCC: gcc (GCC) 8.5.0 20210514 (Red Hat 8.5.0-18)
    PyTorch: 1.13.1
    PyTorch compiling details: PyTorch built with:
  - GCC 9.3
  - C++ Version: 201402
  - Intel(R) oneAPI Math Kernel Library Version 2023.1-Product Build 20230303 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v2.6.0 (Git Hash 52b5f107dd9cf10910aaa19cb47f3abf9b349815)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - LAPACK is enabled (usually provided by MKL)
  - NNPACK is enabled
  - CPU capability usage: AVX2
  - CUDA Runtime 11.7
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_61,code=sm_61;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86;-gencode;arch=compute_37,code=compute_37
  - CuDNN 8.5
  - Magma 2.6.1
  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.7, CUDNN_VERSION=8.5.0, CXX_COMPILER=/opt/rh/devtoolset-9/root/usr/bin/c++, CXX_FLAGS= -fabi-version=11 -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -DEDGE_PROFILER_USE_KINETO -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Werror=non-virtual-dtor -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wunused-local-typedefs -Wno-unused-parameter -Wno-unused-function -Wno-unused-result -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Werror=cast-function-type -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.13.1, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, USE_ROCM=OFF, 

    TorchVision: 0.14.1
    OpenCV: 3.4.18
    MMEngine: 0.10.4

Runtime environment:
    cudnn_benchmark: True
    mp_cfg: {'mp_start_method': 'fork', 'opencv_num_threads': 0}
    dist_cfg: {'backend': 'nccl'}
    seed: 888664550
    Distributed launcher: none
    Distributed training: False
    GPU number: 1
------------------------------------------------------------

09/21 05:43:40 - mmengine - INFO - Config:
auto_scale_lr = dict(base_batch_size=16, enable=False)
backbone_embed_multi = dict(decay_mult=0.0, lr_mult=0.1)
backbone_norm_multi = dict(decay_mult=0.0, lr_mult=0.1)
crop_size = (
    512,
    512,
)
custom_imports = dict(allow_failed_imports=False, imports='mmdet.models')
custom_keys = dict({
    'absolute_pos_embed':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone':
    dict(decay_mult=1.0, lr_mult=0.1),
    'backbone.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.patch_embed.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.0.blocks.0.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.0.blocks.1.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.0.downsample.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.1.blocks.0.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.1.blocks.1.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.1.downsample.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.0.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.1.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.2.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.3.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.4.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.5.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.downsample.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.3.blocks.0.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.3.blocks.1.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'level_embed':
    dict(decay_mult=0.0, lr_mult=1.0),
    'query_embed':
    dict(decay_mult=0.0, lr_mult=1.0),
    'query_feat':
    dict(decay_mult=0.0, lr_mult=1.0),
    'relative_position_bias_table':
    dict(decay_mult=0.0, lr_mult=0.1)
})
data_root = 'data/ade/ADEChallengeData2016'
dataset_type = 'ADE20KDataset'
default_hooks = dict(
    checkpoint=dict(
        by_epoch=False, interval=5000, save_best='mIoU',
        type='CheckpointHook'),
    logger=dict(interval=50, log_metric_by_epoch=False, type='LoggerHook'),
    param_scheduler=dict(type='ParamSchedulerHook'),
    sampler_seed=dict(type='DistSamplerSeedHook'),
    timer=dict(type='IterTimerHook'),
    visualization=dict(type='SegVisualizationHook'))
default_scope = 'mmseg'
depths = [
    2,
    2,
    6,
    2,
]
embed_multi = dict(decay_mult=0.0, lr_mult=1.0)
env_cfg = dict(
    cudnn_benchmark=True,
    dist_cfg=dict(backend='nccl'),
    mp_cfg=dict(mp_start_method='fork', opencv_num_threads=0))
img_ratios = [
    0.5,
    0.75,
    1.0,
    1.25,
    1.5,
    1.75,
]
launcher = 'none'
load_from = '../checkpoint_files/ade20k/mask2former/mask2former_swin-t_8xb2-160k_ade20k-512x512_20221203_234230-7d64e5dd.pth'
log_level = 'INFO'
log_processor = dict(by_epoch=False)
model = dict(
    backbone=dict(
        attn_drop_rate=0.0,
        depths=[
            2,
            2,
            6,
            2,
        ],
        drop_path_rate=0.3,
        drop_rate=0.0,
        embed_dims=96,
        frozen_stages=-1,
        init_cfg=dict(
            checkpoint=
            'https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/swin/swin_tiny_patch4_window7_224_20220317-1cdeb081.pth',
            type='Pretrained'),
        mlp_ratio=4,
        num_heads=[
            3,
            6,
            12,
            24,
        ],
        out_indices=(
            0,
            1,
            2,
            3,
        ),
        patch_norm=True,
        qk_scale=None,
        qkv_bias=True,
        type='SwinTransformer',
        window_size=7,
        with_cp=False),
    data_preprocessor=dict(
        bgr_to_rgb=True,
        corruption='snow',
        mean=[
            123.675,
            116.28,
            103.53,
        ],
        pad_val=0,
        seg_pad_val=255,
        size=(
            512,
            512,
        ),
        std=[
            58.395,
            57.12,
            57.375,
        ],
        test_cfg=dict(size_divisor=32),
        type='SegDataPreProcessor'),
    decode_head=dict(
        align_corners=False,
        enforce_decoder_input_project=False,
        feat_channels=256,
        in_channels=[
            96,
            192,
            384,
            768,
        ],
        loss_cls=dict(
            class_weight=[
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                0.1,
            ],
            loss_weight=2.0,
            reduction='mean',
            type='mmdet.CrossEntropyLoss',
            use_sigmoid=False),
        loss_dice=dict(
            activate=True,
            eps=1.0,
            loss_weight=5.0,
            naive_dice=True,
            reduction='mean',
            type='mmdet.DiceLoss',
            use_sigmoid=True),
        loss_mask=dict(
            loss_weight=5.0,
            reduction='mean',
            type='mmdet.CrossEntropyLoss',
            use_sigmoid=True),
        num_classes=150,
        num_queries=100,
        num_transformer_feat_level=3,
        out_channels=256,
        pixel_decoder=dict(
            act_cfg=dict(type='ReLU'),
            encoder=dict(
                init_cfg=None,
                layer_cfg=dict(
                    ffn_cfg=dict(
                        act_cfg=dict(inplace=True, type='ReLU'),
                        embed_dims=256,
                        feedforward_channels=1024,
                        ffn_drop=0.0,
                        num_fcs=2),
                    self_attn_cfg=dict(
                        batch_first=True,
                        dropout=0.0,
                        embed_dims=256,
                        im2col_step=64,
                        init_cfg=None,
                        norm_cfg=None,
                        num_heads=8,
                        num_levels=3,
                        num_points=4)),
                num_layers=6),
            init_cfg=None,
            norm_cfg=dict(num_groups=32, type='GN'),
            num_outs=3,
            positional_encoding=dict(normalize=True, num_feats=128),
            type='mmdet.MSDeformAttnPixelDecoder'),
        positional_encoding=dict(normalize=True, num_feats=128),
        strides=[
            4,
            8,
            16,
            32,
        ],
        train_cfg=dict(
            assigner=dict(
                match_costs=[
                    dict(type='mmdet.ClassificationCost', weight=2.0),
                    dict(
                        type='mmdet.CrossEntropyLossCost',
                        use_sigmoid=True,
                        weight=5.0),
                    dict(
                        eps=1.0,
                        pred_act=True,
                        type='mmdet.DiceCost',
                        weight=5.0),
                ],
                type='mmdet.HungarianAssigner'),
            importance_sample_ratio=0.75,
            num_points=12544,
            oversample_ratio=3.0,
            sampler=dict(type='mmdet.MaskPseudoSampler')),
        transformer_decoder=dict(
            init_cfg=None,
            layer_cfg=dict(
                cross_attn_cfg=dict(
                    attn_drop=0.0,
                    batch_first=True,
                    dropout_layer=None,
                    embed_dims=256,
                    num_heads=8,
                    proj_drop=0.0),
                ffn_cfg=dict(
                    act_cfg=dict(inplace=True, type='ReLU'),
                    add_identity=True,
                    dropout_layer=None,
                    embed_dims=256,
                    feedforward_channels=2048,
                    ffn_drop=0.0,
                    num_fcs=2),
                self_attn_cfg=dict(
                    attn_drop=0.0,
                    batch_first=True,
                    dropout_layer=None,
                    embed_dims=256,
                    num_heads=8,
                    proj_drop=0.0)),
            num_layers=9,
            return_intermediate=True),
        type='Mask2FormerHead'),
    test_cfg=dict(mode='whole'),
    train_cfg=dict(),
    type='EncoderDecoder')
num_classes = 150
optim_wrapper = dict(
    clip_grad=dict(max_norm=0.01, norm_type=2),
    optimizer=dict(
        betas=(
            0.9,
            0.999,
        ),
        eps=1e-08,
        lr=0.0001,
        type='AdamW',
        weight_decay=0.05),
    paramwise_cfg=dict(
        custom_keys=dict({
            'absolute_pos_embed':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone':
            dict(decay_mult=1.0, lr_mult=0.1),
            'backbone.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.patch_embed.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.0.blocks.0.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.0.blocks.1.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.0.downsample.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.1.blocks.0.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.1.blocks.1.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.1.downsample.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.0.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.1.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.2.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.3.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.4.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.5.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.downsample.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.3.blocks.0.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.3.blocks.1.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'level_embed':
            dict(decay_mult=0.0, lr_mult=1.0),
            'query_embed':
            dict(decay_mult=0.0, lr_mult=1.0),
            'query_feat':
            dict(decay_mult=0.0, lr_mult=1.0),
            'relative_position_bias_table':
            dict(decay_mult=0.0, lr_mult=0.1)
        }),
        norm_decay_mult=0.0),
    type='OptimWrapper')
optimizer = dict(
    betas=(
        0.9,
        0.999,
    ),
    eps=1e-08,
    lr=0.0001,
    type='AdamW',
    weight_decay=0.05)
param_scheduler = [
    dict(
        begin=0,
        by_epoch=False,
        end=160000,
        eta_min=0,
        power=0.9,
        type='PolyLR'),
]
pretrained = 'https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/swin/swin_tiny_patch4_window7_224_20220317-1cdeb081.pth'
resume = False
test_cfg = dict(type='TestLoop')
test_dataloader = dict(
    batch_size=1,
    dataset=dict(
        data_prefix=dict(
            img_path='images/validation',
            seg_map_path='annotations/validation'),
        data_root='data/ade/ADEChallengeData2016',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(keep_ratio=True, scale=(
                2048,
                512,
            ), type='Resize'),
            dict(reduce_zero_label=True, type='LoadAnnotations'),
            dict(type='PackSegInputs'),
        ],
        type='ADE20KDataset'),
    num_workers=4,
    persistent_workers=True,
    sampler=dict(shuffle=False, type='DefaultSampler'))
test_evaluator = dict(
    iou_metrics=[
        'mIoU',
    ], type='IoUMetric')
test_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(keep_ratio=True, scale=(
        2048,
        512,
    ), type='Resize'),
    dict(reduce_zero_label=True, type='LoadAnnotations'),
    dict(type='PackSegInputs'),
]
train_cfg = dict(
    max_iters=160000, type='IterBasedTrainLoop', val_interval=5000)
train_dataloader = dict(
    batch_size=2,
    dataset=dict(
        data_prefix=dict(
            img_path='images/training', seg_map_path='annotations/training'),
        data_root='data/ade/ADEChallengeData2016',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(reduce_zero_label=True, type='LoadAnnotations'),
            dict(
                max_size=2048,
                resize_type='ResizeShortestEdge',
                scales=[
                    256,
                    307,
                    358,
                    409,
                    460,
                    512,
                    563,
                    614,
                    665,
                    716,
                    768,
                    819,
                    870,
                    921,
                    972,
                    1024,
                ],
                type='RandomChoiceResize'),
            dict(
                cat_max_ratio=0.75, crop_size=(
                    512,
                    512,
                ), type='RandomCrop'),
            dict(prob=0.5, type='RandomFlip'),
            dict(type='PhotoMetricDistortion'),
            dict(type='PackSegInputs'),
        ],
        type='ADE20KDataset'),
    num_workers=4,
    persistent_workers=True,
    sampler=dict(shuffle=True, type='InfiniteSampler'))
train_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(reduce_zero_label=True, type='LoadAnnotations'),
    dict(
        max_size=2048,
        resize_type='ResizeShortestEdge',
        scales=[
            256,
            307,
            358,
            409,
            460,
            512,
            563,
            614,
            665,
            716,
            768,
            819,
            870,
            921,
            972,
            1024,
        ],
        type='RandomChoiceResize'),
    dict(cat_max_ratio=0.75, crop_size=(
        512,
        512,
    ), type='RandomCrop'),
    dict(prob=0.5, type='RandomFlip'),
    dict(type='PhotoMetricDistortion'),
    dict(type='PackSegInputs'),
]
tta_model = dict(type='SegTTAModel')
tta_pipeline = [
    dict(backend_args=None, type='LoadImageFromFile'),
    dict(
        transforms=[
            [
                dict(keep_ratio=True, scale_factor=0.5, type='Resize'),
                dict(keep_ratio=True, scale_factor=0.75, type='Resize'),
                dict(keep_ratio=True, scale_factor=1.0, type='Resize'),
                dict(keep_ratio=True, scale_factor=1.25, type='Resize'),
                dict(keep_ratio=True, scale_factor=1.5, type='Resize'),
                dict(keep_ratio=True, scale_factor=1.75, type='Resize'),
            ],
            [
                dict(direction='horizontal', prob=0.0, type='RandomFlip'),
                dict(direction='horizontal', prob=1.0, type='RandomFlip'),
            ],
            [
                dict(type='LoadAnnotations'),
            ],
            [
                dict(type='PackSegInputs'),
            ],
        ],
        type='TestTimeAug'),
]
val_cfg = dict(type='ValLoop')
val_dataloader = dict(
    batch_size=1,
    dataset=dict(
        data_prefix=dict(
            img_path='images/validation',
            seg_map_path='annotations/validation'),
        data_root='data/ade/ADEChallengeData2016',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(keep_ratio=True, scale=(
                2048,
                512,
            ), type='Resize'),
            dict(reduce_zero_label=True, type='LoadAnnotations'),
            dict(type='PackSegInputs'),
        ],
        type='ADE20KDataset'),
    num_workers=4,
    persistent_workers=True,
    sampler=dict(shuffle=False, type='DefaultSampler'))
val_evaluator = dict(
    iou_metrics=[
        'mIoU',
    ], type='IoUMetric')
vis_backends = [
    dict(type='LocalVisBackend'),
]
visualizer = dict(
    name='visualizer',
    type='SegLocalVisualizer',
    vis_backends=[
        dict(type='LocalVisBackend'),
    ])
work_dir = '../corruptions/work_dirs/ade20k/mask2former/mask2former_swin-t_8xb2-160k_ade20k-512x512/snow'

09/21 05:43:43 - mmengine - INFO - Distributed training is not used, all SyncBatchNorm (SyncBN) layers in the model will be automatically reverted to BatchNormXd layers if they are used.
09/21 05:43:43 - mmengine - INFO - Hooks will be executed in the following order:
before_run:
(VERY_HIGH   ) RuntimeInfoHook                    
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
before_train:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_train_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(NORMAL      ) DistSamplerSeedHook                
 -------------------- 
before_train_iter:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_train_iter:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(NORMAL      ) SegVisualizationHook               
(BELOW_NORMAL) LoggerHook                         
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
after_train_epoch:
(NORMAL      ) IterTimerHook                      
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_val:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
before_val_epoch:
(NORMAL      ) IterTimerHook                      
 -------------------- 
before_val_iter:
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_val_iter:
(NORMAL      ) IterTimerHook                      
(NORMAL      ) SegVisualizationHook               
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_val_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
after_val:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
after_train:
(VERY_HIGH   ) RuntimeInfoHook                    
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_test:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
before_test_epoch:
(NORMAL      ) IterTimerHook                      
 -------------------- 
before_test_iter:
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_test_iter:
(NORMAL      ) IterTimerHook                      
(NORMAL      ) SegVisualizationHook               
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_test_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_test:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
after_run:
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
09/21 05:43:44 - mmengine - WARNING - The prefix is not set in metric class IoUMetric.
Loads checkpoint by local backend from path: ../checkpoint_files/ade20k/mask2former/mask2former_swin-t_8xb2-160k_ade20k-512x512_20221203_234230-7d64e5dd.pth
09/21 05:43:45 - mmengine - INFO - Load checkpoint from ../checkpoint_files/ade20k/mask2former/mask2former_swin-t_8xb2-160k_ade20k-512x512_20221203_234230-7d64e5dd.pth
09/21 05:44:13 - mmengine - INFO - Iter(test) [  50/2000]    eta: 0:18:16  time: 0.4870  data_time: 0.0017  memory: 12733  
09/21 05:44:30 - mmengine - INFO - Iter(test) [ 100/2000]    eta: 0:14:14  time: 0.3930  data_time: 0.0018  memory: 12714  
09/21 05:44:44 - mmengine - INFO - Iter(test) [ 150/2000]    eta: 0:12:16  time: 0.3088  data_time: 0.0017  memory: 853  
09/21 05:45:01 - mmengine - INFO - Iter(test) [ 200/2000]    eta: 0:11:28  time: 0.2846  data_time: 0.0016  memory: 12754  
09/21 05:45:17 - mmengine - INFO - Iter(test) [ 250/2000]    eta: 0:10:45  time: 0.2783  data_time: 0.0015  memory: 12756  
09/21 05:45:32 - mmengine - INFO - Iter(test) [ 300/2000]    eta: 0:10:08  time: 0.2952  data_time: 0.0016  memory: 12721  
09/21 05:45:48 - mmengine - INFO - Iter(test) [ 350/2000]    eta: 0:09:40  time: 0.2832  data_time: 0.0015  memory: 12728  
09/21 05:46:03 - mmengine - INFO - Iter(test) [ 400/2000]    eta: 0:09:12  time: 0.2932  data_time: 0.0014  memory: 12694  
09/21 05:46:16 - mmengine - INFO - Iter(test) [ 450/2000]    eta: 0:08:41  time: 0.2650  data_time: 0.0016  memory: 894  
09/21 05:46:31 - mmengine - INFO - Iter(test) [ 500/2000]    eta: 0:08:18  time: 0.2873  data_time: 0.0015  memory: 853  
09/21 05:46:46 - mmengine - INFO - Iter(test) [ 550/2000]    eta: 0:07:57  time: 0.3090  data_time: 0.0016  memory: 961  
09/21 05:47:00 - mmengine - INFO - Iter(test) [ 600/2000]    eta: 0:07:36  time: 0.3010  data_time: 0.0016  memory: 958  
09/21 05:47:16 - mmengine - INFO - Iter(test) [ 650/2000]    eta: 0:07:18  time: 0.3736  data_time: 0.0015  memory: 12735  
09/21 05:47:32 - mmengine - INFO - Iter(test) [ 700/2000]    eta: 0:07:01  time: 0.2987  data_time: 0.0016  memory: 12724  
09/21 05:47:46 - mmengine - INFO - Iter(test) [ 750/2000]    eta: 0:06:42  time: 0.2849  data_time: 0.0015  memory: 1014  
09/21 05:48:00 - mmengine - INFO - Iter(test) [ 800/2000]    eta: 0:06:22  time: 0.2872  data_time: 0.0017  memory: 853  
09/21 05:48:15 - mmengine - INFO - Iter(test) [ 850/2000]    eta: 0:06:05  time: 0.2873  data_time: 0.0016  memory: 826  
09/21 05:48:28 - mmengine - INFO - Iter(test) [ 900/2000]    eta: 0:05:46  time: 0.2867  data_time: 0.0014  memory: 906  
09/21 05:48:43 - mmengine - INFO - Iter(test) [ 950/2000]    eta: 0:05:29  time: 0.2885  data_time: 0.0015  memory: 934  
09/21 05:48:57 - mmengine - INFO - Iter(test) [1000/2000]    eta: 0:05:12  time: 0.2728  data_time: 0.0015  memory: 934  
09/21 05:49:13 - mmengine - INFO - Iter(test) [1050/2000]    eta: 0:04:57  time: 0.3009  data_time: 0.0015  memory: 12737  
09/21 05:49:28 - mmengine - INFO - Iter(test) [1100/2000]    eta: 0:04:40  time: 0.2931  data_time: 0.0016  memory: 931  
09/21 05:49:42 - mmengine - INFO - Iter(test) [1150/2000]    eta: 0:04:24  time: 0.2876  data_time: 0.0015  memory: 904  
09/21 05:49:57 - mmengine - INFO - Iter(test) [1200/2000]    eta: 0:04:08  time: 0.2755  data_time: 0.0015  memory: 1839  
09/21 05:50:12 - mmengine - INFO - Iter(test) [1250/2000]    eta: 0:03:52  time: 0.2823  data_time: 0.0014  memory: 12716  
09/21 05:50:25 - mmengine - INFO - Iter(test) [1300/2000]    eta: 0:03:35  time: 0.2963  data_time: 0.0014  memory: 853  
09/21 05:50:39 - mmengine - INFO - Iter(test) [1350/2000]    eta: 0:03:19  time: 0.2610  data_time: 0.0015  memory: 853  
09/21 05:50:54 - mmengine - INFO - Iter(test) [1400/2000]    eta: 0:03:03  time: 0.3036  data_time: 0.0015  memory: 931  
09/21 05:51:08 - mmengine - INFO - Iter(test) [1450/2000]    eta: 0:02:48  time: 0.3075  data_time: 0.0014  memory: 934  
09/21 05:51:22 - mmengine - INFO - Iter(test) [1500/2000]    eta: 0:02:32  time: 0.2711  data_time: 0.0014  memory: 852  
09/21 05:51:37 - mmengine - INFO - Iter(test) [1550/2000]    eta: 0:02:17  time: 0.2949  data_time: 0.0016  memory: 934  
09/21 05:51:52 - mmengine - INFO - Iter(test) [1600/2000]    eta: 0:02:01  time: 0.2952  data_time: 0.0017  memory: 826  
09/21 05:52:06 - mmengine - INFO - Iter(test) [1650/2000]    eta: 0:01:46  time: 0.2759  data_time: 0.0014  memory: 12725  
09/21 05:52:21 - mmengine - INFO - Iter(test) [1700/2000]    eta: 0:01:31  time: 0.2910  data_time: 0.0017  memory: 930  
09/21 05:52:36 - mmengine - INFO - Iter(test) [1750/2000]    eta: 0:01:15  time: 0.2793  data_time: 0.0014  memory: 957  
09/21 05:52:51 - mmengine - INFO - Iter(test) [1800/2000]    eta: 0:01:00  time: 0.3063  data_time: 0.0017  memory: 853  
09/21 05:53:05 - mmengine - INFO - Iter(test) [1850/2000]    eta: 0:00:45  time: 0.3018  data_time: 0.0016  memory: 773  
09/21 05:53:19 - mmengine - INFO - Iter(test) [1900/2000]    eta: 0:00:30  time: 0.2781  data_time: 0.0015  memory: 987  
09/21 05:53:34 - mmengine - INFO - Iter(test) [1950/2000]    eta: 0:00:15  time: 0.2766  data_time: 0.0015  memory: 1224  
09/21 05:53:48 - mmengine - INFO - Iter(test) [2000/2000]    eta: 0:00:00  time: 0.2710  data_time: 0.0013  memory: 1012  
09/21 05:53:48 - mmengine - INFO - per class results:
09/21 05:53:48 - mmengine - INFO - 
+---------------------+-------+-------+
|        Class        |  IoU  |  Acc  |
+---------------------+-------+-------+
|         wall        | 65.97 | 87.93 |
|       building      | 75.77 | 89.53 |
|         sky         | 85.68 | 88.37 |
|        floor        | 65.66 | 90.89 |
|         tree        | 68.33 | 77.29 |
|       ceiling       |  66.7 |  84.9 |
|         road        | 66.25 | 70.88 |
|         bed         | 80.86 | 86.89 |
|      windowpane     |  54.6 | 67.54 |
|        grass        | 54.23 | 67.19 |
|       cabinet       | 44.76 | 56.09 |
|       sidewalk      |  52.2 | 68.47 |
|        person       | 75.31 | 82.89 |
|        earth        | 29.47 |  37.7 |
|         door        | 22.88 | 26.02 |
|        table        | 48.82 | 63.96 |
|       mountain      | 38.44 | 53.37 |
|        plant        |  48.3 | 61.98 |
|       curtain       | 57.47 | 76.49 |
|        chair        | 45.77 | 63.08 |
|         car         | 80.24 | 88.79 |
|        water        | 37.91 | 58.04 |
|       painting      | 62.99 | 78.09 |
|         sofa        | 53.68 | 71.62 |
|        shelf        | 30.76 | 58.89 |
|        house        | 12.12 | 13.05 |
|         sea         | 15.05 | 16.49 |
|        mirror       | 50.85 | 63.79 |
|         rug         | 31.27 | 32.39 |
|        field        | 21.71 |  64.0 |
|       armchair      | 28.63 | 43.64 |
|         seat        | 25.95 | 61.73 |
|        fence        | 23.57 | 37.67 |
|         desk        | 36.95 | 44.51 |
|         rock        | 32.35 | 38.64 |
|       wardrobe      | 32.74 | 37.73 |
|         lamp        | 56.78 | 65.34 |
|       bathtub       | 53.86 | 76.71 |
|       railing       |  23.3 | 37.52 |
|       cushion       | 43.39 |  48.5 |
|         base        | 10.56 |  29.8 |
|         box         | 17.61 | 25.64 |
|        column       | 30.26 | 33.29 |
|      signboard      | 33.11 | 46.84 |
|   chest of drawers  | 29.53 | 51.92 |
|       counter       | 14.66 | 23.09 |
|         sand        | 12.04 | 14.15 |
|         sink        | 53.35 | 60.31 |
|      skyscraper     |  28.1 | 38.15 |
|      fireplace      |  51.9 | 64.58 |
|     refrigerator    | 59.37 | 66.89 |
|      grandstand     | 12.15 | 87.78 |
|         path        | 15.61 | 19.76 |
|        stairs       | 28.52 | 33.53 |
|        runway       | 29.42 | 29.67 |
|         case        | 39.58 | 50.81 |
|      pool table     | 82.45 | 90.38 |
|        pillow       | 50.05 | 59.56 |
|     screen door     |  33.5 | 48.86 |
|       stairway      | 20.19 | 23.97 |
|        river        |  2.49 |  2.72 |
|        bridge       |  25.2 | 36.96 |
|       bookcase      | 19.27 | 20.96 |
|        blind        | 26.48 | 29.01 |
|     coffee table    | 49.98 | 58.41 |
|        toilet       | 66.23 | 70.43 |
|        flower       |  35.4 | 45.72 |
|         book        | 39.72 | 48.73 |
|         hill        |  9.08 | 15.77 |
|        bench        | 28.46 | 33.32 |
|      countertop     | 50.24 | 69.59 |
|        stove        | 60.01 | 66.42 |
|         palm        | 48.25 | 69.59 |
|    kitchen island   | 30.27 | 44.44 |
|       computer      | 42.86 | 46.02 |
|     swivel chair    | 22.14 | 24.11 |
|         boat        | 34.61 | 41.99 |
|         bar         | 33.51 | 57.58 |
|    arcade machine   | 18.59 | 23.35 |
|        hovel        | 32.55 | 51.56 |
|         bus         | 79.86 | 94.67 |
|        towel        | 39.58 | 44.03 |
|        light        | 44.98 | 52.13 |
|        truck        | 22.75 | 33.36 |
|        tower        | 22.27 | 32.27 |
|      chandelier     | 62.39 | 71.39 |
|        awning       | 20.85 | 23.46 |
|     streetlight     | 29.56 |  38.8 |
|        booth        | 38.49 |  49.5 |
| television receiver | 38.77 | 48.82 |
|       airplane      | 57.08 | 62.73 |
|      dirt track     |  6.2  |  18.9 |
|       apparel       | 24.68 | 35.88 |
|         pole        | 29.13 | 37.14 |
|         land        |  2.5  |  3.08 |
|      bannister      | 10.32 | 16.78 |
|      escalator      |  3.0  |  3.44 |
|       ottoman       | 28.05 | 32.52 |
|        bottle       | 16.79 |  25.0 |
|        buffet       | 28.36 | 33.13 |
|        poster       | 18.84 | 28.66 |
|        stage        |  5.89 |  9.09 |
|         van         | 28.85 | 42.17 |
|         ship        |  5.11 |  7.46 |
|       fountain      |  15.1 | 19.67 |
|    conveyer belt    | 60.52 | 88.28 |
|        canopy       | 10.22 | 11.16 |
|        washer       | 56.63 | 57.16 |
|      plaything      | 12.34 | 21.46 |
|    swimming pool    | 12.21 | 48.53 |
|        stool        | 28.21 | 38.65 |
|        barrel       | 13.64 | 47.62 |
|        basket       | 22.66 | 27.75 |
|      waterfall      | 27.87 | 29.93 |
|         tent        | 91.79 | 96.89 |
|         bag         |  8.36 | 10.54 |
|       minibike      | 64.76 | 80.39 |
|        cradle       | 72.69 |  85.8 |
|         oven        | 41.98 | 50.71 |
|         ball        | 27.15 | 39.27 |
|         food        | 27.66 | 32.66 |
|         step        |  2.55 |  4.85 |
|         tank        | 18.23 | 23.47 |
|      trade name     | 16.54 | 19.51 |
|      microwave      | 22.61 | 23.07 |
|         pot         | 32.43 | 37.16 |
|        animal       | 58.44 | 65.83 |
|       bicycle       | 51.26 | 74.92 |
|         lake        |  0.0  |  0.0  |
|      dishwasher     | 39.46 |  43.0 |
|        screen       | 43.73 | 68.81 |
|       blanket       |  7.95 |  8.7  |
|      sculpture      | 30.15 | 47.01 |
|         hood        | 37.39 | 38.44 |
|        sconce       | 36.88 | 51.84 |
|         vase        | 37.38 | 56.17 |
|    traffic light    | 33.42 | 45.79 |
|         tray        | 10.17 | 14.43 |
|        ashcan       | 33.11 |  39.2 |
|         fan         | 41.37 | 56.57 |
|         pier        | 20.99 | 25.85 |
|      crt screen     |  2.72 |  8.38 |
|        plate        | 42.79 | 47.68 |
|       monitor       |  2.75 |  4.36 |
|    bulletin board   | 31.21 | 34.64 |
|        shower       |  1.05 | 13.27 |
|       radiator      | 23.05 | 24.12 |
|        glass        | 10.86 | 15.02 |
|        clock        | 19.62 | 24.17 |
|         flag        | 40.23 | 49.66 |
+---------------------+-------+-------+
09/21 05:53:48 - mmengine - INFO - Iter(test) [2000/2000]    aAcc: 73.8600  mIoU: 34.9000  mAcc: 45.2700  data_time: 0.0017  time: 0.3016
Finished processing corruption type: snow
Processing corruption type: frost
09/21 05:53:52 - mmengine - INFO - 
------------------------------------------------------------
System environment:
    sys.platform: linux
    Python: 3.10.13 | packaged by conda-forge | (main, Dec 23 2023, 15:36:39) [GCC 12.3.0]
    CUDA available: True
    MUSA available: False
    numpy_random_seed: 1261256764
    GPU 0: Tesla V100-SXM2-32GB
    CUDA_HOME: /opt/bwhpc/common/devel/cuda/11.7
    NVCC: Cuda compilation tools, release 11.7, V11.7.99
    GCC: gcc (GCC) 8.5.0 20210514 (Red Hat 8.5.0-18)
    PyTorch: 1.13.1
    PyTorch compiling details: PyTorch built with:
  - GCC 9.3
  - C++ Version: 201402
  - Intel(R) oneAPI Math Kernel Library Version 2023.1-Product Build 20230303 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v2.6.0 (Git Hash 52b5f107dd9cf10910aaa19cb47f3abf9b349815)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - LAPACK is enabled (usually provided by MKL)
  - NNPACK is enabled
  - CPU capability usage: AVX2
  - CUDA Runtime 11.7
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_61,code=sm_61;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86;-gencode;arch=compute_37,code=compute_37
  - CuDNN 8.5
  - Magma 2.6.1
  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.7, CUDNN_VERSION=8.5.0, CXX_COMPILER=/opt/rh/devtoolset-9/root/usr/bin/c++, CXX_FLAGS= -fabi-version=11 -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -DEDGE_PROFILER_USE_KINETO -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Werror=non-virtual-dtor -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wunused-local-typedefs -Wno-unused-parameter -Wno-unused-function -Wno-unused-result -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Werror=cast-function-type -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.13.1, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, USE_ROCM=OFF, 

    TorchVision: 0.14.1
    OpenCV: 3.4.18
    MMEngine: 0.10.4

Runtime environment:
    cudnn_benchmark: True
    mp_cfg: {'mp_start_method': 'fork', 'opencv_num_threads': 0}
    dist_cfg: {'backend': 'nccl'}
    seed: 1261256764
    Distributed launcher: none
    Distributed training: False
    GPU number: 1
------------------------------------------------------------

09/21 05:53:53 - mmengine - INFO - Config:
auto_scale_lr = dict(base_batch_size=16, enable=False)
backbone_embed_multi = dict(decay_mult=0.0, lr_mult=0.1)
backbone_norm_multi = dict(decay_mult=0.0, lr_mult=0.1)
crop_size = (
    512,
    512,
)
custom_imports = dict(allow_failed_imports=False, imports='mmdet.models')
custom_keys = dict({
    'absolute_pos_embed':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone':
    dict(decay_mult=1.0, lr_mult=0.1),
    'backbone.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.patch_embed.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.0.blocks.0.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.0.blocks.1.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.0.downsample.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.1.blocks.0.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.1.blocks.1.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.1.downsample.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.0.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.1.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.2.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.3.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.4.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.5.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.downsample.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.3.blocks.0.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.3.blocks.1.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'level_embed':
    dict(decay_mult=0.0, lr_mult=1.0),
    'query_embed':
    dict(decay_mult=0.0, lr_mult=1.0),
    'query_feat':
    dict(decay_mult=0.0, lr_mult=1.0),
    'relative_position_bias_table':
    dict(decay_mult=0.0, lr_mult=0.1)
})
data_root = 'data/ade/ADEChallengeData2016'
dataset_type = 'ADE20KDataset'
default_hooks = dict(
    checkpoint=dict(
        by_epoch=False, interval=5000, save_best='mIoU',
        type='CheckpointHook'),
    logger=dict(interval=50, log_metric_by_epoch=False, type='LoggerHook'),
    param_scheduler=dict(type='ParamSchedulerHook'),
    sampler_seed=dict(type='DistSamplerSeedHook'),
    timer=dict(type='IterTimerHook'),
    visualization=dict(type='SegVisualizationHook'))
default_scope = 'mmseg'
depths = [
    2,
    2,
    6,
    2,
]
embed_multi = dict(decay_mult=0.0, lr_mult=1.0)
env_cfg = dict(
    cudnn_benchmark=True,
    dist_cfg=dict(backend='nccl'),
    mp_cfg=dict(mp_start_method='fork', opencv_num_threads=0))
img_ratios = [
    0.5,
    0.75,
    1.0,
    1.25,
    1.5,
    1.75,
]
launcher = 'none'
load_from = '../checkpoint_files/ade20k/mask2former/mask2former_swin-t_8xb2-160k_ade20k-512x512_20221203_234230-7d64e5dd.pth'
log_level = 'INFO'
log_processor = dict(by_epoch=False)
model = dict(
    backbone=dict(
        attn_drop_rate=0.0,
        depths=[
            2,
            2,
            6,
            2,
        ],
        drop_path_rate=0.3,
        drop_rate=0.0,
        embed_dims=96,
        frozen_stages=-1,
        init_cfg=dict(
            checkpoint=
            'https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/swin/swin_tiny_patch4_window7_224_20220317-1cdeb081.pth',
            type='Pretrained'),
        mlp_ratio=4,
        num_heads=[
            3,
            6,
            12,
            24,
        ],
        out_indices=(
            0,
            1,
            2,
            3,
        ),
        patch_norm=True,
        qk_scale=None,
        qkv_bias=True,
        type='SwinTransformer',
        window_size=7,
        with_cp=False),
    data_preprocessor=dict(
        bgr_to_rgb=True,
        corruption='frost',
        mean=[
            123.675,
            116.28,
            103.53,
        ],
        pad_val=0,
        seg_pad_val=255,
        size=(
            512,
            512,
        ),
        std=[
            58.395,
            57.12,
            57.375,
        ],
        test_cfg=dict(size_divisor=32),
        type='SegDataPreProcessor'),
    decode_head=dict(
        align_corners=False,
        enforce_decoder_input_project=False,
        feat_channels=256,
        in_channels=[
            96,
            192,
            384,
            768,
        ],
        loss_cls=dict(
            class_weight=[
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                0.1,
            ],
            loss_weight=2.0,
            reduction='mean',
            type='mmdet.CrossEntropyLoss',
            use_sigmoid=False),
        loss_dice=dict(
            activate=True,
            eps=1.0,
            loss_weight=5.0,
            naive_dice=True,
            reduction='mean',
            type='mmdet.DiceLoss',
            use_sigmoid=True),
        loss_mask=dict(
            loss_weight=5.0,
            reduction='mean',
            type='mmdet.CrossEntropyLoss',
            use_sigmoid=True),
        num_classes=150,
        num_queries=100,
        num_transformer_feat_level=3,
        out_channels=256,
        pixel_decoder=dict(
            act_cfg=dict(type='ReLU'),
            encoder=dict(
                init_cfg=None,
                layer_cfg=dict(
                    ffn_cfg=dict(
                        act_cfg=dict(inplace=True, type='ReLU'),
                        embed_dims=256,
                        feedforward_channels=1024,
                        ffn_drop=0.0,
                        num_fcs=2),
                    self_attn_cfg=dict(
                        batch_first=True,
                        dropout=0.0,
                        embed_dims=256,
                        im2col_step=64,
                        init_cfg=None,
                        norm_cfg=None,
                        num_heads=8,
                        num_levels=3,
                        num_points=4)),
                num_layers=6),
            init_cfg=None,
            norm_cfg=dict(num_groups=32, type='GN'),
            num_outs=3,
            positional_encoding=dict(normalize=True, num_feats=128),
            type='mmdet.MSDeformAttnPixelDecoder'),
        positional_encoding=dict(normalize=True, num_feats=128),
        strides=[
            4,
            8,
            16,
            32,
        ],
        train_cfg=dict(
            assigner=dict(
                match_costs=[
                    dict(type='mmdet.ClassificationCost', weight=2.0),
                    dict(
                        type='mmdet.CrossEntropyLossCost',
                        use_sigmoid=True,
                        weight=5.0),
                    dict(
                        eps=1.0,
                        pred_act=True,
                        type='mmdet.DiceCost',
                        weight=5.0),
                ],
                type='mmdet.HungarianAssigner'),
            importance_sample_ratio=0.75,
            num_points=12544,
            oversample_ratio=3.0,
            sampler=dict(type='mmdet.MaskPseudoSampler')),
        transformer_decoder=dict(
            init_cfg=None,
            layer_cfg=dict(
                cross_attn_cfg=dict(
                    attn_drop=0.0,
                    batch_first=True,
                    dropout_layer=None,
                    embed_dims=256,
                    num_heads=8,
                    proj_drop=0.0),
                ffn_cfg=dict(
                    act_cfg=dict(inplace=True, type='ReLU'),
                    add_identity=True,
                    dropout_layer=None,
                    embed_dims=256,
                    feedforward_channels=2048,
                    ffn_drop=0.0,
                    num_fcs=2),
                self_attn_cfg=dict(
                    attn_drop=0.0,
                    batch_first=True,
                    dropout_layer=None,
                    embed_dims=256,
                    num_heads=8,
                    proj_drop=0.0)),
            num_layers=9,
            return_intermediate=True),
        type='Mask2FormerHead'),
    test_cfg=dict(mode='whole'),
    train_cfg=dict(),
    type='EncoderDecoder')
num_classes = 150
optim_wrapper = dict(
    clip_grad=dict(max_norm=0.01, norm_type=2),
    optimizer=dict(
        betas=(
            0.9,
            0.999,
        ),
        eps=1e-08,
        lr=0.0001,
        type='AdamW',
        weight_decay=0.05),
    paramwise_cfg=dict(
        custom_keys=dict({
            'absolute_pos_embed':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone':
            dict(decay_mult=1.0, lr_mult=0.1),
            'backbone.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.patch_embed.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.0.blocks.0.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.0.blocks.1.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.0.downsample.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.1.blocks.0.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.1.blocks.1.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.1.downsample.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.0.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.1.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.2.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.3.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.4.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.5.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.downsample.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.3.blocks.0.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.3.blocks.1.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'level_embed':
            dict(decay_mult=0.0, lr_mult=1.0),
            'query_embed':
            dict(decay_mult=0.0, lr_mult=1.0),
            'query_feat':
            dict(decay_mult=0.0, lr_mult=1.0),
            'relative_position_bias_table':
            dict(decay_mult=0.0, lr_mult=0.1)
        }),
        norm_decay_mult=0.0),
    type='OptimWrapper')
optimizer = dict(
    betas=(
        0.9,
        0.999,
    ),
    eps=1e-08,
    lr=0.0001,
    type='AdamW',
    weight_decay=0.05)
param_scheduler = [
    dict(
        begin=0,
        by_epoch=False,
        end=160000,
        eta_min=0,
        power=0.9,
        type='PolyLR'),
]
pretrained = 'https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/swin/swin_tiny_patch4_window7_224_20220317-1cdeb081.pth'
resume = False
test_cfg = dict(type='TestLoop')
test_dataloader = dict(
    batch_size=1,
    dataset=dict(
        data_prefix=dict(
            img_path='images/validation',
            seg_map_path='annotations/validation'),
        data_root='data/ade/ADEChallengeData2016',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(keep_ratio=True, scale=(
                2048,
                512,
            ), type='Resize'),
            dict(reduce_zero_label=True, type='LoadAnnotations'),
            dict(type='PackSegInputs'),
        ],
        type='ADE20KDataset'),
    num_workers=4,
    persistent_workers=True,
    sampler=dict(shuffle=False, type='DefaultSampler'))
test_evaluator = dict(
    iou_metrics=[
        'mIoU',
    ], type='IoUMetric')
test_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(keep_ratio=True, scale=(
        2048,
        512,
    ), type='Resize'),
    dict(reduce_zero_label=True, type='LoadAnnotations'),
    dict(type='PackSegInputs'),
]
train_cfg = dict(
    max_iters=160000, type='IterBasedTrainLoop', val_interval=5000)
train_dataloader = dict(
    batch_size=2,
    dataset=dict(
        data_prefix=dict(
            img_path='images/training', seg_map_path='annotations/training'),
        data_root='data/ade/ADEChallengeData2016',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(reduce_zero_label=True, type='LoadAnnotations'),
            dict(
                max_size=2048,
                resize_type='ResizeShortestEdge',
                scales=[
                    256,
                    307,
                    358,
                    409,
                    460,
                    512,
                    563,
                    614,
                    665,
                    716,
                    768,
                    819,
                    870,
                    921,
                    972,
                    1024,
                ],
                type='RandomChoiceResize'),
            dict(
                cat_max_ratio=0.75, crop_size=(
                    512,
                    512,
                ), type='RandomCrop'),
            dict(prob=0.5, type='RandomFlip'),
            dict(type='PhotoMetricDistortion'),
            dict(type='PackSegInputs'),
        ],
        type='ADE20KDataset'),
    num_workers=4,
    persistent_workers=True,
    sampler=dict(shuffle=True, type='InfiniteSampler'))
train_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(reduce_zero_label=True, type='LoadAnnotations'),
    dict(
        max_size=2048,
        resize_type='ResizeShortestEdge',
        scales=[
            256,
            307,
            358,
            409,
            460,
            512,
            563,
            614,
            665,
            716,
            768,
            819,
            870,
            921,
            972,
            1024,
        ],
        type='RandomChoiceResize'),
    dict(cat_max_ratio=0.75, crop_size=(
        512,
        512,
    ), type='RandomCrop'),
    dict(prob=0.5, type='RandomFlip'),
    dict(type='PhotoMetricDistortion'),
    dict(type='PackSegInputs'),
]
tta_model = dict(type='SegTTAModel')
tta_pipeline = [
    dict(backend_args=None, type='LoadImageFromFile'),
    dict(
        transforms=[
            [
                dict(keep_ratio=True, scale_factor=0.5, type='Resize'),
                dict(keep_ratio=True, scale_factor=0.75, type='Resize'),
                dict(keep_ratio=True, scale_factor=1.0, type='Resize'),
                dict(keep_ratio=True, scale_factor=1.25, type='Resize'),
                dict(keep_ratio=True, scale_factor=1.5, type='Resize'),
                dict(keep_ratio=True, scale_factor=1.75, type='Resize'),
            ],
            [
                dict(direction='horizontal', prob=0.0, type='RandomFlip'),
                dict(direction='horizontal', prob=1.0, type='RandomFlip'),
            ],
            [
                dict(type='LoadAnnotations'),
            ],
            [
                dict(type='PackSegInputs'),
            ],
        ],
        type='TestTimeAug'),
]
val_cfg = dict(type='ValLoop')
val_dataloader = dict(
    batch_size=1,
    dataset=dict(
        data_prefix=dict(
            img_path='images/validation',
            seg_map_path='annotations/validation'),
        data_root='data/ade/ADEChallengeData2016',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(keep_ratio=True, scale=(
                2048,
                512,
            ), type='Resize'),
            dict(reduce_zero_label=True, type='LoadAnnotations'),
            dict(type='PackSegInputs'),
        ],
        type='ADE20KDataset'),
    num_workers=4,
    persistent_workers=True,
    sampler=dict(shuffle=False, type='DefaultSampler'))
val_evaluator = dict(
    iou_metrics=[
        'mIoU',
    ], type='IoUMetric')
vis_backends = [
    dict(type='LocalVisBackend'),
]
visualizer = dict(
    name='visualizer',
    type='SegLocalVisualizer',
    vis_backends=[
        dict(type='LocalVisBackend'),
    ])
work_dir = '../corruptions/work_dirs/ade20k/mask2former/mask2former_swin-t_8xb2-160k_ade20k-512x512/frost'

09/21 05:53:55 - mmengine - INFO - Distributed training is not used, all SyncBatchNorm (SyncBN) layers in the model will be automatically reverted to BatchNormXd layers if they are used.
09/21 05:53:55 - mmengine - INFO - Hooks will be executed in the following order:
before_run:
(VERY_HIGH   ) RuntimeInfoHook                    
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
before_train:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_train_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(NORMAL      ) DistSamplerSeedHook                
 -------------------- 
before_train_iter:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_train_iter:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(NORMAL      ) SegVisualizationHook               
(BELOW_NORMAL) LoggerHook                         
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
after_train_epoch:
(NORMAL      ) IterTimerHook                      
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_val:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
before_val_epoch:
(NORMAL      ) IterTimerHook                      
 -------------------- 
before_val_iter:
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_val_iter:
(NORMAL      ) IterTimerHook                      
(NORMAL      ) SegVisualizationHook               
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_val_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
after_val:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
after_train:
(VERY_HIGH   ) RuntimeInfoHook                    
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_test:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
before_test_epoch:
(NORMAL      ) IterTimerHook                      
 -------------------- 
before_test_iter:
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_test_iter:
(NORMAL      ) IterTimerHook                      
(NORMAL      ) SegVisualizationHook               
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_test_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_test:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
after_run:
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
09/21 05:53:56 - mmengine - WARNING - The prefix is not set in metric class IoUMetric.
Loads checkpoint by local backend from path: ../checkpoint_files/ade20k/mask2former/mask2former_swin-t_8xb2-160k_ade20k-512x512_20221203_234230-7d64e5dd.pth
09/21 05:53:57 - mmengine - INFO - Load checkpoint from ../checkpoint_files/ade20k/mask2former/mask2former_swin-t_8xb2-160k_ade20k-512x512_20221203_234230-7d64e5dd.pth
09/21 05:54:15 - mmengine - INFO - Iter(test) [  50/2000]    eta: 0:11:47  time: 0.2607  data_time: 0.0015  memory: 12733  
09/21 05:54:21 - mmengine - INFO - Iter(test) [ 100/2000]    eta: 0:07:43  time: 0.1671  data_time: 0.0017  memory: 12714  
09/21 05:54:25 - mmengine - INFO - Iter(test) [ 150/2000]    eta: 0:05:50  time: 0.0808  data_time: 0.0015  memory: 853  
09/21 05:54:31 - mmengine - INFO - Iter(test) [ 200/2000]    eta: 0:05:10  time: 0.0798  data_time: 0.0015  memory: 12754  
09/21 05:54:36 - mmengine - INFO - Iter(test) [ 250/2000]    eta: 0:04:38  time: 0.0747  data_time: 0.0015  memory: 12756  
09/21 05:54:41 - mmengine - INFO - Iter(test) [ 300/2000]    eta: 0:04:10  time: 0.0752  data_time: 0.0015  memory: 12721  
09/21 05:54:46 - mmengine - INFO - Iter(test) [ 350/2000]    eta: 0:03:54  time: 0.0801  data_time: 0.0014  memory: 12728  
09/21 05:54:51 - mmengine - INFO - Iter(test) [ 400/2000]    eta: 0:03:37  time: 0.0807  data_time: 0.0014  memory: 12694  
09/21 05:54:55 - mmengine - INFO - Iter(test) [ 450/2000]    eta: 0:03:19  time: 0.0702  data_time: 0.0015  memory: 894  
09/21 05:54:58 - mmengine - INFO - Iter(test) [ 500/2000]    eta: 0:03:05  time: 0.0746  data_time: 0.0014  memory: 853  
09/21 05:55:02 - mmengine - INFO - Iter(test) [ 550/2000]    eta: 0:02:53  time: 0.0809  data_time: 0.0014  memory: 961  
09/21 05:55:06 - mmengine - INFO - Iter(test) [ 600/2000]    eta: 0:02:42  time: 0.0807  data_time: 0.0015  memory: 958  
09/21 05:55:11 - mmengine - INFO - Iter(test) [ 650/2000]    eta: 0:02:34  time: 0.1689  data_time: 0.0013  memory: 12735  
09/21 05:55:16 - mmengine - INFO - Iter(test) [ 700/2000]    eta: 0:02:27  time: 0.0793  data_time: 0.0017  memory: 12724  
09/21 05:55:20 - mmengine - INFO - Iter(test) [ 750/2000]    eta: 0:02:18  time: 0.0760  data_time: 0.0014  memory: 1014  
09/21 05:55:23 - mmengine - INFO - Iter(test) [ 800/2000]    eta: 0:02:10  time: 0.0816  data_time: 0.0016  memory: 853  
09/21 05:55:28 - mmengine - INFO - Iter(test) [ 850/2000]    eta: 0:02:03  time: 0.0828  data_time: 0.0016  memory: 826  
09/21 05:55:32 - mmengine - INFO - Iter(test) [ 900/2000]    eta: 0:01:55  time: 0.0733  data_time: 0.0014  memory: 906  
09/21 05:55:35 - mmengine - INFO - Iter(test) [ 950/2000]    eta: 0:01:49  time: 0.0742  data_time: 0.0015  memory: 934  
09/21 05:55:39 - mmengine - INFO - Iter(test) [1000/2000]    eta: 0:01:42  time: 0.0719  data_time: 0.0015  memory: 934  
09/21 05:55:44 - mmengine - INFO - Iter(test) [1050/2000]    eta: 0:01:37  time: 0.0790  data_time: 0.0015  memory: 12737  
09/21 05:55:48 - mmengine - INFO - Iter(test) [1100/2000]    eta: 0:01:31  time: 0.0819  data_time: 0.0014  memory: 931  
09/21 05:55:52 - mmengine - INFO - Iter(test) [1150/2000]    eta: 0:01:25  time: 0.0769  data_time: 0.0016  memory: 904  
09/21 05:55:56 - mmengine - INFO - Iter(test) [1200/2000]    eta: 0:01:19  time: 0.0733  data_time: 0.0014  memory: 1839  
09/21 05:56:00 - mmengine - INFO - Iter(test) [1250/2000]    eta: 0:01:14  time: 0.0727  data_time: 0.0015  memory: 12716  
09/21 05:56:04 - mmengine - INFO - Iter(test) [1300/2000]    eta: 0:01:08  time: 0.0819  data_time: 0.0015  memory: 853  
09/21 05:56:08 - mmengine - INFO - Iter(test) [1350/2000]    eta: 0:01:03  time: 0.0784  data_time: 0.0014  memory: 853  
09/21 05:56:12 - mmengine - INFO - Iter(test) [1400/2000]    eta: 0:00:57  time: 0.0764  data_time: 0.0015  memory: 931  
09/21 05:56:16 - mmengine - INFO - Iter(test) [1450/2000]    eta: 0:00:52  time: 0.0739  data_time: 0.0014  memory: 934  
09/21 05:56:19 - mmengine - INFO - Iter(test) [1500/2000]    eta: 0:00:47  time: 0.0702  data_time: 0.0014  memory: 852  
09/21 05:56:23 - mmengine - INFO - Iter(test) [1550/2000]    eta: 0:00:42  time: 0.0794  data_time: 0.0014  memory: 934  
09/21 05:56:27 - mmengine - INFO - Iter(test) [1600/2000]    eta: 0:00:37  time: 0.0807  data_time: 0.0015  memory: 826  
09/21 05:56:32 - mmengine - INFO - Iter(test) [1650/2000]    eta: 0:00:32  time: 0.0691  data_time: 0.0013  memory: 12725  
09/21 05:56:35 - mmengine - INFO - Iter(test) [1700/2000]    eta: 0:00:28  time: 0.0750  data_time: 0.0016  memory: 930  
09/21 05:56:39 - mmengine - INFO - Iter(test) [1750/2000]    eta: 0:00:23  time: 0.0724  data_time: 0.0014  memory: 957  
09/21 05:56:43 - mmengine - INFO - Iter(test) [1800/2000]    eta: 0:00:18  time: 0.0782  data_time: 0.0015  memory: 853  
09/21 05:56:47 - mmengine - INFO - Iter(test) [1850/2000]    eta: 0:00:13  time: 0.0819  data_time: 0.0023  memory: 773  
09/21 05:56:51 - mmengine - INFO - Iter(test) [1900/2000]    eta: 0:00:09  time: 0.0781  data_time: 0.0014  memory: 987  
09/21 05:56:55 - mmengine - INFO - Iter(test) [1950/2000]    eta: 0:00:04  time: 0.0717  data_time: 0.0014  memory: 1224  
09/21 05:56:58 - mmengine - INFO - Iter(test) [2000/2000]    eta: 0:00:00  time: 0.0708  data_time: 0.0014  memory: 1012  
09/21 05:56:58 - mmengine - INFO - per class results:
09/21 05:56:58 - mmengine - INFO - 
+---------------------+-------+-------+
|        Class        |  IoU  |  Acc  |
+---------------------+-------+-------+
|         wall        | 68.79 |  86.6 |
|       building      | 80.84 | 91.77 |
|         sky         | 75.42 | 77.68 |
|        floor        | 75.81 | 89.76 |
|         tree        | 66.78 | 83.42 |
|       ceiling       | 69.66 | 80.53 |
|         road        | 75.04 | 81.09 |
|         bed         | 84.98 | 91.56 |
|      windowpane     | 55.65 | 71.91 |
|        grass        | 58.27 | 74.62 |
|       cabinet       | 48.11 | 57.65 |
|       sidewalk      | 57.29 | 69.82 |
|        person       | 77.88 | 86.24 |
|        earth        | 33.79 | 52.16 |
|         door        | 32.29 |  42.6 |
|        table        | 54.36 | 76.13 |
|       mountain      | 32.94 | 79.07 |
|        plant        | 47.53 | 61.33 |
|       curtain       | 59.21 | 73.26 |
|        chair        | 53.26 | 65.67 |
|         car         | 83.86 | 90.74 |
|        water        | 50.97 | 78.73 |
|       painting      | 60.08 | 84.97 |
|         sofa        |  56.4 | 76.37 |
|        shelf        | 35.25 | 50.62 |
|        house        | 36.87 | 48.69 |
|         sea         | 33.97 | 39.92 |
|        mirror       | 62.18 | 75.22 |
|         rug         |  64.5 | 69.15 |
|        field        | 17.08 | 31.77 |
|       armchair      | 38.49 | 59.82 |
|         seat        |  50.8 | 62.15 |
|        fence        | 26.64 | 38.68 |
|         desk        | 43.68 | 51.66 |
|         rock        | 41.15 | 55.87 |
|       wardrobe      | 34.85 |  41.7 |
|         lamp        | 60.44 | 71.21 |
|       bathtub       | 55.33 |  74.0 |
|       railing       | 33.03 | 45.04 |
|       cushion       | 49.94 | 62.68 |
|         base        | 17.77 | 34.06 |
|         box         | 19.29 | 25.12 |
|        column       | 39.15 | 50.98 |
|      signboard      | 36.31 | 49.42 |
|   chest of drawers  | 30.55 | 55.26 |
|       counter       | 13.18 |  23.4 |
|         sand        | 27.73 | 36.21 |
|         sink        | 63.36 | 73.22 |
|      skyscraper     | 51.37 | 58.82 |
|      fireplace      |  58.7 | 81.29 |
|     refrigerator    | 60.58 | 64.57 |
|      grandstand     | 38.92 | 76.79 |
|         path        | 19.29 | 33.57 |
|        stairs       | 31.78 | 46.66 |
|        runway       | 42.85 | 48.19 |
|         case        | 38.37 |  49.7 |
|      pool table     | 92.35 | 94.76 |
|        pillow       | 52.27 | 62.11 |
|     screen door     | 40.86 | 75.86 |
|       stairway      | 27.58 | 39.31 |
|        river        |  7.16 |  11.3 |
|        bridge       | 67.07 | 81.05 |
|       bookcase      | 39.38 | 50.38 |
|        blind        | 21.41 | 23.53 |
|     coffee table    | 60.05 | 77.28 |
|        toilet       | 68.54 | 71.94 |
|        flower       | 41.59 | 57.55 |
|         book        | 48.59 | 64.88 |
|         hill        | 15.57 | 22.88 |
|        bench        | 43.34 | 51.56 |
|      countertop     | 53.28 | 73.81 |
|        stove        | 69.76 | 74.76 |
|         palm        | 51.32 | 71.26 |
|    kitchen island   | 40.81 | 74.16 |
|       computer      | 52.96 | 55.93 |
|     swivel chair    | 34.69 | 40.07 |
|         boat        | 42.92 | 45.56 |
|         bar         | 47.21 | 62.51 |
|    arcade machine   | 19.39 | 20.64 |
|        hovel        | 35.52 | 53.15 |
|         bus         | 88.71 | 92.59 |
|        towel        | 39.74 | 56.45 |
|        light        | 51.16 | 62.71 |
|        truck        | 23.52 |  36.9 |
|        tower        | 27.37 | 35.67 |
|      chandelier     |  60.2 | 72.95 |
|        awning       | 24.32 | 28.65 |
|     streetlight     | 31.94 | 41.89 |
|        booth        | 67.47 | 75.34 |
| television receiver | 35.77 |  40.2 |
|       airplane      | 52.73 | 57.96 |
|      dirt track     |  9.61 |  24.9 |
|       apparel       | 24.83 | 38.91 |
|         pole        |  25.6 | 38.85 |
|         land        |  0.12 |  0.24 |
|      bannister      |  8.61 |  17.6 |
|      escalator      |  3.3  |  3.34 |
|       ottoman       | 50.72 | 66.73 |
|        bottle       | 29.64 | 42.06 |
|        buffet       | 29.06 | 30.41 |
|        poster       |  31.3 | 45.57 |
|        stage        | 11.51 |  17.0 |
|         van         | 36.34 | 46.25 |
|         ship        |  5.45 |  7.76 |
|       fountain      | 19.84 | 25.54 |
|    conveyer belt    | 66.11 | 91.09 |
|        canopy       | 20.92 | 43.94 |
|        washer       | 59.26 | 64.82 |
|      plaything      | 16.36 | 34.74 |
|    swimming pool    | 42.97 | 70.29 |
|        stool        | 44.69 | 55.87 |
|        barrel       | 13.93 | 49.44 |
|        basket       | 36.03 | 48.72 |
|      waterfall      | 49.12 | 61.52 |
|         tent        | 91.71 | 97.69 |
|         bag         | 10.23 | 13.21 |
|       minibike      | 71.88 | 83.31 |
|        cradle       | 77.35 | 92.24 |
|         oven        | 21.35 | 53.35 |
|         ball        | 50.71 | 61.76 |
|         food        | 48.55 | 57.82 |
|         step        |  6.76 | 10.21 |
|         tank        | 21.01 | 24.32 |
|      trade name     | 26.27 | 30.17 |
|      microwave      | 28.32 | 29.15 |
|         pot         | 37.42 |  44.4 |
|        animal       | 63.92 | 74.24 |
|       bicycle       | 54.45 | 73.11 |
|         lake        |  0.0  |  0.0  |
|      dishwasher     | 42.09 | 45.96 |
|        screen       | 57.25 | 68.95 |
|       blanket       |  16.8 | 18.43 |
|      sculpture      | 22.09 | 43.57 |
|         hood        | 48.69 | 56.06 |
|        sconce       | 40.98 | 54.02 |
|         vase        | 37.49 | 61.89 |
|    traffic light    | 30.97 | 40.19 |
|         tray        | 10.32 | 20.73 |
|        ashcan       | 34.96 | 43.68 |
|         fan         | 56.14 | 68.46 |
|         pier        | 30.72 | 40.99 |
|      crt screen     |  3.74 | 11.08 |
|        plate        | 51.19 | 65.63 |
|       monitor       |  1.35 |  1.68 |
|    bulletin board   | 38.32 | 43.64 |
|        shower       |  1.68 | 15.24 |
|       radiator      | 31.22 | 34.68 |
|        glass        | 17.82 | 19.94 |
|        clock        | 24.13 | 31.62 |
|         flag        | 32.67 | 36.57 |
+---------------------+-------+-------+
09/21 05:56:58 - mmengine - INFO - Iter(test) [2000/2000]    aAcc: 76.6200  mIoU: 41.2300  mAcc: 53.0700  data_time: 0.0016  time: 0.0908
Finished processing corruption type: frost
Processing corruption type: fog
09/21 05:57:03 - mmengine - INFO - 
------------------------------------------------------------
System environment:
    sys.platform: linux
    Python: 3.10.13 | packaged by conda-forge | (main, Dec 23 2023, 15:36:39) [GCC 12.3.0]
    CUDA available: True
    MUSA available: False
    numpy_random_seed: 1124718897
    GPU 0: Tesla V100-SXM2-32GB
    CUDA_HOME: /opt/bwhpc/common/devel/cuda/11.7
    NVCC: Cuda compilation tools, release 11.7, V11.7.99
    GCC: gcc (GCC) 8.5.0 20210514 (Red Hat 8.5.0-18)
    PyTorch: 1.13.1
    PyTorch compiling details: PyTorch built with:
  - GCC 9.3
  - C++ Version: 201402
  - Intel(R) oneAPI Math Kernel Library Version 2023.1-Product Build 20230303 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v2.6.0 (Git Hash 52b5f107dd9cf10910aaa19cb47f3abf9b349815)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - LAPACK is enabled (usually provided by MKL)
  - NNPACK is enabled
  - CPU capability usage: AVX2
  - CUDA Runtime 11.7
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_61,code=sm_61;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86;-gencode;arch=compute_37,code=compute_37
  - CuDNN 8.5
  - Magma 2.6.1
  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.7, CUDNN_VERSION=8.5.0, CXX_COMPILER=/opt/rh/devtoolset-9/root/usr/bin/c++, CXX_FLAGS= -fabi-version=11 -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -DEDGE_PROFILER_USE_KINETO -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Werror=non-virtual-dtor -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wunused-local-typedefs -Wno-unused-parameter -Wno-unused-function -Wno-unused-result -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Werror=cast-function-type -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.13.1, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, USE_ROCM=OFF, 

    TorchVision: 0.14.1
    OpenCV: 3.4.18
    MMEngine: 0.10.4

Runtime environment:
    cudnn_benchmark: True
    mp_cfg: {'mp_start_method': 'fork', 'opencv_num_threads': 0}
    dist_cfg: {'backend': 'nccl'}
    seed: 1124718897
    Distributed launcher: none
    Distributed training: False
    GPU number: 1
------------------------------------------------------------

09/21 05:57:03 - mmengine - INFO - Config:
auto_scale_lr = dict(base_batch_size=16, enable=False)
backbone_embed_multi = dict(decay_mult=0.0, lr_mult=0.1)
backbone_norm_multi = dict(decay_mult=0.0, lr_mult=0.1)
crop_size = (
    512,
    512,
)
custom_imports = dict(allow_failed_imports=False, imports='mmdet.models')
custom_keys = dict({
    'absolute_pos_embed':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone':
    dict(decay_mult=1.0, lr_mult=0.1),
    'backbone.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.patch_embed.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.0.blocks.0.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.0.blocks.1.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.0.downsample.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.1.blocks.0.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.1.blocks.1.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.1.downsample.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.0.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.1.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.2.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.3.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.4.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.5.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.downsample.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.3.blocks.0.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.3.blocks.1.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'level_embed':
    dict(decay_mult=0.0, lr_mult=1.0),
    'query_embed':
    dict(decay_mult=0.0, lr_mult=1.0),
    'query_feat':
    dict(decay_mult=0.0, lr_mult=1.0),
    'relative_position_bias_table':
    dict(decay_mult=0.0, lr_mult=0.1)
})
data_root = 'data/ade/ADEChallengeData2016'
dataset_type = 'ADE20KDataset'
default_hooks = dict(
    checkpoint=dict(
        by_epoch=False, interval=5000, save_best='mIoU',
        type='CheckpointHook'),
    logger=dict(interval=50, log_metric_by_epoch=False, type='LoggerHook'),
    param_scheduler=dict(type='ParamSchedulerHook'),
    sampler_seed=dict(type='DistSamplerSeedHook'),
    timer=dict(type='IterTimerHook'),
    visualization=dict(type='SegVisualizationHook'))
default_scope = 'mmseg'
depths = [
    2,
    2,
    6,
    2,
]
embed_multi = dict(decay_mult=0.0, lr_mult=1.0)
env_cfg = dict(
    cudnn_benchmark=True,
    dist_cfg=dict(backend='nccl'),
    mp_cfg=dict(mp_start_method='fork', opencv_num_threads=0))
img_ratios = [
    0.5,
    0.75,
    1.0,
    1.25,
    1.5,
    1.75,
]
launcher = 'none'
load_from = '../checkpoint_files/ade20k/mask2former/mask2former_swin-t_8xb2-160k_ade20k-512x512_20221203_234230-7d64e5dd.pth'
log_level = 'INFO'
log_processor = dict(by_epoch=False)
model = dict(
    backbone=dict(
        attn_drop_rate=0.0,
        depths=[
            2,
            2,
            6,
            2,
        ],
        drop_path_rate=0.3,
        drop_rate=0.0,
        embed_dims=96,
        frozen_stages=-1,
        init_cfg=dict(
            checkpoint=
            'https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/swin/swin_tiny_patch4_window7_224_20220317-1cdeb081.pth',
            type='Pretrained'),
        mlp_ratio=4,
        num_heads=[
            3,
            6,
            12,
            24,
        ],
        out_indices=(
            0,
            1,
            2,
            3,
        ),
        patch_norm=True,
        qk_scale=None,
        qkv_bias=True,
        type='SwinTransformer',
        window_size=7,
        with_cp=False),
    data_preprocessor=dict(
        bgr_to_rgb=True,
        corruption='fog',
        mean=[
            123.675,
            116.28,
            103.53,
        ],
        pad_val=0,
        seg_pad_val=255,
        size=(
            512,
            512,
        ),
        std=[
            58.395,
            57.12,
            57.375,
        ],
        test_cfg=dict(size_divisor=32),
        type='SegDataPreProcessor'),
    decode_head=dict(
        align_corners=False,
        enforce_decoder_input_project=False,
        feat_channels=256,
        in_channels=[
            96,
            192,
            384,
            768,
        ],
        loss_cls=dict(
            class_weight=[
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                0.1,
            ],
            loss_weight=2.0,
            reduction='mean',
            type='mmdet.CrossEntropyLoss',
            use_sigmoid=False),
        loss_dice=dict(
            activate=True,
            eps=1.0,
            loss_weight=5.0,
            naive_dice=True,
            reduction='mean',
            type='mmdet.DiceLoss',
            use_sigmoid=True),
        loss_mask=dict(
            loss_weight=5.0,
            reduction='mean',
            type='mmdet.CrossEntropyLoss',
            use_sigmoid=True),
        num_classes=150,
        num_queries=100,
        num_transformer_feat_level=3,
        out_channels=256,
        pixel_decoder=dict(
            act_cfg=dict(type='ReLU'),
            encoder=dict(
                init_cfg=None,
                layer_cfg=dict(
                    ffn_cfg=dict(
                        act_cfg=dict(inplace=True, type='ReLU'),
                        embed_dims=256,
                        feedforward_channels=1024,
                        ffn_drop=0.0,
                        num_fcs=2),
                    self_attn_cfg=dict(
                        batch_first=True,
                        dropout=0.0,
                        embed_dims=256,
                        im2col_step=64,
                        init_cfg=None,
                        norm_cfg=None,
                        num_heads=8,
                        num_levels=3,
                        num_points=4)),
                num_layers=6),
            init_cfg=None,
            norm_cfg=dict(num_groups=32, type='GN'),
            num_outs=3,
            positional_encoding=dict(normalize=True, num_feats=128),
            type='mmdet.MSDeformAttnPixelDecoder'),
        positional_encoding=dict(normalize=True, num_feats=128),
        strides=[
            4,
            8,
            16,
            32,
        ],
        train_cfg=dict(
            assigner=dict(
                match_costs=[
                    dict(type='mmdet.ClassificationCost', weight=2.0),
                    dict(
                        type='mmdet.CrossEntropyLossCost',
                        use_sigmoid=True,
                        weight=5.0),
                    dict(
                        eps=1.0,
                        pred_act=True,
                        type='mmdet.DiceCost',
                        weight=5.0),
                ],
                type='mmdet.HungarianAssigner'),
            importance_sample_ratio=0.75,
            num_points=12544,
            oversample_ratio=3.0,
            sampler=dict(type='mmdet.MaskPseudoSampler')),
        transformer_decoder=dict(
            init_cfg=None,
            layer_cfg=dict(
                cross_attn_cfg=dict(
                    attn_drop=0.0,
                    batch_first=True,
                    dropout_layer=None,
                    embed_dims=256,
                    num_heads=8,
                    proj_drop=0.0),
                ffn_cfg=dict(
                    act_cfg=dict(inplace=True, type='ReLU'),
                    add_identity=True,
                    dropout_layer=None,
                    embed_dims=256,
                    feedforward_channels=2048,
                    ffn_drop=0.0,
                    num_fcs=2),
                self_attn_cfg=dict(
                    attn_drop=0.0,
                    batch_first=True,
                    dropout_layer=None,
                    embed_dims=256,
                    num_heads=8,
                    proj_drop=0.0)),
            num_layers=9,
            return_intermediate=True),
        type='Mask2FormerHead'),
    test_cfg=dict(mode='whole'),
    train_cfg=dict(),
    type='EncoderDecoder')
num_classes = 150
optim_wrapper = dict(
    clip_grad=dict(max_norm=0.01, norm_type=2),
    optimizer=dict(
        betas=(
            0.9,
            0.999,
        ),
        eps=1e-08,
        lr=0.0001,
        type='AdamW',
        weight_decay=0.05),
    paramwise_cfg=dict(
        custom_keys=dict({
            'absolute_pos_embed':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone':
            dict(decay_mult=1.0, lr_mult=0.1),
            'backbone.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.patch_embed.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.0.blocks.0.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.0.blocks.1.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.0.downsample.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.1.blocks.0.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.1.blocks.1.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.1.downsample.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.0.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.1.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.2.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.3.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.4.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.5.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.downsample.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.3.blocks.0.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.3.blocks.1.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'level_embed':
            dict(decay_mult=0.0, lr_mult=1.0),
            'query_embed':
            dict(decay_mult=0.0, lr_mult=1.0),
            'query_feat':
            dict(decay_mult=0.0, lr_mult=1.0),
            'relative_position_bias_table':
            dict(decay_mult=0.0, lr_mult=0.1)
        }),
        norm_decay_mult=0.0),
    type='OptimWrapper')
optimizer = dict(
    betas=(
        0.9,
        0.999,
    ),
    eps=1e-08,
    lr=0.0001,
    type='AdamW',
    weight_decay=0.05)
param_scheduler = [
    dict(
        begin=0,
        by_epoch=False,
        end=160000,
        eta_min=0,
        power=0.9,
        type='PolyLR'),
]
pretrained = 'https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/swin/swin_tiny_patch4_window7_224_20220317-1cdeb081.pth'
resume = False
test_cfg = dict(type='TestLoop')
test_dataloader = dict(
    batch_size=1,
    dataset=dict(
        data_prefix=dict(
            img_path='images/validation',
            seg_map_path='annotations/validation'),
        data_root='data/ade/ADEChallengeData2016',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(keep_ratio=True, scale=(
                2048,
                512,
            ), type='Resize'),
            dict(reduce_zero_label=True, type='LoadAnnotations'),
            dict(type='PackSegInputs'),
        ],
        type='ADE20KDataset'),
    num_workers=4,
    persistent_workers=True,
    sampler=dict(shuffle=False, type='DefaultSampler'))
test_evaluator = dict(
    iou_metrics=[
        'mIoU',
    ], type='IoUMetric')
test_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(keep_ratio=True, scale=(
        2048,
        512,
    ), type='Resize'),
    dict(reduce_zero_label=True, type='LoadAnnotations'),
    dict(type='PackSegInputs'),
]
train_cfg = dict(
    max_iters=160000, type='IterBasedTrainLoop', val_interval=5000)
train_dataloader = dict(
    batch_size=2,
    dataset=dict(
        data_prefix=dict(
            img_path='images/training', seg_map_path='annotations/training'),
        data_root='data/ade/ADEChallengeData2016',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(reduce_zero_label=True, type='LoadAnnotations'),
            dict(
                max_size=2048,
                resize_type='ResizeShortestEdge',
                scales=[
                    256,
                    307,
                    358,
                    409,
                    460,
                    512,
                    563,
                    614,
                    665,
                    716,
                    768,
                    819,
                    870,
                    921,
                    972,
                    1024,
                ],
                type='RandomChoiceResize'),
            dict(
                cat_max_ratio=0.75, crop_size=(
                    512,
                    512,
                ), type='RandomCrop'),
            dict(prob=0.5, type='RandomFlip'),
            dict(type='PhotoMetricDistortion'),
            dict(type='PackSegInputs'),
        ],
        type='ADE20KDataset'),
    num_workers=4,
    persistent_workers=True,
    sampler=dict(shuffle=True, type='InfiniteSampler'))
train_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(reduce_zero_label=True, type='LoadAnnotations'),
    dict(
        max_size=2048,
        resize_type='ResizeShortestEdge',
        scales=[
            256,
            307,
            358,
            409,
            460,
            512,
            563,
            614,
            665,
            716,
            768,
            819,
            870,
            921,
            972,
            1024,
        ],
        type='RandomChoiceResize'),
    dict(cat_max_ratio=0.75, crop_size=(
        512,
        512,
    ), type='RandomCrop'),
    dict(prob=0.5, type='RandomFlip'),
    dict(type='PhotoMetricDistortion'),
    dict(type='PackSegInputs'),
]
tta_model = dict(type='SegTTAModel')
tta_pipeline = [
    dict(backend_args=None, type='LoadImageFromFile'),
    dict(
        transforms=[
            [
                dict(keep_ratio=True, scale_factor=0.5, type='Resize'),
                dict(keep_ratio=True, scale_factor=0.75, type='Resize'),
                dict(keep_ratio=True, scale_factor=1.0, type='Resize'),
                dict(keep_ratio=True, scale_factor=1.25, type='Resize'),
                dict(keep_ratio=True, scale_factor=1.5, type='Resize'),
                dict(keep_ratio=True, scale_factor=1.75, type='Resize'),
            ],
            [
                dict(direction='horizontal', prob=0.0, type='RandomFlip'),
                dict(direction='horizontal', prob=1.0, type='RandomFlip'),
            ],
            [
                dict(type='LoadAnnotations'),
            ],
            [
                dict(type='PackSegInputs'),
            ],
        ],
        type='TestTimeAug'),
]
val_cfg = dict(type='ValLoop')
val_dataloader = dict(
    batch_size=1,
    dataset=dict(
        data_prefix=dict(
            img_path='images/validation',
            seg_map_path='annotations/validation'),
        data_root='data/ade/ADEChallengeData2016',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(keep_ratio=True, scale=(
                2048,
                512,
            ), type='Resize'),
            dict(reduce_zero_label=True, type='LoadAnnotations'),
            dict(type='PackSegInputs'),
        ],
        type='ADE20KDataset'),
    num_workers=4,
    persistent_workers=True,
    sampler=dict(shuffle=False, type='DefaultSampler'))
val_evaluator = dict(
    iou_metrics=[
        'mIoU',
    ], type='IoUMetric')
vis_backends = [
    dict(type='LocalVisBackend'),
]
visualizer = dict(
    name='visualizer',
    type='SegLocalVisualizer',
    vis_backends=[
        dict(type='LocalVisBackend'),
    ])
work_dir = '../corruptions/work_dirs/ade20k/mask2former/mask2former_swin-t_8xb2-160k_ade20k-512x512/fog'

09/21 05:57:06 - mmengine - INFO - Distributed training is not used, all SyncBatchNorm (SyncBN) layers in the model will be automatically reverted to BatchNormXd layers if they are used.
09/21 05:57:06 - mmengine - INFO - Hooks will be executed in the following order:
before_run:
(VERY_HIGH   ) RuntimeInfoHook                    
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
before_train:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_train_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(NORMAL      ) DistSamplerSeedHook                
 -------------------- 
before_train_iter:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_train_iter:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(NORMAL      ) SegVisualizationHook               
(BELOW_NORMAL) LoggerHook                         
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
after_train_epoch:
(NORMAL      ) IterTimerHook                      
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_val:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
before_val_epoch:
(NORMAL      ) IterTimerHook                      
 -------------------- 
before_val_iter:
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_val_iter:
(NORMAL      ) IterTimerHook                      
(NORMAL      ) SegVisualizationHook               
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_val_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
after_val:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
after_train:
(VERY_HIGH   ) RuntimeInfoHook                    
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_test:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
before_test_epoch:
(NORMAL      ) IterTimerHook                      
 -------------------- 
before_test_iter:
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_test_iter:
(NORMAL      ) IterTimerHook                      
(NORMAL      ) SegVisualizationHook               
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_test_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_test:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
after_run:
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
09/21 05:57:06 - mmengine - WARNING - The prefix is not set in metric class IoUMetric.
Loads checkpoint by local backend from path: ../checkpoint_files/ade20k/mask2former/mask2former_swin-t_8xb2-160k_ade20k-512x512_20221203_234230-7d64e5dd.pth
09/21 05:57:07 - mmengine - INFO - Load checkpoint from ../checkpoint_files/ade20k/mask2former/mask2former_swin-t_8xb2-160k_ade20k-512x512_20221203_234230-7d64e5dd.pth
09/21 05:57:31 - mmengine - INFO - Iter(test) [  50/2000]    eta: 0:15:13  time: 0.3783  data_time: 0.0016  memory: 12733  
09/21 05:57:43 - mmengine - INFO - Iter(test) [ 100/2000]    eta: 0:11:17  time: 0.2786  data_time: 0.0016  memory: 12714  
09/21 05:57:53 - mmengine - INFO - Iter(test) [ 150/2000]    eta: 0:09:25  time: 0.2037  data_time: 0.0016  memory: 853  
09/21 05:58:05 - mmengine - INFO - Iter(test) [ 200/2000]    eta: 0:08:41  time: 0.2041  data_time: 0.0015  memory: 12754  
09/21 05:58:17 - mmengine - INFO - Iter(test) [ 250/2000]    eta: 0:08:06  time: 0.1974  data_time: 0.0015  memory: 12756  
09/21 05:58:28 - mmengine - INFO - Iter(test) [ 300/2000]    eta: 0:07:35  time: 0.2061  data_time: 0.0022  memory: 12721  
09/21 05:58:39 - mmengine - INFO - Iter(test) [ 350/2000]    eta: 0:07:13  time: 0.1952  data_time: 0.0015  memory: 12728  
09/21 05:58:50 - mmengine - INFO - Iter(test) [ 400/2000]    eta: 0:06:50  time: 0.2032  data_time: 0.0014  memory: 12694  
09/21 05:59:00 - mmengine - INFO - Iter(test) [ 450/2000]    eta: 0:06:27  time: 0.1941  data_time: 0.0014  memory: 894  
09/21 05:59:10 - mmengine - INFO - Iter(test) [ 500/2000]    eta: 0:06:07  time: 0.2027  data_time: 0.0015  memory: 853  
09/21 05:59:20 - mmengine - INFO - Iter(test) [ 550/2000]    eta: 0:05:49  time: 0.1986  data_time: 0.0016  memory: 961  
09/21 05:59:30 - mmengine - INFO - Iter(test) [ 600/2000]    eta: 0:05:33  time: 0.2095  data_time: 0.0015  memory: 958  
09/21 05:59:41 - mmengine - INFO - Iter(test) [ 650/2000]    eta: 0:05:19  time: 0.2887  data_time: 0.0014  memory: 12735  
09/21 05:59:52 - mmengine - INFO - Iter(test) [ 700/2000]    eta: 0:05:05  time: 0.1991  data_time: 0.0015  memory: 12724  
09/21 06:00:02 - mmengine - INFO - Iter(test) [ 750/2000]    eta: 0:04:50  time: 0.1967  data_time: 0.0014  memory: 1014  
09/21 06:00:12 - mmengine - INFO - Iter(test) [ 800/2000]    eta: 0:04:36  time: 0.2010  data_time: 0.0016  memory: 853  
09/21 06:00:22 - mmengine - INFO - Iter(test) [ 850/2000]    eta: 0:04:23  time: 0.2030  data_time: 0.0016  memory: 826  
09/21 06:00:32 - mmengine - INFO - Iter(test) [ 900/2000]    eta: 0:04:10  time: 0.1985  data_time: 0.0015  memory: 906  
09/21 06:00:42 - mmengine - INFO - Iter(test) [ 950/2000]    eta: 0:03:57  time: 0.2021  data_time: 0.0015  memory: 934  
09/21 06:00:52 - mmengine - INFO - Iter(test) [1000/2000]    eta: 0:03:44  time: 0.1984  data_time: 0.0015  memory: 934  
09/21 06:01:03 - mmengine - INFO - Iter(test) [1050/2000]    eta: 0:03:33  time: 0.2098  data_time: 0.0015  memory: 12737  
09/21 06:01:13 - mmengine - INFO - Iter(test) [1100/2000]    eta: 0:03:21  time: 0.1984  data_time: 0.0016  memory: 931  
09/21 06:01:23 - mmengine - INFO - Iter(test) [1150/2000]    eta: 0:03:09  time: 0.2043  data_time: 0.0014  memory: 904  
09/21 06:01:34 - mmengine - INFO - Iter(test) [1200/2000]    eta: 0:02:57  time: 0.1985  data_time: 0.0016  memory: 1839  
09/21 06:01:44 - mmengine - INFO - Iter(test) [1250/2000]    eta: 0:02:46  time: 0.2022  data_time: 0.0014  memory: 12716  
09/21 06:01:54 - mmengine - INFO - Iter(test) [1300/2000]    eta: 0:02:34  time: 0.1998  data_time: 0.0015  memory: 853  
09/21 06:02:04 - mmengine - INFO - Iter(test) [1350/2000]    eta: 0:02:23  time: 0.2013  data_time: 0.0015  memory: 853  
09/21 06:02:15 - mmengine - INFO - Iter(test) [1400/2000]    eta: 0:02:11  time: 0.2003  data_time: 0.0015  memory: 931  
09/21 06:02:25 - mmengine - INFO - Iter(test) [1450/2000]    eta: 0:02:00  time: 0.2055  data_time: 0.0014  memory: 934  
09/21 06:02:35 - mmengine - INFO - Iter(test) [1500/2000]    eta: 0:01:49  time: 0.1961  data_time: 0.0014  memory: 852  
09/21 06:02:45 - mmengine - INFO - Iter(test) [1550/2000]    eta: 0:01:37  time: 0.2049  data_time: 0.0014  memory: 934  
09/21 06:02:55 - mmengine - INFO - Iter(test) [1600/2000]    eta: 0:01:26  time: 0.1980  data_time: 0.0015  memory: 826  
09/21 06:03:06 - mmengine - INFO - Iter(test) [1650/2000]    eta: 0:01:15  time: 0.1994  data_time: 0.0013  memory: 12725  
09/21 06:03:16 - mmengine - INFO - Iter(test) [1700/2000]    eta: 0:01:04  time: 0.1991  data_time: 0.0015  memory: 930  
09/21 06:03:26 - mmengine - INFO - Iter(test) [1750/2000]    eta: 0:00:54  time: 0.2042  data_time: 0.0014  memory: 957  
09/21 06:03:36 - mmengine - INFO - Iter(test) [1800/2000]    eta: 0:00:43  time: 0.2016  data_time: 0.0016  memory: 853  
09/21 06:03:47 - mmengine - INFO - Iter(test) [1850/2000]    eta: 0:00:32  time: 0.2156  data_time: 0.0016  memory: 773  
09/21 06:03:57 - mmengine - INFO - Iter(test) [1900/2000]    eta: 0:00:21  time: 0.2003  data_time: 0.0015  memory: 987  
09/21 06:04:07 - mmengine - INFO - Iter(test) [1950/2000]    eta: 0:00:10  time: 0.2093  data_time: 0.0014  memory: 1224  
09/21 06:04:17 - mmengine - INFO - Iter(test) [2000/2000]    eta: 0:00:00  time: 0.1960  data_time: 0.0013  memory: 1012  
09/21 06:04:18 - mmengine - INFO - per class results:
09/21 06:04:18 - mmengine - INFO - 
+---------------------+-------+-------+
|        Class        |  IoU  |  Acc  |
+---------------------+-------+-------+
|         wall        |  77.1 | 87.77 |
|       building      | 82.55 | 92.45 |
|         sky         | 94.23 | 96.93 |
|        floor        |  80.9 | 90.29 |
|         tree        | 73.02 | 85.59 |
|       ceiling       | 84.07 | 91.42 |
|         road        | 83.29 | 88.85 |
|         bed         |  89.0 | 94.99 |
|      windowpane     |  60.9 | 78.38 |
|        grass        | 63.89 | 77.99 |
|       cabinet       | 59.71 | 73.97 |
|       sidewalk      | 67.08 | 83.21 |
|        person       | 82.31 |  90.1 |
|        earth        | 35.34 | 48.57 |
|         door        | 45.13 | 60.13 |
|        table        | 61.15 | 77.61 |
|       mountain      | 62.22 | 80.94 |
|        plant        | 52.39 | 63.24 |
|       curtain       |  76.2 | 85.89 |
|        chair        | 58.78 |  73.8 |
|         car         | 85.38 | 92.07 |
|        water        | 51.23 | 70.98 |
|       painting      | 66.79 |  88.4 |
|         sofa        | 65.82 | 81.49 |
|        shelf        | 41.25 | 58.64 |
|        house        | 41.83 | 51.51 |
|         sea         | 48.34 | 66.11 |
|        mirror       | 68.58 |  77.1 |
|         rug         | 65.26 | 77.58 |
|        field        |  26.3 | 42.28 |
|       armchair      | 45.79 | 66.07 |
|         seat        | 61.98 | 82.19 |
|        fence        | 41.69 | 58.46 |
|         desk        | 48.08 | 69.11 |
|         rock        | 47.58 | 69.15 |
|       wardrobe      | 56.67 | 72.54 |
|         lamp        | 66.11 | 79.07 |
|       bathtub       | 73.63 |  83.8 |
|       railing       | 38.65 | 56.12 |
|       cushion       | 54.75 | 65.73 |
|         base        |  30.6 |  47.2 |
|         box         | 23.87 | 35.12 |
|        column       |  45.3 | 57.47 |
|      signboard      | 37.64 | 56.85 |
|   chest of drawers  |  45.7 | 61.98 |
|       counter       | 33.38 | 48.13 |
|         sand        | 30.32 | 57.12 |
|         sink        | 70.74 |  82.1 |
|      skyscraper     |  47.7 | 55.15 |
|      fireplace      | 69.65 | 87.37 |
|     refrigerator    | 81.58 | 88.58 |
|      grandstand     | 49.45 | 73.25 |
|         path        | 19.91 | 28.65 |
|        stairs       | 37.28 | 43.64 |
|        runway       | 66.39 | 92.05 |
|         case        | 41.74 | 49.49 |
|      pool table     | 88.27 | 94.44 |
|        pillow       |  59.8 | 74.96 |
|     screen door     | 51.13 | 64.44 |
|       stairway      | 33.62 | 46.49 |
|        river        | 10.16 | 16.68 |
|        bridge       | 68.74 | 83.04 |
|       bookcase      | 34.66 | 45.68 |
|        blind        | 50.45 | 61.81 |
|     coffee table    | 63.24 | 82.44 |
|        toilet       | 84.09 | 90.61 |
|        flower       | 39.61 | 54.46 |
|         book        | 49.89 | 71.04 |
|         hill        |  8.66 | 12.76 |
|        bench        | 43.78 |  57.7 |
|      countertop     | 62.45 | 82.27 |
|        stove        | 78.01 | 84.32 |
|         palm        | 52.02 | 73.64 |
|    kitchen island   | 38.67 | 66.52 |
|       computer      | 58.89 | 67.15 |
|     swivel chair    | 45.99 | 60.82 |
|         boat        | 35.25 | 50.71 |
|         bar         | 58.98 | 63.46 |
|    arcade machine   | 25.97 | 28.07 |
|        hovel        | 32.37 | 51.28 |
|         bus         | 86.79 | 95.63 |
|        towel        | 64.49 | 76.69 |
|        light        | 62.81 | 75.41 |
|        truck        |  34.9 | 54.16 |
|        tower        | 42.61 | 53.03 |
|      chandelier     | 68.49 | 80.11 |
|        awning       | 30.76 | 35.14 |
|     streetlight     |  30.8 |  44.3 |
|        booth        | 51.42 | 68.45 |
| television receiver | 56.04 | 72.38 |
|       airplane      | 55.69 | 65.91 |
|      dirt track     |  8.82 | 22.19 |
|       apparel       | 29.11 | 46.46 |
|         pole        | 28.96 | 43.76 |
|         land        |  4.43 |  6.39 |
|      bannister      | 16.78 | 26.77 |
|      escalator      | 21.93 | 23.15 |
|       ottoman       | 48.38 | 65.93 |
|        bottle       | 33.73 | 55.11 |
|        buffet       | 30.34 | 39.39 |
|        poster       | 25.13 |  41.3 |
|        stage        |  9.01 |  12.3 |
|         van         | 54.65 | 68.26 |
|         ship        |  7.22 | 10.15 |
|       fountain      | 27.42 | 28.31 |
|    conveyer belt    |  76.8 | 87.86 |
|        canopy       |  24.6 | 46.25 |
|        washer       | 63.58 | 72.67 |
|      plaything      | 22.26 | 41.42 |
|    swimming pool    | 37.93 | 60.11 |
|        stool        | 42.17 | 60.05 |
|        barrel       | 60.59 | 74.32 |
|        basket       | 29.57 | 39.26 |
|      waterfall      | 80.99 | 89.71 |
|         tent        | 76.75 | 98.23 |
|         bag         | 14.69 | 19.31 |
|       minibike      | 71.38 | 84.92 |
|        cradle       | 71.99 | 81.68 |
|         oven        | 21.12 |  56.9 |
|         ball        | 47.02 | 55.31 |
|         food        | 49.57 | 59.15 |
|         step        |  6.98 | 10.28 |
|         tank        | 24.88 | 26.01 |
|      trade name     | 22.97 | 27.84 |
|      microwave      | 39.92 | 43.63 |
|         pot         | 45.08 | 52.62 |
|        animal       | 62.11 | 64.56 |
|       bicycle       | 58.36 | 81.46 |
|         lake        | 69.95 | 73.34 |
|      dishwasher     | 64.01 | 84.19 |
|        screen       | 62.15 | 83.86 |
|       blanket       |  18.8 | 23.46 |
|      sculpture      | 38.99 | 65.64 |
|         hood        | 68.27 |  72.0 |
|        sconce       | 51.93 | 62.69 |
|         vase        | 42.55 | 64.99 |
|    traffic light    | 40.35 | 55.37 |
|         tray        | 13.03 |  23.6 |
|        ashcan       | 43.34 | 59.62 |
|         fan         | 61.88 | 77.18 |
|         pier        | 53.45 | 85.15 |
|      crt screen     |  0.11 |  0.3  |
|        plate        | 55.08 | 70.28 |
|       monitor       |  5.96 |  7.62 |
|    bulletin board   | 45.59 | 61.13 |
|        shower       |  2.22 | 18.29 |
|       radiator      | 62.28 | 75.14 |
|        glass        | 18.41 | 22.78 |
|        clock        | 30.93 | 37.08 |
|         flag        | 34.56 | 37.93 |
+---------------------+-------+-------+
09/21 06:04:18 - mmengine - INFO - Iter(test) [2000/2000]    aAcc: 82.6700  mIoU: 48.3800  mAcc: 61.2400  data_time: 0.0016  time: 0.2150
Finished processing corruption type: fog
Processing corruption type: brightness
09/21 06:04:22 - mmengine - INFO - 
------------------------------------------------------------
System environment:
    sys.platform: linux
    Python: 3.10.13 | packaged by conda-forge | (main, Dec 23 2023, 15:36:39) [GCC 12.3.0]
    CUDA available: True
    MUSA available: False
    numpy_random_seed: 1922256510
    GPU 0: Tesla V100-SXM2-32GB
    CUDA_HOME: /opt/bwhpc/common/devel/cuda/11.7
    NVCC: Cuda compilation tools, release 11.7, V11.7.99
    GCC: gcc (GCC) 8.5.0 20210514 (Red Hat 8.5.0-18)
    PyTorch: 1.13.1
    PyTorch compiling details: PyTorch built with:
  - GCC 9.3
  - C++ Version: 201402
  - Intel(R) oneAPI Math Kernel Library Version 2023.1-Product Build 20230303 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v2.6.0 (Git Hash 52b5f107dd9cf10910aaa19cb47f3abf9b349815)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - LAPACK is enabled (usually provided by MKL)
  - NNPACK is enabled
  - CPU capability usage: AVX2
  - CUDA Runtime 11.7
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_61,code=sm_61;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86;-gencode;arch=compute_37,code=compute_37
  - CuDNN 8.5
  - Magma 2.6.1
  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.7, CUDNN_VERSION=8.5.0, CXX_COMPILER=/opt/rh/devtoolset-9/root/usr/bin/c++, CXX_FLAGS= -fabi-version=11 -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -DEDGE_PROFILER_USE_KINETO -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Werror=non-virtual-dtor -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wunused-local-typedefs -Wno-unused-parameter -Wno-unused-function -Wno-unused-result -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Werror=cast-function-type -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.13.1, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, USE_ROCM=OFF, 

    TorchVision: 0.14.1
    OpenCV: 3.4.18
    MMEngine: 0.10.4

Runtime environment:
    cudnn_benchmark: True
    mp_cfg: {'mp_start_method': 'fork', 'opencv_num_threads': 0}
    dist_cfg: {'backend': 'nccl'}
    seed: 1922256510
    Distributed launcher: none
    Distributed training: False
    GPU number: 1
------------------------------------------------------------

09/21 06:04:22 - mmengine - INFO - Config:
auto_scale_lr = dict(base_batch_size=16, enable=False)
backbone_embed_multi = dict(decay_mult=0.0, lr_mult=0.1)
backbone_norm_multi = dict(decay_mult=0.0, lr_mult=0.1)
crop_size = (
    512,
    512,
)
custom_imports = dict(allow_failed_imports=False, imports='mmdet.models')
custom_keys = dict({
    'absolute_pos_embed':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone':
    dict(decay_mult=1.0, lr_mult=0.1),
    'backbone.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.patch_embed.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.0.blocks.0.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.0.blocks.1.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.0.downsample.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.1.blocks.0.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.1.blocks.1.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.1.downsample.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.0.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.1.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.2.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.3.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.4.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.5.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.downsample.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.3.blocks.0.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.3.blocks.1.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'level_embed':
    dict(decay_mult=0.0, lr_mult=1.0),
    'query_embed':
    dict(decay_mult=0.0, lr_mult=1.0),
    'query_feat':
    dict(decay_mult=0.0, lr_mult=1.0),
    'relative_position_bias_table':
    dict(decay_mult=0.0, lr_mult=0.1)
})
data_root = 'data/ade/ADEChallengeData2016'
dataset_type = 'ADE20KDataset'
default_hooks = dict(
    checkpoint=dict(
        by_epoch=False, interval=5000, save_best='mIoU',
        type='CheckpointHook'),
    logger=dict(interval=50, log_metric_by_epoch=False, type='LoggerHook'),
    param_scheduler=dict(type='ParamSchedulerHook'),
    sampler_seed=dict(type='DistSamplerSeedHook'),
    timer=dict(type='IterTimerHook'),
    visualization=dict(type='SegVisualizationHook'))
default_scope = 'mmseg'
depths = [
    2,
    2,
    6,
    2,
]
embed_multi = dict(decay_mult=0.0, lr_mult=1.0)
env_cfg = dict(
    cudnn_benchmark=True,
    dist_cfg=dict(backend='nccl'),
    mp_cfg=dict(mp_start_method='fork', opencv_num_threads=0))
img_ratios = [
    0.5,
    0.75,
    1.0,
    1.25,
    1.5,
    1.75,
]
launcher = 'none'
load_from = '../checkpoint_files/ade20k/mask2former/mask2former_swin-t_8xb2-160k_ade20k-512x512_20221203_234230-7d64e5dd.pth'
log_level = 'INFO'
log_processor = dict(by_epoch=False)
model = dict(
    backbone=dict(
        attn_drop_rate=0.0,
        depths=[
            2,
            2,
            6,
            2,
        ],
        drop_path_rate=0.3,
        drop_rate=0.0,
        embed_dims=96,
        frozen_stages=-1,
        init_cfg=dict(
            checkpoint=
            'https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/swin/swin_tiny_patch4_window7_224_20220317-1cdeb081.pth',
            type='Pretrained'),
        mlp_ratio=4,
        num_heads=[
            3,
            6,
            12,
            24,
        ],
        out_indices=(
            0,
            1,
            2,
            3,
        ),
        patch_norm=True,
        qk_scale=None,
        qkv_bias=True,
        type='SwinTransformer',
        window_size=7,
        with_cp=False),
    data_preprocessor=dict(
        bgr_to_rgb=True,
        corruption='brightness',
        mean=[
            123.675,
            116.28,
            103.53,
        ],
        pad_val=0,
        seg_pad_val=255,
        size=(
            512,
            512,
        ),
        std=[
            58.395,
            57.12,
            57.375,
        ],
        test_cfg=dict(size_divisor=32),
        type='SegDataPreProcessor'),
    decode_head=dict(
        align_corners=False,
        enforce_decoder_input_project=False,
        feat_channels=256,
        in_channels=[
            96,
            192,
            384,
            768,
        ],
        loss_cls=dict(
            class_weight=[
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                0.1,
            ],
            loss_weight=2.0,
            reduction='mean',
            type='mmdet.CrossEntropyLoss',
            use_sigmoid=False),
        loss_dice=dict(
            activate=True,
            eps=1.0,
            loss_weight=5.0,
            naive_dice=True,
            reduction='mean',
            type='mmdet.DiceLoss',
            use_sigmoid=True),
        loss_mask=dict(
            loss_weight=5.0,
            reduction='mean',
            type='mmdet.CrossEntropyLoss',
            use_sigmoid=True),
        num_classes=150,
        num_queries=100,
        num_transformer_feat_level=3,
        out_channels=256,
        pixel_decoder=dict(
            act_cfg=dict(type='ReLU'),
            encoder=dict(
                init_cfg=None,
                layer_cfg=dict(
                    ffn_cfg=dict(
                        act_cfg=dict(inplace=True, type='ReLU'),
                        embed_dims=256,
                        feedforward_channels=1024,
                        ffn_drop=0.0,
                        num_fcs=2),
                    self_attn_cfg=dict(
                        batch_first=True,
                        dropout=0.0,
                        embed_dims=256,
                        im2col_step=64,
                        init_cfg=None,
                        norm_cfg=None,
                        num_heads=8,
                        num_levels=3,
                        num_points=4)),
                num_layers=6),
            init_cfg=None,
            norm_cfg=dict(num_groups=32, type='GN'),
            num_outs=3,
            positional_encoding=dict(normalize=True, num_feats=128),
            type='mmdet.MSDeformAttnPixelDecoder'),
        positional_encoding=dict(normalize=True, num_feats=128),
        strides=[
            4,
            8,
            16,
            32,
        ],
        train_cfg=dict(
            assigner=dict(
                match_costs=[
                    dict(type='mmdet.ClassificationCost', weight=2.0),
                    dict(
                        type='mmdet.CrossEntropyLossCost',
                        use_sigmoid=True,
                        weight=5.0),
                    dict(
                        eps=1.0,
                        pred_act=True,
                        type='mmdet.DiceCost',
                        weight=5.0),
                ],
                type='mmdet.HungarianAssigner'),
            importance_sample_ratio=0.75,
            num_points=12544,
            oversample_ratio=3.0,
            sampler=dict(type='mmdet.MaskPseudoSampler')),
        transformer_decoder=dict(
            init_cfg=None,
            layer_cfg=dict(
                cross_attn_cfg=dict(
                    attn_drop=0.0,
                    batch_first=True,
                    dropout_layer=None,
                    embed_dims=256,
                    num_heads=8,
                    proj_drop=0.0),
                ffn_cfg=dict(
                    act_cfg=dict(inplace=True, type='ReLU'),
                    add_identity=True,
                    dropout_layer=None,
                    embed_dims=256,
                    feedforward_channels=2048,
                    ffn_drop=0.0,
                    num_fcs=2),
                self_attn_cfg=dict(
                    attn_drop=0.0,
                    batch_first=True,
                    dropout_layer=None,
                    embed_dims=256,
                    num_heads=8,
                    proj_drop=0.0)),
            num_layers=9,
            return_intermediate=True),
        type='Mask2FormerHead'),
    test_cfg=dict(mode='whole'),
    train_cfg=dict(),
    type='EncoderDecoder')
num_classes = 150
optim_wrapper = dict(
    clip_grad=dict(max_norm=0.01, norm_type=2),
    optimizer=dict(
        betas=(
            0.9,
            0.999,
        ),
        eps=1e-08,
        lr=0.0001,
        type='AdamW',
        weight_decay=0.05),
    paramwise_cfg=dict(
        custom_keys=dict({
            'absolute_pos_embed':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone':
            dict(decay_mult=1.0, lr_mult=0.1),
            'backbone.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.patch_embed.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.0.blocks.0.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.0.blocks.1.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.0.downsample.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.1.blocks.0.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.1.blocks.1.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.1.downsample.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.0.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.1.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.2.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.3.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.4.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.5.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.downsample.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.3.blocks.0.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.3.blocks.1.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'level_embed':
            dict(decay_mult=0.0, lr_mult=1.0),
            'query_embed':
            dict(decay_mult=0.0, lr_mult=1.0),
            'query_feat':
            dict(decay_mult=0.0, lr_mult=1.0),
            'relative_position_bias_table':
            dict(decay_mult=0.0, lr_mult=0.1)
        }),
        norm_decay_mult=0.0),
    type='OptimWrapper')
optimizer = dict(
    betas=(
        0.9,
        0.999,
    ),
    eps=1e-08,
    lr=0.0001,
    type='AdamW',
    weight_decay=0.05)
param_scheduler = [
    dict(
        begin=0,
        by_epoch=False,
        end=160000,
        eta_min=0,
        power=0.9,
        type='PolyLR'),
]
pretrained = 'https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/swin/swin_tiny_patch4_window7_224_20220317-1cdeb081.pth'
resume = False
test_cfg = dict(type='TestLoop')
test_dataloader = dict(
    batch_size=1,
    dataset=dict(
        data_prefix=dict(
            img_path='images/validation',
            seg_map_path='annotations/validation'),
        data_root='data/ade/ADEChallengeData2016',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(keep_ratio=True, scale=(
                2048,
                512,
            ), type='Resize'),
            dict(reduce_zero_label=True, type='LoadAnnotations'),
            dict(type='PackSegInputs'),
        ],
        type='ADE20KDataset'),
    num_workers=4,
    persistent_workers=True,
    sampler=dict(shuffle=False, type='DefaultSampler'))
test_evaluator = dict(
    iou_metrics=[
        'mIoU',
    ], type='IoUMetric')
test_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(keep_ratio=True, scale=(
        2048,
        512,
    ), type='Resize'),
    dict(reduce_zero_label=True, type='LoadAnnotations'),
    dict(type='PackSegInputs'),
]
train_cfg = dict(
    max_iters=160000, type='IterBasedTrainLoop', val_interval=5000)
train_dataloader = dict(
    batch_size=2,
    dataset=dict(
        data_prefix=dict(
            img_path='images/training', seg_map_path='annotations/training'),
        data_root='data/ade/ADEChallengeData2016',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(reduce_zero_label=True, type='LoadAnnotations'),
            dict(
                max_size=2048,
                resize_type='ResizeShortestEdge',
                scales=[
                    256,
                    307,
                    358,
                    409,
                    460,
                    512,
                    563,
                    614,
                    665,
                    716,
                    768,
                    819,
                    870,
                    921,
                    972,
                    1024,
                ],
                type='RandomChoiceResize'),
            dict(
                cat_max_ratio=0.75, crop_size=(
                    512,
                    512,
                ), type='RandomCrop'),
            dict(prob=0.5, type='RandomFlip'),
            dict(type='PhotoMetricDistortion'),
            dict(type='PackSegInputs'),
        ],
        type='ADE20KDataset'),
    num_workers=4,
    persistent_workers=True,
    sampler=dict(shuffle=True, type='InfiniteSampler'))
train_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(reduce_zero_label=True, type='LoadAnnotations'),
    dict(
        max_size=2048,
        resize_type='ResizeShortestEdge',
        scales=[
            256,
            307,
            358,
            409,
            460,
            512,
            563,
            614,
            665,
            716,
            768,
            819,
            870,
            921,
            972,
            1024,
        ],
        type='RandomChoiceResize'),
    dict(cat_max_ratio=0.75, crop_size=(
        512,
        512,
    ), type='RandomCrop'),
    dict(prob=0.5, type='RandomFlip'),
    dict(type='PhotoMetricDistortion'),
    dict(type='PackSegInputs'),
]
tta_model = dict(type='SegTTAModel')
tta_pipeline = [
    dict(backend_args=None, type='LoadImageFromFile'),
    dict(
        transforms=[
            [
                dict(keep_ratio=True, scale_factor=0.5, type='Resize'),
                dict(keep_ratio=True, scale_factor=0.75, type='Resize'),
                dict(keep_ratio=True, scale_factor=1.0, type='Resize'),
                dict(keep_ratio=True, scale_factor=1.25, type='Resize'),
                dict(keep_ratio=True, scale_factor=1.5, type='Resize'),
                dict(keep_ratio=True, scale_factor=1.75, type='Resize'),
            ],
            [
                dict(direction='horizontal', prob=0.0, type='RandomFlip'),
                dict(direction='horizontal', prob=1.0, type='RandomFlip'),
            ],
            [
                dict(type='LoadAnnotations'),
            ],
            [
                dict(type='PackSegInputs'),
            ],
        ],
        type='TestTimeAug'),
]
val_cfg = dict(type='ValLoop')
val_dataloader = dict(
    batch_size=1,
    dataset=dict(
        data_prefix=dict(
            img_path='images/validation',
            seg_map_path='annotations/validation'),
        data_root='data/ade/ADEChallengeData2016',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(keep_ratio=True, scale=(
                2048,
                512,
            ), type='Resize'),
            dict(reduce_zero_label=True, type='LoadAnnotations'),
            dict(type='PackSegInputs'),
        ],
        type='ADE20KDataset'),
    num_workers=4,
    persistent_workers=True,
    sampler=dict(shuffle=False, type='DefaultSampler'))
val_evaluator = dict(
    iou_metrics=[
        'mIoU',
    ], type='IoUMetric')
vis_backends = [
    dict(type='LocalVisBackend'),
]
visualizer = dict(
    name='visualizer',
    type='SegLocalVisualizer',
    vis_backends=[
        dict(type='LocalVisBackend'),
    ])
work_dir = '../corruptions/work_dirs/ade20k/mask2former/mask2former_swin-t_8xb2-160k_ade20k-512x512/brightness'

09/21 06:04:25 - mmengine - INFO - Distributed training is not used, all SyncBatchNorm (SyncBN) layers in the model will be automatically reverted to BatchNormXd layers if they are used.
09/21 06:04:25 - mmengine - INFO - Hooks will be executed in the following order:
before_run:
(VERY_HIGH   ) RuntimeInfoHook                    
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
before_train:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_train_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(NORMAL      ) DistSamplerSeedHook                
 -------------------- 
before_train_iter:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_train_iter:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(NORMAL      ) SegVisualizationHook               
(BELOW_NORMAL) LoggerHook                         
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
after_train_epoch:
(NORMAL      ) IterTimerHook                      
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_val:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
before_val_epoch:
(NORMAL      ) IterTimerHook                      
 -------------------- 
before_val_iter:
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_val_iter:
(NORMAL      ) IterTimerHook                      
(NORMAL      ) SegVisualizationHook               
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_val_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
after_val:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
after_train:
(VERY_HIGH   ) RuntimeInfoHook                    
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_test:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
before_test_epoch:
(NORMAL      ) IterTimerHook                      
 -------------------- 
before_test_iter:
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_test_iter:
(NORMAL      ) IterTimerHook                      
(NORMAL      ) SegVisualizationHook               
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_test_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_test:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
after_run:
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
09/21 06:04:25 - mmengine - WARNING - The prefix is not set in metric class IoUMetric.
Loads checkpoint by local backend from path: ../checkpoint_files/ade20k/mask2former/mask2former_swin-t_8xb2-160k_ade20k-512x512_20221203_234230-7d64e5dd.pth
09/21 06:04:26 - mmengine - INFO - Load checkpoint from ../checkpoint_files/ade20k/mask2former/mask2former_swin-t_8xb2-160k_ade20k-512x512_20221203_234230-7d64e5dd.pth
09/21 06:04:51 - mmengine - INFO - Iter(test) [  50/2000]    eta: 0:16:00  time: 0.4047  data_time: 0.0015  memory: 12733  
09/21 06:05:04 - mmengine - INFO - Iter(test) [ 100/2000]    eta: 0:11:55  time: 0.3021  data_time: 0.0015  memory: 12714  
09/21 06:05:15 - mmengine - INFO - Iter(test) [ 150/2000]    eta: 0:10:00  time: 0.2151  data_time: 0.0015  memory: 853  
09/21 06:05:28 - mmengine - INFO - Iter(test) [ 200/2000]    eta: 0:09:15  time: 0.2292  data_time: 0.0015  memory: 12754  
09/21 06:05:40 - mmengine - INFO - Iter(test) [ 250/2000]    eta: 0:08:36  time: 0.2086  data_time: 0.0014  memory: 12756  
09/21 06:05:52 - mmengine - INFO - Iter(test) [ 300/2000]    eta: 0:08:03  time: 0.2248  data_time: 0.0016  memory: 12721  
09/21 06:06:04 - mmengine - INFO - Iter(test) [ 350/2000]    eta: 0:07:39  time: 0.2131  data_time: 0.0014  memory: 12728  
09/21 06:06:16 - mmengine - INFO - Iter(test) [ 400/2000]    eta: 0:07:16  time: 0.2119  data_time: 0.0014  memory: 12694  
09/21 06:06:25 - mmengine - INFO - Iter(test) [ 450/2000]    eta: 0:06:49  time: 0.2054  data_time: 0.0014  memory: 894  
09/21 06:06:36 - mmengine - INFO - Iter(test) [ 500/2000]    eta: 0:06:29  time: 0.2057  data_time: 0.0014  memory: 853  
09/21 06:06:48 - mmengine - INFO - Iter(test) [ 550/2000]    eta: 0:06:12  time: 0.2363  data_time: 0.0016  memory: 961  
09/21 06:06:59 - mmengine - INFO - Iter(test) [ 600/2000]    eta: 0:05:55  time: 0.2255  data_time: 0.0016  memory: 958  
09/21 06:07:11 - mmengine - INFO - Iter(test) [ 650/2000]    eta: 0:05:41  time: 0.3243  data_time: 0.0015  memory: 12735  
09/21 06:07:23 - mmengine - INFO - Iter(test) [ 700/2000]    eta: 0:05:28  time: 0.2398  data_time: 0.0017  memory: 12724  
09/21 06:07:35 - mmengine - INFO - Iter(test) [ 750/2000]    eta: 0:05:13  time: 0.2083  data_time: 0.0015  memory: 1014  
09/21 06:07:45 - mmengine - INFO - Iter(test) [ 800/2000]    eta: 0:04:58  time: 0.2330  data_time: 0.0017  memory: 853  
09/21 06:07:57 - mmengine - INFO - Iter(test) [ 850/2000]    eta: 0:04:44  time: 0.2206  data_time: 0.0017  memory: 826  
09/21 06:08:07 - mmengine - INFO - Iter(test) [ 900/2000]    eta: 0:04:29  time: 0.2147  data_time: 0.0014  memory: 906  
09/21 06:08:19 - mmengine - INFO - Iter(test) [ 950/2000]    eta: 0:04:16  time: 0.2133  data_time: 0.0016  memory: 934  
09/21 06:08:30 - mmengine - INFO - Iter(test) [1000/2000]    eta: 0:04:03  time: 0.2276  data_time: 0.0016  memory: 934  
09/21 06:08:42 - mmengine - INFO - Iter(test) [1050/2000]    eta: 0:03:50  time: 0.2244  data_time: 0.0015  memory: 12737  
09/21 06:08:53 - mmengine - INFO - Iter(test) [1100/2000]    eta: 0:03:38  time: 0.2176  data_time: 0.0016  memory: 931  
09/21 06:09:04 - mmengine - INFO - Iter(test) [1150/2000]    eta: 0:03:25  time: 0.2249  data_time: 0.0015  memory: 904  
09/21 06:09:15 - mmengine - INFO - Iter(test) [1200/2000]    eta: 0:03:12  time: 0.2136  data_time: 0.0015  memory: 1839  
09/21 06:09:27 - mmengine - INFO - Iter(test) [1250/2000]    eta: 0:03:00  time: 0.2186  data_time: 0.0014  memory: 12716  
09/21 06:09:37 - mmengine - INFO - Iter(test) [1300/2000]    eta: 0:02:47  time: 0.2240  data_time: 0.0015  memory: 853  
09/21 06:09:48 - mmengine - INFO - Iter(test) [1350/2000]    eta: 0:02:34  time: 0.2095  data_time: 0.0015  memory: 853  
09/21 06:09:59 - mmengine - INFO - Iter(test) [1400/2000]    eta: 0:02:22  time: 0.2253  data_time: 0.0015  memory: 931  
09/21 06:10:10 - mmengine - INFO - Iter(test) [1450/2000]    eta: 0:02:10  time: 0.2368  data_time: 0.0015  memory: 934  
09/21 06:10:21 - mmengine - INFO - Iter(test) [1500/2000]    eta: 0:01:58  time: 0.2030  data_time: 0.0014  memory: 852  
09/21 06:10:33 - mmengine - INFO - Iter(test) [1550/2000]    eta: 0:01:46  time: 0.2292  data_time: 0.0015  memory: 934  
09/21 06:10:43 - mmengine - INFO - Iter(test) [1600/2000]    eta: 0:01:34  time: 0.2242  data_time: 0.0015  memory: 826  
09/21 06:10:55 - mmengine - INFO - Iter(test) [1650/2000]    eta: 0:01:22  time: 0.2036  data_time: 0.0014  memory: 12725  
09/21 06:11:06 - mmengine - INFO - Iter(test) [1700/2000]    eta: 0:01:10  time: 0.2293  data_time: 0.0016  memory: 930  
09/21 06:11:18 - mmengine - INFO - Iter(test) [1750/2000]    eta: 0:00:58  time: 0.2152  data_time: 0.0014  memory: 957  
09/21 06:11:28 - mmengine - INFO - Iter(test) [1800/2000]    eta: 0:00:46  time: 0.2366  data_time: 0.0016  memory: 853  
09/21 06:11:40 - mmengine - INFO - Iter(test) [1850/2000]    eta: 0:00:35  time: 0.2203  data_time: 0.0016  memory: 773  
09/21 06:11:51 - mmengine - INFO - Iter(test) [1900/2000]    eta: 0:00:23  time: 0.2231  data_time: 0.0015  memory: 987  
09/21 06:12:02 - mmengine - INFO - Iter(test) [1950/2000]    eta: 0:00:11  time: 0.2177  data_time: 0.0015  memory: 1224  
09/21 06:12:13 - mmengine - INFO - Iter(test) [2000/2000]    eta: 0:00:00  time: 0.2018  data_time: 0.0013  memory: 1012  
09/21 06:12:13 - mmengine - INFO - per class results:
09/21 06:12:13 - mmengine - INFO - 
+---------------------+-------+-------+
|        Class        |  IoU  |  Acc  |
+---------------------+-------+-------+
|         wall        | 77.69 | 87.48 |
|       building      | 82.98 | 92.79 |
|         sky         | 94.18 |  97.0 |
|        floor        | 82.12 |  90.3 |
|         tree        | 73.59 | 85.54 |
|       ceiling       | 84.14 | 91.17 |
|         road        | 82.02 | 88.85 |
|         bed         | 89.63 | 95.32 |
|      windowpane     | 60.83 | 78.83 |
|        grass        | 66.44 | 82.43 |
|       cabinet       | 58.67 | 72.15 |
|       sidewalk      | 65.87 | 83.09 |
|        person       | 82.22 | 90.64 |
|        earth        | 35.23 | 44.96 |
|         door        | 47.38 | 62.98 |
|        table        | 60.47 |  77.6 |
|       mountain      | 58.77 | 80.41 |
|        plant        | 52.57 | 66.27 |
|       curtain       | 75.03 |  86.4 |
|        chair        | 58.79 | 74.17 |
|         car         | 83.83 | 92.04 |
|        water        | 56.38 | 73.71 |
|       painting      | 68.27 | 88.86 |
|         sofa        | 66.33 | 81.93 |
|        shelf        | 45.16 | 63.61 |
|        house        | 47.66 | 60.26 |
|         sea         |  54.5 | 77.06 |
|        mirror       | 68.71 | 78.17 |
|         rug         | 67.35 | 80.66 |
|        field        | 26.77 | 43.99 |
|       armchair      | 45.24 | 67.17 |
|         seat        | 61.77 | 81.23 |
|        fence        | 46.69 | 62.96 |
|         desk        | 50.67 | 68.88 |
|         rock        | 43.48 | 62.46 |
|       wardrobe      | 57.78 |  74.7 |
|         lamp        | 65.12 | 79.55 |
|       bathtub       |  73.0 | 84.39 |
|       railing       |  38.3 | 54.51 |
|       cushion       |  57.5 | 70.36 |
|         base        | 31.72 | 55.59 |
|         box         | 23.98 | 35.77 |
|        column       | 45.77 | 56.68 |
|      signboard      |  38.0 |  55.7 |
|   chest of drawers  | 38.56 | 65.05 |
|       counter       | 28.95 | 43.49 |
|         sand        |  29.9 | 53.42 |
|         sink        | 71.33 | 82.85 |
|      skyscraper     | 36.38 | 41.89 |
|      fireplace      | 70.26 | 87.34 |
|     refrigerator    | 81.03 | 92.92 |
|      grandstand     | 42.44 | 64.44 |
|         path        | 25.22 | 36.56 |
|        stairs       | 35.59 | 42.31 |
|        runway       | 59.45 | 82.36 |
|         case        | 41.13 | 48.64 |
|      pool table     | 92.46 | 95.11 |
|        pillow       | 56.68 | 69.07 |
|     screen door     | 56.01 | 67.47 |
|       stairway      |  38.2 | 47.42 |
|        river        | 18.57 | 26.62 |
|        bridge       | 67.37 | 82.07 |
|       bookcase      | 34.92 | 44.83 |
|        blind        | 46.82 | 56.23 |
|     coffee table    | 64.43 | 82.35 |
|        toilet       | 86.06 | 91.03 |
|        flower       | 39.19 | 54.53 |
|         book        | 49.53 | 70.62 |
|         hill        |  9.93 | 12.09 |
|        bench        | 44.31 | 57.28 |
|      countertop     | 67.86 | 84.41 |
|        stove        | 75.44 |  84.8 |
|         palm        | 53.83 | 78.43 |
|    kitchen island   | 44.74 | 72.05 |
|       computer      |  55.2 |  63.2 |
|     swivel chair    | 46.71 | 60.63 |
|         boat        | 55.81 | 83.58 |
|         bar         | 53.76 | 62.71 |
|    arcade machine   | 21.67 | 23.34 |
|        hovel        | 29.55 | 48.59 |
|         bus         | 88.97 | 95.73 |
|        towel        | 63.66 | 74.09 |
|        light        | 61.64 | 76.76 |
|        truck        | 35.58 | 55.48 |
|        tower        | 38.61 | 49.62 |
|      chandelier     | 68.33 | 80.21 |
|        awning       | 33.23 | 41.53 |
|     streetlight     | 34.43 | 45.73 |
|        booth        | 29.26 | 43.68 |
| television receiver | 56.01 | 75.45 |
|       airplane      | 56.39 | 66.47 |
|      dirt track     |  1.14 |  2.06 |
|       apparel       | 36.56 | 57.68 |
|         pole        | 28.55 |  43.8 |
|         land        |  5.24 |  6.13 |
|      bannister      | 16.48 | 27.21 |
|      escalator      | 21.23 | 22.29 |
|       ottoman       | 46.93 | 63.53 |
|        bottle       | 30.93 | 53.51 |
|        buffet       | 29.56 | 38.95 |
|        poster       | 25.04 | 34.32 |
|        stage        | 15.04 | 21.19 |
|         van         | 55.84 | 69.88 |
|         ship        |  9.97 | 10.25 |
|       fountain      |  21.2 | 23.14 |
|    conveyer belt    | 74.73 | 91.53 |
|        canopy       | 29.18 | 47.28 |
|        washer       | 62.58 | 70.99 |
|      plaything      | 30.87 | 56.34 |
|    swimming pool    | 30.76 | 60.19 |
|        stool        |  42.8 | 64.02 |
|        barrel       | 60.64 |  74.3 |
|        basket       | 43.39 | 56.38 |
|      waterfall      | 66.42 | 88.68 |
|         tent        | 74.44 | 97.92 |
|         bag         | 16.35 | 20.31 |
|       minibike      | 56.21 | 62.62 |
|        cradle       |  74.3 | 82.36 |
|         oven        | 15.69 | 43.45 |
|         ball        | 42.44 | 48.74 |
|         food        | 41.87 |  52.9 |
|         step        |  6.69 | 10.52 |
|         tank        |  33.6 | 35.42 |
|      trade name     | 25.11 | 31.97 |
|      microwave      | 39.83 | 43.54 |
|         pot         | 42.37 | 51.69 |
|        animal       | 60.24 |  64.2 |
|       bicycle       | 58.83 |  81.4 |
|         lake        | 70.09 | 73.29 |
|      dishwasher     | 67.38 | 88.43 |
|        screen       | 55.33 |  72.5 |
|       blanket       | 18.01 | 21.73 |
|      sculpture      | 42.05 | 66.22 |
|         hood        | 60.44 | 70.35 |
|        sconce       | 49.22 | 62.48 |
|         vase        | 41.92 | 60.72 |
|    traffic light    | 38.18 | 59.17 |
|         tray        | 12.54 | 22.25 |
|        ashcan       | 47.04 |  65.3 |
|         fan         |  62.1 | 77.32 |
|         pier        | 63.29 | 85.36 |
|      crt screen     |  0.85 |  2.67 |
|        plate        | 49.64 | 63.22 |
|       monitor       |  1.96 |  2.7  |
|    bulletin board   | 37.92 | 50.06 |
|        shower       |  2.06 | 18.17 |
|       radiator      | 59.44 | 70.05 |
|        glass        | 18.92 | 22.19 |
|        clock        | 31.17 | 37.36 |
|         flag        | 34.42 | 38.69 |
+---------------------+-------+-------+
09/21 06:12:13 - mmengine - INFO - Iter(test) [2000/2000]    aAcc: 82.8900  mIoU: 48.1700  mAcc: 61.2300  data_time: 0.0017  time: 0.2329
Finished processing corruption type: brightness
Processing corruption type: contrast
09/21 06:12:17 - mmengine - INFO - 
------------------------------------------------------------
System environment:
    sys.platform: linux
    Python: 3.10.13 | packaged by conda-forge | (main, Dec 23 2023, 15:36:39) [GCC 12.3.0]
    CUDA available: True
    MUSA available: False
    numpy_random_seed: 896107166
    GPU 0: Tesla V100-SXM2-32GB
    CUDA_HOME: /opt/bwhpc/common/devel/cuda/11.7
    NVCC: Cuda compilation tools, release 11.7, V11.7.99
    GCC: gcc (GCC) 8.5.0 20210514 (Red Hat 8.5.0-18)
    PyTorch: 1.13.1
    PyTorch compiling details: PyTorch built with:
  - GCC 9.3
  - C++ Version: 201402
  - Intel(R) oneAPI Math Kernel Library Version 2023.1-Product Build 20230303 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v2.6.0 (Git Hash 52b5f107dd9cf10910aaa19cb47f3abf9b349815)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - LAPACK is enabled (usually provided by MKL)
  - NNPACK is enabled
  - CPU capability usage: AVX2
  - CUDA Runtime 11.7
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_61,code=sm_61;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86;-gencode;arch=compute_37,code=compute_37
  - CuDNN 8.5
  - Magma 2.6.1
  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.7, CUDNN_VERSION=8.5.0, CXX_COMPILER=/opt/rh/devtoolset-9/root/usr/bin/c++, CXX_FLAGS= -fabi-version=11 -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -DEDGE_PROFILER_USE_KINETO -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Werror=non-virtual-dtor -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wunused-local-typedefs -Wno-unused-parameter -Wno-unused-function -Wno-unused-result -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Werror=cast-function-type -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.13.1, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, USE_ROCM=OFF, 

    TorchVision: 0.14.1
    OpenCV: 3.4.18
    MMEngine: 0.10.4

Runtime environment:
    cudnn_benchmark: True
    mp_cfg: {'mp_start_method': 'fork', 'opencv_num_threads': 0}
    dist_cfg: {'backend': 'nccl'}
    seed: 896107166
    Distributed launcher: none
    Distributed training: False
    GPU number: 1
------------------------------------------------------------

09/21 06:12:17 - mmengine - INFO - Config:
auto_scale_lr = dict(base_batch_size=16, enable=False)
backbone_embed_multi = dict(decay_mult=0.0, lr_mult=0.1)
backbone_norm_multi = dict(decay_mult=0.0, lr_mult=0.1)
crop_size = (
    512,
    512,
)
custom_imports = dict(allow_failed_imports=False, imports='mmdet.models')
custom_keys = dict({
    'absolute_pos_embed':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone':
    dict(decay_mult=1.0, lr_mult=0.1),
    'backbone.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.patch_embed.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.0.blocks.0.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.0.blocks.1.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.0.downsample.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.1.blocks.0.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.1.blocks.1.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.1.downsample.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.0.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.1.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.2.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.3.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.4.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.5.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.downsample.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.3.blocks.0.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.3.blocks.1.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'level_embed':
    dict(decay_mult=0.0, lr_mult=1.0),
    'query_embed':
    dict(decay_mult=0.0, lr_mult=1.0),
    'query_feat':
    dict(decay_mult=0.0, lr_mult=1.0),
    'relative_position_bias_table':
    dict(decay_mult=0.0, lr_mult=0.1)
})
data_root = 'data/ade/ADEChallengeData2016'
dataset_type = 'ADE20KDataset'
default_hooks = dict(
    checkpoint=dict(
        by_epoch=False, interval=5000, save_best='mIoU',
        type='CheckpointHook'),
    logger=dict(interval=50, log_metric_by_epoch=False, type='LoggerHook'),
    param_scheduler=dict(type='ParamSchedulerHook'),
    sampler_seed=dict(type='DistSamplerSeedHook'),
    timer=dict(type='IterTimerHook'),
    visualization=dict(type='SegVisualizationHook'))
default_scope = 'mmseg'
depths = [
    2,
    2,
    6,
    2,
]
embed_multi = dict(decay_mult=0.0, lr_mult=1.0)
env_cfg = dict(
    cudnn_benchmark=True,
    dist_cfg=dict(backend='nccl'),
    mp_cfg=dict(mp_start_method='fork', opencv_num_threads=0))
img_ratios = [
    0.5,
    0.75,
    1.0,
    1.25,
    1.5,
    1.75,
]
launcher = 'none'
load_from = '../checkpoint_files/ade20k/mask2former/mask2former_swin-t_8xb2-160k_ade20k-512x512_20221203_234230-7d64e5dd.pth'
log_level = 'INFO'
log_processor = dict(by_epoch=False)
model = dict(
    backbone=dict(
        attn_drop_rate=0.0,
        depths=[
            2,
            2,
            6,
            2,
        ],
        drop_path_rate=0.3,
        drop_rate=0.0,
        embed_dims=96,
        frozen_stages=-1,
        init_cfg=dict(
            checkpoint=
            'https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/swin/swin_tiny_patch4_window7_224_20220317-1cdeb081.pth',
            type='Pretrained'),
        mlp_ratio=4,
        num_heads=[
            3,
            6,
            12,
            24,
        ],
        out_indices=(
            0,
            1,
            2,
            3,
        ),
        patch_norm=True,
        qk_scale=None,
        qkv_bias=True,
        type='SwinTransformer',
        window_size=7,
        with_cp=False),
    data_preprocessor=dict(
        bgr_to_rgb=True,
        corruption='contrast',
        mean=[
            123.675,
            116.28,
            103.53,
        ],
        pad_val=0,
        seg_pad_val=255,
        size=(
            512,
            512,
        ),
        std=[
            58.395,
            57.12,
            57.375,
        ],
        test_cfg=dict(size_divisor=32),
        type='SegDataPreProcessor'),
    decode_head=dict(
        align_corners=False,
        enforce_decoder_input_project=False,
        feat_channels=256,
        in_channels=[
            96,
            192,
            384,
            768,
        ],
        loss_cls=dict(
            class_weight=[
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                0.1,
            ],
            loss_weight=2.0,
            reduction='mean',
            type='mmdet.CrossEntropyLoss',
            use_sigmoid=False),
        loss_dice=dict(
            activate=True,
            eps=1.0,
            loss_weight=5.0,
            naive_dice=True,
            reduction='mean',
            type='mmdet.DiceLoss',
            use_sigmoid=True),
        loss_mask=dict(
            loss_weight=5.0,
            reduction='mean',
            type='mmdet.CrossEntropyLoss',
            use_sigmoid=True),
        num_classes=150,
        num_queries=100,
        num_transformer_feat_level=3,
        out_channels=256,
        pixel_decoder=dict(
            act_cfg=dict(type='ReLU'),
            encoder=dict(
                init_cfg=None,
                layer_cfg=dict(
                    ffn_cfg=dict(
                        act_cfg=dict(inplace=True, type='ReLU'),
                        embed_dims=256,
                        feedforward_channels=1024,
                        ffn_drop=0.0,
                        num_fcs=2),
                    self_attn_cfg=dict(
                        batch_first=True,
                        dropout=0.0,
                        embed_dims=256,
                        im2col_step=64,
                        init_cfg=None,
                        norm_cfg=None,
                        num_heads=8,
                        num_levels=3,
                        num_points=4)),
                num_layers=6),
            init_cfg=None,
            norm_cfg=dict(num_groups=32, type='GN'),
            num_outs=3,
            positional_encoding=dict(normalize=True, num_feats=128),
            type='mmdet.MSDeformAttnPixelDecoder'),
        positional_encoding=dict(normalize=True, num_feats=128),
        strides=[
            4,
            8,
            16,
            32,
        ],
        train_cfg=dict(
            assigner=dict(
                match_costs=[
                    dict(type='mmdet.ClassificationCost', weight=2.0),
                    dict(
                        type='mmdet.CrossEntropyLossCost',
                        use_sigmoid=True,
                        weight=5.0),
                    dict(
                        eps=1.0,
                        pred_act=True,
                        type='mmdet.DiceCost',
                        weight=5.0),
                ],
                type='mmdet.HungarianAssigner'),
            importance_sample_ratio=0.75,
            num_points=12544,
            oversample_ratio=3.0,
            sampler=dict(type='mmdet.MaskPseudoSampler')),
        transformer_decoder=dict(
            init_cfg=None,
            layer_cfg=dict(
                cross_attn_cfg=dict(
                    attn_drop=0.0,
                    batch_first=True,
                    dropout_layer=None,
                    embed_dims=256,
                    num_heads=8,
                    proj_drop=0.0),
                ffn_cfg=dict(
                    act_cfg=dict(inplace=True, type='ReLU'),
                    add_identity=True,
                    dropout_layer=None,
                    embed_dims=256,
                    feedforward_channels=2048,
                    ffn_drop=0.0,
                    num_fcs=2),
                self_attn_cfg=dict(
                    attn_drop=0.0,
                    batch_first=True,
                    dropout_layer=None,
                    embed_dims=256,
                    num_heads=8,
                    proj_drop=0.0)),
            num_layers=9,
            return_intermediate=True),
        type='Mask2FormerHead'),
    test_cfg=dict(mode='whole'),
    train_cfg=dict(),
    type='EncoderDecoder')
num_classes = 150
optim_wrapper = dict(
    clip_grad=dict(max_norm=0.01, norm_type=2),
    optimizer=dict(
        betas=(
            0.9,
            0.999,
        ),
        eps=1e-08,
        lr=0.0001,
        type='AdamW',
        weight_decay=0.05),
    paramwise_cfg=dict(
        custom_keys=dict({
            'absolute_pos_embed':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone':
            dict(decay_mult=1.0, lr_mult=0.1),
            'backbone.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.patch_embed.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.0.blocks.0.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.0.blocks.1.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.0.downsample.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.1.blocks.0.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.1.blocks.1.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.1.downsample.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.0.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.1.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.2.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.3.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.4.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.5.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.downsample.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.3.blocks.0.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.3.blocks.1.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'level_embed':
            dict(decay_mult=0.0, lr_mult=1.0),
            'query_embed':
            dict(decay_mult=0.0, lr_mult=1.0),
            'query_feat':
            dict(decay_mult=0.0, lr_mult=1.0),
            'relative_position_bias_table':
            dict(decay_mult=0.0, lr_mult=0.1)
        }),
        norm_decay_mult=0.0),
    type='OptimWrapper')
optimizer = dict(
    betas=(
        0.9,
        0.999,
    ),
    eps=1e-08,
    lr=0.0001,
    type='AdamW',
    weight_decay=0.05)
param_scheduler = [
    dict(
        begin=0,
        by_epoch=False,
        end=160000,
        eta_min=0,
        power=0.9,
        type='PolyLR'),
]
pretrained = 'https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/swin/swin_tiny_patch4_window7_224_20220317-1cdeb081.pth'
resume = False
test_cfg = dict(type='TestLoop')
test_dataloader = dict(
    batch_size=1,
    dataset=dict(
        data_prefix=dict(
            img_path='images/validation',
            seg_map_path='annotations/validation'),
        data_root='data/ade/ADEChallengeData2016',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(keep_ratio=True, scale=(
                2048,
                512,
            ), type='Resize'),
            dict(reduce_zero_label=True, type='LoadAnnotations'),
            dict(type='PackSegInputs'),
        ],
        type='ADE20KDataset'),
    num_workers=4,
    persistent_workers=True,
    sampler=dict(shuffle=False, type='DefaultSampler'))
test_evaluator = dict(
    iou_metrics=[
        'mIoU',
    ], type='IoUMetric')
test_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(keep_ratio=True, scale=(
        2048,
        512,
    ), type='Resize'),
    dict(reduce_zero_label=True, type='LoadAnnotations'),
    dict(type='PackSegInputs'),
]
train_cfg = dict(
    max_iters=160000, type='IterBasedTrainLoop', val_interval=5000)
train_dataloader = dict(
    batch_size=2,
    dataset=dict(
        data_prefix=dict(
            img_path='images/training', seg_map_path='annotations/training'),
        data_root='data/ade/ADEChallengeData2016',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(reduce_zero_label=True, type='LoadAnnotations'),
            dict(
                max_size=2048,
                resize_type='ResizeShortestEdge',
                scales=[
                    256,
                    307,
                    358,
                    409,
                    460,
                    512,
                    563,
                    614,
                    665,
                    716,
                    768,
                    819,
                    870,
                    921,
                    972,
                    1024,
                ],
                type='RandomChoiceResize'),
            dict(
                cat_max_ratio=0.75, crop_size=(
                    512,
                    512,
                ), type='RandomCrop'),
            dict(prob=0.5, type='RandomFlip'),
            dict(type='PhotoMetricDistortion'),
            dict(type='PackSegInputs'),
        ],
        type='ADE20KDataset'),
    num_workers=4,
    persistent_workers=True,
    sampler=dict(shuffle=True, type='InfiniteSampler'))
train_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(reduce_zero_label=True, type='LoadAnnotations'),
    dict(
        max_size=2048,
        resize_type='ResizeShortestEdge',
        scales=[
            256,
            307,
            358,
            409,
            460,
            512,
            563,
            614,
            665,
            716,
            768,
            819,
            870,
            921,
            972,
            1024,
        ],
        type='RandomChoiceResize'),
    dict(cat_max_ratio=0.75, crop_size=(
        512,
        512,
    ), type='RandomCrop'),
    dict(prob=0.5, type='RandomFlip'),
    dict(type='PhotoMetricDistortion'),
    dict(type='PackSegInputs'),
]
tta_model = dict(type='SegTTAModel')
tta_pipeline = [
    dict(backend_args=None, type='LoadImageFromFile'),
    dict(
        transforms=[
            [
                dict(keep_ratio=True, scale_factor=0.5, type='Resize'),
                dict(keep_ratio=True, scale_factor=0.75, type='Resize'),
                dict(keep_ratio=True, scale_factor=1.0, type='Resize'),
                dict(keep_ratio=True, scale_factor=1.25, type='Resize'),
                dict(keep_ratio=True, scale_factor=1.5, type='Resize'),
                dict(keep_ratio=True, scale_factor=1.75, type='Resize'),
            ],
            [
                dict(direction='horizontal', prob=0.0, type='RandomFlip'),
                dict(direction='horizontal', prob=1.0, type='RandomFlip'),
            ],
            [
                dict(type='LoadAnnotations'),
            ],
            [
                dict(type='PackSegInputs'),
            ],
        ],
        type='TestTimeAug'),
]
val_cfg = dict(type='ValLoop')
val_dataloader = dict(
    batch_size=1,
    dataset=dict(
        data_prefix=dict(
            img_path='images/validation',
            seg_map_path='annotations/validation'),
        data_root='data/ade/ADEChallengeData2016',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(keep_ratio=True, scale=(
                2048,
                512,
            ), type='Resize'),
            dict(reduce_zero_label=True, type='LoadAnnotations'),
            dict(type='PackSegInputs'),
        ],
        type='ADE20KDataset'),
    num_workers=4,
    persistent_workers=True,
    sampler=dict(shuffle=False, type='DefaultSampler'))
val_evaluator = dict(
    iou_metrics=[
        'mIoU',
    ], type='IoUMetric')
vis_backends = [
    dict(type='LocalVisBackend'),
]
visualizer = dict(
    name='visualizer',
    type='SegLocalVisualizer',
    vis_backends=[
        dict(type='LocalVisBackend'),
    ])
work_dir = '../corruptions/work_dirs/ade20k/mask2former/mask2former_swin-t_8xb2-160k_ade20k-512x512/contrast'

09/21 06:12:20 - mmengine - INFO - Distributed training is not used, all SyncBatchNorm (SyncBN) layers in the model will be automatically reverted to BatchNormXd layers if they are used.
09/21 06:12:20 - mmengine - INFO - Hooks will be executed in the following order:
before_run:
(VERY_HIGH   ) RuntimeInfoHook                    
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
before_train:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_train_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(NORMAL      ) DistSamplerSeedHook                
 -------------------- 
before_train_iter:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_train_iter:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(NORMAL      ) SegVisualizationHook               
(BELOW_NORMAL) LoggerHook                         
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
after_train_epoch:
(NORMAL      ) IterTimerHook                      
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_val:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
before_val_epoch:
(NORMAL      ) IterTimerHook                      
 -------------------- 
before_val_iter:
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_val_iter:
(NORMAL      ) IterTimerHook                      
(NORMAL      ) SegVisualizationHook               
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_val_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
after_val:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
after_train:
(VERY_HIGH   ) RuntimeInfoHook                    
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_test:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
before_test_epoch:
(NORMAL      ) IterTimerHook                      
 -------------------- 
before_test_iter:
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_test_iter:
(NORMAL      ) IterTimerHook                      
(NORMAL      ) SegVisualizationHook               
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_test_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_test:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
after_run:
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
09/21 06:12:20 - mmengine - WARNING - The prefix is not set in metric class IoUMetric.
Loads checkpoint by local backend from path: ../checkpoint_files/ade20k/mask2former/mask2former_swin-t_8xb2-160k_ade20k-512x512_20221203_234230-7d64e5dd.pth
09/21 06:12:21 - mmengine - INFO - Load checkpoint from ../checkpoint_files/ade20k/mask2former/mask2former_swin-t_8xb2-160k_ade20k-512x512_20221203_234230-7d64e5dd.pth
09/21 06:12:39 - mmengine - INFO - Iter(test) [  50/2000]    eta: 0:11:41  time: 0.2495  data_time: 0.0015  memory: 12733  
09/21 06:12:46 - mmengine - INFO - Iter(test) [ 100/2000]    eta: 0:07:49  time: 0.1737  data_time: 0.0015  memory: 12714  
09/21 06:12:51 - mmengine - INFO - Iter(test) [ 150/2000]    eta: 0:06:01  time: 0.0922  data_time: 0.0016  memory: 853  
09/21 06:12:57 - mmengine - INFO - Iter(test) [ 200/2000]    eta: 0:05:17  time: 0.0803  data_time: 0.0016  memory: 12754  
09/21 06:13:02 - mmengine - INFO - Iter(test) [ 250/2000]    eta: 0:04:46  time: 0.0883  data_time: 0.0014  memory: 12756  
09/21 06:13:08 - mmengine - INFO - Iter(test) [ 300/2000]    eta: 0:04:21  time: 0.0942  data_time: 0.0044  memory: 12721  
09/21 06:13:13 - mmengine - INFO - Iter(test) [ 350/2000]    eta: 0:04:04  time: 0.0773  data_time: 0.0014  memory: 12728  
09/21 06:13:18 - mmengine - INFO - Iter(test) [ 400/2000]    eta: 0:03:46  time: 0.0810  data_time: 0.0015  memory: 12694  
09/21 06:13:22 - mmengine - INFO - Iter(test) [ 450/2000]    eta: 0:03:28  time: 0.0835  data_time: 0.0013  memory: 894  
09/21 06:13:26 - mmengine - INFO - Iter(test) [ 500/2000]    eta: 0:03:14  time: 0.0869  data_time: 0.0014  memory: 853  
09/21 06:13:31 - mmengine - INFO - Iter(test) [ 550/2000]    eta: 0:03:03  time: 0.0903  data_time: 0.0015  memory: 961  
09/21 06:13:35 - mmengine - INFO - Iter(test) [ 600/2000]    eta: 0:02:51  time: 0.0813  data_time: 0.0016  memory: 958  
09/21 06:13:40 - mmengine - INFO - Iter(test) [ 650/2000]    eta: 0:02:42  time: 0.1663  data_time: 0.0014  memory: 12735  
09/21 06:13:45 - mmengine - INFO - Iter(test) [ 700/2000]    eta: 0:02:34  time: 0.0867  data_time: 0.0015  memory: 12724  
09/21 06:13:49 - mmengine - INFO - Iter(test) [ 750/2000]    eta: 0:02:26  time: 0.0789  data_time: 0.0013  memory: 1014  
09/21 06:13:53 - mmengine - INFO - Iter(test) [ 800/2000]    eta: 0:02:17  time: 0.0737  data_time: 0.0016  memory: 853  
09/21 06:13:57 - mmengine - INFO - Iter(test) [ 850/2000]    eta: 0:02:08  time: 0.0729  data_time: 0.0015  memory: 826  
09/21 06:14:00 - mmengine - INFO - Iter(test) [ 900/2000]    eta: 0:02:00  time: 0.0703  data_time: 0.0014  memory: 906  
09/21 06:14:04 - mmengine - INFO - Iter(test) [ 950/2000]    eta: 0:01:53  time: 0.0907  data_time: 0.0015  memory: 934  
09/21 06:14:09 - mmengine - INFO - Iter(test) [1000/2000]    eta: 0:01:47  time: 0.0906  data_time: 0.0015  memory: 934  
09/21 06:14:14 - mmengine - INFO - Iter(test) [1050/2000]    eta: 0:01:41  time: 0.0815  data_time: 0.0015  memory: 12737  
09/21 06:14:18 - mmengine - INFO - Iter(test) [1100/2000]    eta: 0:01:35  time: 0.0806  data_time: 0.0016  memory: 931  
09/21 06:14:22 - mmengine - INFO - Iter(test) [1150/2000]    eta: 0:01:29  time: 0.0889  data_time: 0.0015  memory: 904  
09/21 06:14:27 - mmengine - INFO - Iter(test) [1200/2000]    eta: 0:01:23  time: 0.0902  data_time: 0.0015  memory: 1839  
09/21 06:14:32 - mmengine - INFO - Iter(test) [1250/2000]    eta: 0:01:18  time: 0.0779  data_time: 0.0014  memory: 12716  
09/21 06:14:36 - mmengine - INFO - Iter(test) [1300/2000]    eta: 0:01:12  time: 0.0806  data_time: 0.0015  memory: 853  
09/21 06:14:40 - mmengine - INFO - Iter(test) [1350/2000]    eta: 0:01:06  time: 0.0776  data_time: 0.0015  memory: 853  
09/21 06:14:44 - mmengine - INFO - Iter(test) [1400/2000]    eta: 0:01:01  time: 0.0910  data_time: 0.0015  memory: 931  
09/21 06:14:49 - mmengine - INFO - Iter(test) [1450/2000]    eta: 0:00:55  time: 0.0907  data_time: 0.0015  memory: 934  
09/21 06:14:53 - mmengine - INFO - Iter(test) [1500/2000]    eta: 0:00:50  time: 0.0765  data_time: 0.0014  memory: 852  
09/21 06:14:57 - mmengine - INFO - Iter(test) [1550/2000]    eta: 0:00:45  time: 0.0909  data_time: 0.0040  memory: 934  
09/21 06:15:01 - mmengine - INFO - Iter(test) [1600/2000]    eta: 0:00:39  time: 0.0827  data_time: 0.0015  memory: 826  
09/21 06:15:06 - mmengine - INFO - Iter(test) [1650/2000]    eta: 0:00:34  time: 0.0900  data_time: 0.0014  memory: 12725  
09/21 06:15:11 - mmengine - INFO - Iter(test) [1700/2000]    eta: 0:00:29  time: 0.0900  data_time: 0.0015  memory: 930  
09/21 06:15:15 - mmengine - INFO - Iter(test) [1750/2000]    eta: 0:00:24  time: 0.0804  data_time: 0.0015  memory: 957  
09/21 06:15:19 - mmengine - INFO - Iter(test) [1800/2000]    eta: 0:00:19  time: 0.0803  data_time: 0.0016  memory: 853  
09/21 06:15:23 - mmengine - INFO - Iter(test) [1850/2000]    eta: 0:00:14  time: 0.0952  data_time: 0.0016  memory: 773  
09/21 06:15:28 - mmengine - INFO - Iter(test) [1900/2000]    eta: 0:00:09  time: 0.0880  data_time: 0.0014  memory: 987  
09/21 06:15:32 - mmengine - INFO - Iter(test) [1950/2000]    eta: 0:00:04  time: 0.0804  data_time: 0.0016  memory: 1224  
09/21 06:15:36 - mmengine - INFO - Iter(test) [2000/2000]    eta: 0:00:00  time: 0.0877  data_time: 0.0014  memory: 1012  
09/21 06:15:36 - mmengine - INFO - per class results:
09/21 06:15:36 - mmengine - INFO - 
+---------------------+-------+-------+
|        Class        |  IoU  |  Acc  |
+---------------------+-------+-------+
|         wall        | 76.93 | 87.86 |
|       building      | 81.86 | 92.13 |
|         sky         | 94.05 | 96.89 |
|        floor        | 81.32 | 90.47 |
|         tree        | 72.96 | 86.22 |
|       ceiling       | 83.19 | 90.61 |
|         road        | 83.27 | 88.74 |
|         bed         | 88.88 | 95.05 |
|      windowpane     | 60.57 | 77.45 |
|        grass        | 64.29 | 77.77 |
|       cabinet       |  57.9 | 73.12 |
|       sidewalk      | 65.37 | 81.77 |
|        person       |  81.7 | 89.31 |
|        earth        | 36.14 | 49.95 |
|         door        | 44.03 | 59.36 |
|        table        | 60.16 | 77.19 |
|       mountain      | 63.81 | 80.97 |
|        plant        | 51.63 | 62.13 |
|       curtain       | 75.67 | 85.51 |
|        chair        | 56.77 | 72.89 |
|         car         | 84.28 | 91.66 |
|        water        | 49.54 | 69.58 |
|       painting      | 67.18 | 87.72 |
|         sofa        | 66.72 | 80.28 |
|        shelf        | 38.27 | 53.94 |
|        house        | 45.55 | 56.36 |
|         sea         | 53.29 | 75.53 |
|        mirror       | 69.79 | 78.36 |
|         rug         | 65.75 | 75.44 |
|        field        | 25.74 | 45.04 |
|       armchair      | 43.98 | 65.74 |
|         seat        | 62.17 | 81.09 |
|        fence        | 41.42 | 58.29 |
|         desk        | 49.01 | 67.22 |
|         rock        | 50.75 | 74.68 |
|       wardrobe      | 51.84 | 65.81 |
|         lamp        | 66.16 |  78.7 |
|       bathtub       | 71.49 | 83.38 |
|       railing       |  36.4 | 52.95 |
|       cushion       | 53.03 | 64.45 |
|         base        | 25.83 | 48.39 |
|         box         | 24.65 | 35.63 |
|        column       | 45.62 | 56.88 |
|      signboard      | 37.69 | 56.94 |
|   chest of drawers  | 43.47 | 60.12 |
|       counter       | 34.73 | 51.38 |
|         sand        | 31.68 | 55.61 |
|         sink        | 69.22 | 81.57 |
|      skyscraper     | 44.79 | 55.53 |
|      fireplace      | 70.45 | 86.99 |
|     refrigerator    | 76.88 | 80.59 |
|      grandstand     | 41.17 | 68.84 |
|         path        |  18.8 | 28.16 |
|        stairs       | 33.01 | 40.19 |
|        runway       | 68.73 | 95.21 |
|         case        | 37.99 | 49.54 |
|      pool table     | 92.31 | 94.67 |
|        pillow       | 57.14 | 71.23 |
|     screen door     | 51.47 | 63.75 |
|       stairway      | 34.49 | 46.23 |
|        river        | 14.17 | 23.35 |
|        bridge       | 72.21 | 83.98 |
|       bookcase      | 35.83 |  45.4 |
|        blind        | 45.58 | 55.93 |
|     coffee table    |  62.8 | 83.51 |
|        toilet       | 82.17 | 86.98 |
|        flower       |  44.1 | 57.65 |
|         book        | 49.09 | 68.95 |
|         hill        |  9.77 | 11.69 |
|        bench        | 37.18 | 49.59 |
|      countertop     | 62.06 | 84.11 |
|        stove        | 77.25 | 82.95 |
|         palm        | 48.72 | 67.45 |
|    kitchen island   | 38.22 | 68.29 |
|       computer      |  55.9 | 63.91 |
|     swivel chair    |  42.6 | 55.99 |
|         boat        | 36.17 | 51.68 |
|         bar         | 59.26 | 63.82 |
|    arcade machine   | 20.81 | 22.42 |
|        hovel        | 35.18 | 52.79 |
|         bus         | 89.18 | 96.07 |
|        towel        | 61.28 | 74.63 |
|        light        | 59.83 | 71.42 |
|        truck        | 28.82 | 47.56 |
|        tower        | 42.77 | 52.79 |
|      chandelier     | 69.63 | 81.31 |
|        awning       | 31.55 | 35.52 |
|     streetlight     | 31.75 | 44.05 |
|        booth        | 55.13 | 62.22 |
| television receiver | 52.19 | 68.48 |
|       airplane      | 55.31 | 65.85 |
|      dirt track     |  7.38 | 23.29 |
|       apparel       | 27.22 | 41.31 |
|         pole        |  27.2 | 40.54 |
|         land        |  4.51 |  5.9  |
|      bannister      | 17.93 | 26.28 |
|      escalator      | 27.33 | 29.15 |
|       ottoman       |  43.7 | 66.08 |
|        bottle       | 34.98 | 57.09 |
|        buffet       | 27.74 | 36.03 |
|        poster       | 19.78 | 30.44 |
|        stage        |  7.77 |  9.39 |
|         van         | 53.16 | 69.05 |
|         ship        |  7.43 | 10.25 |
|       fountain      |  6.02 |  6.2  |
|    conveyer belt    | 78.77 | 90.47 |
|        canopy       | 24.76 | 44.38 |
|        washer       | 63.47 | 72.61 |
|      plaything      | 26.97 | 53.62 |
|    swimming pool    |  25.7 | 43.07 |
|        stool        | 41.82 | 58.24 |
|        barrel       | 62.29 | 74.42 |
|        basket       | 27.02 | 34.29 |
|      waterfall      | 50.71 | 55.73 |
|         tent        | 74.46 | 98.15 |
|         bag         | 15.89 | 19.44 |
|       minibike      | 54.69 | 62.97 |
|        cradle       | 71.75 | 81.83 |
|         oven        | 21.79 | 60.53 |
|         ball        | 48.54 | 55.66 |
|         food        | 46.77 | 53.85 |
|         step        |  6.73 | 10.17 |
|         tank        | 22.53 | 23.82 |
|      trade name     | 22.95 | 28.38 |
|      microwave      | 39.75 | 43.16 |
|         pot         | 44.81 | 52.59 |
|        animal       | 62.35 |  64.3 |
|       bicycle       | 58.91 | 81.07 |
|         lake        | 67.67 | 73.34 |
|      dishwasher     | 61.16 | 76.58 |
|        screen       | 53.74 | 72.21 |
|       blanket       | 16.78 | 20.12 |
|      sculpture      | 39.01 | 65.03 |
|         hood        |  68.2 |  71.7 |
|        sconce       | 51.16 |  65.6 |
|         vase        | 43.22 | 65.87 |
|    traffic light    | 36.53 | 49.13 |
|         tray        | 11.89 | 24.11 |
|        ashcan       | 40.39 | 58.87 |
|         fan         | 56.83 | 73.51 |
|         pier        | 31.28 |  45.0 |
|      crt screen     |  0.26 |  0.76 |
|        plate        | 53.75 | 69.14 |
|       monitor       |  0.46 |  0.61 |
|    bulletin board   | 47.37 | 65.93 |
|        shower       |  2.84 | 18.92 |
|       radiator      | 62.63 | 76.41 |
|        glass        | 18.49 | 22.16 |
|        clock        | 29.48 | 37.23 |
|         flag        | 34.68 | 38.17 |
+---------------------+-------+-------+
09/21 06:15:36 - mmengine - INFO - Iter(test) [2000/2000]    aAcc: 82.3500  mIoU: 47.0200  mAcc: 59.5600  data_time: 0.0017  time: 0.0973
Finished processing corruption type: contrast
Processing corruption type: elastic_transform
09/21 06:15:41 - mmengine - INFO - 
------------------------------------------------------------
System environment:
    sys.platform: linux
    Python: 3.10.13 | packaged by conda-forge | (main, Dec 23 2023, 15:36:39) [GCC 12.3.0]
    CUDA available: True
    MUSA available: False
    numpy_random_seed: 2131724832
    GPU 0: Tesla V100-SXM2-32GB
    CUDA_HOME: /opt/bwhpc/common/devel/cuda/11.7
    NVCC: Cuda compilation tools, release 11.7, V11.7.99
    GCC: gcc (GCC) 8.5.0 20210514 (Red Hat 8.5.0-18)
    PyTorch: 1.13.1
    PyTorch compiling details: PyTorch built with:
  - GCC 9.3
  - C++ Version: 201402
  - Intel(R) oneAPI Math Kernel Library Version 2023.1-Product Build 20230303 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v2.6.0 (Git Hash 52b5f107dd9cf10910aaa19cb47f3abf9b349815)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - LAPACK is enabled (usually provided by MKL)
  - NNPACK is enabled
  - CPU capability usage: AVX2
  - CUDA Runtime 11.7
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_61,code=sm_61;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86;-gencode;arch=compute_37,code=compute_37
  - CuDNN 8.5
  - Magma 2.6.1
  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.7, CUDNN_VERSION=8.5.0, CXX_COMPILER=/opt/rh/devtoolset-9/root/usr/bin/c++, CXX_FLAGS= -fabi-version=11 -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -DEDGE_PROFILER_USE_KINETO -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Werror=non-virtual-dtor -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wunused-local-typedefs -Wno-unused-parameter -Wno-unused-function -Wno-unused-result -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Werror=cast-function-type -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.13.1, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, USE_ROCM=OFF, 

    TorchVision: 0.14.1
    OpenCV: 3.4.18
    MMEngine: 0.10.4

Runtime environment:
    cudnn_benchmark: True
    mp_cfg: {'mp_start_method': 'fork', 'opencv_num_threads': 0}
    dist_cfg: {'backend': 'nccl'}
    seed: 2131724832
    Distributed launcher: none
    Distributed training: False
    GPU number: 1
------------------------------------------------------------

09/21 06:15:41 - mmengine - INFO - Config:
auto_scale_lr = dict(base_batch_size=16, enable=False)
backbone_embed_multi = dict(decay_mult=0.0, lr_mult=0.1)
backbone_norm_multi = dict(decay_mult=0.0, lr_mult=0.1)
crop_size = (
    512,
    512,
)
custom_imports = dict(allow_failed_imports=False, imports='mmdet.models')
custom_keys = dict({
    'absolute_pos_embed':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone':
    dict(decay_mult=1.0, lr_mult=0.1),
    'backbone.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.patch_embed.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.0.blocks.0.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.0.blocks.1.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.0.downsample.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.1.blocks.0.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.1.blocks.1.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.1.downsample.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.0.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.1.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.2.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.3.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.4.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.5.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.downsample.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.3.blocks.0.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.3.blocks.1.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'level_embed':
    dict(decay_mult=0.0, lr_mult=1.0),
    'query_embed':
    dict(decay_mult=0.0, lr_mult=1.0),
    'query_feat':
    dict(decay_mult=0.0, lr_mult=1.0),
    'relative_position_bias_table':
    dict(decay_mult=0.0, lr_mult=0.1)
})
data_root = 'data/ade/ADEChallengeData2016'
dataset_type = 'ADE20KDataset'
default_hooks = dict(
    checkpoint=dict(
        by_epoch=False, interval=5000, save_best='mIoU',
        type='CheckpointHook'),
    logger=dict(interval=50, log_metric_by_epoch=False, type='LoggerHook'),
    param_scheduler=dict(type='ParamSchedulerHook'),
    sampler_seed=dict(type='DistSamplerSeedHook'),
    timer=dict(type='IterTimerHook'),
    visualization=dict(type='SegVisualizationHook'))
default_scope = 'mmseg'
depths = [
    2,
    2,
    6,
    2,
]
embed_multi = dict(decay_mult=0.0, lr_mult=1.0)
env_cfg = dict(
    cudnn_benchmark=True,
    dist_cfg=dict(backend='nccl'),
    mp_cfg=dict(mp_start_method='fork', opencv_num_threads=0))
img_ratios = [
    0.5,
    0.75,
    1.0,
    1.25,
    1.5,
    1.75,
]
launcher = 'none'
load_from = '../checkpoint_files/ade20k/mask2former/mask2former_swin-t_8xb2-160k_ade20k-512x512_20221203_234230-7d64e5dd.pth'
log_level = 'INFO'
log_processor = dict(by_epoch=False)
model = dict(
    backbone=dict(
        attn_drop_rate=0.0,
        depths=[
            2,
            2,
            6,
            2,
        ],
        drop_path_rate=0.3,
        drop_rate=0.0,
        embed_dims=96,
        frozen_stages=-1,
        init_cfg=dict(
            checkpoint=
            'https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/swin/swin_tiny_patch4_window7_224_20220317-1cdeb081.pth',
            type='Pretrained'),
        mlp_ratio=4,
        num_heads=[
            3,
            6,
            12,
            24,
        ],
        out_indices=(
            0,
            1,
            2,
            3,
        ),
        patch_norm=True,
        qk_scale=None,
        qkv_bias=True,
        type='SwinTransformer',
        window_size=7,
        with_cp=False),
    data_preprocessor=dict(
        bgr_to_rgb=True,
        corruption='elastic_transform',
        mean=[
            123.675,
            116.28,
            103.53,
        ],
        pad_val=0,
        seg_pad_val=255,
        size=(
            512,
            512,
        ),
        std=[
            58.395,
            57.12,
            57.375,
        ],
        test_cfg=dict(size_divisor=32),
        type='SegDataPreProcessor'),
    decode_head=dict(
        align_corners=False,
        enforce_decoder_input_project=False,
        feat_channels=256,
        in_channels=[
            96,
            192,
            384,
            768,
        ],
        loss_cls=dict(
            class_weight=[
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                0.1,
            ],
            loss_weight=2.0,
            reduction='mean',
            type='mmdet.CrossEntropyLoss',
            use_sigmoid=False),
        loss_dice=dict(
            activate=True,
            eps=1.0,
            loss_weight=5.0,
            naive_dice=True,
            reduction='mean',
            type='mmdet.DiceLoss',
            use_sigmoid=True),
        loss_mask=dict(
            loss_weight=5.0,
            reduction='mean',
            type='mmdet.CrossEntropyLoss',
            use_sigmoid=True),
        num_classes=150,
        num_queries=100,
        num_transformer_feat_level=3,
        out_channels=256,
        pixel_decoder=dict(
            act_cfg=dict(type='ReLU'),
            encoder=dict(
                init_cfg=None,
                layer_cfg=dict(
                    ffn_cfg=dict(
                        act_cfg=dict(inplace=True, type='ReLU'),
                        embed_dims=256,
                        feedforward_channels=1024,
                        ffn_drop=0.0,
                        num_fcs=2),
                    self_attn_cfg=dict(
                        batch_first=True,
                        dropout=0.0,
                        embed_dims=256,
                        im2col_step=64,
                        init_cfg=None,
                        norm_cfg=None,
                        num_heads=8,
                        num_levels=3,
                        num_points=4)),
                num_layers=6),
            init_cfg=None,
            norm_cfg=dict(num_groups=32, type='GN'),
            num_outs=3,
            positional_encoding=dict(normalize=True, num_feats=128),
            type='mmdet.MSDeformAttnPixelDecoder'),
        positional_encoding=dict(normalize=True, num_feats=128),
        strides=[
            4,
            8,
            16,
            32,
        ],
        train_cfg=dict(
            assigner=dict(
                match_costs=[
                    dict(type='mmdet.ClassificationCost', weight=2.0),
                    dict(
                        type='mmdet.CrossEntropyLossCost',
                        use_sigmoid=True,
                        weight=5.0),
                    dict(
                        eps=1.0,
                        pred_act=True,
                        type='mmdet.DiceCost',
                        weight=5.0),
                ],
                type='mmdet.HungarianAssigner'),
            importance_sample_ratio=0.75,
            num_points=12544,
            oversample_ratio=3.0,
            sampler=dict(type='mmdet.MaskPseudoSampler')),
        transformer_decoder=dict(
            init_cfg=None,
            layer_cfg=dict(
                cross_attn_cfg=dict(
                    attn_drop=0.0,
                    batch_first=True,
                    dropout_layer=None,
                    embed_dims=256,
                    num_heads=8,
                    proj_drop=0.0),
                ffn_cfg=dict(
                    act_cfg=dict(inplace=True, type='ReLU'),
                    add_identity=True,
                    dropout_layer=None,
                    embed_dims=256,
                    feedforward_channels=2048,
                    ffn_drop=0.0,
                    num_fcs=2),
                self_attn_cfg=dict(
                    attn_drop=0.0,
                    batch_first=True,
                    dropout_layer=None,
                    embed_dims=256,
                    num_heads=8,
                    proj_drop=0.0)),
            num_layers=9,
            return_intermediate=True),
        type='Mask2FormerHead'),
    test_cfg=dict(mode='whole'),
    train_cfg=dict(),
    type='EncoderDecoder')
num_classes = 150
optim_wrapper = dict(
    clip_grad=dict(max_norm=0.01, norm_type=2),
    optimizer=dict(
        betas=(
            0.9,
            0.999,
        ),
        eps=1e-08,
        lr=0.0001,
        type='AdamW',
        weight_decay=0.05),
    paramwise_cfg=dict(
        custom_keys=dict({
            'absolute_pos_embed':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone':
            dict(decay_mult=1.0, lr_mult=0.1),
            'backbone.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.patch_embed.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.0.blocks.0.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.0.blocks.1.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.0.downsample.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.1.blocks.0.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.1.blocks.1.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.1.downsample.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.0.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.1.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.2.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.3.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.4.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.5.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.downsample.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.3.blocks.0.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.3.blocks.1.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'level_embed':
            dict(decay_mult=0.0, lr_mult=1.0),
            'query_embed':
            dict(decay_mult=0.0, lr_mult=1.0),
            'query_feat':
            dict(decay_mult=0.0, lr_mult=1.0),
            'relative_position_bias_table':
            dict(decay_mult=0.0, lr_mult=0.1)
        }),
        norm_decay_mult=0.0),
    type='OptimWrapper')
optimizer = dict(
    betas=(
        0.9,
        0.999,
    ),
    eps=1e-08,
    lr=0.0001,
    type='AdamW',
    weight_decay=0.05)
param_scheduler = [
    dict(
        begin=0,
        by_epoch=False,
        end=160000,
        eta_min=0,
        power=0.9,
        type='PolyLR'),
]
pretrained = 'https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/swin/swin_tiny_patch4_window7_224_20220317-1cdeb081.pth'
resume = False
test_cfg = dict(type='TestLoop')
test_dataloader = dict(
    batch_size=1,
    dataset=dict(
        data_prefix=dict(
            img_path='images/validation',
            seg_map_path='annotations/validation'),
        data_root='data/ade/ADEChallengeData2016',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(keep_ratio=True, scale=(
                2048,
                512,
            ), type='Resize'),
            dict(reduce_zero_label=True, type='LoadAnnotations'),
            dict(type='PackSegInputs'),
        ],
        type='ADE20KDataset'),
    num_workers=4,
    persistent_workers=True,
    sampler=dict(shuffle=False, type='DefaultSampler'))
test_evaluator = dict(
    iou_metrics=[
        'mIoU',
    ], type='IoUMetric')
test_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(keep_ratio=True, scale=(
        2048,
        512,
    ), type='Resize'),
    dict(reduce_zero_label=True, type='LoadAnnotations'),
    dict(type='PackSegInputs'),
]
train_cfg = dict(
    max_iters=160000, type='IterBasedTrainLoop', val_interval=5000)
train_dataloader = dict(
    batch_size=2,
    dataset=dict(
        data_prefix=dict(
            img_path='images/training', seg_map_path='annotations/training'),
        data_root='data/ade/ADEChallengeData2016',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(reduce_zero_label=True, type='LoadAnnotations'),
            dict(
                max_size=2048,
                resize_type='ResizeShortestEdge',
                scales=[
                    256,
                    307,
                    358,
                    409,
                    460,
                    512,
                    563,
                    614,
                    665,
                    716,
                    768,
                    819,
                    870,
                    921,
                    972,
                    1024,
                ],
                type='RandomChoiceResize'),
            dict(
                cat_max_ratio=0.75, crop_size=(
                    512,
                    512,
                ), type='RandomCrop'),
            dict(prob=0.5, type='RandomFlip'),
            dict(type='PhotoMetricDistortion'),
            dict(type='PackSegInputs'),
        ],
        type='ADE20KDataset'),
    num_workers=4,
    persistent_workers=True,
    sampler=dict(shuffle=True, type='InfiniteSampler'))
train_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(reduce_zero_label=True, type='LoadAnnotations'),
    dict(
        max_size=2048,
        resize_type='ResizeShortestEdge',
        scales=[
            256,
            307,
            358,
            409,
            460,
            512,
            563,
            614,
            665,
            716,
            768,
            819,
            870,
            921,
            972,
            1024,
        ],
        type='RandomChoiceResize'),
    dict(cat_max_ratio=0.75, crop_size=(
        512,
        512,
    ), type='RandomCrop'),
    dict(prob=0.5, type='RandomFlip'),
    dict(type='PhotoMetricDistortion'),
    dict(type='PackSegInputs'),
]
tta_model = dict(type='SegTTAModel')
tta_pipeline = [
    dict(backend_args=None, type='LoadImageFromFile'),
    dict(
        transforms=[
            [
                dict(keep_ratio=True, scale_factor=0.5, type='Resize'),
                dict(keep_ratio=True, scale_factor=0.75, type='Resize'),
                dict(keep_ratio=True, scale_factor=1.0, type='Resize'),
                dict(keep_ratio=True, scale_factor=1.25, type='Resize'),
                dict(keep_ratio=True, scale_factor=1.5, type='Resize'),
                dict(keep_ratio=True, scale_factor=1.75, type='Resize'),
            ],
            [
                dict(direction='horizontal', prob=0.0, type='RandomFlip'),
                dict(direction='horizontal', prob=1.0, type='RandomFlip'),
            ],
            [
                dict(type='LoadAnnotations'),
            ],
            [
                dict(type='PackSegInputs'),
            ],
        ],
        type='TestTimeAug'),
]
val_cfg = dict(type='ValLoop')
val_dataloader = dict(
    batch_size=1,
    dataset=dict(
        data_prefix=dict(
            img_path='images/validation',
            seg_map_path='annotations/validation'),
        data_root='data/ade/ADEChallengeData2016',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(keep_ratio=True, scale=(
                2048,
                512,
            ), type='Resize'),
            dict(reduce_zero_label=True, type='LoadAnnotations'),
            dict(type='PackSegInputs'),
        ],
        type='ADE20KDataset'),
    num_workers=4,
    persistent_workers=True,
    sampler=dict(shuffle=False, type='DefaultSampler'))
val_evaluator = dict(
    iou_metrics=[
        'mIoU',
    ], type='IoUMetric')
vis_backends = [
    dict(type='LocalVisBackend'),
]
visualizer = dict(
    name='visualizer',
    type='SegLocalVisualizer',
    vis_backends=[
        dict(type='LocalVisBackend'),
    ])
work_dir = '../corruptions/work_dirs/ade20k/mask2former/mask2former_swin-t_8xb2-160k_ade20k-512x512/elastic_transform'

09/21 06:15:44 - mmengine - INFO - Distributed training is not used, all SyncBatchNorm (SyncBN) layers in the model will be automatically reverted to BatchNormXd layers if they are used.
09/21 06:15:44 - mmengine - INFO - Hooks will be executed in the following order:
before_run:
(VERY_HIGH   ) RuntimeInfoHook                    
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
before_train:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_train_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(NORMAL      ) DistSamplerSeedHook                
 -------------------- 
before_train_iter:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_train_iter:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(NORMAL      ) SegVisualizationHook               
(BELOW_NORMAL) LoggerHook                         
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
after_train_epoch:
(NORMAL      ) IterTimerHook                      
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_val:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
before_val_epoch:
(NORMAL      ) IterTimerHook                      
 -------------------- 
before_val_iter:
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_val_iter:
(NORMAL      ) IterTimerHook                      
(NORMAL      ) SegVisualizationHook               
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_val_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
after_val:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
after_train:
(VERY_HIGH   ) RuntimeInfoHook                    
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_test:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
before_test_epoch:
(NORMAL      ) IterTimerHook                      
 -------------------- 
before_test_iter:
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_test_iter:
(NORMAL      ) IterTimerHook                      
(NORMAL      ) SegVisualizationHook               
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_test_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_test:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
after_run:
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
09/21 06:15:44 - mmengine - WARNING - The prefix is not set in metric class IoUMetric.
Loads checkpoint by local backend from path: ../checkpoint_files/ade20k/mask2former/mask2former_swin-t_8xb2-160k_ade20k-512x512_20221203_234230-7d64e5dd.pth
09/21 06:15:45 - mmengine - INFO - Load checkpoint from ../checkpoint_files/ade20k/mask2former/mask2former_swin-t_8xb2-160k_ade20k-512x512_20221203_234230-7d64e5dd.pth
09/21 06:16:49 - mmengine - INFO - Iter(test) [  50/2000]    eta: 0:40:58  time: 1.2135  data_time: 0.0016  memory: 12733  
09/21 06:17:40 - mmengine - INFO - Iter(test) [ 100/2000]    eta: 0:36:19  time: 1.0881  data_time: 0.0016  memory: 12714  
09/21 06:18:30 - mmengine - INFO - Iter(test) [ 150/2000]    eta: 0:33:48  time: 1.0354  data_time: 0.0016  memory: 853  
09/21 06:19:22 - mmengine - INFO - Iter(test) [ 200/2000]    eta: 0:32:28  time: 0.9737  data_time: 0.0015  memory: 12754  
09/21 06:20:12 - mmengine - INFO - Iter(test) [ 250/2000]    eta: 0:31:03  time: 0.9831  data_time: 0.0015  memory: 12756  
09/21 06:21:00 - mmengine - INFO - Iter(test) [ 300/2000]    eta: 0:29:42  time: 0.9927  data_time: 0.0016  memory: 12721  
09/21 06:21:51 - mmengine - INFO - Iter(test) [ 350/2000]    eta: 0:28:41  time: 0.9515  data_time: 0.0015  memory: 12728  
09/21 06:22:40 - mmengine - INFO - Iter(test) [ 400/2000]    eta: 0:27:37  time: 0.9848  data_time: 0.0014  memory: 12694  
09/21 06:23:25 - mmengine - INFO - Iter(test) [ 450/2000]    eta: 0:26:21  time: 0.9027  data_time: 0.0015  memory: 894  
09/21 06:24:14 - mmengine - INFO - Iter(test) [ 500/2000]    eta: 0:25:24  time: 0.9681  data_time: 0.0014  memory: 853  
09/21 06:25:06 - mmengine - INFO - Iter(test) [ 550/2000]    eta: 0:24:36  time: 1.0291  data_time: 0.0016  memory: 961  
09/21 06:25:55 - mmengine - INFO - Iter(test) [ 600/2000]    eta: 0:23:40  time: 1.0224  data_time: 0.0016  memory: 958  
09/21 06:26:44 - mmengine - INFO - Iter(test) [ 650/2000]    eta: 0:22:47  time: 1.0654  data_time: 0.0014  memory: 12735  
09/21 06:27:36 - mmengine - INFO - Iter(test) [ 700/2000]    eta: 0:21:59  time: 1.0186  data_time: 0.0016  memory: 12724  
09/21 06:28:26 - mmengine - INFO - Iter(test) [ 750/2000]    eta: 0:21:06  time: 0.9562  data_time: 0.0014  memory: 1014  
09/21 06:29:12 - mmengine - INFO - Iter(test) [ 800/2000]    eta: 0:20:09  time: 0.9776  data_time: 0.0016  memory: 853  
09/21 06:30:01 - mmengine - INFO - Iter(test) [ 850/2000]    eta: 0:19:17  time: 0.9953  data_time: 0.0042  memory: 826  
09/21 06:30:46 - mmengine - INFO - Iter(test) [ 900/2000]    eta: 0:18:20  time: 0.8743  data_time: 0.0014  memory: 906  
09/21 06:31:38 - mmengine - INFO - Iter(test) [ 950/2000]    eta: 0:17:32  time: 1.0300  data_time: 0.0017  memory: 934  
09/21 06:32:25 - mmengine - INFO - Iter(test) [1000/2000]    eta: 0:16:39  time: 0.9400  data_time: 0.0015  memory: 934  
09/21 06:33:16 - mmengine - INFO - Iter(test) [1050/2000]    eta: 0:15:50  time: 1.0160  data_time: 0.0015  memory: 12737  
09/21 06:34:07 - mmengine - INFO - Iter(test) [1100/2000]    eta: 0:15:01  time: 0.9605  data_time: 0.0018  memory: 931  
09/21 06:34:55 - mmengine - INFO - Iter(test) [1150/2000]    eta: 0:14:09  time: 0.9650  data_time: 0.0017  memory: 904  
09/21 06:35:44 - mmengine - INFO - Iter(test) [1200/2000]    eta: 0:13:18  time: 0.9573  data_time: 0.0017  memory: 1839  
09/21 06:36:31 - mmengine - INFO - Iter(test) [1250/2000]    eta: 0:12:27  time: 0.9271  data_time: 0.0015  memory: 12716  
09/21 06:37:17 - mmengine - INFO - Iter(test) [1300/2000]    eta: 0:11:35  time: 0.9736  data_time: 0.0016  memory: 853  
09/21 06:38:05 - mmengine - INFO - Iter(test) [1350/2000]    eta: 0:10:44  time: 0.9132  data_time: 0.0015  memory: 853  
09/21 06:38:53 - mmengine - INFO - Iter(test) [1400/2000]    eta: 0:09:54  time: 0.9978  data_time: 0.0016  memory: 931  
09/21 06:39:39 - mmengine - INFO - Iter(test) [1450/2000]    eta: 0:09:03  time: 1.0156  data_time: 0.0016  memory: 934  
09/21 06:40:26 - mmengine - INFO - Iter(test) [1500/2000]    eta: 0:08:13  time: 0.9016  data_time: 0.0041  memory: 852  
09/21 06:41:16 - mmengine - INFO - Iter(test) [1550/2000]    eta: 0:07:24  time: 0.9783  data_time: 0.0016  memory: 934  
09/21 06:42:03 - mmengine - INFO - Iter(test) [1600/2000]    eta: 0:06:34  time: 0.9629  data_time: 0.0017  memory: 826  
09/21 06:42:50 - mmengine - INFO - Iter(test) [1650/2000]    eta: 0:05:44  time: 0.8611  data_time: 0.0015  memory: 12725  
09/21 06:43:38 - mmengine - INFO - Iter(test) [1700/2000]    eta: 0:04:55  time: 0.9777  data_time: 0.0016  memory: 930  
09/21 06:44:27 - mmengine - INFO - Iter(test) [1750/2000]    eta: 0:04:05  time: 0.9491  data_time: 0.0015  memory: 957  
09/21 06:45:14 - mmengine - INFO - Iter(test) [1800/2000]    eta: 0:03:16  time: 0.9707  data_time: 0.0017  memory: 853  
09/21 06:46:02 - mmengine - INFO - Iter(test) [1850/2000]    eta: 0:02:27  time: 0.9855  data_time: 0.0017  memory: 773  
09/21 06:46:48 - mmengine - INFO - Iter(test) [1900/2000]    eta: 0:01:37  time: 0.9275  data_time: 0.0015  memory: 987  
09/21 06:47:36 - mmengine - INFO - Iter(test) [1950/2000]    eta: 0:00:48  time: 0.9336  data_time: 0.0015  memory: 1224  
09/21 06:48:22 - mmengine - INFO - Iter(test) [2000/2000]    eta: 0:00:00  time: 0.8840  data_time: 0.0014  memory: 1012  
09/21 06:48:22 - mmengine - INFO - per class results:
09/21 06:48:22 - mmengine - INFO - 
+---------------------+-------+-------+
|        Class        |  IoU  |  Acc  |
+---------------------+-------+-------+
|         wall        | 62.57 | 76.74 |
|       building      |  74.2 | 86.78 |
|         sky         | 84.34 | 90.99 |
|        floor        | 69.15 | 81.69 |
|         tree        | 62.58 | 78.16 |
|       ceiling       | 69.25 | 81.08 |
|         road        | 75.06 | 84.69 |
|         bed         | 77.49 |  88.0 |
|      windowpane     | 48.28 | 68.06 |
|        grass        | 57.81 | 72.82 |
|       cabinet       | 48.91 |  63.5 |
|       sidewalk      |  52.0 | 69.82 |
|        person       | 59.86 | 74.68 |
|        earth        | 36.07 | 47.64 |
|         door        | 38.31 | 52.58 |
|        table        | 42.91 | 62.19 |
|       mountain      | 51.48 | 70.65 |
|        plant        | 42.73 | 59.09 |
|       curtain       | 52.69 | 73.54 |
|        chair        | 38.81 | 57.35 |
|         car         | 61.41 | 76.12 |
|        water        |  47.6 | 63.85 |
|       painting      | 46.09 | 68.54 |
|         sofa        | 51.94 | 70.08 |
|        shelf        | 31.62 | 49.13 |
|        house        |  36.3 |  47.1 |
|         sea         | 49.33 | 69.28 |
|        mirror       | 51.76 | 67.51 |
|         rug         | 53.21 | 67.47 |
|        field        | 24.63 | 41.74 |
|       armchair      | 31.57 | 53.04 |
|         seat        | 52.87 | 71.71 |
|        fence        |  29.7 | 47.07 |
|         desk        | 37.55 | 58.24 |
|         rock        | 35.84 | 60.22 |
|       wardrobe      | 44.65 | 60.45 |
|         lamp        | 31.45 | 49.79 |
|       bathtub       | 61.08 | 74.83 |
|       railing       | 26.27 |  41.3 |
|       cushion       |  38.2 |  52.7 |
|         base        | 22.12 |  42.0 |
|         box         | 17.11 | 29.09 |
|        column       | 25.68 | 41.12 |
|      signboard      | 21.01 | 36.65 |
|   chest of drawers  | 32.04 |  58.2 |
|       counter       | 18.85 | 27.41 |
|         sand        |  36.9 | 62.82 |
|         sink        | 47.34 | 63.07 |
|      skyscraper     | 43.06 | 54.92 |
|      fireplace      |  57.2 | 78.16 |
|     refrigerator    | 62.06 | 73.09 |
|      grandstand     | 40.05 | 67.67 |
|         path        | 20.05 | 29.82 |
|        stairs       | 23.61 | 29.63 |
|        runway       | 56.67 | 72.97 |
|         case        | 41.16 | 46.77 |
|      pool table     | 75.29 | 85.56 |
|        pillow       | 41.76 | 57.02 |
|     screen door     | 47.93 | 63.27 |
|       stairway      | 22.87 | 35.43 |
|        river        | 12.53 | 20.75 |
|        bridge       | 53.14 | 71.81 |
|       bookcase      | 21.93 | 31.01 |
|        blind        | 40.01 | 51.47 |
|     coffee table    | 47.74 | 67.39 |
|        toilet       | 55.48 | 68.49 |
|        flower       | 30.26 | 46.54 |
|         book        | 33.03 | 53.58 |
|         hill        | 13.83 | 20.69 |
|        bench        |  36.6 | 49.22 |
|      countertop     | 41.83 | 62.02 |
|        stove        | 61.46 | 76.39 |
|         palm        | 38.09 | 64.56 |
|    kitchen island   | 34.21 | 57.68 |
|       computer      | 52.37 | 65.53 |
|     swivel chair    | 35.09 | 53.85 |
|         boat        |  28.1 | 42.96 |
|         bar         | 42.79 | 56.94 |
|    arcade machine   | 29.33 |  34.6 |
|        hovel        | 27.03 | 42.62 |
|         bus         | 64.43 | 78.74 |
|        towel        | 42.71 | 57.81 |
|        light        | 17.24 | 30.61 |
|        truck        | 21.62 | 44.85 |
|        tower        | 16.91 | 29.79 |
|      chandelier     | 40.92 | 57.12 |
|        awning       | 21.54 | 30.41 |
|     streetlight     | 11.75 | 21.02 |
|        booth        | 48.33 | 59.84 |
| television receiver | 41.48 |  61.1 |
|       airplane      |  33.1 | 47.56 |
|      dirt track     |  5.52 | 16.74 |
|       apparel       | 19.75 |  39.7 |
|         pole        | 12.02 | 22.81 |
|         land        |  1.18 |  1.55 |
|      bannister      |  8.09 | 15.24 |
|      escalator      | 23.11 | 24.27 |
|       ottoman       | 38.07 | 55.66 |
|        bottle       | 19.27 | 36.69 |
|        buffet       | 35.47 | 44.65 |
|        poster       | 23.56 |  38.6 |
|        stage        |  6.64 | 16.96 |
|         van         | 31.01 | 50.32 |
|         ship        | 55.62 | 84.03 |
|       fountain      | 21.46 | 24.31 |
|    conveyer belt    |  52.0 | 81.47 |
|        canopy       | 22.03 | 35.97 |
|        washer       | 62.67 | 68.55 |
|      plaything      | 14.29 | 30.43 |
|    swimming pool    | 27.31 | 48.93 |
|        stool        | 24.34 | 37.28 |
|        barrel       | 21.43 | 54.14 |
|        basket       | 25.16 | 40.86 |
|      waterfall      |  35.6 | 49.76 |
|         tent        | 74.88 | 93.63 |
|         bag         |  7.51 | 11.24 |
|       minibike      | 51.73 | 73.73 |
|        cradle       | 65.43 | 77.39 |
|         oven        | 10.76 | 29.05 |
|         ball        | 26.55 | 37.79 |
|         food        | 34.56 | 47.57 |
|         step        |  7.35 |  9.53 |
|         tank        | 28.98 | 32.94 |
|      trade name     | 12.77 | 17.78 |
|      microwave      | 29.24 | 35.73 |
|         pot         | 27.82 | 38.64 |
|        animal       | 54.15 | 60.46 |
|       bicycle       | 35.04 | 57.98 |
|         lake        | 57.58 | 63.49 |
|      dishwasher     | 52.93 | 72.11 |
|        screen       | 48.52 | 76.26 |
|       blanket       | 17.02 | 19.96 |
|      sculpture      | 28.99 | 53.01 |
|         hood        |  55.0 | 71.48 |
|        sconce       |  19.9 | 32.35 |
|         vase        | 17.24 |  35.8 |
|    traffic light    | 14.58 | 30.55 |
|         tray        |  8.74 | 16.48 |
|        ashcan       | 19.98 | 35.43 |
|         fan         | 23.09 | 34.84 |
|         pier        | 54.66 | 73.96 |
|      crt screen     |  6.3  | 17.98 |
|        plate        | 35.66 | 54.13 |
|       monitor       |  0.84 |  1.28 |
|    bulletin board   | 35.21 | 47.79 |
|        shower       |  1.03 |  9.37 |
|       radiator      | 42.49 |  60.7 |
|        glass        | 10.21 | 13.67 |
|        clock        | 13.56 |  20.6 |
|         flag        |  17.7 | 23.66 |
+---------------------+-------+-------+
09/21 06:48:22 - mmengine - INFO - Iter(test) [2000/2000]    aAcc: 73.8500  mIoU: 36.4600  mAcc: 50.9900  data_time: 0.0017  time: 0.9782
Finished processing corruption type: elastic_transform
Processing corruption type: pixelate
09/21 06:48:27 - mmengine - INFO - 
------------------------------------------------------------
System environment:
    sys.platform: linux
    Python: 3.10.13 | packaged by conda-forge | (main, Dec 23 2023, 15:36:39) [GCC 12.3.0]
    CUDA available: True
    MUSA available: False
    numpy_random_seed: 699867786
    GPU 0: Tesla V100-SXM2-32GB
    CUDA_HOME: /opt/bwhpc/common/devel/cuda/11.7
    NVCC: Cuda compilation tools, release 11.7, V11.7.99
    GCC: gcc (GCC) 8.5.0 20210514 (Red Hat 8.5.0-18)
    PyTorch: 1.13.1
    PyTorch compiling details: PyTorch built with:
  - GCC 9.3
  - C++ Version: 201402
  - Intel(R) oneAPI Math Kernel Library Version 2023.1-Product Build 20230303 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v2.6.0 (Git Hash 52b5f107dd9cf10910aaa19cb47f3abf9b349815)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - LAPACK is enabled (usually provided by MKL)
  - NNPACK is enabled
  - CPU capability usage: AVX2
  - CUDA Runtime 11.7
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_61,code=sm_61;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86;-gencode;arch=compute_37,code=compute_37
  - CuDNN 8.5
  - Magma 2.6.1
  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.7, CUDNN_VERSION=8.5.0, CXX_COMPILER=/opt/rh/devtoolset-9/root/usr/bin/c++, CXX_FLAGS= -fabi-version=11 -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -DEDGE_PROFILER_USE_KINETO -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Werror=non-virtual-dtor -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wunused-local-typedefs -Wno-unused-parameter -Wno-unused-function -Wno-unused-result -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Werror=cast-function-type -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.13.1, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, USE_ROCM=OFF, 

    TorchVision: 0.14.1
    OpenCV: 3.4.18
    MMEngine: 0.10.4

Runtime environment:
    cudnn_benchmark: True
    mp_cfg: {'mp_start_method': 'fork', 'opencv_num_threads': 0}
    dist_cfg: {'backend': 'nccl'}
    seed: 699867786
    Distributed launcher: none
    Distributed training: False
    GPU number: 1
------------------------------------------------------------

09/21 06:48:27 - mmengine - INFO - Config:
auto_scale_lr = dict(base_batch_size=16, enable=False)
backbone_embed_multi = dict(decay_mult=0.0, lr_mult=0.1)
backbone_norm_multi = dict(decay_mult=0.0, lr_mult=0.1)
crop_size = (
    512,
    512,
)
custom_imports = dict(allow_failed_imports=False, imports='mmdet.models')
custom_keys = dict({
    'absolute_pos_embed':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone':
    dict(decay_mult=1.0, lr_mult=0.1),
    'backbone.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.patch_embed.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.0.blocks.0.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.0.blocks.1.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.0.downsample.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.1.blocks.0.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.1.blocks.1.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.1.downsample.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.0.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.1.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.2.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.3.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.4.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.5.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.downsample.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.3.blocks.0.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.3.blocks.1.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'level_embed':
    dict(decay_mult=0.0, lr_mult=1.0),
    'query_embed':
    dict(decay_mult=0.0, lr_mult=1.0),
    'query_feat':
    dict(decay_mult=0.0, lr_mult=1.0),
    'relative_position_bias_table':
    dict(decay_mult=0.0, lr_mult=0.1)
})
data_root = 'data/ade/ADEChallengeData2016'
dataset_type = 'ADE20KDataset'
default_hooks = dict(
    checkpoint=dict(
        by_epoch=False, interval=5000, save_best='mIoU',
        type='CheckpointHook'),
    logger=dict(interval=50, log_metric_by_epoch=False, type='LoggerHook'),
    param_scheduler=dict(type='ParamSchedulerHook'),
    sampler_seed=dict(type='DistSamplerSeedHook'),
    timer=dict(type='IterTimerHook'),
    visualization=dict(type='SegVisualizationHook'))
default_scope = 'mmseg'
depths = [
    2,
    2,
    6,
    2,
]
embed_multi = dict(decay_mult=0.0, lr_mult=1.0)
env_cfg = dict(
    cudnn_benchmark=True,
    dist_cfg=dict(backend='nccl'),
    mp_cfg=dict(mp_start_method='fork', opencv_num_threads=0))
img_ratios = [
    0.5,
    0.75,
    1.0,
    1.25,
    1.5,
    1.75,
]
launcher = 'none'
load_from = '../checkpoint_files/ade20k/mask2former/mask2former_swin-t_8xb2-160k_ade20k-512x512_20221203_234230-7d64e5dd.pth'
log_level = 'INFO'
log_processor = dict(by_epoch=False)
model = dict(
    backbone=dict(
        attn_drop_rate=0.0,
        depths=[
            2,
            2,
            6,
            2,
        ],
        drop_path_rate=0.3,
        drop_rate=0.0,
        embed_dims=96,
        frozen_stages=-1,
        init_cfg=dict(
            checkpoint=
            'https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/swin/swin_tiny_patch4_window7_224_20220317-1cdeb081.pth',
            type='Pretrained'),
        mlp_ratio=4,
        num_heads=[
            3,
            6,
            12,
            24,
        ],
        out_indices=(
            0,
            1,
            2,
            3,
        ),
        patch_norm=True,
        qk_scale=None,
        qkv_bias=True,
        type='SwinTransformer',
        window_size=7,
        with_cp=False),
    data_preprocessor=dict(
        bgr_to_rgb=True,
        corruption='pixelate',
        mean=[
            123.675,
            116.28,
            103.53,
        ],
        pad_val=0,
        seg_pad_val=255,
        size=(
            512,
            512,
        ),
        std=[
            58.395,
            57.12,
            57.375,
        ],
        test_cfg=dict(size_divisor=32),
        type='SegDataPreProcessor'),
    decode_head=dict(
        align_corners=False,
        enforce_decoder_input_project=False,
        feat_channels=256,
        in_channels=[
            96,
            192,
            384,
            768,
        ],
        loss_cls=dict(
            class_weight=[
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                0.1,
            ],
            loss_weight=2.0,
            reduction='mean',
            type='mmdet.CrossEntropyLoss',
            use_sigmoid=False),
        loss_dice=dict(
            activate=True,
            eps=1.0,
            loss_weight=5.0,
            naive_dice=True,
            reduction='mean',
            type='mmdet.DiceLoss',
            use_sigmoid=True),
        loss_mask=dict(
            loss_weight=5.0,
            reduction='mean',
            type='mmdet.CrossEntropyLoss',
            use_sigmoid=True),
        num_classes=150,
        num_queries=100,
        num_transformer_feat_level=3,
        out_channels=256,
        pixel_decoder=dict(
            act_cfg=dict(type='ReLU'),
            encoder=dict(
                init_cfg=None,
                layer_cfg=dict(
                    ffn_cfg=dict(
                        act_cfg=dict(inplace=True, type='ReLU'),
                        embed_dims=256,
                        feedforward_channels=1024,
                        ffn_drop=0.0,
                        num_fcs=2),
                    self_attn_cfg=dict(
                        batch_first=True,
                        dropout=0.0,
                        embed_dims=256,
                        im2col_step=64,
                        init_cfg=None,
                        norm_cfg=None,
                        num_heads=8,
                        num_levels=3,
                        num_points=4)),
                num_layers=6),
            init_cfg=None,
            norm_cfg=dict(num_groups=32, type='GN'),
            num_outs=3,
            positional_encoding=dict(normalize=True, num_feats=128),
            type='mmdet.MSDeformAttnPixelDecoder'),
        positional_encoding=dict(normalize=True, num_feats=128),
        strides=[
            4,
            8,
            16,
            32,
        ],
        train_cfg=dict(
            assigner=dict(
                match_costs=[
                    dict(type='mmdet.ClassificationCost', weight=2.0),
                    dict(
                        type='mmdet.CrossEntropyLossCost',
                        use_sigmoid=True,
                        weight=5.0),
                    dict(
                        eps=1.0,
                        pred_act=True,
                        type='mmdet.DiceCost',
                        weight=5.0),
                ],
                type='mmdet.HungarianAssigner'),
            importance_sample_ratio=0.75,
            num_points=12544,
            oversample_ratio=3.0,
            sampler=dict(type='mmdet.MaskPseudoSampler')),
        transformer_decoder=dict(
            init_cfg=None,
            layer_cfg=dict(
                cross_attn_cfg=dict(
                    attn_drop=0.0,
                    batch_first=True,
                    dropout_layer=None,
                    embed_dims=256,
                    num_heads=8,
                    proj_drop=0.0),
                ffn_cfg=dict(
                    act_cfg=dict(inplace=True, type='ReLU'),
                    add_identity=True,
                    dropout_layer=None,
                    embed_dims=256,
                    feedforward_channels=2048,
                    ffn_drop=0.0,
                    num_fcs=2),
                self_attn_cfg=dict(
                    attn_drop=0.0,
                    batch_first=True,
                    dropout_layer=None,
                    embed_dims=256,
                    num_heads=8,
                    proj_drop=0.0)),
            num_layers=9,
            return_intermediate=True),
        type='Mask2FormerHead'),
    test_cfg=dict(mode='whole'),
    train_cfg=dict(),
    type='EncoderDecoder')
num_classes = 150
optim_wrapper = dict(
    clip_grad=dict(max_norm=0.01, norm_type=2),
    optimizer=dict(
        betas=(
            0.9,
            0.999,
        ),
        eps=1e-08,
        lr=0.0001,
        type='AdamW',
        weight_decay=0.05),
    paramwise_cfg=dict(
        custom_keys=dict({
            'absolute_pos_embed':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone':
            dict(decay_mult=1.0, lr_mult=0.1),
            'backbone.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.patch_embed.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.0.blocks.0.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.0.blocks.1.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.0.downsample.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.1.blocks.0.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.1.blocks.1.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.1.downsample.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.0.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.1.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.2.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.3.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.4.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.5.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.downsample.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.3.blocks.0.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.3.blocks.1.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'level_embed':
            dict(decay_mult=0.0, lr_mult=1.0),
            'query_embed':
            dict(decay_mult=0.0, lr_mult=1.0),
            'query_feat':
            dict(decay_mult=0.0, lr_mult=1.0),
            'relative_position_bias_table':
            dict(decay_mult=0.0, lr_mult=0.1)
        }),
        norm_decay_mult=0.0),
    type='OptimWrapper')
optimizer = dict(
    betas=(
        0.9,
        0.999,
    ),
    eps=1e-08,
    lr=0.0001,
    type='AdamW',
    weight_decay=0.05)
param_scheduler = [
    dict(
        begin=0,
        by_epoch=False,
        end=160000,
        eta_min=0,
        power=0.9,
        type='PolyLR'),
]
pretrained = 'https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/swin/swin_tiny_patch4_window7_224_20220317-1cdeb081.pth'
resume = False
test_cfg = dict(type='TestLoop')
test_dataloader = dict(
    batch_size=1,
    dataset=dict(
        data_prefix=dict(
            img_path='images/validation',
            seg_map_path='annotations/validation'),
        data_root='data/ade/ADEChallengeData2016',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(keep_ratio=True, scale=(
                2048,
                512,
            ), type='Resize'),
            dict(reduce_zero_label=True, type='LoadAnnotations'),
            dict(type='PackSegInputs'),
        ],
        type='ADE20KDataset'),
    num_workers=4,
    persistent_workers=True,
    sampler=dict(shuffle=False, type='DefaultSampler'))
test_evaluator = dict(
    iou_metrics=[
        'mIoU',
    ], type='IoUMetric')
test_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(keep_ratio=True, scale=(
        2048,
        512,
    ), type='Resize'),
    dict(reduce_zero_label=True, type='LoadAnnotations'),
    dict(type='PackSegInputs'),
]
train_cfg = dict(
    max_iters=160000, type='IterBasedTrainLoop', val_interval=5000)
train_dataloader = dict(
    batch_size=2,
    dataset=dict(
        data_prefix=dict(
            img_path='images/training', seg_map_path='annotations/training'),
        data_root='data/ade/ADEChallengeData2016',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(reduce_zero_label=True, type='LoadAnnotations'),
            dict(
                max_size=2048,
                resize_type='ResizeShortestEdge',
                scales=[
                    256,
                    307,
                    358,
                    409,
                    460,
                    512,
                    563,
                    614,
                    665,
                    716,
                    768,
                    819,
                    870,
                    921,
                    972,
                    1024,
                ],
                type='RandomChoiceResize'),
            dict(
                cat_max_ratio=0.75, crop_size=(
                    512,
                    512,
                ), type='RandomCrop'),
            dict(prob=0.5, type='RandomFlip'),
            dict(type='PhotoMetricDistortion'),
            dict(type='PackSegInputs'),
        ],
        type='ADE20KDataset'),
    num_workers=4,
    persistent_workers=True,
    sampler=dict(shuffle=True, type='InfiniteSampler'))
train_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(reduce_zero_label=True, type='LoadAnnotations'),
    dict(
        max_size=2048,
        resize_type='ResizeShortestEdge',
        scales=[
            256,
            307,
            358,
            409,
            460,
            512,
            563,
            614,
            665,
            716,
            768,
            819,
            870,
            921,
            972,
            1024,
        ],
        type='RandomChoiceResize'),
    dict(cat_max_ratio=0.75, crop_size=(
        512,
        512,
    ), type='RandomCrop'),
    dict(prob=0.5, type='RandomFlip'),
    dict(type='PhotoMetricDistortion'),
    dict(type='PackSegInputs'),
]
tta_model = dict(type='SegTTAModel')
tta_pipeline = [
    dict(backend_args=None, type='LoadImageFromFile'),
    dict(
        transforms=[
            [
                dict(keep_ratio=True, scale_factor=0.5, type='Resize'),
                dict(keep_ratio=True, scale_factor=0.75, type='Resize'),
                dict(keep_ratio=True, scale_factor=1.0, type='Resize'),
                dict(keep_ratio=True, scale_factor=1.25, type='Resize'),
                dict(keep_ratio=True, scale_factor=1.5, type='Resize'),
                dict(keep_ratio=True, scale_factor=1.75, type='Resize'),
            ],
            [
                dict(direction='horizontal', prob=0.0, type='RandomFlip'),
                dict(direction='horizontal', prob=1.0, type='RandomFlip'),
            ],
            [
                dict(type='LoadAnnotations'),
            ],
            [
                dict(type='PackSegInputs'),
            ],
        ],
        type='TestTimeAug'),
]
val_cfg = dict(type='ValLoop')
val_dataloader = dict(
    batch_size=1,
    dataset=dict(
        data_prefix=dict(
            img_path='images/validation',
            seg_map_path='annotations/validation'),
        data_root='data/ade/ADEChallengeData2016',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(keep_ratio=True, scale=(
                2048,
                512,
            ), type='Resize'),
            dict(reduce_zero_label=True, type='LoadAnnotations'),
            dict(type='PackSegInputs'),
        ],
        type='ADE20KDataset'),
    num_workers=4,
    persistent_workers=True,
    sampler=dict(shuffle=False, type='DefaultSampler'))
val_evaluator = dict(
    iou_metrics=[
        'mIoU',
    ], type='IoUMetric')
vis_backends = [
    dict(type='LocalVisBackend'),
]
visualizer = dict(
    name='visualizer',
    type='SegLocalVisualizer',
    vis_backends=[
        dict(type='LocalVisBackend'),
    ])
work_dir = '../corruptions/work_dirs/ade20k/mask2former/mask2former_swin-t_8xb2-160k_ade20k-512x512/pixelate'

09/21 06:48:30 - mmengine - INFO - Distributed training is not used, all SyncBatchNorm (SyncBN) layers in the model will be automatically reverted to BatchNormXd layers if they are used.
09/21 06:48:30 - mmengine - INFO - Hooks will be executed in the following order:
before_run:
(VERY_HIGH   ) RuntimeInfoHook                    
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
before_train:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_train_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(NORMAL      ) DistSamplerSeedHook                
 -------------------- 
before_train_iter:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_train_iter:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(NORMAL      ) SegVisualizationHook               
(BELOW_NORMAL) LoggerHook                         
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
after_train_epoch:
(NORMAL      ) IterTimerHook                      
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_val:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
before_val_epoch:
(NORMAL      ) IterTimerHook                      
 -------------------- 
before_val_iter:
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_val_iter:
(NORMAL      ) IterTimerHook                      
(NORMAL      ) SegVisualizationHook               
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_val_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
after_val:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
after_train:
(VERY_HIGH   ) RuntimeInfoHook                    
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_test:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
before_test_epoch:
(NORMAL      ) IterTimerHook                      
 -------------------- 
before_test_iter:
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_test_iter:
(NORMAL      ) IterTimerHook                      
(NORMAL      ) SegVisualizationHook               
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_test_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_test:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
after_run:
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
09/21 06:48:30 - mmengine - WARNING - The prefix is not set in metric class IoUMetric.
Loads checkpoint by local backend from path: ../checkpoint_files/ade20k/mask2former/mask2former_swin-t_8xb2-160k_ade20k-512x512_20221203_234230-7d64e5dd.pth
09/21 06:48:32 - mmengine - INFO - Load checkpoint from ../checkpoint_files/ade20k/mask2former/mask2former_swin-t_8xb2-160k_ade20k-512x512_20221203_234230-7d64e5dd.pth
09/21 06:48:49 - mmengine - INFO - Iter(test) [  50/2000]    eta: 0:11:27  time: 0.2423  data_time: 0.0016  memory: 12733  
09/21 06:48:55 - mmengine - INFO - Iter(test) [ 100/2000]    eta: 0:07:25  time: 0.1606  data_time: 0.0016  memory: 12714  
09/21 06:48:59 - mmengine - INFO - Iter(test) [ 150/2000]    eta: 0:05:30  time: 0.0682  data_time: 0.0015  memory: 853  
09/21 06:49:04 - mmengine - INFO - Iter(test) [ 200/2000]    eta: 0:04:49  time: 0.0622  data_time: 0.0015  memory: 12754  
09/21 06:49:09 - mmengine - INFO - Iter(test) [ 250/2000]    eta: 0:04:17  time: 0.0645  data_time: 0.0015  memory: 12756  
09/21 06:49:13 - mmengine - INFO - Iter(test) [ 300/2000]    eta: 0:03:51  time: 0.0690  data_time: 0.0015  memory: 12721  
09/21 06:49:18 - mmengine - INFO - Iter(test) [ 350/2000]    eta: 0:03:35  time: 0.0670  data_time: 0.0026  memory: 12728  
09/21 06:49:22 - mmengine - INFO - Iter(test) [ 400/2000]    eta: 0:03:19  time: 0.0668  data_time: 0.0014  memory: 12694  
09/21 06:49:25 - mmengine - INFO - Iter(test) [ 450/2000]    eta: 0:03:01  time: 0.0583  data_time: 0.0013  memory: 894  
09/21 06:49:28 - mmengine - INFO - Iter(test) [ 500/2000]    eta: 0:02:47  time: 0.0617  data_time: 0.0015  memory: 853  
09/21 06:49:31 - mmengine - INFO - Iter(test) [ 550/2000]    eta: 0:02:35  time: 0.0648  data_time: 0.0015  memory: 961  
09/21 06:49:34 - mmengine - INFO - Iter(test) [ 600/2000]    eta: 0:02:25  time: 0.0690  data_time: 0.0016  memory: 958  
09/21 06:49:39 - mmengine - INFO - Iter(test) [ 650/2000]    eta: 0:02:18  time: 0.1537  data_time: 0.0013  memory: 12735  
09/21 06:49:43 - mmengine - INFO - Iter(test) [ 700/2000]    eta: 0:02:11  time: 0.0638  data_time: 0.0015  memory: 12724  
09/21 06:49:46 - mmengine - INFO - Iter(test) [ 750/2000]    eta: 0:02:03  time: 0.0596  data_time: 0.0013  memory: 1014  
09/21 06:49:49 - mmengine - INFO - Iter(test) [ 800/2000]    eta: 0:01:55  time: 0.0625  data_time: 0.0016  memory: 853  
09/21 06:49:52 - mmengine - INFO - Iter(test) [ 850/2000]    eta: 0:01:48  time: 0.0661  data_time: 0.0015  memory: 826  
09/21 06:49:55 - mmengine - INFO - Iter(test) [ 900/2000]    eta: 0:01:41  time: 0.0619  data_time: 0.0013  memory: 906  
09/21 06:49:58 - mmengine - INFO - Iter(test) [ 950/2000]    eta: 0:01:35  time: 0.0645  data_time: 0.0014  memory: 934  
09/21 06:50:02 - mmengine - INFO - Iter(test) [1000/2000]    eta: 0:01:29  time: 0.0669  data_time: 0.0014  memory: 934  
09/21 06:50:06 - mmengine - INFO - Iter(test) [1050/2000]    eta: 0:01:24  time: 0.0622  data_time: 0.0014  memory: 12737  
09/21 06:50:09 - mmengine - INFO - Iter(test) [1100/2000]    eta: 0:01:19  time: 0.0608  data_time: 0.0015  memory: 931  
09/21 06:50:12 - mmengine - INFO - Iter(test) [1150/2000]    eta: 0:01:13  time: 0.0656  data_time: 0.0013  memory: 904  
09/21 06:50:15 - mmengine - INFO - Iter(test) [1200/2000]    eta: 0:01:08  time: 0.0655  data_time: 0.0014  memory: 1839  
09/21 06:50:19 - mmengine - INFO - Iter(test) [1250/2000]    eta: 0:01:04  time: 0.0649  data_time: 0.0013  memory: 12716  
09/21 06:50:22 - mmengine - INFO - Iter(test) [1300/2000]    eta: 0:00:59  time: 0.0643  data_time: 0.0014  memory: 853  
09/21 06:50:25 - mmengine - INFO - Iter(test) [1350/2000]    eta: 0:00:54  time: 0.0584  data_time: 0.0013  memory: 853  
09/21 06:50:28 - mmengine - INFO - Iter(test) [1400/2000]    eta: 0:00:49  time: 0.0622  data_time: 0.0014  memory: 931  
09/21 06:50:32 - mmengine - INFO - Iter(test) [1450/2000]    eta: 0:00:45  time: 0.0713  data_time: 0.0014  memory: 934  
09/21 06:50:35 - mmengine - INFO - Iter(test) [1500/2000]    eta: 0:00:40  time: 0.0640  data_time: 0.0013  memory: 852  
09/21 06:50:38 - mmengine - INFO - Iter(test) [1550/2000]    eta: 0:00:36  time: 0.0684  data_time: 0.0014  memory: 934  
09/21 06:50:41 - mmengine - INFO - Iter(test) [1600/2000]    eta: 0:00:32  time: 0.0675  data_time: 0.0014  memory: 826  
09/21 06:50:45 - mmengine - INFO - Iter(test) [1650/2000]    eta: 0:00:28  time: 0.0587  data_time: 0.0013  memory: 12725  
09/21 06:50:48 - mmengine - INFO - Iter(test) [1700/2000]    eta: 0:00:24  time: 0.0616  data_time: 0.0015  memory: 930  
09/21 06:50:52 - mmengine - INFO - Iter(test) [1750/2000]    eta: 0:00:19  time: 0.0651  data_time: 0.0013  memory: 957  
09/21 06:50:55 - mmengine - INFO - Iter(test) [1800/2000]    eta: 0:00:15  time: 0.0692  data_time: 0.0016  memory: 853  
09/21 06:50:58 - mmengine - INFO - Iter(test) [1850/2000]    eta: 0:00:11  time: 0.0679  data_time: 0.0015  memory: 773  
09/21 06:51:02 - mmengine - INFO - Iter(test) [1900/2000]    eta: 0:00:07  time: 0.0671  data_time: 0.0013  memory: 987  
09/21 06:51:05 - mmengine - INFO - Iter(test) [1950/2000]    eta: 0:00:03  time: 0.0605  data_time: 0.0014  memory: 1224  
09/21 06:51:08 - mmengine - INFO - Iter(test) [2000/2000]    eta: 0:00:00  time: 0.0564  data_time: 0.0012  memory: 1012  
09/21 06:51:08 - mmengine - INFO - per class results:
09/21 06:51:08 - mmengine - INFO - 
+---------------------+-------+-------+
|        Class        |  IoU  |  Acc  |
+---------------------+-------+-------+
|         wall        | 74.54 | 88.13 |
|       building      | 79.64 | 92.22 |
|         sky         | 93.75 | 96.81 |
|        floor        | 78.18 | 90.52 |
|         tree        | 70.41 | 85.37 |
|       ceiling       | 81.02 | 89.89 |
|         road        | 82.03 | 87.66 |
|         bed         | 88.13 | 93.69 |
|      windowpane     | 58.75 | 77.52 |
|        grass        | 62.55 | 75.27 |
|       cabinet       | 55.78 |  71.0 |
|       sidewalk      | 62.49 | 82.64 |
|        person       |  77.1 | 85.67 |
|        earth        | 29.82 | 40.98 |
|         door        | 42.78 | 58.75 |
|        table        | 57.99 | 76.85 |
|       mountain      | 50.78 | 64.05 |
|        plant        | 46.92 | 56.35 |
|       curtain       | 74.15 | 85.37 |
|        chair        | 56.94 |  71.7 |
|         car         |  79.9 | 87.02 |
|        water        | 53.46 | 73.32 |
|       painting      | 67.56 | 84.86 |
|         sofa        | 64.01 | 80.27 |
|        shelf        | 39.63 | 54.26 |
|        house        |  28.2 | 35.36 |
|         sea         | 50.54 | 60.04 |
|        mirror       | 59.28 | 69.51 |
|         rug         | 59.82 |  69.3 |
|        field        | 23.78 | 41.77 |
|       armchair      |  35.7 | 51.39 |
|         seat        | 47.71 | 76.79 |
|        fence        | 38.24 | 53.52 |
|         desk        | 48.19 | 65.51 |
|         rock        | 28.46 | 46.25 |
|       wardrobe      | 44.32 | 62.61 |
|         lamp        | 61.28 | 75.98 |
|       bathtub       | 75.53 | 90.46 |
|       railing       | 36.46 | 46.51 |
|       cushion       | 53.13 | 63.84 |
|         base        | 14.45 | 21.38 |
|         box         |  18.4 | 27.21 |
|        column       | 41.25 | 54.04 |
|      signboard      | 36.38 | 51.66 |
|   chest of drawers  | 43.47 |  61.3 |
|       counter       |  25.0 | 35.95 |
|         sand        | 30.38 |  45.1 |
|         sink        | 68.37 | 75.14 |
|      skyscraper     | 49.79 | 55.64 |
|      fireplace      | 67.63 | 78.52 |
|     refrigerator    | 84.16 | 89.57 |
|      grandstand     | 28.53 | 67.51 |
|         path        | 13.82 | 22.15 |
|        stairs       | 30.48 | 37.41 |
|        runway       | 67.78 | 87.99 |
|         case        | 51.99 | 58.04 |
|      pool table     |  91.1 | 94.37 |
|        pillow       | 52.43 | 62.41 |
|     screen door     | 38.84 | 53.73 |
|       stairway      | 37.29 | 48.24 |
|        river        | 10.21 | 18.75 |
|        bridge       | 57.38 |  70.5 |
|       bookcase      | 31.06 | 39.45 |
|        blind        | 48.24 | 57.73 |
|     coffee table    | 62.49 | 78.33 |
|        toilet       | 84.11 | 89.29 |
|        flower       | 37.41 | 45.22 |
|         book        | 42.81 | 62.25 |
|         hill        | 11.31 |  21.5 |
|        bench        | 36.89 | 50.85 |
|      countertop     | 56.53 | 67.68 |
|        stove        | 67.85 |  75.8 |
|         palm        | 44.87 |  64.4 |
|    kitchen island   | 34.06 |  59.5 |
|       computer      | 50.64 | 55.64 |
|     swivel chair    | 43.38 | 54.55 |
|         boat        | 35.13 | 36.78 |
|         bar         | 48.66 | 54.84 |
|    arcade machine   | 31.39 | 33.77 |
|        hovel        | 19.78 | 31.69 |
|         bus         | 82.81 | 92.75 |
|        towel        |  53.7 | 61.48 |
|        light        | 57.07 | 71.79 |
|        truck        | 22.27 | 44.95 |
|        tower        | 30.63 | 37.67 |
|      chandelier     | 63.53 | 73.92 |
|        awning       | 30.65 | 35.21 |
|     streetlight     | 29.44 | 46.46 |
|        booth        | 35.44 | 39.13 |
| television receiver | 59.11 |  77.3 |
|       airplane      | 46.42 | 59.73 |
|      dirt track     |  0.0  |  0.0  |
|       apparel       | 28.13 | 42.99 |
|         pole        |  22.8 | 36.62 |
|         land        |  5.56 |  7.71 |
|      bannister      |  8.15 | 13.27 |
|      escalator      |  4.72 |  4.84 |
|       ottoman       | 47.16 | 64.87 |
|        bottle       | 14.82 | 22.32 |
|        buffet       |  27.1 | 32.56 |
|        poster       | 27.28 | 39.84 |
|        stage        | 12.77 | 18.27 |
|         van         | 36.37 | 55.77 |
|         ship        |  6.43 |  6.68 |
|       fountain      |  0.07 |  0.07 |
|    conveyer belt    | 50.29 | 65.23 |
|        canopy       |  35.1 | 42.58 |
|        washer       | 57.39 | 58.93 |
|      plaything      | 19.79 | 33.36 |
|    swimming pool    | 54.51 | 74.61 |
|        stool        | 43.38 | 59.11 |
|        barrel       | 49.47 | 74.15 |
|        basket       |  14.3 | 16.54 |
|      waterfall      | 45.68 | 52.45 |
|         tent        | 95.14 | 97.83 |
|         bag         | 11.64 | 14.16 |
|       minibike      | 47.03 | 50.73 |
|        cradle       | 84.35 |  96.1 |
|         oven        | 26.02 | 32.47 |
|         ball        |  10.8 | 13.12 |
|         food        | 53.28 | 62.62 |
|         step        |  7.36 | 10.08 |
|         tank        | 23.12 | 25.47 |
|      trade name     | 24.68 |  31.6 |
|      microwave      | 38.18 | 42.32 |
|         pot         | 47.59 | 55.75 |
|        animal       | 38.39 | 47.61 |
|       bicycle       | 52.43 | 62.38 |
|         lake        |  9.06 |  9.56 |
|      dishwasher     | 58.43 | 74.19 |
|        screen       | 51.22 | 89.42 |
|       blanket       | 18.53 | 20.45 |
|      sculpture      |  41.2 | 55.51 |
|         hood        | 73.77 | 79.09 |
|        sconce       | 41.11 | 55.73 |
|         vase        | 29.32 | 41.91 |
|    traffic light    |  32.9 | 47.95 |
|         tray        | 14.62 | 25.17 |
|        ashcan       | 37.13 | 54.82 |
|         fan         | 61.46 | 73.65 |
|         pier        | 12.27 |  14.2 |
|      crt screen     |  0.29 |  1.16 |
|        plate        | 45.99 | 56.41 |
|       monitor       |  5.88 |  9.68 |
|    bulletin board   | 41.54 | 50.72 |
|        shower       |  2.12 |  12.7 |
|       radiator      | 57.58 | 66.77 |
|        glass        | 12.69 | 14.09 |
|        clock        | 29.61 | 34.43 |
|         flag        |  34.4 | 37.93 |
+---------------------+-------+-------+
09/21 06:51:08 - mmengine - INFO - Iter(test) [2000/2000]    aAcc: 80.5300  mIoU: 43.0500  mAcc: 53.9100  data_time: 0.0016  time: 0.0778
Finished processing corruption type: pixelate
Processing corruption type: jpeg_compression
09/21 06:51:12 - mmengine - INFO - 
------------------------------------------------------------
System environment:
    sys.platform: linux
    Python: 3.10.13 | packaged by conda-forge | (main, Dec 23 2023, 15:36:39) [GCC 12.3.0]
    CUDA available: True
    MUSA available: False
    numpy_random_seed: 1841166923
    GPU 0: Tesla V100-SXM2-32GB
    CUDA_HOME: /opt/bwhpc/common/devel/cuda/11.7
    NVCC: Cuda compilation tools, release 11.7, V11.7.99
    GCC: gcc (GCC) 8.5.0 20210514 (Red Hat 8.5.0-18)
    PyTorch: 1.13.1
    PyTorch compiling details: PyTorch built with:
  - GCC 9.3
  - C++ Version: 201402
  - Intel(R) oneAPI Math Kernel Library Version 2023.1-Product Build 20230303 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v2.6.0 (Git Hash 52b5f107dd9cf10910aaa19cb47f3abf9b349815)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - LAPACK is enabled (usually provided by MKL)
  - NNPACK is enabled
  - CPU capability usage: AVX2
  - CUDA Runtime 11.7
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_61,code=sm_61;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86;-gencode;arch=compute_37,code=compute_37
  - CuDNN 8.5
  - Magma 2.6.1
  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.7, CUDNN_VERSION=8.5.0, CXX_COMPILER=/opt/rh/devtoolset-9/root/usr/bin/c++, CXX_FLAGS= -fabi-version=11 -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -DEDGE_PROFILER_USE_KINETO -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Werror=non-virtual-dtor -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wunused-local-typedefs -Wno-unused-parameter -Wno-unused-function -Wno-unused-result -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Werror=cast-function-type -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.13.1, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, USE_ROCM=OFF, 

    TorchVision: 0.14.1
    OpenCV: 3.4.18
    MMEngine: 0.10.4

Runtime environment:
    cudnn_benchmark: True
    mp_cfg: {'mp_start_method': 'fork', 'opencv_num_threads': 0}
    dist_cfg: {'backend': 'nccl'}
    seed: 1841166923
    Distributed launcher: none
    Distributed training: False
    GPU number: 1
------------------------------------------------------------

09/21 06:51:12 - mmengine - INFO - Config:
auto_scale_lr = dict(base_batch_size=16, enable=False)
backbone_embed_multi = dict(decay_mult=0.0, lr_mult=0.1)
backbone_norm_multi = dict(decay_mult=0.0, lr_mult=0.1)
crop_size = (
    512,
    512,
)
custom_imports = dict(allow_failed_imports=False, imports='mmdet.models')
custom_keys = dict({
    'absolute_pos_embed':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone':
    dict(decay_mult=1.0, lr_mult=0.1),
    'backbone.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.patch_embed.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.0.blocks.0.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.0.blocks.1.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.0.downsample.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.1.blocks.0.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.1.blocks.1.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.1.downsample.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.0.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.1.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.2.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.3.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.4.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.5.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.downsample.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.3.blocks.0.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.3.blocks.1.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'level_embed':
    dict(decay_mult=0.0, lr_mult=1.0),
    'query_embed':
    dict(decay_mult=0.0, lr_mult=1.0),
    'query_feat':
    dict(decay_mult=0.0, lr_mult=1.0),
    'relative_position_bias_table':
    dict(decay_mult=0.0, lr_mult=0.1)
})
data_root = 'data/ade/ADEChallengeData2016'
dataset_type = 'ADE20KDataset'
default_hooks = dict(
    checkpoint=dict(
        by_epoch=False, interval=5000, save_best='mIoU',
        type='CheckpointHook'),
    logger=dict(interval=50, log_metric_by_epoch=False, type='LoggerHook'),
    param_scheduler=dict(type='ParamSchedulerHook'),
    sampler_seed=dict(type='DistSamplerSeedHook'),
    timer=dict(type='IterTimerHook'),
    visualization=dict(type='SegVisualizationHook'))
default_scope = 'mmseg'
depths = [
    2,
    2,
    6,
    2,
]
embed_multi = dict(decay_mult=0.0, lr_mult=1.0)
env_cfg = dict(
    cudnn_benchmark=True,
    dist_cfg=dict(backend='nccl'),
    mp_cfg=dict(mp_start_method='fork', opencv_num_threads=0))
img_ratios = [
    0.5,
    0.75,
    1.0,
    1.25,
    1.5,
    1.75,
]
launcher = 'none'
load_from = '../checkpoint_files/ade20k/mask2former/mask2former_swin-t_8xb2-160k_ade20k-512x512_20221203_234230-7d64e5dd.pth'
log_level = 'INFO'
log_processor = dict(by_epoch=False)
model = dict(
    backbone=dict(
        attn_drop_rate=0.0,
        depths=[
            2,
            2,
            6,
            2,
        ],
        drop_path_rate=0.3,
        drop_rate=0.0,
        embed_dims=96,
        frozen_stages=-1,
        init_cfg=dict(
            checkpoint=
            'https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/swin/swin_tiny_patch4_window7_224_20220317-1cdeb081.pth',
            type='Pretrained'),
        mlp_ratio=4,
        num_heads=[
            3,
            6,
            12,
            24,
        ],
        out_indices=(
            0,
            1,
            2,
            3,
        ),
        patch_norm=True,
        qk_scale=None,
        qkv_bias=True,
        type='SwinTransformer',
        window_size=7,
        with_cp=False),
    data_preprocessor=dict(
        bgr_to_rgb=True,
        corruption='jpeg_compression',
        mean=[
            123.675,
            116.28,
            103.53,
        ],
        pad_val=0,
        seg_pad_val=255,
        size=(
            512,
            512,
        ),
        std=[
            58.395,
            57.12,
            57.375,
        ],
        test_cfg=dict(size_divisor=32),
        type='SegDataPreProcessor'),
    decode_head=dict(
        align_corners=False,
        enforce_decoder_input_project=False,
        feat_channels=256,
        in_channels=[
            96,
            192,
            384,
            768,
        ],
        loss_cls=dict(
            class_weight=[
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                0.1,
            ],
            loss_weight=2.0,
            reduction='mean',
            type='mmdet.CrossEntropyLoss',
            use_sigmoid=False),
        loss_dice=dict(
            activate=True,
            eps=1.0,
            loss_weight=5.0,
            naive_dice=True,
            reduction='mean',
            type='mmdet.DiceLoss',
            use_sigmoid=True),
        loss_mask=dict(
            loss_weight=5.0,
            reduction='mean',
            type='mmdet.CrossEntropyLoss',
            use_sigmoid=True),
        num_classes=150,
        num_queries=100,
        num_transformer_feat_level=3,
        out_channels=256,
        pixel_decoder=dict(
            act_cfg=dict(type='ReLU'),
            encoder=dict(
                init_cfg=None,
                layer_cfg=dict(
                    ffn_cfg=dict(
                        act_cfg=dict(inplace=True, type='ReLU'),
                        embed_dims=256,
                        feedforward_channels=1024,
                        ffn_drop=0.0,
                        num_fcs=2),
                    self_attn_cfg=dict(
                        batch_first=True,
                        dropout=0.0,
                        embed_dims=256,
                        im2col_step=64,
                        init_cfg=None,
                        norm_cfg=None,
                        num_heads=8,
                        num_levels=3,
                        num_points=4)),
                num_layers=6),
            init_cfg=None,
            norm_cfg=dict(num_groups=32, type='GN'),
            num_outs=3,
            positional_encoding=dict(normalize=True, num_feats=128),
            type='mmdet.MSDeformAttnPixelDecoder'),
        positional_encoding=dict(normalize=True, num_feats=128),
        strides=[
            4,
            8,
            16,
            32,
        ],
        train_cfg=dict(
            assigner=dict(
                match_costs=[
                    dict(type='mmdet.ClassificationCost', weight=2.0),
                    dict(
                        type='mmdet.CrossEntropyLossCost',
                        use_sigmoid=True,
                        weight=5.0),
                    dict(
                        eps=1.0,
                        pred_act=True,
                        type='mmdet.DiceCost',
                        weight=5.0),
                ],
                type='mmdet.HungarianAssigner'),
            importance_sample_ratio=0.75,
            num_points=12544,
            oversample_ratio=3.0,
            sampler=dict(type='mmdet.MaskPseudoSampler')),
        transformer_decoder=dict(
            init_cfg=None,
            layer_cfg=dict(
                cross_attn_cfg=dict(
                    attn_drop=0.0,
                    batch_first=True,
                    dropout_layer=None,
                    embed_dims=256,
                    num_heads=8,
                    proj_drop=0.0),
                ffn_cfg=dict(
                    act_cfg=dict(inplace=True, type='ReLU'),
                    add_identity=True,
                    dropout_layer=None,
                    embed_dims=256,
                    feedforward_channels=2048,
                    ffn_drop=0.0,
                    num_fcs=2),
                self_attn_cfg=dict(
                    attn_drop=0.0,
                    batch_first=True,
                    dropout_layer=None,
                    embed_dims=256,
                    num_heads=8,
                    proj_drop=0.0)),
            num_layers=9,
            return_intermediate=True),
        type='Mask2FormerHead'),
    test_cfg=dict(mode='whole'),
    train_cfg=dict(),
    type='EncoderDecoder')
num_classes = 150
optim_wrapper = dict(
    clip_grad=dict(max_norm=0.01, norm_type=2),
    optimizer=dict(
        betas=(
            0.9,
            0.999,
        ),
        eps=1e-08,
        lr=0.0001,
        type='AdamW',
        weight_decay=0.05),
    paramwise_cfg=dict(
        custom_keys=dict({
            'absolute_pos_embed':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone':
            dict(decay_mult=1.0, lr_mult=0.1),
            'backbone.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.patch_embed.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.0.blocks.0.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.0.blocks.1.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.0.downsample.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.1.blocks.0.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.1.blocks.1.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.1.downsample.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.0.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.1.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.2.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.3.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.4.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.5.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.downsample.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.3.blocks.0.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.3.blocks.1.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'level_embed':
            dict(decay_mult=0.0, lr_mult=1.0),
            'query_embed':
            dict(decay_mult=0.0, lr_mult=1.0),
            'query_feat':
            dict(decay_mult=0.0, lr_mult=1.0),
            'relative_position_bias_table':
            dict(decay_mult=0.0, lr_mult=0.1)
        }),
        norm_decay_mult=0.0),
    type='OptimWrapper')
optimizer = dict(
    betas=(
        0.9,
        0.999,
    ),
    eps=1e-08,
    lr=0.0001,
    type='AdamW',
    weight_decay=0.05)
param_scheduler = [
    dict(
        begin=0,
        by_epoch=False,
        end=160000,
        eta_min=0,
        power=0.9,
        type='PolyLR'),
]
pretrained = 'https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/swin/swin_tiny_patch4_window7_224_20220317-1cdeb081.pth'
resume = False
test_cfg = dict(type='TestLoop')
test_dataloader = dict(
    batch_size=1,
    dataset=dict(
        data_prefix=dict(
            img_path='images/validation',
            seg_map_path='annotations/validation'),
        data_root='data/ade/ADEChallengeData2016',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(keep_ratio=True, scale=(
                2048,
                512,
            ), type='Resize'),
            dict(reduce_zero_label=True, type='LoadAnnotations'),
            dict(type='PackSegInputs'),
        ],
        type='ADE20KDataset'),
    num_workers=4,
    persistent_workers=True,
    sampler=dict(shuffle=False, type='DefaultSampler'))
test_evaluator = dict(
    iou_metrics=[
        'mIoU',
    ], type='IoUMetric')
test_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(keep_ratio=True, scale=(
        2048,
        512,
    ), type='Resize'),
    dict(reduce_zero_label=True, type='LoadAnnotations'),
    dict(type='PackSegInputs'),
]
train_cfg = dict(
    max_iters=160000, type='IterBasedTrainLoop', val_interval=5000)
train_dataloader = dict(
    batch_size=2,
    dataset=dict(
        data_prefix=dict(
            img_path='images/training', seg_map_path='annotations/training'),
        data_root='data/ade/ADEChallengeData2016',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(reduce_zero_label=True, type='LoadAnnotations'),
            dict(
                max_size=2048,
                resize_type='ResizeShortestEdge',
                scales=[
                    256,
                    307,
                    358,
                    409,
                    460,
                    512,
                    563,
                    614,
                    665,
                    716,
                    768,
                    819,
                    870,
                    921,
                    972,
                    1024,
                ],
                type='RandomChoiceResize'),
            dict(
                cat_max_ratio=0.75, crop_size=(
                    512,
                    512,
                ), type='RandomCrop'),
            dict(prob=0.5, type='RandomFlip'),
            dict(type='PhotoMetricDistortion'),
            dict(type='PackSegInputs'),
        ],
        type='ADE20KDataset'),
    num_workers=4,
    persistent_workers=True,
    sampler=dict(shuffle=True, type='InfiniteSampler'))
train_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(reduce_zero_label=True, type='LoadAnnotations'),
    dict(
        max_size=2048,
        resize_type='ResizeShortestEdge',
        scales=[
            256,
            307,
            358,
            409,
            460,
            512,
            563,
            614,
            665,
            716,
            768,
            819,
            870,
            921,
            972,
            1024,
        ],
        type='RandomChoiceResize'),
    dict(cat_max_ratio=0.75, crop_size=(
        512,
        512,
    ), type='RandomCrop'),
    dict(prob=0.5, type='RandomFlip'),
    dict(type='PhotoMetricDistortion'),
    dict(type='PackSegInputs'),
]
tta_model = dict(type='SegTTAModel')
tta_pipeline = [
    dict(backend_args=None, type='LoadImageFromFile'),
    dict(
        transforms=[
            [
                dict(keep_ratio=True, scale_factor=0.5, type='Resize'),
                dict(keep_ratio=True, scale_factor=0.75, type='Resize'),
                dict(keep_ratio=True, scale_factor=1.0, type='Resize'),
                dict(keep_ratio=True, scale_factor=1.25, type='Resize'),
                dict(keep_ratio=True, scale_factor=1.5, type='Resize'),
                dict(keep_ratio=True, scale_factor=1.75, type='Resize'),
            ],
            [
                dict(direction='horizontal', prob=0.0, type='RandomFlip'),
                dict(direction='horizontal', prob=1.0, type='RandomFlip'),
            ],
            [
                dict(type='LoadAnnotations'),
            ],
            [
                dict(type='PackSegInputs'),
            ],
        ],
        type='TestTimeAug'),
]
val_cfg = dict(type='ValLoop')
val_dataloader = dict(
    batch_size=1,
    dataset=dict(
        data_prefix=dict(
            img_path='images/validation',
            seg_map_path='annotations/validation'),
        data_root='data/ade/ADEChallengeData2016',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(keep_ratio=True, scale=(
                2048,
                512,
            ), type='Resize'),
            dict(reduce_zero_label=True, type='LoadAnnotations'),
            dict(type='PackSegInputs'),
        ],
        type='ADE20KDataset'),
    num_workers=4,
    persistent_workers=True,
    sampler=dict(shuffle=False, type='DefaultSampler'))
val_evaluator = dict(
    iou_metrics=[
        'mIoU',
    ], type='IoUMetric')
vis_backends = [
    dict(type='LocalVisBackend'),
]
visualizer = dict(
    name='visualizer',
    type='SegLocalVisualizer',
    vis_backends=[
        dict(type='LocalVisBackend'),
    ])
work_dir = '../corruptions/work_dirs/ade20k/mask2former/mask2former_swin-t_8xb2-160k_ade20k-512x512/jpeg_compression'

09/21 06:51:15 - mmengine - INFO - Distributed training is not used, all SyncBatchNorm (SyncBN) layers in the model will be automatically reverted to BatchNormXd layers if they are used.
09/21 06:51:15 - mmengine - INFO - Hooks will be executed in the following order:
before_run:
(VERY_HIGH   ) RuntimeInfoHook                    
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
before_train:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_train_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(NORMAL      ) DistSamplerSeedHook                
 -------------------- 
before_train_iter:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_train_iter:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(NORMAL      ) SegVisualizationHook               
(BELOW_NORMAL) LoggerHook                         
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
after_train_epoch:
(NORMAL      ) IterTimerHook                      
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_val:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
before_val_epoch:
(NORMAL      ) IterTimerHook                      
 -------------------- 
before_val_iter:
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_val_iter:
(NORMAL      ) IterTimerHook                      
(NORMAL      ) SegVisualizationHook               
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_val_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
after_val:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
after_train:
(VERY_HIGH   ) RuntimeInfoHook                    
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_test:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
before_test_epoch:
(NORMAL      ) IterTimerHook                      
 -------------------- 
before_test_iter:
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_test_iter:
(NORMAL      ) IterTimerHook                      
(NORMAL      ) SegVisualizationHook               
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_test_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_test:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
after_run:
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
09/21 06:51:16 - mmengine - WARNING - The prefix is not set in metric class IoUMetric.
Loads checkpoint by local backend from path: ../checkpoint_files/ade20k/mask2former/mask2former_swin-t_8xb2-160k_ade20k-512x512_20221203_234230-7d64e5dd.pth
09/21 06:51:17 - mmengine - INFO - Load checkpoint from ../checkpoint_files/ade20k/mask2former/mask2former_swin-t_8xb2-160k_ade20k-512x512_20221203_234230-7d64e5dd.pth
09/21 06:51:34 - mmengine - INFO - Iter(test) [  50/2000]    eta: 0:11:21  time: 0.2431  data_time: 0.0015  memory: 12733  
09/21 06:51:40 - mmengine - INFO - Iter(test) [ 100/2000]    eta: 0:07:27  time: 0.1636  data_time: 0.0015  memory: 12714  
09/21 06:51:44 - mmengine - INFO - Iter(test) [ 150/2000]    eta: 0:05:33  time: 0.0683  data_time: 0.0014  memory: 853  
09/21 06:51:49 - mmengine - INFO - Iter(test) [ 200/2000]    eta: 0:04:52  time: 0.0680  data_time: 0.0014  memory: 12754  
09/21 06:51:54 - mmengine - INFO - Iter(test) [ 250/2000]    eta: 0:04:22  time: 0.0723  data_time: 0.0014  memory: 12756  
09/21 06:51:58 - mmengine - INFO - Iter(test) [ 300/2000]    eta: 0:03:57  time: 0.0725  data_time: 0.0014  memory: 12721  
09/21 06:52:04 - mmengine - INFO - Iter(test) [ 350/2000]    eta: 0:03:41  time: 0.0671  data_time: 0.0014  memory: 12728  
09/21 06:52:08 - mmengine - INFO - Iter(test) [ 400/2000]    eta: 0:03:24  time: 0.0678  data_time: 0.0013  memory: 12694  
09/21 06:52:11 - mmengine - INFO - Iter(test) [ 450/2000]    eta: 0:03:06  time: 0.0642  data_time: 0.0014  memory: 894  
09/21 06:52:14 - mmengine - INFO - Iter(test) [ 500/2000]    eta: 0:02:53  time: 0.0709  data_time: 0.0013  memory: 853  
09/21 06:52:18 - mmengine - INFO - Iter(test) [ 550/2000]    eta: 0:02:42  time: 0.0730  data_time: 0.0014  memory: 961  
09/21 06:52:22 - mmengine - INFO - Iter(test) [ 600/2000]    eta: 0:02:31  time: 0.0726  data_time: 0.0014  memory: 958  
09/21 06:52:26 - mmengine - INFO - Iter(test) [ 650/2000]    eta: 0:02:24  time: 0.1552  data_time: 0.0014  memory: 12735  
09/21 06:52:30 - mmengine - INFO - Iter(test) [ 700/2000]    eta: 0:02:16  time: 0.0681  data_time: 0.0014  memory: 12724  
09/21 06:52:34 - mmengine - INFO - Iter(test) [ 750/2000]    eta: 0:02:08  time: 0.0716  data_time: 0.0013  memory: 1014  
09/21 06:52:37 - mmengine - INFO - Iter(test) [ 800/2000]    eta: 0:02:01  time: 0.0753  data_time: 0.0025  memory: 853  
09/21 06:52:41 - mmengine - INFO - Iter(test) [ 850/2000]    eta: 0:01:54  time: 0.0760  data_time: 0.0015  memory: 826  
09/21 06:52:44 - mmengine - INFO - Iter(test) [ 900/2000]    eta: 0:01:47  time: 0.0634  data_time: 0.0013  memory: 906  
09/21 06:52:48 - mmengine - INFO - Iter(test) [ 950/2000]    eta: 0:01:40  time: 0.0659  data_time: 0.0014  memory: 934  
09/21 06:52:51 - mmengine - INFO - Iter(test) [1000/2000]    eta: 0:01:34  time: 0.0669  data_time: 0.0014  memory: 934  
09/21 06:52:56 - mmengine - INFO - Iter(test) [1050/2000]    eta: 0:01:29  time: 0.0741  data_time: 0.0014  memory: 12737  
09/21 06:52:59 - mmengine - INFO - Iter(test) [1100/2000]    eta: 0:01:23  time: 0.0717  data_time: 0.0014  memory: 931  
09/21 06:53:03 - mmengine - INFO - Iter(test) [1150/2000]    eta: 0:01:18  time: 0.0670  data_time: 0.0014  memory: 904  
09/21 06:53:06 - mmengine - INFO - Iter(test) [1200/2000]    eta: 0:01:13  time: 0.0650  data_time: 0.0013  memory: 1839  
09/21 06:53:10 - mmengine - INFO - Iter(test) [1250/2000]    eta: 0:01:08  time: 0.0656  data_time: 0.0013  memory: 12716  
09/21 06:53:14 - mmengine - INFO - Iter(test) [1300/2000]    eta: 0:01:03  time: 0.0709  data_time: 0.0013  memory: 853  
09/21 06:53:17 - mmengine - INFO - Iter(test) [1350/2000]    eta: 0:00:58  time: 0.0700  data_time: 0.0015  memory: 853  
09/21 06:53:21 - mmengine - INFO - Iter(test) [1400/2000]    eta: 0:00:53  time: 0.0745  data_time: 0.0014  memory: 931  
09/21 06:53:24 - mmengine - INFO - Iter(test) [1450/2000]    eta: 0:00:48  time: 0.0671  data_time: 0.0013  memory: 934  
09/21 06:53:28 - mmengine - INFO - Iter(test) [1500/2000]    eta: 0:00:43  time: 0.0676  data_time: 0.0027  memory: 852  
09/21 06:53:31 - mmengine - INFO - Iter(test) [1550/2000]    eta: 0:00:38  time: 0.0683  data_time: 0.0013  memory: 934  
09/21 06:53:35 - mmengine - INFO - Iter(test) [1600/2000]    eta: 0:00:34  time: 0.0702  data_time: 0.0014  memory: 826  
09/21 06:53:39 - mmengine - INFO - Iter(test) [1650/2000]    eta: 0:00:30  time: 0.0696  data_time: 0.0013  memory: 12725  
09/21 06:53:43 - mmengine - INFO - Iter(test) [1700/2000]    eta: 0:00:25  time: 0.0715  data_time: 0.0016  memory: 930  
09/21 06:53:46 - mmengine - INFO - Iter(test) [1750/2000]    eta: 0:00:21  time: 0.0663  data_time: 0.0014  memory: 957  
09/21 06:53:49 - mmengine - INFO - Iter(test) [1800/2000]    eta: 0:00:16  time: 0.0706  data_time: 0.0016  memory: 853  
09/21 06:53:53 - mmengine - INFO - Iter(test) [1850/2000]    eta: 0:00:12  time: 0.0745  data_time: 0.0015  memory: 773  
09/21 06:53:57 - mmengine - INFO - Iter(test) [1900/2000]    eta: 0:00:08  time: 0.0742  data_time: 0.0014  memory: 987  
09/21 06:54:00 - mmengine - INFO - Iter(test) [1950/2000]    eta: 0:00:04  time: 0.0711  data_time: 0.0014  memory: 1224  
09/21 06:54:04 - mmengine - INFO - Iter(test) [2000/2000]    eta: 0:00:00  time: 0.0607  data_time: 0.0012  memory: 1012  
09/21 06:54:04 - mmengine - INFO - per class results:
09/21 06:54:04 - mmengine - INFO - 
+---------------------+-------+-------+
|        Class        |  IoU  |  Acc  |
+---------------------+-------+-------+
|         wall        | 76.71 | 87.72 |
|       building      | 82.26 |  93.3 |
|         sky         |  94.3 | 97.12 |
|        floor        | 79.07 | 90.38 |
|         tree        | 72.21 | 83.32 |
|       ceiling       | 82.28 | 88.64 |
|         road        | 82.32 | 89.85 |
|         bed         | 88.71 | 94.68 |
|      windowpane     | 59.57 | 77.59 |
|        grass        | 66.58 | 83.86 |
|       cabinet       | 57.52 | 71.03 |
|       sidewalk      | 62.52 |  78.9 |
|        person       | 80.27 | 87.98 |
|        earth        |  34.1 | 43.35 |
|         door        | 41.85 | 57.16 |
|        table        | 58.37 | 76.01 |
|       mountain      | 59.19 | 77.11 |
|        plant        | 52.46 | 63.96 |
|       curtain       | 73.07 | 83.59 |
|        chair        | 55.92 | 69.27 |
|         car         | 84.35 | 92.43 |
|        water        | 50.35 | 67.34 |
|       painting      | 68.25 | 83.78 |
|         sofa        | 63.85 | 82.57 |
|        shelf        | 42.73 | 61.62 |
|        house        | 54.43 | 69.08 |
|         sea         | 49.28 | 66.54 |
|        mirror       | 62.96 |  73.5 |
|         rug         | 60.28 | 69.18 |
|        field        | 28.48 |  46.0 |
|       armchair      | 40.95 | 60.74 |
|         seat        | 59.99 | 85.12 |
|        fence        | 41.64 | 55.82 |
|         desk        | 44.95 | 69.21 |
|         rock        | 51.83 | 79.11 |
|       wardrobe      |  47.4 |  65.6 |
|         lamp        | 62.96 | 75.77 |
|       bathtub       | 70.89 | 81.82 |
|       railing       | 36.64 | 51.29 |
|       cushion       | 52.16 | 65.78 |
|         base        | 26.63 | 56.22 |
|         box         | 21.52 | 34.03 |
|        column       | 45.05 | 55.33 |
|      signboard      | 36.66 | 50.67 |
|   chest of drawers  | 34.44 | 59.08 |
|       counter       | 37.97 | 52.78 |
|         sand        | 35.54 | 54.41 |
|         sink        | 72.54 | 82.36 |
|      skyscraper     |  66.1 | 79.66 |
|      fireplace      |  71.0 | 86.44 |
|     refrigerator    | 76.76 |  88.5 |
|      grandstand     | 36.94 |  62.4 |
|         path        | 19.21 | 32.56 |
|        stairs       | 30.78 | 35.84 |
|        runway       | 73.85 | 94.68 |
|         case        | 39.56 | 47.51 |
|      pool table     | 90.94 | 95.71 |
|        pillow       |  53.4 | 65.51 |
|     screen door     | 39.17 | 46.18 |
|       stairway      | 34.85 | 47.37 |
|        river        | 15.13 | 34.47 |
|        bridge       | 67.63 | 83.48 |
|       bookcase      | 33.87 | 44.59 |
|        blind        | 28.54 | 29.76 |
|     coffee table    | 63.64 | 79.94 |
|        toilet       | 83.44 | 87.73 |
|        flower       | 35.93 |  47.1 |
|         book        | 46.68 | 64.14 |
|         hill        |  6.49 | 11.48 |
|        bench        | 51.01 | 59.43 |
|      countertop     | 53.71 | 67.37 |
|        stove        |  72.8 | 82.09 |
|         palm        | 49.22 | 73.04 |
|    kitchen island   | 38.88 | 63.49 |
|       computer      | 53.95 | 59.42 |
|     swivel chair    | 47.11 | 64.42 |
|         boat        | 48.56 | 86.56 |
|         bar         | 57.13 | 67.51 |
|    arcade machine   | 57.66 | 62.76 |
|        hovel        | 28.08 | 45.64 |
|         bus         |  66.9 | 90.36 |
|        towel        | 63.15 |  72.4 |
|        light        | 58.37 |  71.6 |
|        truck        |  34.7 | 55.74 |
|        tower        | 16.81 | 20.59 |
|      chandelier     |  62.6 | 75.48 |
|        awning       | 34.87 | 41.14 |
|     streetlight     | 26.85 | 41.59 |
|        booth        | 32.39 | 50.35 |
| television receiver | 58.86 | 76.61 |
|       airplane      | 56.56 |  65.6 |
|      dirt track     |  8.41 | 13.32 |
|       apparel       | 33.85 | 52.23 |
|         pole        |  22.4 |  32.1 |
|         land        |  6.54 |  8.23 |
|      bannister      | 18.41 | 26.07 |
|      escalator      | 34.93 | 38.47 |
|       ottoman       | 40.18 | 51.98 |
|        bottle       | 22.09 | 26.85 |
|        buffet       | 33.01 | 39.44 |
|        poster       | 26.35 | 38.34 |
|        stage        | 23.43 | 33.03 |
|         van         | 44.84 | 62.58 |
|         ship        |  6.81 |  6.97 |
|       fountain      | 20.41 |  21.7 |
|    conveyer belt    |  59.8 | 91.15 |
|        canopy       | 29.07 | 40.75 |
|        washer       | 64.35 | 70.34 |
|      plaything      | 25.25 | 41.86 |
|    swimming pool    | 29.67 | 46.84 |
|        stool        | 43.08 |  59.7 |
|        barrel       | 18.16 | 51.06 |
|        basket       | 32.36 | 38.96 |
|      waterfall      | 51.92 | 71.17 |
|         tent        |  83.7 | 97.48 |
|         bag         | 11.24 | 13.41 |
|       minibike      | 73.44 | 83.01 |
|        cradle       | 83.14 | 96.74 |
|         oven        | 25.08 | 51.76 |
|         ball        |  32.5 | 36.76 |
|         food        | 39.39 | 45.35 |
|         step        |  5.14 |  6.56 |
|         tank        | 24.71 | 25.83 |
|      trade name     | 30.31 | 35.46 |
|      microwave      | 65.06 | 71.34 |
|         pot         | 42.31 | 49.14 |
|        animal       | 55.11 | 56.92 |
|       bicycle       | 59.01 |  77.2 |
|         lake        | 69.16 | 73.22 |
|      dishwasher     | 62.22 | 79.88 |
|        screen       | 52.62 | 71.07 |
|       blanket       | 15.43 | 18.49 |
|      sculpture      | 41.29 | 51.23 |
|         hood        | 63.57 | 70.07 |
|        sconce       | 48.53 | 59.09 |
|         vase        | 40.74 | 55.33 |
|    traffic light    | 31.93 | 47.68 |
|         tray        |  13.4 | 20.33 |
|        ashcan       | 40.36 | 61.75 |
|         fan         | 55.11 |  75.2 |
|         pier        | 62.96 |  84.4 |
|      crt screen     |  1.96 |  6.7  |
|        plate        | 54.01 | 66.12 |
|       monitor       |  2.74 |  4.61 |
|    bulletin board   |  43.9 | 58.96 |
|        shower       |  1.48 | 17.86 |
|       radiator      | 49.38 | 61.33 |
|        glass        | 14.78 | 16.65 |
|        clock        | 32.74 | 36.57 |
|         flag        | 31.63 |  35.2 |
+---------------------+-------+-------+
09/21 06:54:04 - mmengine - INFO - Iter(test) [2000/2000]    aAcc: 82.0000  mIoU: 46.5600  mAcc: 59.2100  data_time: 0.0016  time: 0.0835
Finished processing corruption type: jpeg_compression
Processing corruption type: elastic_transform
09/21 06:54:08 - mmengine - INFO - 
------------------------------------------------------------
System environment:
    sys.platform: linux
    Python: 3.10.13 | packaged by conda-forge | (main, Dec 23 2023, 15:36:39) [GCC 12.3.0]
    CUDA available: True
    MUSA available: False
    numpy_random_seed: 1794308059
    GPU 0: Tesla V100-SXM2-32GB
    CUDA_HOME: /opt/bwhpc/common/devel/cuda/11.7
    NVCC: Cuda compilation tools, release 11.7, V11.7.99
    GCC: gcc (GCC) 8.5.0 20210514 (Red Hat 8.5.0-18)
    PyTorch: 1.13.1
    PyTorch compiling details: PyTorch built with:
  - GCC 9.3
  - C++ Version: 201402
  - Intel(R) oneAPI Math Kernel Library Version 2023.1-Product Build 20230303 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v2.6.0 (Git Hash 52b5f107dd9cf10910aaa19cb47f3abf9b349815)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - LAPACK is enabled (usually provided by MKL)
  - NNPACK is enabled
  - CPU capability usage: AVX2
  - CUDA Runtime 11.7
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_61,code=sm_61;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86;-gencode;arch=compute_37,code=compute_37
  - CuDNN 8.5
  - Magma 2.6.1
  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.7, CUDNN_VERSION=8.5.0, CXX_COMPILER=/opt/rh/devtoolset-9/root/usr/bin/c++, CXX_FLAGS= -fabi-version=11 -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -DEDGE_PROFILER_USE_KINETO -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Werror=non-virtual-dtor -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wunused-local-typedefs -Wno-unused-parameter -Wno-unused-function -Wno-unused-result -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Werror=cast-function-type -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.13.1, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, USE_ROCM=OFF, 

    TorchVision: 0.14.1
    OpenCV: 3.4.18
    MMEngine: 0.10.4

Runtime environment:
    cudnn_benchmark: True
    mp_cfg: {'mp_start_method': 'fork', 'opencv_num_threads': 0}
    dist_cfg: {'backend': 'nccl'}
    seed: 1794308059
    Distributed launcher: none
    Distributed training: False
    GPU number: 1
------------------------------------------------------------

09/21 06:54:08 - mmengine - INFO - Config:
auto_scale_lr = dict(base_batch_size=16, enable=False)
backbone_embed_multi = dict(decay_mult=0.0, lr_mult=0.1)
backbone_norm_multi = dict(decay_mult=0.0, lr_mult=0.1)
crop_size = (
    512,
    512,
)
custom_imports = dict(allow_failed_imports=False, imports='mmdet.models')
custom_keys = dict({
    'absolute_pos_embed':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone':
    dict(decay_mult=1.0, lr_mult=0.1),
    'backbone.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.patch_embed.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.0.blocks.0.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.0.blocks.1.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.0.downsample.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.1.blocks.0.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.1.blocks.1.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.1.downsample.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.0.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.1.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.2.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.3.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.4.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.5.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.downsample.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.3.blocks.0.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.3.blocks.1.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'level_embed':
    dict(decay_mult=0.0, lr_mult=1.0),
    'query_embed':
    dict(decay_mult=0.0, lr_mult=1.0),
    'query_feat':
    dict(decay_mult=0.0, lr_mult=1.0),
    'relative_position_bias_table':
    dict(decay_mult=0.0, lr_mult=0.1)
})
data_root = 'data/ade/ADEChallengeData2016'
dataset_type = 'ADE20KDataset'
default_hooks = dict(
    checkpoint=dict(
        by_epoch=False, interval=5000, save_best='mIoU',
        type='CheckpointHook'),
    logger=dict(interval=50, log_metric_by_epoch=False, type='LoggerHook'),
    param_scheduler=dict(type='ParamSchedulerHook'),
    sampler_seed=dict(type='DistSamplerSeedHook'),
    timer=dict(type='IterTimerHook'),
    visualization=dict(type='SegVisualizationHook'))
default_scope = 'mmseg'
depths = [
    2,
    2,
    6,
    2,
]
embed_multi = dict(decay_mult=0.0, lr_mult=1.0)
env_cfg = dict(
    cudnn_benchmark=True,
    dist_cfg=dict(backend='nccl'),
    mp_cfg=dict(mp_start_method='fork', opencv_num_threads=0))
img_ratios = [
    0.5,
    0.75,
    1.0,
    1.25,
    1.5,
    1.75,
]
launcher = 'none'
load_from = '../checkpoint_files/ade20k/mask2former/mask2former_swin-t_8xb2-160k_ade20k-512x512_20221203_234230-7d64e5dd.pth'
log_level = 'INFO'
log_processor = dict(by_epoch=False)
model = dict(
    backbone=dict(
        attn_drop_rate=0.0,
        depths=[
            2,
            2,
            6,
            2,
        ],
        drop_path_rate=0.3,
        drop_rate=0.0,
        embed_dims=96,
        frozen_stages=-1,
        init_cfg=dict(
            checkpoint=
            'https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/swin/swin_tiny_patch4_window7_224_20220317-1cdeb081.pth',
            type='Pretrained'),
        mlp_ratio=4,
        num_heads=[
            3,
            6,
            12,
            24,
        ],
        out_indices=(
            0,
            1,
            2,
            3,
        ),
        patch_norm=True,
        qk_scale=None,
        qkv_bias=True,
        type='SwinTransformer',
        window_size=7,
        with_cp=False),
    data_preprocessor=dict(
        bgr_to_rgb=True,
        corruption='elastic_transform',
        mean=[
            123.675,
            116.28,
            103.53,
        ],
        pad_val=0,
        seg_pad_val=255,
        size=(
            512,
            512,
        ),
        std=[
            58.395,
            57.12,
            57.375,
        ],
        test_cfg=dict(size_divisor=32),
        type='SegDataPreProcessor'),
    decode_head=dict(
        align_corners=False,
        enforce_decoder_input_project=False,
        feat_channels=256,
        in_channels=[
            96,
            192,
            384,
            768,
        ],
        loss_cls=dict(
            class_weight=[
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                0.1,
            ],
            loss_weight=2.0,
            reduction='mean',
            type='mmdet.CrossEntropyLoss',
            use_sigmoid=False),
        loss_dice=dict(
            activate=True,
            eps=1.0,
            loss_weight=5.0,
            naive_dice=True,
            reduction='mean',
            type='mmdet.DiceLoss',
            use_sigmoid=True),
        loss_mask=dict(
            loss_weight=5.0,
            reduction='mean',
            type='mmdet.CrossEntropyLoss',
            use_sigmoid=True),
        num_classes=150,
        num_queries=100,
        num_transformer_feat_level=3,
        out_channels=256,
        pixel_decoder=dict(
            act_cfg=dict(type='ReLU'),
            encoder=dict(
                init_cfg=None,
                layer_cfg=dict(
                    ffn_cfg=dict(
                        act_cfg=dict(inplace=True, type='ReLU'),
                        embed_dims=256,
                        feedforward_channels=1024,
                        ffn_drop=0.0,
                        num_fcs=2),
                    self_attn_cfg=dict(
                        batch_first=True,
                        dropout=0.0,
                        embed_dims=256,
                        im2col_step=64,
                        init_cfg=None,
                        norm_cfg=None,
                        num_heads=8,
                        num_levels=3,
                        num_points=4)),
                num_layers=6),
            init_cfg=None,
            norm_cfg=dict(num_groups=32, type='GN'),
            num_outs=3,
            positional_encoding=dict(normalize=True, num_feats=128),
            type='mmdet.MSDeformAttnPixelDecoder'),
        positional_encoding=dict(normalize=True, num_feats=128),
        strides=[
            4,
            8,
            16,
            32,
        ],
        train_cfg=dict(
            assigner=dict(
                match_costs=[
                    dict(type='mmdet.ClassificationCost', weight=2.0),
                    dict(
                        type='mmdet.CrossEntropyLossCost',
                        use_sigmoid=True,
                        weight=5.0),
                    dict(
                        eps=1.0,
                        pred_act=True,
                        type='mmdet.DiceCost',
                        weight=5.0),
                ],
                type='mmdet.HungarianAssigner'),
            importance_sample_ratio=0.75,
            num_points=12544,
            oversample_ratio=3.0,
            sampler=dict(type='mmdet.MaskPseudoSampler')),
        transformer_decoder=dict(
            init_cfg=None,
            layer_cfg=dict(
                cross_attn_cfg=dict(
                    attn_drop=0.0,
                    batch_first=True,
                    dropout_layer=None,
                    embed_dims=256,
                    num_heads=8,
                    proj_drop=0.0),
                ffn_cfg=dict(
                    act_cfg=dict(inplace=True, type='ReLU'),
                    add_identity=True,
                    dropout_layer=None,
                    embed_dims=256,
                    feedforward_channels=2048,
                    ffn_drop=0.0,
                    num_fcs=2),
                self_attn_cfg=dict(
                    attn_drop=0.0,
                    batch_first=True,
                    dropout_layer=None,
                    embed_dims=256,
                    num_heads=8,
                    proj_drop=0.0)),
            num_layers=9,
            return_intermediate=True),
        type='Mask2FormerHead'),
    test_cfg=dict(mode='whole'),
    train_cfg=dict(),
    type='EncoderDecoder')
num_classes = 150
optim_wrapper = dict(
    clip_grad=dict(max_norm=0.01, norm_type=2),
    optimizer=dict(
        betas=(
            0.9,
            0.999,
        ),
        eps=1e-08,
        lr=0.0001,
        type='AdamW',
        weight_decay=0.05),
    paramwise_cfg=dict(
        custom_keys=dict({
            'absolute_pos_embed':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone':
            dict(decay_mult=1.0, lr_mult=0.1),
            'backbone.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.patch_embed.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.0.blocks.0.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.0.blocks.1.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.0.downsample.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.1.blocks.0.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.1.blocks.1.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.1.downsample.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.0.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.1.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.2.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.3.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.4.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.5.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.downsample.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.3.blocks.0.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.3.blocks.1.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'level_embed':
            dict(decay_mult=0.0, lr_mult=1.0),
            'query_embed':
            dict(decay_mult=0.0, lr_mult=1.0),
            'query_feat':
            dict(decay_mult=0.0, lr_mult=1.0),
            'relative_position_bias_table':
            dict(decay_mult=0.0, lr_mult=0.1)
        }),
        norm_decay_mult=0.0),
    type='OptimWrapper')
optimizer = dict(
    betas=(
        0.9,
        0.999,
    ),
    eps=1e-08,
    lr=0.0001,
    type='AdamW',
    weight_decay=0.05)
param_scheduler = [
    dict(
        begin=0,
        by_epoch=False,
        end=160000,
        eta_min=0,
        power=0.9,
        type='PolyLR'),
]
pretrained = 'https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/swin/swin_tiny_patch4_window7_224_20220317-1cdeb081.pth'
resume = False
test_cfg = dict(type='TestLoop')
test_dataloader = dict(
    batch_size=1,
    dataset=dict(
        data_prefix=dict(
            img_path='images/validation',
            seg_map_path='annotations/validation'),
        data_root='data/ade/ADEChallengeData2016',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(keep_ratio=True, scale=(
                2048,
                512,
            ), type='Resize'),
            dict(reduce_zero_label=True, type='LoadAnnotations'),
            dict(type='PackSegInputs'),
        ],
        type='ADE20KDataset'),
    num_workers=4,
    persistent_workers=True,
    sampler=dict(shuffle=False, type='DefaultSampler'))
test_evaluator = dict(
    iou_metrics=[
        'mIoU',
    ], type='IoUMetric')
test_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(keep_ratio=True, scale=(
        2048,
        512,
    ), type='Resize'),
    dict(reduce_zero_label=True, type='LoadAnnotations'),
    dict(type='PackSegInputs'),
]
train_cfg = dict(
    max_iters=160000, type='IterBasedTrainLoop', val_interval=5000)
train_dataloader = dict(
    batch_size=2,
    dataset=dict(
        data_prefix=dict(
            img_path='images/training', seg_map_path='annotations/training'),
        data_root='data/ade/ADEChallengeData2016',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(reduce_zero_label=True, type='LoadAnnotations'),
            dict(
                max_size=2048,
                resize_type='ResizeShortestEdge',
                scales=[
                    256,
                    307,
                    358,
                    409,
                    460,
                    512,
                    563,
                    614,
                    665,
                    716,
                    768,
                    819,
                    870,
                    921,
                    972,
                    1024,
                ],
                type='RandomChoiceResize'),
            dict(
                cat_max_ratio=0.75, crop_size=(
                    512,
                    512,
                ), type='RandomCrop'),
            dict(prob=0.5, type='RandomFlip'),
            dict(type='PhotoMetricDistortion'),
            dict(type='PackSegInputs'),
        ],
        type='ADE20KDataset'),
    num_workers=4,
    persistent_workers=True,
    sampler=dict(shuffle=True, type='InfiniteSampler'))
train_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(reduce_zero_label=True, type='LoadAnnotations'),
    dict(
        max_size=2048,
        resize_type='ResizeShortestEdge',
        scales=[
            256,
            307,
            358,
            409,
            460,
            512,
            563,
            614,
            665,
            716,
            768,
            819,
            870,
            921,
            972,
            1024,
        ],
        type='RandomChoiceResize'),
    dict(cat_max_ratio=0.75, crop_size=(
        512,
        512,
    ), type='RandomCrop'),
    dict(prob=0.5, type='RandomFlip'),
    dict(type='PhotoMetricDistortion'),
    dict(type='PackSegInputs'),
]
tta_model = dict(type='SegTTAModel')
tta_pipeline = [
    dict(backend_args=None, type='LoadImageFromFile'),
    dict(
        transforms=[
            [
                dict(keep_ratio=True, scale_factor=0.5, type='Resize'),
                dict(keep_ratio=True, scale_factor=0.75, type='Resize'),
                dict(keep_ratio=True, scale_factor=1.0, type='Resize'),
                dict(keep_ratio=True, scale_factor=1.25, type='Resize'),
                dict(keep_ratio=True, scale_factor=1.5, type='Resize'),
                dict(keep_ratio=True, scale_factor=1.75, type='Resize'),
            ],
            [
                dict(direction='horizontal', prob=0.0, type='RandomFlip'),
                dict(direction='horizontal', prob=1.0, type='RandomFlip'),
            ],
            [
                dict(type='LoadAnnotations'),
            ],
            [
                dict(type='PackSegInputs'),
            ],
        ],
        type='TestTimeAug'),
]
val_cfg = dict(type='ValLoop')
val_dataloader = dict(
    batch_size=1,
    dataset=dict(
        data_prefix=dict(
            img_path='images/validation',
            seg_map_path='annotations/validation'),
        data_root='data/ade/ADEChallengeData2016',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(keep_ratio=True, scale=(
                2048,
                512,
            ), type='Resize'),
            dict(reduce_zero_label=True, type='LoadAnnotations'),
            dict(type='PackSegInputs'),
        ],
        type='ADE20KDataset'),
    num_workers=4,
    persistent_workers=True,
    sampler=dict(shuffle=False, type='DefaultSampler'))
val_evaluator = dict(
    iou_metrics=[
        'mIoU',
    ], type='IoUMetric')
vis_backends = [
    dict(type='LocalVisBackend'),
]
visualizer = dict(
    name='visualizer',
    type='SegLocalVisualizer',
    vis_backends=[
        dict(type='LocalVisBackend'),
    ])
work_dir = '../corruptions/work_dirs/ade20k/mask2former/mask2former_swin-t_8xb2-160k_ade20k-512x512/elastic_transform'

09/21 06:54:11 - mmengine - INFO - Distributed training is not used, all SyncBatchNorm (SyncBN) layers in the model will be automatically reverted to BatchNormXd layers if they are used.
09/21 06:54:11 - mmengine - INFO - Hooks will be executed in the following order:
before_run:
(VERY_HIGH   ) RuntimeInfoHook                    
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
before_train:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_train_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(NORMAL      ) DistSamplerSeedHook                
 -------------------- 
before_train_iter:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_train_iter:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(NORMAL      ) SegVisualizationHook               
(BELOW_NORMAL) LoggerHook                         
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
after_train_epoch:
(NORMAL      ) IterTimerHook                      
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_val:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
before_val_epoch:
(NORMAL      ) IterTimerHook                      
 -------------------- 
before_val_iter:
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_val_iter:
(NORMAL      ) IterTimerHook                      
(NORMAL      ) SegVisualizationHook               
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_val_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
after_val:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
after_train:
(VERY_HIGH   ) RuntimeInfoHook                    
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_test:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
before_test_epoch:
(NORMAL      ) IterTimerHook                      
 -------------------- 
before_test_iter:
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_test_iter:
(NORMAL      ) IterTimerHook                      
(NORMAL      ) SegVisualizationHook               
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_test_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_test:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
after_run:
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
09/21 06:54:11 - mmengine - WARNING - The prefix is not set in metric class IoUMetric.
Loads checkpoint by local backend from path: ../checkpoint_files/ade20k/mask2former/mask2former_swin-t_8xb2-160k_ade20k-512x512_20221203_234230-7d64e5dd.pth
09/21 06:54:12 - mmengine - INFO - Load checkpoint from ../checkpoint_files/ade20k/mask2former/mask2former_swin-t_8xb2-160k_ade20k-512x512_20221203_234230-7d64e5dd.pth
09/21 06:55:14 - mmengine - INFO - Iter(test) [  50/2000]    eta: 0:40:21  time: 1.1738  data_time: 0.0016  memory: 12733  
09/21 06:56:06 - mmengine - INFO - Iter(test) [ 100/2000]    eta: 0:35:50  time: 1.0984  data_time: 0.0017  memory: 12714  
09/21 06:56:55 - mmengine - INFO - Iter(test) [ 150/2000]    eta: 0:33:20  time: 0.9995  data_time: 0.0017  memory: 853  
09/21 06:57:46 - mmengine - INFO - Iter(test) [ 200/2000]    eta: 0:32:06  time: 0.9760  data_time: 0.0016  memory: 12754  
09/21 06:58:35 - mmengine - INFO - Iter(test) [ 250/2000]    eta: 0:30:40  time: 0.9471  data_time: 0.0016  memory: 12756  
09/21 06:59:24 - mmengine - INFO - Iter(test) [ 300/2000]    eta: 0:29:22  time: 1.0061  data_time: 0.0017  memory: 12721  
09/21 07:00:13 - mmengine - INFO - Iter(test) [ 350/2000]    eta: 0:28:20  time: 0.9100  data_time: 0.0017  memory: 12728  
09/21 07:01:03 - mmengine - INFO - Iter(test) [ 400/2000]    eta: 0:27:21  time: 1.0399  data_time: 0.0016  memory: 12694  
09/21 07:01:47 - mmengine - INFO - Iter(test) [ 450/2000]    eta: 0:26:07  time: 0.8934  data_time: 0.0016  memory: 894  
09/21 07:02:36 - mmengine - INFO - Iter(test) [ 500/2000]    eta: 0:25:12  time: 0.9602  data_time: 0.0016  memory: 853  
09/21 07:03:29 - mmengine - INFO - Iter(test) [ 550/2000]    eta: 0:24:26  time: 1.0312  data_time: 0.0018  memory: 961  
09/21 07:04:17 - mmengine - INFO - Iter(test) [ 600/2000]    eta: 0:23:31  time: 1.0133  data_time: 0.0018  memory: 958  
09/21 07:05:07 - mmengine - INFO - Iter(test) [ 650/2000]    eta: 0:22:39  time: 1.0797  data_time: 0.0017  memory: 12735  
09/21 07:05:59 - mmengine - INFO - Iter(test) [ 700/2000]    eta: 0:21:51  time: 1.0225  data_time: 0.0019  memory: 12724  
09/21 07:06:49 - mmengine - INFO - Iter(test) [ 750/2000]    eta: 0:21:00  time: 0.9512  data_time: 0.0016  memory: 1014  
09/21 07:07:35 - mmengine - INFO - Iter(test) [ 800/2000]    eta: 0:20:03  time: 0.9690  data_time: 0.0018  memory: 853  
09/21 07:08:23 - mmengine - INFO - Iter(test) [ 850/2000]    eta: 0:19:11  time: 0.9884  data_time: 0.0019  memory: 826  
09/21 07:09:08 - mmengine - INFO - Iter(test) [ 900/2000]    eta: 0:18:14  time: 0.8584  data_time: 0.0016  memory: 906  
09/21 07:09:57 - mmengine - INFO - Iter(test) [ 950/2000]    eta: 0:17:24  time: 0.9493  data_time: 0.0017  memory: 934  
09/21 07:10:43 - mmengine - INFO - Iter(test) [1000/2000]    eta: 0:16:30  time: 0.9343  data_time: 0.0016  memory: 934  
09/21 07:11:34 - mmengine - INFO - Iter(test) [1050/2000]    eta: 0:15:42  time: 0.9981  data_time: 0.0016  memory: 12737  
09/21 07:12:22 - mmengine - INFO - Iter(test) [1100/2000]    eta: 0:14:51  time: 0.9641  data_time: 0.0016  memory: 931  
09/21 07:13:09 - mmengine - INFO - Iter(test) [1150/2000]    eta: 0:14:00  time: 0.9560  data_time: 0.0016  memory: 904  
09/21 07:13:58 - mmengine - INFO - Iter(test) [1200/2000]    eta: 0:13:10  time: 0.9427  data_time: 0.0015  memory: 1839  
09/21 07:14:45 - mmengine - INFO - Iter(test) [1250/2000]    eta: 0:12:19  time: 0.9364  data_time: 0.0016  memory: 12716  
09/21 07:15:30 - mmengine - INFO - Iter(test) [1300/2000]    eta: 0:11:27  time: 0.9569  data_time: 0.0015  memory: 853  
09/21 07:16:17 - mmengine - INFO - Iter(test) [1350/2000]    eta: 0:10:37  time: 0.8963  data_time: 0.0015  memory: 853  
09/21 07:17:05 - mmengine - INFO - Iter(test) [1400/2000]    eta: 0:09:48  time: 1.0106  data_time: 0.0015  memory: 931  
09/21 07:17:51 - mmengine - INFO - Iter(test) [1450/2000]    eta: 0:08:57  time: 0.9802  data_time: 0.0015  memory: 934  
09/21 07:18:37 - mmengine - INFO - Iter(test) [1500/2000]    eta: 0:08:08  time: 0.9049  data_time: 0.0015  memory: 852  
09/21 07:19:27 - mmengine - INFO - Iter(test) [1550/2000]    eta: 0:07:19  time: 0.9660  data_time: 0.0015  memory: 934  
09/21 07:20:13 - mmengine - INFO - Iter(test) [1600/2000]    eta: 0:06:30  time: 0.9275  data_time: 0.0016  memory: 826  
09/21 07:21:00 - mmengine - INFO - Iter(test) [1650/2000]    eta: 0:05:40  time: 0.8822  data_time: 0.0015  memory: 12725  
09/21 07:21:48 - mmengine - INFO - Iter(test) [1700/2000]    eta: 0:04:52  time: 0.9477  data_time: 0.0017  memory: 930  
09/21 07:22:36 - mmengine - INFO - Iter(test) [1750/2000]    eta: 0:04:03  time: 0.9392  data_time: 0.0015  memory: 957  
09/21 07:23:21 - mmengine - INFO - Iter(test) [1800/2000]    eta: 0:03:14  time: 0.9824  data_time: 0.0018  memory: 853  
09/21 07:24:09 - mmengine - INFO - Iter(test) [1850/2000]    eta: 0:02:25  time: 0.9458  data_time: 0.0017  memory: 773  
09/21 07:24:54 - mmengine - INFO - Iter(test) [1900/2000]    eta: 0:01:36  time: 0.9105  data_time: 0.0015  memory: 987  
09/21 07:25:41 - mmengine - INFO - Iter(test) [1950/2000]    eta: 0:00:48  time: 0.9345  data_time: 0.0016  memory: 1224  
09/21 07:26:27 - mmengine - INFO - Iter(test) [2000/2000]    eta: 0:00:00  time: 0.8634  data_time: 0.0014  memory: 1012  
09/21 07:26:27 - mmengine - INFO - per class results:
09/21 07:26:27 - mmengine - INFO - 
+---------------------+-------+-------+
|        Class        |  IoU  |  Acc  |
+---------------------+-------+-------+
|         wall        | 62.26 | 76.14 |
|       building      | 74.27 | 87.06 |
|         sky         | 83.93 | 90.76 |
|        floor        | 68.93 | 81.82 |
|         tree        | 63.33 |  78.6 |
|       ceiling       | 68.97 | 81.54 |
|         road        | 73.39 | 83.58 |
|         bed         | 76.17 | 87.07 |
|      windowpane     | 47.81 |  67.6 |
|        grass        | 58.22 | 75.76 |
|       cabinet       | 46.62 | 61.97 |
|       sidewalk      | 48.95 | 65.43 |
|        person       | 60.35 | 75.15 |
|        earth        | 34.16 | 44.25 |
|         door        | 41.52 |  57.1 |
|        table        | 44.17 | 64.02 |
|       mountain      | 51.05 |  69.9 |
|        plant        | 42.35 | 58.41 |
|       curtain       | 54.09 | 73.85 |
|        chair        |  39.1 | 57.21 |
|         car         | 60.29 | 76.12 |
|        water        | 49.48 |  64.8 |
|       painting      | 44.09 | 66.91 |
|         sofa        | 52.33 |  70.0 |
|        shelf        | 32.72 | 51.88 |
|        house        | 44.65 | 56.45 |
|         sea         | 51.06 | 73.04 |
|        mirror       | 51.19 | 66.16 |
|         rug         |  55.6 | 70.63 |
|        field        | 25.64 | 42.68 |
|       armchair      | 32.04 | 53.07 |
|         seat        | 54.58 | 75.62 |
|        fence        | 33.58 | 50.02 |
|         desk        | 41.02 | 57.69 |
|         rock        | 29.18 | 47.65 |
|       wardrobe      | 44.43 | 59.56 |
|         lamp        | 29.12 | 46.77 |
|       bathtub       | 60.81 |  75.2 |
|       railing       | 29.24 | 45.08 |
|       cushion       | 35.79 |  49.8 |
|         base        | 25.08 | 47.17 |
|         box         | 16.54 | 27.12 |
|        column       | 26.34 | 43.11 |
|      signboard      |  20.7 | 35.77 |
|   chest of drawers  | 29.19 | 52.97 |
|       counter       | 28.15 | 39.46 |
|         sand        | 28.06 | 52.08 |
|         sink        | 47.07 | 63.29 |
|      skyscraper     | 43.01 | 52.11 |
|      fireplace      | 57.35 | 78.36 |
|     refrigerator    |  64.2 | 74.74 |
|      grandstand     | 38.37 | 63.53 |
|         path        |  19.3 | 28.22 |
|        stairs       | 25.74 | 32.03 |
|        runway       | 60.68 | 79.67 |
|         case        | 38.56 | 46.28 |
|      pool table     | 75.42 | 86.49 |
|        pillow       | 39.12 |  58.6 |
|     screen door     | 56.77 | 70.72 |
|       stairway      |  24.0 | 37.01 |
|        river        | 14.94 | 23.39 |
|        bridge       | 39.71 | 59.61 |
|       bookcase      | 23.17 | 35.87 |
|        blind        | 37.47 | 49.59 |
|     coffee table    | 47.34 | 67.59 |
|        toilet       | 57.79 | 70.31 |
|        flower       | 28.07 | 44.24 |
|         book        | 32.46 | 52.94 |
|         hill        |  9.91 | 21.24 |
|        bench        | 34.87 | 49.13 |
|      countertop     | 45.05 | 64.16 |
|        stove        | 57.52 | 70.05 |
|         palm        | 37.12 | 61.37 |
|    kitchen island   | 27.96 | 52.53 |
|       computer      | 46.97 | 57.22 |
|     swivel chair    | 36.07 | 54.04 |
|         boat        | 29.72 | 46.26 |
|         bar         | 42.04 | 50.81 |
|    arcade machine   | 20.37 |  23.3 |
|        hovel        |  9.71 | 15.94 |
|         bus         | 76.17 | 91.16 |
|        towel        | 40.25 |  55.8 |
|        light        | 16.81 | 28.88 |
|        truck        | 21.73 | 41.88 |
|        tower        | 22.53 | 38.95 |
|      chandelier     | 42.74 | 57.52 |
|        awning       | 14.22 | 21.92 |
|     streetlight     |  7.95 | 14.29 |
|        booth        | 32.59 | 60.42 |
| television receiver | 40.58 |  62.2 |
|       airplane      | 31.87 | 49.47 |
|      dirt track     |  1.58 |  3.76 |
|       apparel       | 20.56 | 46.48 |
|         pole        | 11.31 | 20.12 |
|         land        |  0.25 |  0.35 |
|      bannister      | 10.19 | 14.69 |
|      escalator      | 19.07 |  20.0 |
|       ottoman       | 39.11 |  55.6 |
|        bottle       | 11.49 | 19.85 |
|        buffet       | 26.68 | 34.76 |
|        poster       | 17.46 | 27.77 |
|        stage        |  5.94 | 16.56 |
|         van         | 24.43 | 36.74 |
|         ship        |  5.95 |  9.08 |
|       fountain      | 20.07 | 24.45 |
|    conveyer belt    | 50.31 | 80.54 |
|        canopy       | 16.95 | 33.14 |
|        washer       |  61.7 | 66.13 |
|      plaything      | 18.55 | 36.48 |
|    swimming pool    |  33.7 | 57.25 |
|        stool        | 22.46 | 38.62 |
|        barrel       | 25.29 | 65.86 |
|        basket       | 23.92 | 35.52 |
|      waterfall      |  51.7 | 72.03 |
|         tent        | 75.25 | 93.21 |
|         bag         | 10.56 | 15.37 |
|       minibike      | 46.84 | 67.14 |
|        cradle       | 67.18 | 77.61 |
|         oven        | 13.85 | 38.95 |
|         ball        | 30.36 | 38.07 |
|         food        | 30.33 | 41.67 |
|         step        |  6.05 |  7.59 |
|         tank        | 43.13 | 46.81 |
|      trade name     | 12.67 | 16.99 |
|      microwave      | 29.02 | 34.56 |
|         pot         | 19.63 | 29.92 |
|        animal       | 52.67 | 60.46 |
|       bicycle       |  35.3 | 58.79 |
|         lake        | 60.51 | 60.77 |
|      dishwasher     | 57.47 | 75.75 |
|        screen       | 43.88 | 72.44 |
|       blanket       | 14.48 | 19.53 |
|      sculpture      | 28.82 | 52.17 |
|         hood        |  50.3 | 65.01 |
|        sconce       | 19.14 | 30.56 |
|         vase        | 19.15 | 37.93 |
|    traffic light    | 13.63 | 29.05 |
|         tray        |  5.61 | 12.03 |
|        ashcan       | 27.16 | 47.35 |
|         fan         | 24.39 | 43.94 |
|         pier        | 57.76 | 78.49 |
|      crt screen     |  0.0  |  0.0  |
|        plate        | 36.22 | 52.63 |
|       monitor       |  2.83 |  3.88 |
|    bulletin board   | 36.36 |  47.2 |
|        shower       |  2.38 | 12.77 |
|       radiator      | 40.18 | 54.18 |
|        glass        |  9.61 | 12.94 |
|        clock        | 11.15 | 17.01 |
|         flag        | 13.05 | 20.02 |
+---------------------+-------+-------+
09/21 07:26:27 - mmengine - INFO - Iter(test) [2000/2000]    aAcc: 73.6500  mIoU: 35.6800  mAcc: 49.9000  data_time: 0.0018  time: 0.9671
Finished processing corruption type: elastic_transform
Processing corruption type: pixelate
09/21 07:26:31 - mmengine - INFO - 
------------------------------------------------------------
System environment:
    sys.platform: linux
    Python: 3.10.13 | packaged by conda-forge | (main, Dec 23 2023, 15:36:39) [GCC 12.3.0]
    CUDA available: True
    MUSA available: False
    numpy_random_seed: 2120478245
    GPU 0: Tesla V100-SXM2-32GB
    CUDA_HOME: /opt/bwhpc/common/devel/cuda/11.7
    NVCC: Cuda compilation tools, release 11.7, V11.7.99
    GCC: gcc (GCC) 8.5.0 20210514 (Red Hat 8.5.0-18)
    PyTorch: 1.13.1
    PyTorch compiling details: PyTorch built with:
  - GCC 9.3
  - C++ Version: 201402
  - Intel(R) oneAPI Math Kernel Library Version 2023.1-Product Build 20230303 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v2.6.0 (Git Hash 52b5f107dd9cf10910aaa19cb47f3abf9b349815)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - LAPACK is enabled (usually provided by MKL)
  - NNPACK is enabled
  - CPU capability usage: AVX2
  - CUDA Runtime 11.7
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_61,code=sm_61;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86;-gencode;arch=compute_37,code=compute_37
  - CuDNN 8.5
  - Magma 2.6.1
  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.7, CUDNN_VERSION=8.5.0, CXX_COMPILER=/opt/rh/devtoolset-9/root/usr/bin/c++, CXX_FLAGS= -fabi-version=11 -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -DEDGE_PROFILER_USE_KINETO -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Werror=non-virtual-dtor -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wunused-local-typedefs -Wno-unused-parameter -Wno-unused-function -Wno-unused-result -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Werror=cast-function-type -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.13.1, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, USE_ROCM=OFF, 

    TorchVision: 0.14.1
    OpenCV: 3.4.18
    MMEngine: 0.10.4

Runtime environment:
    cudnn_benchmark: True
    mp_cfg: {'mp_start_method': 'fork', 'opencv_num_threads': 0}
    dist_cfg: {'backend': 'nccl'}
    seed: 2120478245
    Distributed launcher: none
    Distributed training: False
    GPU number: 1
------------------------------------------------------------

09/21 07:26:32 - mmengine - INFO - Config:
auto_scale_lr = dict(base_batch_size=16, enable=False)
backbone_embed_multi = dict(decay_mult=0.0, lr_mult=0.1)
backbone_norm_multi = dict(decay_mult=0.0, lr_mult=0.1)
crop_size = (
    512,
    512,
)
custom_imports = dict(allow_failed_imports=False, imports='mmdet.models')
custom_keys = dict({
    'absolute_pos_embed':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone':
    dict(decay_mult=1.0, lr_mult=0.1),
    'backbone.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.patch_embed.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.0.blocks.0.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.0.blocks.1.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.0.downsample.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.1.blocks.0.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.1.blocks.1.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.1.downsample.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.0.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.1.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.2.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.3.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.4.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.5.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.downsample.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.3.blocks.0.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.3.blocks.1.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'level_embed':
    dict(decay_mult=0.0, lr_mult=1.0),
    'query_embed':
    dict(decay_mult=0.0, lr_mult=1.0),
    'query_feat':
    dict(decay_mult=0.0, lr_mult=1.0),
    'relative_position_bias_table':
    dict(decay_mult=0.0, lr_mult=0.1)
})
data_root = 'data/ade/ADEChallengeData2016'
dataset_type = 'ADE20KDataset'
default_hooks = dict(
    checkpoint=dict(
        by_epoch=False, interval=5000, save_best='mIoU',
        type='CheckpointHook'),
    logger=dict(interval=50, log_metric_by_epoch=False, type='LoggerHook'),
    param_scheduler=dict(type='ParamSchedulerHook'),
    sampler_seed=dict(type='DistSamplerSeedHook'),
    timer=dict(type='IterTimerHook'),
    visualization=dict(type='SegVisualizationHook'))
default_scope = 'mmseg'
depths = [
    2,
    2,
    6,
    2,
]
embed_multi = dict(decay_mult=0.0, lr_mult=1.0)
env_cfg = dict(
    cudnn_benchmark=True,
    dist_cfg=dict(backend='nccl'),
    mp_cfg=dict(mp_start_method='fork', opencv_num_threads=0))
img_ratios = [
    0.5,
    0.75,
    1.0,
    1.25,
    1.5,
    1.75,
]
launcher = 'none'
load_from = '../checkpoint_files/ade20k/mask2former/mask2former_swin-t_8xb2-160k_ade20k-512x512_20221203_234230-7d64e5dd.pth'
log_level = 'INFO'
log_processor = dict(by_epoch=False)
model = dict(
    backbone=dict(
        attn_drop_rate=0.0,
        depths=[
            2,
            2,
            6,
            2,
        ],
        drop_path_rate=0.3,
        drop_rate=0.0,
        embed_dims=96,
        frozen_stages=-1,
        init_cfg=dict(
            checkpoint=
            'https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/swin/swin_tiny_patch4_window7_224_20220317-1cdeb081.pth',
            type='Pretrained'),
        mlp_ratio=4,
        num_heads=[
            3,
            6,
            12,
            24,
        ],
        out_indices=(
            0,
            1,
            2,
            3,
        ),
        patch_norm=True,
        qk_scale=None,
        qkv_bias=True,
        type='SwinTransformer',
        window_size=7,
        with_cp=False),
    data_preprocessor=dict(
        bgr_to_rgb=True,
        corruption='pixelate',
        mean=[
            123.675,
            116.28,
            103.53,
        ],
        pad_val=0,
        seg_pad_val=255,
        size=(
            512,
            512,
        ),
        std=[
            58.395,
            57.12,
            57.375,
        ],
        test_cfg=dict(size_divisor=32),
        type='SegDataPreProcessor'),
    decode_head=dict(
        align_corners=False,
        enforce_decoder_input_project=False,
        feat_channels=256,
        in_channels=[
            96,
            192,
            384,
            768,
        ],
        loss_cls=dict(
            class_weight=[
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                0.1,
            ],
            loss_weight=2.0,
            reduction='mean',
            type='mmdet.CrossEntropyLoss',
            use_sigmoid=False),
        loss_dice=dict(
            activate=True,
            eps=1.0,
            loss_weight=5.0,
            naive_dice=True,
            reduction='mean',
            type='mmdet.DiceLoss',
            use_sigmoid=True),
        loss_mask=dict(
            loss_weight=5.0,
            reduction='mean',
            type='mmdet.CrossEntropyLoss',
            use_sigmoid=True),
        num_classes=150,
        num_queries=100,
        num_transformer_feat_level=3,
        out_channels=256,
        pixel_decoder=dict(
            act_cfg=dict(type='ReLU'),
            encoder=dict(
                init_cfg=None,
                layer_cfg=dict(
                    ffn_cfg=dict(
                        act_cfg=dict(inplace=True, type='ReLU'),
                        embed_dims=256,
                        feedforward_channels=1024,
                        ffn_drop=0.0,
                        num_fcs=2),
                    self_attn_cfg=dict(
                        batch_first=True,
                        dropout=0.0,
                        embed_dims=256,
                        im2col_step=64,
                        init_cfg=None,
                        norm_cfg=None,
                        num_heads=8,
                        num_levels=3,
                        num_points=4)),
                num_layers=6),
            init_cfg=None,
            norm_cfg=dict(num_groups=32, type='GN'),
            num_outs=3,
            positional_encoding=dict(normalize=True, num_feats=128),
            type='mmdet.MSDeformAttnPixelDecoder'),
        positional_encoding=dict(normalize=True, num_feats=128),
        strides=[
            4,
            8,
            16,
            32,
        ],
        train_cfg=dict(
            assigner=dict(
                match_costs=[
                    dict(type='mmdet.ClassificationCost', weight=2.0),
                    dict(
                        type='mmdet.CrossEntropyLossCost',
                        use_sigmoid=True,
                        weight=5.0),
                    dict(
                        eps=1.0,
                        pred_act=True,
                        type='mmdet.DiceCost',
                        weight=5.0),
                ],
                type='mmdet.HungarianAssigner'),
            importance_sample_ratio=0.75,
            num_points=12544,
            oversample_ratio=3.0,
            sampler=dict(type='mmdet.MaskPseudoSampler')),
        transformer_decoder=dict(
            init_cfg=None,
            layer_cfg=dict(
                cross_attn_cfg=dict(
                    attn_drop=0.0,
                    batch_first=True,
                    dropout_layer=None,
                    embed_dims=256,
                    num_heads=8,
                    proj_drop=0.0),
                ffn_cfg=dict(
                    act_cfg=dict(inplace=True, type='ReLU'),
                    add_identity=True,
                    dropout_layer=None,
                    embed_dims=256,
                    feedforward_channels=2048,
                    ffn_drop=0.0,
                    num_fcs=2),
                self_attn_cfg=dict(
                    attn_drop=0.0,
                    batch_first=True,
                    dropout_layer=None,
                    embed_dims=256,
                    num_heads=8,
                    proj_drop=0.0)),
            num_layers=9,
            return_intermediate=True),
        type='Mask2FormerHead'),
    test_cfg=dict(mode='whole'),
    train_cfg=dict(),
    type='EncoderDecoder')
num_classes = 150
optim_wrapper = dict(
    clip_grad=dict(max_norm=0.01, norm_type=2),
    optimizer=dict(
        betas=(
            0.9,
            0.999,
        ),
        eps=1e-08,
        lr=0.0001,
        type='AdamW',
        weight_decay=0.05),
    paramwise_cfg=dict(
        custom_keys=dict({
            'absolute_pos_embed':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone':
            dict(decay_mult=1.0, lr_mult=0.1),
            'backbone.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.patch_embed.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.0.blocks.0.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.0.blocks.1.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.0.downsample.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.1.blocks.0.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.1.blocks.1.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.1.downsample.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.0.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.1.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.2.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.3.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.4.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.5.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.downsample.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.3.blocks.0.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.3.blocks.1.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'level_embed':
            dict(decay_mult=0.0, lr_mult=1.0),
            'query_embed':
            dict(decay_mult=0.0, lr_mult=1.0),
            'query_feat':
            dict(decay_mult=0.0, lr_mult=1.0),
            'relative_position_bias_table':
            dict(decay_mult=0.0, lr_mult=0.1)
        }),
        norm_decay_mult=0.0),
    type='OptimWrapper')
optimizer = dict(
    betas=(
        0.9,
        0.999,
    ),
    eps=1e-08,
    lr=0.0001,
    type='AdamW',
    weight_decay=0.05)
param_scheduler = [
    dict(
        begin=0,
        by_epoch=False,
        end=160000,
        eta_min=0,
        power=0.9,
        type='PolyLR'),
]
pretrained = 'https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/swin/swin_tiny_patch4_window7_224_20220317-1cdeb081.pth'
resume = False
test_cfg = dict(type='TestLoop')
test_dataloader = dict(
    batch_size=1,
    dataset=dict(
        data_prefix=dict(
            img_path='images/validation',
            seg_map_path='annotations/validation'),
        data_root='data/ade/ADEChallengeData2016',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(keep_ratio=True, scale=(
                2048,
                512,
            ), type='Resize'),
            dict(reduce_zero_label=True, type='LoadAnnotations'),
            dict(type='PackSegInputs'),
        ],
        type='ADE20KDataset'),
    num_workers=4,
    persistent_workers=True,
    sampler=dict(shuffle=False, type='DefaultSampler'))
test_evaluator = dict(
    iou_metrics=[
        'mIoU',
    ], type='IoUMetric')
test_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(keep_ratio=True, scale=(
        2048,
        512,
    ), type='Resize'),
    dict(reduce_zero_label=True, type='LoadAnnotations'),
    dict(type='PackSegInputs'),
]
train_cfg = dict(
    max_iters=160000, type='IterBasedTrainLoop', val_interval=5000)
train_dataloader = dict(
    batch_size=2,
    dataset=dict(
        data_prefix=dict(
            img_path='images/training', seg_map_path='annotations/training'),
        data_root='data/ade/ADEChallengeData2016',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(reduce_zero_label=True, type='LoadAnnotations'),
            dict(
                max_size=2048,
                resize_type='ResizeShortestEdge',
                scales=[
                    256,
                    307,
                    358,
                    409,
                    460,
                    512,
                    563,
                    614,
                    665,
                    716,
                    768,
                    819,
                    870,
                    921,
                    972,
                    1024,
                ],
                type='RandomChoiceResize'),
            dict(
                cat_max_ratio=0.75, crop_size=(
                    512,
                    512,
                ), type='RandomCrop'),
            dict(prob=0.5, type='RandomFlip'),
            dict(type='PhotoMetricDistortion'),
            dict(type='PackSegInputs'),
        ],
        type='ADE20KDataset'),
    num_workers=4,
    persistent_workers=True,
    sampler=dict(shuffle=True, type='InfiniteSampler'))
train_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(reduce_zero_label=True, type='LoadAnnotations'),
    dict(
        max_size=2048,
        resize_type='ResizeShortestEdge',
        scales=[
            256,
            307,
            358,
            409,
            460,
            512,
            563,
            614,
            665,
            716,
            768,
            819,
            870,
            921,
            972,
            1024,
        ],
        type='RandomChoiceResize'),
    dict(cat_max_ratio=0.75, crop_size=(
        512,
        512,
    ), type='RandomCrop'),
    dict(prob=0.5, type='RandomFlip'),
    dict(type='PhotoMetricDistortion'),
    dict(type='PackSegInputs'),
]
tta_model = dict(type='SegTTAModel')
tta_pipeline = [
    dict(backend_args=None, type='LoadImageFromFile'),
    dict(
        transforms=[
            [
                dict(keep_ratio=True, scale_factor=0.5, type='Resize'),
                dict(keep_ratio=True, scale_factor=0.75, type='Resize'),
                dict(keep_ratio=True, scale_factor=1.0, type='Resize'),
                dict(keep_ratio=True, scale_factor=1.25, type='Resize'),
                dict(keep_ratio=True, scale_factor=1.5, type='Resize'),
                dict(keep_ratio=True, scale_factor=1.75, type='Resize'),
            ],
            [
                dict(direction='horizontal', prob=0.0, type='RandomFlip'),
                dict(direction='horizontal', prob=1.0, type='RandomFlip'),
            ],
            [
                dict(type='LoadAnnotations'),
            ],
            [
                dict(type='PackSegInputs'),
            ],
        ],
        type='TestTimeAug'),
]
val_cfg = dict(type='ValLoop')
val_dataloader = dict(
    batch_size=1,
    dataset=dict(
        data_prefix=dict(
            img_path='images/validation',
            seg_map_path='annotations/validation'),
        data_root='data/ade/ADEChallengeData2016',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(keep_ratio=True, scale=(
                2048,
                512,
            ), type='Resize'),
            dict(reduce_zero_label=True, type='LoadAnnotations'),
            dict(type='PackSegInputs'),
        ],
        type='ADE20KDataset'),
    num_workers=4,
    persistent_workers=True,
    sampler=dict(shuffle=False, type='DefaultSampler'))
val_evaluator = dict(
    iou_metrics=[
        'mIoU',
    ], type='IoUMetric')
vis_backends = [
    dict(type='LocalVisBackend'),
]
visualizer = dict(
    name='visualizer',
    type='SegLocalVisualizer',
    vis_backends=[
        dict(type='LocalVisBackend'),
    ])
work_dir = '../corruptions/work_dirs/ade20k/mask2former/mask2former_swin-t_8xb2-160k_ade20k-512x512/pixelate'

09/21 07:26:34 - mmengine - INFO - Distributed training is not used, all SyncBatchNorm (SyncBN) layers in the model will be automatically reverted to BatchNormXd layers if they are used.
09/21 07:26:34 - mmengine - INFO - Hooks will be executed in the following order:
before_run:
(VERY_HIGH   ) RuntimeInfoHook                    
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
before_train:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_train_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(NORMAL      ) DistSamplerSeedHook                
 -------------------- 
before_train_iter:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_train_iter:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(NORMAL      ) SegVisualizationHook               
(BELOW_NORMAL) LoggerHook                         
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
after_train_epoch:
(NORMAL      ) IterTimerHook                      
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_val:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
before_val_epoch:
(NORMAL      ) IterTimerHook                      
 -------------------- 
before_val_iter:
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_val_iter:
(NORMAL      ) IterTimerHook                      
(NORMAL      ) SegVisualizationHook               
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_val_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
after_val:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
after_train:
(VERY_HIGH   ) RuntimeInfoHook                    
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_test:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
before_test_epoch:
(NORMAL      ) IterTimerHook                      
 -------------------- 
before_test_iter:
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_test_iter:
(NORMAL      ) IterTimerHook                      
(NORMAL      ) SegVisualizationHook               
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_test_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_test:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
after_run:
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
09/21 07:26:35 - mmengine - WARNING - The prefix is not set in metric class IoUMetric.
Loads checkpoint by local backend from path: ../checkpoint_files/ade20k/mask2former/mask2former_swin-t_8xb2-160k_ade20k-512x512_20221203_234230-7d64e5dd.pth
09/21 07:26:36 - mmengine - INFO - Load checkpoint from ../checkpoint_files/ade20k/mask2former/mask2former_swin-t_8xb2-160k_ade20k-512x512_20221203_234230-7d64e5dd.pth
09/21 07:26:54 - mmengine - INFO - Iter(test) [  50/2000]    eta: 0:11:29  time: 0.2451  data_time: 0.0014  memory: 12733  
09/21 07:27:00 - mmengine - INFO - Iter(test) [ 100/2000]    eta: 0:07:27  time: 0.1595  data_time: 0.0015  memory: 12714  
09/21 07:27:03 - mmengine - INFO - Iter(test) [ 150/2000]    eta: 0:05:30  time: 0.0625  data_time: 0.0014  memory: 853  
09/21 07:27:08 - mmengine - INFO - Iter(test) [ 200/2000]    eta: 0:04:47  time: 0.0616  data_time: 0.0014  memory: 12754  
09/21 07:27:13 - mmengine - INFO - Iter(test) [ 250/2000]    eta: 0:04:16  time: 0.0686  data_time: 0.0014  memory: 12756  
09/21 07:27:17 - mmengine - INFO - Iter(test) [ 300/2000]    eta: 0:03:50  time: 0.0692  data_time: 0.0015  memory: 12721  
09/21 07:27:22 - mmengine - INFO - Iter(test) [ 350/2000]    eta: 0:03:34  time: 0.0665  data_time: 0.0014  memory: 12728  
09/21 07:27:26 - mmengine - INFO - Iter(test) [ 400/2000]    eta: 0:03:17  time: 0.0613  data_time: 0.0013  memory: 12694  
09/21 07:27:28 - mmengine - INFO - Iter(test) [ 450/2000]    eta: 0:03:00  time: 0.0587  data_time: 0.0014  memory: 894  
09/21 07:27:32 - mmengine - INFO - Iter(test) [ 500/2000]    eta: 0:02:46  time: 0.0657  data_time: 0.0013  memory: 853  
09/21 07:27:35 - mmengine - INFO - Iter(test) [ 550/2000]    eta: 0:02:35  time: 0.0687  data_time: 0.0015  memory: 961  
09/21 07:27:39 - mmengine - INFO - Iter(test) [ 600/2000]    eta: 0:02:25  time: 0.0662  data_time: 0.0015  memory: 958  
09/21 07:27:43 - mmengine - INFO - Iter(test) [ 650/2000]    eta: 0:02:18  time: 0.1537  data_time: 0.0012  memory: 12735  
09/21 07:27:47 - mmengine - INFO - Iter(test) [ 700/2000]    eta: 0:02:10  time: 0.0628  data_time: 0.0015  memory: 12724  
09/21 07:27:50 - mmengine - INFO - Iter(test) [ 750/2000]    eta: 0:02:02  time: 0.0604  data_time: 0.0013  memory: 1014  
09/21 07:27:53 - mmengine - INFO - Iter(test) [ 800/2000]    eta: 0:01:55  time: 0.0688  data_time: 0.0015  memory: 853  
09/21 07:27:56 - mmengine - INFO - Iter(test) [ 850/2000]    eta: 0:01:48  time: 0.0686  data_time: 0.0015  memory: 826  
09/21 07:28:00 - mmengine - INFO - Iter(test) [ 900/2000]    eta: 0:01:41  time: 0.0640  data_time: 0.0012  memory: 906  
09/21 07:28:03 - mmengine - INFO - Iter(test) [ 950/2000]    eta: 0:01:35  time: 0.0609  data_time: 0.0014  memory: 934  
09/21 07:28:06 - mmengine - INFO - Iter(test) [1000/2000]    eta: 0:01:29  time: 0.0600  data_time: 0.0014  memory: 934  
09/21 07:28:10 - mmengine - INFO - Iter(test) [1050/2000]    eta: 0:01:24  time: 0.0625  data_time: 0.0014  memory: 12737  
09/21 07:28:13 - mmengine - INFO - Iter(test) [1100/2000]    eta: 0:01:19  time: 0.0682  data_time: 0.0014  memory: 931  
09/21 07:28:17 - mmengine - INFO - Iter(test) [1150/2000]    eta: 0:01:14  time: 0.0686  data_time: 0.0013  memory: 904  
09/21 07:28:20 - mmengine - INFO - Iter(test) [1200/2000]    eta: 0:01:09  time: 0.0670  data_time: 0.0013  memory: 1839  
09/21 07:28:24 - mmengine - INFO - Iter(test) [1250/2000]    eta: 0:01:04  time: 0.0603  data_time: 0.0014  memory: 12716  
09/21 07:28:27 - mmengine - INFO - Iter(test) [1300/2000]    eta: 0:00:59  time: 0.0625  data_time: 0.0014  memory: 853  
09/21 07:28:30 - mmengine - INFO - Iter(test) [1350/2000]    eta: 0:00:54  time: 0.0582  data_time: 0.0014  memory: 853  
09/21 07:28:33 - mmengine - INFO - Iter(test) [1400/2000]    eta: 0:00:50  time: 0.0664  data_time: 0.0013  memory: 931  
09/21 07:28:37 - mmengine - INFO - Iter(test) [1450/2000]    eta: 0:00:45  time: 0.0688  data_time: 0.0013  memory: 934  
09/21 07:28:40 - mmengine - INFO - Iter(test) [1500/2000]    eta: 0:00:41  time: 0.0632  data_time: 0.0012  memory: 852  
09/21 07:28:43 - mmengine - INFO - Iter(test) [1550/2000]    eta: 0:00:36  time: 0.0614  data_time: 0.0013  memory: 934  
09/21 07:28:46 - mmengine - INFO - Iter(test) [1600/2000]    eta: 0:00:32  time: 0.0600  data_time: 0.0014  memory: 826  
09/21 07:28:50 - mmengine - INFO - Iter(test) [1650/2000]    eta: 0:00:28  time: 0.0583  data_time: 0.0013  memory: 12725  
09/21 07:28:53 - mmengine - INFO - Iter(test) [1700/2000]    eta: 0:00:24  time: 0.0672  data_time: 0.0014  memory: 930  
09/21 07:28:57 - mmengine - INFO - Iter(test) [1750/2000]    eta: 0:00:20  time: 0.0646  data_time: 0.0012  memory: 957  
09/21 07:29:00 - mmengine - INFO - Iter(test) [1800/2000]    eta: 0:00:15  time: 0.0673  data_time: 0.0014  memory: 853  
09/21 07:29:03 - mmengine - INFO - Iter(test) [1850/2000]    eta: 0:00:11  time: 0.0613  data_time: 0.0015  memory: 773  
09/21 07:29:06 - mmengine - INFO - Iter(test) [1900/2000]    eta: 0:00:07  time: 0.0591  data_time: 0.0013  memory: 987  
09/21 07:29:09 - mmengine - INFO - Iter(test) [1950/2000]    eta: 0:00:03  time: 0.0599  data_time: 0.0013  memory: 1224  
09/21 07:29:12 - mmengine - INFO - Iter(test) [2000/2000]    eta: 0:00:00  time: 0.0578  data_time: 0.0011  memory: 1012  
09/21 07:29:12 - mmengine - INFO - per class results:
09/21 07:29:12 - mmengine - INFO - 
+---------------------+-------+-------+
|        Class        |  IoU  |  Acc  |
+---------------------+-------+-------+
|         wall        | 74.54 | 88.13 |
|       building      | 79.64 | 92.22 |
|         sky         | 93.75 | 96.81 |
|        floor        | 78.18 | 90.52 |
|         tree        | 70.41 | 85.37 |
|       ceiling       | 81.02 | 89.89 |
|         road        | 82.03 | 87.66 |
|         bed         | 88.13 | 93.69 |
|      windowpane     | 58.75 | 77.52 |
|        grass        | 62.55 | 75.27 |
|       cabinet       | 55.78 |  71.0 |
|       sidewalk      | 62.49 | 82.64 |
|        person       |  77.1 | 85.67 |
|        earth        | 29.82 | 40.98 |
|         door        | 42.78 | 58.75 |
|        table        | 57.99 | 76.85 |
|       mountain      | 50.78 | 64.05 |
|        plant        | 46.92 | 56.35 |
|       curtain       | 74.15 | 85.37 |
|        chair        | 56.94 |  71.7 |
|         car         |  79.9 | 87.02 |
|        water        | 53.46 | 73.32 |
|       painting      | 67.56 | 84.86 |
|         sofa        | 64.01 | 80.27 |
|        shelf        | 39.63 | 54.26 |
|        house        |  28.2 | 35.36 |
|         sea         | 50.54 | 60.04 |
|        mirror       | 59.28 | 69.51 |
|         rug         | 59.82 |  69.3 |
|        field        | 23.78 | 41.77 |
|       armchair      |  35.7 | 51.39 |
|         seat        | 47.71 | 76.79 |
|        fence        | 38.24 | 53.52 |
|         desk        | 48.19 | 65.51 |
|         rock        | 28.46 | 46.25 |
|       wardrobe      | 44.32 | 62.61 |
|         lamp        | 61.28 | 75.98 |
|       bathtub       | 75.53 | 90.46 |
|       railing       | 36.46 | 46.51 |
|       cushion       | 53.13 | 63.84 |
|         base        | 14.45 | 21.38 |
|         box         |  18.4 | 27.21 |
|        column       | 41.25 | 54.04 |
|      signboard      | 36.38 | 51.66 |
|   chest of drawers  | 43.47 |  61.3 |
|       counter       |  25.0 | 35.95 |
|         sand        | 30.38 |  45.1 |
|         sink        | 68.37 | 75.14 |
|      skyscraper     | 49.79 | 55.64 |
|      fireplace      | 67.63 | 78.52 |
|     refrigerator    | 84.16 | 89.57 |
|      grandstand     | 28.53 | 67.51 |
|         path        | 13.82 | 22.15 |
|        stairs       | 30.48 | 37.41 |
|        runway       | 67.78 | 87.99 |
|         case        | 51.99 | 58.04 |
|      pool table     |  91.1 | 94.37 |
|        pillow       | 52.43 | 62.41 |
|     screen door     | 38.84 | 53.73 |
|       stairway      | 37.29 | 48.24 |
|        river        | 10.21 | 18.75 |
|        bridge       | 57.38 |  70.5 |
|       bookcase      | 31.06 | 39.45 |
|        blind        | 48.24 | 57.73 |
|     coffee table    | 62.49 | 78.33 |
|        toilet       | 84.11 | 89.29 |
|        flower       | 37.41 | 45.22 |
|         book        | 42.81 | 62.25 |
|         hill        | 11.31 |  21.5 |
|        bench        | 36.89 | 50.85 |
|      countertop     | 56.53 | 67.68 |
|        stove        | 67.85 |  75.8 |
|         palm        | 44.87 |  64.4 |
|    kitchen island   | 34.06 |  59.5 |
|       computer      | 50.64 | 55.64 |
|     swivel chair    | 43.38 | 54.55 |
|         boat        | 35.13 | 36.78 |
|         bar         | 48.66 | 54.84 |
|    arcade machine   | 31.39 | 33.77 |
|        hovel        | 19.78 | 31.69 |
|         bus         | 82.81 | 92.75 |
|        towel        |  53.7 | 61.48 |
|        light        | 57.07 | 71.79 |
|        truck        | 22.27 | 44.95 |
|        tower        | 30.63 | 37.67 |
|      chandelier     | 63.53 | 73.92 |
|        awning       | 30.65 | 35.21 |
|     streetlight     | 29.44 | 46.46 |
|        booth        | 35.44 | 39.13 |
| television receiver | 59.11 |  77.3 |
|       airplane      | 46.42 | 59.73 |
|      dirt track     |  0.0  |  0.0  |
|       apparel       | 28.13 | 42.99 |
|         pole        |  22.8 | 36.62 |
|         land        |  5.56 |  7.71 |
|      bannister      |  8.15 | 13.27 |
|      escalator      |  4.72 |  4.84 |
|       ottoman       | 47.16 | 64.87 |
|        bottle       | 14.82 | 22.32 |
|        buffet       |  27.1 | 32.56 |
|        poster       | 27.28 | 39.84 |
|        stage        | 12.77 | 18.27 |
|         van         | 36.37 | 55.77 |
|         ship        |  6.43 |  6.68 |
|       fountain      |  0.07 |  0.07 |
|    conveyer belt    | 50.29 | 65.23 |
|        canopy       |  35.1 | 42.58 |
|        washer       | 57.39 | 58.93 |
|      plaything      | 19.79 | 33.36 |
|    swimming pool    | 54.51 | 74.61 |
|        stool        | 43.38 | 59.11 |
|        barrel       | 49.47 | 74.15 |
|        basket       |  14.3 | 16.54 |
|      waterfall      | 45.68 | 52.45 |
|         tent        | 95.14 | 97.83 |
|         bag         | 11.64 | 14.16 |
|       minibike      | 47.03 | 50.73 |
|        cradle       | 84.35 |  96.1 |
|         oven        | 26.02 | 32.47 |
|         ball        |  10.8 | 13.12 |
|         food        | 53.28 | 62.62 |
|         step        |  7.36 | 10.08 |
|         tank        | 23.12 | 25.47 |
|      trade name     | 24.68 |  31.6 |
|      microwave      | 38.18 | 42.32 |
|         pot         | 47.59 | 55.75 |
|        animal       | 38.39 | 47.61 |
|       bicycle       | 52.43 | 62.38 |
|         lake        |  9.06 |  9.56 |
|      dishwasher     | 58.43 | 74.19 |
|        screen       | 51.22 | 89.42 |
|       blanket       | 18.53 | 20.45 |
|      sculpture      |  41.2 | 55.51 |
|         hood        | 73.77 | 79.09 |
|        sconce       | 41.11 | 55.73 |
|         vase        | 29.32 | 41.91 |
|    traffic light    |  32.9 | 47.95 |
|         tray        | 14.62 | 25.17 |
|        ashcan       | 37.13 | 54.82 |
|         fan         | 61.46 | 73.65 |
|         pier        | 12.27 |  14.2 |
|      crt screen     |  0.29 |  1.16 |
|        plate        | 45.99 | 56.41 |
|       monitor       |  5.88 |  9.68 |
|    bulletin board   | 41.54 | 50.72 |
|        shower       |  2.12 |  12.7 |
|       radiator      | 57.58 | 66.77 |
|        glass        | 12.69 | 14.09 |
|        clock        | 29.61 | 34.43 |
|         flag        |  34.4 | 37.93 |
+---------------------+-------+-------+
09/21 07:29:12 - mmengine - INFO - Iter(test) [2000/2000]    aAcc: 80.5300  mIoU: 43.0500  mAcc: 53.9100  data_time: 0.0016  time: 0.0780
Finished processing corruption type: pixelate
Processing corruption type: jpeg_compression
09/21 07:29:16 - mmengine - INFO - 
------------------------------------------------------------
System environment:
    sys.platform: linux
    Python: 3.10.13 | packaged by conda-forge | (main, Dec 23 2023, 15:36:39) [GCC 12.3.0]
    CUDA available: True
    MUSA available: False
    numpy_random_seed: 480334773
    GPU 0: Tesla V100-SXM2-32GB
    CUDA_HOME: /opt/bwhpc/common/devel/cuda/11.7
    NVCC: Cuda compilation tools, release 11.7, V11.7.99
    GCC: gcc (GCC) 8.5.0 20210514 (Red Hat 8.5.0-18)
    PyTorch: 1.13.1
    PyTorch compiling details: PyTorch built with:
  - GCC 9.3
  - C++ Version: 201402
  - Intel(R) oneAPI Math Kernel Library Version 2023.1-Product Build 20230303 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v2.6.0 (Git Hash 52b5f107dd9cf10910aaa19cb47f3abf9b349815)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - LAPACK is enabled (usually provided by MKL)
  - NNPACK is enabled
  - CPU capability usage: AVX2
  - CUDA Runtime 11.7
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_61,code=sm_61;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86;-gencode;arch=compute_37,code=compute_37
  - CuDNN 8.5
  - Magma 2.6.1
  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.7, CUDNN_VERSION=8.5.0, CXX_COMPILER=/opt/rh/devtoolset-9/root/usr/bin/c++, CXX_FLAGS= -fabi-version=11 -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -DEDGE_PROFILER_USE_KINETO -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Werror=non-virtual-dtor -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wunused-local-typedefs -Wno-unused-parameter -Wno-unused-function -Wno-unused-result -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Werror=cast-function-type -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.13.1, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, USE_ROCM=OFF, 

    TorchVision: 0.14.1
    OpenCV: 3.4.18
    MMEngine: 0.10.4

Runtime environment:
    cudnn_benchmark: True
    mp_cfg: {'mp_start_method': 'fork', 'opencv_num_threads': 0}
    dist_cfg: {'backend': 'nccl'}
    seed: 480334773
    Distributed launcher: none
    Distributed training: False
    GPU number: 1
------------------------------------------------------------

09/21 07:29:17 - mmengine - INFO - Config:
auto_scale_lr = dict(base_batch_size=16, enable=False)
backbone_embed_multi = dict(decay_mult=0.0, lr_mult=0.1)
backbone_norm_multi = dict(decay_mult=0.0, lr_mult=0.1)
crop_size = (
    512,
    512,
)
custom_imports = dict(allow_failed_imports=False, imports='mmdet.models')
custom_keys = dict({
    'absolute_pos_embed':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone':
    dict(decay_mult=1.0, lr_mult=0.1),
    'backbone.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.patch_embed.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.0.blocks.0.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.0.blocks.1.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.0.downsample.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.1.blocks.0.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.1.blocks.1.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.1.downsample.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.0.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.1.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.2.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.3.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.4.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.blocks.5.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.2.downsample.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.3.blocks.0.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'backbone.stages.3.blocks.1.norm':
    dict(decay_mult=0.0, lr_mult=0.1),
    'level_embed':
    dict(decay_mult=0.0, lr_mult=1.0),
    'query_embed':
    dict(decay_mult=0.0, lr_mult=1.0),
    'query_feat':
    dict(decay_mult=0.0, lr_mult=1.0),
    'relative_position_bias_table':
    dict(decay_mult=0.0, lr_mult=0.1)
})
data_root = 'data/ade/ADEChallengeData2016'
dataset_type = 'ADE20KDataset'
default_hooks = dict(
    checkpoint=dict(
        by_epoch=False, interval=5000, save_best='mIoU',
        type='CheckpointHook'),
    logger=dict(interval=50, log_metric_by_epoch=False, type='LoggerHook'),
    param_scheduler=dict(type='ParamSchedulerHook'),
    sampler_seed=dict(type='DistSamplerSeedHook'),
    timer=dict(type='IterTimerHook'),
    visualization=dict(type='SegVisualizationHook'))
default_scope = 'mmseg'
depths = [
    2,
    2,
    6,
    2,
]
embed_multi = dict(decay_mult=0.0, lr_mult=1.0)
env_cfg = dict(
    cudnn_benchmark=True,
    dist_cfg=dict(backend='nccl'),
    mp_cfg=dict(mp_start_method='fork', opencv_num_threads=0))
img_ratios = [
    0.5,
    0.75,
    1.0,
    1.25,
    1.5,
    1.75,
]
launcher = 'none'
load_from = '../checkpoint_files/ade20k/mask2former/mask2former_swin-t_8xb2-160k_ade20k-512x512_20221203_234230-7d64e5dd.pth'
log_level = 'INFO'
log_processor = dict(by_epoch=False)
model = dict(
    backbone=dict(
        attn_drop_rate=0.0,
        depths=[
            2,
            2,
            6,
            2,
        ],
        drop_path_rate=0.3,
        drop_rate=0.0,
        embed_dims=96,
        frozen_stages=-1,
        init_cfg=dict(
            checkpoint=
            'https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/swin/swin_tiny_patch4_window7_224_20220317-1cdeb081.pth',
            type='Pretrained'),
        mlp_ratio=4,
        num_heads=[
            3,
            6,
            12,
            24,
        ],
        out_indices=(
            0,
            1,
            2,
            3,
        ),
        patch_norm=True,
        qk_scale=None,
        qkv_bias=True,
        type='SwinTransformer',
        window_size=7,
        with_cp=False),
    data_preprocessor=dict(
        bgr_to_rgb=True,
        corruption='jpeg_compression',
        mean=[
            123.675,
            116.28,
            103.53,
        ],
        pad_val=0,
        seg_pad_val=255,
        size=(
            512,
            512,
        ),
        std=[
            58.395,
            57.12,
            57.375,
        ],
        test_cfg=dict(size_divisor=32),
        type='SegDataPreProcessor'),
    decode_head=dict(
        align_corners=False,
        enforce_decoder_input_project=False,
        feat_channels=256,
        in_channels=[
            96,
            192,
            384,
            768,
        ],
        loss_cls=dict(
            class_weight=[
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                0.1,
            ],
            loss_weight=2.0,
            reduction='mean',
            type='mmdet.CrossEntropyLoss',
            use_sigmoid=False),
        loss_dice=dict(
            activate=True,
            eps=1.0,
            loss_weight=5.0,
            naive_dice=True,
            reduction='mean',
            type='mmdet.DiceLoss',
            use_sigmoid=True),
        loss_mask=dict(
            loss_weight=5.0,
            reduction='mean',
            type='mmdet.CrossEntropyLoss',
            use_sigmoid=True),
        num_classes=150,
        num_queries=100,
        num_transformer_feat_level=3,
        out_channels=256,
        pixel_decoder=dict(
            act_cfg=dict(type='ReLU'),
            encoder=dict(
                init_cfg=None,
                layer_cfg=dict(
                    ffn_cfg=dict(
                        act_cfg=dict(inplace=True, type='ReLU'),
                        embed_dims=256,
                        feedforward_channels=1024,
                        ffn_drop=0.0,
                        num_fcs=2),
                    self_attn_cfg=dict(
                        batch_first=True,
                        dropout=0.0,
                        embed_dims=256,
                        im2col_step=64,
                        init_cfg=None,
                        norm_cfg=None,
                        num_heads=8,
                        num_levels=3,
                        num_points=4)),
                num_layers=6),
            init_cfg=None,
            norm_cfg=dict(num_groups=32, type='GN'),
            num_outs=3,
            positional_encoding=dict(normalize=True, num_feats=128),
            type='mmdet.MSDeformAttnPixelDecoder'),
        positional_encoding=dict(normalize=True, num_feats=128),
        strides=[
            4,
            8,
            16,
            32,
        ],
        train_cfg=dict(
            assigner=dict(
                match_costs=[
                    dict(type='mmdet.ClassificationCost', weight=2.0),
                    dict(
                        type='mmdet.CrossEntropyLossCost',
                        use_sigmoid=True,
                        weight=5.0),
                    dict(
                        eps=1.0,
                        pred_act=True,
                        type='mmdet.DiceCost',
                        weight=5.0),
                ],
                type='mmdet.HungarianAssigner'),
            importance_sample_ratio=0.75,
            num_points=12544,
            oversample_ratio=3.0,
            sampler=dict(type='mmdet.MaskPseudoSampler')),
        transformer_decoder=dict(
            init_cfg=None,
            layer_cfg=dict(
                cross_attn_cfg=dict(
                    attn_drop=0.0,
                    batch_first=True,
                    dropout_layer=None,
                    embed_dims=256,
                    num_heads=8,
                    proj_drop=0.0),
                ffn_cfg=dict(
                    act_cfg=dict(inplace=True, type='ReLU'),
                    add_identity=True,
                    dropout_layer=None,
                    embed_dims=256,
                    feedforward_channels=2048,
                    ffn_drop=0.0,
                    num_fcs=2),
                self_attn_cfg=dict(
                    attn_drop=0.0,
                    batch_first=True,
                    dropout_layer=None,
                    embed_dims=256,
                    num_heads=8,
                    proj_drop=0.0)),
            num_layers=9,
            return_intermediate=True),
        type='Mask2FormerHead'),
    test_cfg=dict(mode='whole'),
    train_cfg=dict(),
    type='EncoderDecoder')
num_classes = 150
optim_wrapper = dict(
    clip_grad=dict(max_norm=0.01, norm_type=2),
    optimizer=dict(
        betas=(
            0.9,
            0.999,
        ),
        eps=1e-08,
        lr=0.0001,
        type='AdamW',
        weight_decay=0.05),
    paramwise_cfg=dict(
        custom_keys=dict({
            'absolute_pos_embed':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone':
            dict(decay_mult=1.0, lr_mult=0.1),
            'backbone.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.patch_embed.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.0.blocks.0.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.0.blocks.1.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.0.downsample.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.1.blocks.0.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.1.blocks.1.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.1.downsample.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.0.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.1.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.2.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.3.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.4.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.blocks.5.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.2.downsample.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.3.blocks.0.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'backbone.stages.3.blocks.1.norm':
            dict(decay_mult=0.0, lr_mult=0.1),
            'level_embed':
            dict(decay_mult=0.0, lr_mult=1.0),
            'query_embed':
            dict(decay_mult=0.0, lr_mult=1.0),
            'query_feat':
            dict(decay_mult=0.0, lr_mult=1.0),
            'relative_position_bias_table':
            dict(decay_mult=0.0, lr_mult=0.1)
        }),
        norm_decay_mult=0.0),
    type='OptimWrapper')
optimizer = dict(
    betas=(
        0.9,
        0.999,
    ),
    eps=1e-08,
    lr=0.0001,
    type='AdamW',
    weight_decay=0.05)
param_scheduler = [
    dict(
        begin=0,
        by_epoch=False,
        end=160000,
        eta_min=0,
        power=0.9,
        type='PolyLR'),
]
pretrained = 'https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/swin/swin_tiny_patch4_window7_224_20220317-1cdeb081.pth'
resume = False
test_cfg = dict(type='TestLoop')
test_dataloader = dict(
    batch_size=1,
    dataset=dict(
        data_prefix=dict(
            img_path='images/validation',
            seg_map_path='annotations/validation'),
        data_root='data/ade/ADEChallengeData2016',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(keep_ratio=True, scale=(
                2048,
                512,
            ), type='Resize'),
            dict(reduce_zero_label=True, type='LoadAnnotations'),
            dict(type='PackSegInputs'),
        ],
        type='ADE20KDataset'),
    num_workers=4,
    persistent_workers=True,
    sampler=dict(shuffle=False, type='DefaultSampler'))
test_evaluator = dict(
    iou_metrics=[
        'mIoU',
    ], type='IoUMetric')
test_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(keep_ratio=True, scale=(
        2048,
        512,
    ), type='Resize'),
    dict(reduce_zero_label=True, type='LoadAnnotations'),
    dict(type='PackSegInputs'),
]
train_cfg = dict(
    max_iters=160000, type='IterBasedTrainLoop', val_interval=5000)
train_dataloader = dict(
    batch_size=2,
    dataset=dict(
        data_prefix=dict(
            img_path='images/training', seg_map_path='annotations/training'),
        data_root='data/ade/ADEChallengeData2016',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(reduce_zero_label=True, type='LoadAnnotations'),
            dict(
                max_size=2048,
                resize_type='ResizeShortestEdge',
                scales=[
                    256,
                    307,
                    358,
                    409,
                    460,
                    512,
                    563,
                    614,
                    665,
                    716,
                    768,
                    819,
                    870,
                    921,
                    972,
                    1024,
                ],
                type='RandomChoiceResize'),
            dict(
                cat_max_ratio=0.75, crop_size=(
                    512,
                    512,
                ), type='RandomCrop'),
            dict(prob=0.5, type='RandomFlip'),
            dict(type='PhotoMetricDistortion'),
            dict(type='PackSegInputs'),
        ],
        type='ADE20KDataset'),
    num_workers=4,
    persistent_workers=True,
    sampler=dict(shuffle=True, type='InfiniteSampler'))
train_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(reduce_zero_label=True, type='LoadAnnotations'),
    dict(
        max_size=2048,
        resize_type='ResizeShortestEdge',
        scales=[
            256,
            307,
            358,
            409,
            460,
            512,
            563,
            614,
            665,
            716,
            768,
            819,
            870,
            921,
            972,
            1024,
        ],
        type='RandomChoiceResize'),
    dict(cat_max_ratio=0.75, crop_size=(
        512,
        512,
    ), type='RandomCrop'),
    dict(prob=0.5, type='RandomFlip'),
    dict(type='PhotoMetricDistortion'),
    dict(type='PackSegInputs'),
]
tta_model = dict(type='SegTTAModel')
tta_pipeline = [
    dict(backend_args=None, type='LoadImageFromFile'),
    dict(
        transforms=[
            [
                dict(keep_ratio=True, scale_factor=0.5, type='Resize'),
                dict(keep_ratio=True, scale_factor=0.75, type='Resize'),
                dict(keep_ratio=True, scale_factor=1.0, type='Resize'),
                dict(keep_ratio=True, scale_factor=1.25, type='Resize'),
                dict(keep_ratio=True, scale_factor=1.5, type='Resize'),
                dict(keep_ratio=True, scale_factor=1.75, type='Resize'),
            ],
            [
                dict(direction='horizontal', prob=0.0, type='RandomFlip'),
                dict(direction='horizontal', prob=1.0, type='RandomFlip'),
            ],
            [
                dict(type='LoadAnnotations'),
            ],
            [
                dict(type='PackSegInputs'),
            ],
        ],
        type='TestTimeAug'),
]
val_cfg = dict(type='ValLoop')
val_dataloader = dict(
    batch_size=1,
    dataset=dict(
        data_prefix=dict(
            img_path='images/validation',
            seg_map_path='annotations/validation'),
        data_root='data/ade/ADEChallengeData2016',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(keep_ratio=True, scale=(
                2048,
                512,
            ), type='Resize'),
            dict(reduce_zero_label=True, type='LoadAnnotations'),
            dict(type='PackSegInputs'),
        ],
        type='ADE20KDataset'),
    num_workers=4,
    persistent_workers=True,
    sampler=dict(shuffle=False, type='DefaultSampler'))
val_evaluator = dict(
    iou_metrics=[
        'mIoU',
    ], type='IoUMetric')
vis_backends = [
    dict(type='LocalVisBackend'),
]
visualizer = dict(
    name='visualizer',
    type='SegLocalVisualizer',
    vis_backends=[
        dict(type='LocalVisBackend'),
    ])
work_dir = '../corruptions/work_dirs/ade20k/mask2former/mask2former_swin-t_8xb2-160k_ade20k-512x512/jpeg_compression'

09/21 07:29:19 - mmengine - INFO - Distributed training is not used, all SyncBatchNorm (SyncBN) layers in the model will be automatically reverted to BatchNormXd layers if they are used.
09/21 07:29:19 - mmengine - INFO - Hooks will be executed in the following order:
before_run:
(VERY_HIGH   ) RuntimeInfoHook                    
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
before_train:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_train_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(NORMAL      ) DistSamplerSeedHook                
 -------------------- 
before_train_iter:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_train_iter:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(NORMAL      ) SegVisualizationHook               
(BELOW_NORMAL) LoggerHook                         
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
after_train_epoch:
(NORMAL      ) IterTimerHook                      
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_val:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
before_val_epoch:
(NORMAL      ) IterTimerHook                      
 -------------------- 
before_val_iter:
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_val_iter:
(NORMAL      ) IterTimerHook                      
(NORMAL      ) SegVisualizationHook               
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_val_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
after_val:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
after_train:
(VERY_HIGH   ) RuntimeInfoHook                    
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_test:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
before_test_epoch:
(NORMAL      ) IterTimerHook                      
 -------------------- 
before_test_iter:
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_test_iter:
(NORMAL      ) IterTimerHook                      
(NORMAL      ) SegVisualizationHook               
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_test_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_test:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
after_run:
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
09/21 07:29:20 - mmengine - WARNING - The prefix is not set in metric class IoUMetric.
Loads checkpoint by local backend from path: ../checkpoint_files/ade20k/mask2former/mask2former_swin-t_8xb2-160k_ade20k-512x512_20221203_234230-7d64e5dd.pth
09/21 07:29:21 - mmengine - INFO - Load checkpoint from ../checkpoint_files/ade20k/mask2former/mask2former_swin-t_8xb2-160k_ade20k-512x512_20221203_234230-7d64e5dd.pth
09/21 07:29:39 - mmengine - INFO - Iter(test) [  50/2000]    eta: 0:11:39  time: 0.2584  data_time: 0.0014  memory: 12733  
09/21 07:29:45 - mmengine - INFO - Iter(test) [ 100/2000]    eta: 0:07:34  time: 0.1603  data_time: 0.0015  memory: 12714  
09/21 07:29:48 - mmengine - INFO - Iter(test) [ 150/2000]    eta: 0:05:37  time: 0.0698  data_time: 0.0016  memory: 853  
09/21 07:29:54 - mmengine - INFO - Iter(test) [ 200/2000]    eta: 0:04:55  time: 0.0723  data_time: 0.0015  memory: 12754  
09/21 07:29:59 - mmengine - INFO - Iter(test) [ 250/2000]    eta: 0:04:25  time: 0.0724  data_time: 0.0014  memory: 12756  
09/21 07:30:03 - mmengine - INFO - Iter(test) [ 300/2000]    eta: 0:03:59  time: 0.0683  data_time: 0.0015  memory: 12721  
09/21 07:30:08 - mmengine - INFO - Iter(test) [ 350/2000]    eta: 0:03:42  time: 0.0659  data_time: 0.0014  memory: 12728  
09/21 07:30:12 - mmengine - INFO - Iter(test) [ 400/2000]    eta: 0:03:25  time: 0.0721  data_time: 0.0013  memory: 12694  
09/21 07:30:16 - mmengine - INFO - Iter(test) [ 450/2000]    eta: 0:03:08  time: 0.0686  data_time: 0.0013  memory: 894  
09/21 07:30:19 - mmengine - INFO - Iter(test) [ 500/2000]    eta: 0:02:54  time: 0.0705  data_time: 0.0014  memory: 853  
09/21 07:30:23 - mmengine - INFO - Iter(test) [ 550/2000]    eta: 0:02:43  time: 0.0689  data_time: 0.0015  memory: 961  
09/21 07:30:26 - mmengine - INFO - Iter(test) [ 600/2000]    eta: 0:02:32  time: 0.0688  data_time: 0.0016  memory: 958  
09/21 07:30:30 - mmengine - INFO - Iter(test) [ 650/2000]    eta: 0:02:24  time: 0.1538  data_time: 0.0013  memory: 12735  
09/21 07:30:35 - mmengine - INFO - Iter(test) [ 700/2000]    eta: 0:02:17  time: 0.0757  data_time: 0.0015  memory: 12724  
09/21 07:30:39 - mmengine - INFO - Iter(test) [ 750/2000]    eta: 0:02:09  time: 0.0701  data_time: 0.0013  memory: 1014  
09/21 07:30:42 - mmengine - INFO - Iter(test) [ 800/2000]    eta: 0:02:01  time: 0.0727  data_time: 0.0015  memory: 853  
09/21 07:30:46 - mmengine - INFO - Iter(test) [ 850/2000]    eta: 0:01:54  time: 0.0681  data_time: 0.0015  memory: 826  
09/21 07:30:49 - mmengine - INFO - Iter(test) [ 900/2000]    eta: 0:01:47  time: 0.0617  data_time: 0.0013  memory: 906  
09/21 07:30:52 - mmengine - INFO - Iter(test) [ 950/2000]    eta: 0:01:40  time: 0.0698  data_time: 0.0014  memory: 934  
09/21 07:30:56 - mmengine - INFO - Iter(test) [1000/2000]    eta: 0:01:34  time: 0.0690  data_time: 0.0013  memory: 934  
09/21 07:31:00 - mmengine - INFO - Iter(test) [1050/2000]    eta: 0:01:29  time: 0.0725  data_time: 0.0014  memory: 12737  
09/21 07:31:04 - mmengine - INFO - Iter(test) [1100/2000]    eta: 0:01:23  time: 0.0657  data_time: 0.0014  memory: 931  
09/21 07:31:07 - mmengine - INFO - Iter(test) [1150/2000]    eta: 0:01:18  time: 0.0687  data_time: 0.0030  memory: 904  
09/21 07:31:10 - mmengine - INFO - Iter(test) [1200/2000]    eta: 0:01:12  time: 0.0655  data_time: 0.0014  memory: 1839  
09/21 07:31:15 - mmengine - INFO - Iter(test) [1250/2000]    eta: 0:01:08  time: 0.0698  data_time: 0.0012  memory: 12716  
09/21 07:31:18 - mmengine - INFO - Iter(test) [1300/2000]    eta: 0:01:02  time: 0.0709  data_time: 0.0013  memory: 853  
09/21 07:31:22 - mmengine - INFO - Iter(test) [1350/2000]    eta: 0:00:57  time: 0.0684  data_time: 0.0013  memory: 853  
09/21 07:31:25 - mmengine - INFO - Iter(test) [1400/2000]    eta: 0:00:53  time: 0.0681  data_time: 0.0014  memory: 931  
09/21 07:31:28 - mmengine - INFO - Iter(test) [1450/2000]    eta: 0:00:48  time: 0.0682  data_time: 0.0014  memory: 934  
09/21 07:31:31 - mmengine - INFO - Iter(test) [1500/2000]    eta: 0:00:43  time: 0.0688  data_time: 0.0013  memory: 852  
09/21 07:31:35 - mmengine - INFO - Iter(test) [1550/2000]    eta: 0:00:38  time: 0.0731  data_time: 0.0014  memory: 934  
09/21 07:31:39 - mmengine - INFO - Iter(test) [1600/2000]    eta: 0:00:34  time: 0.0710  data_time: 0.0014  memory: 826  
09/21 07:31:43 - mmengine - INFO - Iter(test) [1650/2000]    eta: 0:00:30  time: 0.0644  data_time: 0.0013  memory: 12725  
09/21 07:31:46 - mmengine - INFO - Iter(test) [1700/2000]    eta: 0:00:25  time: 0.0682  data_time: 0.0015  memory: 930  
09/21 07:31:50 - mmengine - INFO - Iter(test) [1750/2000]    eta: 0:00:21  time: 0.0658  data_time: 0.0013  memory: 957  
09/21 07:31:53 - mmengine - INFO - Iter(test) [1800/2000]    eta: 0:00:16  time: 0.0728  data_time: 0.0014  memory: 853  
09/21 07:31:57 - mmengine - INFO - Iter(test) [1850/2000]    eta: 0:00:12  time: 0.0739  data_time: 0.0015  memory: 773  
09/21 07:32:00 - mmengine - INFO - Iter(test) [1900/2000]    eta: 0:00:08  time: 0.0697  data_time: 0.0013  memory: 987  
09/21 07:32:04 - mmengine - INFO - Iter(test) [1950/2000]    eta: 0:00:04  time: 0.0661  data_time: 0.0013  memory: 1224  
09/21 07:32:07 - mmengine - INFO - Iter(test) [2000/2000]    eta: 0:00:00  time: 0.0625  data_time: 0.0024  memory: 1012  
09/21 07:32:07 - mmengine - INFO - per class results:
09/21 07:32:07 - mmengine - INFO - 
+---------------------+-------+-------+
|        Class        |  IoU  |  Acc  |
+---------------------+-------+-------+
|         wall        | 76.71 | 87.72 |
|       building      | 82.26 |  93.3 |
|         sky         |  94.3 | 97.12 |
|        floor        | 79.07 | 90.38 |
|         tree        | 72.21 | 83.32 |
|       ceiling       | 82.28 | 88.64 |
|         road        | 82.32 | 89.85 |
|         bed         | 88.71 | 94.68 |
|      windowpane     | 59.57 | 77.59 |
|        grass        | 66.58 | 83.86 |
|       cabinet       | 57.52 | 71.03 |
|       sidewalk      | 62.52 |  78.9 |
|        person       | 80.27 | 87.98 |
|        earth        |  34.1 | 43.35 |
|         door        | 41.85 | 57.16 |
|        table        | 58.37 | 76.01 |
|       mountain      | 59.19 | 77.11 |
|        plant        | 52.46 | 63.96 |
|       curtain       | 73.07 | 83.59 |
|        chair        | 55.92 | 69.27 |
|         car         | 84.35 | 92.43 |
|        water        | 50.35 | 67.34 |
|       painting      | 68.25 | 83.78 |
|         sofa        | 63.85 | 82.57 |
|        shelf        | 42.73 | 61.62 |
|        house        | 54.43 | 69.08 |
|         sea         | 49.28 | 66.54 |
|        mirror       | 62.96 |  73.5 |
|         rug         | 60.28 | 69.18 |
|        field        | 28.48 |  46.0 |
|       armchair      | 40.95 | 60.74 |
|         seat        | 59.99 | 85.12 |
|        fence        | 41.64 | 55.82 |
|         desk        | 44.95 | 69.21 |
|         rock        | 51.83 | 79.11 |
|       wardrobe      |  47.4 |  65.6 |
|         lamp        | 62.96 | 75.77 |
|       bathtub       | 70.89 | 81.82 |
|       railing       | 36.64 | 51.29 |
|       cushion       | 52.16 | 65.78 |
|         base        | 26.63 | 56.22 |
|         box         | 21.52 | 34.03 |
|        column       | 45.05 | 55.33 |
|      signboard      | 36.66 | 50.67 |
|   chest of drawers  | 34.44 | 59.08 |
|       counter       | 37.97 | 52.78 |
|         sand        | 35.54 | 54.41 |
|         sink        | 72.54 | 82.36 |
|      skyscraper     |  66.1 | 79.66 |
|      fireplace      |  71.0 | 86.44 |
|     refrigerator    | 76.76 |  88.5 |
|      grandstand     | 36.94 |  62.4 |
|         path        | 19.21 | 32.56 |
|        stairs       | 30.78 | 35.84 |
|        runway       | 73.85 | 94.68 |
|         case        | 39.56 | 47.51 |
|      pool table     | 90.94 | 95.71 |
|        pillow       |  53.4 | 65.51 |
|     screen door     | 39.17 | 46.18 |
|       stairway      | 34.85 | 47.37 |
|        river        | 15.13 | 34.47 |
|        bridge       | 67.63 | 83.48 |
|       bookcase      | 33.87 | 44.59 |
|        blind        | 28.54 | 29.76 |
|     coffee table    | 63.64 | 79.94 |
|        toilet       | 83.44 | 87.73 |
|        flower       | 35.93 |  47.1 |
|         book        | 46.68 | 64.14 |
|         hill        |  6.49 | 11.48 |
|        bench        | 51.01 | 59.43 |
|      countertop     | 53.71 | 67.37 |
|        stove        |  72.8 | 82.09 |
|         palm        | 49.22 | 73.04 |
|    kitchen island   | 38.88 | 63.49 |
|       computer      | 53.95 | 59.42 |
|     swivel chair    | 47.11 | 64.42 |
|         boat        | 48.56 | 86.56 |
|         bar         | 57.13 | 67.51 |
|    arcade machine   | 57.66 | 62.76 |
|        hovel        | 28.08 | 45.64 |
|         bus         |  66.9 | 90.36 |
|        towel        | 63.15 |  72.4 |
|        light        | 58.37 |  71.6 |
|        truck        |  34.7 | 55.74 |
|        tower        | 16.81 | 20.59 |
|      chandelier     |  62.6 | 75.48 |
|        awning       | 34.87 | 41.14 |
|     streetlight     | 26.85 | 41.59 |
|        booth        | 32.39 | 50.35 |
| television receiver | 58.86 | 76.61 |
|       airplane      | 56.56 |  65.6 |
|      dirt track     |  8.41 | 13.32 |
|       apparel       | 33.85 | 52.23 |
|         pole        |  22.4 |  32.1 |
|         land        |  6.54 |  8.23 |
|      bannister      | 18.41 | 26.07 |
|      escalator      | 34.93 | 38.47 |
|       ottoman       | 40.18 | 51.98 |
|        bottle       | 22.09 | 26.85 |
|        buffet       | 33.01 | 39.44 |
|        poster       | 26.35 | 38.34 |
|        stage        | 23.43 | 33.03 |
|         van         | 44.84 | 62.58 |
|         ship        |  6.81 |  6.97 |
|       fountain      | 20.41 |  21.7 |
|    conveyer belt    |  59.8 | 91.15 |
|        canopy       | 29.07 | 40.75 |
|        washer       | 64.35 | 70.34 |
|      plaything      | 25.25 | 41.86 |
|    swimming pool    | 29.67 | 46.84 |
|        stool        | 43.08 |  59.7 |
|        barrel       | 18.16 | 51.06 |
|        basket       | 32.36 | 38.96 |
|      waterfall      | 51.92 | 71.17 |
|         tent        |  83.7 | 97.48 |
|         bag         | 11.24 | 13.41 |
|       minibike      | 73.44 | 83.01 |
|        cradle       | 83.14 | 96.74 |
|         oven        | 25.08 | 51.76 |
|         ball        |  32.5 | 36.76 |
|         food        | 39.39 | 45.35 |
|         step        |  5.14 |  6.56 |
|         tank        | 24.71 | 25.83 |
|      trade name     | 30.31 | 35.46 |
|      microwave      | 65.06 | 71.34 |
|         pot         | 42.31 | 49.14 |
|        animal       | 55.11 | 56.92 |
|       bicycle       | 59.01 |  77.2 |
|         lake        | 69.16 | 73.22 |
|      dishwasher     | 62.22 | 79.88 |
|        screen       | 52.62 | 71.07 |
|       blanket       | 15.43 | 18.49 |
|      sculpture      | 41.29 | 51.23 |
|         hood        | 63.57 | 70.07 |
|        sconce       | 48.53 | 59.09 |
|         vase        | 40.74 | 55.33 |
|    traffic light    | 31.93 | 47.68 |
|         tray        |  13.4 | 20.33 |
|        ashcan       | 40.36 | 61.75 |
|         fan         | 55.11 |  75.2 |
|         pier        | 62.96 |  84.4 |
|      crt screen     |  1.96 |  6.7  |
|        plate        | 54.01 | 66.12 |
|       monitor       |  2.74 |  4.61 |
|    bulletin board   |  43.9 | 58.96 |
|        shower       |  1.48 | 17.86 |
|       radiator      | 49.38 | 61.33 |
|        glass        | 14.78 | 16.65 |
|        clock        | 32.74 | 36.57 |
|         flag        | 31.63 |  35.2 |
+---------------------+-------+-------+
09/21 07:32:07 - mmengine - INFO - Iter(test) [2000/2000]    aAcc: 82.0000  mIoU: 46.5600  mAcc: 59.2100  data_time: 0.0016  time: 0.0830
Finished processing corruption type: jpeg_compression
Runtime: 1726896728

============================= JOB FEEDBACK =============================

NodeName=uc2n487
Job ID: 24247180
Cluster: uc2
User/Group: ma_mkacar/ma_ma
State: COMPLETED (exit code 0)
Nodes: 1
Cores per node: 16
CPU Utilized: 06:21:15
CPU Efficiency: 6.21% of 4-06:19:44 core-walltime
Job Wall-clock time: 06:23:44
Memory Utilized: 2.57 GB
Memory Efficiency: 2.57% of 100.00 GB
